dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,313,"  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {
",10,0,0,1,3,1,0,8,0,19,69,2,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,316,"  double u1u1 = u1.getNormSq();
",2,0,0,1,2,0,4,0,0,6,29,5,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,317,"  double u2u2 = u2.getNormSq();
",2,0,0,1,2,0,4,0,0,6,29,5,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,318,"  double v1v1 = v1.getNormSq();
",2,0,0,1,2,0,4,0,0,6,29,5,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,319,"  double v2v2 = v2.getNormSq();
",2,0,0,1,2,0,4,0,0,6,29,5,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,320,"  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {
",8,5,0,5,11,0,0,0,0,13,63,4,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,325,"  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);
",8,1,0,2,4,0,4,2,0,16,50,4,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,328,"  double u1u2   = u1.dotProduct(u2);
",2,0,0,1,2,0,6,0,0,8,34,5,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,329,"  double v1v2   = v1.dotProduct(v2);
",2,0,0,1,2,0,6,0,0,8,34,5,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,330,"  double coeffU = u1u2 / u1u1;
",6,1,0,0,0,0,0,0,0,7,28,5,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,331,"  double coeffV = v1v2 / u1u1;
",6,1,0,0,0,0,0,0,0,7,28,5,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,332,"  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));
",14,5,0,3,6,0,4,0,0,23,79,5,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,333,"  double alpha  = coeffU - beta * coeffV;
",8,2,0,0,0,0,0,0,0,10,39,5,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,334,"  v2 = new Vector3D(alpha, v1, beta, v2);
",10,0,0,1,2,0,0,2,0,13,39,4,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,337,"  Vector3D uRef  = u1;
",4,0,0,0,0,0,0,2,0,6,20,4,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,338,"  Vector3D vRef  = v1;
",4,0,0,0,0,0,0,2,0,6,20,4,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,339,"  Vector3D v1Su1 = v1.subtract(u1);
",2,0,0,1,2,0,6,2,0,10,33,4,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,340,"  Vector3D v2Su2 = v2.subtract(u2);
",2,0,0,1,2,0,6,2,0,10,33,4,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,341,"  Vector3D k     = v1Su1.crossProduct(v2Su2);
",2,0,0,1,2,0,6,2,0,10,43,4,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,342,"  Vector3D u3    = u1.crossProduct(u2);
",2,0,0,1,2,0,6,2,0,10,37,4,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,343,"  double c       = k.dotProduct(u3);
",2,0,0,1,2,0,6,0,0,8,34,5,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,344,"  if (c == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,378,"  c = FastMath.sqrt(c);
",2,0,0,1,2,0,6,0,0,9,21,4,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,379,"  double inv = 1.0 / (c + c);
",6,2,0,1,2,0,0,0,0,8,27,5,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,380,"  q1 = inv * k.getX();
",4,1,0,1,2,0,4,0,0,10,20,4,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,381,"  q2 = inv * k.getY();
",4,1,0,1,2,0,4,0,0,10,20,4,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,382,"  q3 = inv * k.getZ();
",4,1,0,1,2,0,4,0,0,10,20,4,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,385,"   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,
",6,3,0,2,5,0,8,2,0,20,53,4,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,388,"  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());
",2,2,0,3,6,0,10,0,0,15,46,4,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,390,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,481,"    return q0;
",2,0,0,0,0,1,0,0,0,2,10,4,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,224,"        return x * x + y * y + z * z;
",12,5,0,0,0,1,0,0,0,17,29,4,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,134,"    public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {
",10,0,0,1,3,1,0,4,0,15,65,2,0.10000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,135,"        this.x = MathUtils.linearCombination(a1, u1.x, a2, u2.x);
",10,0,0,1,2,0,8,0,0,19,57,4,0.10000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,136,"        this.y = MathUtils.linearCombination(a1, u1.y, a2, u2.y);
",10,0,0,1,2,0,8,0,0,19,57,4,0.10000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,137,"        this.z = MathUtils.linearCombination(a1, u1.z, a2, u2.z);
",10,0,0,1,2,0,8,0,0,19,57,4,0.10000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,138,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.10000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,134,"                  boolean needsNormalization) {
",2,0,0,0,2,0,0,0,0,2,29,3,0.07143,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,136,"    if (needsNormalization) {
",2,0,0,1,3,0,0,0,0,2,25,4,0.07143,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,145,"    this.q0 = q0;
",4,0,0,0,0,0,0,0,0,5,13,4,0.07143,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,146,"    this.q1 = q1;
",4,0,0,0,0,0,0,0,0,5,13,4,0.07143,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,147,"    this.q2 = q2;
",4,0,0,0,0,0,0,0,0,5,13,4,0.07143,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,148,"    this.q3 = q3;
",4,0,0,0,0,0,0,0,0,5,13,4,0.07143,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,150,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07143,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,98,"  public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);
",2,0,0,1,2,3,0,4,0,10,80,2,0.07143,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,120,"    public Vector3D(double a, Vector3D u) {
",6,0,0,1,3,1,0,2,0,9,39,2,0.06250,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,121,"        this.x = a * u.x;
",8,1,0,0,0,0,0,0,0,10,17,4,0.06250,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,122,"        this.y = a * u.y;
",8,1,0,0,0,0,0,0,0,10,17,4,0.06250,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,123,"        this.z = a * u.z;
",8,1,0,0,0,0,0,0,0,10,17,4,0.06250,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,124,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06250,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2375,"        final double ca1        = SPLIT_FACTOR * a1;
",6,1,0,0,0,1,0,0,0,8,44,4,0.05882,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2376,"        final double a1High     = ca1 - (ca1 - a1);
",8,2,0,1,2,1,0,0,0,11,43,4,0.05882,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2377,"        final double a1Low      = a1 - a1High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.05882,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2378,"        final double cb1        = SPLIT_FACTOR * b1;
",6,1,0,0,0,1,0,0,0,8,44,4,0.05882,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2379,"        final double b1High     = cb1 - (cb1 - b1);
",8,2,0,1,2,1,0,0,0,11,43,4,0.05882,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2380,"        final double b1Low      = b1 - b1High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.05882,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2383,"        final double prod1High  = a1 * b1;
",6,1,0,0,0,1,0,0,0,8,34,4,0.05882,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2384,"        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.05882,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2387,"        final double ca2        = SPLIT_FACTOR * a2;
",6,1,0,0,0,1,0,0,0,8,44,4,0.05882,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2388,"        final double a2High     = ca2 - (ca2 - a2);
",8,2,0,1,2,1,0,0,0,11,43,4,0.05882,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2389,"        final double a2Low      = a2 - a2High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.05882,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2390,"        final double cb2        = SPLIT_FACTOR * b2;
",6,1,0,0,0,1,0,0,0,8,44,4,0.05882,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2391,"        final double b2High     = cb2 - (cb2 - b2);
",8,2,0,1,2,1,0,0,0,11,43,4,0.05882,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2392,"        final double b2Low      = b2 - b2High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.05882,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2395,"        final double prod2High  = a2 * b2;
",6,1,0,0,0,1,0,0,0,8,34,4,0.05882,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2396,"        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.05882,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2399,"        final double s12High    = prod1High + prod2High;
",6,1,0,0,0,1,0,0,0,8,48,4,0.05882,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2400,"        final double s12Prime   = s12High - prod2High;
",6,1,0,0,0,1,0,0,0,8,46,4,0.05882,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2401,"        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);
",12,4,0,3,6,1,0,0,0,17,86,4,0.05882,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2405,"        return s12High + (prod1Low + prod2Low + s12Low);
",8,2,0,1,2,1,0,0,0,10,48,4,0.05882,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,261,"        final Vector3D v3 = (Vector3D) v;
",4,0,0,1,2,1,0,4,0,9,33,4,0.05882,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,262,"        return new Vector3D(x - v3.x, y - v3.y, z - v3.z);
",18,3,0,1,2,1,0,2,0,23,50,5,0.05882,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,437,"        final Vector3D v3 = (Vector3D) v;
",4,0,0,1,2,1,0,4,0,9,33,4,0.05882,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,438,"        return new Vector3D(MathUtils.linearCombination(y, v3.z, -z, v3.y),
",10,0,0,1,3,1,6,2,0,19,67,5,0.05882,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2448,"        final double ca1        = SPLIT_FACTOR * a1;
",6,1,0,0,0,1,0,0,0,8,44,4,0.05556,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2449,"        final double a1High     = ca1 - (ca1 - a1);
",8,2,0,1,2,1,0,0,0,11,43,4,0.05556,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2450,"        final double a1Low      = a1 - a1High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.05556,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2451,"        final double cb1        = SPLIT_FACTOR * b1;
",6,1,0,0,0,1,0,0,0,8,44,4,0.05556,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2452,"        final double b1High     = cb1 - (cb1 - b1);
",8,2,0,1,2,1,0,0,0,11,43,4,0.05556,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2453,"        final double b1Low      = b1 - b1High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.05556,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2456,"        final double prod1High  = a1 * b1;
",6,1,0,0,0,1,0,0,0,8,34,4,0.05556,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2457,"        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.05556,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2460,"        final double ca2        = SPLIT_FACTOR * a2;
",6,1,0,0,0,1,0,0,0,8,44,4,0.05556,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2461,"        final double a2High     = ca2 - (ca2 - a2);
",8,2,0,1,2,1,0,0,0,11,43,4,0.05556,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2462,"        final double a2Low      = a2 - a2High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.05556,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2463,"        final double cb2        = SPLIT_FACTOR * b2;
",6,1,0,0,0,1,0,0,0,8,44,4,0.05556,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2464,"        final double b2High     = cb2 - (cb2 - b2);
",8,2,0,1,2,1,0,0,0,11,43,4,0.05556,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2465,"        final double b2Low      = b2 - b2High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.05556,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2468,"        final double prod2High  = a2 * b2;
",6,1,0,0,0,1,0,0,0,8,34,4,0.05556,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2469,"        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.05556,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2472,"        final double ca3        = SPLIT_FACTOR * a3;
",6,1,0,0,0,1,0,0,0,8,44,4,0.05556,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2473,"        final double a3High     = ca3 - (ca3 - a3);
",8,2,0,1,2,1,0,0,0,11,43,4,0.05556,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2474,"        final double a3Low      = a3 - a3High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.05556,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2475,"        final double cb3        = SPLIT_FACTOR * b3;
",6,1,0,0,0,1,0,0,0,8,44,4,0.05556,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2476,"        final double b3High     = cb3 - (cb3 - b3);
",8,2,0,1,2,1,0,0,0,11,43,4,0.05556,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2477,"        final double b3Low      = b3 - b3High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.05556,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2480,"        final double prod3High  = a3 * b3;
",6,1,0,0,0,1,0,0,0,8,34,4,0.05556,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2481,"        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.05556,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2484,"        final double s12High    = prod1High + prod2High;
",6,1,0,0,0,1,0,0,0,8,48,4,0.05556,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2485,"        final double s12Prime   = s12High - prod2High;
",6,1,0,0,0,1,0,0,0,8,46,4,0.05556,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2486,"        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);
",12,4,0,3,6,1,0,0,0,17,86,4,0.05556,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2489,"        final double s123High   = s12High + prod3High;
",6,1,0,0,0,1,0,0,0,8,46,4,0.05556,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2490,"        final double s123Prime  = s123High - prod3High;
",6,1,0,0,0,1,0,0,0,8,47,4,0.05556,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2491,"        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);
",12,4,0,3,6,1,0,0,0,17,87,4,0.05556,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2495,"        return s123High + (prod1Low + prod2Low + prod3Low + s12Low + s123Low);
",12,2,0,1,2,1,0,0,0,14,70,4,0.05556,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,428,"        final Vector3D v3 = (Vector3D) v;
",4,0,0,1,2,1,0,4,0,9,33,4,0.05556,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,429,"        return MathUtils.linearCombination(x, v3.x, y, v3.y, z, v3.z);
",12,0,0,1,2,1,10,0,0,22,62,5,0.05556,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,181,"        return x;
",2,0,0,0,0,1,0,0,0,2,9,4,0.05263,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,189,"        return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.05263,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,197,"        return z;
",2,0,0,0,0,1,0,0,0,2,9,4,0.05263,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,85,"    private static final long[] FACTORIALS = new long[] {
",2,0,0,2,5,3,0,0,0,5,53,2,0.04545,0
defect4j,math,org/apache/commons/math/util/FastMath,52,80,"    private static final double EXP_INT_TABLE_A[] = new double[1500];
",2,0,0,2,4,3,0,0,0,5,65,2,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,85,"    private static final double EXP_INT_TABLE_B[] = new double[1500];
",2,0,0,2,4,3,0,0,0,5,65,2,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,90,"    private static final double EXP_FRAC_TABLE_A[] = new double[1025];
",2,0,0,2,4,3,0,0,0,5,66,2,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,95,"    private static final double EXP_FRAC_TABLE_B[] = new double[1025];
",2,0,0,2,4,3,0,0,0,5,66,2,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,98,"    private static final double FACT[] = new double[20];
",2,0,0,2,4,3,0,0,0,5,52,2,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,101,"    private static final double LN_MANT[][] = new double[1024][];
",2,0,0,4,8,3,0,0,0,5,61,2,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,110,"    private static final double LN_SPLIT_COEF[][] = {
",2,0,0,2,5,3,0,0,0,5,49,2,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,130,"    private static final double LN_QUICK_COEF[][] = {
",2,0,0,2,5,3,0,0,0,5,49,2,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,143,"    private static final double LN_HI_PREC_COEF[][] = {
",2,0,0,2,5,3,0,0,0,5,51,2,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,153,"    private static final double SINE_TABLE_A[] = new double[14];
",2,0,0,2,4,3,0,0,0,5,60,2,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,156,"    private static final double SINE_TABLE_B[] = new double[14];
",2,0,0,2,4,3,0,0,0,5,60,2,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,159,"    private static final double COSINE_TABLE_A[] = new double[14];
",2,0,0,2,4,3,0,0,0,5,62,2,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,162,"    private static final double COSINE_TABLE_B[] = new double[14];
",2,0,0,2,4,3,0,0,0,5,62,2,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,165,"    private static final double TANGENT_TABLE_A[] = new double[14];
",2,0,0,2,4,3,0,0,0,5,63,2,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,168,"    private static final double TANGENT_TABLE_B[] = new double[14];
",2,0,0,2,4,3,0,0,0,5,63,2,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,171,"    private static final long RECIP_2PI[] = new long[] {
",2,0,0,2,5,3,0,0,0,5,52,2,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,192,"    private static final long PI_O_4_BITS[] = new long[] {
",2,0,0,2,5,3,0,0,0,5,54,2,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,200,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};
",2,0,0,2,4,3,0,0,0,5,126,2,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,203,"    private static final double CBRTTWO[] = { 0.6299605249474366,
",2,0,0,1,3,3,0,0,0,5,61,2,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,233,"        FACT[0] = 1.0;
",0,0,1,1,2,0,0,0,0,3,14,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,234,"        for (i = 1; i < FACT.length; i++) {
",10,1,0,1,3,0,0,0,0,13,35,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,235,"            FACT[i] = FACT[i-1] * i;
",4,2,1,2,4,0,0,0,0,13,24,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,238,"        double tmp[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,29,5,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,239,"        double recip[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,31,5,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,242,"        for (i = 0; i < 750; i++) {
",6,1,0,1,3,0,0,0,0,9,27,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,243,"            expint(i, tmp);
",0,0,0,1,2,0,6,0,0,6,15,7,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,244,"            EXP_INT_TABLE_A[i+750] = tmp[0];
",2,1,1,2,4,0,0,0,0,8,32,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,245,"            EXP_INT_TABLE_B[i+750] = tmp[1];
",2,1,1,2,4,0,0,0,0,8,32,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,247,"            if (i != 0) {
",2,1,0,1,3,0,0,0,0,3,13,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,249,"                splitReciprocal(tmp, recip);
",0,0,0,1,2,0,6,0,0,6,28,9,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,250,"                EXP_INT_TABLE_A[750-i] = recip[0];
",2,1,1,2,4,0,0,0,0,8,34,8,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,251,"                EXP_INT_TABLE_B[750-i] = recip[1];
",2,1,1,2,4,0,0,0,0,8,34,8,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,256,"        for (i = 0; i < EXP_FRAC_TABLE_A.length; i++) {
",10,1,0,1,3,0,0,0,0,13,47,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,257,"            slowexp(i/1024.0, tmp);
",2,1,0,1,2,0,4,0,0,7,23,7,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,258,"            EXP_FRAC_TABLE_A[i] = tmp[0];
",0,0,1,2,4,0,0,0,0,7,29,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,259,"            EXP_FRAC_TABLE_B[i] = tmp[1];
",0,0,1,2,4,0,0,0,0,7,29,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,263,"        for (i = 0; i < LN_MANT.length; i++) {
",10,1,0,1,3,0,0,0,0,13,38,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,264,"            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );
",4,2,0,4,8,0,4,0,0,10,79,7,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,265,"            LN_MANT[i] = slowLog(d);
",0,0,1,2,4,0,4,0,0,9,24,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,269,"        buildSinCosTables();
",0,0,0,1,2,0,2,0,0,2,20,5,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,270,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,302,"        return Math.sqrt(a);
",0,0,0,1,2,1,6,0,0,6,20,5,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1012,"        final double xs[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,34,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1013,"        final double ys[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,34,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1014,"        final double facts[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,37,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1015,"        final double as[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,34,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1016,"        split(x, xs);
",0,0,0,1,2,0,6,0,0,6,13,5,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1017,"        ys[0] = ys[1] = 0.0;
",0,0,1,2,4,0,0,0,0,6,20,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1019,"        for (int i = 19; i >= 0; i--) {
",6,1,0,1,3,0,0,0,0,8,31,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1020,"            splitMult(xs, ys, as);
",0,0,0,1,2,0,8,0,0,8,22,7,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1021,"            ys[0] = as[0];
",0,0,1,2,4,0,0,0,0,5,14,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1022,"            ys[1] = as[1];
",0,0,1,2,4,0,0,0,0,5,14,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1024,"            split(FACT[i], as);
",0,0,1,2,4,0,4,0,0,8,19,7,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1025,"            splitReciprocal(as, facts);
",0,0,0,1,2,0,6,0,0,6,27,7,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1027,"            splitAdd(ys, facts, as);
",0,0,0,1,2,0,8,0,0,8,24,7,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1028,"            ys[0] = as[0];
",0,0,1,2,4,0,0,0,0,5,14,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1029,"            ys[1] = as[1];
",0,0,1,2,4,0,0,0,0,5,14,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1032,"        if (result != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1033,"            result[0] = ys[0];
",0,0,1,2,4,0,0,0,0,5,18,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1034,"            result[1] = ys[1];
",0,0,1,2,4,0,0,0,0,5,18,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1037,"        return ys[0] + ys[1];
",0,1,1,2,4,1,0,0,0,5,21,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1046,"        if (d < 8e298 && d > -8e298) {
",4,3,0,1,3,0,0,0,0,8,30,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1047,"            final double a = d * HEX_40000000;
",6,1,0,0,0,1,0,0,0,8,34,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1048,"            split[0] = (d + a) - a;
",6,2,1,2,4,0,0,0,0,11,23,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1049,"            split[1] = d - split[0];
",2,1,1,2,4,0,0,0,0,8,24,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1050,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1055,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1062,"        final double c = a[0] + a[1];
",2,1,1,2,4,1,0,0,0,8,29,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1063,"        final double d = -(c - a[0] - a[1]);
",4,1,1,3,6,1,0,0,0,11,36,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1065,"        if (c < 8e298 && c > -8e298) {
",4,3,0,1,3,0,0,0,0,8,30,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1066,"            double z = c * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,28,7,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1067,"            a[0] = (c + z) - z;
",6,2,1,2,4,0,0,0,0,11,19,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1068,"            a[1] = c - a[0] + d;
",4,2,1,2,4,0,0,0,0,11,20,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1069,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1070,"            double z = c * 9.31322574615478515625E-10;
",4,1,0,0,0,0,0,0,0,5,42,7,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1071,"            a[0] = (c + z - c) * HEX_40000000;
",8,3,1,2,4,0,0,0,0,14,34,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1072,"            a[1] = c - a[0] + d;
",4,2,1,2,4,0,0,0,0,11,20,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1074,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1082,"        ans[0] = a[0] * b[0];
",0,1,1,3,6,0,0,0,0,8,21,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1083,"        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];
",0,5,1,7,14,0,0,0,0,20,49,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1086,"        resplit(ans);
",0,0,0,1,2,0,4,0,0,4,13,5,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1087,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1095,"        ans[0] = a[0] + b[0];
",0,1,1,3,6,0,0,0,0,8,21,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1096,"        ans[1] = a[1] + b[1];
",0,1,1,3,6,0,0,0,0,8,21,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1098,"        resplit(ans);
",0,0,0,1,2,0,4,0,0,4,13,5,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1099,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1120,"        final double b = 1.0/4194304.0;
",2,1,0,0,0,1,0,0,0,4,31,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1121,"        final double a = 1.0 - b;
",4,1,0,0,0,1,0,0,0,6,25,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1123,"        if (in[0] == 0.0) {
",0,1,1,2,5,0,0,0,0,3,19,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1128,"        result[0] = a / in[0];
",2,1,1,2,4,0,0,0,0,8,22,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1129,"        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);
",4,7,1,9,18,0,0,0,0,26,60,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1131,"        if (result[1] != result[1]) { // can happen if result[1] is NAN
",0,1,1,4,9,0,0,0,0,5,63,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1132,"            result[1] = 0.0;
",0,0,1,1,2,0,0,0,0,3,16,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1136,"        resplit(result);
",0,0,0,1,2,0,4,0,0,4,16,5,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1138,"        for (int i = 0; i < 2; i++) {
",6,1,0,1,3,0,0,0,0,8,29,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1140,"            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -
",2,6,1,4,8,0,0,0,0,16,58,7,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1143,"            err = err * (result[0] + result[1]);
",4,2,1,3,6,0,0,0,0,11,36,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1145,"            result[1] += err;
",2,0,1,1,2,0,0,0,0,5,17,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1147,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1155,"        final double xs[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,34,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1156,"        final double ys[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,34,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1157,"        final double zs[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,34,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1160,"        split(a[0], xs);
",0,0,1,2,4,0,4,0,0,6,16,5,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1161,"        split(b[0], ys);
",0,0,1,2,4,0,4,0,0,6,16,5,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1162,"        splitMult(xs, ys, zs);
",0,0,0,1,2,0,8,0,0,8,22,5,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1164,"        result[0] = zs[0];
",0,0,1,2,4,0,0,0,0,5,18,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1165,"        result[1] = zs[1];
",0,0,1,2,4,0,0,0,0,5,18,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1168,"        split(b[1], ys);
",0,0,1,2,4,0,4,0,0,6,16,5,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1169,"        splitMult(xs, ys, zs);
",0,0,0,1,2,0,8,0,0,8,22,5,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1171,"        double tmp = result[0] + zs[0];
",2,1,1,2,4,0,0,0,0,7,31,5,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1172,"        result[1] = result[1] - (tmp - result[0] - zs[0]);
",2,2,1,5,10,0,0,0,0,13,50,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1173,"        result[0] = tmp;
",2,0,1,1,2,0,0,0,0,5,16,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1174,"        tmp = result[0] + zs[1];
",2,1,1,2,4,0,0,0,0,8,24,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1175,"        result[1] = result[1] - (tmp - result[0] - zs[1]);
",2,2,1,5,10,0,0,0,0,13,50,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1176,"        result[0] = tmp;
",2,0,1,1,2,0,0,0,0,5,16,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1179,"        split(a[1], xs);
",0,0,1,2,4,0,4,0,0,6,16,5,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1180,"        split(b[0], ys);
",0,0,1,2,4,0,4,0,0,6,16,5,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1181,"        splitMult(xs, ys, zs);
",0,0,0,1,2,0,8,0,0,8,22,5,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1183,"        tmp = result[0] + zs[0];
",2,1,1,2,4,0,0,0,0,8,24,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1184,"        result[1] = result[1] - (tmp - result[0] - zs[0]);
",2,2,1,5,10,0,0,0,0,13,50,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1185,"        result[0] = tmp;
",2,0,1,1,2,0,0,0,0,5,16,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1186,"        tmp = result[0] + zs[1];
",2,1,1,2,4,0,0,0,0,8,24,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1187,"        result[1] = result[1] - (tmp - result[0] - zs[1]);
",2,2,1,5,10,0,0,0,0,13,50,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1188,"        result[0] = tmp;
",2,0,1,1,2,0,0,0,0,5,16,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1191,"        split(a[1], xs);
",0,0,1,2,4,0,4,0,0,6,16,5,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1192,"        split(b[1], ys);
",0,0,1,2,4,0,4,0,0,6,16,5,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1193,"        splitMult(xs, ys, zs);
",0,0,0,1,2,0,8,0,0,8,22,5,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1195,"        tmp = result[0] + zs[0];
",2,1,1,2,4,0,0,0,0,8,24,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1196,"        result[1] = result[1] - (tmp - result[0] - zs[0]);
",2,2,1,5,10,0,0,0,0,13,50,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1197,"        result[0] = tmp;
",2,0,1,1,2,0,0,0,0,5,16,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1198,"        tmp = result[0] + zs[1];
",2,1,1,2,4,0,0,0,0,8,24,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1199,"        result[1] = result[1] - (tmp - result[0] - zs[1]);
",2,2,1,5,10,0,0,0,0,13,50,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1200,"        result[0] = tmp;
",2,0,1,1,2,0,0,0,0,5,16,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1201,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1210,"        final double xs[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,34,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1211,"        final double as[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,34,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1212,"        final double ys[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,34,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1221,"        xs[0] = 2.718281828459045;
",0,0,1,1,2,0,0,0,0,3,26,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1222,"        xs[1] = 1.4456468917292502E-16;
",0,0,1,1,2,0,0,0,0,3,31,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1224,"        split(1.0, ys);
",0,0,0,1,2,0,4,0,0,4,15,5,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1226,"        while (p > 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1227,"            if ((p & 1) != 0) {
",2,2,0,2,5,0,0,0,0,4,19,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1228,"                quadMult(ys, xs, as);
",0,0,0,1,2,0,8,0,0,8,21,9,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1229,"                ys[0] = as[0]; ys[1] = as[1];
",0,0,1,4,8,0,0,0,0,10,29,8,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1232,"            quadMult(xs, xs, as);
",0,0,0,1,2,0,8,0,0,8,21,7,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1233,"            xs[0] = as[0]; xs[1] = as[1];
",0,0,1,4,8,0,0,0,0,10,29,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1235,"            p >>= 1;
",2,0,0,0,0,0,0,0,0,3,8,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1238,"        if (result != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1239,"            result[0] = ys[0];
",0,0,1,2,4,0,0,0,0,5,18,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1240,"            result[1] = ys[1];
",0,0,1,2,4,0,0,0,0,5,18,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1242,"            resplit(result);
",0,0,0,1,2,0,4,0,0,4,16,7,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1245,"        return ys[0] + ys[1];
",0,1,1,2,4,1,0,0,0,5,21,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1743,"        double x[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,27,5,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1744,"        double x2[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,28,5,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1745,"        double y[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,27,5,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1746,"        double a[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,27,5,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1748,"        split(xi, x);
",0,0,0,1,2,0,6,0,0,6,13,5,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1751,"        x[0] += 1.0;
",0,0,1,1,2,0,0,0,0,3,12,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1752,"        resplit(x);
",0,0,0,1,2,0,4,0,0,4,11,5,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1753,"        splitReciprocal(x, a);
",0,0,0,1,2,0,6,0,0,6,22,5,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1754,"        x[0] -= 2.0;
",0,0,1,1,2,0,0,0,0,3,12,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1755,"        resplit(x);
",0,0,0,1,2,0,4,0,0,4,11,5,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1756,"        splitMult(x, a, y);
",0,0,0,1,2,0,8,0,0,8,19,5,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1757,"        x[0] = y[0];
",0,0,1,2,4,0,0,0,0,5,12,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1758,"        x[1] = y[1];
",0,0,1,2,4,0,0,0,0,5,12,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1761,"        splitMult(x, x, x2);
",0,0,0,1,2,0,8,0,0,8,20,5,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1767,"        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];
",4,1,1,3,6,0,0,0,0,10,48,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1768,"        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];
",4,1,1,3,6,0,0,0,0,10,48,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1770,"        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {
",10,2,0,1,3,0,0,0,0,13,51,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1771,"            splitMult(y, x2, a);
",0,0,0,1,2,0,8,0,0,8,20,7,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1772,"            y[0] = a[0];
",0,0,1,2,4,0,0,0,0,5,12,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1773,"            y[1] = a[1];
",0,0,1,2,4,0,0,0,0,5,12,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1774,"            splitAdd(y, LN_SPLIT_COEF[i], a);
",0,0,1,2,4,0,6,0,0,10,33,7,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1775,"            y[0] = a[0];
",0,0,1,2,4,0,0,0,0,5,12,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1776,"            y[1] = a[1];
",0,0,1,2,4,0,0,0,0,5,12,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1779,"        splitMult(y, x, a);
",0,0,0,1,2,0,8,0,0,8,19,5,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1780,"        y[0] = a[0];
",0,0,1,2,4,0,0,0,0,5,12,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1781,"        y[1] = a[1];
",0,0,1,2,4,0,0,0,0,5,12,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1783,"        return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1793,"        final double xs[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,34,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1794,"        final double ys[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,34,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1795,"        final double facts[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,37,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1796,"        final double as[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,34,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1797,"        split(x, xs);
",0,0,0,1,2,0,6,0,0,6,13,5,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1798,"        ys[0] = ys[1] = 0.0;
",0,0,1,2,4,0,0,0,0,6,20,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1800,"        for (int i = 19; i >= 0; i--) {
",6,1,0,1,3,0,0,0,0,8,31,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1801,"            splitMult(xs, ys, as);
",0,0,0,1,2,0,8,0,0,8,22,7,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1802,"            ys[0] = as[0]; ys[1] = as[1];
",0,0,1,4,8,0,0,0,0,10,29,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1804,"            if ( (i & 1) == 0) {
",2,2,0,2,5,0,0,0,0,4,20,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1805,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1808,"            split(FACT[i], as);
",0,0,1,2,4,0,4,0,0,8,19,7,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1809,"            splitReciprocal(as, facts);
",0,0,0,1,2,0,6,0,0,6,27,7,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1811,"            if ( (i & 2) != 0 ) {
",2,2,0,2,5,0,0,0,0,4,21,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1812,"                facts[0] = -facts[0];
",0,0,1,2,4,0,0,0,0,6,21,8,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1813,"                facts[1] = -facts[1];
",0,0,1,2,4,0,0,0,0,6,21,8,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1816,"            splitAdd(ys, facts, as);
",0,0,0,1,2,0,8,0,0,8,24,7,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1817,"            ys[0] = as[0]; ys[1] = as[1];
",0,0,1,4,8,0,0,0,0,10,29,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1820,"        if (result != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1821,"            result[0] = ys[0];
",0,0,1,2,4,0,0,0,0,5,18,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1822,"            result[1] = ys[1];
",0,0,1,2,4,0,0,0,0,5,18,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1825,"        return ys[0] + ys[1];
",0,1,1,2,4,1,0,0,0,5,21,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1836,"        final double xs[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,34,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1837,"        final double ys[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,34,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1838,"        final double facts[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,37,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1839,"        final double as[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,34,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1840,"        split(x, xs);
",0,0,0,1,2,0,6,0,0,6,13,5,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1841,"        ys[0] = ys[1] = 0.0;
",0,0,1,2,4,0,0,0,0,6,20,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1843,"        for (int i = 19; i >= 0; i--) {
",6,1,0,1,3,0,0,0,0,8,31,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1844,"            splitMult(xs, ys, as);
",0,0,0,1,2,0,8,0,0,8,22,7,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1845,"            ys[0] = as[0]; ys[1] = as[1];
",0,0,1,4,8,0,0,0,0,10,29,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1847,"            if ( (i & 1) != 0) {
",2,2,0,2,5,0,0,0,0,4,20,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1848,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1851,"            split(FACT[i], as);
",0,0,1,2,4,0,4,0,0,8,19,7,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1852,"            splitReciprocal(as, facts);
",0,0,0,1,2,0,6,0,0,6,27,7,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1854,"            if ( (i & 2) != 0 ) {
",2,2,0,2,5,0,0,0,0,4,21,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1855,"                facts[0] = -facts[0];
",0,0,1,2,4,0,0,0,0,6,21,8,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1856,"                facts[1] = -facts[1];
",0,0,1,2,4,0,0,0,0,6,21,8,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1859,"            splitAdd(ys, facts, as);
",0,0,0,1,2,0,8,0,0,8,24,7,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1860,"            ys[0] = as[0]; ys[1] = as[1];
",0,0,1,4,8,0,0,0,0,10,29,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1863,"        if (result != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1864,"            result[0] = ys[0];
",0,0,1,2,4,0,0,0,0,5,18,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1865,"            result[1] = ys[1];
",0,0,1,2,4,0,0,0,0,5,18,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1868,"        return ys[0] + ys[1];
",0,1,1,2,4,1,0,0,0,5,21,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1874,"        final double result[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,38,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1877,"        for (int i = 0; i < 7; i++) {
",6,1,0,1,3,0,0,0,0,8,29,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1878,"            double x = i / 8.0;
",4,1,0,0,0,0,0,0,0,5,19,7,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1880,"            slowSin(x, result);
",0,0,0,1,2,0,6,0,0,6,19,7,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1881,"            SINE_TABLE_A[i] = result[0];
",0,0,1,2,4,0,0,0,0,7,28,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1882,"            SINE_TABLE_B[i] = result[1];
",0,0,1,2,4,0,0,0,0,7,28,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1884,"            slowCos(x, result);
",0,0,0,1,2,0,6,0,0,6,19,7,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1885,"            COSINE_TABLE_A[i] = result[0];
",0,0,1,2,4,0,0,0,0,7,30,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1886,"            COSINE_TABLE_B[i] = result[1];
",0,0,1,2,4,0,0,0,0,7,30,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1890,"        for (int i = 7; i < 14; i++) {
",6,1,0,1,3,0,0,0,0,8,30,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1891,"            double xs[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,28,7,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1892,"            double ys[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,28,7,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1893,"            double as[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,28,7,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1894,"            double bs[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,28,7,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1895,"            double temps[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,31,7,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1897,"            if ( (i & 1) == 0) {
",2,2,0,2,5,0,0,0,0,4,20,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1899,"                xs[0] = SINE_TABLE_A[i/2];
",2,1,1,2,4,0,0,0,0,8,26,8,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1900,"                xs[1] = SINE_TABLE_B[i/2];
",2,1,1,2,4,0,0,0,0,8,26,8,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1901,"                ys[0] = COSINE_TABLE_A[i/2];
",2,1,1,2,4,0,0,0,0,8,28,8,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1902,"                ys[1] = COSINE_TABLE_B[i/2];
",2,1,1,2,4,0,0,0,0,8,28,8,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1905,"                splitMult(xs, ys, result);
",0,0,0,1,2,0,8,0,0,8,26,9,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1906,"                SINE_TABLE_A[i] = result[0] * 2.0;
",0,1,1,2,4,0,0,0,0,8,34,8,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1907,"                SINE_TABLE_B[i] = result[1] * 2.0;
",0,1,1,2,4,0,0,0,0,8,34,8,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1910,"                splitMult(ys, ys, as);
",0,0,0,1,2,0,8,0,0,8,22,9,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1911,"                splitMult(xs, xs, temps);
",0,0,0,1,2,0,8,0,0,8,25,9,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1912,"                temps[0] = -temps[0];
",0,0,1,2,4,0,0,0,0,6,21,8,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1913,"                temps[1] = -temps[1];
",0,0,1,2,4,0,0,0,0,6,21,8,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1914,"                splitAdd(as, temps, result);
",0,0,0,1,2,0,8,0,0,8,28,9,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1915,"                COSINE_TABLE_A[i] = result[0];
",0,0,1,2,4,0,0,0,0,7,30,8,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1916,"                COSINE_TABLE_B[i] = result[1];
",0,0,1,2,4,0,0,0,0,7,30,8,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1918,"                xs[0] = SINE_TABLE_A[i/2];
",2,1,1,2,4,0,0,0,0,8,26,8,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1919,"                xs[1] = SINE_TABLE_B[i/2];
",2,1,1,2,4,0,0,0,0,8,26,8,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1920,"                ys[0] = COSINE_TABLE_A[i/2];
",2,1,1,2,4,0,0,0,0,8,28,8,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1921,"                ys[1] = COSINE_TABLE_B[i/2];
",2,1,1,2,4,0,0,0,0,8,28,8,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1922,"                as[0] = SINE_TABLE_A[i/2+1];
",2,2,1,2,4,0,0,0,0,9,28,8,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1923,"                as[1] = SINE_TABLE_B[i/2+1];
",2,2,1,2,4,0,0,0,0,9,28,8,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1924,"                bs[0] = COSINE_TABLE_A[i/2+1];
",2,2,1,2,4,0,0,0,0,9,30,8,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1925,"                bs[1] = COSINE_TABLE_B[i/2+1];
",2,2,1,2,4,0,0,0,0,9,30,8,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1928,"                splitMult(xs, bs, temps);
",0,0,0,1,2,0,8,0,0,8,25,9,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1929,"                splitMult(ys, as, result);
",0,0,0,1,2,0,8,0,0,8,26,9,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1930,"                splitAdd(result, temps, result);
",0,0,0,1,2,0,8,0,0,8,32,9,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1931,"                SINE_TABLE_A[i] = result[0];
",0,0,1,2,4,0,0,0,0,7,28,8,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1932,"                SINE_TABLE_B[i] = result[1];
",0,0,1,2,4,0,0,0,0,7,28,8,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1935,"                splitMult(ys, bs, result);
",0,0,0,1,2,0,8,0,0,8,26,9,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1936,"                splitMult(xs, as, temps);
",0,0,0,1,2,0,8,0,0,8,25,9,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1937,"                temps[0] = -temps[0];
",0,0,1,2,4,0,0,0,0,6,21,8,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1938,"                temps[1] = -temps[1];
",0,0,1,2,4,0,0,0,0,6,21,8,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1939,"                splitAdd(result, temps, result);
",0,0,0,1,2,0,8,0,0,8,32,9,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1940,"                COSINE_TABLE_A[i] = result[0];
",0,0,1,2,4,0,0,0,0,7,30,8,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1941,"                COSINE_TABLE_B[i] = result[1];
",0,0,1,2,4,0,0,0,0,7,30,8,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1946,"        for (int i = 0; i < 14; i++) {
",6,1,0,1,3,0,0,0,0,8,30,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1947,"            double xs[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,28,7,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1948,"            double ys[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,28,7,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1949,"            double as[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,28,7,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1951,"            as[0] = COSINE_TABLE_A[i];
",0,0,1,2,4,0,0,0,0,7,26,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1952,"            as[1] = COSINE_TABLE_B[i];
",0,0,1,2,4,0,0,0,0,7,26,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1954,"            splitReciprocal(as, ys);
",0,0,0,1,2,0,6,0,0,6,24,7,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1956,"            xs[0] = SINE_TABLE_A[i];
",0,0,1,2,4,0,0,0,0,7,24,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1957,"            xs[1] = SINE_TABLE_B[i];
",0,0,1,2,4,0,0,0,0,7,24,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1959,"            splitMult(xs, ys, as);
",0,0,0,1,2,0,8,0,0,8,22,7,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1961,"            TANGENT_TABLE_A[i] = as[0];
",0,0,1,2,4,0,0,0,0,7,27,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1962,"            TANGENT_TABLE_B[i] = as[1];
",0,0,1,2,4,0,0,0,0,7,27,6,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1965,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03704,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,93,"    public Vector3D(double x, double y, double z) {
",8,0,0,1,3,1,0,0,0,9,47,2,0.03704,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,94,"        this.x = x;
",4,0,0,0,0,0,0,0,0,5,11,4,0.03704,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,95,"        this.y = y;
",4,0,0,0,0,0,0,0,0,5,11,4,0.03704,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,96,"        this.z = z;
",4,0,0,0,0,0,0,0,0,5,11,4,0.03704,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,97,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03704,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,39,"    public static final Vector3D ZERO   = new Vector3D(0, 0, 0);
",2,0,0,1,2,3,0,4,0,9,60,2,0.03704,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,42,"    public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);
",2,0,0,1,2,3,0,4,0,9,60,2,0.03704,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,45,"    public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);
",2,0,0,1,2,3,0,4,0,10,62,2,0.03704,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,48,"    public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);
",2,0,0,1,2,3,0,4,0,9,60,2,0.03704,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,51,"    public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);
",2,0,0,1,2,3,0,4,0,10,62,2,0.03704,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,54,"    public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);
",2,0,0,1,2,3,0,4,0,9,60,2,0.03704,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,57,"    public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);
",2,0,0,1,2,3,0,4,0,10,62,2,0.03704,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,61,"    public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);
",14,0,0,1,2,3,0,4,0,21,84,2,0.03704,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,65,"    public static final Vector3D POSITIVE_INFINITY =
",2,0,0,0,0,3,0,2,0,7,48,2,0.03704,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,69,"    public static final Vector3D NEGATIVE_INFINITY =
",2,0,0,0,0,3,0,2,0,7,48,2,0.03704,0
defect4j,math,org/apache/commons/math/MathException,52,61,"    public MathException() {
",2,0,0,1,3,1,0,0,0,3,24,2,0.00000,0
defect4j,math,org/apache/commons/math/MathException,52,62,"        this.pattern   = LocalizedFormats.SIMPLE_MESSAGE;
",6,0,0,0,0,0,0,0,0,7,49,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,52,63,"        this.arguments = new Object[] { """" };
",2,0,0,2,4,0,0,2,0,6,37,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,52,64,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/MathException,52,74,"    public MathException(Localizable pattern, Object ... arguments) {
",6,0,0,1,3,1,0,4,0,11,65,2,0.00000,0
defect4j,math,org/apache/commons/math/MathException,52,75,"      this.pattern   = pattern;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,52,76,"      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();
",4,1,0,3,6,0,4,2,0,12,73,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,52,77,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/MathException,52,87,"        super(rootCause);
",2,0,0,1,2,0,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,52,88,"        this.pattern   = LocalizedFormats.SIMPLE_MESSAGE;
",6,0,0,0,0,0,0,0,0,7,49,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,52,89,"        this.arguments = new Object[] { (rootCause == null) ? """" : rootCause.getMessage() };
",4,1,0,4,8,0,4,2,0,13,84,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,52,90,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/MathException,52,103,"      super(rootCause);
",2,0,0,1,2,0,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,52,104,"      this.pattern   = pattern;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,52,105,"      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();
",4,1,0,3,6,0,4,2,0,12,73,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,52,106,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/MathException,52,111,"        throw new UnsupportedOperationException(DEPRECATION_MESSAGE);
",2,0,0,1,2,0,0,2,0,4,61,5,0.00000,0
defect4j,math,org/apache/commons/math/MathException,52,116,"        throw new UnsupportedOperationException(DEPRECATION_MESSAGE);
",2,0,0,1,2,0,0,2,0,4,61,5,0.00000,0
defect4j,math,org/apache/commons/math/MathException,52,121,"        throw new UnsupportedOperationException(DEPRECATION_MESSAGE);
",2,0,0,1,2,0,0,2,0,4,61,5,0.00000,0
defect4j,math,org/apache/commons/math/MathException,52,126,"        throw new UnsupportedOperationException(DEPRECATION_MESSAGE);
",2,0,0,1,2,0,0,2,0,4,61,5,0.00000,0
defect4j,math,org/apache/commons/math/MathException,52,137,"        if (pattern != null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,52,138,"            return new MessageFormat(pattern.getLocalizedString(locale), locale).format(arguments);
",2,0,0,3,6,1,10,2,0,14,87,7,0.00000,0
defect4j,math,org/apache/commons/math/MathException,52,140,"        return """";
",0,0,0,0,0,1,0,0,0,1,10,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,52,146,"        return getMessage(Locale.US);
",4,0,0,1,2,1,2,0,0,6,29,5,0.00000,0
defect4j,math,org/apache/commons/math/MathException,52,152,"        return getMessage(Locale.getDefault());
",0,0,0,2,4,1,6,0,0,6,39,5,0.00000,0
defect4j,math,org/apache/commons/math/MathException,52,160,"        printStackTrace(System.err);
",4,0,0,1,2,0,2,0,0,6,28,5,0.00000,0
defect4j,math,org/apache/commons/math/MathException,52,161,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/MathException,52,170,"        synchronized (out) {
",2,0,0,1,3,0,0,0,0,2,20,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,52,171,"            PrintWriter pw = new PrintWriter(out, false);
",4,0,0,1,2,0,0,4,0,9,45,6,0.00000,0
defect4j,math,org/apache/commons/math/MathException,52,172,"            printStackTrace(pw);
",0,0,0,1,2,0,4,0,0,4,20,7,0.00000,0
defect4j,math,org/apache/commons/math/MathException,52,174,"            pw.flush();
",0,0,0,1,2,0,4,0,0,4,11,7,0.00000,0
defect4j,math,org/apache/commons/math/MathException,52,175,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/MathException,52,176,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1946,"    public static enum OrderDirection {
",2,0,0,0,1,2,0,0,0,4,35,2,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1948,"        INCREASING,
",2,0,0,0,0,0,0,0,0,2,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1950,"        DECREASING
",2,0,0,0,0,0,0,0,0,2,10,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,101,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,102,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,115,"        long s = (long)x + (long)y;
",6,1,0,2,4,0,0,0,0,7,27,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,116,"        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {
",12,3,0,1,3,0,0,0,0,15,53,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,117,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);
",8,0,0,1,2,0,0,2,0,10,79,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,119,"        return (int)s;
",2,0,0,1,2,1,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,133,"        return addAndCheck(a, b, LocalizedFormats.OVERFLOW_IN_ADDITION);
",4,0,0,1,2,1,6,0,0,10,64,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,149,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,151,"            ret = addAndCheck(b, a, pattern);
",2,0,0,1,2,0,8,0,0,11,33,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,155,"            if (a < 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,156,"                if (b < 0) {
",2,1,0,1,3,0,0,0,0,3,12,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,158,"                    if (Long.MIN_VALUE - b <= a) {
",8,2,0,1,3,0,0,0,0,10,30,10,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,159,"                        ret = a + b;
",6,1,0,0,0,0,0,0,0,8,12,12,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,161,"                        throw new MathArithmeticException(pattern, a, b);
",6,0,0,1,2,0,0,2,0,8,49,13,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,165,"                    ret = a + b;
",6,1,0,0,0,0,0,0,0,8,12,10,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,172,"                if (a <= Long.MAX_VALUE - b) {
",8,2,0,1,3,0,0,0,0,10,30,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,173,"                    ret = a + b;
",6,1,0,0,0,0,0,0,0,8,12,10,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,175,"                    throw new MathArithmeticException(pattern, a, b);
",6,0,0,1,2,0,0,2,0,8,49,11,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,179,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,208,"        checkBinomial(n, k);
",0,0,0,1,2,0,6,0,0,6,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,209,"        if ((n == k) || (k == 0)) {
",6,3,0,3,7,0,0,0,0,9,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,210,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,212,"        if ((k == 1) || (k == n - 1)) {
",6,4,0,3,7,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,213,"            return n;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,216,"        if (k > n / 2) {
",4,2,0,1,3,0,0,0,0,6,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,217,"            return binomialCoefficient(n, n - k);
",4,1,0,1,2,1,4,0,0,9,37,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,225,"        long result = 1;
",2,0,0,0,0,0,0,0,0,2,16,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,226,"        if (n <= 61) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,228,"            int i = n - k + 1;
",6,2,0,0,0,0,0,0,0,8,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,229,"            for (int j = 1; j <= k; j++) {
",8,1,0,1,3,0,0,0,0,10,30,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,230,"                result = result * i / j;
",8,2,0,0,0,0,0,0,0,11,24,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,231,"                i++;
",2,0,0,0,0,0,0,0,0,3,4,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,233,"        } else if (n <= 66) {
",2,1,0,1,4,0,0,0,0,3,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,236,"            int i = n - k + 1;
",6,2,0,0,0,0,0,0,0,8,18,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,237,"            for (int j = 1; j <= k; j++) {
",8,1,0,1,3,0,0,0,0,10,30,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,244,"                final long d = gcd(i, j);
",2,0,0,1,2,1,6,0,0,9,25,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,245,"                result = (result / (j / d)) * (i / d);
",12,4,0,3,6,0,0,0,0,17,38,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,246,"                i++;
",2,0,0,0,0,0,0,0,0,3,4,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,248,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,252,"            int i = n - k + 1;
",6,2,0,0,0,0,0,0,0,8,18,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,253,"            for (int j = 1; j <= k; j++) {
",8,1,0,1,3,0,0,0,0,10,30,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,254,"                final long d = gcd(i, j);
",2,0,0,1,2,1,6,0,0,9,25,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,255,"                result = mulAndCheck(result / (j / d), i / d);
",12,3,0,2,4,0,2,0,0,18,46,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,256,"                i++;
",2,0,0,0,0,0,0,0,0,3,4,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,259,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,285,"        checkBinomial(n, k);
",0,0,0,1,2,0,6,0,0,6,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,286,"        if ((n == k) || (k == 0)) {
",6,3,0,3,7,0,0,0,0,9,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,287,"            return 1d;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,289,"        if ((k == 1) || (k == n - 1)) {
",6,4,0,3,7,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,290,"            return n;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,292,"        if (k > n/2) {
",4,2,0,1,3,0,0,0,0,6,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,293,"            return binomialCoefficientDouble(n, n - k);
",4,1,0,1,2,1,4,0,0,9,43,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,295,"        if (n < 67) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,296,"            return binomialCoefficient(n,k);
",0,0,0,1,2,1,6,0,0,6,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,299,"        double result = 1d;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,300,"        for (int i = 1; i <= k; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,301,"             result *= (double)(n - k + i) / (double)i;
",10,3,0,3,6,0,0,0,0,14,42,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,304,"        return FastMath.floor(result + 0.5);
",2,1,0,1,2,1,4,0,0,7,36,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,326,"        checkBinomial(n, k);
",0,0,0,1,2,0,6,0,0,6,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,327,"        if ((n == k) || (k == 0)) {
",6,3,0,3,7,0,0,0,0,9,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,328,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,330,"        if ((k == 1) || (k == n - 1)) {
",6,4,0,3,7,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,331,"            return FastMath.log(n);
",0,0,0,1,2,1,6,0,0,6,23,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,338,"        if (n < 67) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,339,"            return FastMath.log(binomialCoefficient(n,k));
",0,0,0,2,4,1,10,0,0,10,46,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,346,"        if (n < 1030) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,347,"            return FastMath.log(binomialCoefficientDouble(n, k));
",0,0,0,2,4,1,10,0,0,10,53,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,350,"        if (k > n / 2) {
",4,2,0,1,3,0,0,0,0,6,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,351,"            return binomialCoefficientLog(n, n - k);
",4,1,0,1,2,1,4,0,0,9,40,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,357,"        double logSum = 0;
",2,0,0,0,0,0,0,0,0,2,18,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,360,"        for (int i = n - k + 1; i <= n; i++) {
",12,3,0,1,3,0,0,0,0,16,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,361,"            logSum += FastMath.log(i);
",2,0,0,1,2,0,6,0,0,9,26,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,365,"        for (int i = 2; i <= k; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,366,"            logSum -= FastMath.log(i);
",2,0,0,1,2,0,6,0,0,9,26,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,369,"        return logSum;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,381,"        if (n < k) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,382,"            throw new NumberIsTooLargeException(LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER,
",4,0,0,0,1,0,0,2,0,6,87,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,385,"        if (n < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,386,"            throw new NotPositiveException(LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER, n);
",6,0,0,1,2,0,0,2,0,8,80,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,388,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,401,"        if (equals(x, y, eps)) {
",0,0,0,2,5,0,8,0,0,8,24,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,402,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,403,"        } else if (x < y) {
",4,1,0,1,4,0,0,0,0,5,19,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,404,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,406,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,427,"        if (equals(x, y, maxUlps)) {
",0,0,0,2,5,0,8,0,0,8,28,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,428,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,429,"        } else if (x < y) {
",4,1,0,1,4,0,0,0,0,5,19,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,430,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,432,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,443,"        return (FastMath.exp(x) + FastMath.exp(-x)) / 2.0;
",2,2,0,3,6,1,10,0,0,15,50,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,455,"        return equals(x, y, 1);
",0,0,0,1,2,1,6,0,0,6,23,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,468,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, 1);
",0,2,0,4,8,1,18,0,0,20,61,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,482,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;
",6,3,0,2,4,1,10,0,0,19,53,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,497,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);
",6,3,0,3,6,1,10,0,0,19,64,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,519,"        int xInt = Float.floatToIntBits(x);
",2,0,0,1,2,0,6,0,0,8,35,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,520,"        int yInt = Float.floatToIntBits(y);
",2,0,0,1,2,0,6,0,0,8,35,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,523,"        if (xInt < 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,524,"            xInt = SGN_MASK_FLOAT - xInt;
",6,1,0,0,0,0,0,0,0,8,29,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,526,"        if (yInt < 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,527,"            yInt = SGN_MASK_FLOAT - yInt;
",6,1,0,0,0,0,0,0,0,8,29,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,530,"        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;
",8,2,0,1,2,1,4,0,0,15,61,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,532,"        return isEqual && !Float.isNaN(x) && !Float.isNaN(y);
",2,1,0,2,4,1,12,0,0,17,53,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,548,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, maxUlps);
",0,2,0,4,8,1,20,0,0,22,67,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,562,"        if ((x == null) || (y == null)) {
",4,3,0,3,7,0,0,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,563,"            return !((x == null) ^ (y == null));
",4,3,0,3,6,1,0,0,0,8,36,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,565,"        if (x.length != y.length) {
",8,1,0,1,3,0,0,0,0,9,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,566,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,568,"        for (int i = 0; i < x.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,569,"            if (!equals(x[i], y[i])) {
",0,0,1,4,9,0,2,0,0,11,26,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,570,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,573,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,588,"        if ((x == null) || (y == null)) {
",4,3,0,3,7,0,0,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,589,"            return !((x == null) ^ (y == null));
",4,3,0,3,6,1,0,0,0,8,36,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,591,"        if (x.length != y.length) {
",8,1,0,1,3,0,0,0,0,9,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,592,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,594,"        for (int i = 0; i < x.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,595,"            if (!equalsIncludingNaN(x[i], y[i])) {
",0,0,1,4,9,0,2,0,0,11,38,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,596,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,599,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,611,"        return equals(x, y, 1);
",0,0,0,1,2,1,6,0,0,6,23,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,624,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, 1);
",0,2,0,4,8,1,18,0,0,20,63,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,639,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;
",6,3,0,2,4,1,10,0,0,19,53,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,654,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);
",6,3,0,3,6,1,10,0,0,19,64,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,675,"        long xInt = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,676,"        long yInt = Double.doubleToLongBits(y);
",2,0,0,1,2,0,6,0,0,8,39,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,679,"        if (xInt < 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,680,"            xInt = SGN_MASK - xInt;
",6,1,0,0,0,0,0,0,0,8,23,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,682,"        if (yInt < 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,683,"            yInt = SGN_MASK - yInt;
",6,1,0,0,0,0,0,0,0,8,23,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,686,"        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;
",8,2,0,1,2,1,4,0,0,15,61,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,688,"        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);
",2,1,0,2,4,1,12,0,0,17,55,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,704,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, maxUlps);
",0,2,0,4,8,1,20,0,0,22,69,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,718,"        if ((x == null) || (y == null)) {
",4,3,0,3,7,0,0,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,719,"            return !((x == null) ^ (y == null));
",4,3,0,3,6,1,0,0,0,8,36,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,721,"        if (x.length != y.length) {
",8,1,0,1,3,0,0,0,0,9,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,722,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,724,"        for (int i = 0; i < x.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,725,"            if (!equals(x[i], y[i])) {
",0,0,1,4,9,0,2,0,0,11,26,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,726,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,729,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,744,"        if ((x == null) || (y == null)) {
",4,3,0,3,7,0,0,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,745,"            return !((x == null) ^ (y == null));
",4,3,0,3,6,1,0,0,0,8,36,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,747,"        if (x.length != y.length) {
",8,1,0,1,3,0,0,0,0,9,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,748,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,750,"        for (int i = 0; i < x.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,751,"            if (!equalsIncludingNaN(x[i], y[i])) {
",0,0,1,4,9,0,2,0,0,11,38,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,752,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,755,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,783,"        if (n < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,784,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,
",4,0,0,0,1,0,0,2,0,6,77,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,787,"        if (n > 20) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,788,"            throw new MathArithmeticException();
",0,0,0,1,2,0,0,2,0,2,36,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,790,"        return FACTORIALS[n];
",0,0,1,1,2,1,0,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,807,"        if (n < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,808,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,
",4,0,0,0,1,0,0,2,0,6,77,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,811,"        if (n < 21) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,812,"            return factorial(n);
",0,0,0,1,2,1,4,0,0,4,20,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,814,"        return FastMath.floor(FastMath.exp(factorialLog(n)) + 0.5);
",0,1,0,3,6,1,12,0,0,13,59,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,825,"        if (n < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,826,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,
",4,0,0,0,1,0,0,2,0,6,77,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,829,"        if (n < 21) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,830,"            return FastMath.log(factorial(n));
",0,0,0,2,4,1,8,0,0,8,34,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,832,"        double logSum = 0;
",2,0,0,0,0,0,0,0,0,2,18,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,833,"        for (int i = 2; i <= n; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,834,"            logSum += FastMath.log(i);
",2,0,0,1,2,0,6,0,0,9,26,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,836,"        return logSum;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,869,"        int u = p;
",4,0,0,0,0,0,0,0,0,4,10,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,870,"        int v = q;
",4,0,0,0,0,0,0,0,0,4,10,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,871,"        if ((u == 0) || (v == 0)) {
",4,3,0,3,7,0,0,0,0,7,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,872,"            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {
",12,3,0,3,7,0,0,0,0,15,59,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,873,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,
",4,0,0,0,1,0,0,2,0,6,72,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,876,"            return FastMath.abs(u) + FastMath.abs(v);
",0,1,0,2,4,1,12,0,0,13,41,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,883,"        if (u > 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,884,"            u = -u;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,886,"        if (v > 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,887,"            v = -v;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,890,"        int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,891,"        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
",6,7,0,3,7,0,0,0,0,13,69,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,893,"            u /= 2;
",2,0,0,0,0,0,0,0,0,3,7,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,894,"            v /= 2;
",2,0,0,0,0,0,0,0,0,3,7,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,895,"            k++; // cast out twos.
",2,0,0,0,0,0,0,0,0,3,22,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,897,"        if (k == 31) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,898,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,
",4,0,0,0,1,0,0,2,0,6,72,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,903,"        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
",8,3,0,3,6,0,0,0,0,12,46,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,909,"            while ((t & 1) == 0) { // while t is even..
",2,2,0,2,5,0,0,0,0,4,43,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,910,"                t /= 2; // cast out twos
",2,0,0,0,0,0,0,0,0,3,24,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,913,"            if (t > 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,914,"                u = -t;
",4,0,0,0,0,0,0,0,0,6,7,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,916,"                v = t;
",4,0,0,0,0,0,0,0,0,5,6,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,919,"            t = (v - u) / 2;
",6,2,0,1,2,0,0,0,0,9,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,922,"        } while (t != 0);
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,923,"        return -u * (1 << k); // gcd is u*2^k
",4,2,0,1,2,1,0,0,0,7,37,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,956,"        long u = p;
",4,0,0,0,0,0,0,0,0,4,11,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,957,"        long v = q;
",4,0,0,0,0,0,0,0,0,4,11,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,958,"        if ((u == 0) || (v == 0)) {
",4,3,0,3,7,0,0,0,0,7,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,959,"            if ((u == Long.MIN_VALUE) || (v == Long.MIN_VALUE)){
",12,3,0,3,7,0,0,0,0,15,52,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,960,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,
",4,0,0,0,1,0,0,2,0,6,72,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,963,"            return FastMath.abs(u) + FastMath.abs(v);
",0,1,0,2,4,1,12,0,0,13,41,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,970,"        if (u > 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,971,"            u = -u;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,973,"        if (v > 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,974,"            v = -v;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,977,"        int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,978,"        while ((u & 1) == 0 && (v & 1) == 0 && k < 63) { // while u and v are
",6,7,0,3,7,0,0,0,0,13,69,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,980,"            u /= 2;
",2,0,0,0,0,0,0,0,0,3,7,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,981,"            v /= 2;
",2,0,0,0,0,0,0,0,0,3,7,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,982,"            k++; // cast out twos.
",2,0,0,0,0,0,0,0,0,3,22,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,984,"        if (k == 63) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,985,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,
",4,0,0,0,1,0,0,2,0,6,72,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,990,"        long t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
",8,3,0,3,6,0,0,0,0,12,47,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,996,"            while ((t & 1) == 0) { // while t is even..
",2,2,0,2,5,0,0,0,0,4,43,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,997,"                t /= 2; // cast out twos
",2,0,0,0,0,0,0,0,0,3,24,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1000,"            if (t > 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1001,"                u = -t;
",4,0,0,0,0,0,0,0,0,6,7,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1003,"                v = t;
",4,0,0,0,0,0,0,0,0,5,6,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1006,"            t = (v - u) / 2;
",6,2,0,1,2,0,0,0,0,9,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1009,"        } while (t != 0);
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1010,"        return -u * (1L << k); // gcd is u*2^k
",4,2,0,1,2,1,0,0,0,7,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1020,"        return new Double(value).hashCode();
",2,0,0,2,4,1,2,2,0,6,36,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1031,"        return Arrays.hashCode(value);
",0,0,0,1,2,1,6,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1042,"        return (x >= ZB) ? PB : NB;
",8,1,0,1,2,1,0,0,0,9,27,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1054,"        if (Double.isNaN(x)) {
",0,0,0,2,5,0,6,0,0,6,22,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1055,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1057,"        return (x >= 0.0) ? 1.0 : -1.0;
",2,1,0,1,2,1,0,0,0,4,31,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1068,"        if (Float.isNaN(x)) {
",0,0,0,2,5,0,6,0,0,6,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1069,"            return Float.NaN;
",4,0,0,0,0,1,0,0,0,4,17,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1071,"        return (x >= 0.0F) ? 1.0F : -1.0F;
",2,1,0,1,2,1,0,0,0,4,34,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1081,"        return (x >= 0) ? 1 : -1;
",2,1,0,1,2,1,0,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1091,"        return (x >= 0L) ? 1L : -1L;
",2,1,0,1,2,1,0,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1102,"        return (x >= ZS) ? PS : NS;
",8,1,0,1,2,1,0,0,0,9,27,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1128,"        if (a == 0 || b == 0){
",4,3,0,1,3,0,0,0,0,7,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1129,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1131,"        int lcm = FastMath.abs(mulAndCheck(a / gcd(a, b), b));
",4,1,0,3,6,0,14,0,0,19,54,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1132,"        if (lcm == Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,31,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1133,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_32_BITS,
",4,0,0,0,1,0,0,2,0,6,72,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1136,"        return lcm;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1162,"        if (a == 0 || b == 0){
",4,3,0,1,3,0,0,0,0,7,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1163,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1165,"        long lcm = FastMath.abs(mulAndCheck(a / gcd(a, b), b));
",4,1,0,3,6,0,14,0,0,19,55,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1166,"        if (lcm == Long.MIN_VALUE){
",6,1,0,1,3,0,0,0,0,7,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1167,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_64_BITS,
",4,0,0,0,1,0,0,2,0,6,72,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1170,"        return lcm;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1190,"        return FastMath.log(x)/FastMath.log(base);
",0,1,0,2,4,1,12,0,0,13,42,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1204,"        long m = ((long)x) * ((long)y);
",6,1,0,4,8,0,0,0,0,7,31,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1205,"        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {
",12,3,0,1,3,0,0,0,0,15,53,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1206,"            throw new MathArithmeticException();
",0,0,0,1,2,0,0,2,0,2,36,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1208,"        return (int)m;
",2,0,0,1,2,1,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1223,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1225,"            ret = mulAndCheck(b, a);
",2,0,0,1,2,0,6,0,0,9,24,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1227,"            if (a < 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1228,"                if (b < 0) {
",2,1,0,1,3,0,0,0,0,3,12,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1230,"                    if (a >= Long.MAX_VALUE / b) {
",8,2,0,1,3,0,0,0,0,10,30,10,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1231,"                        ret = a * b;
",6,1,0,0,0,0,0,0,0,8,12,12,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1233,"                        throw new MathArithmeticException();
",0,0,0,1,2,0,0,2,0,2,36,14,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1235,"                } else if (b > 0) {
",2,1,0,1,4,0,0,0,0,3,19,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1237,"                    if (Long.MIN_VALUE / b <= a) {
",8,2,0,1,3,0,0,0,0,10,30,11,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1238,"                        ret = a * b;
",6,1,0,0,0,0,0,0,0,8,12,13,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1240,"                        throw new MathArithmeticException();
",0,0,0,1,2,0,0,2,0,2,36,15,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1245,"                    ret = 0;
",2,0,0,0,0,0,0,0,0,3,8,11,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1247,"            } else if (a > 0) {
",2,1,0,1,4,0,0,0,0,3,19,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1252,"                if (a <= Long.MAX_VALUE / b) {
",8,2,0,1,3,0,0,0,0,10,30,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1253,"                    ret = a * b;
",6,1,0,0,0,0,0,0,0,8,12,11,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1255,"                    throw new MathArithmeticException();
",0,0,0,1,2,0,0,2,0,2,36,13,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1259,"                ret = 0;
",2,0,0,0,0,0,0,0,0,3,8,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1262,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1285,"         return a - TWO_PI * FastMath.floor((a + FastMath.PI - center) / TWO_PI);
",14,5,0,2,4,1,4,0,0,23,72,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1307,"        final double p = FastMath.abs(period);
",2,0,0,1,2,1,6,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1308,"        return a - p * FastMath.floor((a - offset) / p) - offset;
",12,5,0,2,4,1,4,0,0,21,57,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1333,"         if (Double.isInfinite(normalizedSum)) {
",0,0,0,2,5,0,6,0,0,6,39,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1334,"             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);
",4,0,0,1,2,0,0,2,0,6,76,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1336,"         if (Double.isNaN(normalizedSum)) {
",0,0,0,2,5,0,6,0,0,6,34,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1337,"             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);
",4,0,0,1,2,0,0,2,0,6,71,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1339,"         double sum = 0d;
",2,0,0,0,0,0,0,0,0,2,16,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1340,"         final int len = values.length;
",6,0,0,0,0,1,0,0,0,7,30,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1341,"         double[] out = new double[len];
",2,0,1,2,4,0,0,0,0,4,31,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1342,"         for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1343,"             if (Double.isInfinite(values[i])) {
",0,0,1,3,7,0,4,0,0,8,35,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1344,"                 throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);
",6,0,1,2,4,0,0,2,0,12,94,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1346,"             if (!Double.isNaN(values[i])) {
",0,0,1,3,7,0,4,0,0,9,31,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1347,"                 sum += values[i];
",2,0,1,1,2,0,0,0,0,7,17,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1350,"         if (sum == 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1351,"             throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);
",4,0,0,1,2,0,0,2,0,6,71,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1353,"         for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1354,"             if (Double.isNaN(values[i])) {
",0,0,1,3,7,0,4,0,0,8,30,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1355,"                 out[i] = Double.NaN;
",4,0,1,1,2,0,0,0,0,9,20,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1357,"                 out[i] = values[i] * normalizedSum / sum;
",4,2,1,2,4,0,0,0,0,15,41,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1360,"         return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1373,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);
",4,0,0,1,2,1,6,0,0,10,49,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1397,"            return (new BigDecimal
",0,0,0,0,1,1,0,2,0,2,22,11,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1401,"        } catch (NumberFormatException ex) {
",2,0,0,1,4,0,0,2,0,4,36,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1402,"            if (Double.isInfinite(x)) {
",0,0,0,2,5,0,6,0,0,6,27,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1403,"                return x;
",2,0,0,0,0,1,0,0,0,2,9,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1405,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,10,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1420,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);
",4,0,0,1,2,1,6,0,0,10,49,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1436,"        float sign = indicator(x);
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1437,"        float factor = (float)FastMath.pow(10.0f, scale) * sign;
",4,1,0,2,4,0,6,0,0,11,56,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1438,"        return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;
",6,2,0,2,4,1,6,0,0,14,71,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1456,"        switch (roundingMethod) {
",2,0,0,1,3,0,0,0,0,2,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1458,"            if (sign == -1) {
",2,1,0,1,3,0,0,0,0,4,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1459,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));
",6,0,0,2,4,0,10,0,0,17,82,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1461,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));
",6,0,0,2,4,0,10,0,0,17,81,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1463,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1465,"            unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));
",6,0,0,2,4,0,10,0,0,17,82,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1466,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1468,"            if (sign == -1) {
",2,1,0,1,3,0,0,0,0,4,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1469,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));
",6,0,0,2,4,0,10,0,0,17,81,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1471,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));
",6,0,0,2,4,0,10,0,0,17,82,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1473,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1475,"            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);
",6,0,0,1,2,0,6,0,0,13,66,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1476,"            double fraction = unscaled - FastMath.floor(unscaled);
",4,1,0,1,2,0,6,0,0,11,54,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1477,"            if (fraction > 0.5) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1478,"                unscaled = FastMath.ceil(unscaled);
",2,0,0,1,2,0,6,0,0,9,35,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1480,"                unscaled = FastMath.floor(unscaled);
",2,0,0,1,2,0,6,0,0,9,36,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1482,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1485,"            double fraction = unscaled - FastMath.floor(unscaled);
",4,1,0,1,2,0,6,0,0,11,54,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1486,"            if (fraction > 0.5) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1487,"                unscaled = FastMath.ceil(unscaled);
",2,0,0,1,2,0,6,0,0,9,35,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1488,"            } else if (fraction < 0.5) {
",2,1,0,1,4,0,0,0,0,3,28,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1489,"                unscaled = FastMath.floor(unscaled);
",2,0,0,1,2,0,6,0,0,9,36,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1492,"                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math
",0,3,0,1,4,0,12,0,0,15,57,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1494,"                    unscaled = FastMath.floor(unscaled);
",2,0,0,1,2,0,6,0,0,9,36,11,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1496,"                    unscaled = FastMath.ceil(unscaled);
",2,0,0,1,2,0,6,0,0,9,35,11,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1499,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1502,"            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);
",6,0,0,1,2,0,6,0,0,13,66,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1503,"            double fraction = unscaled - FastMath.floor(unscaled);
",4,1,0,1,2,0,6,0,0,11,54,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1504,"            if (fraction >= 0.5) {
",2,1,0,1,3,0,0,0,0,3,22,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1505,"                unscaled = FastMath.ceil(unscaled);
",2,0,0,1,2,0,6,0,0,9,35,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1507,"                unscaled = FastMath.floor(unscaled);
",2,0,0,1,2,0,6,0,0,9,36,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1509,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1512,"            if (unscaled != FastMath.floor(unscaled)) {
",2,1,0,2,5,0,6,0,0,9,43,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1513,"                throw new MathArithmeticException();
",0,0,0,1,2,0,0,2,0,2,36,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1517,"            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));
",6,0,0,2,4,0,10,0,0,17,82,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1518,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1520,"            throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,
",4,0,0,0,1,0,0,2,0,6,80,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1531,"        return unscaled;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1545,"        return (x == ZB) ? ZB : (x > ZB) ? PB : NB;
",14,2,0,2,4,1,0,0,0,16,43,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1561,"        if (Double.isNaN(x)) {
",0,0,0,2,5,0,6,0,0,6,22,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1562,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1564,"        return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;
",4,2,0,2,4,1,0,0,0,7,49,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1579,"        if (Float.isNaN(x)) {
",0,0,0,2,5,0,6,0,0,6,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1580,"            return Float.NaN;
",4,0,0,0,0,1,0,0,0,4,17,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1582,"        return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;
",4,2,0,2,4,1,0,0,0,7,54,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1596,"        return (x == 0) ? 0 : (x > 0) ? 1 : -1;
",4,2,0,2,4,1,0,0,0,7,39,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1610,"        return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;
",4,2,0,2,4,1,0,0,0,7,44,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1621,"        return (x == ZS) ? ZS : (x > ZS) ? PS : NS;
",14,2,0,2,4,1,0,0,0,16,43,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1632,"        return (FastMath.exp(x) - FastMath.exp(-x)) / 2.0;
",2,2,0,3,6,1,10,0,0,15,50,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1646,"        long s = (long)x - (long)y;
",6,1,0,2,4,0,0,0,0,7,27,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1647,"        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {
",12,3,0,1,3,0,0,0,0,15,53,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1648,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);
",8,0,0,1,2,0,0,2,0,10,82,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1650,"        return (int)s;
",2,0,0,1,2,1,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1665,"        if (b == Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,26,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1666,"            if (a < 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1667,"                ret = a - b;
",6,1,0,0,0,0,0,0,0,8,12,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1669,"                throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, a, -b);
",8,0,0,1,2,0,0,2,0,11,80,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1673,"            ret = addAndCheck(a, -b, LocalizedFormats.OVERFLOW_IN_ADDITION);
",8,0,0,1,2,0,4,0,0,14,64,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1675,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1687,"        if (e < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1688,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);
",6,0,0,1,2,0,0,2,0,8,61,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1691,"        int result = 1;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1692,"        int k2p    = k;
",4,0,0,0,0,0,0,0,0,4,15,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1693,"        while (e != 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1694,"            if ((e & 0x1) != 0) {
",2,2,0,2,5,0,0,0,0,4,21,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1695,"                result *= k2p;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1697,"            k2p *= k2p;
",4,0,0,0,0,0,0,0,0,5,11,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1698,"            e = e >> 1;
",4,1,0,0,0,0,0,0,0,6,11,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1701,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1713,"        if (e < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1714,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);
",6,0,0,1,2,0,0,2,0,8,61,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1717,"        int result = 1;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1718,"        int k2p    = k;
",4,0,0,0,0,0,0,0,0,4,15,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1719,"        while (e != 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1720,"            if ((e & 0x1) != 0) {
",2,2,0,2,5,0,0,0,0,4,21,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1721,"                result *= k2p;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1723,"            k2p *= k2p;
",4,0,0,0,0,0,0,0,0,5,11,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1724,"            e = e >> 1;
",4,1,0,0,0,0,0,0,0,6,11,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1727,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1739,"        if (e < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1740,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);
",6,0,0,1,2,0,0,2,0,8,61,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1743,"        long result = 1l;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1744,"        long k2p    = k;
",4,0,0,0,0,0,0,0,0,4,16,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1745,"        while (e != 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1746,"            if ((e & 0x1) != 0) {
",2,2,0,2,5,0,0,0,0,4,21,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1747,"                result *= k2p;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1749,"            k2p *= k2p;
",4,0,0,0,0,0,0,0,0,5,11,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1750,"            e = e >> 1;
",4,1,0,0,0,0,0,0,0,6,11,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1753,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1765,"        if (e < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1766,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);
",6,0,0,1,2,0,0,2,0,8,61,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1769,"        long result = 1l;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1770,"        long k2p    = k;
",4,0,0,0,0,0,0,0,0,4,16,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1771,"        while (e != 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1772,"            if ((e & 0x1) != 0) {
",2,2,0,2,5,0,0,0,0,4,21,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1773,"                result *= k2p;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1775,"            k2p *= k2p;
",4,0,0,0,0,0,0,0,0,5,11,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1776,"            e = e >> 1;
",4,1,0,0,0,0,0,0,0,6,11,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1779,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1791,"        if (e < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1792,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);
",6,0,0,1,2,0,0,2,0,8,61,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1795,"        return k.pow(e);
",0,0,0,1,2,1,6,0,0,6,16,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1807,"        if (e < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1808,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);
",6,0,0,1,2,0,0,2,0,8,61,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1811,"        BigInteger result = BigInteger.ONE;
",6,0,0,0,0,0,0,2,0,8,35,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1812,"        BigInteger k2p    = k;
",4,0,0,0,0,0,0,2,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1813,"        while (e != 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1814,"            if ((e & 0x1) != 0) {
",2,2,0,2,5,0,0,0,0,4,21,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1815,"                result = result.multiply(k2p);
",2,0,0,1,2,0,6,0,0,9,30,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1817,"            k2p = k2p.multiply(k2p);
",2,0,0,1,2,0,6,0,0,9,24,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1818,"            e = e >> 1;
",4,1,0,0,0,0,0,0,0,6,11,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1821,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1834,"        if (e.compareTo(BigInteger.ZERO) < 0) {
",4,1,0,2,5,0,4,0,0,9,39,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1835,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);
",6,0,0,1,2,0,0,2,0,8,61,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1838,"        BigInteger result = BigInteger.ONE;
",6,0,0,0,0,0,0,2,0,8,35,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1839,"        BigInteger k2p    = k;
",4,0,0,0,0,0,0,2,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1840,"        while (!BigInteger.ZERO.equals(e)) {
",4,0,0,2,5,0,4,0,0,9,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1841,"            if (e.testBit(0)) {
",0,0,0,2,5,0,4,0,0,4,19,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1842,"                result = result.multiply(k2p);
",2,0,0,1,2,0,6,0,0,9,30,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1844,"            k2p = k2p.multiply(k2p);
",2,0,0,1,2,0,6,0,0,9,24,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1845,"            e = e.shiftRight(1);
",2,0,0,1,2,0,4,0,0,7,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1848,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1859,"        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1860,"        for (int i = 0; i < p1.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1861,"            sum += FastMath.abs(p1[i] - p2[i]);
",2,1,1,3,6,0,4,0,0,16,35,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1863,"        return sum;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1874,"      int sum = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1875,"      for (int i = 0; i < p1.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1876,"          sum += FastMath.abs(p1[i] - p2[i]);
",2,1,1,3,6,0,4,0,0,16,35,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1878,"      return sum;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1889,"        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1890,"        for (int i = 0; i < p1.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1891,"            final double dp = p1[i] - p2[i];
",2,1,1,2,4,1,0,0,0,12,32,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1892,"            sum += dp * dp;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1894,"        return FastMath.sqrt(sum);
",0,0,0,1,2,1,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1905,"      double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1906,"      for (int i = 0; i < p1.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1907,"          final double dp = p1[i] - p2[i];
",2,1,1,2,4,1,0,0,0,12,32,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1908,"          sum += dp * dp;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1910,"      return FastMath.sqrt(sum);
",0,0,0,1,2,1,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1921,"        double max = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1922,"        for (int i = 0; i < p1.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1923,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));
",2,1,1,4,8,0,10,0,0,22,53,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1925,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1936,"        int max = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1937,"        for (int i = 0; i < p1.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1938,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));
",2,1,1,4,8,0,10,0,0,22,53,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1940,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1966,"        double previous = val[0];
",2,0,1,1,2,0,0,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1967,"        boolean ok = true;
",2,0,0,0,0,0,0,0,0,3,18,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1969,"        int max = val.length;
",6,0,0,0,0,0,0,0,0,6,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1970,"        for (int i = 1; i < max; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1971,"            switch (dir) {
",2,0,0,1,3,0,0,0,0,2,14,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1973,"                if (strict) {
",2,0,0,1,3,0,0,0,0,2,13,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1974,"                    if (val[i] <= previous) {
",2,1,1,2,5,0,0,0,0,7,25,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1975,"                        ok = false;
",2,0,0,0,0,0,0,0,0,4,11,11,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1978,"                    if (val[i] < previous) {
",2,1,1,2,5,0,0,0,0,7,24,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1979,"                        ok = false;
",2,0,0,0,0,0,0,0,0,4,11,11,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1984,"                if (strict) {
",2,0,0,1,3,0,0,0,0,2,13,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1985,"                    if (val[i] >= previous) {
",2,1,1,2,5,0,0,0,0,7,25,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1986,"                        ok = false;
",2,0,0,0,0,0,0,0,0,4,11,11,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1989,"                    if (val[i] > previous) {
",2,1,1,2,5,0,0,0,0,7,24,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1990,"                        ok = false;
",2,0,0,0,0,0,0,0,0,4,11,11,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1996,"                throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1999,"            if (!ok &&
",2,1,0,0,1,0,0,0,0,4,10,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2001,"                throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);
",8,0,1,2,4,0,0,2,0,14,75,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2003,"            previous = val[i];
",2,0,1,1,2,0,0,0,0,7,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2006,"        return ok;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2020,"        checkOrder(val, dir, strict, true);
",0,0,0,1,2,0,8,0,0,9,35,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2021,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2031,"        checkOrder(val, OrderDirection.INCREASING, true);
",4,0,0,1,2,0,4,0,0,9,49,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2032,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2042,"        if (Double.isInfinite(x) || Double.isNaN(x)) {
",0,1,0,3,7,0,12,0,0,13,46,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2043,"            throw new NotFiniteNumberException(x);
",2,0,0,1,2,0,0,2,0,4,38,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2045,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2055,"        for (int i = 0; i < val.length; i++) {
",10,1,0,1,3,0,0,0,0,12,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2056,"            final double x = val[i];
",2,0,1,1,2,1,0,0,0,7,24,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2057,"            if (Double.isInfinite(x) || Double.isNaN(x)) {
",0,1,0,3,7,0,12,0,0,13,46,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2058,"                throw new NotFiniteNumberException(LocalizedFormats.ARRAY_ELEMENT, x, i);
",8,0,0,1,2,0,0,2,0,10,73,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2061,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2124,"        double rdwarf = 3.834e-20;
",2,0,0,0,0,0,0,0,0,2,26,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2125,"        double rgiant = 1.304e+19;
",2,0,0,0,0,0,0,0,0,2,26,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2126,"        double s1 = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2127,"        double s2 = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2128,"        double s3 = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2129,"        double x1max = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2130,"        double x3max = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2131,"        double floatn = (double) v.length;
",6,0,0,1,2,0,0,0,0,6,34,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2132,"        double agiant = rgiant / floatn;
",6,1,0,0,0,0,0,0,0,7,32,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2133,"        for (int i = 0; i < v.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2134,"            double xabs = Math.abs(v[i]);
",2,0,1,2,4,0,4,0,0,10,29,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2135,"            if (xabs < rdwarf || xabs > agiant) {
",8,3,0,1,3,0,0,0,0,11,37,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2136,"                if (xabs > rdwarf) {
",4,1,0,1,3,0,0,0,0,5,20,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2137,"                    if (xabs > x1max) {
",4,1,0,1,3,0,0,0,0,5,19,10,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2138,"                        double r = x1max / xabs;
",6,1,0,0,0,0,0,0,0,7,24,13,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2139,"                        s1= 1 + s1 * r * r;
",8,2,0,0,0,0,0,0,0,11,19,12,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2140,"                        x1max = xabs;
",4,0,0,0,0,0,0,0,0,5,13,12,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2141,"                    } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2142,"                        double r = xabs / x1max;
",6,1,0,0,0,0,0,0,0,7,24,13,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2143,"                        s1 += r * r;
",6,1,0,0,0,0,0,0,0,8,12,12,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2144,"                    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2146,"                    if (xabs > x3max) {
",4,1,0,1,3,0,0,0,0,5,19,10,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2147,"                        double r = x3max / xabs;
",6,1,0,0,0,0,0,0,0,7,24,13,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2148,"                        s3= 1 + s3 * r * r;
",8,2,0,0,0,0,0,0,0,11,19,12,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2149,"                        x3max = xabs;
",4,0,0,0,0,0,0,0,0,5,13,12,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2150,"                    } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2151,"                        if (xabs != 0) {
",2,1,0,1,3,0,0,0,0,3,16,12,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2152,"                            double r = xabs / x3max;
",6,1,0,0,0,0,0,0,0,7,24,15,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2153,"                            s3 += r * r;
",6,1,0,0,0,0,0,0,0,8,12,14,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2154,"                        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2158,"                s2 += xabs * xabs;
",6,1,0,0,0,0,0,0,0,8,18,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2162,"        if (s1 != 0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2163,"            norm = x1max * Math.sqrt(s1 + (s2 / x1max) / x1max);
",12,4,0,2,4,0,4,0,0,21,52,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2165,"            if (s2 == 0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2166,"                norm = x3max * Math.sqrt(s3);
",4,1,0,1,2,0,6,0,0,12,29,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2168,"                if (s2 >= x3max) {
",4,1,0,1,3,0,0,0,0,5,18,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2169,"                    norm = Math.sqrt(s2 * (1 + (x3max / s2) * (x3max * s3)));
",12,5,0,4,8,0,4,0,0,22,57,10,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2171,"                    norm = Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));
",12,4,0,4,8,0,4,0,0,21,56,10,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2175,"        return norm;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2190,"        sortInPlace(x, OrderDirection.INCREASING, yList);
",4,0,0,1,2,0,6,0,0,10,49,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2191,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2206,"        if (x == null ||
",2,2,0,0,1,0,0,0,0,4,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2208,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2211,"        final int len = x.length;
",6,0,0,0,0,1,0,0,0,7,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2212,"        final List<Pair<Double, double[]>> list
",2,0,0,1,2,1,0,6,0,9,39,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2215,"        final int yListLen = yList.length;
",6,0,0,0,0,1,0,0,0,7,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2216,"        for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2217,"            final double[] yValues = new double[yListLen];
",2,0,1,2,4,1,0,0,0,5,46,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2218,"            for (int j = 0; j < yListLen; j++) {
",8,1,0,1,3,0,0,0,0,10,36,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2219,"                double[] y = yList[j];
",2,0,1,2,4,0,0,0,0,6,22,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2220,"                if (y.length != len) {
",6,1,0,1,3,0,0,0,0,7,22,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2221,"                    throw new DimensionMismatchException(y.length, len);
",6,0,0,1,2,0,0,2,0,8,52,11,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2223,"                yValues[j] = y[i];
",0,0,1,2,4,0,0,0,0,9,18,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2225,"            list.add(new Pair<Double, double[]>(x[i], yValues));
",2,0,1,4,8,0,4,4,0,14,52,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2228,"        final Comparator<Pair<Double, double[]>> comp
",2,0,0,1,2,1,0,6,0,9,45,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2248,"        Collections.sort(list, comp);
",0,0,0,1,2,0,8,0,0,8,29,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2250,"        for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2251,"            final Pair<Double, double[]> e = list.get(i);
",2,0,0,2,4,1,6,4,0,13,45,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2252,"            x[i] = e.getKey();
",0,0,1,2,4,0,4,0,0,9,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2253,"            final double[] yValues = e.getValue();
",2,0,0,2,4,1,4,0,0,7,38,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2254,"            for (int j = 0; j < yListLen; j++) {
",8,1,0,1,3,0,0,0,0,10,36,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2255,"                yList[j][i] = yValues[j];
",0,0,1,3,6,0,0,0,0,11,25,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2258,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2267,"         return copyOf(source, source.length);
",4,0,0,1,2,1,4,0,0,8,37,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2277,"         return copyOf(source, source.length);
",4,0,0,1,2,1,4,0,0,8,37,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2290,"         final int[] output = new int[len];
",2,0,1,2,4,1,0,0,0,5,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2291,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));
",4,0,0,2,4,0,14,0,0,18,73,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2292,"         return output;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2305,"         final double[] output = new double[len];
",2,0,1,2,4,1,0,0,0,5,40,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2306,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));
",4,0,0,2,4,0,14,0,0,18,73,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2307,"         return output;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2321,"        if (o == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2322,"            throw new NullArgumentException(pattern, args);
",4,0,0,1,2,0,0,2,0,6,47,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2324,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2334,"        if (o == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2335,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2337,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2543,"        final double ca1        = SPLIT_FACTOR * a1;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2544,"        final double a1High     = ca1 - (ca1 - a1);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2545,"        final double a1Low      = a1 - a1High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2546,"        final double cb1        = SPLIT_FACTOR * b1;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2547,"        final double b1High     = cb1 - (cb1 - b1);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2548,"        final double b1Low      = b1 - b1High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2551,"        final double prod1High  = a1 * b1;
",6,1,0,0,0,1,0,0,0,8,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2552,"        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2555,"        final double ca2        = SPLIT_FACTOR * a2;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2556,"        final double a2High     = ca2 - (ca2 - a2);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2557,"        final double a2Low      = a2 - a2High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2558,"        final double cb2        = SPLIT_FACTOR * b2;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2559,"        final double b2High     = cb2 - (cb2 - b2);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2560,"        final double b2Low      = b2 - b2High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2563,"        final double prod2High  = a2 * b2;
",6,1,0,0,0,1,0,0,0,8,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2564,"        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2567,"        final double ca3        = SPLIT_FACTOR * a3;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2568,"        final double a3High     = ca3 - (ca3 - a3);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2569,"        final double a3Low      = a3 - a3High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2570,"        final double cb3        = SPLIT_FACTOR * b3;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2571,"        final double b3High     = cb3 - (cb3 - b3);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2572,"        final double b3Low      = b3 - b3High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2575,"        final double prod3High  = a3 * b3;
",6,1,0,0,0,1,0,0,0,8,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2576,"        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2579,"        final double ca4        = SPLIT_FACTOR * a4;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2580,"        final double a4High     = ca4 - (ca4 - a4);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2581,"        final double a4Low      = a4 - a4High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2582,"        final double cb4        = SPLIT_FACTOR * b4;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2583,"        final double b4High     = cb4 - (cb4 - b4);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2584,"        final double b4Low      = b4 - b4High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2587,"        final double prod4High  = a4 * b4;
",6,1,0,0,0,1,0,0,0,8,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2588,"        final double prod4Low   = a4Low * b4Low - (((prod4High - a4High * b4High) - a4Low * b4High) - a4High * b4Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2591,"        final double s12High    = prod1High + prod2High;
",6,1,0,0,0,1,0,0,0,8,48,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2592,"        final double s12Prime   = s12High - prod2High;
",6,1,0,0,0,1,0,0,0,8,46,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2593,"        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);
",12,4,0,3,6,1,0,0,0,17,86,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2596,"        final double s123High   = s12High + prod3High;
",6,1,0,0,0,1,0,0,0,8,46,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2597,"        final double s123Prime  = s123High - prod3High;
",6,1,0,0,0,1,0,0,0,8,47,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2598,"        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);
",12,4,0,3,6,1,0,0,0,17,87,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2601,"        final double s1234High  = s123High + prod4High;
",6,1,0,0,0,1,0,0,0,8,47,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2602,"        final double s1234Prime = s1234High - prod4High;
",6,1,0,0,0,1,0,0,0,8,48,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2603,"        final double s1234Low   = (prod4High - (s1234High - s1234Prime)) + (s123High - s1234Prime);
",12,4,0,3,6,1,0,0,0,17,91,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2607,"        return s1234High + (prod1Low + prod2Low + prod3Low + prod4Low + s12Low + s123Low + s1234Low);
",16,2,0,1,2,1,0,0,0,18,93,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,1971,"            switch (dir) {
",2,0,0,1,3,0,0,0,0,2,14,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,275,"    private FastMath() {
",2,0,0,1,3,1,0,0,0,3,20,2,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,276,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,288,"        if (d > -MathUtils.SAFE_MIN && d < MathUtils.SAFE_MIN){
",12,3,0,1,3,0,0,0,0,16,55,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,289,"            return d; // These are un-normalised - don't try to convert
",2,0,0,0,0,1,0,0,0,2,59,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,291,"        long xl = Double.doubleToLongBits(d);
",2,0,0,1,2,0,6,0,0,8,37,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,292,"        xl = xl & MASK_30BITS; // Drop low order bits
",6,1,0,0,0,0,0,0,0,8,45,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,293,"        return Double.longBitsToDouble(xl);
",0,0,0,1,2,1,6,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,310,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,311,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,314,"      if (x > 20.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,315,"          return exp(x)/2.0;
",0,1,0,1,2,1,4,0,0,5,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,318,"      if (x < -20) {
",2,1,0,1,3,0,0,0,0,4,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,319,"          return exp(-x)/2.0;
",2,1,0,1,2,1,2,0,0,6,19,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,322,"      double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,323,"      if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,324,"          x = -x;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,326,"      exp(x, 0.0, hiPrec);
",0,0,0,1,2,0,6,0,0,6,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,328,"      double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,329,"      double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,331,"      double temp = ya * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,32,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,332,"      double yaa = ya + temp - temp;
",8,2,0,0,0,0,0,0,0,10,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,333,"      double yab = ya - yaa;
",6,1,0,0,0,0,0,0,0,7,22,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,336,"      double recip = 1.0/ya;
",4,1,0,0,0,0,0,0,0,5,22,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,337,"      temp = recip * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,338,"      double recipa = recip + temp - temp;
",8,2,0,0,0,0,0,0,0,10,36,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,339,"      double recipb = recip - recipa;
",6,1,0,0,0,0,0,0,0,7,31,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,342,"      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;
",20,9,0,1,2,0,0,0,0,30,76,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,344,"      recipb += -yb * recip * recip;
",8,1,0,0,0,0,0,0,0,11,30,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,347,"      temp = ya + recipa;
",6,1,0,0,0,0,0,0,0,8,19,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,348,"      yb += -(temp - ya - recipa);
",8,1,0,1,2,0,0,0,0,11,28,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,349,"      ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,350,"      temp = ya + recipb;
",6,1,0,0,0,0,0,0,0,8,19,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,351,"      yb += -(temp - ya - recipb);
",8,1,0,1,2,0,0,0,0,11,28,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,352,"      ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,354,"      double result = ya + yb;
",6,1,0,0,0,0,0,0,0,7,24,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,355,"      result *= 0.5;
",2,0,0,0,0,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,356,"      return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,364,"      boolean negate = false;
",2,0,0,0,0,0,0,0,0,3,23,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,365,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,366,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,369,"      if (x > 20.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,370,"          return exp(x)/2.0;
",0,1,0,1,2,1,4,0,0,5,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,373,"      if (x < -20) {
",2,1,0,1,3,0,0,0,0,4,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,374,"          return -exp(-x)/2.0;
",2,1,0,1,2,1,2,0,0,7,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,377,"      if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,378,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,381,"      if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,382,"          x = -x;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,383,"          negate = true;
",2,0,0,0,0,0,0,0,0,4,14,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,388,"      if (x > 0.25) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,389,"          double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,390,"          exp(x, 0.0, hiPrec);
",0,0,0,1,2,0,6,0,0,6,20,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,392,"          double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,393,"          double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,395,"          double temp = ya * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,396,"          double yaa = ya + temp - temp;
",8,2,0,0,0,0,0,0,0,10,30,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,397,"          double yab = ya - yaa;
",6,1,0,0,0,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,400,"          double recip = 1.0/ya;
",4,1,0,0,0,0,0,0,0,5,22,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,401,"          temp = recip * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,402,"          double recipa = recip + temp - temp;
",8,2,0,0,0,0,0,0,0,10,36,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,403,"          double recipb = recip - recipa;
",6,1,0,0,0,0,0,0,0,7,31,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,406,"          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;
",20,9,0,1,2,0,0,0,0,30,76,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,408,"          recipb += -yb * recip * recip;
",8,1,0,0,0,0,0,0,0,11,30,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,410,"          recipa = -recipa;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,411,"          recipb = -recipb;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,414,"          temp = ya + recipa;
",6,1,0,0,0,0,0,0,0,8,19,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,415,"          yb += -(temp - ya - recipa);
",8,1,0,1,2,0,0,0,0,11,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,416,"          ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,417,"          temp = ya + recipb;
",6,1,0,0,0,0,0,0,0,8,19,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,418,"          yb += -(temp - ya - recipb);
",8,1,0,1,2,0,0,0,0,11,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,419,"          ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,421,"          result = ya + yb;
",6,1,0,0,0,0,0,0,0,8,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,422,"          result *= 0.5;
",2,0,0,0,0,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,423,"      }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,425,"          double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,426,"          expm1(x, hiPrec);
",0,0,0,1,2,0,6,0,0,6,17,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,428,"          double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,429,"          double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,432,"          double denom = 1.0 + ya;
",4,1,0,0,0,0,0,0,0,5,24,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,433,"          double denomr = 1.0 / denom;
",4,1,0,0,0,0,0,0,0,5,28,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,434,"          double denomb = -(denom - 1.0 - ya) + yb;
",8,2,0,1,2,0,0,0,0,11,41,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,435,"          double ratio = ya * denomr;
",6,1,0,0,0,0,0,0,0,7,27,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,436,"          double temp = ratio * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,35,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,437,"          double ra = ratio + temp - temp;
",8,2,0,0,0,0,0,0,0,10,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,438,"          double rb = ratio - ra;
",6,1,0,0,0,0,0,0,0,7,23,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,440,"          temp = denom * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,441,"          double za = denom + temp - temp;
",8,2,0,0,0,0,0,0,0,10,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,442,"          double zb = denom - za;
",6,1,0,0,0,0,0,0,0,7,23,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,444,"          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;
",22,9,0,1,2,0,0,0,0,32,52,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,447,"          rb += yb*denomr;                        // numerator
",6,1,0,0,0,0,0,0,0,8,52,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,448,"          rb += -ya * denomb * denomr * denomr;   // denominator
",10,1,0,0,0,0,0,0,0,13,54,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,451,"          temp = ya + ra;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,452,"          yb += -(temp - ya - ra);
",8,1,0,1,2,0,0,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,453,"          ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,454,"          temp = ya + rb;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,455,"          yb += -(temp - ya - rb);
",8,1,0,1,2,0,0,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,456,"          ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,458,"          result = ya + yb;
",6,1,0,0,0,0,0,0,0,8,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,459,"          result *= 0.5;
",2,0,0,0,0,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,462,"      if (negate) {
",2,0,0,1,3,0,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,463,"          result = -result;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,466,"      return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,474,"      boolean negate = false;
",2,0,0,0,0,0,0,0,0,3,23,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,476,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,477,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,480,"      if (x > 20.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,481,"          return 1.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,484,"      if (x < -20) {
",2,1,0,1,3,0,0,0,0,4,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,485,"          return -1.0;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,488,"      if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,489,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,492,"      if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,493,"          x = -x;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,494,"          negate = true;
",2,0,0,0,0,0,0,0,0,4,14,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,498,"      if (x >= 0.5) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,499,"          double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,501,"          exp(x*2.0, 0.0, hiPrec);
",2,1,0,1,2,0,4,0,0,7,24,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,503,"          double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,504,"          double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,507,"          double na = -1.0 + ya;
",4,1,0,0,0,0,0,0,0,6,22,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,508,"          double nb = -(na + 1.0 - ya);
",6,2,0,1,2,0,0,0,0,9,29,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,509,"          double temp = na + yb;
",6,1,0,0,0,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,510,"          nb += -(temp - na - yb);
",8,1,0,1,2,0,0,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,511,"          na = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,514,"          double da = 1.0 + ya;
",4,1,0,0,0,0,0,0,0,5,21,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,515,"          double db = -(da - 1.0 - ya);
",6,1,0,1,2,0,0,0,0,8,29,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,516,"          temp = da + yb;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,517,"          db += -(temp - da - yb);
",8,1,0,1,2,0,0,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,518,"          da = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,520,"          temp = da * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,521,"          double daa = da + temp - temp;
",8,2,0,0,0,0,0,0,0,10,30,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,522,"          double dab = da - daa;
",6,1,0,0,0,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,525,"          double ratio = na/da;
",6,1,0,0,0,0,0,0,0,7,21,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,526,"          temp = ratio * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,527,"          double ratioa = ratio + temp - temp;
",8,2,0,0,0,0,0,0,0,10,36,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,528,"          double ratiob = ratio - ratioa;
",6,1,0,0,0,0,0,0,0,7,31,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,531,"          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;
",22,9,0,1,2,0,0,0,0,32,72,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,534,"          ratiob += nb / da;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,536,"          ratiob += -db * na / da / da;
",10,3,0,0,0,0,0,0,0,15,29,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,538,"          result = ratioa + ratiob;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,539,"      }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,541,"          double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,543,"          expm1(x*2.0, hiPrec);
",2,1,0,1,2,0,4,0,0,7,21,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,545,"          double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,546,"          double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,549,"          double na = ya;
",4,0,0,0,0,0,0,0,0,4,15,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,550,"          double nb = yb;
",4,0,0,0,0,0,0,0,0,4,15,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,553,"          double da = 2.0 + ya;
",4,1,0,0,0,0,0,0,0,5,21,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,554,"          double db = -(da - 2.0 - ya);
",6,1,0,1,2,0,0,0,0,8,29,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,555,"          double temp = da + yb;
",6,1,0,0,0,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,556,"          db += -(temp - da - yb);
",8,1,0,1,2,0,0,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,557,"          da = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,559,"          temp = da * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,560,"          double daa = da + temp - temp;
",8,2,0,0,0,0,0,0,0,10,30,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,561,"          double dab = da - daa;
",6,1,0,0,0,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,564,"          double ratio = na/da;
",6,1,0,0,0,0,0,0,0,7,21,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,565,"          temp = ratio * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,566,"          double ratioa = ratio + temp - temp;
",8,2,0,0,0,0,0,0,0,10,36,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,567,"          double ratiob = ratio - ratioa;
",6,1,0,0,0,0,0,0,0,7,31,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,570,"          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;
",22,9,0,1,2,0,0,0,0,32,72,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,573,"          ratiob += nb / da;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,575,"          ratiob += -db * na / da / da;
",10,3,0,0,0,0,0,0,0,15,29,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,577,"          result = ratioa + ratiob;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,580,"      if (negate) {
",2,0,0,1,3,0,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,581,"          result = -result;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,584,"      return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,592,"        return FastMath.log(a + FastMath.sqrt(a * a - 1));
",6,3,0,2,4,1,8,0,0,17,50,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,601,"        boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,602,"        if (a < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,603,"            negative = true;
",2,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,604,"            a = -a;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,608,"        if (a > 0.167) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,609,"            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);
",8,3,0,2,4,0,8,0,0,20,54,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,611,"            final double a2 = a * a;
",6,1,0,0,0,1,0,0,0,8,24,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,612,"            if (a > 0.097) {
",2,1,0,1,3,0,0,0,0,3,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,613,"                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0 - a2 * (1.0 / 15.0 - a2 * (1.0 / 17.0) * 15.0 / 16.0) * 13.0 / 14.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);
",20,33,0,9,18,0,0,0,0,54,264,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,614,"            } else if (a > 0.036) {
",2,1,0,1,4,0,0,0,0,3,23,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,615,"                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);
",16,25,0,7,14,0,0,0,0,42,196,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,616,"            } else if (a > 0.0036) {
",2,1,0,1,4,0,0,0,0,3,24,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,617,"                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);
",12,17,0,5,10,0,0,0,0,30,129,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,619,"                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0) * 3.0 / 4.0) / 2.0);
",8,9,0,3,6,0,0,0,0,18,71,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,623,"        return negative ? -absAsinh : absAsinh;
",6,0,0,0,0,1,0,0,0,7,39,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,633,"        boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,634,"        if (a < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,635,"            negative = true;
",2,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,636,"            a = -a;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,640,"        if (a > 0.15) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,641,"            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));
",6,4,0,3,6,0,4,0,0,15,49,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,643,"            final double a2 = a * a;
",6,1,0,0,0,1,0,0,0,8,24,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,644,"            if (a > 0.087) {
",2,1,0,1,3,0,0,0,0,3,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,645,"                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0 + a2 * (1.0 / 15.0 + a2 * (1.0 / 17.0)))))))));
",20,25,0,9,18,0,0,0,0,46,175,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,646,"            } else if (a > 0.031) {
",2,1,0,1,4,0,0,0,0,3,23,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,647,"                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0)))))));
",16,19,0,7,14,0,0,0,0,36,135,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,648,"            } else if (a > 0.003) {
",2,1,0,1,4,0,0,0,0,3,23,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,649,"                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0)))));
",12,13,0,5,10,0,0,0,0,26,95,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,651,"                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0)));
",8,7,0,3,6,0,0,0,0,16,57,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,655,"        return negative ? -absAtanh : absAtanh;
",6,0,0,0,0,1,0,0,0,7,39,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,665,"        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a
",6,2,0,3,6,2,0,0,0,9,87,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,674,"        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a
",6,2,0,3,6,2,0,0,0,9,91,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,682,"        return nextAfter(a, Double.POSITIVE_INFINITY);
",4,0,0,1,2,1,4,0,0,8,46,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,690,"        return nextAfter(a, Float.POSITIVE_INFINITY);
",4,0,0,1,2,1,4,0,0,8,45,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,698,"        return Math.random();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,722,"        return exp(x, 0.0, null);
",0,0,0,1,2,1,4,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,741,"        if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,742,"            intVal = (int) -x;
",4,0,0,1,2,0,0,0,0,6,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,744,"            if (intVal > 746) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,745,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,746,"                    hiPrec[0] = 0.0;
",0,0,1,1,2,0,0,0,0,3,16,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,747,"                    hiPrec[1] = 0.0;
",0,0,1,1,2,0,0,0,0,3,16,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,749,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,752,"            if (intVal > 709) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,754,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;
",4,2,0,1,2,1,6,0,0,13,79,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,755,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,756,"                    hiPrec[0] /= 285040095144011776.0;
",0,0,1,1,2,0,0,0,0,3,34,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,757,"                    hiPrec[1] /= 285040095144011776.0;
",0,0,1,1,2,0,0,0,0,3,34,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,759,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,762,"            if (intVal == 709) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,764,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;
",4,2,0,1,2,1,6,0,0,13,79,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,765,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,766,"                    hiPrec[0] /= 4.455505956692756620;
",0,0,1,1,2,0,0,0,0,3,34,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,767,"                    hiPrec[1] /= 4.455505956692756620;
",0,0,1,1,2,0,0,0,0,3,34,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,769,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,772,"            intVal++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,774,"            intPartA = EXP_INT_TABLE_A[750-intVal];
",4,1,1,1,2,0,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,775,"            intPartB = EXP_INT_TABLE_B[750-intVal];
",4,1,1,1,2,0,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,777,"            intVal = -intVal;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,779,"            intVal = (int) x;
",4,0,0,1,2,0,0,0,0,5,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,781,"            if (intVal > 709) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,782,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,783,"                    hiPrec[0] = Double.POSITIVE_INFINITY;
",4,0,1,1,2,0,0,0,0,7,37,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,784,"                    hiPrec[1] = 0.0;
",0,0,1,1,2,0,0,0,0,3,16,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,786,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,789,"            intPartA = EXP_INT_TABLE_A[750+intVal];
",4,1,1,1,2,0,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,790,"            intPartB = EXP_INT_TABLE_B[750+intVal];
",4,1,1,1,2,0,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,797,"        final int intFrac = (int) ((x - intVal) * 1024.0);
",6,2,0,3,6,1,0,0,0,9,50,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,798,"        final double fracPartA = EXP_FRAC_TABLE_A[intFrac];
",2,0,1,1,2,1,0,0,0,7,51,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,799,"        final double fracPartB = EXP_FRAC_TABLE_B[intFrac];
",2,0,1,1,2,1,0,0,0,7,51,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,805,"        final double epsilon = x - (intVal + intFrac / 1024.0);
",8,3,0,1,2,1,0,0,0,12,55,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,814,"        double z = 0.04168701738764507;
",2,0,0,0,0,0,0,0,0,2,31,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,815,"        z = z * epsilon + 0.1666666505023083;
",6,2,0,0,0,0,0,0,0,9,37,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,816,"        z = z * epsilon + 0.5000000000042687;
",6,2,0,0,0,0,0,0,0,9,37,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,817,"        z = z * epsilon + 1.0;
",6,2,0,0,0,0,0,0,0,9,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,818,"        z = z * epsilon + -3.940510424527919E-20;
",6,2,0,0,0,0,0,0,0,10,41,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,825,"        double tempA = intPartA * fracPartA;
",6,1,0,0,0,0,0,0,0,7,36,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,826,"        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;
",14,5,0,0,0,0,0,0,0,19,82,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,832,"        final double tempC = tempB + tempA;
",6,1,0,0,0,1,0,0,0,8,35,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,834,"        if (extra != 0.0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,835,"            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;
",20,7,0,0,0,0,0,0,0,28,63,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,837,"            result = tempC*z + tempB + tempA;
",10,3,0,0,0,0,0,0,0,14,33,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,840,"        if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,842,"            hiPrec[0] = tempA;
",2,0,1,1,2,0,0,0,0,5,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,843,"            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;
",16,6,1,1,2,0,0,0,0,25,58,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,846,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,854,"      return expm1(x, null);
",0,0,0,1,2,1,4,0,0,5,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,863,"        if (x != x || x == 0.0) { // NaN or zero
",6,3,0,1,3,0,0,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,864,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,867,"        if (x <= -1.0 || x >= 1.0) {
",4,3,0,1,3,0,0,0,0,8,28,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,870,"            double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,871,"            exp(x, 0.0, hiPrec);
",0,0,0,1,2,0,6,0,0,6,20,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,872,"            if (x > 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,873,"                return -1.0 + hiPrec[0] + hiPrec[1];
",0,1,1,2,4,1,0,0,0,6,36,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,875,"                final double ra = -1.0 + hiPrec[0];
",2,1,1,1,2,1,0,0,0,7,35,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,876,"                double rb = -(ra + 1.0 - hiPrec[0]);
",4,2,1,2,4,0,0,0,0,9,36,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,877,"                rb += hiPrec[1];
",2,0,1,1,2,0,0,0,0,5,16,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,878,"                return ra + rb;
",4,1,0,0,0,1,0,0,0,5,15,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,885,"        boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,887,"        if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,888,"            x = -x;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,889,"            negative = true;
",2,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,893,"            int intFrac = (int) (x * 1024.0);
",4,1,0,2,4,0,0,0,0,5,33,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,894,"            double tempA = EXP_FRAC_TABLE_A[intFrac] - 1.0;
",2,1,1,1,2,0,0,0,0,7,47,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,895,"            double tempB = EXP_FRAC_TABLE_B[intFrac];
",2,0,1,1,2,0,0,0,0,6,41,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,897,"            double temp = tempA + tempB;
",6,1,0,0,0,0,0,0,0,7,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,898,"            tempB = -(temp - tempA - tempB);
",8,1,0,1,2,0,0,0,0,11,32,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,899,"            tempA = temp;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,901,"            temp = tempA * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,902,"            baseA = tempA + temp - temp;
",8,2,0,0,0,0,0,0,0,11,28,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,903,"            baseB = tempB + (tempA - baseA);
",8,2,0,1,2,0,0,0,0,11,32,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,905,"            epsilon = x - intFrac/1024.0;
",6,2,0,0,0,0,0,0,0,9,29,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,910,"        double zb = 0.008336750013465571;
",2,0,0,0,0,0,0,0,0,2,33,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,911,"        zb = zb * epsilon + 0.041666663879186654;
",6,2,0,0,0,0,0,0,0,9,41,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,912,"        zb = zb * epsilon + 0.16666666666745392;
",6,2,0,0,0,0,0,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,913,"        zb = zb * epsilon + 0.49999999999999994;
",6,2,0,0,0,0,0,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,914,"        zb = zb * epsilon;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,915,"        zb = zb * epsilon;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,917,"        double za = epsilon;
",4,0,0,0,0,0,0,0,0,4,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,918,"        double temp = za + zb;
",6,1,0,0,0,0,0,0,0,7,22,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,919,"        zb = -(temp - za - zb);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,920,"        za = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,922,"        temp = za * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,923,"        temp = za + temp - temp;
",8,2,0,0,0,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,924,"        zb += za - temp;
",6,1,0,0,0,0,0,0,0,8,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,925,"        za = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,928,"        double ya = za * baseA;
",6,1,0,0,0,0,0,0,0,7,23,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,930,"        temp = ya + za * baseB;
",8,2,0,0,0,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,931,"        double yb = -(temp - ya - za * baseB);
",10,2,0,1,2,0,0,0,0,13,38,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,932,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,934,"        temp = ya + zb * baseA;
",8,2,0,0,0,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,935,"        yb += -(temp - ya - zb * baseA);
",10,2,0,1,2,0,0,0,0,14,32,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,936,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,938,"        temp = ya + zb * baseB;
",8,2,0,0,0,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,939,"        yb += -(temp - ya - zb*baseB);
",10,2,0,1,2,0,0,0,0,14,30,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,940,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,944,"        temp = ya + baseA;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,945,"        yb += -(temp - baseA - ya);
",8,1,0,1,2,0,0,0,0,11,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,946,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,948,"        temp = ya + za;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,950,"        yb += -(temp - ya - za);
",8,1,0,1,2,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,951,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,953,"        temp = ya + baseB;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,955,"        yb += -(temp - ya - baseB);
",8,1,0,1,2,0,0,0,0,11,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,956,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,958,"        temp = ya + zb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,960,"        yb += -(temp - ya - zb);
",8,1,0,1,2,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,961,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,963,"        if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,965,"            double denom = 1.0 + ya;
",4,1,0,0,0,0,0,0,0,5,24,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,966,"            double denomr = 1.0 / denom;
",4,1,0,0,0,0,0,0,0,5,28,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,967,"            double denomb = -(denom - 1.0 - ya) + yb;
",8,2,0,1,2,0,0,0,0,11,41,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,968,"            double ratio = ya * denomr;
",6,1,0,0,0,0,0,0,0,7,27,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,969,"            temp = ratio * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,970,"            final double ra = ratio + temp - temp;
",8,2,0,0,0,1,0,0,0,11,38,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,971,"            double rb = ratio - ra;
",6,1,0,0,0,0,0,0,0,7,23,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,973,"            temp = denom * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,974,"            za = denom + temp - temp;
",8,2,0,0,0,0,0,0,0,11,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,975,"            zb = denom - za;
",6,1,0,0,0,0,0,0,0,8,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,977,"            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;
",22,9,0,1,2,0,0,0,0,32,60,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,988,"            rb += yb * denomr;                      // numerator
",6,1,0,0,0,0,0,0,0,8,52,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,989,"            rb += -ya * denomb * denomr * denomr;   // denominator
",10,1,0,0,0,0,0,0,0,13,54,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,992,"            ya = -ra;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,993,"            yb = -rb;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,996,"        if (hiPrecOut != null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,997,"            hiPrecOut[0] = ya;
",2,0,1,1,2,0,0,0,0,5,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,998,"            hiPrecOut[1] = yb;
",2,0,1,1,2,0,0,0,0,5,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1001,"        return ya + yb;
",4,1,0,0,0,1,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1051,"            final double a = d * 9.31322574615478515625E-10;
",4,1,0,0,0,1,0,0,0,6,48,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1052,"            split[0] = (d + a - d) * HEX_40000000;
",8,3,1,2,4,0,0,0,0,14,38,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1053,"            split[1] = d - split[0];
",2,1,1,2,4,0,0,0,0,8,24,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1124,"            in[0] = in[1];
",0,0,1,2,4,0,0,0,0,5,14,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1125,"            in[1] = 0.0;
",0,0,1,1,2,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1256,"        return log(x, null);
",0,0,0,1,2,1,4,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1266,"        if (x==0) { // Handle special case of +0/-0
",2,1,0,1,3,0,0,0,0,3,43,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1267,"            return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1269,"        long bits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1272,"        if ((bits & 0x8000000000000000L) != 0 || x != x) {
",6,4,0,2,5,0,0,0,0,10,50,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1273,"            if (x != 0.0) {
",2,1,0,1,3,0,0,0,0,3,15,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1274,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1275,"                    hiPrec[0] = Double.NaN;
",4,0,1,1,2,0,0,0,0,7,23,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1278,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1283,"        if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1284,"            if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1285,"                hiPrec[0] = Double.POSITIVE_INFINITY;
",4,0,1,1,2,0,0,0,0,7,37,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1288,"            return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1292,"        int exp = (int)(bits >> 52)-1023;
",4,2,0,2,4,0,0,0,0,6,33,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1294,"        if ((bits & 0x7ff0000000000000L) == 0) {
",2,2,0,2,5,0,0,0,0,4,40,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1296,"            if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1298,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1299,"                    hiPrec[0] = Double.NEGATIVE_INFINITY;
",4,0,1,1,2,0,0,0,0,7,37,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1302,"                return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1306,"            bits <<= 1;
",2,0,0,0,0,0,0,0,0,3,11,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1307,"            while ( (bits & 0x0010000000000000L) == 0) {
",2,2,0,2,5,0,0,0,0,4,44,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1308,"                exp--;
",2,0,0,0,0,0,0,0,0,3,6,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1309,"                bits <<= 1;
",2,0,0,0,0,0,0,0,0,3,11,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1314,"        if (exp == -1 || exp == 0) {
",4,3,0,1,3,0,0,0,0,8,28,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1315,"            if (x < 1.01 && x > 0.99 && hiPrec == null) {
",6,5,0,1,3,0,0,0,0,11,45,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1320,"                double xa = x - 1.0;
",4,1,0,0,0,0,0,0,0,5,20,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1321,"                double xb = xa - x + 1.0;
",6,2,0,0,0,0,0,0,0,8,25,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1322,"                double tmp = xa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,31,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1323,"                double aa = xa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,10,27,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1324,"                double ab = xa - aa;
",6,1,0,0,0,0,0,0,0,7,20,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1325,"                xa = aa;
",4,0,0,0,0,0,0,0,0,5,8,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1326,"                xb = ab;
",4,0,0,0,0,0,0,0,0,5,8,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1328,"                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];
",6,1,1,2,4,0,0,0,0,9,53,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1329,"                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];
",6,1,1,2,4,0,0,0,0,9,53,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1331,"                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {
",10,2,0,1,3,0,0,0,0,13,53,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1333,"                    aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1334,"                    ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1336,"                    tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1337,"                    ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1338,"                    yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1341,"                    aa = ya + LN_QUICK_COEF[i][0];
",4,1,1,2,4,0,0,0,0,10,30,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1342,"                    ab = yb + LN_QUICK_COEF[i][1];
",4,1,1,2,4,0,0,0,0,10,30,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1344,"                    tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1345,"                    ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1346,"                    yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1350,"                aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1351,"                ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1353,"                tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1354,"                ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1355,"                yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1357,"                return ya + yb;
",4,1,0,0,0,1,0,0,0,5,15,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1362,"        double lnm[] = LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];
",4,2,1,5,10,0,0,0,0,8,66,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1373,"        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));
",8,4,0,3,6,0,0,0,0,12,89,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1375,"        double lnza = 0.0;
",2,0,0,0,0,0,0,0,0,2,18,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1376,"        double lnzb = 0.0;
",2,0,0,0,0,0,0,0,0,2,18,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1378,"        if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1380,"            double tmp = epsilon * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,36,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1381,"            double aa = epsilon + tmp - tmp;
",8,2,0,0,0,0,0,0,0,10,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1382,"            double ab = epsilon - aa;
",6,1,0,0,0,0,0,0,0,7,25,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1383,"            double xa = aa;
",4,0,0,0,0,0,0,0,0,4,15,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1384,"            double xb = ab;
",4,0,0,0,0,0,0,0,0,4,15,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1387,"            double numer = bits & 0x3ffffffffffL;
",4,1,0,0,0,0,0,0,0,5,37,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1388,"            double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);
",6,2,0,1,2,0,0,0,0,8,59,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1389,"            aa = numer - xa*denom - xb * denom;
",12,4,0,0,0,0,0,0,0,17,35,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1390,"            xb += aa / denom;
",6,1,0,0,0,0,0,0,0,8,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1393,"            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];
",6,1,1,2,4,0,0,0,0,9,57,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1394,"            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];
",6,1,1,2,4,0,0,0,0,9,57,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1396,"            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {
",10,2,0,1,3,0,0,0,0,13,55,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1398,"                aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1399,"                ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1401,"                tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1402,"                ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1403,"                yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1406,"                aa = ya + LN_HI_PREC_COEF[i][0];
",4,1,1,2,4,0,0,0,0,10,32,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1407,"                ab = yb + LN_HI_PREC_COEF[i][1];
",4,1,1,2,4,0,0,0,0,10,32,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1409,"                tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1410,"                ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1411,"                yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1415,"            aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1416,"            ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1424,"            lnza = aa + ab;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1425,"            lnzb = -(lnza - aa - ab);
",8,1,0,1,2,0,0,0,0,11,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1426,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1429,"            lnza = -0.16624882440418567;
",2,0,0,0,0,0,0,0,0,4,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1430,"            lnza = lnza * epsilon + 0.19999954120254515;
",6,2,0,0,0,0,0,0,0,9,44,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1431,"            lnza = lnza * epsilon + -0.2499999997677497;
",6,2,0,0,0,0,0,0,0,10,44,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1432,"            lnza = lnza * epsilon + 0.3333333333332802;
",6,2,0,0,0,0,0,0,0,9,43,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1433,"            lnza = lnza * epsilon + -0.5;
",6,2,0,0,0,0,0,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1434,"            lnza = lnza * epsilon + 1.0;
",6,2,0,0,0,0,0,0,0,9,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1435,"            lnza = lnza * epsilon;
",6,1,0,0,0,0,0,0,0,8,22,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1452,"        double a = LN_2_A*exp;
",6,1,0,0,0,0,0,0,0,7,22,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1453,"        double b = 0.0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1454,"        double c = a+lnm[0];
",4,1,1,1,2,0,0,0,0,7,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1455,"        double d = -(c-a-lnm[0]);
",6,1,1,2,4,0,0,0,0,10,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1456,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1457,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1459,"        c = a + lnza;
",6,1,0,0,0,0,0,0,0,8,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1460,"        d = -(c - a - lnza);
",8,1,0,1,2,0,0,0,0,11,20,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1461,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1462,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1464,"        c = a + LN_2_B*exp;
",8,2,0,0,0,0,0,0,0,11,19,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1465,"        d = -(c - a - LN_2_B*exp);
",10,2,0,1,2,0,0,0,0,14,26,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1466,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1467,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1469,"        c = a + lnm[1];
",4,1,1,1,2,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1470,"        d = -(c - a - lnm[1]);
",6,1,1,2,4,0,0,0,0,11,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1471,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1472,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1474,"        c = a + lnzb;
",6,1,0,0,0,0,0,0,0,8,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1475,"        d = -(c - a - lnzb);
",8,1,0,1,2,0,0,0,0,11,20,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1476,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1477,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1479,"        if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1480,"            hiPrec[0] = a;
",2,0,1,1,2,0,0,0,0,5,14,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1481,"            hiPrec[1] = b;
",2,0,1,1,2,0,0,0,0,5,14,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1484,"        return a + b;
",4,1,0,0,0,1,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1493,"        if (x == -1) {
",2,1,0,1,3,0,0,0,0,4,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1494,"            return x/0.0;   // -Infinity
",2,1,0,0,0,1,0,0,0,3,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1497,"        if (x > 0 && 1/x == 0) { // x = Infinity
",4,4,0,1,3,0,0,0,0,8,40,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1498,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1501,"        if (x>1e-6 || x<-1e-6) {
",4,3,0,1,3,0,0,0,0,8,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1502,"            double xpa = 1.0 + x;
",4,1,0,0,0,0,0,0,0,5,21,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1503,"            double xpb = -(xpa - 1.0 - x);
",6,1,0,1,2,0,0,0,0,8,30,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1505,"            double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1507,"            final double lores = log(xpa, hiPrec);
",2,0,0,1,2,1,6,0,0,9,38,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1508,"            if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN
",0,0,0,2,5,0,6,0,0,6,73,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1509,"                return lores;
",2,0,0,0,0,1,0,0,0,2,13,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1514,"            double fx1 = xpb/xpa;
",6,1,0,0,0,0,0,0,0,7,21,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1516,"            double epsilon = 0.5 * fx1 + 1.0;
",4,2,0,0,0,0,0,0,0,6,33,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1517,"            epsilon = epsilon * fx1;
",6,1,0,0,0,0,0,0,0,8,24,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1519,"            return epsilon + hiPrec[1] + hiPrec[0];
",2,1,1,2,4,1,0,0,0,7,39,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1523,"        double y = x * 0.333333333333333 - 0.5;
",4,2,0,0,0,0,0,0,0,6,39,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1524,"        y = y * x + 1.0;
",6,2,0,0,0,0,0,0,0,9,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1525,"        y = y * x;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1527,"        return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1535,"        final double hiPrec[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1537,"        final double lores = log(x, hiPrec);
",2,0,0,1,2,1,6,0,0,9,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1538,"        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN
",0,0,0,2,5,0,6,0,0,6,73,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1539,"            return lores;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1542,"        final double tmp = hiPrec[0] * HEX_40000000;
",4,1,1,1,2,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1543,"        final double lna = hiPrec[0] + tmp - tmp;
",6,2,1,1,2,1,0,0,0,11,41,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1544,"        final double lnb = hiPrec[0] - lna + hiPrec[1];
",4,2,1,2,4,1,0,0,0,11,47,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1546,"        final double rln10a = 0.4342944622039795;
",2,0,0,0,0,1,0,0,0,3,41,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1547,"        final double rln10b = 1.9699272335463627E-8;
",2,0,0,0,0,1,0,0,0,3,44,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1549,"        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;
",16,7,0,0,0,1,0,0,0,23,65,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1560,"        final double lns[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,35,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1562,"        if (y == 0.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1563,"            return 1.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1566,"        if (x != x) { // X is NaN
",4,1,0,1,3,0,0,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1567,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1571,"        if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1572,"            long bits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1573,"            if ((bits & 0x8000000000000000L) != 0) {
",2,2,0,2,5,0,0,0,0,4,40,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1575,"                long yi = (long) y;
",4,0,0,1,2,0,0,0,0,4,19,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1577,"                if (y < 0 && y == yi && (yi & 1) == 1) {
",8,6,0,2,5,0,0,0,0,14,40,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1578,"                    return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,11,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1581,"                if (y < 0 && y == yi && (yi & 1) == 1) {
",8,6,0,2,5,0,0,0,0,14,40,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1582,"                    return -0.0;
",0,0,0,0,0,1,0,0,0,1,12,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1585,"                if (y > 0 && y == yi && (yi & 1) == 1) {
",8,6,0,2,5,0,0,0,0,14,40,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1586,"                    return -0.0;
",0,0,0,0,0,1,0,0,0,1,12,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1590,"            if (y < 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1591,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1593,"            if (y > 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1594,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1597,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1600,"        if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1601,"            if (y != y) { // y is NaN
",4,1,0,1,3,0,0,0,0,5,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1602,"                return y;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1604,"            if (y < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1605,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1607,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1611,"        if (y == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1612,"            if (x * x == 1.0) {
",4,2,0,1,3,0,0,0,0,6,19,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1613,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1616,"            if (x * x > 1.0) {
",4,2,0,1,3,0,0,0,0,6,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1617,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1619,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1623,"        if (x == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1624,"            if (y != y) { // y is NaN
",4,1,0,1,3,0,0,0,0,5,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1625,"                return y;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1628,"            if (y < 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1629,"                long yi = (long) y;
",4,0,0,1,2,0,0,0,0,4,19,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1630,"                if (y == yi && (yi & 1) == 1) {
",6,4,0,2,5,0,0,0,0,10,31,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1631,"                    return -0.0;
",0,0,0,0,0,1,0,0,0,1,12,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1634,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1637,"            if (y > 0)  {
",2,1,0,1,3,0,0,0,0,3,13,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1638,"                long yi = (long) y;
",4,0,0,1,2,0,0,0,0,4,19,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1639,"                if (y == yi && (yi & 1) == 1) {
",6,4,0,2,5,0,0,0,0,10,31,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1640,"                    return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,11,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1643,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1647,"        if (y == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1649,"            if (x * x == 1.0) {
",4,2,0,1,3,0,0,0,0,6,19,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1650,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1653,"            if (x * x < 1.0) {
",4,2,0,1,3,0,0,0,0,6,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1654,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1656,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1661,"        if (x < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1663,"            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {
",8,3,0,1,3,0,0,0,0,12,46,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1664,"                return pow(-x, y);
",2,0,0,1,2,1,4,0,0,7,18,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1667,"            if (y == (long) y) {
",4,1,0,2,5,0,0,0,0,5,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1669,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);
",6,2,0,4,8,1,8,0,0,19,53,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1671,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1678,"        if (y < 8e298 && y > -8e298) {
",4,3,0,1,3,0,0,0,0,8,30,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1679,"            double tmp1 = y * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,31,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1680,"            ya = y + tmp1 - tmp1;
",8,2,0,0,0,0,0,0,0,11,21,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1681,"            yb = y - ya;
",6,1,0,0,0,0,0,0,0,8,12,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1682,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1683,"            double tmp1 = y * 9.31322574615478515625E-10;
",4,1,0,0,0,0,0,0,0,5,45,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1684,"            double tmp2 = tmp1 * 9.31322574615478515625E-10;
",4,1,0,0,0,0,0,0,0,5,48,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1685,"            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;
",12,3,0,1,2,0,0,0,0,16,56,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1686,"            yb = y - ya;
",6,1,0,0,0,0,0,0,0,8,12,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1690,"        final double lores = log(x, lns);
",2,0,0,1,2,1,6,0,0,9,33,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1691,"        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN
",0,0,0,2,5,0,6,0,0,6,73,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1692,"            return lores;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1695,"        double lna = lns[0];
",2,0,1,1,2,0,0,0,0,4,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1696,"        double lnb = lns[1];
",2,0,1,1,2,0,0,0,0,4,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1699,"        double tmp1 = lna * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,33,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1700,"        double tmp2 = lna + tmp1 - tmp1;
",8,2,0,0,0,0,0,0,0,10,32,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1701,"        lnb += lna - tmp2;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1702,"        lna = tmp2;
",4,0,0,0,0,0,0,0,0,5,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1705,"        final double aa = lna * ya;
",6,1,0,0,0,1,0,0,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1706,"        final double ab = lna * yb + lnb * ya + lnb * yb;
",14,5,0,0,0,1,0,0,0,20,49,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1708,"        lna = aa+ab;
",6,1,0,0,0,0,0,0,0,8,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1709,"        lnb = -(lna - aa - ab);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1711,"        double z = 1.0 / 120.0;
",2,1,0,0,0,0,0,0,0,3,23,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1712,"        z = z * lnb + (1.0 / 24.0);
",6,3,0,1,2,0,0,0,0,10,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1713,"        z = z * lnb + (1.0 / 6.0);
",6,3,0,1,2,0,0,0,0,10,26,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1714,"        z = z * lnb + 0.5;
",6,2,0,0,0,0,0,0,0,9,18,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1715,"        z = z * lnb + 1.0;
",6,2,0,0,0,0,0,0,0,9,18,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1716,"        z = z * lnb;
",6,1,0,0,0,0,0,0,0,8,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1718,"        final double result = exp(lna, z, null);
",2,0,0,1,2,1,6,0,0,10,40,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1720,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1975,"        double x2 = x*x;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1977,"        double p = 2.7553817452272217E-6;
",2,0,0,0,0,0,0,0,0,2,33,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1978,"        p = p * x2 + -1.9841269659586505E-4;
",6,2,0,0,0,0,0,0,0,10,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1979,"        p = p * x2 + 0.008333333333329196;
",6,2,0,0,0,0,0,0,0,9,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1980,"        p = p * x2 + -0.16666666666666666;
",6,2,0,0,0,0,0,0,0,10,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1983,"        p = p * x2 * x;
",8,1,0,0,0,0,0,0,0,10,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1985,"        return p;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1995,"        double x2 = x*x;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1997,"        double p = 2.479773539153719E-5;
",2,0,0,0,0,0,0,0,0,2,32,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1998,"        p = p * x2 + -0.0013888888689039883;
",6,2,0,0,0,0,0,0,0,10,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,1999,"        p = p * x2 + 0.041666666666621166;
",6,2,0,0,0,0,0,0,0,9,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2000,"        p = p * x2 + -0.49999999999999994;
",6,2,0,0,0,0,0,0,0,10,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2001,"        p *= x2;
",4,0,0,0,0,0,0,0,0,5,8,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2003,"        return p;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2014,"        int idx = (int) ((xa * 8.0) + 0.5);
",4,2,0,3,6,0,0,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2015,"        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;
",4,1,1,1,2,1,0,0,0,10,54,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2018,"        final double sintA = SINE_TABLE_A[idx];
",2,0,1,1,2,1,0,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2019,"        final double sintB = SINE_TABLE_B[idx];
",2,0,1,1,2,1,0,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2020,"        final double costA = COSINE_TABLE_A[idx];
",2,0,1,1,2,1,0,0,0,7,41,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2021,"        final double costB = COSINE_TABLE_B[idx];
",2,0,1,1,2,1,0,0,0,7,41,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2024,"        double sinEpsA = epsilon;
",4,0,0,0,0,0,0,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2025,"        double sinEpsB = polySine(epsilon);
",2,0,0,1,2,0,4,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2026,"        final double cosEpsA = 1.0;
",2,0,0,0,0,1,0,0,0,3,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2027,"        final double cosEpsB = polyCosine(epsilon);
",2,0,0,1,2,1,4,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2030,"        final double temp = sinEpsA * HEX_40000000;
",6,1,0,0,0,1,0,0,0,8,43,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2031,"        double temp2 = (sinEpsA + temp) - temp;
",8,2,0,1,2,0,0,0,0,10,39,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2032,"        sinEpsB +=  sinEpsA - temp2;
",6,1,0,0,0,0,0,0,0,8,28,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2033,"        sinEpsA = temp2;
",4,0,0,0,0,0,0,0,0,5,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2059,"        double a = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2060,"        double b = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2062,"        double t = sintA;
",4,0,0,0,0,0,0,0,0,4,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2063,"        double c = a + t;
",6,1,0,0,0,0,0,0,0,7,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2064,"        double d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,10,24,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2065,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2066,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2068,"        t = costA * sinEpsA;
",6,1,0,0,0,0,0,0,0,8,20,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2069,"        c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2070,"        d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2071,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2072,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2074,"        b = b + sintA * cosEpsB + costA * sinEpsB;
",12,4,0,0,0,0,0,0,0,17,42,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2089,"        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;
",18,6,0,0,0,0,0,0,0,25,68,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2116,"        if (xb != 0.0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2117,"            t = ((costA + costB) * (cosEpsA + cosEpsB) -
",10,5,0,2,5,0,0,0,0,16,44,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2119,"            c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2120,"            d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2121,"            a = c;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2122,"            b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2125,"        result = a + b;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2127,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2138,"        final double pi2a = 1.5707963267948966;
",2,0,0,0,0,1,0,0,0,3,39,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2139,"        final double pi2b = 6.123233995736766E-17;
",2,0,0,0,0,1,0,0,0,3,42,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2141,"        final double a = pi2a - xa;
",6,1,0,0,0,1,0,0,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2142,"        double b = -(a - pi2a + xa);
",8,2,0,1,2,0,0,0,0,11,28,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2143,"        b += pi2b - xb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2145,"        return sinQ(a, b);
",0,0,0,1,2,1,6,0,0,6,18,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2158,"        int idx = (int) ((xa * 8.0) + 0.5);
",4,2,0,3,6,0,0,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2159,"        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;
",4,1,1,1,2,1,0,0,0,10,54,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2162,"        final double sintA = SINE_TABLE_A[idx];
",2,0,1,1,2,1,0,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2163,"        final double sintB = SINE_TABLE_B[idx];
",2,0,1,1,2,1,0,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2164,"        final double costA = COSINE_TABLE_A[idx];
",2,0,1,1,2,1,0,0,0,7,41,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2165,"        final double costB = COSINE_TABLE_B[idx];
",2,0,1,1,2,1,0,0,0,7,41,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2168,"        double sinEpsA = epsilon;
",4,0,0,0,0,0,0,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2169,"        double sinEpsB = polySine(epsilon);
",2,0,0,1,2,0,4,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2170,"        final double cosEpsA = 1.0;
",2,0,0,0,0,1,0,0,0,3,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2171,"        final double cosEpsB = polyCosine(epsilon);
",2,0,0,1,2,1,4,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2174,"        double temp = sinEpsA * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2175,"        double temp2 = (sinEpsA + temp) - temp;
",8,2,0,1,2,0,0,0,0,10,39,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2176,"        sinEpsB +=  sinEpsA - temp2;
",6,1,0,0,0,0,0,0,0,8,28,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2177,"        sinEpsA = temp2;
",4,0,0,0,0,0,0,0,0,5,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2202,"        double a = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2203,"        double b = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2206,"        double t = sintA;
",4,0,0,0,0,0,0,0,0,4,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2207,"        double c = a + t;
",6,1,0,0,0,0,0,0,0,7,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2208,"        double d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,10,24,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2209,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2210,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2212,"        t = costA*sinEpsA;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2213,"        c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2214,"        d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2215,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2216,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2218,"        b = b + sintA*cosEpsB + costA*sinEpsB;
",12,4,0,0,0,0,0,0,0,17,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2219,"        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;
",18,6,0,0,0,0,0,0,0,25,62,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2221,"        double sina = a + b;
",6,1,0,0,0,0,0,0,0,7,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2222,"        double sinb = -(sina - a - b);
",8,1,0,1,2,0,0,0,0,10,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2226,"        a = b = c = d = 0.0;
",8,0,0,0,0,0,0,0,0,12,20,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2228,"        t = costA*cosEpsA;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2229,"        c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2230,"        d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2231,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2232,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2234,"        t = -sintA*sinEpsA;
",6,1,0,0,0,0,0,0,0,9,19,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2235,"        c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2236,"        d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2237,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2238,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2240,"        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;
",16,6,0,0,0,0,0,0,0,23,54,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2241,"        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);
",16,6,0,1,2,0,0,0,0,23,56,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2243,"        double cosa = a + b;
",6,1,0,0,0,0,0,0,0,7,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2244,"        double cosb = -(cosa - a - b);
",8,1,0,1,2,0,0,0,0,10,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2246,"        if (cotanFlag) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2248,"            tmp = cosa; cosa = sina; sina = tmp;
",12,0,0,0,0,0,0,0,0,15,36,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2249,"            tmp = cosb; cosb = sinb; sinb = tmp;
",12,0,0,0,0,0,0,0,0,15,36,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2263,"        double est = sina/cosa;
",6,1,0,0,0,0,0,0,0,7,23,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2266,"        temp = est * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,26,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2267,"        double esta = (est + temp) - temp;
",8,2,0,1,2,0,0,0,0,10,34,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2268,"        double estb =  est - esta;
",6,1,0,0,0,0,0,0,0,7,26,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2270,"        temp = cosa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2271,"        double cosaa = (cosa + temp) - temp;
",8,2,0,1,2,0,0,0,0,10,36,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2272,"        double cosab =  cosa - cosaa;
",6,1,0,0,0,0,0,0,0,7,29,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2275,"        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding
",22,9,0,1,2,0,0,0,0,31,114,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2276,"        err += sinb/cosa;                     // Change in est due to sinb
",6,1,0,0,0,0,0,0,0,8,66,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2277,"        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb
",10,3,0,0,0,0,0,0,0,15,66,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2279,"        if (xb != 0.0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2282,"            double xbadj = xb + est*est*xb;
",10,2,0,0,0,0,0,0,0,12,31,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2283,"            if (cotanFlag) {
",2,0,0,1,3,0,0,0,0,2,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2284,"                xbadj = -xbadj;
",4,0,0,0,0,0,0,0,0,6,15,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2287,"            err += xbadj;
",4,0,0,0,0,0,0,0,0,5,13,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2290,"        return est+err;
",4,1,0,0,0,1,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2307,"        long inbits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,41,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2308,"        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;
",4,3,0,3,6,0,0,0,0,7,53,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2311,"        inbits &= 0x000fffffffffffffL;
",2,0,0,0,0,0,0,0,0,3,30,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2312,"        inbits |= 0x0010000000000000L;
",2,0,0,0,0,0,0,0,0,3,30,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2315,"        exponent++;
",2,0,0,0,0,0,0,0,0,3,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2316,"        inbits <<= 11;
",2,0,0,0,0,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2322,"        int idx = exponent >> 6;
",4,1,0,0,0,0,0,0,0,5,24,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2323,"        int shift = exponent - (idx << 6);
",6,2,0,1,2,0,0,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2325,"        if (shift != 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2326,"            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);
",8,3,1,3,6,0,0,0,0,14,53,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2327,"            shpi0 |= RECIP_2PI[idx] >>> (64-shift);
",4,2,1,2,4,0,0,0,0,11,39,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2328,"            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));
",8,5,1,5,10,0,0,0,0,20,70,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2329,"            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));
",10,6,1,5,10,0,0,0,0,21,72,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2331,"            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];
",6,2,1,2,4,0,0,0,0,11,42,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2332,"            shpiA = RECIP_2PI[idx];
",2,0,1,1,2,0,0,0,0,7,23,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2333,"            shpiB = RECIP_2PI[idx+1];
",4,1,1,1,2,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2337,"        long a = inbits >>> 32;
",4,1,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2338,"        long b = inbits & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,5,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2340,"        long c = shpiA >>> 32;
",4,1,0,0,0,0,0,0,0,5,22,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2341,"        long d = shpiA & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,5,29,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2343,"        long ac = a * c;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2344,"        long bd = b * d;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2345,"        long bc = b * c;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2346,"        long ad = a * d;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2348,"        long prodB = bd + (ad << 32);
",6,2,0,1,2,0,0,0,0,8,29,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2349,"        long prodA = ac + (ad >>> 32);
",6,2,0,1,2,0,0,0,0,8,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2351,"        boolean bita = (bd & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,6,47,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2352,"        boolean bitb = (ad & 0x80000000L ) != 0;
",4,2,0,1,2,0,0,0,0,6,40,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2353,"        boolean bitsum = (prodB & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,6,52,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2356,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2358,"            prodA++;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2361,"        bita = (prodB & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,42,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2362,"        bitb = (bc & 0x80000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,32,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2364,"        prodB = prodB + (bc << 32);
",6,2,0,1,2,0,0,0,0,9,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2365,"        prodA = prodA + (bc >>> 32);
",6,2,0,1,2,0,0,0,0,9,28,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2367,"        bitsum = (prodB & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,44,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2370,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2372,"            prodA++;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2376,"        c = shpiB >>> 32;
",4,1,0,0,0,0,0,0,0,6,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2377,"        d = shpiB & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2378,"        ac = a * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2379,"        bc = b * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2380,"        ad = a * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2383,"        ac = ac + ((bc + ad) >>> 32);
",8,3,0,2,4,0,0,0,0,12,29,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2385,"        bita = (prodB & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,42,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2386,"        bitb = (ac & 0x8000000000000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,40,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2387,"        prodB += ac;
",4,0,0,0,0,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2388,"        bitsum = (prodB & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,44,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2390,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2392,"            prodA++;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2396,"        c = shpi0 >>> 32;
",4,1,0,0,0,0,0,0,0,6,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2397,"        d = shpi0 & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2399,"        bd = b * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2400,"        bc = b * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2401,"        ad = a * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2403,"        prodA += bd + ((bc + ad) << 32);
",8,3,0,2,4,0,0,0,0,12,32,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2415,"        int intPart = (int)(prodA >>> 62);
",4,1,0,2,4,0,0,0,0,5,34,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2418,"        prodA <<= 2;
",2,0,0,0,0,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2419,"        prodA |= prodB >>> 62;
",4,1,0,0,0,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2420,"        prodB <<= 2;
",2,0,0,0,0,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2423,"        a = prodA >>> 32;
",4,1,0,0,0,0,0,0,0,6,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2424,"        b = prodA & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2426,"        c = PI_O_4_BITS[0] >>> 32;
",2,1,1,1,2,0,0,0,0,6,26,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2427,"        d = PI_O_4_BITS[0] & 0xffffffffL;
",2,1,1,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2429,"        ac = a * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2430,"        bd = b * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2431,"        bc = b * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2432,"        ad = a * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2434,"        long prod2B = bd + (ad << 32);
",6,2,0,1,2,0,0,0,0,8,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2435,"        long prod2A = ac + (ad >>> 32);
",6,2,0,1,2,0,0,0,0,8,31,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2437,"        bita = (bd & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2438,"        bitb = (ad & 0x80000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,32,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2439,"        bitsum = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,45,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2442,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2444,"            prod2A++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2447,"        bita = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2448,"        bitb = (bc & 0x80000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,32,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2450,"        prod2B = prod2B + (bc << 32);
",6,2,0,1,2,0,0,0,0,9,29,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2451,"        prod2A = prod2A + (bc >>> 32);
",6,2,0,1,2,0,0,0,0,9,30,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2453,"        bitsum = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,45,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2456,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2458,"            prod2A++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2462,"        c = PI_O_4_BITS[1] >>> 32;
",2,1,1,1,2,0,0,0,0,6,26,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2463,"        d = PI_O_4_BITS[1] & 0xffffffffL;
",2,1,1,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2464,"        ac = a * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2465,"        bc = b * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2466,"        ad = a * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2469,"        ac = ac + ((bc + ad) >>> 32);
",8,3,0,2,4,0,0,0,0,12,29,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2471,"        bita = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2472,"        bitb = (ac & 0x8000000000000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,40,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2473,"        prod2B += ac;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2474,"        bitsum = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,45,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2476,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2478,"            prod2A++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2482,"        a = prodB >>> 32;
",4,1,0,0,0,0,0,0,0,6,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2483,"        b = prodB & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2484,"        c = PI_O_4_BITS[0] >>> 32;
",2,1,1,1,2,0,0,0,0,6,26,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2485,"        d = PI_O_4_BITS[0] & 0xffffffffL;
",2,1,1,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2486,"        ac = a * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2487,"        bc = b * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2488,"        ad = a * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2491,"        ac = ac + ((bc + ad) >>> 32);
",8,3,0,2,4,0,0,0,0,12,29,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2493,"        bita = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2494,"        bitb = (ac & 0x8000000000000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,40,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2495,"        prod2B += ac;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2496,"        bitsum = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,45,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2498,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2500,"            prod2A++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2504,"        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits
",6,2,0,1,2,0,0,0,0,8,68,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2505,"        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits
",10,5,0,4,8,0,0,0,0,15,102,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2507,"        double sumA = tmpA + tmpB;
",6,1,0,0,0,0,0,0,0,7,26,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2508,"        double sumB = -(sumA - tmpA - tmpB);
",8,1,0,1,2,0,0,0,0,10,36,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2511,"        result[0] = intPart;
",2,0,1,1,2,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2512,"        result[1] = sumA * 2.0;
",2,1,1,1,2,0,0,0,0,6,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2513,"        result[2] = sumB * 2.0;
",2,1,1,1,2,0,0,0,0,6,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2514,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2522,"        boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2523,"        int quadrant = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2525,"        double xb = 0.0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2528,"        xa = x;
",4,0,0,0,0,0,0,0,0,5,7,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2529,"        if (x < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2530,"            negative = true;
",2,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2531,"            xa = -xa;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2535,"        if (xa == 0.0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2536,"            long bits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2537,"            if (bits < 0) {
",2,1,0,1,3,0,0,0,0,3,15,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2538,"                return -0.0;
",0,0,0,0,0,1,0,0,0,1,12,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2540,"            return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2543,"        if (xa != xa || xa == Double.POSITIVE_INFINITY) {
",10,3,0,1,3,0,0,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2544,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2548,"        if (xa > 3294198.0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2552,"            double reduceResults[] = new double[3];
",2,0,0,2,4,0,0,0,0,2,39,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2553,"            reducePayneHanek(xa, reduceResults);
",0,0,0,1,2,0,6,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2554,"            quadrant = ((int) reduceResults[0]) & 3;
",2,1,1,3,6,0,0,0,0,6,40,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2555,"            xa = reduceResults[1];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2556,"            xb = reduceResults[2];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2557,"        } else if (xa > 1.5707963267948966) {
",2,1,0,1,4,0,0,0,0,3,37,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2562,"            int k = (int)(xa * 0.6366197723675814);
",4,1,0,2,4,0,0,0,0,5,39,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2568,"                double a = -k * 1.570796251296997;
",4,1,0,0,0,0,0,0,0,6,34,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2569,"                remA = xa + a;
",6,1,0,0,0,0,0,0,0,8,14,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2570,"                remB = -(remA - xa - a);
",8,1,0,1,2,0,0,0,0,11,24,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2572,"                a = -k * 7.549789948768648E-8;
",4,1,0,0,0,0,0,0,0,7,30,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2573,"                double b = remA;
",4,0,0,0,0,0,0,0,0,4,16,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2574,"                remA = a + b;
",6,1,0,0,0,0,0,0,0,8,13,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2575,"                remB += -(remA - b - a);
",8,1,0,1,2,0,0,0,0,11,24,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2577,"                a = -k * 6.123233995736766E-17;
",4,1,0,0,0,0,0,0,0,7,31,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2578,"                b = remA;
",4,0,0,0,0,0,0,0,0,5,9,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2579,"                remA = a + b;
",6,1,0,0,0,0,0,0,0,8,13,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2580,"                remB += -(remA - b - a);
",8,1,0,1,2,0,0,0,0,11,24,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2582,"                if (remA > 0.0) {
",2,1,0,1,3,0,0,0,0,3,17,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2583,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2589,"                k--;
",2,0,0,0,0,0,0,0,0,3,4,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2590,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2591,"            quadrant = k & 3;
",4,1,0,0,0,0,0,0,0,6,17,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2592,"            xa = remA;
",4,0,0,0,0,0,0,0,0,5,10,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2593,"            xb = remB;
",4,0,0,0,0,0,0,0,0,5,10,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2596,"        if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2597,"            quadrant ^= 2;  // Flip bit 1
",2,0,0,0,0,0,0,0,0,3,29,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2600,"        switch (quadrant) {
",2,0,0,1,3,0,0,0,0,2,19,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2602,"                return sinQ(xa, xb);
",0,0,0,1,2,1,6,0,0,6,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2604,"                return cosQ(xa, xb);
",0,0,0,1,2,1,6,0,0,6,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2606,"                return -sinQ(xa, xb);
",0,0,0,1,2,1,6,0,0,7,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2608,"                return -cosQ(xa, xb);
",0,0,0,1,2,1,6,0,0,7,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2610,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2620,"        int quadrant = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2623,"        double xa = x;
",4,0,0,0,0,0,0,0,0,4,14,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2624,"        if (x < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2625,"            xa = -xa;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2628,"        if (xa != xa || xa == Double.POSITIVE_INFINITY) {
",10,3,0,1,3,0,0,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2629,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2633,"        double xb = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2634,"        if (xa > 3294198.0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2638,"            double reduceResults[] = new double[3];
",2,0,0,2,4,0,0,0,0,2,39,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2639,"            reducePayneHanek(xa, reduceResults);
",0,0,0,1,2,0,6,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2640,"            quadrant = ((int) reduceResults[0]) & 3;
",2,1,1,3,6,0,0,0,0,6,40,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2641,"            xa = reduceResults[1];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2642,"            xb = reduceResults[2];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2643,"        } else if (xa > 1.5707963267948966) {
",2,1,0,1,4,0,0,0,0,3,37,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2648,"            int k = (int)(xa * 0.6366197723675814);
",4,1,0,2,4,0,0,0,0,5,39,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2654,"                double a = -k * 1.570796251296997;
",4,1,0,0,0,0,0,0,0,6,34,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2655,"                remA = xa + a;
",6,1,0,0,0,0,0,0,0,8,14,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2656,"                remB = -(remA - xa - a);
",8,1,0,1,2,0,0,0,0,11,24,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2658,"                a = -k * 7.549789948768648E-8;
",4,1,0,0,0,0,0,0,0,7,30,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2659,"                double b = remA;
",4,0,0,0,0,0,0,0,0,4,16,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2660,"                remA = a + b;
",6,1,0,0,0,0,0,0,0,8,13,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2661,"                remB += -(remA - b - a);
",8,1,0,1,2,0,0,0,0,11,24,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2663,"                a = -k * 6.123233995736766E-17;
",4,1,0,0,0,0,0,0,0,7,31,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2664,"                b = remA;
",4,0,0,0,0,0,0,0,0,5,9,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2665,"                remA = a + b;
",6,1,0,0,0,0,0,0,0,8,13,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2666,"                remB += -(remA - b - a);
",8,1,0,1,2,0,0,0,0,11,24,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2668,"                if (remA > 0.0) {
",2,1,0,1,3,0,0,0,0,3,17,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2669,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2675,"                k--;
",2,0,0,0,0,0,0,0,0,3,4,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2676,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2677,"            quadrant = k & 3;
",4,1,0,0,0,0,0,0,0,6,17,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2678,"            xa = remA;
",4,0,0,0,0,0,0,0,0,5,10,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2679,"            xb = remB;
",4,0,0,0,0,0,0,0,0,5,10,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2685,"        switch (quadrant) {
",2,0,0,1,3,0,0,0,0,2,19,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2687,"                return cosQ(xa, xb);
",0,0,0,1,2,1,6,0,0,6,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2689,"                return -sinQ(xa, xb);
",0,0,0,1,2,1,6,0,0,7,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2691,"                return -cosQ(xa, xb);
",0,0,0,1,2,1,6,0,0,7,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2693,"                return sinQ(xa, xb);
",0,0,0,1,2,1,6,0,0,6,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2695,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2705,"        boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2706,"        int quadrant = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2709,"        double xa = x;
",4,0,0,0,0,0,0,0,0,4,14,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2710,"        if (x < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2711,"            negative = true;
",2,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2712,"            xa = -xa;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2716,"        if (xa == 0.0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2717,"            long bits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2718,"            if (bits < 0) {
",2,1,0,1,3,0,0,0,0,3,15,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2719,"                return -0.0;
",0,0,0,0,0,1,0,0,0,1,12,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2721,"            return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2724,"        if (xa != xa || xa == Double.POSITIVE_INFINITY) {
",10,3,0,1,3,0,0,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2725,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2729,"        double xb = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2730,"        if (xa > 3294198.0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2734,"            double reduceResults[] = new double[3];
",2,0,0,2,4,0,0,0,0,2,39,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2735,"            reducePayneHanek(xa, reduceResults);
",0,0,0,1,2,0,6,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2736,"            quadrant = ((int) reduceResults[0]) & 3;
",2,1,1,3,6,0,0,0,0,6,40,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2737,"            xa = reduceResults[1];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2738,"            xb = reduceResults[2];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2739,"        } else if (xa > 1.5707963267948966) {
",2,1,0,1,4,0,0,0,0,3,37,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2744,"            int k = (int)(xa * 0.6366197723675814);
",4,1,0,2,4,0,0,0,0,5,39,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2750,"                double a = -k * 1.570796251296997;
",4,1,0,0,0,0,0,0,0,6,34,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2751,"                remA = xa + a;
",6,1,0,0,0,0,0,0,0,8,14,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2752,"                remB = -(remA - xa - a);
",8,1,0,1,2,0,0,0,0,11,24,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2754,"                a = -k * 7.549789948768648E-8;
",4,1,0,0,0,0,0,0,0,7,30,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2755,"                double b = remA;
",4,0,0,0,0,0,0,0,0,4,16,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2756,"                remA = a + b;
",6,1,0,0,0,0,0,0,0,8,13,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2757,"                remB += -(remA - b - a);
",8,1,0,1,2,0,0,0,0,11,24,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2759,"                a = -k * 6.123233995736766E-17;
",4,1,0,0,0,0,0,0,0,7,31,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2760,"                b = remA;
",4,0,0,0,0,0,0,0,0,5,9,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2761,"                remA = a + b;
",6,1,0,0,0,0,0,0,0,8,13,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2762,"                remB += -(remA - b - a);
",8,1,0,1,2,0,0,0,0,11,24,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2764,"                if (remA > 0.0) {
",2,1,0,1,3,0,0,0,0,3,17,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2765,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2771,"                k--;
",2,0,0,0,0,0,0,0,0,3,4,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2772,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2773,"            quadrant = k & 3;
",4,1,0,0,0,0,0,0,0,6,17,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2774,"            xa = remA;
",4,0,0,0,0,0,0,0,0,5,10,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2775,"            xb = remB;
",4,0,0,0,0,0,0,0,0,5,10,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2778,"        if (xa > 1.5) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2780,"            final double pi2a = 1.5707963267948966;
",2,0,0,0,0,1,0,0,0,3,39,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2781,"            final double pi2b = 6.123233995736766E-17;
",2,0,0,0,0,1,0,0,0,3,42,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2783,"            final double a = pi2a - xa;
",6,1,0,0,0,1,0,0,0,8,27,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2784,"            double b = -(a - pi2a + xa);
",8,2,0,1,2,0,0,0,0,11,28,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2785,"            b += pi2b - xb;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2787,"            xa = a + b;
",6,1,0,0,0,0,0,0,0,8,11,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2788,"            xb = -(xa - a - b);
",8,1,0,1,2,0,0,0,0,11,19,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2789,"            quadrant ^= 1;
",2,0,0,0,0,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2790,"            negative ^= true;
",2,0,0,0,0,0,0,0,0,4,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2794,"        if ((quadrant & 1) == 0) {
",2,2,0,2,5,0,0,0,0,4,26,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2795,"            result = tanQ(xa, xb, false);
",2,0,0,1,2,0,6,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2797,"            result = -tanQ(xa, xb, true);
",2,0,0,1,2,0,6,0,0,11,29,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2800,"        if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2801,"            result = -result;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2804,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2813,"        return atan(x, 0.0, false);
",0,0,0,1,2,1,4,0,0,5,27,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2823,"        boolean negate = false;
",2,0,0,0,0,0,0,0,0,3,23,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2826,"        if (xa == 0.0) { // Matches +/- 0.0; return correct sign
",2,1,0,1,3,1,0,0,0,3,56,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2827,"            return leftPlane ? copySign(Math.PI, xa) : xa;
",8,0,0,1,2,1,4,0,0,12,46,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2830,"        if (xa < 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2832,"            xa = -xa;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2833,"            xb = -xb;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2834,"            negate = true;
",2,0,0,0,0,0,0,0,0,4,14,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2837,"        if (xa > 1.633123935319537E16) { // Very large input
",2,1,0,1,3,0,0,0,0,3,52,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2838,"            return (negate ^ leftPlane) ? (-Math.PI/2.0) : (Math.PI/2.0);
",12,3,0,3,6,1,0,0,0,16,61,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2842,"        if (xa < 1.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2843,"            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);
",8,4,0,4,8,0,0,0,0,14,65,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2845,"            double temp = 1.0/xa;
",4,1,0,0,0,0,0,0,0,5,21,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2846,"            idx = (int) (-((-1.7168146928204136 * temp * temp + 8.0) * temp) + 13.07);
",8,4,0,4,8,0,0,0,0,15,74,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2848,"        double epsA = xa - TANGENT_TABLE_A[idx];
",4,1,1,1,2,0,0,0,0,9,40,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2849,"        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);
",6,2,1,2,4,0,0,0,0,13,50,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2850,"        epsB += xb - TANGENT_TABLE_B[idx];
",4,1,1,1,2,0,0,0,0,10,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2852,"        double temp = epsA + epsB;
",6,1,0,0,0,0,0,0,0,7,26,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2853,"        epsB = -(temp - epsA - epsB);
",8,1,0,1,2,0,0,0,0,11,29,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2854,"        epsA = temp;
",4,0,0,0,0,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2857,"        temp = xa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2858,"        double ya = xa + temp - temp;
",8,2,0,0,0,0,0,0,0,10,29,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2859,"        double yb = xb + xa - ya;
",8,2,0,0,0,0,0,0,0,10,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2860,"        xa = ya;
",4,0,0,0,0,0,0,0,0,5,8,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2861,"        xb += yb;
",4,0,0,0,0,0,0,0,0,5,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2864,"        if (idx == 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2867,"            double denom = 1.0 / (1.0 + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));
",6,5,1,5,10,0,0,0,0,19,87,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2869,"            ya = epsA * denom;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2870,"            yb = epsB * denom;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2871,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2872,"            double temp2 = xa * TANGENT_TABLE_A[idx];
",4,1,1,1,2,0,0,0,0,9,41,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2873,"            double za = 1.0 + temp2;
",4,1,0,0,0,0,0,0,0,5,24,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2874,"            double zb = -(za - 1.0 - temp2);
",6,1,0,1,2,0,0,0,0,8,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2875,"            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];
",6,3,1,2,4,0,0,0,0,18,62,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2876,"            temp = za + temp2;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2877,"            zb += -(temp - za - temp2);
",8,1,0,1,2,0,0,0,0,11,27,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2878,"            za = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2880,"            zb += xb * TANGENT_TABLE_B[idx];
",4,1,1,1,2,0,0,0,0,10,32,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2881,"            ya = epsA / za;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2883,"            temp = ya * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2884,"            final double yaa = (ya + temp) - temp;
",8,2,0,1,2,1,0,0,0,11,38,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2885,"            final double yab = ya - yaa;
",6,1,0,0,0,1,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2887,"            temp = za * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2888,"            final double zaa = (za + temp) - temp;
",8,2,0,1,2,1,0,0,0,11,38,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2889,"            final double zab = za - zaa;
",6,1,0,0,0,1,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2892,"            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;
",22,9,0,1,2,0,0,0,0,32,65,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2894,"            yb += -epsA * zb / za / za;
",10,3,0,0,0,0,0,0,0,15,27,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2895,"            yb += epsB / za;
",6,1,0,0,0,0,0,0,0,8,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2899,"        epsA = ya;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2900,"        epsB = yb;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2903,"        double epsA2 = epsA*epsA;
",6,1,0,0,0,0,0,0,0,7,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2914,"        yb = 0.07490822288864472;
",2,0,0,0,0,0,0,0,0,3,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2915,"        yb = yb * epsA2 + -0.09088450866185192;
",6,2,0,0,0,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2916,"        yb = yb * epsA2 + 0.11111095942313305;
",6,2,0,0,0,0,0,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2917,"        yb = yb * epsA2 + -0.1428571423679182;
",6,2,0,0,0,0,0,0,0,10,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2918,"        yb = yb * epsA2 + 0.19999999999923582;
",6,2,0,0,0,0,0,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2919,"        yb = yb * epsA2 + -0.33333333333333287;
",6,2,0,0,0,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2920,"        yb = yb * epsA2 * epsA;
",8,1,0,0,0,0,0,0,0,10,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2923,"        ya = epsA;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2925,"        temp = ya + yb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2926,"        yb = -(temp - ya - yb);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2927,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2930,"        yb += epsB / (1.0 + epsA * epsA);
",8,3,0,1,2,0,0,0,0,12,33,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2936,"        double za = EIGHTHS[idx] + ya;
",4,1,1,1,2,0,0,0,0,9,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2937,"        double zb = -(za - EIGHTHS[idx] - ya);
",6,1,1,2,4,0,0,0,0,12,38,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2938,"        temp = za + yb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2939,"        zb += -(temp - za - yb);
",8,1,0,1,2,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2940,"        za = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2942,"        result = za + zb;
",6,1,0,0,0,0,0,0,0,8,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2943,"        resultb = -(result - za - zb);
",8,1,0,1,2,0,0,0,0,11,30,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2945,"        if (leftPlane) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2947,"            final double pia = 1.5707963267948966*2.0;
",2,1,0,0,0,1,0,0,0,4,42,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2948,"            final double pib = 6.123233995736766E-17*2.0;
",2,1,0,0,0,1,0,0,0,4,45,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2950,"            za = pia - result;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2951,"            zb = -(za - pia + result);
",8,2,0,1,2,0,0,0,0,12,26,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2952,"            zb += pib - resultb;
",6,1,0,0,0,0,0,0,0,8,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2954,"            result = za + zb;
",6,1,0,0,0,0,0,0,0,8,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2955,"            resultb = -(result - za - zb);
",8,1,0,1,2,0,0,0,0,11,30,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2959,"        if (negate ^ leftPlane) {
",4,1,0,1,3,0,0,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2960,"            result = -result;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2963,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2973,"        if (x !=x || y != y) {
",8,3,0,1,3,0,0,0,0,11,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2974,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2977,"        if (y == 0.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2978,"            double result = x*y;
",6,1,0,0,0,0,0,0,0,7,20,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2979,"            double invx = 1.0/x;
",4,1,0,0,0,0,0,0,0,5,20,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2980,"            double invy = 1.0/y;
",4,1,0,0,0,0,0,0,0,5,20,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2982,"            if (invx == 0.0) { // X is infinite
",2,1,0,1,3,0,0,0,0,3,35,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2983,"                if (x > 0) {
",2,1,0,1,3,0,0,0,0,3,12,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2984,"                    return y; // return +/- 0.0
",2,0,0,0,0,2,0,0,0,2,27,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2986,"                    return copySign(Math.PI, y);
",4,0,0,1,2,1,4,0,0,8,28,11,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2990,"            if (x < 0.0 || invx < 0.0) {
",4,3,0,1,3,0,0,0,0,7,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2991,"                if (y < 0.0 || invy < 0.0) {
",4,3,0,1,3,0,0,0,0,7,28,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2992,"                    return -Math.PI;
",4,0,0,0,0,1,0,0,0,5,16,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2994,"                    return Math.PI;
",4,0,0,0,0,1,0,0,0,4,15,11,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,2997,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3003,"        if (y == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3004,"            if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3005,"                return Math.PI/4.0;
",4,1,0,0,0,1,0,0,0,5,19,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3008,"            if (x == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3009,"                return Math.PI*3.0/4.0;
",4,2,0,0,0,1,0,0,0,6,23,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3012,"            return Math.PI/2.0;
",4,1,0,0,0,1,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3015,"        if (y == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3016,"            if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3017,"                return -Math.PI/4.0;
",4,1,0,0,0,1,0,0,0,6,20,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3020,"            if (x == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3021,"                return -Math.PI*3.0/4.0;
",4,2,0,0,0,1,0,0,0,7,24,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3024,"            return -Math.PI/2.0;
",4,1,0,0,0,1,0,0,0,6,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3027,"        if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3028,"            if (y > 0.0 || 1/y > 0.0) {
",4,4,0,1,3,0,0,0,0,8,27,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3029,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3032,"            if (y < 0.0 || 1/y < 0.0) {
",4,4,0,1,3,0,0,0,0,8,27,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3033,"                return -0.0;
",0,0,0,0,0,1,0,0,0,1,12,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3037,"        if (x == Double.NEGATIVE_INFINITY)
",6,1,0,1,2,0,0,0,0,7,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3039,"            if (y > 0.0 || 1/y > 0.0) {
",4,4,0,1,3,0,0,0,0,8,27,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3040,"                return Math.PI;
",4,0,0,0,0,1,0,0,0,4,15,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3043,"            if (y < 0.0 || 1/y < 0.0) {
",4,4,0,1,3,0,0,0,0,8,27,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3044,"                return -Math.PI;
",4,0,0,0,0,1,0,0,0,5,16,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3050,"        if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3051,"            if (y > 0.0 || 1/y > 0.0) {
",4,4,0,1,3,0,0,0,0,8,27,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3052,"                return Math.PI/2.0;
",4,1,0,0,0,1,0,0,0,5,19,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3055,"            if (y < 0.0 || 1/y < 0.0) {
",4,4,0,1,3,0,0,0,0,8,27,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3056,"                return -Math.PI/2.0;
",4,1,0,0,0,1,0,0,0,6,20,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3061,"        final double r = y/x;
",6,1,0,0,0,1,0,0,0,8,21,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3062,"        if (Double.isInfinite(r)) { // bypass calculations that can create NaN
",0,0,0,2,5,0,6,0,0,6,70,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3063,"            return atan(r, 0, x < 0);
",2,1,0,1,2,1,4,0,0,7,25,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3066,"        double ra = doubleHighPart(r);
",2,0,0,1,2,0,4,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3067,"        double rb = r - ra;
",6,1,0,0,0,0,0,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3070,"        final double xa = doubleHighPart(x);
",2,0,0,1,2,1,4,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3071,"        final double xb = x - xa;
",6,1,0,0,0,1,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3073,"        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
",22,9,0,1,2,0,0,0,0,32,54,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3075,"        double temp = ra + rb;
",6,1,0,0,0,0,0,0,0,7,22,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3076,"        rb = -(temp - ra - rb);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3077,"        ra = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3079,"        if (ra == 0) { // Fix up the sign so atan works correctly
",2,1,0,1,3,0,0,0,0,3,57,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3080,"            ra = copySign(0.0, y);
",2,0,0,1,2,0,4,0,0,7,22,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3084,"        double result = atan(ra, rb, x < 0);
",4,1,0,1,2,0,6,0,0,11,36,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3086,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3094,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3095,"          return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3098,"      if (x > 1.0 || x < -1.0) {
",4,3,0,1,3,0,0,0,0,8,26,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3099,"          return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3102,"      if (x == 1.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3103,"          return Math.PI/2.0;
",4,1,0,0,0,1,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3106,"      if (x == -1.0) {
",2,1,0,1,3,0,0,0,0,4,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3107,"          return -Math.PI/2.0;
",4,1,0,0,0,1,0,0,0,6,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3110,"      if (x == 0.0) { // Matches +/- 0.0; return correct sign
",2,1,0,1,3,1,0,0,0,3,55,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3111,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3117,"      double temp = x * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,31,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3118,"      final double xa = x + temp - temp;
",8,2,0,0,0,1,0,0,0,11,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3119,"      final double xb = x - xa;
",6,1,0,0,0,1,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3122,"      double ya = xa*xa;
",6,1,0,0,0,0,0,0,0,7,18,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3123,"      double yb = xa*xb*2.0 + xb*xb;
",10,3,0,0,0,0,0,0,0,13,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3126,"      ya = -ya;
",4,0,0,0,0,0,0,0,0,6,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3127,"      yb = -yb;
",4,0,0,0,0,0,0,0,0,6,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3129,"      double za = 1.0 + ya;
",4,1,0,0,0,0,0,0,0,5,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3130,"      double zb = -(za - 1.0 - ya);
",6,1,0,1,2,0,0,0,0,8,29,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3132,"      temp = za + yb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3133,"      zb += -(temp - za - yb);
",8,1,0,1,2,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3134,"      za = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3138,"      y = sqrt(za);
",2,0,0,1,2,0,4,0,0,7,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3139,"      temp = y * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3140,"      ya = y + temp - temp;
",8,2,0,0,0,0,0,0,0,11,21,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3141,"      yb = y - ya;
",6,1,0,0,0,0,0,0,0,8,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3144,"      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);
",18,8,0,2,4,0,0,0,0,27,47,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3147,"      double dx = zb / (2.0*y);
",6,2,0,1,2,0,0,0,0,8,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3150,"      double r = x/y;
",6,1,0,0,0,0,0,0,0,7,15,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3151,"      temp = r * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3152,"      double ra = r + temp - temp;
",8,2,0,0,0,0,0,0,0,10,28,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3153,"      double rb = r - ra;
",6,1,0,0,0,0,0,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3155,"      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division
",22,9,0,1,2,0,0,0,0,32,83,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3156,"      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
",10,3,0,0,0,0,0,0,0,15,65,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3158,"      temp = ra + rb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3159,"      rb = -(temp - ra - rb);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3160,"      ra = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3162,"      return atan(ra, rb, false);
",0,0,0,1,2,1,6,0,0,7,27,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3170,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3171,"          return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3174,"      if (x > 1.0 || x < -1.0) {
",4,3,0,1,3,0,0,0,0,8,26,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3175,"          return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3178,"      if (x == -1.0) {
",2,1,0,1,3,0,0,0,0,4,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3179,"          return Math.PI;
",4,0,0,0,0,1,0,0,0,4,15,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3182,"      if (x == 1.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3183,"          return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3186,"      if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3187,"          return Math.PI/2.0;
",4,1,0,0,0,1,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3193,"      double temp = x * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,31,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3194,"      final double xa = x + temp - temp;
",8,2,0,0,0,1,0,0,0,11,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3195,"      final double xb = x - xa;
",6,1,0,0,0,1,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3198,"      double ya = xa*xa;
",6,1,0,0,0,0,0,0,0,7,18,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3199,"      double yb = xa*xb*2.0 + xb*xb;
",10,3,0,0,0,0,0,0,0,13,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3202,"      ya = -ya;
",4,0,0,0,0,0,0,0,0,6,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3203,"      yb = -yb;
",4,0,0,0,0,0,0,0,0,6,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3205,"      double za = 1.0 + ya;
",4,1,0,0,0,0,0,0,0,5,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3206,"      double zb = -(za - 1.0 - ya);
",6,1,0,1,2,0,0,0,0,8,29,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3208,"      temp = za + yb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3209,"      zb += -(temp - za - yb);
",8,1,0,1,2,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3210,"      za = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3213,"      double y = sqrt(za);
",2,0,0,1,2,0,4,0,0,6,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3214,"      temp = y * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3215,"      ya = y + temp - temp;
",8,2,0,0,0,0,0,0,0,11,21,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3216,"      yb = y - ya;
",6,1,0,0,0,0,0,0,0,8,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3219,"      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);
",18,8,0,2,4,0,0,0,0,27,47,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3222,"      yb += zb / (2.0*y);
",6,2,0,1,2,0,0,0,0,9,19,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3223,"      y = ya+yb;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3224,"      yb = -(y - ya - yb);
",8,1,0,1,2,0,0,0,0,11,20,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3227,"      double r = y/x;
",6,1,0,0,0,0,0,0,0,7,15,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3230,"      if (Double.isInfinite(r)) { // x is effectively zero
",0,0,0,2,5,0,6,0,0,6,52,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3231,"          return Math.PI/2; // so return the appropriate value
",4,1,0,0,0,2,0,0,0,5,52,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3234,"      double ra = doubleHighPart(r);
",2,0,0,1,2,0,4,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3235,"      double rb = r - ra;
",6,1,0,0,0,0,0,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3237,"      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division
",22,9,0,1,2,0,0,0,0,32,83,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3238,"      rb += yb / x;  // Add in effect additional bits of sqrt.
",6,1,0,0,0,0,0,0,0,8,56,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3240,"      temp = ra + rb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3241,"      rb = -(temp - ra - rb);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3242,"      ra = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3244,"      return atan(ra, rb, x<0);
",2,1,0,1,2,1,6,0,0,9,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3253,"      long inbits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,41,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3254,"      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;
",4,3,0,3,6,0,0,0,0,7,53,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3255,"      boolean subnormal = false;
",2,0,0,0,0,0,0,0,0,3,26,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3257,"      if (exponent == -1023) {
",2,1,0,1,3,0,0,0,0,4,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3258,"          if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3259,"              return x;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3263,"          subnormal = true;
",2,0,0,0,0,0,0,0,0,4,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3264,"          x *= 1.8014398509481984E16;  // 2^54
",2,0,0,0,0,0,0,0,0,3,36,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3265,"          inbits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,9,36,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3266,"          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;
",4,3,0,3,6,0,0,0,0,8,49,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3269,"      if (exponent == 1024) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3271,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3275,"      int exp3 = exponent / 3;
",4,1,0,0,0,0,0,0,0,5,24,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3278,"      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |
",4,2,0,1,3,0,4,0,0,10,68,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3282,"      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);
",4,2,0,2,4,1,4,0,0,11,98,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3285,"      double est = -0.010714690733195933;
",2,0,0,0,0,0,0,0,0,3,35,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3286,"      est = est * mant + 0.0875862700108075;
",6,2,0,0,0,0,0,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3287,"      est = est * mant + -0.3058015757857271;
",6,2,0,0,0,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3288,"      est = est * mant + 0.7249995199969751;
",6,2,0,0,0,0,0,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3289,"      est = est * mant + 0.5039018405998233;
",6,2,0,0,0,0,0,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3291,"      est *= CBRTTWO[exponent % 3 + 2];
",4,2,1,1,2,0,0,0,0,9,33,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3296,"      final double xs = x / (p2*p2*p2);
",10,2,0,1,2,1,0,0,0,13,33,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3297,"      est += (xs - est*est*est) / (3*est*est);
",14,4,0,2,4,0,0,0,0,19,40,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3298,"      est += (xs - est*est*est) / (3*est*est);
",14,4,0,2,4,0,0,0,0,19,40,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3301,"      double temp = est * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,33,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3302,"      double ya = est + temp - temp;
",8,2,0,0,0,0,0,0,0,10,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3303,"      double yb = est - ya;
",6,1,0,0,0,0,0,0,0,7,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3305,"      double za = ya * ya;
",6,1,0,0,0,0,0,0,0,7,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3306,"      double zb = ya * yb * 2.0 + yb * yb;
",10,3,0,0,0,0,0,0,0,13,36,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3307,"      temp = za * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3308,"      double temp2 = za + temp - temp;
",8,2,0,0,0,0,0,0,0,10,32,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3309,"      zb += za - temp2;
",6,1,0,0,0,0,0,0,0,8,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3310,"      za = temp2;
",4,0,0,0,0,0,0,0,0,5,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3312,"      zb = za * yb + ya * zb + zb * yb;
",14,5,0,0,0,0,0,0,0,20,33,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3313,"      za = za * ya;
",6,1,0,0,0,0,0,0,0,8,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3315,"      double na = xs - za;
",6,1,0,0,0,0,0,0,0,7,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3316,"      double nb = -(na - xs + za);
",8,2,0,1,2,0,0,0,0,11,28,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3317,"      nb -= zb;
",4,0,0,0,0,0,0,0,0,5,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3319,"      est += (na+nb)/(3*est*est);
",10,3,0,2,4,0,0,0,0,14,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3322,"      est *= p2;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3324,"      if (subnormal) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3325,"          est *= 3.814697265625E-6;  // 2^-18
",2,0,0,0,0,0,0,0,0,3,35,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3328,"      return est;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3338,"        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign
",2,2,0,2,5,1,6,0,0,10,79,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3339,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3343,"        final double facta = 0.01745329052209854;
",2,0,0,0,0,1,0,0,0,3,41,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3344,"        final double factb = 1.997844754509471E-9;
",2,0,0,0,0,1,0,0,0,3,42,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3346,"        double xa = doubleHighPart(x);
",2,0,0,1,2,0,4,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3347,"        double xb = x - xa;
",6,1,0,0,0,0,0,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3349,"        double result = xb * factb + xb * facta + xa * factb + xa * facta;
",18,7,0,0,0,0,0,0,0,25,66,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3350,"        if (result == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3351,"            result = result * x; // ensure correct sign if calculation underflows
",6,1,0,0,0,0,0,0,0,8,69,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3353,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3363,"        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign
",2,2,0,2,5,1,6,0,0,10,79,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3364,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3368,"        final double facta = 57.2957763671875;
",2,0,0,0,0,1,0,0,0,3,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3369,"        final double factb = 3.145894820876798E-6;
",2,0,0,0,0,1,0,0,0,3,42,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3371,"        double xa = doubleHighPart(x);
",2,0,0,1,2,0,4,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3372,"        double xb = x - xa;
",6,1,0,0,0,0,0,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3374,"        return xb * factb + xb * facta + xa * factb + xa * facta;
",16,7,0,0,0,1,0,0,0,23,57,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3383,"        return (x < 0) ? -x : x;
",6,1,0,1,2,1,0,0,0,8,24,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3392,"        return (x < 0l) ? -x : x;
",6,1,0,1,2,1,0,0,0,8,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3401,"        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0
",8,2,0,2,4,1,0,0,0,11,64,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3410,"        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0
",8,2,0,2,4,1,0,0,0,11,61,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3419,"        if (Double.isInfinite(x)) {
",0,0,0,2,5,0,6,0,0,6,27,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3420,"            return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3422,"        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));
",2,2,0,3,6,1,12,0,0,16,72,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3431,"        if (Float.isInfinite(x)) {
",0,0,0,2,5,0,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3432,"            return Float.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,31,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3434,"        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));
",2,2,0,3,6,1,12,0,0,16,66,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3446,"        if ((n > -1023) && (n < 1024)) {
",4,3,0,3,7,0,0,0,0,8,32,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3447,"            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);
",4,3,0,4,8,1,4,0,0,11,62,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3451,"        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {
",2,2,0,4,9,0,12,0,0,16,58,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3452,"            return d;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3454,"        if (n < -2098) {
",2,1,0,1,3,0,0,0,0,4,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3455,"            return (d > 0) ? 0.0 : -0.0;
",2,1,0,1,2,1,0,0,0,4,28,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3457,"        if (n > 2097) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3458,"            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,69,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3462,"        final long bits = Double.doubleToLongBits(d);
",2,0,0,1,2,1,6,0,0,9,45,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3463,"        final long sign = bits & 0x8000000000000000L;
",4,1,0,0,0,1,0,0,0,6,45,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3464,"        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;
",4,2,0,3,6,0,0,0,0,6,48,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3465,"        long mantissa   = bits & 0x000fffffffffffffL;
",4,1,0,0,0,0,0,0,0,5,45,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3468,"        int scaledExponent = exponent + n;
",6,1,0,0,0,0,0,0,0,7,34,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3470,"        if (n < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3472,"            if (scaledExponent > 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3474,"                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
",6,2,0,4,8,1,4,0,0,12,82,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3475,"            } else if (scaledExponent > -53) {
",2,1,0,1,4,0,0,0,0,4,34,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3479,"                mantissa = mantissa | (1L << 52);
",4,2,0,1,2,0,0,0,0,7,33,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3482,"                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));
",6,2,0,2,4,1,0,0,0,10,73,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3483,"                mantissa = mantissa >>> (1 - scaledExponent);
",6,2,0,1,2,0,0,0,0,9,45,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3484,"                if (mostSignificantLostBit != 0) {
",2,1,0,1,3,0,0,0,0,3,34,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3486,"                    mantissa++;
",2,0,0,0,0,0,0,0,0,3,11,11,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3488,"                return Double.longBitsToDouble(sign | mantissa);
",4,1,0,1,2,1,4,0,0,9,48,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3492,"                return (sign == 0L) ? 0.0 : -0.0;
",2,1,0,1,2,1,0,0,0,4,33,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3496,"            if (exponent == 0) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3499,"                while ((mantissa >>> 52) != 1) {
",2,2,0,2,5,0,0,0,0,4,32,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3500,"                    mantissa = mantissa << 1;
",4,1,0,0,0,0,0,0,0,6,25,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3501,"                    --scaledExponent;
",2,0,0,0,0,0,0,0,0,3,17,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3503,"                ++scaledExponent;
",2,0,0,0,0,0,0,0,0,3,17,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3504,"                mantissa = mantissa & 0x000fffffffffffffL;
",4,1,0,0,0,0,0,0,0,6,42,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3506,"                if (scaledExponent < 2047) {
",2,1,0,1,3,0,0,0,0,3,28,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3507,"                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
",6,2,0,4,8,1,4,0,0,12,82,11,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3509,"                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,74,11,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3512,"            } else if (scaledExponent < 2047) {
",2,1,0,1,4,0,0,0,0,3,35,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3513,"                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
",6,2,0,4,8,1,4,0,0,12,82,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3515,"                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,74,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3530,"        if ((n > -127) && (n < 128)) {
",4,3,0,3,7,0,0,0,0,8,30,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3531,"            return f * Float.intBitsToFloat((n + 127) << 23);
",4,3,0,2,4,1,4,0,0,11,49,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3535,"        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {
",2,2,0,4,9,0,12,0,0,16,57,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3536,"            return f;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3538,"        if (n < -277) {
",2,1,0,1,3,0,0,0,0,4,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3539,"            return (f > 0) ? 0.0f : -0.0f;
",2,1,0,1,2,1,0,0,0,4,30,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3541,"        if (n > 276) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3542,"            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,67,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3546,"        final int bits = Float.floatToIntBits(f);
",2,0,0,1,2,1,6,0,0,9,41,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3547,"        final int sign = bits & 0x80000000;
",4,1,0,0,0,1,0,0,0,6,35,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3548,"        int  exponent  = (bits >>> 23) & 0xff;
",4,2,0,1,2,0,0,0,0,6,38,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3549,"        int mantissa   = bits & 0x007fffff;
",4,1,0,0,0,0,0,0,0,5,35,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3552,"        int scaledExponent = exponent + n;
",6,1,0,0,0,0,0,0,0,7,34,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3554,"        if (n < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3556,"            if (scaledExponent > 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3558,"                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
",6,2,0,2,4,1,4,0,0,12,70,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3559,"            } else if (scaledExponent > -24) {
",2,1,0,1,4,0,0,0,0,4,34,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3563,"                mantissa = mantissa | (1 << 23);
",4,2,0,1,2,0,0,0,0,7,32,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3566,"                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));
",6,2,0,2,4,1,0,0,0,10,71,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3567,"                mantissa = mantissa >>> (1 - scaledExponent);
",6,2,0,1,2,0,0,0,0,9,45,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3568,"                if (mostSignificantLostBit != 0) {
",2,1,0,1,3,0,0,0,0,3,34,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3570,"                    mantissa++;
",2,0,0,0,0,0,0,0,0,3,11,11,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3572,"                return Float.intBitsToFloat(sign | mantissa);
",4,1,0,1,2,1,4,0,0,9,45,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3576,"                return (sign == 0) ? 0.0f : -0.0f;
",2,1,0,1,2,1,0,0,0,4,34,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3580,"            if (exponent == 0) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3583,"                while ((mantissa >>> 23) != 1) {
",2,2,0,2,5,0,0,0,0,4,32,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3584,"                    mantissa = mantissa << 1;
",4,1,0,0,0,0,0,0,0,6,25,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3585,"                    --scaledExponent;
",2,0,0,0,0,0,0,0,0,3,17,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3587,"                ++scaledExponent;
",2,0,0,0,0,0,0,0,0,3,17,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3588,"                mantissa = mantissa & 0x007fffff;
",4,1,0,0,0,0,0,0,0,6,33,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3590,"                if (scaledExponent < 255) {
",2,1,0,1,3,0,0,0,0,3,27,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3591,"                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
",6,2,0,2,4,1,4,0,0,12,70,11,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3593,"                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,71,11,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3596,"            } else if (scaledExponent < 255) {
",2,1,0,1,4,0,0,0,0,3,34,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3597,"                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
",6,2,0,2,4,1,4,0,0,12,70,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3599,"                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,71,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3639,"        if (Double.isNaN(d) || Double.isNaN(direction)) {
",0,1,0,3,7,0,12,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3640,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3641,"        } else if (d == direction) {
",4,1,0,1,4,0,0,0,0,5,28,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3642,"            return direction;
",2,0,0,0,0,1,0,0,0,2,17,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3643,"        } else if (Double.isInfinite(d)) {
",0,0,0,2,6,0,6,0,0,6,34,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3644,"            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;
",10,1,0,1,2,1,0,0,0,12,54,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3645,"        } else if (d == 0) {
",2,1,0,1,4,0,0,0,0,3,20,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3646,"            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;
",10,1,0,1,2,1,0,0,0,12,62,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3651,"        final long bits = Double.doubleToLongBits(d);
",2,0,0,1,2,1,6,0,0,9,45,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3652,"        final long sign = bits & 0x8000000000000000L;
",4,1,0,0,0,1,0,0,0,6,45,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3653,"        if ((direction < d) ^ (sign == 0L)) {
",6,3,0,3,7,0,0,0,0,9,37,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3654,"            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));
",4,3,0,3,6,1,4,0,0,11,74,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3656,"            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));
",4,3,0,3,6,1,4,0,0,11,74,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3695,"        if (Double.isNaN(f) || Double.isNaN(direction)) {
",0,1,0,3,7,0,12,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3696,"            return Float.NaN;
",4,0,0,0,0,1,0,0,0,4,17,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3697,"        } else if (f == direction) {
",4,1,0,1,4,0,0,0,0,5,28,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3698,"            return (float) direction;
",2,0,0,1,2,1,0,0,0,2,25,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3699,"        } else if (Float.isInfinite(f)) {
",0,0,0,2,6,0,6,0,0,6,33,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3700,"            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;
",10,1,0,1,2,1,0,0,0,12,53,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3701,"        } else if (f == 0f) {
",2,1,0,1,4,0,0,0,0,3,21,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3702,"            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;
",10,1,0,1,2,1,0,0,0,12,60,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3707,"        final int bits = Float.floatToIntBits(f);
",2,0,0,1,2,1,6,0,0,9,41,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3708,"        final int sign = bits & 0x80000000;
",4,1,0,0,0,1,0,0,0,6,35,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3709,"        if ((direction < f) ^ (sign == 0)) {
",6,3,0,3,7,0,0,0,0,9,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3710,"            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));
",4,3,0,3,6,1,4,0,0,11,62,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3712,"            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));
",4,3,0,3,6,1,4,0,0,11,62,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3724,"        if (x != x) { // NaN
",4,1,0,1,3,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3725,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3728,"        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {
",8,3,0,1,3,0,0,0,0,12,46,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3729,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3732,"        y = (long) x;
",4,0,0,1,2,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3733,"        if (x < 0 && y != x) {
",6,3,0,1,3,0,0,0,0,9,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3734,"            y--;
",2,0,0,0,0,0,0,0,0,3,4,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3737,"        if (y == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3738,"            return x*y;
",4,1,0,0,0,1,0,0,0,5,11,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3741,"        return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3751,"        if (x != x) { // NaN
",4,1,0,1,3,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3752,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3755,"        y = floor(x);
",2,0,0,1,2,0,4,0,0,7,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3756,"        if (y == x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3757,"            return y;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3760,"        y += 1.0;
",2,0,0,0,0,0,0,0,0,3,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3762,"        if (y == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3763,"            return x*y;
",4,1,0,0,0,1,0,0,0,5,11,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3766,"        return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3774,"        double y = floor(x);
",2,0,0,1,2,0,4,0,0,6,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3775,"        double d = x - y;
",6,1,0,0,0,0,0,0,0,7,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3777,"        if (d > 0.5) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3778,"            if (y == -1.0) {
",2,1,0,1,3,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3779,"                return -0.0; // Preserve sign of operand
",0,0,0,0,0,1,0,0,0,1,40,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3781,"            return y+1.0;
",2,1,0,0,0,1,0,0,0,3,13,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3783,"        if (d < 0.5) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3784,"            return y;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3788,"        long z = (long) y;
",4,0,0,1,2,0,0,0,0,4,18,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3789,"        return (z & 1) == 0 ? y : y + 1.0;
",6,3,0,1,2,1,0,0,0,9,34,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3797,"        return (long) floor(x + 0.5);
",2,1,0,2,4,1,2,0,0,5,29,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3805,"        return (int) floor(x + 0.5f);
",2,1,0,2,4,1,2,0,0,5,29,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3814,"        return (a <= b) ? a : b;
",8,1,0,1,2,1,0,0,0,9,24,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3823,"        return (a <= b) ? a : b;
",8,1,0,1,2,1,0,0,0,9,24,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3832,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3833,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3835,"        if (a < b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3836,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3839,"        if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3840,"            return Float.NaN;
",4,0,0,0,0,1,0,0,0,4,17,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3844,"        int bits = Float.floatToRawIntBits(a);
",2,0,0,1,2,0,6,0,0,8,38,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3845,"        if (bits == 0x80000000) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3846,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3848,"        return b;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3857,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3858,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3860,"        if (a < b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3861,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3864,"        if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3865,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3869,"        long bits = Double.doubleToRawLongBits(a);
",2,0,0,1,2,0,6,0,0,8,42,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3870,"        if (bits == 0x8000000000000000L) {
",2,1,0,1,3,0,0,0,0,3,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3871,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3873,"        return b;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3882,"        return (a <= b) ? b : a;
",8,1,0,1,2,1,0,0,0,9,24,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3891,"        return (a <= b) ? b : a;
",8,1,0,1,2,1,0,0,0,9,24,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3900,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3901,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3903,"        if (a < b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3904,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3907,"        if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3908,"            return Float.NaN;
",4,0,0,0,0,1,0,0,0,4,17,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3912,"        int bits = Float.floatToRawIntBits(a);
",2,0,0,1,2,0,6,0,0,8,38,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3913,"        if (bits == 0x80000000) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3914,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3916,"        return a;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3925,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3926,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3928,"        if (a < b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3929,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3932,"        if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3933,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3937,"        long bits = Double.doubleToRawLongBits(a);
",2,0,0,1,2,0,6,0,0,8,42,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3938,"        if (bits == 0x8000000000000000L) {
",2,1,0,1,3,0,0,0,0,3,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3939,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3941,"        return a;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3959,"        if (Double.isInfinite(x) || Double.isInfinite(y)) {
",0,1,0,3,7,0,12,0,0,13,51,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3960,"            return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3961,"        } else if (Double.isNaN(x) || Double.isNaN(y)) {
",0,1,0,3,8,0,12,0,0,13,48,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3962,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3965,"            final int expX = getExponent(x);
",2,0,0,1,2,1,4,0,0,7,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3966,"            final int expY = getExponent(y);
",2,0,0,1,2,1,4,0,0,7,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3967,"            if (expX > expY + 27) {
",4,2,0,1,3,0,0,0,0,6,23,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3969,"                return abs(x);
",0,0,0,1,2,1,4,0,0,4,14,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3970,"            } else if (expY > expX + 27) {
",4,2,0,1,4,0,0,0,0,6,30,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3972,"                return abs(y);
",0,0,0,1,2,1,4,0,0,4,14,11,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3976,"                final int middleExp = (expX + expY) / 2;
",6,2,0,1,2,1,0,0,0,9,40,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3979,"                final double scaledX = scalb(x, -middleExp);
",4,0,0,1,2,1,4,0,0,10,44,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3980,"                final double scaledY = scalb(y, -middleExp);
",4,0,0,1,2,1,4,0,0,10,44,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3983,"                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);
",10,3,0,1,2,1,2,0,0,16,67,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,3986,"                return scalb(scaledH, middleExp);
",0,0,0,1,2,1,6,0,0,6,33,11,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,4014,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation
",0,0,0,1,2,1,8,0,0,8,90,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,4026,"        long m = Double.doubleToLongBits(magnitude);
",2,0,0,1,2,0,6,0,0,8,44,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,4027,"        long s = Double.doubleToLongBits(sign);
",2,0,0,1,2,0,6,0,0,8,39,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,4028,"        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK
",8,7,0,3,7,0,0,0,0,15,69,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,4029,"            return magnitude;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,4031,"        return -magnitude; // flip sign
",2,0,0,0,0,1,0,0,0,3,31,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,4043,"        int m = Float.floatToIntBits(magnitude);
",2,0,0,1,2,0,6,0,0,8,40,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,4044,"        int s = Float.floatToIntBits(sign);
",2,0,0,1,2,0,6,0,0,8,35,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,4045,"        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK
",8,7,0,3,7,0,0,0,0,15,69,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,4046,"            return magnitude;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,4048,"        return -magnitude; // flip sign
",2,0,0,0,0,1,0,0,0,3,31,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,4061,"        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;
",0,3,0,4,8,1,6,0,0,9,66,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,52,4074,"        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;
",0,3,0,3,6,1,6,0,0,9,55,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NotPositiveException,52,37,"        super(value, 0, true);
",2,0,0,1,2,0,0,0,0,3,22,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NotPositiveException,52,38,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/NotPositiveException,52,47,"        super(specific, value, 0, true);
",4,0,0,1,2,0,0,0,0,5,32,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NotPositiveException,52,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,52,50,"        this(boundIsAllowed ?
",2,0,0,0,1,0,0,0,0,2,21,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,52,54,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,52,68,"        super(specific, wrong, min);
",6,0,0,1,2,0,0,0,0,6,28,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,52,70,"        this.min = min;
",4,0,0,0,0,0,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,52,71,"        this.boundIsAllowed = boundIsAllowed;
",4,0,0,0,0,0,0,0,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,52,72,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,52,78,"        return boundIsAllowed;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,52,85,"        return min;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,52,46,"        super(pattern, wrong, arguments);
",6,0,0,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,52,47,"        argument = wrong;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,52,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,52,54,"        return argument;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,52,44,"                                        Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,52,37,"    private final ExceptionContext context = new ExceptionContext();
",2,0,0,1,2,2,0,4,0,8,64,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,52,45,"        context.addMessage(pattern, args);
",0,0,0,1,2,0,8,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,52,46,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,52,50,"        return context;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,52,56,"        return context.getMessage();
",0,0,0,1,2,1,4,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,52,62,"        return context.getLocalizedMessage();
",0,0,0,1,2,1,4,0,0,4,37,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,52,40,"        this(LocalizedFormats.NOT_FINITE_NUMBER, wrong, args);
",8,0,0,1,2,0,0,0,0,8,54,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,52,41,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,52,53,"        super(specific, wrong, args);
",6,0,0,1,2,0,0,0,0,6,29,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,52,54,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,52,61,"        this(wrong, previous, index, MathUtils.OrderDirection.INCREASING, true);
",12,0,0,1,2,0,0,0,0,13,72,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,52,62,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,52,80,"        super(direction == MathUtils.OrderDirection.INCREASING ?
",8,1,0,0,1,0,0,0,0,9,56,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,52,89,"        this.direction = direction;
",4,0,0,0,0,0,0,0,0,5,27,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,52,90,"        this.strict = strict;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,52,91,"        this.index = index;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,52,92,"        this.previous = previous;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,52,93,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,52,99,"        return direction;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,52,105,"        return strict;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,52,113,"        return index;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,52,119,"        return previous;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,52,43,"    public MathArithmeticException() {
",2,0,0,1,3,1,0,0,0,3,34,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,52,38,"    private final ExceptionContext context = new ExceptionContext();
",2,0,0,1,2,2,0,4,0,8,64,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,52,44,"        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);
",4,0,0,1,2,0,4,0,0,8,58,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,52,45,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,52,55,"                                   Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,52,56,"        context.addMessage(pattern, args);
",0,0,0,1,2,0,8,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,52,57,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,52,61,"        return context;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,52,67,"        return context.getMessage();
",0,0,0,1,2,1,4,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,52,73,"        return context.getLocalizedMessage();
",0,0,0,1,2,1,4,0,0,4,37,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,52,50,"        this(boundIsAllowed ?
",2,0,0,0,1,0,0,0,0,2,21,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,52,54,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,52,67,"        super(specific, wrong, max);
",6,0,0,1,2,0,0,0,0,6,28,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,52,69,"        this.max = max;
",4,0,0,0,0,0,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,52,70,"        this.boundIsAllowed = boundIsAllowed;
",4,0,0,0,0,0,0,0,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,52,71,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,52,77,"        return boundIsAllowed;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,52,84,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,52,41,"        this(LocalizedFormats.NULL_NOT_ALLOWED);
",4,0,0,1,2,0,0,0,0,4,40,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,52,42,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,52,50,"        super(pattern, arguments);
",4,0,0,1,2,0,0,0,0,4,26,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,52,51,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,52,44,"        super(specific, wrong, expected);
",6,0,0,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,52,45,"        dimension = expected;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,52,46,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,52,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);
",8,0,0,1,2,0,0,0,0,8,67,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,52,57,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,52,63,"        return dimension;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2229,"            = new Comparator<Pair<Double, double[]>>() {
",0,0,0,2,5,0,0,6,0,6,44,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2233,"                switch (dir) {
",2,0,0,1,3,0,0,0,0,2,14,10,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2235,"                    val = o1.getKey().compareTo(o2.getKey());
",2,0,0,3,6,0,10,0,0,13,41,11,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2236,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2238,"                    val = o2.getKey().compareTo(o1.getKey());
",2,0,0,3,6,0,10,0,0,13,41,11,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2239,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2242,"                    throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,13,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2244,"                return val;
",2,0,0,0,0,1,0,0,0,2,11,10,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/CardanEulerSingularityException,52,42,"        super(isCardan ? LocalizedFormats.CARDAN_ANGLES_SINGULARITY : LocalizedFormats.EULER_ANGLES_SINGULARITY);
",10,0,0,1,2,0,0,0,0,10,105,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/CardanEulerSingularityException,52,43,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,138,"      double inv = 1.0 / FastMath.sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
",18,8,0,1,2,0,4,0,0,30,72,7,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,139,"      q0 *= inv;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,140,"      q1 *= inv;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,141,"      q2 *= inv;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,142,"      q3 *= inv;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,173,"  public Rotation(Vector3D axis, double angle) {
",6,0,0,1,3,1,0,2,0,9,46,2,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,175,"    double norm = axis.getNorm();
",2,0,0,1,2,0,4,0,0,6,29,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,176,"    if (norm == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,177,"      throw MathRuntimeException.createArithmeticException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_AXIS);
",4,0,0,1,2,0,4,0,0,8,99,7,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,180,"    double halfAngle = -0.5 * angle;
",4,1,0,0,0,0,0,0,0,6,32,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,181,"    double coeff = FastMath.sin(halfAngle) / norm;
",4,1,0,1,2,0,6,0,0,11,46,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,183,"    q0 = FastMath.cos (halfAngle);
",2,0,0,1,2,0,6,0,0,9,30,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,184,"    q1 = coeff * axis.getX();
",4,1,0,1,2,0,4,0,0,10,25,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,185,"    q2 = coeff * axis.getY();
",4,1,0,1,2,0,4,0,0,10,25,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,186,"    q3 = coeff * axis.getZ();
",4,1,0,1,2,0,4,0,0,10,25,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,188,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,221,"    throws NotARotationMatrixException {
",2,0,0,0,1,0,0,0,0,2,36,2,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,224,"    if ((m.length != 3) || (m[0].length != 3) ||
",6,3,1,3,7,0,0,0,0,11,44,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,226,"      throw new NotARotationMatrixException(
",0,0,0,0,1,0,0,2,0,2,38,8,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,232,"    double[][] ort = orthogonalizeMatrix(m, threshold);
",2,0,0,3,6,0,6,0,0,8,51,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,235,"    double det = ort[0][0] * (ort[1][1] * ort[2][2] - ort[2][1] * ort[1][2]) -
",2,5,1,11,22,0,0,0,0,17,74,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,238,"    if (det < 0.0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,239,"      throw new NotARotationMatrixException(
",0,0,0,0,1,0,0,2,0,2,38,8,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,255,"    double s = ort[0][0] + ort[1][1] + ort[2][2];
",2,1,1,6,12,0,0,0,0,9,45,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,256,"    if (s > -0.19) {
",2,1,0,1,3,0,0,0,0,4,16,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,258,"      q0 = 0.5 * FastMath.sqrt(s + 1.0);
",4,2,0,1,2,0,4,0,0,11,34,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,259,"      double inv = 0.25 / q0;
",4,1,0,0,0,0,0,0,0,5,23,7,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,260,"      q1 = inv * (ort[1][2] - ort[2][1]);
",4,2,1,5,10,0,0,0,0,11,35,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,261,"      q2 = inv * (ort[2][0] - ort[0][2]);
",4,2,1,5,10,0,0,0,0,11,35,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,262,"      q3 = inv * (ort[0][1] - ort[1][0]);
",4,2,1,5,10,0,0,0,0,11,35,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,263,"    } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,264,"      s = ort[0][0] - ort[1][1] - ort[2][2];
",2,1,1,6,12,0,0,0,0,10,38,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,265,"      if (s > -0.19) {
",2,1,0,1,3,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,267,"        q1 = 0.5 * FastMath.sqrt(s + 1.0);
",4,2,0,1,2,0,4,0,0,11,34,8,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,268,"        double inv = 0.25 / q1;
",4,1,0,0,0,0,0,0,0,5,23,9,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,269,"        q0 = inv * (ort[1][2] - ort[2][1]);
",4,2,1,5,10,0,0,0,0,11,35,8,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,270,"        q2 = inv * (ort[0][1] + ort[1][0]);
",4,2,1,5,10,0,0,0,0,11,35,8,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,271,"        q3 = inv * (ort[0][2] + ort[2][0]);
",4,2,1,5,10,0,0,0,0,11,35,8,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,272,"      } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,273,"        s = ort[1][1] - ort[0][0] - ort[2][2];
",2,1,1,6,12,0,0,0,0,10,38,8,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,274,"        if (s > -0.19) {
",2,1,0,1,3,0,0,0,0,4,16,8,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,276,"          q2 = 0.5 * FastMath.sqrt(s + 1.0);
",4,2,0,1,2,0,4,0,0,11,34,10,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,277,"          double inv = 0.25 / q2;
",4,1,0,0,0,0,0,0,0,5,23,11,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,278,"          q0 = inv * (ort[2][0] - ort[0][2]);
",4,2,1,5,10,0,0,0,0,11,35,10,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,279,"          q1 = inv * (ort[0][1] + ort[1][0]);
",4,2,1,5,10,0,0,0,0,11,35,10,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,280,"          q3 = inv * (ort[2][1] + ort[1][2]);
",4,2,1,5,10,0,0,0,0,11,35,10,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,281,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,283,"          s = ort[2][2] - ort[0][0] - ort[1][1];
",2,1,1,6,12,0,0,0,0,10,38,10,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,284,"          q3 = 0.5 * FastMath.sqrt(s + 1.0);
",4,2,0,1,2,0,4,0,0,11,34,10,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,285,"          double inv = 0.25 / q3;
",4,1,0,0,0,0,0,0,0,5,23,11,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,286,"          q0 = inv * (ort[0][1] - ort[1][0]);
",4,2,1,5,10,0,0,0,0,11,35,10,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,287,"          q1 = inv * (ort[0][2] + ort[2][0]);
",4,2,1,5,10,0,0,0,0,11,35,10,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,288,"          q2 = inv * (ort[2][1] + ort[1][2]);
",4,2,1,5,10,0,0,0,0,11,35,10,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,293,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,321,"    throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);
",4,0,0,1,2,0,4,0,0,8,115,7,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,347,"    Vector3D v3 = Vector3D.crossProduct(v1, v2);
",2,0,0,1,2,0,8,2,0,12,44,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,348,"    Vector3D v3Su3 = v3.subtract(u3);
",2,0,0,1,2,0,6,2,0,10,33,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,349,"    k = v1Su1.crossProduct(v3Su3);
",2,0,0,1,2,0,6,0,0,9,30,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,350,"    Vector3D u2Prime = u1.crossProduct(u3);
",2,0,0,1,2,0,6,2,0,10,39,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,351,"    c = k.dotProduct(u2Prime);
",2,0,0,1,2,0,6,0,0,9,26,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,353,"    if (c == 0) {
",2,1,0,1,3,0,0,0,0,3,13,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,356,"      k = v2Su2.crossProduct(v3Su3);;
",2,0,0,1,2,0,6,0,0,9,31,8,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,357,"      c = k.dotProduct(u2.crossProduct(u3));;
",2,0,0,2,4,0,10,0,0,13,39,8,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,359,"      if (c == 0) {
",2,1,0,1,3,0,0,0,0,3,13,8,0.00000,1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,362,"        q0 = 1.0;
",2,0,0,0,0,0,0,0,0,3,9,10,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,363,"        q1 = 0.0;
",2,0,0,0,0,0,0,0,0,3,9,10,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,364,"        q2 = 0.0;
",2,0,0,0,0,0,0,0,0,3,9,10,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,365,"        q3 = 0.0;
",2,0,0,0,0,0,0,0,0,3,9,10,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,366,"        return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,370,"      uRef = u2;
",4,0,0,0,0,0,0,0,0,5,10,8,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,371,"      vRef = v2;
",4,0,0,0,0,0,0,0,0,5,10,8,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,405,"  public Rotation(Vector3D u, Vector3D v) {
",6,0,0,1,3,1,0,4,0,11,41,2,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,407,"    double normProduct = u.getNorm() * v.getNorm();
",2,1,0,2,4,0,8,0,0,11,47,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,408,"    if (normProduct == 0) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,409,"        throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);
",4,0,0,1,2,0,4,0,0,8,115,7,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,412,"    double dot = u.dotProduct(v);
",2,0,0,1,2,0,6,0,0,8,29,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,414,"    if (dot < ((2.0e-15 - 1.0) * normProduct)) {
",4,3,0,3,7,0,0,0,0,7,44,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,417,"      Vector3D w = u.orthogonal();
",2,0,0,1,2,0,4,2,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,418,"      q0 = 0.0;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,419,"      q1 = -w.getX();
",2,0,0,1,2,0,4,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,420,"      q2 = -w.getY();
",2,0,0,1,2,0,4,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,421,"      q3 = -w.getZ();
",2,0,0,1,2,0,4,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,422,"    } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,425,"      q0 = FastMath.sqrt(0.5 * (1.0 + dot / normProduct));
",6,3,0,2,4,0,4,0,0,14,52,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,426,"      double coeff = 1.0 / (2.0 * q0 * normProduct);
",6,2,0,1,2,0,0,0,0,8,46,7,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,427,"      Vector3D q = v.crossProduct(u);
",2,0,0,1,2,0,6,2,0,10,31,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,428,"      q1 = coeff * q.getX();
",4,1,0,1,2,0,4,0,0,10,22,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,429,"      q2 = coeff * q.getY();
",4,1,0,1,2,0,4,0,0,10,22,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,430,"      q3 = coeff * q.getZ();
",4,1,0,1,2,0,4,0,0,10,22,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,433,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,455,"                  double alpha1, double alpha2, double alpha3) {
",6,0,0,0,2,0,0,0,0,6,46,3,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,456,"    Rotation r1 = new Rotation(order.getA1(), alpha1);
",4,0,0,2,4,0,4,4,0,12,50,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,457,"    Rotation r2 = new Rotation(order.getA2(), alpha2);
",4,0,0,2,4,0,4,4,0,12,50,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,458,"    Rotation r3 = new Rotation(order.getA3(), alpha3);
",4,0,0,2,4,0,4,4,0,12,50,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,459,"    Rotation composed = r1.applyTo(r2.applyTo(r3));
",2,0,0,2,4,0,10,2,0,14,47,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,460,"    q0 = composed.q0;
",6,0,0,0,0,0,0,0,0,7,17,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,461,"    q1 = composed.q1;
",6,0,0,0,0,0,0,0,0,7,17,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,462,"    q2 = composed.q2;
",6,0,0,0,0,0,0,0,0,7,17,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,463,"    q3 = composed.q3;
",6,0,0,0,0,0,0,0,0,7,17,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,464,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,474,"    return new Rotation(-q0, q1, q2, q3, false);
",8,0,0,1,2,1,0,2,0,12,44,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,488,"    return q1;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,495,"    return q2;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,502,"    return q3;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,510,"    double squaredSine = q1 * q1 + q2 * q2 + q3 * q3;
",14,5,0,0,0,0,0,0,0,19,49,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,511,"    if (squaredSine == 0) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,512,"      return new Vector3D(1, 0, 0);
",0,0,0,1,2,1,0,2,0,2,29,8,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,513,"    } else if (q0 < 0) {
",2,1,0,1,4,0,0,0,0,3,20,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,514,"      double inverse = 1 / FastMath.sqrt(squaredSine);
",2,1,0,1,2,0,6,0,0,9,48,8,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,515,"      return new Vector3D(q1 * inverse, q2 * inverse, q3 * inverse);
",12,3,0,1,2,1,0,2,0,17,62,8,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,517,"    double inverse = -1 / FastMath.sqrt(squaredSine);
",2,1,0,1,2,0,6,0,0,10,49,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,518,"    return new Vector3D(q1 * inverse, q2 * inverse, q3 * inverse);
",12,3,0,1,2,1,0,2,0,17,62,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,526,"    if ((q0 < -0.1) || (q0 > 0.1)) {
",4,3,0,3,7,0,0,0,0,8,32,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,527,"      return 2 * FastMath.asin(FastMath.sqrt(q1 * q1 + q2 * q2 + q3 * q3));
",12,6,0,2,4,1,8,0,0,26,69,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,528,"    } else if (q0 < 0) {
",2,1,0,1,4,0,0,0,0,3,20,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,529,"      return 2 * FastMath.acos(-q0);
",2,1,0,1,2,1,4,0,0,8,30,7,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,531,"    return 2 * FastMath.acos(q0);
",0,1,0,1,2,1,6,0,0,7,29,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,572,"    if (order == RotationOrder.XYZ) {
",6,1,0,1,3,0,0,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,579,"      Vector3D v1 = applyTo(Vector3D.PLUS_K);
",6,0,0,1,2,0,2,2,0,10,39,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,580,"      Vector3D v2 = applyInverseTo(Vector3D.PLUS_I);
",6,0,0,1,2,0,2,2,0,10,46,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,581,"      if  ((v2.getZ() < -0.9999999999) || (v2.getZ() > 0.9999999999)) {
",0,3,0,5,11,0,8,0,0,12,65,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,582,"        throw new CardanEulerSingularityException(true);
",0,0,0,1,2,0,0,2,0,3,48,9,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,584,"      return new double[] {
",0,0,0,1,3,1,0,0,0,0,21,3,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,590,"    } else if (order == RotationOrder.XZY) {
",6,1,0,1,4,0,0,0,0,7,40,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,597,"      Vector3D v1 = applyTo(Vector3D.PLUS_J);
",6,0,0,1,2,0,2,2,0,10,39,7,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,598,"      Vector3D v2 = applyInverseTo(Vector3D.PLUS_I);
",6,0,0,1,2,0,2,2,0,10,46,7,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,599,"      if ((v2.getY() < -0.9999999999) || (v2.getY() > 0.9999999999)) {
",0,3,0,5,11,0,8,0,0,12,64,7,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,600,"        throw new CardanEulerSingularityException(true);
",0,0,0,1,2,0,0,2,0,3,48,10,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,602,"      return new double[] {
",0,0,0,1,3,1,0,0,0,0,21,3,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,608,"    } else if (order == RotationOrder.YXZ) {
",6,1,0,1,4,0,0,0,0,7,40,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,615,"      Vector3D v1 = applyTo(Vector3D.PLUS_K);
",6,0,0,1,2,0,2,2,0,10,39,8,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,616,"      Vector3D v2 = applyInverseTo(Vector3D.PLUS_J);
",6,0,0,1,2,0,2,2,0,10,46,8,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,617,"      if ((v2.getZ() < -0.9999999999) || (v2.getZ() > 0.9999999999)) {
",0,3,0,5,11,0,8,0,0,12,64,8,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,618,"        throw new CardanEulerSingularityException(true);
",0,0,0,1,2,0,0,2,0,3,48,11,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,620,"      return new double[] {
",0,0,0,1,3,1,0,0,0,0,21,3,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,626,"    } else if (order == RotationOrder.YZX) {
",6,1,0,1,4,0,0,0,0,7,40,7,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,633,"      Vector3D v1 = applyTo(Vector3D.PLUS_I);
",6,0,0,1,2,0,2,2,0,10,39,9,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,634,"      Vector3D v2 = applyInverseTo(Vector3D.PLUS_J);
",6,0,0,1,2,0,2,2,0,10,46,9,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,635,"      if ((v2.getX() < -0.9999999999) || (v2.getX() > 0.9999999999)) {
",0,3,0,5,11,0,8,0,0,12,64,9,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,636,"        throw new CardanEulerSingularityException(true);
",0,0,0,1,2,0,0,2,0,3,48,12,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,638,"      return new double[] {
",0,0,0,1,3,1,0,0,0,0,21,3,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,644,"    } else if (order == RotationOrder.ZXY) {
",6,1,0,1,4,0,0,0,0,7,40,8,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,651,"      Vector3D v1 = applyTo(Vector3D.PLUS_J);
",6,0,0,1,2,0,2,2,0,10,39,10,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,652,"      Vector3D v2 = applyInverseTo(Vector3D.PLUS_K);
",6,0,0,1,2,0,2,2,0,10,46,10,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,653,"      if ((v2.getY() < -0.9999999999) || (v2.getY() > 0.9999999999)) {
",0,3,0,5,11,0,8,0,0,12,64,10,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,654,"        throw new CardanEulerSingularityException(true);
",0,0,0,1,2,0,0,2,0,3,48,13,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,656,"      return new double[] {
",0,0,0,1,3,1,0,0,0,0,21,3,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,662,"    } else if (order == RotationOrder.ZYX) {
",6,1,0,1,4,0,0,0,0,7,40,9,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,669,"      Vector3D v1 = applyTo(Vector3D.PLUS_I);
",6,0,0,1,2,0,2,2,0,10,39,11,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,670,"      Vector3D v2 = applyInverseTo(Vector3D.PLUS_K);
",6,0,0,1,2,0,2,2,0,10,46,11,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,671,"      if ((v2.getX() < -0.9999999999) || (v2.getX() > 0.9999999999)) {
",0,3,0,5,11,0,8,0,0,12,64,11,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,672,"        throw new CardanEulerSingularityException(true);
",0,0,0,1,2,0,0,2,0,3,48,14,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,674,"      return new double[] {
",0,0,0,1,3,1,0,0,0,0,21,3,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,680,"    } else if (order == RotationOrder.XYX) {
",6,1,0,1,4,0,0,0,0,7,40,10,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,687,"      Vector3D v1 = applyTo(Vector3D.PLUS_I);
",6,0,0,1,2,0,2,2,0,10,39,12,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,688,"      Vector3D v2 = applyInverseTo(Vector3D.PLUS_I);
",6,0,0,1,2,0,2,2,0,10,46,12,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,689,"      if ((v2.getX() < -0.9999999999) || (v2.getX() > 0.9999999999)) {
",0,3,0,5,11,0,8,0,0,12,64,12,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,690,"        throw new CardanEulerSingularityException(false);
",0,0,0,1,2,0,0,2,0,3,49,15,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,692,"      return new double[] {
",0,0,0,1,3,1,0,0,0,0,21,3,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,698,"    } else if (order == RotationOrder.XZX) {
",6,1,0,1,4,0,0,0,0,7,40,11,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,705,"      Vector3D v1 = applyTo(Vector3D.PLUS_I);
",6,0,0,1,2,0,2,2,0,10,39,13,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,706,"      Vector3D v2 = applyInverseTo(Vector3D.PLUS_I);
",6,0,0,1,2,0,2,2,0,10,46,13,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,707,"      if ((v2.getX() < -0.9999999999) || (v2.getX() > 0.9999999999)) {
",0,3,0,5,11,0,8,0,0,12,64,13,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,708,"        throw new CardanEulerSingularityException(false);
",0,0,0,1,2,0,0,2,0,3,49,16,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,710,"      return new double[] {
",0,0,0,1,3,1,0,0,0,0,21,3,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,716,"    } else if (order == RotationOrder.YXY) {
",6,1,0,1,4,0,0,0,0,7,40,12,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,723,"      Vector3D v1 = applyTo(Vector3D.PLUS_J);
",6,0,0,1,2,0,2,2,0,10,39,14,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,724,"      Vector3D v2 = applyInverseTo(Vector3D.PLUS_J);
",6,0,0,1,2,0,2,2,0,10,46,14,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,725,"      if ((v2.getY() < -0.9999999999) || (v2.getY() > 0.9999999999)) {
",0,3,0,5,11,0,8,0,0,12,64,14,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,726,"        throw new CardanEulerSingularityException(false);
",0,0,0,1,2,0,0,2,0,3,49,17,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,728,"      return new double[] {
",0,0,0,1,3,1,0,0,0,0,21,3,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,734,"    } else if (order == RotationOrder.YZY) {
",6,1,0,1,4,0,0,0,0,7,40,13,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,741,"      Vector3D v1 = applyTo(Vector3D.PLUS_J);
",6,0,0,1,2,0,2,2,0,10,39,15,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,742,"      Vector3D v2 = applyInverseTo(Vector3D.PLUS_J);
",6,0,0,1,2,0,2,2,0,10,46,15,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,743,"      if ((v2.getY() < -0.9999999999) || (v2.getY() > 0.9999999999)) {
",0,3,0,5,11,0,8,0,0,12,64,15,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,744,"        throw new CardanEulerSingularityException(false);
",0,0,0,1,2,0,0,2,0,3,49,18,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,746,"      return new double[] {
",0,0,0,1,3,1,0,0,0,0,21,3,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,752,"    } else if (order == RotationOrder.ZXZ) {
",6,1,0,1,4,0,0,0,0,7,40,14,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,759,"      Vector3D v1 = applyTo(Vector3D.PLUS_K);
",6,0,0,1,2,0,2,2,0,10,39,16,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,760,"      Vector3D v2 = applyInverseTo(Vector3D.PLUS_K);
",6,0,0,1,2,0,2,2,0,10,46,16,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,761,"      if ((v2.getZ() < -0.9999999999) || (v2.getZ() > 0.9999999999)) {
",0,3,0,5,11,0,8,0,0,12,64,16,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,762,"        throw new CardanEulerSingularityException(false);
",0,0,0,1,2,0,0,2,0,3,49,19,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,764,"      return new double[] {
",0,0,0,1,3,1,0,0,0,0,21,3,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,777,"      Vector3D v1 = applyTo(Vector3D.PLUS_K);
",6,0,0,1,2,0,2,2,0,10,39,16,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,778,"      Vector3D v2 = applyInverseTo(Vector3D.PLUS_K);
",6,0,0,1,2,0,2,2,0,10,46,16,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,779,"      if ((v2.getZ() < -0.9999999999) || (v2.getZ() > 0.9999999999)) {
",0,3,0,5,11,0,8,0,0,12,64,16,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,780,"        throw new CardanEulerSingularityException(false);
",0,0,0,1,2,0,0,2,0,3,49,19,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,782,"      return new double[] {
",0,0,0,1,3,1,0,0,0,0,21,3,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,798,"    double q0q0  = q0 * q0;
",6,1,0,0,0,0,0,0,0,7,23,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,799,"    double q0q1  = q0 * q1;
",6,1,0,0,0,0,0,0,0,7,23,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,800,"    double q0q2  = q0 * q2;
",6,1,0,0,0,0,0,0,0,7,23,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,801,"    double q0q3  = q0 * q3;
",6,1,0,0,0,0,0,0,0,7,23,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,802,"    double q1q1  = q1 * q1;
",6,1,0,0,0,0,0,0,0,7,23,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,803,"    double q1q2  = q1 * q2;
",6,1,0,0,0,0,0,0,0,7,23,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,804,"    double q1q3  = q1 * q3;
",6,1,0,0,0,0,0,0,0,7,23,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,805,"    double q2q2  = q2 * q2;
",6,1,0,0,0,0,0,0,0,7,23,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,806,"    double q2q3  = q2 * q3;
",6,1,0,0,0,0,0,0,0,7,23,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,807,"    double q3q3  = q3 * q3;
",6,1,0,0,0,0,0,0,0,7,23,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,810,"    double[][] m = new double[3][];
",2,0,0,4,8,0,0,0,0,2,31,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,811,"    m[0] = new double[3];
",0,0,1,2,4,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,812,"    m[1] = new double[3];
",0,0,1,2,4,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,813,"    m[2] = new double[3];
",0,0,1,2,4,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,815,"    m [0][0] = 2.0 * (q0q0 + q1q1) - 1.0;
",4,3,1,3,6,0,0,0,0,10,37,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,816,"    m [1][0] = 2.0 * (q1q2 - q0q3);
",4,2,1,3,6,0,0,0,0,9,31,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,817,"    m [2][0] = 2.0 * (q1q3 + q0q2);
",4,2,1,3,6,0,0,0,0,9,31,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,819,"    m [0][1] = 2.0 * (q1q2 + q0q3);
",4,2,1,3,6,0,0,0,0,9,31,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,820,"    m [1][1] = 2.0 * (q0q0 + q2q2) - 1.0;
",4,3,1,3,6,0,0,0,0,10,37,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,821,"    m [2][1] = 2.0 * (q2q3 - q0q1);
",4,2,1,3,6,0,0,0,0,9,31,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,823,"    m [0][2] = 2.0 * (q1q3 - q0q2);
",4,2,1,3,6,0,0,0,0,9,31,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,824,"    m [1][2] = 2.0 * (q2q3 + q0q1);
",4,2,1,3,6,0,0,0,0,9,31,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,825,"    m [2][2] = 2.0 * (q0q0 + q3q3) - 1.0;
",4,3,1,3,6,0,0,0,0,10,37,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,827,"    return m;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,837,"    double x = u.getX();
",2,0,0,1,2,0,4,0,0,6,20,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,838,"    double y = u.getY();
",2,0,0,1,2,0,4,0,0,6,20,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,839,"    double z = u.getZ();
",2,0,0,1,2,0,4,0,0,6,20,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,841,"    double s = q1 * x + q2 * y + q3 * z;
",14,5,0,0,0,0,0,0,0,19,36,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,843,"    return new Vector3D(2 * (q0 * (x * q0 - (q2 * z - q3 * y)) + s * q1) - x,
",20,10,0,3,7,1,0,2,0,32,73,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,855,"    double x = u.getX();
",2,0,0,1,2,0,4,0,0,6,20,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,856,"    double y = u.getY();
",2,0,0,1,2,0,4,0,0,6,20,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,857,"    double z = u.getZ();
",2,0,0,1,2,0,4,0,0,6,20,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,859,"    double s = q1 * x + q2 * y + q3 * z;
",14,5,0,0,0,0,0,0,0,19,36,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,860,"    double m0 = -q0;
",4,0,0,0,0,0,0,0,0,5,16,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,862,"    return new Vector3D(2 * (m0 * (x * m0 - (q2 * z - q3 * y)) + s * q1) - x,
",20,10,0,3,7,1,0,2,0,32,73,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,878,"    return new Rotation(r.q0 * q0 - (r.q1 * q1 + r.q2 * q2 + r.q3 * q3),
",24,7,0,1,3,1,0,2,0,33,68,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,897,"    return new Rotation(-r.q0 * q0 - (r.q1 * q1 + r.q2 * q2 + r.q3 * q3),
",24,7,0,1,3,1,0,2,0,34,69,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,916,"    double[] m0 = m[0];
",2,0,1,2,4,0,0,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,917,"    double[] m1 = m[1];
",2,0,1,2,4,0,0,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,918,"    double[] m2 = m[2];
",2,0,1,2,4,0,0,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,919,"    double x00 = m0[0];
",2,0,1,1,2,0,0,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,920,"    double x01 = m0[1];
",2,0,1,1,2,0,0,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,921,"    double x02 = m0[2];
",2,0,1,1,2,0,0,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,922,"    double x10 = m1[0];
",2,0,1,1,2,0,0,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,923,"    double x11 = m1[1];
",2,0,1,1,2,0,0,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,924,"    double x12 = m1[2];
",2,0,1,1,2,0,0,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,925,"    double x20 = m2[0];
",2,0,1,1,2,0,0,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,926,"    double x21 = m2[1];
",2,0,1,1,2,0,0,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,927,"    double x22 = m2[2];
",2,0,1,1,2,0,0,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,928,"    double fn = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,931,"    double[][] o = new double[3][3];
",2,0,0,4,8,0,0,0,0,2,32,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,932,"    double[] o0 = o[0];
",2,0,1,2,4,0,0,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,933,"    double[] o1 = o[1];
",2,0,1,2,4,0,0,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,934,"    double[] o2 = o[2];
",2,0,1,2,4,0,0,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,937,"    int i = 0;
",2,0,0,0,0,0,0,0,0,2,10,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,938,"    while (++i < 11) {
",2,1,0,1,3,0,0,0,0,4,18,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,941,"      double mx00 = m0[0] * x00 + m1[0] * x10 + m2[0] * x20;
",8,5,1,3,6,0,0,0,0,19,54,7,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,942,"      double mx10 = m0[1] * x00 + m1[1] * x10 + m2[1] * x20;
",8,5,1,3,6,0,0,0,0,19,54,7,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,943,"      double mx20 = m0[2] * x00 + m1[2] * x10 + m2[2] * x20;
",8,5,1,3,6,0,0,0,0,19,54,7,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,944,"      double mx01 = m0[0] * x01 + m1[0] * x11 + m2[0] * x21;
",8,5,1,3,6,0,0,0,0,19,54,7,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,945,"      double mx11 = m0[1] * x01 + m1[1] * x11 + m2[1] * x21;
",8,5,1,3,6,0,0,0,0,19,54,7,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,946,"      double mx21 = m0[2] * x01 + m1[2] * x11 + m2[2] * x21;
",8,5,1,3,6,0,0,0,0,19,54,7,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,947,"      double mx02 = m0[0] * x02 + m1[0] * x12 + m2[0] * x22;
",8,5,1,3,6,0,0,0,0,19,54,7,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,948,"      double mx12 = m0[1] * x02 + m1[1] * x12 + m2[1] * x22;
",8,5,1,3,6,0,0,0,0,19,54,7,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,949,"      double mx22 = m0[2] * x02 + m1[2] * x12 + m2[2] * x22;
",8,5,1,3,6,0,0,0,0,19,54,7,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,952,"      o0[0] = x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m0[0]);
",14,8,1,3,6,0,0,0,0,27,67,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,953,"      o0[1] = x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m0[1]);
",14,8,1,3,6,0,0,0,0,27,67,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,954,"      o0[2] = x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m0[2]);
",14,8,1,3,6,0,0,0,0,27,67,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,955,"      o1[0] = x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m1[0]);
",14,8,1,3,6,0,0,0,0,27,67,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,956,"      o1[1] = x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m1[1]);
",14,8,1,3,6,0,0,0,0,27,67,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,957,"      o1[2] = x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m1[2]);
",14,8,1,3,6,0,0,0,0,27,67,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,958,"      o2[0] = x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m2[0]);
",14,8,1,3,6,0,0,0,0,27,67,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,959,"      o2[1] = x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m2[1]);
",14,8,1,3,6,0,0,0,0,27,67,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,960,"      o2[2] = x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m2[2]);
",14,8,1,3,6,0,0,0,0,27,67,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,963,"      double corr00 = o0[0] - m0[0];
",2,1,1,2,4,0,0,0,0,7,30,7,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,964,"      double corr01 = o0[1] - m0[1];
",2,1,1,2,4,0,0,0,0,7,30,7,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,965,"      double corr02 = o0[2] - m0[2];
",2,1,1,2,4,0,0,0,0,7,30,7,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,966,"      double corr10 = o1[0] - m1[0];
",2,1,1,2,4,0,0,0,0,7,30,7,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,967,"      double corr11 = o1[1] - m1[1];
",2,1,1,2,4,0,0,0,0,7,30,7,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,968,"      double corr12 = o1[2] - m1[2];
",2,1,1,2,4,0,0,0,0,7,30,7,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,969,"      double corr20 = o2[0] - m2[0];
",2,1,1,2,4,0,0,0,0,7,30,7,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,970,"      double corr21 = o2[1] - m2[1];
",2,1,1,2,4,0,0,0,0,7,30,7,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,971,"      double corr22 = o2[2] - m2[2];
",2,1,1,2,4,0,0,0,0,7,30,7,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,974,"      fn1 = corr00 * corr00 + corr01 * corr01 + corr02 * corr02 +
",14,11,0,0,0,0,0,0,0,26,59,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,979,"      if (FastMath.abs(fn1 - fn) <= threshold) {
",6,2,0,2,5,0,4,0,0,12,42,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,980,"          return o;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,984,"      x00 = o0[0];
",2,0,1,1,2,0,0,0,0,5,12,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,985,"      x01 = o0[1];
",2,0,1,1,2,0,0,0,0,5,12,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,986,"      x02 = o0[2];
",2,0,1,1,2,0,0,0,0,5,12,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,987,"      x10 = o1[0];
",2,0,1,1,2,0,0,0,0,5,12,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,988,"      x11 = o1[1];
",2,0,1,1,2,0,0,0,0,5,12,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,989,"      x12 = o1[2];
",2,0,1,1,2,0,0,0,0,5,12,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,990,"      x20 = o2[0];
",2,0,1,1,2,0,0,0,0,5,12,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,991,"      x21 = o2[1];
",2,0,1,1,2,0,0,0,0,5,12,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,992,"      x22 = o2[2];
",2,0,1,1,2,0,0,0,0,5,12,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,993,"      fn  = fn1;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,995,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,998,"    throw new NotARotationMatrixException(
",0,0,0,0,1,0,0,2,0,2,38,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,1028,"      return r1.applyInverseTo(r2).getAngle();
",0,0,0,2,4,1,8,0,0,8,40,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/NotARotationMatrixException,52,45,"        super(specifier, parts);
",4,0,0,1,2,0,0,0,0,4,24,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/NotARotationMatrixException,52,46,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,107,"    public Vector3D(double alpha, double delta) {
",6,0,0,1,3,1,0,0,0,7,45,2,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,108,"        double cosDelta = FastMath.cos(delta);
",2,0,0,1,2,0,6,0,0,8,38,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,109,"        this.x = FastMath.cos(alpha) * cosDelta;
",4,1,0,1,2,0,6,0,0,12,40,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,110,"        this.y = FastMath.sin(alpha) * cosDelta;
",4,1,0,1,2,0,6,0,0,12,40,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,111,"        this.z = FastMath.sin(delta);
",2,0,0,1,2,0,6,0,0,9,29,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,112,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,151,"                    double a3, Vector3D u3) {
",4,0,0,0,2,0,0,2,0,6,25,3,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,152,"        this.x = MathUtils.linearCombination(a1, u1.x, a2, u2.x, a3, u3.x);
",14,0,0,1,2,0,10,0,0,25,67,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,153,"        this.y = MathUtils.linearCombination(a1, u1.y, a2, u2.y, a3, u3.y);
",14,0,0,1,2,0,10,0,0,25,67,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,154,"        this.z = MathUtils.linearCombination(a1, u1.z, a2, u2.z, a3, u3.z);
",14,0,0,1,2,0,10,0,0,25,67,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,155,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,170,"                    double a3, Vector3D u3, double a4, Vector3D u4) {
",8,0,0,0,2,0,0,4,0,12,49,3,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,171,"        this.x = MathUtils.linearCombination(a1, u1.x, a2, u2.x, a3, u3.x, a4, u4.x);
",18,0,0,1,2,0,12,0,0,31,77,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,172,"        this.y = MathUtils.linearCombination(a1, u1.y, a2, u2.y, a3, u3.y, a4, u4.y);
",18,0,0,1,2,0,12,0,0,31,77,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,173,"        this.z = MathUtils.linearCombination(a1, u1.z, a2, u2.z, a3, u3.z, a4, u4.z);
",18,0,0,1,2,0,12,0,0,31,77,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,174,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,202,"        return Euclidean3D.getInstance();
",0,0,0,1,2,1,4,0,0,4,33,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,207,"        return ZERO;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,212,"        return FastMath.abs(x) + FastMath.abs(y) + FastMath.abs(z);
",0,1,0,3,6,1,18,0,0,19,59,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,218,"        return FastMath.sqrt (x * x + y * y + z * z);
",12,5,0,1,2,1,4,0,0,21,45,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,229,"        return FastMath.max(FastMath.max(FastMath.abs(x), FastMath.abs(y)), FastMath.abs(z));
",0,0,0,5,10,1,26,0,0,26,85,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,237,"        return FastMath.atan2(y, x);
",0,0,0,1,2,1,8,0,0,8,28,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,245,"        return FastMath.asin(z / getNorm());
",2,1,0,2,4,1,6,0,0,9,36,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,250,"        final Vector3D v3 = (Vector3D) v;
",4,0,0,1,2,1,0,4,0,9,33,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,251,"        return new Vector3D(x + v3.x, y + v3.y, z + v3.z);
",18,3,0,1,2,1,0,2,0,23,50,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,256,"        return new Vector3D(1, this, factor, (Vector3D) v);
",4,0,0,2,4,1,0,4,0,8,51,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,267,"        return new Vector3D(1, this, -factor, (Vector3D) v);
",4,0,0,2,4,1,0,4,0,9,52,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,272,"        double s = getNorm();
",2,0,0,1,2,0,2,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,273,"        if (s == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,274,"            throw new MathArithmeticException(LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR);
",4,0,0,1,2,0,0,2,0,6,88,7,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,276,"        return scalarMultiply(1 / s);
",2,1,0,1,2,1,2,0,0,5,29,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,296,"        double threshold = 0.6 * getNorm();
",2,1,0,1,2,0,2,0,0,5,35,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,297,"        if (threshold == 0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,298,"            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
",4,0,0,1,2,0,0,2,0,6,62,7,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,301,"        if ((x >= -threshold) && (x <= threshold)) {
",8,3,0,3,7,0,0,0,0,12,44,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,302,"            double inverse  = 1 / FastMath.sqrt(y * y + z * z);
",10,4,0,1,2,0,4,0,0,18,51,7,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,303,"            return new Vector3D(0, inverse * z, -inverse * y);
",8,2,0,1,2,1,0,2,0,13,50,7,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,304,"        } else if ((y >= -threshold) && (y <= threshold)) {
",8,3,0,3,8,0,0,0,0,12,51,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,305,"            double inverse  = 1 / FastMath.sqrt(x * x + z * z);
",10,4,0,1,2,0,4,0,0,18,51,8,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,306,"            return new Vector3D(-inverse * z, 0, inverse * x);
",8,2,0,1,2,1,0,2,0,13,50,8,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,308,"        double inverse  = 1 / FastMath.sqrt(x * x + y * y);
",10,4,0,1,2,0,4,0,0,18,51,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,309,"        return new Vector3D(inverse * y, -inverse * x, 0);
",8,2,0,1,2,1,0,2,0,13,50,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,326,"        double normProduct = v1.getNorm() * v2.getNorm();
",2,1,0,2,4,0,8,0,0,11,49,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,327,"        if (normProduct == 0) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,328,"            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
",4,0,0,1,2,0,0,2,0,6,62,7,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,331,"        double dot = v1.dotProduct(v2);
",2,0,0,1,2,0,6,0,0,8,31,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,332,"        double threshold = normProduct * 0.9999;
",4,1,0,0,0,0,0,0,0,5,40,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,333,"        if ((dot < -threshold) || (dot > threshold)) {
",8,3,0,3,7,0,0,0,0,12,46,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,335,"            Vector3D v3 = crossProduct(v1, v2);
",2,0,0,1,2,0,6,2,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,336,"            if (dot >= 0) {
",2,1,0,1,3,0,0,0,0,3,15,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,337,"                return FastMath.asin(v3.getNorm() / normProduct);
",2,1,0,2,4,1,8,0,0,11,49,9,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,339,"            return FastMath.PI - FastMath.asin(v3.getNorm() / normProduct);
",6,2,0,2,4,1,8,0,0,16,63,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,343,"        return FastMath.acos(dot / normProduct);
",4,1,0,1,2,1,4,0,0,9,40,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,349,"        return new Vector3D(-x, -y, -z);
",6,0,0,1,2,1,0,2,0,11,32,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,354,"        return new Vector3D(a * x, a * y, a * z);
",12,3,0,1,2,1,0,2,0,17,41,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,359,"        return Double.isNaN(x) || Double.isNaN(y) || Double.isNaN(z);
",0,1,0,3,6,1,18,0,0,19,61,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,364,"        return !isNaN() && (Double.isInfinite(x) || Double.isInfinite(y) || Double.isInfinite(z));
",0,2,0,5,10,1,20,0,0,23,90,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,389,"        if (this == other) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,390,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,393,"        if (other instanceof Vector3D) {
",2,0,0,1,3,0,0,2,0,4,32,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,394,"            final Vector3D rhs = (Vector3D)other;
",4,0,0,1,2,1,0,4,0,9,37,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,395,"            if (rhs.isNaN()) {
",0,0,0,2,5,0,4,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,396,"                return this.isNaN();
",0,0,0,1,2,1,2,0,0,2,20,9,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,399,"            return (x == rhs.x) && (y == rhs.y) && (z == rhs.z);
",18,4,0,3,6,1,0,0,0,22,52,6,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,401,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,413,"        if (isNaN()) {
",0,0,0,2,5,0,2,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,414,"            return 642;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,416,"        return 643 * (164 * MathUtils.hash(x) +  3 * MathUtils.hash(y) +  MathUtils.hash(z));
",0,5,0,4,8,1,18,0,0,23,85,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,445,"        final Vector3D v3 = (Vector3D) v;
",4,0,0,1,2,1,0,4,0,9,33,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,446,"        final double dx = FastMath.abs(v3.x - x);
",8,1,0,1,2,1,4,0,0,14,41,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,447,"        final double dy = FastMath.abs(v3.y - y);
",8,1,0,1,2,1,4,0,0,14,41,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,448,"        final double dz = FastMath.abs(v3.z - z);
",8,1,0,1,2,1,4,0,0,14,41,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,449,"        return dx + dy + dz;
",6,1,0,0,0,1,0,0,0,7,20,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,454,"        final Vector3D v3 = (Vector3D) v;
",4,0,0,1,2,1,0,4,0,9,33,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,455,"        final double dx = v3.x - x;
",8,1,0,0,0,1,0,0,0,10,27,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,456,"        final double dy = v3.y - y;
",8,1,0,0,0,1,0,0,0,10,27,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,457,"        final double dz = v3.z - z;
",8,1,0,0,0,1,0,0,0,10,27,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,458,"        return FastMath.sqrt(dx * dx + dy * dy + dz * dz);
",12,5,0,1,2,1,4,0,0,21,50,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,463,"        final Vector3D v3 = (Vector3D) v;
",4,0,0,1,2,1,0,4,0,9,33,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,464,"        final double dx = FastMath.abs(v3.x - x);
",8,1,0,1,2,1,4,0,0,14,41,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,465,"        final double dy = FastMath.abs(v3.y - y);
",8,1,0,1,2,1,4,0,0,14,41,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,466,"        final double dz = FastMath.abs(v3.z - z);
",8,1,0,1,2,1,4,0,0,14,41,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,467,"        return FastMath.max(FastMath.max(dx, dy), dz);
",0,0,0,2,4,1,14,0,0,14,46,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,472,"        final Vector3D v3 = (Vector3D) v;
",4,0,0,1,2,1,0,4,0,9,33,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,473,"        final double dx = v3.x - x;
",8,1,0,0,0,1,0,0,0,10,27,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,474,"        final double dy = v3.y - y;
",8,1,0,0,0,1,0,0,0,10,27,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,475,"        final double dz = v3.z - z;
",8,1,0,0,0,1,0,0,0,10,27,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,476,"        return dx * dx + dy * dy + dz * dz;
",12,5,0,0,0,1,0,0,0,17,35,4,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,485,"        return v1.dotProduct(v2);
",0,0,0,1,2,1,6,0,0,6,25,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,494,"        return v1.crossProduct(v2);
",0,0,0,1,2,1,6,0,0,6,27,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,506,"        return v1.distance1(v2);
",0,0,0,1,2,1,6,0,0,6,24,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,518,"        return v1.distance(v2);
",0,0,0,1,2,1,6,0,0,6,23,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,530,"        return v1.distanceInf(v2);
",0,0,0,1,2,1,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,542,"        return v1.distanceSq(v2);
",0,0,0,1,2,1,6,0,0,6,25,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,550,"        return Vector3DFormat.getInstance().format(this);
",0,0,0,2,4,1,6,0,0,6,49,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,555,"        return new Vector3DFormat(format).format(this);
",2,0,0,2,4,1,2,2,0,6,47,5,0.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,36,"public class Vector3D implements Serializable, Vector<Euclidean3D> {
",2,0,0,0,1,1,0,6,0,9,68,1,0.00000,0
