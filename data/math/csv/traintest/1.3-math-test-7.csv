dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,predict
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,94,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.33333,1,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,85,198,"        if (fa * fb >= 0.0 ) {
",4,2,0,1,3,0,0,0,0,6,22,4,0.06250,1,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,333,"                coefficients[i] =
",0,0,1,1,2,0,0,0,0,5,17,6,0.12500,1,-1
defect4j,math,org/apache/commons/math/stat/Frequency,89,111,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,1,-1
defect4j,math,org/apache/commons/math/stat/Frequency,90,121,"        Object obj = v;
",4,0,0,0,0,0,0,2,0,6,15,4,0.20000,1,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,260,"        double dOn = object.doubleValue();
",2,0,0,1,2,0,4,0,0,6,34,5,0.00000,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,412,"        if (u * v == 0) {
",4,2,0,1,3,0,0,0,0,6,17,4,0.02222,1,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,148,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,0.50000,1,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,611,"                out.setEntry(column, row, value);
",0,0,0,1,2,0,10,0,0,10,33,11,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,612,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,156,"        if (cachedU == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.44444,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,210,"        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,211,"        Iterator<Entry> it = sparseIterator();
",2,0,0,1,2,0,2,4,0,8,38,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,213,"        while (it.hasNext() && (e = it.next()) != null) {
",2,2,0,4,9,0,8,0,0,13,49,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,214,"            final double value = e.getValue();
",2,0,0,1,2,1,4,0,0,7,34,6,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,215,"            sum += value * value;
",6,1,0,0,0,0,0,0,0,8,21,6,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,216,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,217,"        return Math.sqrt(sum);
",0,0,0,1,2,1,6,0,0,6,22,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,222,"        double norm = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,223,"        Iterator<Entry> it = sparseIterator();
",2,0,0,1,2,0,2,4,0,8,38,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,225,"        while (it.hasNext() && (e = it.next()) != null) {
",2,2,0,4,9,0,8,0,0,13,49,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,226,"            norm += Math.abs(e.getValue());
",2,0,0,2,4,0,8,0,0,11,31,6,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,228,"        return norm;
",2,0,0,0,0,1,0,0,0,2,12,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,499,"        double max = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,500,"        Iterator iter = entries.iterator();
",2,0,0,1,2,0,4,2,0,8,35,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,501,"        while (iter.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,24,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,502,"            iter.advance();
",0,0,0,1,2,0,4,0,0,4,15,7,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,503,"            max += iter.value();
",2,0,0,1,2,0,4,0,0,7,20,6,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,505,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,709,"        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,710,"        for (double a : data) {
",4,0,0,1,3,0,0,0,0,4,23,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,711,"            sum += Math.abs(a);
",2,0,0,1,2,0,6,0,0,9,19,6,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,713,"        return sum;
",2,0,0,0,0,1,0,0,0,2,11,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,719,"        double max = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,720,"        for (double a : data) {
",4,0,0,1,3,0,0,0,0,4,23,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,721,"            max += Math.max(max, Math.abs(a));
",2,0,0,2,4,0,12,0,0,15,34,6,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,723,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,863,"        protected OpenMapSparseIterator() {
",2,0,0,1,3,1,0,0,0,3,35,3,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,864,"            iter = entries.iterator();
",2,0,0,1,2,0,4,0,0,7,26,5,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,865,"            current = new OpenMapEntry(iter);
",4,0,0,1,2,0,0,2,0,7,33,5,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,866,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,870,"            return iter.hasNext();
",0,0,0,1,2,1,4,0,0,4,22,6,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,875,"            iter.advance();
",0,0,0,1,2,0,4,0,0,4,15,6,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,876,"            return current;
",2,0,0,0,0,1,0,0,0,2,15,5,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,854,"    protected class OpenMapSparseIterator implements java.util.Iterator<Entry> {
",8,0,0,0,1,1,0,2,0,11,76,2,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,809,"        return new OpenMapSparseIterator();
",0,0,0,1,2,1,0,2,0,2,35,6,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,30,"public class OpenMapRealVector extends AbstractRealVector implements SparseRealVector, Serializable {
",2,0,0,0,1,1,0,6,0,9,101,1,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,825,"        protected OpenMapEntry(Iterator iter) {
",4,0,0,1,3,1,0,2,0,7,39,3,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,826,"            this.iter = iter;
",4,0,0,0,0,0,0,0,0,5,17,5,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,827,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,832,"            return iter.value();
",0,0,0,1,2,1,4,0,0,4,20,6,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,77,72,"    public abstract class Entry {
",2,0,0,0,1,2,0,0,0,4,29,2,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,117,"        this(values, DEFAULT_ZERO_TOLERANCE);
",4,0,0,1,2,0,0,0,0,4,37,4,0.14286,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,118,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,126,"    public OpenMapRealVector(double[] values, double epsilon) {
",6,0,0,2,5,1,0,0,0,7,59,2,0.14286,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,127,"        virtualSize = values.length;
",6,0,0,0,0,0,0,0,0,7,28,4,0.14286,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,128,"        entries = new OpenIntToDoubleHashMap(0.0);
",2,0,0,1,2,0,0,2,0,5,42,4,0.14286,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,129,"        this.epsilon = epsilon;
",4,0,0,0,0,0,0,0,0,5,23,4,0.14286,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,130,"        for (int key = 0; key < values.length; key++) {
",10,1,0,1,3,0,0,0,0,12,47,4,0.14286,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,131,"            double value = values[key];
",2,0,1,1,2,0,0,0,0,6,27,7,0.14286,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,132,"            if (!isDefaultValue(value)) {
",0,0,0,2,5,0,4,0,0,5,29,6,0.14286,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,133,"                entries.put(key, value);
",0,0,0,1,2,0,8,0,0,8,24,9,0.14286,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,136,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,205,"        return Math.abs(value) < epsilon;
",2,1,0,1,2,1,6,0,0,9,33,4,0.14286,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,699,"        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.08333,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,700,"        for (double a : data) {
",4,0,0,1,3,0,0,0,0,4,23,4,0.08333,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,701,"            sum += a * a;
",6,1,0,0,0,0,0,0,0,8,13,6,0.08333,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,703,"        return Math.sqrt(sum);
",0,0,0,1,2,1,6,0,0,6,22,5,0.08333,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,248,"        return new Iterator();
",0,0,0,1,2,1,0,2,0,2,22,6,0.07143,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,39,"public class OpenIntToDoubleHashMap implements Serializable {
",2,0,0,0,1,1,0,2,0,5,61,1,0.07143,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,505,"        private Iterator() {
",2,0,0,1,3,1,0,0,0,3,20,3,0.07143,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,267,"                    double r1 = y0 / y2;
",6,1,0,0,0,0,0,0,0,7,20,11,0.11111,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,268,"                    double r2 = y1 / y2;
",6,1,0,0,0,0,0,0,0,7,20,11,0.11111,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,269,"                    p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
",18,7,0,4,8,0,0,0,0,26,56,10,0.11111,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,270,"                    p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
",8,4,0,3,6,0,0,0,0,13,42,10,0.11111,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,296,"                x1 = x1 + 0.5 * tolerance;
",6,2,0,0,0,0,0,0,0,9,26,9,0.07143,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,78,99,"      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
",4,0,0,1,2,0,8,0,0,12,77,5,0.05882,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,79,30,"public class EuclideanIntegerPoint implements Clusterable<EuclideanIntegerPoint>, Serializable {
",2,0,0,0,1,1,0,6,0,9,96,1,1.00000,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,45,"    public Cluster(final T center) {
",4,0,0,1,3,2,0,2,0,8,32,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,46,"        this.center = center;
",4,0,0,0,0,0,0,0,0,5,21,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,47,"        points = new ArrayList<T>();
",2,0,0,1,2,0,0,4,0,7,28,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,71,"        return center;
",2,0,0,0,0,1,0,0,0,2,14,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1090,"                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;
",4,3,1,1,2,0,0,0,0,10,43,11,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1091,"                    dMin = 0.0;
",2,0,0,0,0,0,0,0,0,3,11,11,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1092,"                    updateSigma(tau);
",0,0,0,1,2,0,4,0,0,4,17,12,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1093,"                    return deflatedEnd;
",2,0,0,0,0,1,0,0,0,2,19,11,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,870,"            return dotProduct((ArrayRealVector) v);
",2,0,0,2,4,1,2,2,0,6,39,7,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,884,"        checkVectorDimensions(v.length);
",4,0,0,1,2,0,2,0,0,6,32,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,885,"        double dot = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,886,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,887,"            dot += data[i] * v[i];
",2,1,1,2,4,0,0,0,0,12,22,6,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,889,"        return dot;
",2,0,0,0,0,1,0,0,0,2,11,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,900,"        return dotProduct(v.data);
",4,0,0,1,2,1,2,0,0,6,26,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,336,"        if (eigenvectors == null) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,337,"            findEigenVectors();
",0,0,0,1,2,0,2,0,0,2,19,7,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,339,"        return eigenvectors[i].copy();
",0,0,1,2,4,1,2,0,0,6,30,5,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,175,"    public ArrayRealVector(ArrayRealVector v, boolean deep) {
",6,0,0,1,3,1,0,2,0,9,57,2,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,176,"        data = deep ? v.data.clone() : v.data;
",12,0,0,1,2,0,2,0,0,15,38,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,177,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,225,"        return new ArrayRealVector(this, true);
",0,0,0,1,2,1,0,2,0,3,39,5,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1105,"                        tau *= 0.25;
",2,0,0,0,0,0,0,0,0,3,12,15,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1106,"                        tType -= 12;
",2,0,0,0,0,0,0,0,0,3,12,15,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1530,"                tType = -5;
",2,0,0,0,0,0,0,0,0,4,11,8,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1531,"                double s = 0.25 * dMin;
",4,1,0,0,0,0,0,0,0,5,23,9,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1534,"                final int np = nn - 2 * pingPong;
",6,2,0,0,0,1,0,0,0,9,33,8,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1535,"                double b1 = work[np - 2];
",4,1,1,1,2,0,0,0,0,7,25,9,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1536,"                double b2 = work[np - 6];
",4,1,1,1,2,0,0,0,0,7,25,9,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1537,"                final double gam = dN2;
",4,0,0,0,0,1,0,0,0,5,23,8,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1538,"                if (work[np - 8] > b2 || work[np - 4] > b1) {
",8,5,1,3,7,0,0,0,0,17,45,8,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1541,"                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);
",10,6,1,4,8,0,0,0,0,20,58,9,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1544,"                if (end - start > 3) {
",4,2,0,1,3,0,0,0,0,6,22,8,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1564,"                if (a2 < cnst1) {
",4,1,0,1,3,0,0,0,0,5,17,8,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1565,"                    tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);
",6,4,0,3,6,0,6,0,0,17,43,10,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1570,"            } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,77,"    public ArrayRealVector(double[] d) {
",4,0,0,2,5,1,0,0,0,5,36,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,78,"        data = d.clone();
",2,0,0,1,2,0,4,0,0,7,17,4,0.25000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,79,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.25000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,269,"            return subtract((ArrayRealVector) v);
",2,0,0,2,4,1,2,2,0,6,37,7,0.25000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,283,"        checkVectorDimensions(v.length);
",4,0,0,1,2,0,2,0,0,6,32,5,0.25000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,284,"        double[] out = new double[data.length];
",6,0,0,2,4,0,0,0,0,6,39,5,0.25000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,285,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.25000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,286,"            out[i] = data[i] - v[i];
",0,1,1,3,6,0,0,0,0,14,24,6,0.25000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,288,"        return new ArrayRealVector(out);
",2,0,0,1,2,1,0,2,0,4,32,5,0.25000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,299,"        return (ArrayRealVector) subtract(v.data);
",4,0,0,2,4,1,2,2,0,8,42,5,0.25000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,905,"        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.25000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,906,"        for (double a : data) {
",4,0,0,1,3,0,0,0,0,4,23,4,0.25000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,907,"            sum += a * a;
",6,1,0,0,0,0,0,0,0,8,13,6,0.25000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,909,"        return Math.sqrt(sum);
",0,0,0,1,2,1,6,0,0,6,22,5,0.25000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,1287,"        if (data.length != n) {
",6,1,0,1,3,0,0,0,0,7,23,4,0.25000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,1292,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.25000,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1488,"                        np = nn - 2 * pingPong;
",6,2,0,0,0,0,0,0,0,9,23,11,0.12500,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1489,"                        b2 = work[np - 2];
",4,1,1,1,2,0,0,0,0,8,18,11,0.12500,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1490,"                        gam = dN1;
",4,0,0,0,0,0,0,0,0,5,10,11,0.12500,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1491,"                        if (work[np - 4]  >  work[np - 2]) {
",4,3,1,3,7,0,0,0,0,11,36,11,0.12500,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1494,"                        a2 = work[np - 4] / work[np - 2];
",6,3,1,2,4,0,0,0,0,14,33,11,0.12500,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1495,"                        if (work[nn - 9]  >  work[nn - 11]) {
",4,3,1,3,7,0,0,0,0,11,37,11,0.12500,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1498,"                        b2 = work[nn - 9] / work[nn - 11];
",6,3,1,2,4,0,0,0,0,14,34,11,0.12500,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1499,"                        np = nn - 13;
",4,1,0,0,0,0,0,0,0,6,13,11,0.12500,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1085,"                } else if ((dMin < 0.0) &&
",2,2,0,1,4,0,0,0,0,4,26,9,0.11111,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1509,"                            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1529,"                tType = -5;
",2,0,0,0,0,0,0,0,0,4,11,8,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1530,"                double s = 0.25 * dMin;
",4,1,0,0,0,0,0,0,0,5,23,9,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1533,"                final int np = nn - 2 * pingPong;
",6,2,0,0,0,1,0,0,0,9,33,8,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1534,"                double b1 = work[np - 2];
",4,1,1,1,2,0,0,0,0,7,25,9,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1535,"                double b2 = work[np - 6];
",4,1,1,1,2,0,0,0,0,7,25,9,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1536,"                final double gam = dN2;
",4,0,0,0,0,1,0,0,0,5,23,8,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1537,"                if (work[np - 8] > b2 || work[np - 4] > b1) {
",8,5,1,3,7,0,0,0,0,17,45,8,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1540,"                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);
",10,6,1,4,8,0,0,0,0,20,58,9,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1543,"                if (end - start > 2) {
",4,2,0,1,3,0,0,0,0,6,22,8,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1544,"                    b2 = work[nn - 13] / work[nn - 15];
",6,3,1,2,4,0,0,0,0,14,35,10,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1621,"                tau = 0.25 * dMin1;
",4,1,0,0,0,0,0,0,0,6,19,7,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1622,"                if (dMin1 == dN1) {
",4,1,0,1,3,0,0,0,0,5,19,7,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1625,"                tType = -9;
",2,0,0,0,0,0,0,0,0,4,11,7,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1627,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,81,77,"    public ArrayRealVector(double[] d) {
",4,0,0,2,5,1,0,0,0,5,36,2,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,81,78,"        data = d.clone();
",2,0,0,1,2,0,4,0,0,7,17,4,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,81,79,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1479,"                        gam = dN;
",4,0,0,0,0,0,0,0,0,5,9,11,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1480,"                        a2 = 0.0;
",2,0,0,0,0,0,0,0,0,3,9,11,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1481,"                        if (work[nn - 5]  >  work[nn - 7]) {
",4,3,1,3,7,0,0,0,0,11,36,11,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1484,"                        b2 = work[nn - 5] / work[nn - 7];
",6,3,1,2,4,0,0,0,0,14,33,11,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1485,"                        np = nn - 9;
",4,1,0,0,0,0,0,0,0,6,12,11,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1504,"                        if(b2 == 0.0) {
",2,1,0,1,3,0,0,0,0,3,15,11,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1507,"                        b1 = b2;
",4,0,0,0,0,0,0,0,0,5,8,11,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1508,"                        if (work[i4]  >  work[i4 - 2]) {
",2,2,1,3,7,0,0,0,0,10,32,11,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1511,"                        b2 = b2 * (work[i4] / work[i4 - 2]);
",6,3,1,3,6,0,0,0,0,16,36,11,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1512,"                        a2 = a2 + b2;
",6,1,0,0,0,0,0,0,0,8,13,11,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1513,"                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {
",6,4,0,2,5,0,8,0,0,18,48,11,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1586,"            if (dMin1 == dN1 && dMin2 == dN2) {
",8,3,0,1,3,0,0,0,0,11,35,5,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1084,"                } else if ((dMin < 0.0) &&
",2,2,0,1,4,0,0,0,0,4,26,9,0.12500,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1093,"                } else if (dMin < 0.0) {
",2,1,0,1,4,0,0,0,0,3,24,10,0.12500,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1095,"                    if (tType < -22) {
",2,1,0,1,3,0,0,0,0,4,18,12,0.12500,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1098,"                    } else if (dMin1 > 0.0) {
",2,1,0,1,4,0,0,0,0,3,25,13,0.12500,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1100,"                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);
",10,4,0,2,4,0,0,0,0,15,53,15,0.12500,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1101,"                        tType -= 11;
",2,0,0,0,0,0,0,0,0,3,12,15,0.12500,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1474,"                    tType = -4;
",2,0,0,0,0,0,0,0,0,4,11,9,0.11111,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1475,"                    double s = 0.25 * dMin;
",4,1,0,0,0,0,0,0,0,5,23,10,0.11111,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1478,"                    if (dMin == dN) {
",4,1,0,1,3,0,0,0,0,5,17,9,0.11111,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1502,"                    a2 = a2 + b2;
",6,1,0,0,0,0,0,0,0,8,13,9,0.11111,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1503,"                    for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {
",12,4,0,1,3,0,0,0,0,17,60,9,0.11111,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1517,"                    a2 = cnst3 * a2;
",6,1,0,0,0,0,0,0,0,8,16,9,0.11111,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1520,"                    if (a2 < cnst1) {
",4,1,0,1,3,0,0,0,0,5,17,9,0.11111,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1521,"                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);
",6,4,0,3,6,0,6,0,0,17,41,11,0.11111,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1523,"                    tau = s;
",4,0,0,0,0,0,0,0,0,5,8,9,0.11111,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,191,"        throws InvalidMatrixException {
",2,0,0,0,1,0,0,0,0,2,31,2,0.06667,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,193,"        this.main      = main.clone();
",2,0,0,1,2,0,4,0,0,7,30,4,0.06667,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,194,"        this.secondary = secondary.clone();
",2,0,0,1,2,0,4,0,0,7,35,4,0.06667,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,195,"        transformer    = null;
",2,0,0,0,0,0,0,0,0,3,22,4,0.06667,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,198,"        squaredSecondary = new double[secondary.length];
",6,0,0,1,2,0,0,0,0,7,48,4,0.06667,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,199,"        for (int i = 0; i < squaredSecondary.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,51,4,0.06667,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,200,"            final double s = secondary[i];
",2,0,1,1,2,1,0,0,0,7,30,6,0.06667,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,201,"            squaredSecondary[i] = s * s;
",4,1,1,1,2,0,0,0,0,10,28,6,0.06667,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,204,"        this.splitTolerance = splitTolerance;
",4,0,0,0,0,0,0,0,0,5,37,4,0.06667,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,205,"        decompose();
",0,0,0,1,2,0,2,0,0,2,12,5,0.06667,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,643,"                final double[] range       = eigenvaluesRange(begin, n);
",2,0,0,2,4,1,6,0,0,9,56,7,0.06667,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,644,"                final double oneFourth     = 0.25 * (3 * range[0] + range[1]);
",2,3,1,3,6,1,0,0,0,10,62,7,0.06667,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,308,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.50000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,169,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.50000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,170,"                        matrix[row][getSlackVariableOffset() + slackVar++] = 1;  // slack
",2,1,1,3,6,0,2,0,0,11,65,8,0.12500,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,152,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.12500,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,191,"            doIteration(tableau);
",0,0,0,1,2,0,4,0,0,4,21,7,0.12500,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,338,"        double[] out = new double[data.length];
",6,0,0,2,4,0,0,0,0,6,39,5,0.10000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,339,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.10000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,340,"            out[i] = data[i] * d;
",2,1,1,2,4,0,0,0,0,12,21,6,0.10000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,342,"        return new ArrayRealVector(out);
",2,0,0,1,2,1,0,2,0,4,32,5,0.10000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,297,"                return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.10000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,884,"        checkVectorDimensions(v.length);
",4,0,0,1,2,0,2,0,0,6,32,5,0.09091,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,885,"        double dot = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.09091,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,886,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.09091,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,887,"            dot += data[i] * v[i];
",2,1,1,2,4,0,0,0,0,12,22,6,0.09091,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,889,"        return dot;
",2,0,0,0,0,1,0,0,0,2,11,4,0.09091,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1287,"        if (data.length != n) {
",6,1,0,1,3,0,0,0,0,7,23,4,0.09091,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1292,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.09091,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,282,"        return getBasicRow(col, false);
",0,0,0,1,2,1,4,0,0,5,31,5,0.09091,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,340,"      double[] coefficients = new double[getOriginalNumDecisionVariables()];
",2,0,0,3,6,0,2,0,0,4,70,5,0.09091,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,341,"      Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset());
",2,0,0,2,4,0,4,2,0,8,90,4,0.09091,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,342,"      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
",4,1,0,2,4,0,6,0,0,13,102,5,0.09091,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,343,"      Set<Integer> basicRows = new HashSet<Integer>();
",2,0,0,1,2,0,0,8,0,10,48,4,0.09091,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,344,"      for (int i = 0; i < coefficients.length; i++) {
",10,1,0,1,3,0,0,0,0,12,47,4,0.09091,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,345,"          Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i);
",4,1,0,2,4,0,4,2,0,11,74,6,0.09091,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,346,"          if (basicRows.contains(basicRow)) {
",0,0,0,2,5,0,6,0,0,6,35,7,0.09091,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,351,"              basicRows.add(basicRow);
",0,0,0,1,2,0,6,0,0,6,24,9,0.09091,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,349,"              coefficients[i] = 0;
",0,0,1,1,2,0,0,0,0,5,20,8,0.33333,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,151,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.14286,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,190,"            doIteration(tableau);
",0,0,0,1,2,0,4,0,0,4,21,7,0.14286,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,179,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,297,"                return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.11111,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,884,"        checkVectorDimensions(v.length);
",4,0,0,1,2,0,2,0,0,6,32,5,0.10000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,885,"        double dot = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.10000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,886,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.10000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,887,"            dot += data[i] * v[i];
",2,1,1,2,4,0,0,0,0,12,22,6,0.10000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,889,"        return dot;
",2,0,0,0,0,1,0,0,0,2,11,4,0.10000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,1287,"        if (data.length != n) {
",6,1,0,1,3,0,0,0,0,7,23,4,0.10000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,1292,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.10000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,129,"        if (tableau.getNumArtificialVariables() == 0) {
",0,1,0,2,5,0,4,0,0,5,47,4,0.10000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,132,"        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {
",6,2,0,3,7,0,8,0,0,17,83,4,0.10000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,133,"            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {
",0,1,0,3,7,0,12,0,0,13,66,6,0.10000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,134,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.10000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,137,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.10000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,154,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.10000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,171,"        while (!isPhase1Solved(tableau)) {
",0,0,0,2,5,0,4,0,0,5,34,4,0.10000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,172,"            doIteration(tableau);
",0,0,0,1,2,0,4,0,0,4,21,7,0.10000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,176,"        if (!MathUtils.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0, epsilon)) {
",0,0,0,4,9,0,14,0,0,15,81,4,0.10000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,192,"        return tableau.getSolution();
",0,0,0,1,2,1,4,0,0,4,29,5,0.10000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,310,"        int width = getWidth() - numArtificialVariables - 1;
",4,1,0,1,2,0,2,0,0,7,52,5,0.10000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,311,"        int height = getHeight() - 1;
",2,1,0,1,2,0,2,0,0,5,29,5,0.10000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,312,"        double[][] matrix = new double[height][width];
",2,0,1,4,8,0,0,0,0,6,46,5,0.10000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,313,"        for (int i = 0; i < height; i++) {
",8,1,0,1,3,0,0,0,0,10,34,4,0.10000,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,61,"                                final boolean copyArray) {
",2,0,0,0,2,1,0,0,0,3,26,3,1,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,62,"        this.point = copyArray ? point.clone() : point;
",6,0,0,1,2,0,4,0,0,11,47,4,1,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,63,"        this.value  = value;
",4,0,0,0,0,0,0,0,0,5,20,4,1,0,-1
defect4j,math,org/apache/commons/math/MathException,85,106,"      super(buildMessage(Locale.US, pattern, arguments));
",4,0,0,2,4,0,6,0,0,10,51,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/MathException,85,107,"      this.pattern   = pattern;
",4,0,0,0,0,0,0,0,0,5,25,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/MathException,85,108,"      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();
",4,1,0,3,6,0,4,2,0,12,73,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/MathException,85,109,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,-1
defect4j,math,org/apache/commons/math/MathException,85,60,"            ResourceBundle bundle =
",2,0,0,0,0,0,0,2,0,4,23,6,1.00000,0,-1
defect4j,math,org/apache/commons/math/MathException,85,67,"        } catch (MissingResourceException mre) {
",2,0,0,1,4,0,0,2,0,4,40,6,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,991,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,992,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,993,"        final StringBuffer res = new StringBuffer();
",2,0,0,1,2,1,0,4,0,7,44,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,994,"        String fullClassName = getClass().getName();
",2,0,0,2,4,0,4,2,0,8,44,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,995,"        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);
",2,1,0,2,4,0,8,2,0,14,84,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,996,"        res.append(shortClassName).append(""{"");
",0,0,0,2,5,0,8,0,0,9,39,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,998,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,999,"            if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1000,"                res.append("","");
",0,0,0,1,2,0,4,0,0,5,16,9,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1002,"            res.append(""{"");
",0,0,0,1,3,0,4,0,0,5,16,7,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1003,"            for (int j = 0; j < nCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,33,6,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1004,"                if (j > 0) {
",2,1,0,1,3,0,0,0,0,3,12,8,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1005,"                    res.append("","");
",0,0,0,1,2,0,4,0,0,5,16,11,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1007,"                res.append(getEntry(i, j));
",0,0,0,2,4,0,10,0,0,10,27,9,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1009,"            res.append(""}"");
",0,0,0,1,3,0,4,0,0,5,16,7,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1012,"        res.append(""}"");
",0,0,0,1,3,0,4,0,0,5,16,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1013,"        return res.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,86,627,"        if (left.getColumnDimension() != right.getRowDimension()) {
",0,1,0,3,7,0,8,0,0,9,59,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,86,633,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,291,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,1.00000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,168,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,1.00000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,151,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.16667,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,190,"            doIteration(tableau);
",0,0,0,1,2,0,4,0,0,4,21,7,0.16667,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,87,70,"        return point.clone();
",0,0,0,1,2,1,4,0,0,4,21,5,0.14286,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,884,"        checkVectorDimensions(v.length);
",4,0,0,1,2,0,2,0,0,6,32,5,0.11111,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,885,"        double dot = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.11111,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,886,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.11111,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,887,"            dot += data[i] * v[i];
",2,1,1,2,4,0,0,0,0,12,22,6,0.11111,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,889,"        return dot;
",2,0,0,0,0,1,0,0,0,2,11,4,0.11111,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,1287,"        if (data.length != n) {
",6,1,0,1,3,0,0,0,0,7,23,4,0.11111,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,1292,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,325,"        double[] coefficients = new double[getOriginalNumDecisionVariables()];
",2,0,0,3,6,0,2,0,0,4,70,5,0.11111,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,326,"        Integer basicRow =
",2,0,0,0,0,0,0,2,0,4,18,4,0.11111,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,328,"        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
",4,1,0,2,4,0,6,0,0,13,80,5,0.11111,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,329,"        Set<Integer> basicRows = new HashSet<Integer>();
",2,0,0,1,2,0,0,8,0,10,48,4,0.11111,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,330,"        for (int i = 0; i < coefficients.length; i++) {
",10,1,0,1,3,0,0,0,0,12,47,4,0.11111,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,331,"            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
",4,1,0,2,4,0,4,0,0,10,55,6,0.11111,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,332,"            if (basicRows.contains(basicRow)) {
",0,0,0,2,5,0,6,0,0,6,35,7,0.11111,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,337,"                basicRows.add(basicRow);
",0,0,0,1,2,0,6,0,0,6,24,9,0.11111,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,338,"                coefficients[i] =
",0,0,1,1,2,0,0,0,0,5,17,8,0.11111,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,343,"        return new RealPointValuePair(coefficients, f.getValue(coefficients));
",2,0,0,2,4,1,6,2,0,10,70,5,0.11111,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,458,"        return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;
",6,1,0,0,0,1,0,0,0,7,79,5,0.11111,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,87,48,"    public RealPointValuePair(final double[] point, final double value) {
",6,0,0,2,5,3,0,0,0,9,69,2,0.11111,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,87,49,"        this.point = point.clone();
",2,0,0,1,2,0,4,0,0,7,27,4,0.11111,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,87,50,"        this.value  = value;
",4,0,0,0,0,0,0,0,0,5,20,4,0.11111,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,339,"                         coefficients[i] = 0;
",0,0,1,1,2,0,0,0,0,5,20,12,0.50000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,172,"                        matrix[row][getSlackVariableOffset() + slackVar++] = -1; // excess
",2,1,1,3,6,0,2,0,0,12,66,9,0.20000,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,70,"        return point.clone();
",0,0,0,1,2,1,4,0,0,4,21,5,0.16667,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,279,"                    return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.14286,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,884,"        checkVectorDimensions(v.length);
",4,0,0,1,2,0,2,0,0,6,32,5,0.12500,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,885,"        double dot = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.12500,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,886,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.12500,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,887,"            dot += data[i] * v[i];
",2,1,1,2,4,0,0,0,0,12,22,6,0.12500,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,889,"        return dot;
",2,0,0,0,0,1,0,0,0,2,11,4,0.12500,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,1287,"        if (data.length != n) {
",6,1,0,1,3,0,0,0,0,7,23,4,0.12500,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,1292,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12500,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,154,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.12500,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,179,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12500,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,192,"        return tableau.getSolution();
",0,0,0,1,2,1,4,0,0,4,29,5,0.12500,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,48,"    public RealPointValuePair(final double[] point, final double value) {
",6,0,0,2,5,3,0,0,0,9,69,2,0.12500,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,49,"        this.point = point.clone();
",2,0,0,1,2,0,4,0,0,7,27,4,0.12500,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,50,"        this.value  = value;
",4,0,0,0,0,0,0,0,0,5,20,4,0.12500,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,51,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12500,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,325,"        double[] coefficients = new double[getOriginalNumDecisionVariables()];
",2,0,0,3,6,0,2,0,0,4,70,5,0.12500,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,326,"        Integer basicRow =
",2,0,0,0,0,0,0,2,0,4,18,4,0.12500,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,328,"        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
",4,1,0,2,4,0,6,0,0,13,80,5,0.12500,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,329,"        for (int i = 0; i < coefficients.length; i++) {
",10,1,0,1,3,0,0,0,0,12,47,4,0.12500,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,330,"            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
",4,1,0,2,4,0,4,0,0,10,55,6,0.12500,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,336,"            if (basicRow != null) {
",2,1,0,1,3,0,0,0,0,3,23,6,0.12500,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,337,"                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
",8,2,0,3,7,0,4,0,0,15,83,8,0.12500,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,89,110,"            addValue((Comparable<?>) v);            
",2,0,0,2,4,0,2,2,0,6,28,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,90,132,"        } catch (ClassCastException ex) {   
",2,0,0,1,4,0,0,2,0,4,33,6,1.00000,0,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,270,"        return (double)numerator / (double)denominator;
",4,1,0,2,4,1,0,0,0,5,47,4,0.03846,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,604,"                t /= 2; // cast out twos
",2,0,0,0,0,0,0,0,0,3,24,8,0.02439,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,434,"    private static final long[] factorials = new long[] 
",2,0,0,2,4,3,0,0,0,5,51,2,0.01818,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,561,"        int u = p;
",4,0,0,0,0,0,0,0,0,4,10,5,0.01818,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,562,"        int v = q;
",4,0,0,0,0,0,0,0,0,4,10,5,0.01818,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,563,"        if ((u == 0) || (v == 0)) {
",4,3,0,3,7,0,0,0,0,7,27,4,0.01818,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,182,"            return n;
",2,0,0,0,0,1,0,0,0,2,9,6,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,208,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,345,"        long result = Math.round(factorialDouble(n));
",2,0,0,2,4,0,8,0,0,10,45,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,346,"        if (result == Long.MAX_VALUE) {
",6,1,0,1,3,0,0,0,0,7,31,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,430,"            u /= 2;
",2,0,0,0,0,0,0,0,0,3,7,6,0.05000,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,431,"            v /= 2;
",2,0,0,0,0,0,0,0,0,3,7,6,0.05000,0,-1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,36,"    private static UnivariateRealSolverFactory factory = null;
",2,0,0,0,0,2,0,2,0,6,58,2,0.50000,0,-1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,128,"        return bracket( function, initial, lowerBound, upperBound,
",0,0,0,0,1,1,10,0,0,10,58,5,0.50000,0,-1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,171,"        if (function == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,174,"        if (maximumIterations <= 0)  {
",2,1,0,1,3,0,0,0,0,3,30,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,178,"        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {
",12,5,0,1,3,0,0,0,0,17,79,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,96,277,"        if (isNaN()) {
",0,0,0,2,5,0,2,0,0,2,14,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,141,"                throw new IllegalArgumentException
",0,0,0,0,0,0,0,2,0,2,34,8,0.33333,0,-1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverImpl,97,169,"        return absoluteAccuracy;
",2,0,0,0,0,1,0,0,0,2,24,4,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,986,"        if (v.length != this.getColumnDimension()) {
",4,1,0,2,5,0,2,0,0,7,44,4,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,989,"        final int nRows = this.getRowDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,990,"        final int nCols = this.getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,44,4,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,991,"        final BigDecimal[] out = new BigDecimal[v.length];
",6,0,0,2,4,1,0,4,0,11,50,4,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,992,"        for (int row = 0; row < nRows; row++) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,993,"            BigDecimal sum = ZERO;
",4,0,0,0,0,0,0,2,0,6,22,6,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,994,"            for (int i = 0; i < nCols; i++) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,995,"                sum = sum.add(data[row][i].multiply(v[i]));
",2,0,1,5,10,0,6,0,0,19,43,8,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,997,"            out[row] = sum;
",2,0,1,1,2,0,0,0,0,7,15,6,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,774,"        final int nRows = this.getRowDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,775,"        final int nCols = this.getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,44,4,0.33333,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,710,"        if (a==0 || b==0){
",4,3,0,1,3,0,0,0,0,7,18,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,711,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,713,"        int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));
",4,1,0,3,6,0,14,0,0,19,50,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,58,"        return (EstimatedParameter[]) parameters.toArray(new EstimatedParameter[parameters.size()]);
",0,0,0,5,10,1,8,4,0,12,92,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,162,"        updateJacobian();
",0,0,0,1,2,0,2,0,0,2,17,5,0.50000,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,165,"        final int rows = problem.getMeasurements().length;
",4,0,0,1,2,1,4,0,0,9,50,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,166,"        final int cols = problem.getAllParameters().length;
",4,0,0,1,2,1,4,0,0,9,51,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,167,"        final int max  = cols * rows;
",6,1,0,0,0,1,0,0,0,8,29,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,168,"        double[][] jTj = new double[cols][cols];
",2,0,1,4,8,0,0,0,0,6,40,5,0.50000,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,169,"        for (int i = 0; i < cols; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,170,"            for (int j = i; j < cols; ++j) {
",10,1,0,1,3,0,0,0,0,12,32,6,0.50000,0,-1
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,349,"            sign = 1;
",2,0,0,0,0,0,0,0,0,3,9,5,0.33333,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,367,"        for (int i = 0; i < in.length; i ++) {
",10,1,0,1,3,0,0,0,0,12,38,4,1,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,368,"            if (in[i] < 0) {
",0,1,1,2,5,0,0,0,0,5,16,6,1,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,372,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,1,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,72,"        if (x <= 0.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,1,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,75,"            ret = Gamma.regularizedGammaP(getAlpha(), x / getBeta());
",4,1,0,3,6,0,8,0,0,14,57,6,1,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,78,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,1,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,122,"        return alpha;
",2,0,0,0,0,1,0,0,0,2,13,4,1,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,142,"        return beta;
",2,0,0,0,0,1,0,0,0,2,12,4,1,0,-1
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,82,"        return getGamma().cumulativeProbability(x);
",0,0,0,2,4,1,6,0,0,6,43,5,1,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,120,"        return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);
",4,0,0,1,2,1,8,0,0,12,67,5,1,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,158,"        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {
",4,3,0,5,11,0,12,0,0,19,68,4,1,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,160,"        } else if (x == 0.0) {
",2,1,0,1,4,0,0,0,0,3,22,5,1,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,103,161,"            ret = 0.0;
",2,0,0,0,0,0,0,0,0,3,10,7,0.25000,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,109,"            return 0.5 * (1.0 + Erf.erf((x - mean) /
",4,4,0,1,4,1,4,0,0,12,40,4,0.14286,0,-1
defect4j,math,org/apache/commons/math/special/Erf,103,56,"        double ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);
",6,1,0,1,2,0,4,0,0,11,65,5,0.14286,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,200,"        return regularizedGammaQ(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);
",4,0,0,1,2,1,8,0,0,12,67,5,0.16667,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,243,"            ContinuedFraction cf = new ContinuedFraction() {
",2,0,0,1,3,0,0,4,0,6,48,8,0.04000,0,-1
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,290,"            pos.setIndex(initialIndex);
",0,0,0,1,2,0,6,0,0,6,27,6,0.50000,0,-1
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,291,"            pos.setErrorIndex(startIndex);
",0,0,0,1,2,0,6,0,0,6,30,6,0.50000,0,-1
