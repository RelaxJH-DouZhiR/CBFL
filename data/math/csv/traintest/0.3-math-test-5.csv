dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,predict
defect4j,math,org/apache/commons/math/util/MathUtils,63,417,"        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;
",4,3,0,3,6,1,12,0,0,19,54,4,0.00000,1,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,258,"            chiSquare += residual * residual / residualsWeights[i];
",6,2,1,1,2,0,0,0,0,13,55,6,0.00000,1,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,243,"        throw new MaxIterationsExceededException(maximalIterationCount);
",2,0,0,1,2,0,0,2,0,4,64,5,0.00000,1,-1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,97,"        return optimizer.getResult();
",0,0,0,1,2,1,4,0,0,4,29,5,0.00000,1,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,171,"                    out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));
",0,2,1,4,8,0,6,0,0,15,61,10,0.80000,1,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,72,"        return solve(min, max);
",0,0,0,1,2,1,6,0,0,6,23,5,0.00000,1,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,71,300,"                  loop     = false;
",2,0,0,0,0,0,0,0,0,4,17,14,1.00000,1,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,127,"            setResult(yMax, 0);
",0,0,0,1,2,0,4,0,0,4,19,7,0.00000,1,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2994,"                    return Math.PI;
",4,0,0,0,0,1,0,0,0,4,15,11,0.50000,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,583,"        return this.add(I).divide(I.subtract(this)).log()
",0,0,0,4,8,1,12,0,0,12,49,6,0.33333,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,256,"        if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) {
",0,3,0,3,7,0,8,0,0,11,64,4,0.30769,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,251,"        MathUtils.checkNotNull(divisor);
",0,0,0,1,2,0,6,0,0,6,32,5,0.26667,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,252,"        if (isNaN || divisor.isNaN) {
",6,1,0,1,3,0,0,0,0,7,29,4,0.26667,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,579,"        if (isNaN) {
",2,0,0,1,3,0,0,0,0,2,12,4,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,39,"public class ExceptionContext implements Serializable {
",2,0,0,0,1,1,0,2,0,5,55,1,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,45,"    private List<Localizable> msgPatterns = new ArrayList<Localizable>();
",2,0,0,1,2,1,0,8,0,11,69,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,51,"    private List<Object[]> msgArguments = new ArrayList<Object[]>();
",2,0,0,3,6,1,0,8,0,11,64,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,55,"    private Map<String, Object> context = new HashMap<String, Object>();
",2,0,0,1,2,1,0,12,0,15,68,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,66,"        msgPatterns.add(pattern);
",0,0,0,1,2,0,6,0,0,6,25,5,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,67,"        msgArguments.add(ArgUtils.flatten(arguments));
",0,0,0,2,4,0,10,0,0,10,46,5,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,68,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,355,"    private LocalizedFormats(final String sourceFormat) {
",4,0,0,1,3,2,0,2,0,8,53,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,356,"        this.sourceFormat = sourceFormat;
",4,0,0,0,0,0,0,0,0,5,33,4,0.25000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,67,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,368,"        checkVectorDimensions(v.getDimension());
",0,0,0,2,4,0,6,0,0,6,40,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,369,"        OpenMapRealVector res = new OpenMapRealVector(this);
",2,0,0,1,2,0,0,4,0,6,52,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,370,"        Iterator iter = res.entries.iterator();
",6,0,0,1,2,0,2,2,0,10,39,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,371,"        while (iter.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,24,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,372,"            iter.advance();
",0,0,0,1,2,0,4,0,0,4,15,7,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,373,"            res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));
",0,1,0,5,10,0,20,0,0,21,64,7,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,186,"        if (states[index] == FREE) {
",2,1,1,2,5,0,0,0,0,7,28,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,187,"            return missingEntries;
",2,0,0,0,0,1,0,0,0,2,22,6,0.50000,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,239,"                    return x1;
",2,0,0,0,0,1,0,0,0,2,10,9,0.20000,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,187,"                    if (x == x1) {
",4,1,0,1,3,0,0,0,0,5,14,9,0.16667,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,50,43,"        super(DEFAULT_ABSOLUTE_ACCURACY, Method.REGULA_FALSI);
",6,0,0,1,2,0,0,0,0,6,54,4,0.12500,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,50,44,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12500,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,124,"        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);
",4,0,0,1,2,1,12,0,0,16,73,5,0.08333,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,237,"                switch (allowed) {
",2,0,0,1,3,0,0,0,0,2,18,8,0.05000,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,50,195,"        return solve(maxEval, f, min, max, min + 0.5 * (max - min));
",6,3,0,2,4,1,10,0,0,19,60,5,0.04762,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,205,"                switch (allowed) {
",2,0,0,1,3,0,0,0,0,2,18,8,0.04762,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,178,"                switch (method) {
",2,0,0,1,3,0,0,0,0,2,17,8,0.04762,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,51,43,"        super(DEFAULT_ABSOLUTE_ACCURACY, Method.REGULA_FALSI);
",6,0,0,1,2,0,0,0,0,6,54,4,0.12500,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,51,44,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12500,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,124,"        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);
",4,0,0,1,2,1,12,0,0,16,73,5,0.08333,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,199,"                switch (allowed) {
",2,0,0,1,3,0,0,0,0,2,18,8,0.04762,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,178,"                switch (method) {
",2,0,0,1,3,0,0,0,0,2,17,8,0.04762,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,171,"            if (f1 * fx < 0) {
",4,2,0,1,3,0,0,0,0,6,18,6,0.04762,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,174,"                x0 = x1;
",4,0,0,0,0,0,0,0,0,5,8,8,0.04762,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,175,"                f0 = f1;
",4,0,0,0,0,0,0,0,0,5,8,8,0.04762,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,313,"  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {
",10,0,0,1,3,1,0,8,0,19,69,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,316,"  double u1u1 = u1.getNormSq();
",2,0,0,1,2,0,4,0,0,6,29,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,317,"  double u2u2 = u2.getNormSq();
",2,0,0,1,2,0,4,0,0,6,29,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,318,"  double v1v1 = v1.getNormSq();
",2,0,0,1,2,0,4,0,0,6,29,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,319,"  double v2v2 = v2.getNormSq();
",2,0,0,1,2,0,4,0,0,6,29,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,320,"  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {
",8,5,0,5,11,0,0,0,0,13,63,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,325,"  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);
",8,1,0,2,4,0,4,2,0,16,50,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,328,"  double u1u2   = u1.dotProduct(u2);
",2,0,0,1,2,0,6,0,0,8,34,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,152,"        MathUtils.checkNotNull(rhs);
",0,0,0,1,2,0,6,0,0,6,28,5,0.05263,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2119,"            buffer[--q] = '-';
",2,0,1,1,2,0,0,0,0,7,18,6,0.08333,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1041,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.07143,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1234,"            a.exp = b.exp;
",8,0,0,0,0,0,0,0,0,9,14,6,0.05556,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2328,"            exponent--;
",2,0,0,0,0,0,0,0,0,3,11,6,0.05556,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,576,"        return new Dfp(getField(), x);
",2,0,0,2,4,1,2,2,0,6,30,5,0.05263,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,801,"        return nans == INFINITE;
",4,1,0,0,0,1,0,0,0,5,24,4,0.05263,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1105,"        return exp * 4 - 4;
",2,2,0,0,0,1,0,0,0,4,19,4,0.05263,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2305,"        if (isInfinite()) {
",0,0,0,2,5,0,2,0,0,2,19,5,0.05263,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,473,"      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
",48,9,0,1,2,1,0,2,0,59,101,5,0.33333,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,181,"    return x;
",2,0,0,0,0,1,0,0,0,2,9,4,0.02564,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,189,"    return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.02564,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,197,"    return z;
",2,0,0,0,0,1,0,0,0,2,9,4,0.02564,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,93,"  public Vector3D(double x, double y, double z) {
",8,0,0,1,3,1,0,0,0,9,47,2,0.01266,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,94,"    this.x = x;
",4,0,0,0,0,0,0,0,0,5,11,4,0.01266,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,85,"        Iterator() {
",2,0,0,1,3,0,0,0,0,2,12,3,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,75,"        private final int[] counter = new int[dimension];
",2,0,1,2,4,2,0,0,0,6,49,3,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,79,"        private int count = -1;
",2,0,0,0,0,1,0,0,0,4,23,3,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,86,"            counter[last] = -1;
",0,0,1,1,2,0,0,0,0,6,19,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,87,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,147,"            return counter[dim];
",0,0,1,1,2,1,0,0,0,4,20,6,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,196,"        return new Iterator();
",0,0,0,1,2,1,0,2,0,2,22,6,1.00000,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,69,"        this(random, EmptyClusterStrategy.LARGEST_VARIANCE);
",6,0,0,1,2,0,0,0,0,6,52,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,70,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,134,"        return clusters;
",2,0,0,0,0,1,0,0,0,2,16,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,176,"            for (int i = 0; i < pointSet.size(); i++) {
",6,1,0,2,5,0,4,0,0,12,43,6,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,177,"                final T p = pointSet.get(i);
",2,0,0,1,2,1,6,2,0,11,28,8,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,178,"                final Cluster<T> nearest = getNearestCluster(resultSet, p);
",2,0,0,1,2,1,6,4,0,13,59,8,0.50000,0,-1
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,182,"            } catch (OutOfRangeException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.50000,0,-1
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,183,"                fwhmApprox = points[points.length - 1].getX() - points[0].getX();
",6,2,1,4,8,0,4,0,0,17,65,8,0.50000,0,-1
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,271,"            double minY = Double.POSITIVE_INFINITY;
",6,0,0,0,0,0,0,0,0,6,39,6,0.50000,0,-1
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,272,"            double maxY = Double.NEGATIVE_INFINITY;
",6,0,0,0,0,0,0,0,0,6,39,6,0.50000,0,-1
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,273,"            for (final WeightedObservedPoint point : points) {
",4,0,0,1,3,1,0,2,0,7,50,5,0.50000,0,-1
