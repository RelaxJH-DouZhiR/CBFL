dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,predict
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,121,"        return fit(new Gaussian.Parametric(), guess);
",4,0,0,2,4,1,4,0,0,8,45,5,0.20000,1,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3482,"        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);
",16,2,0,3,6,1,4,0,0,22,59,5,0.00000,1,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,94,"            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN, p);
",4,0,0,1,2,0,6,0,0,10,105,7,0.00000,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,162,"                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));
",0,0,1,4,8,0,24,0,0,29,100,8,1.00000,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,63,417,"        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;
",4,3,0,3,6,1,12,0,0,19,54,4,0.00000,1,1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,258,"            chiSquare += residual * residual / residualsWeights[i];
",6,2,1,1,2,0,0,0,0,13,55,6,0.00000,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,243,"        throw new MaxIterationsExceededException(maximalIterationCount);
",2,0,0,1,2,0,0,2,0,4,64,5,0.00000,1,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,97,"        return optimizer.getResult();
",0,0,0,1,2,1,4,0,0,4,29,5,0.00000,1,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,171,"                    out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));
",0,2,1,4,8,0,6,0,0,15,61,10,0.80000,1,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,112,"                final double hi = upper[i];
",2,0,1,1,2,1,0,0,0,7,27,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,113,"                if (v > hi) {
",4,1,0,1,3,0,0,0,0,5,13,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,95,"            if (lower.length != dim) {
",6,1,0,1,3,0,0,0,0,7,26,6,0.25000,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,44,"    public RealPointValuePair(final double[] point, final double value) {
",6,0,0,2,5,3,0,0,0,9,69,2,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,45,"        this.point = (point == null) ? null : point.clone();
",4,1,0,2,4,0,4,0,0,10,52,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,46,"        this.value = value;
",4,0,0,0,0,0,0,0,0,5,19,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1640,"                    stepa = interpolationPoints.getEntry(nfx, nfxm);
",2,0,0,1,2,0,8,0,0,11,48,11,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1641,"                    stepb = -initialTrustRegionRadius;
",4,0,0,0,0,0,0,0,0,6,34,11,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1642,"                    if (lowerDifference.getEntry(nfxm) == ZERO) {
",2,1,0,2,5,0,6,0,0,9,45,11,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1646,"                    if (upperDifference.getEntry(nfxm) == ZERO) {
",2,1,0,2,5,0,6,0,0,9,45,11,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1650,"                    interpolationPoints.setEntry(nfm, nfxm, stepb);
",0,0,0,1,2,0,10,0,0,10,47,12,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1713,"                    final int ih = nfx * (nfx + 1) / 2 - 1;
",6,4,0,1,2,1,0,0,0,11,39,11,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1714,"                    final double tmp = (f - fbeg) / stepb;
",8,2,0,1,2,1,0,0,0,11,38,11,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1715,"                    final double diff = stepb - stepa;
",6,1,0,0,0,1,0,0,0,8,34,11,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1716,"                    modelSecondDerivativesValues.setEntry(ih, TWO * (tmp - gradientAtTrustRegionCenter.getEntry(nfxm)) / diff);
",6,3,0,3,6,0,12,0,0,21,107,12,0.08333,0,1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1717,"                    gradientAtTrustRegionCenter.setEntry(nfxm, (gradientAtTrustRegionCenter.getEntry(nfxm) * stepb - tmp * stepa) / diff);
",8,4,0,3,6,0,12,0,0,24,118,12,0.08333,0,1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1718,"                    if (stepa * stepb < ZERO) {
",6,2,0,1,3,0,0,0,0,8,27,11,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1719,"                        if (f < fAtInterpolationPoints.getEntry(nfm - n)) {
",6,2,0,2,5,0,4,0,0,12,51,13,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1720,"                            fAtInterpolationPoints.setEntry(nfm, fAtInterpolationPoints.getEntry(nfm - n));
",4,1,0,2,4,0,10,0,0,15,79,16,0.08333,0,1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1721,"                            fAtInterpolationPoints.setEntry(nfm - n, f);
",4,1,0,1,2,0,6,0,0,11,44,16,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1722,"                            if (trustRegionCenterInterpolationPointIndex == nfm) {
",4,1,0,1,3,0,0,0,0,5,54,15,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1725,"                            interpolationPoints.setEntry(nfm - n, nfxm, stepb);
",4,1,0,1,2,0,8,0,0,13,51,16,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1726,"                            interpolationPoints.setEntry(nfm, nfxm, stepa);
",0,0,0,1,2,0,10,0,0,10,47,16,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1729,"                    bMatrix.setEntry(0, nfxm, -(stepa + stepb) / (stepa * stepb));
",8,3,0,3,6,0,6,0,0,18,62,12,0.08333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,244,"    super(interpolator);
",2,0,0,1,2,0,0,0,0,2,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,246,"    if (interpolator.currentState == null) {
",4,1,0,1,3,0,0,0,0,5,40,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,248,"      yDotKLast = null;
",2,0,0,0,0,0,0,0,0,3,17,6,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,249,"      v         = null;
",2,0,0,0,0,0,0,0,0,3,17,6,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,250,"      vectorsInitialized = false;
",2,0,0,0,0,0,0,0,0,4,27,6,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,273,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,278,"    return new DormandPrince853StepInterpolator(this);
",0,0,0,1,2,1,0,2,0,2,50,6,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,288,"    super.reinitialize(integrator, y, yDotK, forward, primaryMapper, secondaryMappers);
",14,0,0,1,2,0,0,0,0,14,83,5,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,290,"    final int dimension = currentState.length;
",6,0,0,0,0,1,0,0,0,7,42,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,292,"    yDotKLast = new double[3][];
",2,0,0,2,4,0,0,0,0,3,28,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,293,"    for (int k = 0; k < yDotKLast.length; ++k) {
",10,1,0,1,3,0,0,0,0,12,44,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,294,"      yDotKLast[k] = new double[dimension];
",0,0,1,2,4,0,0,0,0,7,37,6,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,297,"    v = new double[7][];
",2,0,0,2,4,0,0,0,0,3,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,298,"    for (int k = 0; k < v.length; ++k) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,299,"      v[k]  = new double[dimension];
",0,0,1,2,4,0,0,0,0,7,30,6,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,302,"    vectorsInitialized = false;
",2,0,0,0,0,0,0,0,0,4,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,304,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03571,0,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,37,"        super(max);
",2,0,0,1,2,0,0,0,0,2,11,4,1.00000,0,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,38,"        getContext().addMessage(LocalizedFormats.EVALUATIONS);
",4,0,0,2,4,0,4,0,0,8,54,5,1.00000,0,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,39,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,42,"        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);
",6,0,0,1,2,0,0,0,0,6,47,4,1.00000,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,43,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,53,"                                     Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,1.00000,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,54,"        getContext().addMessage(specific, max, args);
",0,0,0,2,4,0,10,0,0,10,45,5,1.00000,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,55,"        this.max = max;
",4,0,0,0,0,0,0,0,0,5,15,4,1.00000,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,56,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,62,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,1.00000,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,45,"                                     Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,1.00000,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,46,"        context = new ExceptionContext(this);
",2,0,0,1,2,0,0,2,0,5,37,4,1.00000,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,47,"        context.addMessage(pattern, args);
",0,0,0,1,2,0,8,0,0,8,34,5,1.00000,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,370,"        return evaluate(values, weights, 0, values.length);
",4,0,0,1,2,1,6,0,0,10,51,5,1.00000,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,222,"        return test(values, weights, begin, length, false);
",0,0,0,1,2,1,10,0,0,11,51,5,0.50000,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,258,"        if (weights == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.50000,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,262,"        if (weights.length != values.length) {
",8,1,0,1,3,0,0,0,0,9,38,4,0.50000,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,266,"        boolean containsPositiveWeight = false;
",2,0,0,0,0,0,0,0,0,3,39,5,0.50000,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,267,"        for (int i = begin; i < begin + length; i++) {
",12,2,0,1,3,0,0,0,0,15,46,4,0.50000,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,268,"            if (Double.isNaN(weights[i])) {
",0,0,1,3,7,0,4,0,0,8,31,7,0.50000,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,271,"            if (Double.isInfinite(weights[i])) {
",0,0,1,3,7,0,4,0,0,8,36,7,0.50000,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,274,"            if (weights[i] < 0) {
",0,1,1,2,5,0,0,0,0,5,21,6,0.50000,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,277,"            if (!containsPositiveWeight && weights[i] > 0.0) {
",2,2,1,2,5,0,0,0,0,9,50,6,0.50000,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,278,"                containsPositiveWeight = true;
",2,0,0,0,0,0,0,0,0,4,30,8,0.50000,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,282,"        if (!containsPositiveWeight) {
",2,0,0,1,3,0,0,0,0,3,30,4,0.50000,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,286,"        return test(values, begin, length, allowEmpty);
",0,0,0,1,2,1,10,0,0,10,47,5,0.50000,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,68,"        return (point == null) ? null : point.clone();
",2,1,0,2,4,1,4,0,0,7,46,5,0.07143,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,181,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,347,"            columnsToDrop.add(col);
",0,0,0,1,2,0,6,0,0,6,23,9,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,73,"        throws DimensionMismatchException, NoDataException, NullArgumentException {
",6,0,0,0,1,0,0,0,0,6,75,2,0.06250,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,74,"        copyIn(d);
",0,0,0,1,2,0,4,0,0,4,10,5,0.06250,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,75,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06250,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,261,"        if (data == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.06250,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,262,"            if (row > 0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.06250,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,265,"            if (column > 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.06250,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,268,"            MathUtils.checkNotNull(subMatrix);
",0,0,0,1,2,0,6,0,0,6,34,7,0.06250,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,269,"            final int nRows = subMatrix.length;
",6,0,0,0,0,1,0,0,0,7,35,6,0.06250,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,270,"            if (nRows == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.06250,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,274,"            final int nCols = subMatrix[0].length;
",4,0,1,1,2,1,0,0,0,7,38,6,0.06250,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,275,"            if (nCols == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.06250,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,278,"            data = new double[subMatrix.length][nCols];
",6,0,1,2,4,0,0,0,0,9,43,6,0.06250,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,279,"            for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.06250,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,280,"                if (subMatrix[i].length != nCols) {
",4,1,1,2,5,0,0,0,0,9,35,8,0.06250,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,283,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);
",4,1,1,3,6,0,8,0,0,19,64,9,0.06250,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,285,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.06250,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,289,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06250,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,525,"        setSubMatrix(in, 0, 0);
",0,0,0,1,2,0,4,0,0,4,23,5,0.06250,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,526,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06250,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,332,"        List<Integer> columnsToDrop = new ArrayList<Integer>();
",2,0,0,1,2,0,0,8,0,10,55,4,0.06250,0,1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,333,"        columnsToDrop.add(0);
",0,0,0,1,2,0,4,0,0,4,21,5,0.06250,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,336,"        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
",6,1,0,3,7,0,4,0,0,12,82,4,0.06250,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,337,"            final double entry = tableau.getEntry(0, i);
",2,0,0,1,2,1,6,0,0,9,44,6,0.06250,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,338,"            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
",0,1,0,2,5,0,8,0,0,9,50,6,0.06250,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,344,"        for (int i = 0; i < getNumArtificialVariables(); i++) {
",6,1,0,2,5,0,2,0,0,10,55,4,0.06250,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,345,"          int col = i + getArtificialVariableOffset();
",4,1,0,1,2,0,2,0,0,7,44,7,0.06250,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,346,"          if (getBasicRow(col) == null) {
",0,1,0,2,5,0,4,0,0,6,31,6,0.06250,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,351,"        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
",2,2,0,7,14,0,8,0,0,12,83,5,0.06250,0,1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,352,"        for (int i = 1; i < getHeight(); i++) {
",6,1,0,2,5,0,2,0,0,10,39,4,0.06250,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,353,"          int col = 0;
",2,0,0,0,0,0,0,0,0,2,12,7,0.06250,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,354,"          for (int j = 0; j < getWidth(); j++) {
",6,1,0,2,5,0,2,0,0,10,38,6,0.06250,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,355,"            if (!columnsToDrop.contains(j)) {
",0,0,0,2,5,0,6,0,0,7,33,8,0.06250,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,356,"              matrix[i - 1][col++] = tableau.getEntry(i, j);
",4,1,1,3,6,0,8,0,0,17,46,10,0.06250,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,361,"        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
",6,2,0,2,5,0,4,0,0,13,53,4,0.06250,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,362,"          columnLabels.remove((int) columnsToDrop.get(i));
",0,0,0,3,6,0,10,0,0,10,48,7,0.06250,0,1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,365,"        this.tableau = new Array2DRowRealMatrix(matrix);
",4,0,0,1,2,0,0,2,0,7,48,4,0.06250,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,366,"        this.numArtificialVariables = 0;
",2,0,0,0,0,0,0,0,0,3,32,4,0.06250,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,647,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,643,"        if (n > 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,1,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1160,"                double xa = x - 1.0;
",4,1,0,0,0,0,0,0,0,5,20,9,1,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1161,"                double xb = xa - x + 1.0;
",6,2,0,0,0,0,0,0,0,8,25,9,1,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1162,"                double tmp = xa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,31,9,1,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1163,"                double aa = xa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,10,27,9,1,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1164,"                double ab = xa - aa;
",6,1,0,0,0,0,0,0,0,7,20,9,1,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1165,"                xa = aa;
",4,0,0,0,0,0,0,0,0,5,8,8,1,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1166,"                xb = ab;
",4,0,0,0,0,0,0,0,0,5,8,8,1,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1168,"                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];
",6,1,1,2,4,0,0,0,0,9,53,9,1,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1169,"                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];
",6,1,1,2,4,0,0,0,0,9,53,9,1,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1171,"                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {
",10,2,0,1,3,0,0,0,0,13,53,8,1,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1173,"                    aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,10,1,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1174,"                    ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,10,1,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1176,"                    tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,10,1,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1177,"                    ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,10,1,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,209,"    if ((initialStepSize < minStep) || (initialStepSize > maxStep)) {
",8,3,0,3,7,0,0,0,0,11,65,4,0.50000,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,212,"      initialStep = initialStepSize;
",4,0,0,0,0,0,0,0,0,5,30,6,0.50000,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,214,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,252,"      return forward ? initialStep : -initialStep;
",6,0,0,0,0,1,0,0,0,7,44,7,0.50000,0,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3373,"        y += 1.0;
",2,0,0,0,0,0,0,0,0,3,9,4,0.16667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3375,"        if (y == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.16667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3379,"        return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.16667,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,334,"            handler.resetState(t, y);
",0,0,0,1,2,0,8,0,0,8,25,7,0.11111,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,172,"            nbPoints        = 2;
",2,0,0,0,0,0,0,0,0,3,20,6,0.09091,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,173,"            signChangeIndex = 1;
",2,0,0,0,0,0,0,0,0,3,20,6,0.09091,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,340,"                    System.arraycopy(eventY, 0, y, 0, y.length);
",4,0,0,1,2,0,8,0,0,12,44,9,0.08333,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,341,"                    computeDerivatives(eventT, y, yDot);
",0,0,0,1,2,0,8,0,0,8,36,9,0.08333,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,342,"                    resetOccurred = true;
",2,0,0,0,0,0,0,0,0,4,21,8,0.08333,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,329,"        if (!(pendingEvent && (FastMath.abs(pendingEventTime - t) <= convergence))) {
",8,3,0,4,9,0,4,0,0,16,77,4,0.07143,0,1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,333,"        if (nextAction == EventHandler.Action.RESET_STATE) {
",8,1,0,1,3,0,0,0,0,9,52,4,0.07143,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,336,"        pendingEvent      = false;
",2,0,0,0,0,0,0,0,0,4,26,4,0.07143,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,337,"        pendingEventTime  = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,31,4,0.07143,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,339,"        return (nextAction == EventHandler.Action.RESET_STATE) ||
",8,2,0,1,2,1,0,0,0,10,57,4,0.07143,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,337,"                if (currentEvent.reset(eventT, eventY)) {
",0,0,0,2,5,0,8,0,0,8,41,7,0.07143,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,49,"        super(rowDimension, columnDimension);
",4,0,0,1,2,0,0,0,0,4,37,4,0.03333,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,51,"        this.columns = columnDimension;
",4,0,0,0,0,0,0,0,0,5,31,4,0.03333,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,52,"        this.entries = new OpenIntToDoubleHashMap(0.0);
",2,0,0,1,2,0,0,2,0,5,47,4,0.03333,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,53,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03333,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,57,"        if (columnDimension < 1) {
",2,1,0,1,3,0,0,0,0,3,26,4,0.00388,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,60,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00388,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,53,"    protected AbstractRealMatrix(final int rowDimension, final int columnDimension) {
",6,0,0,1,3,3,0,0,0,9,81,2,0.00386,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,54,"        if (rowDimension < 1) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00386,0,0
defect4j,math,org/apache/commons/math/linear/RealLinearOperator,45,52,"public abstract class RealLinearOperator {
",2,0,0,0,1,2,0,0,0,4,42,1,0.00315,0,0
defect4j,math,org/apache/commons/math/complex/Complex,46,260,"            return isZero ? NaN : INF;
",6,0,0,0,0,1,0,0,0,6,26,7,1,0,0
defect4j,math,org/apache/commons/math/complex/Complex,46,1183,"        return ""("" + real + "", "" + imaginary + "")"";
",4,1,0,1,2,1,0,0,0,8,43,4,1.00000,0,0
defect4j,math,org/apache/commons/math/complex/Complex,46,587,"        return this.add(I).divide(I.subtract(this)).log()
",0,0,0,4,8,1,12,0,0,12,49,6,0.33333,0,1
defect4j,math,org/apache/commons/math/complex/Complex,46,258,"        if (divisor.isZero) {
",4,0,0,1,3,0,0,0,0,4,21,5,0.30769,0,0
defect4j,math,org/apache/commons/math/complex/Complex,46,253,"        MathUtils.checkNotNull(divisor);
",0,0,0,1,2,0,6,0,0,6,32,5,0.26667,0,0
defect4j,math,org/apache/commons/math/complex/Complex,46,254,"        if (isNaN || divisor.isNaN) {
",6,1,0,1,3,0,0,0,0,7,29,4,0.26667,0,0
defect4j,math,org/apache/commons/math/complex/Complex,46,583,"        if (isNaN) {
",2,0,0,1,3,0,0,0,0,2,12,4,0.25000,0,0
defect4j,math,org/apache/commons/math/util/FastMath,46,1284,"            if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.25000,0,0
defect4j,math,org/apache/commons/math/util/FastMath,46,1288,"            return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.25000,0,0
defect4j,math,org/apache/commons/math/util/FastMath,46,3004,"            if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,6,0.20000,0,0
defect4j,math,org/apache/commons/math/util/FastMath,46,3005,"                return Math.PI/4.0;
",4,1,0,0,0,1,0,0,0,5,19,8,0.20000,0,0
defect4j,math,org/apache/commons/math/complex/Complex,46,329,"                return isNaN;
",2,0,0,0,0,1,0,0,0,2,13,8,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/Complex,46,430,"            return INF;
",2,0,0,0,0,1,0,0,0,2,11,6,0.14286,0,0
defect4j,math,org/apache/commons/math/complex/Complex,46,276,"            double q = d / c;
",6,1,0,0,0,0,0,0,0,7,17,7,0.11111,0,0
defect4j,math,org/apache/commons/math/complex/Complex,46,277,"            double denominator = d * q + c;
",8,2,0,0,0,0,0,0,0,10,31,7,0.11111,0,0
defect4j,math,org/apache/commons/math/complex/Complex,46,278,"            return createComplex((imaginary * q + real) / denominator,
",8,3,0,1,3,1,2,0,0,13,58,7,0.11111,0,0
defect4j,math,org/apache/commons/math/complex/Complex,46,122,"            return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.09091,0,0
defect4j,math,org/apache/commons/math/complex/Complex,46,263,"        if (divisor.isInfinite() && !isInfinite()) {
",0,1,0,3,7,0,6,0,0,8,44,4,0.08333,0,0
defect4j,math,org/apache/commons/math/complex/Complex,47,257,"            return NaN;
",2,0,0,0,0,1,0,0,0,2,11,6,1,0,0
defect4j,math,org/apache/commons/math/util/FastMath,47,2991,"                if (y < 0.0 || invy < 0.0) {
",4,3,0,1,3,0,0,0,0,7,28,8,0.50000,0,0
defect4j,math,org/apache/commons/math/util/FastMath,47,2994,"                    return Math.PI;
",4,0,0,0,0,1,0,0,0,4,15,11,0.50000,0,0
defect4j,math,org/apache/commons/math/complex/Complex,47,583,"        return this.add(I).divide(I.subtract(this)).log()
",0,0,0,4,8,1,12,0,0,12,49,6,0.33333,0,1
defect4j,math,org/apache/commons/math/complex/Complex,47,256,"        if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) {
",0,3,0,3,7,0,8,0,0,11,64,4,0.30769,0,0
defect4j,math,org/apache/commons/math/complex/Complex,47,251,"        MathUtils.checkNotNull(divisor);
",0,0,0,1,2,0,6,0,0,6,32,5,0.26667,0,0
defect4j,math,org/apache/commons/math/complex/Complex,47,252,"        if (isNaN || divisor.isNaN) {
",6,1,0,1,3,0,0,0,0,7,29,4,0.26667,0,0
defect4j,math,org/apache/commons/math/complex/Complex,47,579,"        if (isNaN) {
",2,0,0,1,3,0,0,0,0,2,12,4,0.25000,0,0
defect4j,math,org/apache/commons/math/complex/Complex,47,268,"            double q = c / d;
",6,1,0,0,0,0,0,0,0,7,17,7,0.20000,0,0
defect4j,math,org/apache/commons/math/complex/Complex,47,269,"            double denominator = c * q + d;
",8,2,0,0,0,0,0,0,0,10,31,7,0.20000,0,0
defect4j,math,org/apache/commons/math/complex/Complex,47,270,"            return createComplex((real * q + imaginary) / denominator,
",8,3,0,1,3,1,2,0,0,13,58,7,0.20000,0,0
defect4j,math,org/apache/commons/math/util/FastMath,47,1315,"            if (x < 1.01 && x > 0.99 && hiPrec == null) {
",6,5,0,1,3,0,0,0,0,11,45,6,0.14286,0,0
defect4j,math,org/apache/commons/math/complex/Complex,47,747,"            return NaN;
",2,0,0,0,0,1,0,0,0,2,11,6,0.14286,0,0
defect4j,math,org/apache/commons/math/util/FastMath,47,2990,"            if (x < 0.0 || invx < 0.0) {
",4,3,0,1,3,0,0,0,0,7,28,6,0.12500,0,0
defect4j,math,org/apache/commons/math/util/FastMath,47,2997,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.12500,0,0
defect4j,math,org/apache/commons/math/util/FastMath,47,2978,"            double result = x*y;
",6,1,0,0,0,0,0,0,0,7,20,7,0.11111,0,0
defect4j,math,org/apache/commons/math/util/FastMath,47,2979,"            double invx = 1.0/x;
",4,1,0,0,0,0,0,0,0,5,20,7,0.11111,0,0
defect4j,math,org/apache/commons/math/util/FastMath,47,2980,"            double invy = 1.0/y;
",4,1,0,0,0,0,0,0,0,5,20,7,0.11111,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,39,"public class ExceptionContext implements Serializable {
",2,0,0,0,1,1,0,2,0,5,55,1,0.25000,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,45,"    private List<Localizable> msgPatterns = new ArrayList<Localizable>();
",2,0,0,1,2,1,0,8,0,11,69,2,0.25000,0,1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,51,"    private List<Object[]> msgArguments = new ArrayList<Object[]>();
",2,0,0,3,6,1,0,8,0,11,64,2,0.25000,0,1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,55,"    private Map<String, Object> context = new HashMap<String, Object>();
",2,0,0,1,2,1,0,12,0,15,68,2,0.25000,0,1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,66,"        msgPatterns.add(pattern);
",0,0,0,1,2,0,6,0,0,6,25,5,0.25000,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,67,"        msgArguments.add(ArgUtils.flatten(arguments));
",0,0,0,2,4,0,10,0,0,10,46,5,0.25000,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,68,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.25000,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,355,"    private LocalizedFormats(final String sourceFormat) {
",4,0,0,1,3,2,0,2,0,8,53,2,0.25000,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,356,"        this.sourceFormat = sourceFormat;
",4,0,0,0,0,0,0,0,0,5,33,4,0.25000,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,357,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.25000,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),
",2,0,0,5,10,0,0,0,0,3,67,2,0.25000,0,1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,45,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),
",2,0,0,4,8,0,0,0,0,3,94,2,0.25000,0,1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,46,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),
",2,0,0,1,2,0,0,0,0,3,41,2,0.25000,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,47,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),
",2,0,0,1,2,0,0,0,0,3,95,2,0.25000,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,48,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),
",2,0,0,1,2,0,0,0,0,3,60,2,0.25000,0,0
