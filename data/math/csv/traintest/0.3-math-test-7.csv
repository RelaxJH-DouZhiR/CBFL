dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,predict
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,94,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.33333,1,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,85,198,"        if (fa * fb >= 0.0 ) {
",4,2,0,1,3,0,0,0,0,6,22,4,0.06250,1,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,333,"                coefficients[i] =
",0,0,1,1,2,0,0,0,0,5,17,6,0.12500,1,-1
defect4j,math,org/apache/commons/math/stat/Frequency,89,111,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,1,-1
defect4j,math,org/apache/commons/math/stat/Frequency,90,121,"        Object obj = v;
",4,0,0,0,0,0,0,2,0,6,15,4,0.20000,1,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,260,"        double dOn = object.doubleValue();
",2,0,0,1,2,0,4,0,0,6,34,5,0.00000,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,412,"        if (u * v == 0) {
",4,2,0,1,3,0,0,0,0,6,17,4,0.02222,1,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,148,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,0.50000,1,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,182,"                    wData[i] = new double[p];
",0,0,1,2,4,0,0,0,0,7,25,10,0.80000,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,217,"        if (cachedS == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.80000,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,220,"            cachedS = MatrixUtils.createRealDiagonalMatrix(singularValues);
",2,0,0,1,2,0,6,0,0,9,63,6,0.80000,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,223,"        return cachedS;
",2,0,0,0,0,1,0,0,0,2,15,4,0.80000,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,202,"        final RealMatrix m = createRealMatrix(diagonal.length, diagonal.length);
",10,0,0,1,2,1,2,2,0,15,72,4,0.80000,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,203,"        for (int i = 0; i < diagonal.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,43,4,0.80000,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,204,"            m.setEntry(i, i, diagonal[i]);
",0,0,1,2,4,0,8,0,0,12,30,7,0.80000,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,206,"        return m;
",2,0,0,0,0,1,0,0,0,2,9,4,0.80000,0,-1
defect4j,math,org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,76,30,"public class DefaultRealMatrixPreservingVisitor implements RealMatrixPreservingVisitor {
",2,0,0,0,1,1,0,2,0,5,88,1,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,76,35,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,76,44,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,210,"        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,211,"        Iterator<Entry> it = sparseIterator();
",2,0,0,1,2,0,2,4,0,8,38,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,213,"        while (it.hasNext() && (e = it.next()) != null) {
",2,2,0,4,9,0,8,0,0,13,49,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,214,"            final double value = e.getValue();
",2,0,0,1,2,1,4,0,0,7,34,6,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,215,"            sum += value * value;
",6,1,0,0,0,0,0,0,0,8,21,6,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,216,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,217,"        return Math.sqrt(sum);
",0,0,0,1,2,1,6,0,0,6,22,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,222,"        double norm = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,223,"        Iterator<Entry> it = sparseIterator();
",2,0,0,1,2,0,2,4,0,8,38,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,225,"        while (it.hasNext() && (e = it.next()) != null) {
",2,2,0,4,9,0,8,0,0,13,49,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,226,"            norm += Math.abs(e.getValue());
",2,0,0,2,4,0,8,0,0,11,31,6,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,228,"        return norm;
",2,0,0,0,0,1,0,0,0,2,12,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,499,"        double max = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,267,"                    double r1 = y0 / y2;
",6,1,0,0,0,0,0,0,0,7,20,11,0.11111,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,79,30,"public class EuclideanIntegerPoint implements Clusterable<EuclideanIntegerPoint>, Serializable {
",2,0,0,0,1,1,0,6,0,9,96,1,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1090,"                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;
",4,3,1,1,2,0,0,0,0,10,43,11,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1091,"                    dMin = 0.0;
",2,0,0,0,0,0,0,0,0,3,11,11,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1092,"                    updateSigma(tau);
",0,0,0,1,2,0,4,0,0,4,17,12,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1093,"                    return deflatedEnd;
",2,0,0,0,0,1,0,0,0,2,19,11,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,870,"            return dotProduct((ArrayRealVector) v);
",2,0,0,2,4,1,2,2,0,6,39,7,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,884,"        checkVectorDimensions(v.length);
",4,0,0,1,2,0,2,0,0,6,32,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,885,"        double dot = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,886,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,887,"            dot += data[i] * v[i];
",2,1,1,2,4,0,0,0,0,12,22,6,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,889,"        return dot;
",2,0,0,0,0,1,0,0,0,2,11,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,900,"        return dotProduct(v.data);
",4,0,0,1,2,1,2,0,0,6,26,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,336,"        if (eigenvectors == null) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,337,"            findEigenVectors();
",0,0,0,1,2,0,2,0,0,2,19,7,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1509,"                            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1529,"                tType = -5;
",2,0,0,0,0,0,0,0,0,4,11,8,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1530,"                double s = 0.25 * dMin;
",4,1,0,0,0,0,0,0,0,5,23,9,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1533,"                final int np = nn - 2 * pingPong;
",6,2,0,0,0,1,0,0,0,9,33,8,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1534,"                double b1 = work[np - 2];
",4,1,1,1,2,0,0,0,0,7,25,9,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1535,"                double b2 = work[np - 6];
",4,1,1,1,2,0,0,0,0,7,25,9,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1536,"                final double gam = dN2;
",4,0,0,0,0,1,0,0,0,5,23,8,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1537,"                if (work[np - 8] > b2 || work[np - 4] > b1) {
",8,5,1,3,7,0,0,0,0,17,45,8,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1540,"                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);
",10,6,1,4,8,0,0,0,0,20,58,9,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1543,"                if (end - start > 2) {
",4,2,0,1,3,0,0,0,0,6,22,8,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1544,"                    b2 = work[nn - 13] / work[nn - 15];
",6,3,1,2,4,0,0,0,0,14,35,10,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1621,"                tau = 0.25 * dMin1;
",4,1,0,0,0,0,0,0,0,6,19,7,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1622,"                if (dMin1 == dN1) {
",4,1,0,1,3,0,0,0,0,5,19,7,0.50000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,308,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.50000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,169,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.50000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,170,"                        matrix[row][getSlackVariableOffset() + slackVar++] = 1;  // slack
",2,1,1,3,6,0,2,0,0,11,65,8,0.12500,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,152,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.12500,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,191,"            doIteration(tableau);
",0,0,0,1,2,0,4,0,0,4,21,7,0.12500,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,338,"        double[] out = new double[data.length];
",6,0,0,2,4,0,0,0,0,6,39,5,0.10000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,349,"              coefficients[i] = 0;
",0,0,1,1,2,0,0,0,0,5,20,8,0.33333,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,151,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.14286,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,190,"            doIteration(tableau);
",0,0,0,1,2,0,4,0,0,4,21,7,0.14286,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,179,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,297,"                return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.11111,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,884,"        checkVectorDimensions(v.length);
",4,0,0,1,2,0,2,0,0,6,32,5,0.10000,0,-1
defect4j,math,org/apache/commons/math/MathException,85,106,"      super(buildMessage(Locale.US, pattern, arguments));
",4,0,0,2,4,0,6,0,0,10,51,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,991,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,992,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,993,"        final StringBuffer res = new StringBuffer();
",2,0,0,1,2,1,0,4,0,7,44,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,994,"        String fullClassName = getClass().getName();
",2,0,0,2,4,0,4,2,0,8,44,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,291,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,1.00000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,168,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,1.00000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,151,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.16667,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,190,"            doIteration(tableau);
",0,0,0,1,2,0,4,0,0,4,21,7,0.16667,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,87,70,"        return point.clone();
",0,0,0,1,2,1,4,0,0,4,21,5,0.14286,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,884,"        checkVectorDimensions(v.length);
",4,0,0,1,2,0,2,0,0,6,32,5,0.11111,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,339,"                         coefficients[i] = 0;
",0,0,1,1,2,0,0,0,0,5,20,12,0.50000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,172,"                        matrix[row][getSlackVariableOffset() + slackVar++] = -1; // excess
",2,1,1,3,6,0,2,0,0,12,66,9,0.20000,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,70,"        return point.clone();
",0,0,0,1,2,1,4,0,0,4,21,5,0.16667,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,279,"                    return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.14286,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,884,"        checkVectorDimensions(v.length);
",4,0,0,1,2,0,2,0,0,6,32,5,0.12500,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,885,"        double dot = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.12500,0,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,270,"        return (double)numerator / (double)denominator;
",4,1,0,2,4,1,0,0,0,5,47,4,0.03846,0,-1
