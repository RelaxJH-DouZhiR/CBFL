dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,predict
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,136,"            if ((Boolean) tree.getAttribute()) {
",0,0,0,3,7,0,4,2,0,6,36,7,0.00000,1,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,338,"            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
",0,1,0,2,5,0,8,0,0,9,50,6,0.05882,1,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,209,"        return chromosomes.iterator();
",0,0,0,1,2,1,4,0,0,4,30,5,1.00000,1,-1
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,65,"        this.elitismRate = elitismRate;
",4,0,0,0,0,0,0,0,0,5,31,4,0.40000,1,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,735,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.50000,1,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1752,"                throw new PathIsExploredException(); // XXX
",0,0,0,1,2,0,0,2,0,2,43,10,0.00000,1,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,238,"                targetY = -REDUCTION_FACTOR * yA;
",6,1,0,0,0,0,0,0,0,9,33,9,0.00000,1,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,520,"                for (int i = 0; i < weights.length; i++) {
",10,1,0,1,3,0,0,0,0,12,42,9,0.50000,1,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1016,"                if (x[i] < 0) {
",0,1,1,2,5,0,0,0,0,5,15,7,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1018,"                } else if (x[i] > 1.0) {
",0,1,1,2,6,0,0,0,0,5,24,8,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1021,"                    repaired[i] = x[i];
",0,0,1,2,4,0,0,0,0,9,19,10,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1024,"            return repaired;
",2,0,0,0,0,1,0,0,0,2,16,5,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1033,"            double penalty = 0;
",2,0,0,0,0,0,0,0,0,2,19,6,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1034,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1035,"                double diff = Math.abs(x[i] - repaired[i]);
",2,1,1,3,6,0,4,0,0,15,43,8,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1036,"                penalty += diff * valueRange;
",6,1,0,0,0,0,0,0,0,8,29,7,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1038,"            return isMinimize ? penalty : -penalty;
",6,0,0,0,0,1,0,0,0,7,39,6,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,459,"                    break generationLoop;
",2,0,0,0,0,0,0,0,0,2,21,9,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,535,"                boundaries = new double[2][];
",2,0,0,2,4,0,0,0,0,3,29,8,0.20000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,536,"                boundaries[0] = lB;
",2,0,1,1,2,0,0,0,0,5,19,8,0.20000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,537,"                boundaries[1] = uB;
",2,0,1,1,2,0,0,0,0,5,19,8,0.20000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,540,"                for (int i = 0; i < lB.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.20000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,541,"                    if (Double.isInfinite(boundaries[1][i] - boundaries[0][i])) {
",0,1,1,6,13,0,4,0,0,13,61,11,0.20000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,128,"            lowerBound = lower.clone();
",2,0,0,1,2,0,4,0,0,7,27,6,0.14286,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,136,"            upperBound = upper.clone();
",2,0,0,1,2,0,4,0,0,7,27,6,0.14286,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,514,"                hasFiniteBounds = true;
",2,0,0,0,0,0,0,0,0,4,23,8,0.14286,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,515,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.14286,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,521,"            for (int i = 0; i < lB.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,6,0.14286,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,522,"                if (Double.isInfinite(lB[i]) ||
",0,1,1,2,5,0,4,0,0,9,31,8,0.14286,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,529,"            if (hasInfiniteBounds) {
",2,0,0,1,3,0,0,0,0,2,24,6,0.14286,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,109,"            if (upper.length != dim) {
",6,1,0,1,3,0,0,0,0,7,26,6,0.12500,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,112,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.12500,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,113,"                final double v = startPoint[i];
",2,0,1,1,2,1,0,0,0,7,31,8,0.12500,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,114,"                final double hi = upper[i];
",2,0,1,1,2,1,0,0,0,7,27,8,0.12500,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,115,"                if (v > hi) {
",4,1,0,1,3,0,0,0,0,5,13,8,0.12500,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,100,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.11111,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,101,"                final double v = startPoint[i];
",2,0,1,1,2,1,0,0,0,7,31,8,0.11111,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,246,"        this(0);
",0,0,0,1,2,0,0,0,0,0,8,3,1.00000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,247,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,253,"        this(lambda, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,
",6,0,0,0,1,0,0,0,0,6,62,4,1.00000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,256,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,570,"            lambda = 4 + (int) (3. * Math.log(dimension));
",2,2,0,3,6,0,6,0,0,11,46,6,1.00000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,916,"            double[] res = new double[x.length];
",6,0,0,2,4,0,0,0,0,6,36,6,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,917,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,918,"                double diff = boundaries[1][i] - boundaries[0][i];
",2,1,1,4,8,0,0,0,0,11,50,8,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,919,"                res[i] = (x[i] - boundaries[0][i]) / diff;
",2,2,1,5,10,0,0,0,0,17,42,7,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,921,"            return res;
",2,0,0,0,0,1,0,0,0,2,11,5,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,942,"            double[] res = new double[x.length];
",6,0,0,2,4,0,0,0,0,6,36,6,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,943,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,944,"                double diff = boundaries[1][i] - boundaries[0][i];
",2,1,1,4,8,0,0,0,0,11,50,8,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,945,"                res[i] = diff * x[i] + boundaries[0][i];
",2,2,1,4,8,0,0,0,0,17,40,7,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,947,"            return res;
",2,0,0,0,0,1,0,0,0,2,11,5,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,957,"                double[] repaired = repair(point);
",2,0,0,2,4,0,4,0,0,6,34,8,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,958,"                value = CMAESOptimizer.this
",4,0,0,0,0,0,0,0,0,5,27,7,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,999,"            double[] repaired = new double[x.length];
",6,0,0,2,4,0,0,0,0,6,41,6,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1000,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,423,"                            break generationLoop;
",2,0,0,0,0,0,0,0,0,2,21,13,1.00000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,995,"                    repaired[i] = 1.0;
",0,0,1,1,2,0,0,0,0,5,18,10,1.00000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,908,"            double[] res = new double[x.length];
",6,0,0,2,4,0,0,0,0,6,36,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,909,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.50000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,910,"                double diff = boundaries[1][i] - boundaries[0][i];
",2,1,1,4,8,0,0,0,0,11,50,8,0.50000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,911,"                res[i] = (x[i] - boundaries[0][i]) / diff;
",2,2,1,5,10,0,0,0,0,17,42,7,0.50000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,913,"            return res;
",2,0,0,0,0,1,0,0,0,2,11,5,0.50000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,933,"            double[] res = new double[x.length];
",6,0,0,2,4,0,0,0,0,6,36,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,934,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.50000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,935,"                double diff = boundaries[1][i] - boundaries[0][i];
",2,1,1,4,8,0,0,0,0,11,50,8,0.50000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,936,"                res[i] = diff * x[i] + boundaries[0][i];
",2,2,1,4,8,0,0,0,0,17,40,7,0.50000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,938,"            return res;
",2,0,0,0,0,1,0,0,0,2,11,5,0.50000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,948,"                double[] repaired = repair(point);
",2,0,0,2,4,0,4,0,0,6,34,8,0.50000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,949,"                value = CMAESOptimizer.this
",4,0,0,0,0,0,0,0,0,5,27,7,0.50000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,952,"            } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.50000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,990,"            double[] repaired = new double[x.length];
",6,0,0,2,4,0,0,0,0,6,41,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,991,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.50000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,992,"                if (x[i] < 0) {
",0,1,1,2,5,0,0,0,0,5,15,7,0.50000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,994,"                } else if (x[i] > 1.0) {
",0,1,1,2,6,0,0,0,0,5,24,8,0.50000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,997,"                    repaired[i] = x[i];
",0,0,1,2,4,0,0,0,0,9,19,10,0.50000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1000,"            return repaired;
",2,0,0,0,0,1,0,0,0,2,16,5,0.50000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1009,"            double penalty = 0;
",2,0,0,0,0,0,0,0,0,2,19,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1010,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.50000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1011,"                double diff = Math.abs(x[i] - repaired[i]);
",2,1,1,3,6,0,4,0,0,15,43,8,0.50000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1012,"                penalty += diff * valueRange;
",6,1,0,0,0,0,0,0,0,8,29,7,0.50000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1014,"            return isMinimize ? penalty : -penalty;
",6,0,0,0,0,1,0,0,0,7,39,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,529,"                boundaries = new double[2][];
",2,0,0,2,4,0,0,0,0,3,29,8,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,530,"                boundaries[0] = lB;
",2,0,1,1,2,0,0,0,0,5,19,8,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,531,"                boundaries[1] = uB;
",2,0,1,1,2,0,0,0,0,5,19,8,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,508,"                hasFiniteBounds = true;
",2,0,0,0,0,0,0,0,0,4,23,8,0.20000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,509,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.20000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,515,"            for (int i = 0; i < lB.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,6,0.20000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,516,"                if (Double.isInfinite(lB[i]) ||
",0,1,1,2,5,0,4,0,0,9,31,8,0.20000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,523,"            if (hasInfiniteBounds) {
",2,0,0,1,3,0,0,0,0,2,24,6,0.20000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,128,"            lowerBound = lower.clone();
",2,0,0,1,2,0,4,0,0,7,27,6,0.20000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,136,"            upperBound = upper.clone();
",2,0,0,1,2,0,4,0,0,7,27,6,0.20000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,109,"            if (upper.length != dim) {
",6,1,0,1,3,0,0,0,0,7,26,6,0.16667,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,112,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.16667,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,113,"                final double v = startPoint[i];
",2,0,1,1,2,1,0,0,0,7,31,8,0.16667,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,114,"                final double hi = upper[i];
",2,0,1,1,2,1,0,0,0,7,27,8,0.16667,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,115,"                if (v > hi) {
",4,1,0,1,3,0,0,0,0,5,13,8,0.16667,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,100,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.14286,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,101,"                final double v = startPoint[i];
",2,0,1,1,2,1,0,0,0,7,31,8,0.14286,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,102,"                final double lo = lower[i];
",2,0,1,1,2,1,0,0,0,7,27,8,0.14286,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,103,"                if (v < lo) {
",4,1,0,1,3,0,0,0,0,5,13,8,0.14286,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,97,"            if (lower.length != dim) {
",6,1,0,1,3,0,0,0,0,7,26,6,0.12500,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,378,"                            arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k))
",2,0,0,2,5,0,14,0,0,17,52,13,0.07143,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,407,"                    updateCovariance(hsig, bestArx, arz, arindex, xold);
",0,0,0,1,2,0,12,0,0,12,52,10,0.07143,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,696,"        double negccov = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.07143,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,697,"        if (ccov1 + ccovmu > 0) {
",4,2,0,1,3,0,0,0,0,6,25,4,0.07143,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,97,"        MatrixUtils.checkSubtractionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,48,5,1,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,99,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,1,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,100,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,1,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,101,"        final RealMatrix out = createMatrix(rowCount, columnCount);
",2,0,0,1,2,1,6,2,0,11,59,4,1,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,102,"        for (int row = 0; row < rowCount; ++row) {
",8,1,0,1,3,0,0,0,0,10,42,4,1,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,103,"            for (int col = 0; col < columnCount; ++col) {
",8,1,0,1,3,0,0,0,0,10,45,6,1,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,104,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));
",0,1,0,3,6,0,22,0,0,23,66,9,1,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,108,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,1,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,241,"        return walkInColumnOrder(new RealMatrixPreservingVisitor() {
",0,0,0,1,4,1,2,2,0,4,60,5,1,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,456,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,1,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,457,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,1,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,458,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,1,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,459,"        for (int j = 0; j < columns; ++j) {
",8,1,0,1,3,0,0,0,0,10,35,4,1,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,460,"            for (int i = 0; i < rows; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,6,1,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,461,"                visitor.visit(i, j, data[i][j]);
",0,0,1,3,6,0,8,0,0,14,32,9,1,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,464,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,1,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,130,"        if (data == null ||
",2,2,0,0,1,0,0,0,0,4,19,4,1,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,134,"        return (data.length * data[0].length <= 4096) ?
",6,2,1,2,4,1,0,0,0,10,47,6,1,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,523,"        if ((left.getRowDimension()    != right.getRowDimension()) ||
",0,2,0,3,7,0,8,0,0,10,61,4,1,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,528,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,241,"        return walkInColumnOrder(new RealMatrixPreservingVisitor() {
",0,0,0,1,4,1,2,2,0,4,60,5,1,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,256,"                this.endRow = endRow;
",4,0,0,0,0,0,0,0,0,5,21,10,1,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,257,"                columnSum   = 0;
",2,0,0,0,0,0,0,0,0,3,16,10,1,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,258,"                maxColSum   = 0;
",2,0,0,0,0,0,0,0,0,3,16,10,1,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,259,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,263,"                columnSum += FastMath.abs(value);
",2,0,0,1,2,0,6,0,0,9,33,10,1,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,264,"                if (row == endRow) {
",4,1,0,1,3,0,0,0,0,5,20,10,1,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,265,"                    maxColSum = FastMath.max(maxColSum, columnSum);
",2,0,0,1,2,0,8,0,0,11,47,12,1,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,266,"                    columnSum = 0;
",2,0,0,0,0,0,0,0,0,3,14,12,1,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,268,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,272,"                return maxColSum;
",2,0,0,0,0,1,0,0,0,2,17,10,1,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3508,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,1,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3511,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,1,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3514,"        if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,4,1,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3519,"        long bits = Double.doubleToRawLongBits(a);
",2,0,0,1,2,0,6,0,0,8,42,5,1,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3520,"        if (bits == 0x8000000000000000L) {
",2,1,0,1,3,0,0,0,0,3,34,4,1,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3523,"        return a;
",2,0,0,0,0,1,0,0,0,2,9,4,1,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,184,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,1.00000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1107,"            return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.50000,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,129,"        final double nhalf = numeratorDegreesOfFreedom / 2;
",4,1,0,0,0,1,0,0,0,6,51,4,0.25000,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,130,"        final double mhalf = denominatorDegreesOfFreedom / 2;
",4,1,0,0,0,1,0,0,0,6,53,4,0.25000,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,131,"        final double logx = FastMath.log(x);
",2,0,0,1,2,1,6,0,0,9,36,4,0.25000,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,132,"        final double logn = FastMath.log(numeratorDegreesOfFreedom);
",2,0,0,1,2,1,6,0,0,9,60,4,0.25000,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,133,"        final double logm = FastMath.log(denominatorDegreesOfFreedom);
",2,0,0,1,2,1,6,0,0,9,62,4,0.25000,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,134,"        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +
",6,2,0,0,1,1,4,0,0,13,66,4,0.25000,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,136,"        return FastMath.exp(nhalf * logn + nhalf * logx - logx +
",10,8,0,0,1,1,4,0,0,22,56,5,0.25000,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,109,"        if (x < lower || x > upper) {
",8,3,0,1,3,0,0,0,0,11,29,4,0.25000,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,112,"        return 1 / (upper - lower);
",4,2,0,1,2,1,0,0,0,6,27,4,0.25000,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,174,"        return upper;
",2,0,0,0,0,1,0,0,0,2,13,4,0.25000,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,22,170,"        return logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);
",4,0,0,1,2,1,8,0,0,12,57,5,0.25000,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,258,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.14286,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,864,"            intVal = (int) x;
",4,0,0,1,2,0,0,0,0,5,17,6,0.11111,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,234,"        double previous = val[0];
",2,0,1,1,2,0,0,0,0,4,25,5,1.00000,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,235,"        final int max = val.length;
",6,0,0,0,0,1,0,0,0,7,27,4,1.00000,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,239,"        for (index = 1; index < max; index++) {
",8,1,0,1,3,0,0,0,0,11,39,5,1.00000,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,240,"            switch (dir) {
",2,0,0,1,3,0,0,0,0,2,14,7,1.00000,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,242,"                if (strict) {
",2,0,0,1,3,0,0,0,0,2,13,8,1.00000,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,243,"                    if (val[index] <= previous) {
",2,1,1,2,5,0,0,0,0,7,29,10,1.00000,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,268,"            previous = val[index];
",2,0,1,1,2,0,0,0,0,7,22,7,1.00000,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,271,"        if (index == max) {
",4,1,0,1,3,0,0,0,0,5,19,4,1.00000,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,273,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,1.00000,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,295,"        checkOrder(val, dir, strict, true);
",0,0,0,1,2,0,8,0,0,9,35,5,1.00000,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,296,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,306,"        checkOrder(val, OrderDirection.INCREASING, true);
",4,0,0,1,2,0,4,0,0,9,49,5,1.00000,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,307,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,143,"    public static enum OrderDirection {
",2,0,0,0,1,2,0,0,0,4,35,2,1.00000,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,145,"        INCREASING,
",2,0,0,0,0,0,0,0,0,2,11,3,1.00000,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,147,"        DECREASING
",2,0,0,0,0,0,0,0,0,2,10,3,1.00000,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,24,532,"         return copyOf(source, source.length);
",4,0,0,1,2,1,4,0,0,8,37,5,0.25000,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,24,560,"         final double[] output = new double[len];
",2,0,1,2,4,1,0,0,0,5,40,4,0.25000,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,24,561,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));
",4,0,0,2,4,0,14,0,0,18,73,5,0.25000,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,24,562,"         return output;
",2,0,0,0,0,1,0,0,0,2,14,4,0.25000,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/Sin,24,33,"public class Sin implements UnivariateDifferentiable, DifferentiableUnivariateFunction {
",2,0,0,0,1,1,0,4,0,7,88,1,0.25000,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/Sin,24,36,"        return FastMath.sin(x);
",0,0,0,1,2,1,6,0,0,6,23,5,0.25000,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,183,"                            if (x <= m) {
",4,1,0,1,3,0,0,0,0,5,13,14,0.20000,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,184,"                                d = tol1;
",4,0,0,0,0,0,0,0,0,5,9,16,0.20000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1653,"        double x2 = x*x;
",6,1,0,0,0,0,0,0,0,7,16,5,0.20000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1655,"        double p = 2.7553817452272217E-6;
",2,0,0,0,0,0,0,0,0,2,33,5,0.20000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1656,"        p = p * x2 + -1.9841269659586505E-4;
",6,2,0,0,0,0,0,0,0,10,36,4,0.20000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1657,"        p = p * x2 + 0.008333333333329196;
",6,2,0,0,0,0,0,0,0,9,34,4,0.20000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1658,"        p = p * x2 + -0.16666666666666666;
",6,2,0,0,0,0,0,0,0,10,34,4,0.20000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1661,"        p = p * x2 * x;
",8,1,0,0,0,0,0,0,0,10,15,4,0.20000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1663,"        return p;
",2,0,0,0,0,1,0,0,0,2,9,4,0.20000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1673,"        double x2 = x*x;
",6,1,0,0,0,0,0,0,0,7,16,5,0.20000,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,326,"                a = FastMath.sqrt(c1 / c2);
",6,1,0,1,2,0,4,0,0,12,27,7,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,327,"                omega = FastMath.sqrt(c2 / c3);
",6,1,0,1,2,0,4,0,0,12,31,7,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,201,"            this.observations = observations.clone();
",2,0,0,1,2,0,4,0,0,7,41,5,0.25000,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,48,"                                Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,1.00000,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,49,"        getContext().addMessage(pattern, args);
",0,0,0,2,4,0,8,0,0,8,39,5,1.00000,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,50,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,69,"        this(LocalizedFormats.ILLEGAL_STATE);
",4,0,0,1,2,0,0,0,0,4,37,5,0.16667,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,70,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.16667,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,74,"        return context;
",2,0,0,0,0,1,0,0,0,2,15,4,0.16667,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,45,"                                     Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,0.14286,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,46,"        context = new ExceptionContext(this);
",2,0,0,1,2,0,0,2,0,5,37,4,0.14286,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,47,"        context.addMessage(pattern, args);
",0,0,0,1,2,0,8,0,0,8,34,5,0.14286,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,188,"            this.numerator = (int) a0;
",4,0,0,1,2,0,0,0,0,5,26,6,0.04545,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,189,"            this.denominator = 1;
",2,0,0,0,0,0,0,0,0,3,21,6,0.04545,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,190,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.04545,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,215,"                p0 = p1;
",4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,216,"                p1 = p2;
",4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,217,"                q0 = q1;
",4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,555,"        return new Fraction(numerator * i, denominator);
",6,1,0,1,2,1,0,2,0,9,48,5,0.50000,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,319,"        return (double)numerator / (double)denominator;
",4,1,0,2,4,1,0,0,0,5,47,4,0.03846,0,-1
