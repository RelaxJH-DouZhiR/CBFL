dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,predict
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,275,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,1.00000,1,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,267,"                return current;
",2,0,0,0,0,1,0,0,0,2,15,8,0.11111,1,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,209,"            if ((p2 > overflow) || (q2 > overflow)) {
",8,3,0,3,7,0,0,0,0,11,41,6,0.01961,1,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,597,"        return multiply(100).doubleValue();
",0,0,0,2,4,1,4,0,0,4,35,5,1.00000,1,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,374,"        return res;
",2,0,0,0,0,1,0,0,0,2,11,4,1,1,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,173,"        final int n1n2prod = n1 * n2;
",6,1,0,0,0,1,0,0,0,8,29,4,1.00000,1,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,189,"            q1 = q2;
",4,0,0,0,0,0,0,0,0,5,8,6,0.04082,1,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,136,"            if ((Boolean) tree.getAttribute()) {
",0,0,0,3,7,0,4,2,0,6,36,7,0.00000,1,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,338,"            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
",0,1,0,2,5,0,8,0,0,9,50,6,0.05882,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,888,"            intVal = (int) x;
",4,0,0,1,2,0,0,0,0,5,17,6,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,890,"            if (intVal > 709) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,898,"            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,899,"            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,906,"        final int intFrac = (int) ((x - intVal) * 1024.0);
",6,2,0,3,6,1,0,0,0,9,50,4,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,907,"        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
",6,0,1,1,2,1,0,0,0,9,64,4,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,908,"        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
",6,0,1,1,2,1,0,0,0,9,64,4,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,914,"        final double epsilon = x - (intVal + intFrac / 1024.0);
",8,3,0,1,2,1,0,0,0,12,55,4,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,923,"        double z = 0.04168701738764507;
",2,0,0,0,0,0,0,0,0,2,31,5,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,924,"        z = z * epsilon + 0.1666666505023083;
",6,2,0,0,0,0,0,0,0,9,37,4,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,925,"        z = z * epsilon + 0.5000000000042687;
",6,2,0,0,0,0,0,0,0,9,37,4,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,926,"        z = z * epsilon + 1.0;
",6,2,0,0,0,0,0,0,0,9,22,4,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,927,"        z = z * epsilon + -3.940510424527919E-20;
",6,2,0,0,0,0,0,0,0,10,41,4,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,934,"        double tempA = intPartA * fracPartA;
",6,1,0,0,0,0,0,0,0,7,36,5,0.50000,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,246,"        random.setSeed(seed);
",0,0,0,1,2,0,6,0,0,6,21,5,0.42857,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,247,"        randomData.reSeed(seed);
",0,0,0,1,2,0,6,0,0,6,24,5,0.42857,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,248,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.42857,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,461,"        delegate.reSeed(seed);
",0,0,0,1,2,0,6,0,0,6,22,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,462,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.33333,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,648,"       getRan().setSeed(seed);
",0,0,0,2,4,0,6,0,0,6,23,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,649,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,374,"        if (shape < 1) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,413,"        final double d = shape - 0.333333333333333333;
",4,1,0,0,0,1,0,0,0,6,46,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,414,"        final double c = 1 / (3 * FastMath.sqrt(d));
",2,2,0,2,4,1,6,0,0,11,44,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,417,"            final double x = random.nextGaussian();
",2,0,0,1,2,1,4,0,0,7,39,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,63,"        super(optimizer);
",2,0,0,1,2,0,0,0,0,2,17,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,64,"        degree = -1; // To avoid compilation error until the instance variable is removed.
",2,0,0,0,0,0,0,0,0,4,82,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,65,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,110,"        return fit(new PolynomialFunction.Parametric(), guess);
",4,0,0,2,4,1,4,0,0,8,55,5,0.20000,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,69,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.20000,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,70,"        MathUtils.checkNotNull(c);
",0,0,0,1,2,0,6,0,0,6,26,5,0.20000,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,71,"        int n = c.length;
",6,0,0,0,0,0,0,0,0,6,17,5,0.20000,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,72,"        if (n == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,75,"        while ((n > 1) && (c[n - 1] == 0)) {
",4,4,1,4,9,0,0,0,0,10,36,4,0.20000,0,1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,78,"        this.coefficients = new double[n];
",2,0,1,1,2,0,0,0,0,5,34,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,79,"        System.arraycopy(c, 0, this.coefficients, 0, n);
",2,0,0,1,2,0,8,0,0,10,48,5,0.20000,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,80,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,94,"       return evaluate(coefficients, x);
",0,0,0,1,2,1,6,0,0,6,33,5,0.20000,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,395,"    public static class Parametric implements ParametricUnivariateFunction {
",2,0,0,0,1,2,0,2,0,6,72,2,0.12500,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,130,"        MathUtils.checkNotNull(coefficients);
",0,0,0,1,2,0,6,0,0,6,37,5,0.12500,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,131,"        int n = coefficients.length;
",6,0,0,0,0,0,0,0,0,6,28,5,0.12500,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,132,"        if (n == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.12500,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,135,"        double result = coefficients[n - 1];
",4,1,1,1,2,0,0,0,0,7,36,5,0.12500,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,136,"        for (int j = n - 2; j >= 0; j--) {
",8,2,0,1,3,0,0,0,0,11,34,4,0.12500,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,139,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.12500,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,153,"        return fit(Integer.MAX_VALUE, f, initialGuess);
",4,0,0,1,2,1,6,0,0,10,47,5,0.05000,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,210,"        public OldTheoreticalValuesFunction(final ParametricUnivariateFunction f) {
",4,0,0,1,3,2,0,2,0,8,75,3,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,211,"            this.f = f;
",4,0,0,0,0,0,0,0,0,5,11,5,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,212,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,176,"        double[] target  = new double[observations.size()];
",2,0,0,3,6,0,4,0,0,6,51,5,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,177,"        double[] weights = new double[observations.size()];
",2,0,0,3,6,0,4,0,0,6,51,5,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,178,"        int i = 0;
",2,0,0,0,0,0,0,0,0,2,10,5,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,179,"        for (WeightedObservedPoint point : observations) {
",4,0,0,1,3,0,0,2,0,6,50,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,180,"            target[i]  = point.getY();
",0,0,1,2,4,0,4,0,0,9,26,6,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,181,"            weights[i] = point.getWeight();
",0,0,1,2,4,0,4,0,0,9,31,6,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,182,"            ++i;
",2,0,0,0,0,0,0,0,0,3,4,6,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,183,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,187,"        if (optimizer == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,189,"            optimum = oldOptimizer.optimize(maxEval, new OldTheoreticalValuesFunction(f),
",4,0,0,1,3,0,6,2,0,13,77,6,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,59,"        return weight;
",2,0,0,0,0,1,0,0,0,2,14,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,423,"        return optimizeInternal(maxEval,
",0,0,0,0,1,1,4,0,0,4,32,5,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,62,"@Deprecated
",2,0,0,0,0,0,0,0,0,2,11,2,0.04348,0,0
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,37,"        super(optimizer);
",2,0,0,1,2,0,0,0,0,2,17,4,0.12500,0,0
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,38,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12500,0,0
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,68,"        return fit(new PolynomialFunction.Parametric(), guess);
",4,0,0,2,4,1,4,0,0,8,55,5,0.12500,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,69,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.12500,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,70,"        MathUtils.checkNotNull(c);
",0,0,0,1,2,0,6,0,0,6,26,5,0.12500,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,71,"        int n = c.length;
",6,0,0,0,0,0,0,0,0,6,17,5,0.12500,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,72,"        if (n == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.12500,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,75,"        while ((n > 1) && (c[n - 1] == 0)) {
",4,4,1,4,9,0,0,0,0,10,36,4,0.12500,0,1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,78,"        this.coefficients = new double[n];
",2,0,1,1,2,0,0,0,0,5,34,4,0.12500,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,79,"        System.arraycopy(c, 0, this.coefficients, 0, n);
",2,0,0,1,2,0,8,0,0,10,48,5,0.12500,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,80,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12500,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,94,"       return evaluate(coefficients, x);
",0,0,0,1,2,1,6,0,0,6,33,5,0.12500,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,395,"    public static class Parametric implements ParametricUnivariateFunction {
",2,0,0,0,1,2,0,2,0,6,72,2,0.09091,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,130,"        MathUtils.checkNotNull(coefficients);
",0,0,0,1,2,0,6,0,0,6,37,5,0.09091,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,131,"        int n = coefficients.length;
",6,0,0,0,0,0,0,0,0,6,28,5,0.09091,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,132,"        if (n == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,135,"        double result = coefficients[n - 1];
",4,1,1,1,2,0,0,0,0,7,36,5,0.09091,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,136,"        for (int j = n - 2; j >= 0; j--) {
",8,2,0,1,3,0,0,0,0,11,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,139,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,136,"        return fit(Integer.MAX_VALUE, f, initialGuess);
",4,0,0,1,2,1,6,0,0,10,47,5,0.04348,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,98,"        super(rows, columns);
",4,0,0,1,2,0,0,0,0,4,21,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,99,"        this.rows = rows;
",4,0,0,0,0,0,0,0,0,5,17,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,100,"        this.columns = columns;
",4,0,0,0,0,0,0,0,0,5,23,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,103,"        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,0,0,0,0,12,49,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,104,"        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,0,0,0,0,12,55,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,107,"        blocks = createBlocksLayout(rows, columns);
",2,0,0,1,2,0,6,0,0,9,43,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,258,"        final int blockRows = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,1,0,0,0,12,62,4,0.04000,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,259,"        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,1,0,0,0,12,65,4,0.04000,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,261,"        final double[][] blocks = new double[blockRows * blockColumns][];
",6,1,0,4,8,1,0,0,0,8,65,4,0.04000,0,1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,262,"        int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.04000,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,263,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.04000,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,264,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.04000,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,265,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,57,6,0.04000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1542,"                return pow(-x, y);
",2,0,0,1,2,1,4,0,0,7,18,9,1.00000,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,131,"    public MersenneTwister(long seed) {
",4,0,0,1,3,1,0,0,0,5,35,2,0.02174,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,132,"        mt = new int[N];
",2,0,1,1,2,0,0,0,0,5,16,4,0.02174,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,133,"        setSeed(seed);
",0,0,0,1,2,0,4,0,0,4,14,5,0.02174,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,134,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02174,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,94,"    private static final int[] MAG01 = { 0x0, 0x9908b0df };
",2,0,0,2,4,3,0,0,0,5,55,2,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,144,"        long longMT = seed;
",4,0,0,0,0,0,0,0,0,4,19,5,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,146,"        mt[0]= (int) longMT;
",2,0,1,2,4,0,0,0,0,5,20,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,147,"        for (mti = 1; mti < N; ++mti) {
",8,1,0,1,3,0,0,0,0,11,31,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,150,"            longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;
",8,5,0,3,6,0,0,0,0,14,71,6,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,151,"            mt[mti]= (int) longMT;
",2,0,1,2,4,0,0,0,0,7,22,6,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,154,"        clear(); // Clear normal deviate cache
",0,0,0,1,2,0,2,0,0,2,38,5,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,155,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,167,"        if (seed == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,16,384,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.15385,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,16,393,"      if (x > 20) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.15385,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,16,870,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.13333,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,16,874,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.13333,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,16,395,"              return 0.5 * exp(x);
",0,1,0,1,2,1,4,0,0,5,20,6,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,16,399,"              return 0.5 * exp(-x);
",2,1,0,1,2,1,2,0,0,6,21,6,0.09091,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,131,"    public MersenneTwister(long seed) {
",4,0,0,1,3,1,0,0,0,5,35,2,0.09091,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,132,"        mt = new int[N];
",2,0,1,1,2,0,0,0,0,5,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,133,"        setSeed(seed);
",0,0,0,1,2,0,4,0,0,4,14,5,0.09091,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,134,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.09091,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,94,"    private static final int[] MAG01 = { 0x0, 0x9908b0df };
",2,0,0,2,4,3,0,0,0,5,55,2,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,144,"        long longMT = seed;
",4,0,0,0,0,0,0,0,0,4,19,5,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,146,"        mt[0]= (int) longMT;
",2,0,1,2,4,0,0,0,0,5,20,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,147,"        for (mti = 1; mti < N; ++mti) {
",8,1,0,1,3,0,0,0,0,11,31,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1510,"            if (isNaN()) {
",0,0,0,2,5,0,2,0,0,2,14,7,1.00000,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1511,"                return this;
",0,0,0,0,0,1,0,0,0,0,12,3,1.00000,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1514,"            if (x.isNaN()) {
",0,0,0,2,5,0,4,0,0,4,16,7,1.00000,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1515,"                return x;
",2,0,0,0,0,1,0,0,0,2,9,8,1.00000,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1518,"            if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) {
",18,6,0,2,5,0,0,0,0,24,73,6,1.00000,0,1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1519,"                result = newInstance(this);
",2,0,0,1,2,0,2,0,0,5,27,8,1.00000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,583,"            lambda = 4 + (int) (3. * Math.log(dimension));
",2,2,0,3,6,0,6,0,0,11,46,6,1.00000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,751,"                    negccov = negcovMax;
",4,0,0,0,0,0,0,0,0,5,20,10,1.00000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,246,"        this(0);
",0,0,0,1,2,0,0,0,0,0,8,3,0.50000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,247,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,253,"        this(lambda, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,
",6,0,0,0,1,0,0,0,0,6,62,4,0.50000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,256,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,929,"            double[] res = new double[x.length];
",6,0,0,2,4,0,0,0,0,6,36,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,930,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,931,"                double diff = boundaries[1][i] - boundaries[0][i];
",2,1,1,4,8,0,0,0,0,11,50,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,932,"                res[i] = (x[i] - boundaries[0][i]) / diff;
",2,2,1,5,10,0,0,0,0,17,42,7,0.33333,0,1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,934,"            return res;
",2,0,0,0,0,1,0,0,0,2,11,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,955,"            double[] res = new double[x.length];
",6,0,0,2,4,0,0,0,0,6,36,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,956,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,957,"                double diff = boundaries[1][i] - boundaries[0][i];
",2,1,1,4,8,0,0,0,0,11,50,8,0.33333,0,0
