dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,predict
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,250,"              scale = vecAbsoluteTolerance;
",4,0,0,0,0,0,0,0,0,5,29,12,0.00000,1,-1
defect4j,math,org/apache/commons/math/stat/Frequency,75,303,"        return getCumPct((Comparable<?>) v);
",2,0,0,2,4,1,2,2,0,6,36,5,0.00000,1,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,265,"                for (int i = p; i < n; ++i) {
",10,1,0,1,3,0,0,0,0,12,29,8,0.00000,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,79,1626,"          final int dp = p1[i] - p2[i];
",2,1,1,2,4,1,0,0,0,12,29,6,0.33333,1,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1135,"            int j = 4 * n - 1;
",4,2,0,0,0,0,0,0,0,6,18,7,0.00000,1,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,603,"        minPivot = MathUtils.SAFE_MIN * Math.max(1.0, eMax * eMax);
",10,2,0,1,2,0,4,0,0,17,59,4,0.02941,1,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,82,"            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {
",0,1,0,2,5,0,8,0,0,9,50,6,0.07692,1,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,345,"          Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
",4,1,0,2,4,0,4,2,0,11,63,6,0.10000,1,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,158,"                infinite = true;
",2,0,0,0,0,0,0,0,0,4,16,8,0.50000,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,159,"                for (int i = 0; i < maxPower; i++) {
",8,1,0,1,3,0,0,0,0,10,36,8,0.50000,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,160,"                    lastScaleFactor = scaleFactor;
",4,0,0,0,0,0,0,0,0,5,30,10,0.50000,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,161,"                    scaleFactor *= scale;
",4,0,0,0,0,0,0,0,0,5,21,10,0.50000,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,162,"                    if (a != 0.0 && a > b) {
",6,3,0,1,3,0,0,0,0,9,24,10,0.50000,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,169,"                    infinite = Double.isInfinite(p2) || Double.isInfinite(q2);
",2,1,0,2,4,0,12,0,0,16,58,10,0.50000,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,170,"                    if (!infinite) {
",2,0,0,1,3,0,0,0,0,3,16,10,0.50000,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,171,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.50000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,644,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.25000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,648,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.25000,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,169,"            ret = 0.0;
",2,0,0,0,0,0,0,0,0,3,10,7,0.25000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,3491,"        return (a <= b) ? b : (Double.isNaN(a + b) ? Double.NaN : a);
",16,2,0,3,6,1,4,0,0,22,61,5,0.16667,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,173,"            ret = 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);
",2,1,0,1,2,0,10,0,0,14,60,8,0.16667,0,-1
defect4j,math,org/apache/commons/math/special/Erf,60,53,"            ret = -ret;
",4,0,0,0,0,0,0,0,0,6,11,6,0.16667,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,125,"        final double dev = x - mean;
",6,1,0,0,0,1,0,0,0,8,28,4,0.14286,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,127,"        return 0.5 * (1.0 + Erf.erf((dev) /
",2,3,0,1,4,1,4,0,0,9,35,6,0.14286,0,-1
defect4j,math,org/apache/commons/math/special/Erf,60,51,"        double ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);
",6,1,0,1,2,0,4,0,0,11,65,5,0.14286,0,-1
defect4j,math,org/apache/commons/math/special/Erf,60,52,"        if (x < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.14286,0,-1
defect4j,math,org/apache/commons/math/special/Erf,60,55,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,0.14286,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,47,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.07692,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07692,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,129,"        double p0 = 1.0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.07692,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,130,"        double p1 = getA(0, x);
",2,0,0,1,2,0,4,0,0,6,23,5,0.07692,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,131,"        double q0 = 0.0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.07692,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,132,"        double q1 = 1.0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.07692,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,133,"        double c = p1 / q1;
",6,1,0,0,0,0,0,0,0,7,19,5,0.07692,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,134,"        int n = 0;
",2,0,0,0,0,0,0,0,0,2,10,5,0.07692,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,135,"        double relativeError = Double.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,6,40,5,0.07692,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,136,"        while (n < maxIterations && relativeError > epsilon) {
",8,3,0,1,3,0,0,0,0,11,54,4,0.07692,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,137,"            ++n;
",2,0,0,0,0,0,0,0,0,3,4,6,0.07692,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,61,387,"        return new IllegalArgumentException() {
",0,0,0,1,3,1,0,2,0,2,39,6,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,316,"    private LocalizedFormats(final String sourceFormat) {
",4,0,0,1,3,2,0,2,0,8,53,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,317,"        this.sourceFormat = sourceFormat;
",4,0,0,0,0,0,0,0,0,5,33,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,318,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),
",2,0,0,5,10,0,0,0,0,3,67,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,45,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),
",2,0,0,4,8,0,0,0,0,3,94,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,46,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),
",2,0,0,1,2,0,0,0,0,3,41,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,47,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),
",2,0,0,1,2,0,0,0,0,3,95,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,48,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),
",2,0,0,1,2,0,0,0,0,3,60,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,49,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),
",2,0,0,1,2,0,0,0,0,3,54,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,50,"    BANDWIDTH_OUT_OF_INTERVAL(""bandwidth must be in the interval [0,1], but got {0}""),
",2,0,0,3,6,0,0,0,0,3,82,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,51,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n,k), got n = {0}, k = {1}""),
",2,0,0,4,8,0,0,0,0,3,107,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,52,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n,k), got n = {0}""),
",2,0,0,3,6,0,0,0,0,3,92,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,53,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),
",2,0,0,1,2,0,0,0,0,3,123,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,54,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),
",2,0,0,1,2,0,0,0,0,3,89,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,55,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),
",2,0,0,2,4,0,0,0,0,3,108,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),
",2,0,0,1,2,0,0,0,0,3,100,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,57,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),
",2,0,0,2,4,0,0,0,0,3,94,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,58,"    CANNOT_CONVERT_OBJECT_TO_FRACTION(""cannot convert given object to a fraction number: {0}""),
",2,0,0,2,4,0,0,0,0,3,91,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),
",2,0,0,3,6,0,0,0,0,3,97,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),
",2,0,0,2,4,0,0,0,0,3,83,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),
",2,0,0,2,4,0,0,0,0,3,86,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),
",2,0,0,2,4,0,0,0,0,3,87,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),
",2,0,0,1,2,0,0,0,0,3,84,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),
",2,0,0,1,2,0,0,0,0,3,131,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),
",2,0,0,1,2,0,0,0,0,3,75,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),
",2,0,0,2,4,0,0,0,0,3,98,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),
",2,0,0,2,4,0,0,0,0,3,78,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),
",2,0,0,1,2,0,0,0,0,3,95,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),
",2,0,0,2,4,0,0,0,0,3,74,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),
",2,0,0,1,2,0,0,0,0,3,55,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),
",2,0,0,3,6,0,0,0,0,3,79,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),
",2,0,0,2,4,0,0,0,0,3,115,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),
",2,0,0,5,10,0,0,0,0,3,78,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,74,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),
",2,0,0,2,4,0,0,0,0,3,112,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,75,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),
",2,0,0,2,4,0,0,0,0,3,86,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,76,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),
",2,0,0,5,10,0,0,0,0,3,290,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),
",2,0,0,3,6,0,0,0,0,3,263,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,78,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */
",2,0,0,1,2,0,0,0,0,3,52,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,35,"    private static final double EXP_INT_TABLE_A[] = new double[1500];
",2,0,0,2,4,3,0,0,0,5,65,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,40,"    private static final double EXP_INT_TABLE_B[] = new double[1500];
",2,0,0,2,4,3,0,0,0,5,65,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,45,"    private static final double EXP_FRAC_TABLE_A[] = new double[1025];
",2,0,0,2,4,3,0,0,0,5,66,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,50,"    private static final double EXP_FRAC_TABLE_B[] = new double[1025];
",2,0,0,2,4,3,0,0,0,5,66,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,53,"    private static final double FACT[] = new double[20];
",2,0,0,2,4,3,0,0,0,5,52,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,56,"    private static final double LN_MANT[][] = new double[1024][];
",2,0,0,4,8,3,0,0,0,5,61,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,65,"    private static final double LN_SPLIT_COEF[][] = {
",2,0,0,2,5,3,0,0,0,5,49,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,85,"    private static final double LN_QUICK_COEF[][] = {
",2,0,0,2,5,3,0,0,0,5,49,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,98,"    private static final double LN_HI_PREC_COEF[][] = {
",2,0,0,2,5,3,0,0,0,5,51,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,108,"    private static final double SINE_TABLE_A[] = new double[14];
",2,0,0,2,4,3,0,0,0,5,60,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,111,"    private static final double SINE_TABLE_B[] = new double[14];
",2,0,0,2,4,3,0,0,0,5,60,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,114,"    private static final double COSINE_TABLE_A[] = new double[14];
",2,0,0,2,4,3,0,0,0,5,62,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,117,"    private static final double COSINE_TABLE_B[] = new double[14];
",2,0,0,2,4,3,0,0,0,5,62,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,120,"    private static final double TANGENT_TABLE_A[] = new double[14];
",2,0,0,2,4,3,0,0,0,5,63,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,123,"    private static final double TANGENT_TABLE_B[] = new double[14];
",2,0,0,2,4,3,0,0,0,5,63,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,126,"    private static long RECIP_2PI[] = new long[] {
",2,0,0,2,5,2,0,0,0,4,46,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,147,"    private static long PI_O_4_BITS[] = new long[] {
",2,0,0,2,5,2,0,0,0,4,48,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,155,"    private static final double EIGHTHES[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};
",2,0,0,2,4,3,0,0,0,5,127,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,158,"    private static final double CBRTTWO[] = { 0.6299605249474366,
",2,0,0,1,3,3,0,0,0,5,61,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,169,"        FACT[0] = 1.0;
",0,0,1,1,2,0,0,0,0,3,14,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,170,"        for (i = 1; i < 20; i++) {
",6,1,0,1,3,0,0,0,0,9,26,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,171,"            FACT[i] = FACT[i-1] * i;
",4,2,1,2,4,0,0,0,0,13,24,6,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,174,"        double tmp[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,29,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,175,"        double recip[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,31,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,178,"        for (i = 0; i < 750; i++) {
",6,1,0,1,3,0,0,0,0,9,27,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,179,"            expint(i, tmp);
",0,0,0,1,2,0,6,0,0,6,15,7,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,180,"            EXP_INT_TABLE_A[i+750] = tmp[0];
",2,1,1,2,4,0,0,0,0,8,32,6,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,181,"            EXP_INT_TABLE_B[i+750] = tmp[1];
",2,1,1,2,4,0,0,0,0,8,32,6,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,183,"            if (i != 0) {
",2,1,0,1,3,0,0,0,0,3,13,6,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,185,"                splitReciprocal(tmp, recip);
",0,0,0,1,2,0,6,0,0,6,28,9,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,186,"                EXP_INT_TABLE_A[750-i] = recip[0];
",2,1,1,2,4,0,0,0,0,8,34,8,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,187,"                EXP_INT_TABLE_B[750-i] = recip[1];
",2,1,1,2,4,0,0,0,0,8,34,8,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,192,"        for (i = 0; i < 1025; i++) {
",6,1,0,1,3,0,0,0,0,9,28,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,193,"            slowexp(i/1024.0, tmp);
",2,1,0,1,2,0,4,0,0,7,23,7,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,194,"            EXP_FRAC_TABLE_A[i] = tmp[0];
",0,0,1,2,4,0,0,0,0,7,29,6,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,195,"            EXP_FRAC_TABLE_B[i] = tmp[1];
",0,0,1,2,4,0,0,0,0,7,29,6,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,199,"        for (i = 0; i < 1024; i++) {
",6,1,0,1,3,0,0,0,0,9,28,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,200,"            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );
",4,2,0,4,8,0,4,0,0,10,79,7,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,33,"public final class MathUtils {
",2,0,0,0,1,2,0,0,0,4,30,1,0.00228,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,75,"    private static final long[] FACTORIALS = new long[] {
",2,0,0,2,5,3,0,0,0,5,53,2,0.00228,0,-1
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,63,"        this(wrong, previous, index, MathUtils.OrderDirection.INCREASING, true);
",12,0,0,1,2,0,0,0,0,13,72,4,0.00000,0,-1
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,64,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0,-1
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,82,"        super(direction == MathUtils.OrderDirection.INCREASING ?
",8,1,0,0,1,0,0,0,0,9,56,5,0.00000,0,-1
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,91,"        this.direction = direction;
",4,0,0,0,0,0,0,0,0,5,27,4,0.00000,0,-1
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,92,"        this.strict = strict;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0,-1
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,93,"        this.index = index;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00000,0,-1
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,94,"        this.previous = previous;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0,-1
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,95,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0,-1
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,101,"        return direction;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0,-1
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,107,"        return strict;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0,-1
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,115,"        return index;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0,-1
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,121,"        return previous;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,50,"        super(specific, general, wrong, arguments);
",8,0,0,1,2,0,0,0,0,8,43,4,0.00000,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,51,"        argument = wrong;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00000,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,52,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,64,"        super(general, wrong, arguments);
",6,0,0,1,2,0,0,0,0,6,33,4,0.00000,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,65,"        argument = wrong;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00000,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,66,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,72,"        return argument;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,61,"                                           Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,0.00000,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,62,"        this.specific = specific;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,63,"        this.general = general;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00000,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,64,"        arguments = ArgUtils.flatten(args);
",2,0,0,1,2,0,6,0,0,9,35,4,0.00000,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,65,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,72,"        this(null, general, args);
",4,0,0,1,2,0,0,0,0,4,26,4,0.00000,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,73,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,83,"        return MessageFactory.buildMessage(locale, specific, general, arguments);
",0,0,0,1,2,1,12,0,0,12,73,5,0.00000,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,89,"        return getMessage(Locale.US);
",4,0,0,1,2,1,2,0,0,6,29,5,0.00000,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,402,"                            tmp = 0.1;
",2,0,0,0,0,0,0,0,0,3,10,12,0.28571,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,627,"            } else if (fp < 0) {
",2,1,0,1,4,0,0,0,0,3,20,7,0.25000,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,628,"                paru = Math.min(paru, lmPar);
",2,0,0,1,2,0,8,0,0,11,29,9,0.25000,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,605,"            for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,6,0.21053,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,606,"                int pj = permutation[j];
",2,0,1,1,2,0,0,0,0,6,24,9,0.21053,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,607,"                work1[pj] = work3[pj] * diag[pj] / dxNorm;
",2,2,1,3,6,0,0,0,0,17,42,8,0.21053,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,609,"            for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,6,0.21053,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,610,"                int pj = permutation[j];
",2,0,1,1,2,0,0,0,0,6,24,9,0.21053,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,611,"                work1[pj] /= work2[j];
",0,0,1,2,4,0,0,0,0,9,22,8,0.21053,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,612,"                double tmp = work1[pj];
",2,0,1,1,2,0,0,0,0,6,23,9,0.21053,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,613,"                for (int i = j + 1; i < solvedCols; ++i) {
",10,2,0,1,3,0,0,0,0,13,42,8,0.21053,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,275,"        updateJacobian();
",0,0,0,1,2,0,2,0,0,2,17,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,278,"        double[][] jTj = new double[cols][cols];
",2,0,1,4,8,0,0,0,0,6,40,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,279,"        for (int i = 0; i < cols; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,280,"            for (int j = i; j < cols; ++j) {
",10,1,0,1,3,0,0,0,0,12,32,6,1.00000,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,281,"                double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,9,1.00000,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,282,"                for (int k = 0; k < rows; ++k) {
",8,1,0,1,3,0,0,0,0,10,32,8,1.00000,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,283,"                    sum += jacobian[k][i] * jacobian[k][j];
",2,1,1,4,8,0,0,0,0,16,39,10,1.00000,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,285,"                jTj[i][j] = sum;
",2,0,1,2,4,0,0,0,0,9,16,8,1.00000,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,286,"                jTj[j][i] = sum;
",2,0,1,2,4,0,0,0,0,9,16,8,1.00000,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,292,"            RealMatrix inverse =
",2,0,0,0,0,0,0,2,0,4,20,6,1.00000,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,312,"        if (rows <= cols) {
",4,1,0,1,3,0,0,0,0,5,19,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,65,44,"    protected AbstractRealMatrix() {
",2,0,0,1,3,1,0,0,0,3,32,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,65,45,"        lu = null;
",2,0,0,0,0,0,0,0,0,3,10,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,65,46,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,77,"        super(rowDimension, columnDimension);
",4,0,0,1,2,0,0,0,0,4,37,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,78,"        data = new double[rowDimension][columnDimension];
",2,0,1,2,4,0,0,0,0,7,49,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,79,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,95,"        throws IllegalArgumentException, NullPointerException {
",4,0,0,0,1,0,0,0,0,4,55,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,96,"        copyIn(d);
",0,0,0,1,2,0,4,0,0,4,10,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,97,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,298,"        return copyOut();
",0,0,0,1,2,1,2,0,0,2,17,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,316,"        if (data == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,317,"            if (row > 0) {
",2,1,0,1,3,0,0,0,0,3,14,6,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,321,"            if (column > 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,325,"            final int nRows = subMatrix.length;
",6,0,0,0,0,1,0,0,0,7,35,6,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,326,"            if (nRows == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,331,"            final int nCols = subMatrix[0].length;
",4,0,1,1,2,1,0,0,0,7,38,6,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,332,"            if (nCols == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,336,"            data = new double[subMatrix.length][nCols];
",6,0,1,2,4,0,0,0,0,9,43,6,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,337,"            for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,338,"                if (subMatrix[i].length != nCols) {
",4,1,1,2,5,0,0,0,0,9,35,8,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,342,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);
",4,1,1,3,6,0,8,0,0,19,64,9,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,344,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,348,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,367,"            data[row][column] = value;
",2,0,1,2,4,0,0,0,0,9,26,6,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,371,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,372,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,401,"        return (data == null) ? 0 : data.length;
",6,1,0,1,2,1,0,0,0,7,40,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,407,"        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;
",4,3,1,5,10,1,0,0,0,11,66,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,597,"        final int nRows = this.getRowDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,598,"        final double[][] out = new double[nRows][this.getColumnDimension()];
",2,0,1,5,10,1,2,0,0,7,68,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,600,"        for (int i = 0; i < nRows; i++) {
",8,1,0,1,3,0,0,0,0,10,33,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,601,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);
",2,0,1,4,8,0,4,0,0,18,56,7,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,603,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,617,"        setSubMatrix(in, 0, 0);
",0,0,0,1,2,0,4,0,0,4,23,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,618,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,361,"            final int m = pivot.length;
",6,0,0,0,0,1,0,0,0,7,27,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,362,"            if (b.getRowDimension() != m) {
",2,1,0,2,5,0,4,0,0,7,31,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,367,"            if (singular) {
",2,0,0,1,3,0,0,0,0,2,15,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,417,"            return solve(MatrixUtils.createRealIdentityMatrix(pivot.length));
",4,0,0,2,4,1,6,0,0,10,65,6,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,65,62,"        return (rows * columns <= 4096) ?
",4,2,0,1,2,1,0,0,0,6,33,6,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,65,107,"        return (data.length * data[0].length <= 4096) ?
",6,2,1,2,4,1,0,0,0,10,47,6,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,65,143,"        final RealMatrix m = createRealMatrix(dimension, dimension);
",2,0,0,1,2,1,6,2,0,11,60,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,65,144,"        for (int i = 0; i < dimension; ++i) {
",8,1,0,1,3,0,0,0,0,10,37,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,65,145,"            m.setEntry(i, i, 1.0);
",0,0,0,1,2,0,8,0,0,8,22,7,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,65,147,"        return m;
",2,0,0,0,0,1,0,0,0,2,9,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,149,"        return objectiveEvaluations;
",2,0,0,0,0,1,0,0,0,2,28,4,0.33333,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,154,"        return jacobianEvaluations;
",2,0,0,0,0,1,0,0,0,2,27,4,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,161,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07143,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,106,"                final double[] luRow = lu[row];
",2,0,1,2,4,1,0,0,0,7,31,8,0.06250,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,107,"                sum = luRow[col];
",2,0,1,1,2,0,0,0,0,7,17,8,0.06250,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,108,"                for (int i = 0; i < row; i++) {
",8,1,0,1,3,0,0,0,0,10,31,8,0.06250,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,152,"        return evaluations;
",2,0,0,0,0,1,0,0,0,2,19,4,1,0,-1
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,66,82,"        return iterationCount;
",2,0,0,0,0,1,0,0,0,2,22,4,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,107,"            a = lo;
",4,0,0,0,0,0,0,0,0,5,7,6,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,108,"            b = hi;
",4,0,0,0,0,0,0,0,0,5,7,6,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,158,"                        d = p / q;
",6,1,0,0,0,0,0,0,0,8,10,12,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,159,"                        u = x + d;
",6,1,0,0,0,0,0,0,0,8,10,12,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,162,"                        if (u - a < tol2
",6,2,0,0,1,0,0,0,0,8,16,13,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,175,"                            e = a - x;
",6,1,0,0,0,0,0,0,0,8,10,14,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,182,"                        e = b - x;
",6,1,0,0,0,0,0,0,0,8,10,12,1,0,-1
defect4j,math,org/apache/commons/math/optimization/GoalType,66,27,"public enum GoalType implements Serializable {
",2,0,0,0,1,1,0,2,0,5,46,1,1,0,-1
defect4j,math,org/apache/commons/math/optimization/GoalType,66,30,"    MAXIMIZE,
",2,0,0,0,0,0,0,0,0,2,9,2,1,0,-1
defect4j,math,org/apache/commons/math/optimization/GoalType,66,33,"    MINIMIZE
",2,0,0,0,0,0,0,0,0,2,8,2,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,43,"    public BrentOptimizer() {
",2,0,0,1,3,1,0,0,0,3,25,2,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,44,"        setMaxEvaluations(Integer.MAX_VALUE);
",4,0,0,1,2,0,2,0,0,6,37,5,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,45,"        setMaximalIterationCount(100);
",0,0,0,1,2,0,2,0,0,2,30,5,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,46,"        setAbsoluteAccuracy(1E-10);
",0,0,0,1,2,0,2,0,0,2,27,5,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,47,"        setRelativeAccuracy(1.0e-14);
",0,0,0,1,2,0,2,0,0,2,29,5,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,38,"    private static final double GOLDEN_SECTION = 0.5 * (3 - Math.sqrt(5));
",2,2,0,2,4,3,4,0,0,11,70,2,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,60,"        clearResult();
",0,0,0,1,2,0,2,0,0,2,14,5,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,61,"        return localMin(getGoalType() == GoalType.MINIMIZE,
",4,1,0,1,3,1,4,0,0,9,51,5,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,99,"        if (eps <= 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,102,"        if (t <= 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,106,"        if (lo < hi) {
",4,1,0,1,3,0,0,0,0,5,14,4,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,114,"        double x = mid;
",4,0,0,0,0,0,0,0,0,4,15,5,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,115,"        double v = x;
",4,0,0,0,0,0,0,0,0,4,13,5,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,116,"        double w = x;
",4,0,0,0,0,0,0,0,0,4,13,5,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,117,"        double d = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,118,"        double e = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,119,"        double fx = computeObjectiveValue(f, x);
",2,0,0,1,2,0,6,0,0,8,40,5,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,43,"        super(100, 1E-10);
",0,0,0,1,2,0,0,0,0,0,18,3,1.00000,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,44,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,37,"    private static final double GOLDEN_SECTION = 0.5 * (3 - Math.sqrt(5));
",2,2,0,2,4,3,4,0,0,11,70,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,57,"        clearResult();
",0,0,0,1,2,0,2,0,0,2,14,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,58,"        return localMin(f, goalType, min, max, relativeAccuracy, absoluteAccuracy);
",0,0,0,1,2,1,14,0,0,14,75,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,88,"        double x = a + GOLDEN_SECTION * (b - a);
",10,3,0,1,2,0,0,0,0,13,40,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,89,"        double v = x;
",4,0,0,0,0,0,0,0,0,4,13,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,90,"        double w = x;
",4,0,0,0,0,0,0,0,0,4,13,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,91,"        double e = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,92,"        double fx = computeObjectiveValue(f, x);
",2,0,0,1,2,0,6,0,0,8,40,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,93,"        if (goalType == GoalType.MAXIMIZE) {
",6,1,0,1,3,0,0,0,0,7,36,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,381,"                            tmp = 0.1;
",2,0,0,0,0,0,0,0,0,3,10,12,0.28571,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,607,"            } else if (fp < 0) {
",2,1,0,1,4,0,0,0,0,3,20,7,0.28571,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,608,"                paru = Math.min(paru, lmPar);
",2,0,0,1,2,0,8,0,0,11,29,9,0.28571,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,510,"            for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,6,0.25000,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,511,"                int pj = permutation[j];
",2,0,1,1,2,0,0,0,0,6,24,9,0.25000,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,512,"                work1[pj] *= diag[pj] / dxNorm;
",2,1,1,2,4,0,0,0,0,12,31,8,0.25000,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,514,"            sum2 = 0;
",2,0,0,0,0,0,0,0,0,3,9,6,0.25000,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,515,"            for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,6,0.25000,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,516,"                int pj = permutation[j];
",2,0,1,1,2,0,0,0,0,6,24,9,0.25000,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,517,"                double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,9,0.25000,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,161,"        TDistribution tDistribution = new TDistributionImpl(nObs - 2);
",4,1,0,1,2,0,0,4,0,9,62,4,0.80000,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,162,"        int nVars = correlationMatrix.getColumnDimension();
",2,0,0,1,2,0,4,0,0,6,51,5,0.80000,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,163,"        double[][] out = new double[nVars][nVars];
",2,0,1,4,8,0,0,0,0,6,42,5,0.80000,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,164,"        for (int i = 0; i < nVars; i++) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.80000,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,165,"            for (int j = 0; j < nVars; j++) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.80000,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,166,"                if (i == j) {
",4,1,0,1,3,0,0,0,0,5,13,8,0.80000,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,167,"                    out[i][j] = 0d;
",0,0,1,2,4,0,0,0,0,7,15,10,0.80000,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,169,"                    double r = correlationMatrix.getEntry(i, j);
",2,0,0,1,2,0,8,0,0,10,44,11,0.80000,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,170,"                    double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));
",10,5,0,4,8,0,8,0,0,23,59,11,0.80000,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,175,"        return new BlockRealMatrix(out);
",2,0,0,1,2,1,0,2,0,4,32,5,0.80000,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,46,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.80000,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.80000,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,128,"        double p0 = 1.0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.80000,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,129,"        double p1 = getA(0, x);
",2,0,0,1,2,0,4,0,0,6,23,5,0.80000,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,130,"        double q0 = 0.0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.80000,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,131,"        double q1 = 1.0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.80000,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,132,"        double c = p1 / q1;
",6,1,0,0,0,0,0,0,0,7,19,5,0.80000,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,133,"        int n = 0;
",2,0,0,0,0,0,0,0,0,2,10,5,0.80000,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,134,"        double relativeError = Double.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,6,40,5,0.80000,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,135,"        while (n < maxIterations && relativeError > epsilon) {
",8,3,0,1,3,0,0,0,0,11,54,4,0.80000,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,136,"            ++n;
",2,0,0,0,0,0,0,0,0,3,4,6,0.80000,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,137,"            double a = getA(n, x);
",2,0,0,1,2,0,6,0,0,8,22,7,0.80000,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,138,"            double b = getB(n, x);
",2,0,0,1,2,0,6,0,0,8,22,7,0.80000,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,139,"            double p2 = a * p1 + b * p0;
",10,3,0,0,0,0,0,0,0,13,28,7,0.80000,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,140,"            double q2 = a * q1 + b * q0;
",10,3,0,0,0,0,0,0,0,13,28,7,0.80000,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,141,"            boolean infinite = false;
",2,0,0,0,0,0,0,0,0,3,25,7,0.80000,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,142,"            if (Double.isInfinite(p2) || Double.isInfinite(q2)) {
",0,1,0,3,7,0,12,0,0,13,53,6,0.80000,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,175,"            if (infinite) {
",2,0,0,1,3,0,0,0,0,2,15,6,0.80000,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,182,"            double r = p2 / q2;
",6,1,0,0,0,0,0,0,0,7,19,7,0.80000,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,184,"            if (Double.isNaN(r)) {
",0,0,0,2,5,0,6,0,0,6,22,7,0.80000,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,189,"            relativeError = Math.abs(r / c - 1.0);
",6,2,0,1,2,0,4,0,0,13,38,6,0.80000,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,192,"            c = p2 / q2;
",6,1,0,0,0,0,0,0,0,8,12,6,0.80000,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,193,"            p0 = p1;
",4,0,0,0,0,0,0,0,0,5,8,6,0.80000,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,194,"            p1 = p2;
",4,0,0,0,0,0,0,0,0,5,8,6,0.80000,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,195,"            q0 = q1;
",4,0,0,0,0,0,0,0,0,5,8,6,0.80000,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,196,"            q1 = q2;
",4,0,0,0,0,0,0,0,0,5,8,6,0.80000,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,197,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.80000,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,199,"        if (n >= maxIterations) {
",4,1,0,1,3,0,0,0,0,5,25,4,0.80000,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,205,"        return c;
",2,0,0,0,0,1,0,0,0,2,9,4,0.80000,0,-1
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,128,"        if (x == 0.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.80000,0,-1
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,131,"            double t =
",2,0,0,0,0,0,0,0,0,2,10,7,0.80000,0,-1
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,136,"            if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.80000,0,-1
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,139,"                ret = 1.0 - 0.5 * t;
",4,2,0,0,0,0,0,0,0,7,20,8,0.80000,0,-1
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,143,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,0.80000,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,69,41,"    private static final double[] LANCZOS =
",2,0,0,1,2,3,0,0,0,5,39,2,0.80000,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,69,61,"    private static final double HALF_LOG_2_PI = 0.5 * Math.log(2.0 * Math.PI);
",6,2,0,1,2,3,4,0,0,15,74,2,0.80000,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,69,97,"        if (Double.isNaN(x) || (x <= 0.0)) {
",2,2,0,3,7,0,6,0,0,10,36,4,0.80000,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,69,100,"            double g = 607.0 / 128.0;
",2,1,0,0,0,0,0,0,0,3,25,7,0.80000,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,69,102,"            double sum = 0.0;
",2,0,0,0,0,0,0,0,0,2,17,7,0.80000,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,69,103,"            for (int i = LANCZOS.length - 1; i > 0; --i) {
",10,2,0,1,3,0,0,0,0,13,46,6,0.80000,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,69,104,"                sum = sum + (LANCZOS[i] / (x + i));
",8,3,1,3,6,0,0,0,0,16,35,8,0.80000,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,69,106,"            sum = sum + LANCZOS[0];
",4,1,1,1,2,0,0,0,0,8,23,6,0.80000,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,69,108,"            double tmp = x + g + .5;
",6,1,0,0,0,0,0,0,0,7,24,7,0.80000,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,69,109,"            ret = ((x + .5) * Math.log(tmp)) - tmp +
",6,5,0,3,6,0,6,0,0,18,40,6,0.80000,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,69,113,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,0.80000,0,-1
defect4j,math,org/apache/commons/math/special/Beta,69,54,"        return regularizedBeta(x, a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);
",4,0,0,1,2,1,10,0,0,14,68,5,0.80000,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,66,"        return solve(f, min, max);
",0,0,0,1,2,1,8,0,0,8,26,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,70,223,"        return (a + b) * .5;
",4,2,0,1,2,1,0,0,0,6,20,4,0.33333,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,165,"        this.iterationCount = 0;
",2,0,0,0,0,0,0,0,0,3,24,4,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator,71,180,"                loop     = false;
",2,0,0,0,0,0,0,0,0,4,17,12,1.00000,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,150,"    if ((initialStepSize < minStep) || (initialStepSize > maxStep)) {
",8,3,0,3,7,0,0,0,0,11,65,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,153,"      initialStep = initialStepSize;
",4,0,0,0,0,0,0,0,0,5,30,6,0.50000,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,155,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,211,"      return forward ? initialStep : -initialStep;
",6,0,0,0,0,1,0,0,0,7,44,7,0.50000,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,292,"          filteredH = maxStep;
",4,0,0,0,0,0,0,0,0,5,20,6,0.33333,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,335,"                x1 = x1 + 0.5 * tolerance;
",6,2,0,0,0,0,0,0,0,9,26,9,0.28571,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,71,107,"      System.arraycopy(currentState,      0, interpolatedState,       0, currentState.length);
",4,0,0,1,2,0,8,0,0,12,88,5,0.18182,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,71,108,"      System.arraycopy(currentDerivative, 0, interpolatedDerivatives, 0, currentDerivative.length);
",4,0,0,1,2,0,8,0,0,12,93,5,0.18182,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,71,109,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.18182,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,71,107,"  protected AbstractStepInterpolator(final double[] y, final boolean forward) {
",6,0,0,2,5,3,0,0,0,9,77,2,0.17391,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,71,109,"    previousTime      = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,31,4,0.17391,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,71,110,"    currentTime       = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,31,4,0.17391,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,71,111,"    h                 = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,31,4,0.17391,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,71,112,"    interpolatedTime  = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,31,4,0.17391,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,71,114,"    currentState            = y;
",4,0,0,0,0,0,0,0,0,5,28,4,0.17391,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,71,115,"    interpolatedState       = new double[y.length];
",6,0,0,1,2,0,0,0,0,7,47,4,0.17391,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,196,"        return (start < mid) && (mid < end);
",8,3,0,2,4,1,0,0,0,11,36,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,225,"        if (!isSequence(lower, initial, upper)) {
",0,0,0,2,5,0,8,0,0,9,41,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,230,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,73,196,"        return (start < mid) && (mid < end);
",8,3,0,2,4,1,0,0,0,11,36,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,73,225,"        if (!isSequence(lower, initial, upper)) {
",0,0,0,2,5,0,8,0,0,9,41,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,73,230,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,102,"        clearResult();
",0,0,0,1,2,0,2,0,0,2,14,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,103,"        verifySequence(min, initial, max);
",0,0,0,1,2,0,8,0,0,8,34,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,292,"          filteredH = maxStep;
",4,0,0,0,0,0,0,0,0,5,20,6,1.00000,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,309,"                    final double factor = computeStepGrowShrinkFactor(error);
",2,0,0,1,2,1,4,0,0,7,57,10,1.00000,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,310,"                    hNew = filterStep(stepSize * factor, forward, false);
",6,1,0,1,2,0,4,0,0,13,53,10,1.00000,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,311,"                    interpolator.rescale(hNew);
",0,0,0,1,2,0,6,0,0,6,27,11,1.00000,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,290,"                        final double dt = manager.getEventTime() - stepStart;
",4,1,0,1,2,1,4,0,0,10,53,12,0.50000,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,291,"                        if (Math.abs(dt) <= Math.ulp(stepStart)) {
",0,1,0,3,7,0,12,0,0,13,42,12,0.50000,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,296,"                            hNew = dt;
",4,0,0,0,0,0,0,0,0,5,10,14,0.50000,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,297,"                            interpolator.rescale(hNew);
",0,0,0,1,2,0,6,0,0,6,27,15,0.50000,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,299,"                    } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.50000,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,356,"        final double stopTime  = stepStart;
",4,0,0,0,0,1,0,0,0,5,35,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,357,"        stepStart = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,23,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,358,"        stepSize  = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,23,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,359,"        return stopTime;
",2,0,0,0,0,1,0,0,0,2,16,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,919,"        return walkInRowOrder(visitor);
",0,0,0,1,2,1,4,0,0,4,31,5,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,496,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,497,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,498,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,499,"        for (int i = 0; i < rows; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,500,"            final double[] rowI = data[i];
",2,0,1,2,4,1,0,0,0,7,30,6,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,501,"            for (int j = 0; j < columns; ++j) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,502,"                visitor.visit(i, j, rowI[j]);
",0,0,1,2,4,0,8,0,0,12,29,9,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,505,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,236,"        interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);
",0,0,0,1,2,0,12,0,0,12,66,5,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,237,"        interpolator.storeTime(stepStart);
",0,0,0,1,2,0,6,0,0,6,34,5,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,239,"        double hNew = stepSize;
",4,0,0,0,0,0,0,0,0,4,23,5,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,240,"        interpolator.rescale(hNew);
",0,0,0,1,2,0,6,0,0,6,27,5,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,242,"        boolean lastStep = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,243,"        while (!lastStep) {
",2,0,0,1,3,0,0,0,0,3,19,4,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,246,"            interpolator.shift();
",0,0,0,1,2,0,4,0,0,4,21,7,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,248,"            double error = 0;
",2,0,0,0,0,0,0,0,0,2,17,7,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,249,"            for (boolean loop = true; loop;) {
",4,0,0,1,3,0,0,0,0,5,34,6,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,251,"                stepSize = hNew;
",4,0,0,0,0,0,0,0,0,5,16,8,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,254,"                final double stepEnd = stepStart + stepSize;
",6,1,0,0,0,1,0,0,0,8,44,8,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,255,"                interpolator.setInterpolatedTime(stepEnd);
",0,0,0,1,2,0,6,0,0,6,42,9,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,256,"                System.arraycopy(interpolator.getInterpolatedState(), 0, yTmp, 0, y0.length);
",4,0,0,2,4,0,10,0,0,14,77,9,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,259,"                computeDerivatives(stepEnd, yTmp, yDot);
",0,0,0,1,2,0,8,0,0,8,40,9,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,262,"                final double[] predictedScaled = new double[y0.length];
",6,0,0,2,4,1,0,0,0,7,55,8,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,263,"                for (int j = 0; j < y0.length; ++j) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,264,"                    predictedScaled[j] = stepSize * yDot[j];
",2,1,1,2,4,0,0,0,0,12,40,10,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,266,"                final Array2DRowRealMatrix nordsieckTmp = updateHighOrderDerivativesPhase1(nordsieck);
",2,0,0,1,2,1,4,2,0,9,86,8,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,267,"                updateHighOrderDerivativesPhase2(scaled, predictedScaled, nordsieckTmp);
",0,0,0,1,2,0,8,0,0,8,72,9,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,270,"                error = nordsieckTmp.walkInOptimizedOrder(new Corrector(y, predictedScaled, yTmp));
",8,0,0,2,4,0,4,2,0,15,83,8,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,272,"                if (error <= 1.0) {
",2,1,0,1,3,0,0,0,0,3,19,8,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,275,"                    computeDerivatives(stepEnd, yTmp, yDot);
",0,0,0,1,2,0,8,0,0,8,40,11,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,278,"                    final double[] correctedScaled = new double[y0.length];
",6,0,0,2,4,1,0,0,0,7,55,10,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,279,"                    for (int j = 0; j < y0.length; ++j) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,280,"                        correctedScaled[j] = stepSize * yDot[j];
",2,1,1,2,4,0,0,0,0,12,40,12,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,282,"                    updateHighOrderDerivativesPhase2(predictedScaled, correctedScaled, nordsieckTmp);
",0,0,0,1,2,0,8,0,0,8,81,11,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,285,"                    interpolatorTmp.reinitialize(stepEnd, stepSize, correctedScaled, nordsieckTmp);
",0,0,0,1,2,0,12,0,0,12,79,11,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,286,"                    interpolatorTmp.storeTime(stepStart);
",0,0,0,1,2,0,6,0,0,6,37,11,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,287,"                    interpolatorTmp.shift();
",0,0,0,1,2,0,4,0,0,4,24,11,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,288,"                    interpolatorTmp.storeTime(stepEnd);
",0,0,0,1,2,0,6,0,0,6,35,11,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,289,"                    if (manager.evaluateStep(interpolatorTmp)) {
",0,0,0,2,5,0,6,0,0,6,44,11,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,301,"                        scaled    = correctedScaled;
",4,0,0,0,0,0,0,0,0,5,28,12,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,302,"                        nordsieck = nordsieckTmp;
",4,0,0,0,0,0,0,0,0,5,25,12,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,303,"                        interpolator.reinitialize(stepEnd, stepSize, scaled, nordsieck);
",0,0,0,1,2,0,12,0,0,12,64,13,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,304,"                        loop = false;
",2,0,0,0,0,0,0,0,0,4,13,12,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,307,"                } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,314,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,317,"            final double nextStep = stepStart + stepSize;
",6,1,0,0,0,1,0,0,0,8,45,6,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,318,"            System.arraycopy(yTmp, 0, y, 0, n);
",0,0,0,1,2,0,10,0,0,10,35,7,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,319,"            interpolator.storeTime(nextStep);
",0,0,0,1,2,0,6,0,0,6,33,7,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,320,"            manager.stepAccepted(nextStep, y);
",0,0,0,1,2,0,8,0,0,8,34,7,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,321,"            lastStep = manager.stop();
",2,0,0,1,2,0,4,0,0,7,26,6,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,324,"            for (StepHandler handler : stepHandlers) {
",4,0,0,1,3,0,0,2,0,6,42,6,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,325,"                interpolator.setInterpolatedTime(nextStep);
",0,0,0,1,2,0,6,0,0,6,43,9,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,326,"                handler.handleStep(interpolator, lastStep);
",0,0,0,1,2,0,8,0,0,8,43,9,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,327,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,328,"            stepStart = nextStep;
",4,0,0,0,0,0,0,0,0,5,21,6,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,330,"            if (!lastStep && manager.reset(stepStart, y)) {
",2,1,0,2,5,0,8,0,0,12,47,6,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,339,"            if (! lastStep) {
",2,0,0,1,3,0,0,0,0,3,17,6,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,343,"                stepSize = filterStep(stepSize, forward, true);
",2,0,0,1,2,0,6,0,0,10,47,8,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,346,"                final double  factor     = computeStepGrowShrinkFactor(error);
",2,0,0,1,2,1,4,0,0,7,62,8,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,347,"                final double  scaledH    = stepSize * factor;
",6,1,0,0,0,1,0,0,0,8,45,8,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,348,"                final double  nextT      = stepStart + scaledH;
",6,1,0,0,0,1,0,0,0,8,47,8,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,349,"                final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);
",12,2,0,2,4,1,0,0,0,15,65,8,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,350,"                hNew = filterStep(scaledH, forward, nextIsLast);
",2,0,0,1,2,0,8,0,0,11,48,8,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,351,"                interpolator.rescale(hNew);
",0,0,0,1,2,0,6,0,0,6,27,9,0.33333,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,354,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.33333,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,75,331,"        return getPct(Long.valueOf(v));
",0,0,0,2,4,1,8,0,0,8,31,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,75,386,"            return getCumFreq(((Integer) v).longValue());
",2,0,0,4,8,1,4,2,0,8,45,7,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,143,"            --p;
",2,0,0,0,0,0,0,0,0,3,4,6,1,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,283,"        if (cachedVt == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,1,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,284,"            cachedVt = getV().transpose();
",2,0,0,2,4,0,4,0,0,7,30,6,1,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,288,"        return cachedVt;
",2,0,0,0,0,1,0,0,0,2,16,4,1,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,182,"                    wData[i] = new double[p];
",0,0,1,2,4,0,0,0,0,7,25,10,0.80000,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,217,"        if (cachedS == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.80000,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,220,"            cachedS = MatrixUtils.createRealDiagonalMatrix(singularValues);
",2,0,0,1,2,0,6,0,0,9,63,6,0.80000,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,223,"        return cachedS;
",2,0,0,0,0,1,0,0,0,2,15,4,0.80000,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,202,"        final RealMatrix m = createRealMatrix(diagonal.length, diagonal.length);
",10,0,0,1,2,1,2,2,0,15,72,4,0.80000,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,203,"        for (int i = 0; i < diagonal.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,43,4,0.80000,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,204,"            m.setEntry(i, i, diagonal[i]);
",0,0,1,2,4,0,8,0,0,12,30,7,0.80000,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,206,"        return m;
",2,0,0,0,0,1,0,0,0,2,9,4,0.80000,0,-1
defect4j,math,org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,76,30,"public class DefaultRealMatrixPreservingVisitor implements RealMatrixPreservingVisitor {
",2,0,0,0,1,1,0,2,0,5,88,1,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,76,35,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,76,44,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,195,"        return walkInColumnOrder(new RealMatrixPreservingVisitor() {
",0,0,0,1,4,1,2,2,0,4,60,5,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,603,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,604,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,605,"        final RealMatrix out = createMatrix(nCols, nRows);
",2,0,0,1,2,1,6,2,0,11,50,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,606,"        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {
",0,0,0,1,4,0,2,2,0,4,63,5,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,616,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,919,"        return walkInRowOrder(visitor);
",0,0,0,1,2,1,4,0,0,4,31,5,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,195,"        return walkInColumnOrder(new RealMatrixPreservingVisitor() {
",0,0,0,1,4,1,2,2,0,4,60,5,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,210,"                this.endRow = endRow;
",4,0,0,0,0,0,0,0,0,5,21,10,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,211,"                columnSum   = 0;
",2,0,0,0,0,0,0,0,0,3,16,10,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,212,"                maxColSum   = 0;
",2,0,0,0,0,0,0,0,0,3,16,10,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,213,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,217,"                columnSum += Math.abs(value);
",2,0,0,1,2,0,6,0,0,9,29,10,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,218,"                if (row == endRow) {
",4,1,0,1,3,0,0,0,0,5,20,10,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,219,"                    maxColSum = Math.max(maxColSum, columnSum);
",2,0,0,1,2,0,8,0,0,11,43,12,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,220,"                    columnSum = 0;
",2,0,0,0,0,0,0,0,0,3,14,12,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,222,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,226,"                return maxColSum;
",2,0,0,0,0,1,0,0,0,2,17,10,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,633,"        if ((left.getRowDimension()    != right.getRowDimension()) ||
",0,2,0,3,7,0,8,0,0,10,61,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,640,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,235,"            return subtract((Array2DRowRealMatrix) m);
",2,0,0,2,4,1,2,2,0,6,42,7,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,252,"        MatrixUtils.checkSubtractionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,48,5,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,254,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,255,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,256,"        final double[][] outData = new double[rowCount][columnCount];
",2,0,1,4,8,1,0,0,0,7,61,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,257,"        for (int row = 0; row < rowCount; row++) {
",8,1,0,1,3,0,0,0,0,10,42,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,258,"            final double[] dataRow    = data[row];
",2,0,1,2,4,1,0,0,0,7,38,6,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,259,"            final double[] mRow       = m.data[row];
",6,0,1,2,4,1,0,0,0,9,40,6,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,260,"            final double[] outDataRow = outData[row];
",2,0,1,2,4,1,0,0,0,7,41,6,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,261,"            for (int col = 0; col < columnCount; col++) {
",8,1,0,1,3,0,0,0,0,10,45,6,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,262,"                outDataRow[col] = dataRow[col] - mRow[col];
",0,1,1,3,6,0,0,0,0,14,43,8,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,266,"        return new Array2DRowRealMatrix(outData, false);
",2,0,0,1,2,1,0,2,0,5,48,5,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,496,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,497,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,498,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,499,"        for (int i = 0; i < rows; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,500,"            final double[] rowI = data[i];
",2,0,1,2,4,1,0,0,0,7,30,6,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,501,"            for (int j = 0; j < columns; ++j) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,502,"                visitor.visit(i, j, rowI[j]);
",0,0,1,2,4,0,8,0,0,12,29,9,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,505,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,564,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,565,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,566,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,567,"        for (int j = 0; j < columns; ++j) {
",8,1,0,1,3,0,0,0,0,10,35,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,568,"            for (int i = 0; i < rows; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,6,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,569,"                visitor.visit(i, j, data[i][j]);
",0,0,1,3,6,0,8,0,0,14,32,9,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,572,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,606,"        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {
",0,0,0,1,4,0,2,2,0,4,63,5,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,611,"                out.setEntry(column, row, value);
",0,0,0,1,2,0,10,0,0,10,33,11,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,612,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,156,"        if (cachedU == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.44444,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,158,"            final int p = singularValues.length;
",6,0,0,0,0,1,0,0,0,7,36,6,0.44444,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,159,"            if (m >= n) {
",4,1,0,1,3,0,0,0,0,5,13,6,0.44444,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,161,"                final RealMatrix e =
",2,0,0,0,0,1,0,2,0,5,20,8,0.44444,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,163,"                final double[][] eData = e.getData();
",2,0,0,3,6,1,4,0,0,7,37,8,0.44444,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,164,"                final double[][] wData = new double[m][p];
",2,0,1,4,8,1,0,0,0,7,42,8,0.44444,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,165,"                double[] ei1 = eData[0];
",2,0,1,2,4,0,0,0,0,4,24,9,0.44444,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,166,"                for (int i = 0; i < p - 1; ++i) {
",8,2,0,1,3,0,0,0,0,11,33,8,0.44444,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,177,"                        for (int j = 0; j < p; ++j) {
",8,1,0,1,3,0,0,0,0,10,29,8,0.44444,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,178,"                            wData[p - 1][j] = ei1[j] * mainBidiagonal[p - 1] / singularValues[j];
",4,4,1,5,10,0,0,0,0,23,69,10,0.44444,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,181,"                for (int i = p; i < m; ++i) {
",10,1,0,1,3,0,0,0,0,12,29,8,0.44444,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,184,"                cachedU =
",2,0,0,0,0,0,0,0,0,3,9,8,0.44444,0,-1
