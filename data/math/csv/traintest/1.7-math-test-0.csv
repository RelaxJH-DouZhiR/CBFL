dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,predict
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,306,"                throw new FractionConversionException(value, p2, q2);
",6,0,0,1,2,0,0,2,0,8,53,9,0.50000,1,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,268,"        return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();
",0,2,0,6,12,1,6,0,0,8,90,4,0.16667,1,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,305,"            return NaN;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,1,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,372,"                    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,1,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,187,"        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
",10,0,0,6,12,1,10,4,0,25,99,4,0.00000,1,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,87,"        final Line reverted = new Line(zero, zero.subtract(direction));
",4,0,0,2,4,1,6,4,0,15,63,4,0.00000,1,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,183,"        return FastMath.pow(2 * FastMath.PI, -dim / 2) *
",6,3,0,1,2,1,4,0,0,14,48,4,0.50000,1,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,921,"            return
",0,0,0,0,0,1,0,0,0,0,6,3,0.06667,1,-1
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,1,53,"        super(LocalizedFormats.FRACTION_CONVERSION_OVERFLOW, value, p, q);
",10,0,0,1,2,0,0,0,0,10,66,4,1,0,-1
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,1,54,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,1,48,"                                Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,0.80000,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,1,49,"        getContext().addMessage(pattern, args);
",0,0,0,2,4,0,8,0,0,8,39,5,0.80000,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,1,50,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.80000,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,332,"            numerator   = BigInteger.valueOf(p1);
",2,0,0,1,2,0,6,0,0,9,37,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,333,"            denominator = BigInteger.valueOf(q1);
",2,0,0,1,2,0,6,0,0,9,37,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,356,"        this(value, 0, maxDenominator, 100);
",4,0,0,1,2,0,0,0,0,4,36,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,357,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,144,"       this(value, 0, maxDenominator, 100);
",4,0,0,1,2,0,0,0,0,4,36,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,145,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,215,"                throw new FractionConversionException(value, p2, q2);
",6,0,0,1,2,0,0,2,0,8,53,9,0.50000,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,239,"            this.numerator = (int) p1;
",4,0,0,1,2,0,0,0,0,5,26,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,240,"            this.denominator = (int) q1;
",4,0,0,1,2,0,0,0,0,5,28,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,69,"        this(LocalizedFormats.ILLEGAL_STATE);
",4,0,0,1,2,0,0,0,0,4,37,5,0.23529,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,70,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.23529,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,74,"        return context;
",2,0,0,0,0,1,0,0,0,2,15,4,0.23529,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,45,"                                     Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,0.22222,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,46,"        context = new ExceptionContext(this);
",2,0,0,1,2,0,0,2,0,5,37,4,0.22222,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,47,"        context.addMessage(pattern, args);
",0,0,0,1,2,0,8,0,0,8,34,5,0.22222,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.22222,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,329,"            numerator   = BigInteger.valueOf(p2);
",2,0,0,1,2,0,6,0,0,9,37,6,0.20000,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,330,"            denominator = BigInteger.valueOf(q2);
",2,0,0,1,2,0,6,0,0,9,37,6,0.20000,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,328,"        if (q2 < maxDenominator) {
",4,1,0,1,3,0,0,0,0,5,26,4,0.16667,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,335,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.16667,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,271,"        throws FractionConversionException {
",2,0,0,0,1,0,0,0,0,2,36,2,0.14286,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,272,"        long overflow = Integer.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,6,34,5,0.14286,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,273,"        double r0 = value;
",4,0,0,0,0,0,0,0,0,4,18,5,0.14286,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,274,"        long a0 = (long) FastMath.floor(r0);
",2,0,0,2,4,0,6,0,0,8,36,5,0.14286,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,275,"        if (a0 > overflow) {
",4,1,0,1,3,0,0,0,0,5,20,4,0.14286,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,281,"        if (FastMath.abs(a0 - value) < epsilon) {
",6,2,0,2,5,0,4,0,0,12,41,4,0.14286,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,287,"        long p0 = 1;
",2,0,0,0,0,0,0,0,0,2,12,5,0.14286,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,288,"        long q0 = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.14286,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,289,"        long p1 = a0;
",4,0,0,0,0,0,0,0,0,4,13,5,0.14286,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,290,"        long q1 = 1;
",2,0,0,0,0,0,0,0,0,2,12,5,0.14286,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,292,"        long p2 = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.14286,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,293,"        long q2 = 1;
",2,0,0,0,0,0,0,0,0,2,12,5,0.14286,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,295,"        int n = 0;
",2,0,0,0,0,0,0,0,0,2,10,5,0.14286,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,296,"        boolean stop = false;
",2,0,0,0,0,0,0,0,0,3,21,5,0.14286,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,298,"            ++n;
",2,0,0,0,0,0,0,0,0,3,4,6,0.14286,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,299,"            final double r1 = 1.0 / (r0 - a0);
",6,2,0,1,2,1,0,0,0,9,34,6,0.14286,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,300,"            final long a1 = (long) FastMath.floor(r1);
",2,0,0,2,4,1,6,0,0,9,42,6,0.14286,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,193,"        return inverseCumulativeProbability(random.nextDouble());
",0,0,0,2,4,1,6,0,0,6,57,5,1.00000,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,86,"        final int indexRm1 = iRm1[index];
",2,0,1,1,2,1,0,0,0,7,33,4,1.00000,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,87,"        final int indexRm2 = iRm2[index];
",2,0,1,1,2,1,0,0,0,7,33,4,1.00000,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,89,"        final int v0       = v[index];
",2,0,1,1,2,1,0,0,0,7,30,4,1.00000,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,90,"        final int vM1      = v[i1[index]];
",2,0,1,2,4,1,0,0,0,9,34,4,1.00000,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,91,"        final int vM2      = v[i2[index]];
",2,0,1,2,4,1,0,0,0,9,34,4,1.00000,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,92,"        final int vM3      = v[i3[index]];
",2,0,1,2,4,1,0,0,0,9,34,4,1.00000,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,94,"        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);
",2,3,1,4,8,1,0,0,0,14,71,4,1.00000,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,95,"        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));
",10,5,0,4,8,1,0,0,0,16,57,4,1.00000,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,96,"        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));
",8,4,0,3,6,1,0,0,0,13,49,4,1.00000,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,97,"        final int z3 = z1      ^ z2;
",6,1,0,0,0,1,0,0,0,8,28,4,1.00000,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,98,"        int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));
",16,7,0,6,12,0,0,0,0,23,72,5,1.00000,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,100,"        v[index]     = z3;
",2,0,1,1,2,0,0,0,0,7,18,4,1.00000,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,101,"        v[indexRm1]  = z4;
",2,0,1,1,2,0,0,0,0,7,18,4,1.00000,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,102,"        v[indexRm2] &= 0x80000000;
",0,0,1,1,2,0,0,0,0,5,26,4,1.00000,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,103,"        index        = indexRm1;
",4,0,0,0,0,0,0,0,0,5,24,4,1.00000,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,108,"        z4 = z4 ^ ((z4 <<  7) & 0xe46e1700);
",6,3,0,2,4,0,0,0,0,10,36,4,1.00000,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,109,"        z4 = z4 ^ ((z4 << 15) & 0x9b868000);
",6,3,0,2,4,0,0,0,0,10,36,4,1.00000,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,111,"        return z4 >>> (32 - bits);
",4,2,0,1,2,1,0,0,0,6,26,4,1.00000,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,90,"        final long high = ((long) next(26)) << 26;
",2,1,0,3,6,1,2,0,0,6,42,4,1.00000,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,91,"        final int  low  = next(26);
",2,0,0,1,2,1,2,0,0,5,27,4,1.00000,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,92,"        return (high | low) * 0x1.0p-52d;
",4,2,0,1,2,1,0,0,0,6,33,4,1.00000,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,130,"            double k = FastMath.sqrt((1.0 - p) / p);
",6,2,0,2,4,0,4,0,0,12,40,7,0.50000,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,131,"            double tmp = mu - k * sigma;
",8,2,0,0,0,0,0,0,0,10,28,7,0.50000,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,132,"            if (tmp > lower) {
",4,1,0,1,3,0,0,0,0,5,18,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,135,"            k = 1.0 / k;
",4,1,0,0,0,0,0,0,0,6,12,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,136,"            tmp = mu + k * sigma;
",8,2,0,0,0,0,0,0,0,11,21,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,137,"            if (tmp < upper) {
",4,1,0,1,3,0,0,0,0,5,18,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,138,"                upper = ((int) Math.ceil(tmp)) - 1;
",2,1,0,3,6,0,6,0,0,10,35,8,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,385,"        return Math.sqrt(a);
",0,0,0,1,2,1,6,0,0,6,20,5,0.20000,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,125,"        final double mu = getNumericalMean();
",2,0,0,1,2,1,2,0,0,5,37,4,0.20000,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,126,"        final double sigma = FastMath.sqrt(getNumericalVariance());
",2,0,0,2,4,1,6,0,0,9,59,4,0.20000,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,127,"        final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||
",2,1,0,2,5,1,12,0,0,17,79,4,0.20000,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,129,"        if (chebyshevApplies) {
",2,0,0,1,3,0,0,0,0,2,23,4,0.20000,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,142,"        return solveInverseCumulativeProbability(p, lower, upper);
",0,0,0,1,2,1,8,0,0,8,58,5,0.20000,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,816,"        final int len = a.length;
",6,0,0,0,0,1,0,0,0,7,25,4,0.09091,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,817,"        if (len != b.length) {
",6,1,0,1,3,0,0,0,0,7,22,4,0.09091,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,823,"        final double[] prodHigh = new double[len];
",2,0,1,2,4,1,0,0,0,5,42,4,0.09091,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,824,"        double prodLowSum = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.09091,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,826,"        for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.09091,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,827,"            final double ai = a[i];
",2,0,1,1,2,1,0,0,0,7,23,6,0.09091,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,828,"            final double ca = SPLIT_FACTOR * ai;
",6,1,0,0,0,1,0,0,0,8,36,6,0.09091,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,829,"            final double aHigh = ca - (ca - ai);
",8,2,0,1,2,1,0,0,0,11,36,6,0.09091,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,113,"        Line line1 = (Line) getHyperplane();
",2,0,0,2,4,0,2,4,0,8,36,4,0.14286,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,114,"        Line line2 = (Line) subLine.getHyperplane();
",2,0,0,2,4,0,4,4,0,10,44,4,0.14286,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,117,"        Vector2D v2D = line1.intersection(line2);
",2,0,0,1,2,0,6,2,0,10,41,4,0.14286,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,120,"        Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
",2,0,0,3,6,0,10,2,0,14,71,4,0.14286,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,56,"        this(new Line(start, end), buildIntervalSet(start, end));
",4,0,0,3,6,0,6,2,0,12,57,4,0.14286,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,57,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,113,"        Vector3D v1D = line.intersection(subLine.line);
",6,0,0,1,2,0,4,2,0,12,47,4,0.14286,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,116,"        Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));
",2,0,0,2,4,0,10,2,0,14,65,4,0.14286,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,156,"        return distance(p) < 1.0e-10;
",0,1,0,1,2,1,4,0,0,5,29,4,0.14286,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,164,"        final Vector3D d = p.subtract(zero);
",2,0,0,1,2,1,6,2,0,11,36,4,0.14286,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,165,"        final Vector3D n = new Vector3D(1.0, d, -d.dotProduct(direction), direction);
",6,0,0,2,4,1,6,4,0,18,77,4,0.14286,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,166,"        return n.getNorm();
",0,0,0,1,2,1,4,0,0,4,19,5,0.14286,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,195,"        final double cos = direction.dotProduct(line.direction);
",6,0,0,1,2,1,4,0,0,11,56,4,0.14286,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,196,"        final double n = 1 - cos * cos;
",6,2,0,0,0,1,0,0,0,9,31,4,0.14286,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,197,"        if (n < Precision.EPSILON) {
",6,1,0,1,3,0,0,0,0,7,28,4,0.14286,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,202,"        final Vector3D delta0 = line.zero.subtract(zero);
",6,0,0,1,2,1,4,2,0,13,49,4,0.14286,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,203,"        final double a        = delta0.dotProduct(direction);
",2,0,0,1,2,1,6,0,0,9,53,4,0.14286,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,204,"        final double b        = delta0.dotProduct(line.direction);
",6,0,0,1,2,1,4,0,0,11,58,4,0.14286,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,206,"        return new Vector3D(1, zero, (a - b * cos) / n, direction);
",12,3,0,2,4,1,0,2,0,17,59,5,0.14286,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,216,"        final Vector3D closest = closestPoint(line);
",2,0,0,1,2,1,4,2,0,9,44,4,0.14286,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,217,"        return line.contains(closest) ? closest : null;
",2,0,0,1,2,1,6,0,0,8,47,5,0.14286,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,56,"        super(new Line(start, end), buildIntervalSet(start, end));
",4,0,0,3,6,0,6,2,0,12,58,4,0.12500,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,57,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12500,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,137,"        final Line line = new Line(start, end);
",6,0,0,1,2,1,0,4,0,11,39,4,0.12500,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,138,"        return new IntervalsSet(line.toSubSpace(start).getX(),
",0,0,0,2,5,1,8,2,0,10,54,5,0.12500,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,114,"        return point.subtract(zero).dotProduct(direction);
",0,0,0,2,4,1,10,0,0,10,50,5,0.12500,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,129,"        return new Vector1D(getAbscissa((Vector3D) point));
",2,0,0,3,6,1,2,4,0,8,51,5,0.12500,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,118,"        final SubHyperplane<Euclidean1D> upperCut =
",2,0,0,0,0,1,0,4,0,7,43,4,0.12121,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,120,"        return new BSPTree<Euclidean1D>(lowerCut,
",2,0,0,0,1,1,0,4,0,6,41,5,0.12121,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,107,"        final SubHyperplane<Euclidean1D> lowerCut =
",2,0,0,0,0,1,0,4,0,7,43,4,0.11429,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,109,"        if (Double.isInfinite(upper) && (upper > 0)) {
",2,2,0,3,7,0,6,0,0,10,46,4,0.11429,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,139,"        final Line line = new Line(start, end);
",6,0,0,1,2,1,0,4,0,11,39,4,0.11111,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,140,"        return new IntervalsSet(line.toSubSpace(start).getX(),
",0,0,0,2,5,1,8,2,0,10,54,5,0.11111,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,47,"        super(buildTree(lower, upper));
",0,0,0,2,4,0,6,0,0,6,31,5,0.10811,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.10811,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,94,"        if (Double.isInfinite(lower) && (lower < 0)) {
",2,2,0,3,7,0,6,0,0,10,46,4,0.10811,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,115,"                   final Object attribute) {
",2,0,0,0,2,1,0,2,0,5,25,3,0.08696,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,116,"        this.cut       = cut;
",4,0,0,0,0,0,0,0,0,5,21,4,0.08696,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,117,"        this.plus      = plus;
",4,0,0,0,0,0,0,0,0,5,22,4,0.08696,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,118,"        this.minus     = minus;
",4,0,0,0,0,0,0,0,0,5,23,4,0.08696,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,119,"        this.parent    = null;
",2,0,0,0,0,0,0,0,0,3,22,4,0.08696,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,120,"        this.attribute = attribute;
",4,0,0,0,0,0,0,0,0,5,27,4,0.08696,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,121,"        plus.parent    = this;
",4,0,0,0,0,0,0,0,0,5,22,4,0.08696,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,122,"        minus.parent   = this;
",4,0,0,0,0,0,0,0,0,5,22,4,0.08696,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,123,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.08696,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/SubOrientedPoint,4,39,"        super(hyperplane, remainingRegion);
",4,0,0,1,2,0,0,0,0,4,35,4,0.08696,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/SubOrientedPoint,4,40,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.08696,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,4,42,"    public OrientedPoint(final Vector1D location, final boolean direct) {
",6,0,0,1,3,3,0,2,0,11,69,2,0.08696,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,4,43,"        this.location = location;
",4,0,0,0,0,0,0,0,0,5,25,4,0.08696,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,4,44,"        this.direct   = direct;
",4,0,0,0,0,0,0,0,0,5,23,4,0.08696,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,4,45,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.08696,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,4,74,"        return new SubOrientedPoint(this, null);
",0,0,0,1,2,1,0,2,0,3,40,4,0.08696,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,4,50,"                                    final Region<T> remainingRegion) {
",2,0,0,0,2,1,0,4,0,7,34,3,0.08333,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,304,"        if (real == 0.0 && imaginary == 0.0) {
",4,3,0,1,3,0,0,0,0,7,38,4,0.25000,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,300,"        if (isNaN) {
",2,0,0,1,3,0,0,0,0,2,12,4,0.20000,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,348,"                return (real == c.real) && (imaginary == c.imaginary);
",12,3,0,2,4,1,0,0,0,15,54,8,0.02439,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,451,"                if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) {
",8,1,0,2,5,0,0,0,0,10,62,9,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,233,"        if (mti >= N) { // generate N words at one time
",4,1,0,1,3,0,0,0,0,5,47,4,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,234,"            int mtNext = mt[0];
",2,0,1,1,2,0,0,0,0,4,19,7,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,235,"            for (int k = 0; k < N - M; ++k) {
",10,2,0,1,3,0,0,0,0,13,33,6,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,236,"                int mtCurr = mtNext;
",4,0,0,0,0,0,0,0,0,4,20,9,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,237,"                mtNext = mt[k + 1];
",4,1,1,1,2,0,0,0,0,8,19,8,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,238,"                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);
",6,3,0,2,4,0,0,0,0,10,50,8,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,239,"                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y & 0x1];
",8,4,1,4,8,0,0,0,0,21,47,8,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,241,"            for (int k = N - M; k < N - 1; ++k) {
",12,3,0,1,3,0,0,0,0,16,37,6,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,242,"                int mtCurr = mtNext;
",4,0,0,0,0,0,0,0,0,4,20,9,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,243,"                mtNext = mt[k + 1];
",4,1,1,1,2,0,0,0,0,8,19,8,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,244,"                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);
",6,3,0,2,4,0,0,0,0,10,50,8,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,245,"                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];
",10,5,1,5,10,0,0,0,0,24,53,8,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,247,"            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);
",4,3,1,3,6,0,0,0,0,10,49,6,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,248,"            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];
",8,5,1,4,8,0,0,0,0,20,51,6,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,250,"            mti = 0;
",2,0,0,0,0,0,0,0,0,3,8,6,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,253,"        y = mt[mti++];
",4,0,1,1,2,0,0,0,0,8,14,4,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,256,"        y ^=  y >>> 11;
",4,1,0,0,0,0,0,0,0,6,15,4,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,257,"        y ^= (y <<   7) & 0x9d2c5680;
",4,2,0,1,2,0,0,0,0,7,29,4,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,258,"        y ^= (y <<  15) & 0xefc60000;
",4,2,0,1,2,0,0,0,0,7,29,4,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,259,"        y ^=  y >>> 18;
",4,1,0,0,0,0,0,0,0,6,15,4,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,261,"        return y >>> (32 - bits);
",4,2,0,1,2,1,0,0,0,6,25,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,843,"        DoubleIndex(double value, int index) {
",6,0,0,1,3,0,0,0,0,6,38,3,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,844,"            this.value = value;
",4,0,0,0,0,0,0,0,0,5,19,5,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,845,"            this.index = index;
",4,0,0,0,0,0,0,0,0,5,19,5,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,846,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,850,"            return Double.compare(value, o.value);
",4,0,0,1,2,1,6,0,0,10,38,6,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,833,"    private static class DoubleIndex implements Comparable<DoubleIndex> {
",2,0,0,0,1,2,0,4,0,8,69,2,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,892,"        public FitnessFunction() {
",2,0,0,1,3,1,0,0,0,3,26,3,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,893,"            valueRange = 1;
",2,0,0,0,0,0,0,0,0,3,15,5,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,894,"            isRepairMode = true;
",2,0,0,0,0,0,0,0,0,4,20,5,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,895,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,903,"            if (isRepairMode) {
",2,0,0,1,3,0,0,0,0,2,19,5,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,904,"                double[] repaired = repair(point);
",2,0,0,2,4,0,4,0,0,6,34,8,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,905,"                value = CMAESOptimizer.this.computeObjectiveValue(repaired) +
",4,1,0,1,2,0,4,0,0,10,61,7,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,907,"            } else {
",0,0,0,0,2,0,0,0,0,0,8,3,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,910,"            return isMinimize ? value : -value;
",6,0,0,0,0,1,0,0,0,7,35,6,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,936,"            this.valueRange = valueRange;
",4,0,0,0,0,0,0,0,0,5,29,5,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,937,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,944,"            final double[] lB = CMAESOptimizer.this.getLowerBound();
",4,0,0,2,4,1,2,0,0,7,56,5,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,945,"            final double[] uB = CMAESOptimizer.this.getUpperBound();
",4,0,0,2,4,1,2,0,0,7,56,5,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,947,"            final double[] repaired = new double[x.length];
",6,0,0,2,4,1,0,0,0,7,47,5,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,948,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,949,"                if (x[i] < lB[i]) {
",0,1,1,3,7,0,0,0,0,9,19,7,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,951,"                } else if (x[i] > uB[i]) {
",0,1,1,3,8,0,0,0,0,9,26,8,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,954,"                    repaired[i] = x[i];
",0,0,1,2,4,0,0,0,0,9,19,10,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,957,"            return repaired;
",2,0,0,0,0,1,0,0,0,2,16,5,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,966,"            double penalty = 0;
",2,0,0,0,0,0,0,0,0,2,19,6,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,967,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,968,"                double diff = Math.abs(x[i] - repaired[i]);
",2,1,1,3,6,0,4,0,0,15,43,8,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,969,"                penalty += diff * valueRange;
",6,1,0,0,0,0,0,0,0,8,29,7,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,971,"            return isMinimize ? penalty : -penalty;
",6,0,0,0,0,1,0,0,0,7,39,6,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,881,"    private class FitnessFunction {
",2,0,0,0,1,1,0,0,0,3,31,2,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,370,"        isMinimize = getGoalType().equals(GoalType.MINIMIZE);
",6,0,0,2,4,0,4,0,0,11,53,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,371,"        final FitnessFunction fitfun = new FitnessFunction();
",2,0,0,1,2,1,0,4,0,7,53,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,372,"        final double[] guess = getStartPoint();
",2,0,0,2,4,1,2,0,0,5,39,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,374,"        dimension = guess.length;
",6,0,0,0,0,0,0,0,0,7,25,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,375,"        initializeCMA(guess);
",0,0,0,1,2,0,4,0,0,4,21,5,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,376,"        iterations = 0;
",2,0,0,0,0,0,0,0,0,3,15,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,377,"        double bestValue = fitfun.value(guess);
",2,0,0,1,2,0,6,0,0,8,39,5,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,378,"        push(fitnessHistory, bestValue);
",0,0,0,1,2,0,6,0,0,6,32,5,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,379,"        PointValuePair optimum
",2,0,0,0,0,0,0,2,0,4,22,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,382,"        PointValuePair lastResult = null;
",2,0,0,0,0,0,0,2,0,4,33,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,387,"        for (iterations = 1; iterations <= maxIterations; iterations++) {
",8,1,0,1,3,0,0,0,0,11,65,5,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,390,"            final RealMatrix arz = randn1(dimension, lambda);
",2,0,0,1,2,1,6,2,0,11,49,7,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,391,"            final RealMatrix arx = zeros(dimension, lambda);
",2,0,0,1,2,1,6,2,0,11,48,7,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,392,"            final double[] fitness = new double[lambda];
",2,0,1,2,4,1,0,0,0,5,44,7,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,394,"            for (int k = 0; k < lambda; k++) {
",8,1,0,1,3,0,0,0,0,10,34,7,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,395,"                RealMatrix arxk = null;
",2,0,0,0,0,0,0,2,0,4,23,9,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,396,"                for (int i = 0; i < checkFeasableCount + 1; i++) {
",8,2,0,1,3,0,0,0,0,11,50,9,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,397,"                    if (diagonalOnly <= 0) {
",2,1,0,1,3,0,0,0,0,3,24,11,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,404,"                    if (i >= checkFeasableCount ||
",4,2,0,0,1,0,0,0,0,6,30,11,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,411,"                copyColumn(arxk, 0, arx, k);
",0,0,0,1,2,0,8,0,0,8,28,10,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,413,"                    fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness
",0,0,1,3,6,0,10,0,0,15,63,11,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,416,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,419,"            final int[] arindex = sortedIndices(fitness);
",2,0,0,2,4,1,4,0,0,7,45,7,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,421,"            final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3)
",4,0,0,2,4,1,0,2,0,7,65,7,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,422,"            final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu));
",2,0,0,2,4,1,12,2,0,17,78,7,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,423,"            xmean = bestArx.multiply(weights);
",2,0,0,1,2,0,6,0,0,9,34,7,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,424,"            final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu));
",2,0,0,2,4,1,12,2,0,17,78,7,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,425,"            final RealMatrix zmean = bestArz.multiply(weights);
",2,0,0,1,2,1,6,2,0,11,51,7,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,426,"            final boolean hsig = updateEvolutionPaths(zmean, xold);
",2,0,0,1,2,1,6,0,0,9,55,7,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,427,"            if (diagonalOnly <= 0) {
",2,1,0,1,3,0,0,0,0,3,24,7,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,433,"            sigma *= Math.exp(Math.min(1, (normps/chiN - 1) * cs / damps));
",10,4,0,3,6,0,8,0,0,23,63,7,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,434,"            final double bestFitness = fitness[arindex[0]];
",2,0,1,2,4,1,0,0,0,7,47,7,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,435,"            final double worstFitness = fitness[arindex[arindex.length - 1]];
",6,1,1,2,4,1,0,0,0,12,65,7,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,436,"            if (bestValue > bestFitness) {
",4,1,0,1,3,0,0,0,0,5,30,7,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,437,"                bestValue = bestFitness;
",4,0,0,0,0,0,0,0,0,5,24,9,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,438,"                lastResult = optimum;
",4,0,0,0,0,0,0,0,0,5,21,9,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,439,"                optimum = new PointValuePair(fitfun.repair(bestArx.getColumn(0)),
",2,0,0,2,5,0,8,2,0,13,65,9,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,441,"                if (getConvergenceChecker() != null &&
",0,2,0,1,3,0,2,0,0,5,38,9,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,450,"            if (stopFitness != 0) { // only if stopFitness is defined
",2,1,0,1,3,0,0,0,0,3,57,7,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,455,"            final double[] sqrtDiagC = sqrt(diagC).getColumn(0);
",2,0,0,3,6,1,6,0,0,9,52,7,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,456,"            final double[] pcCol = pc.getColumn(0);
",2,0,0,2,4,1,4,0,0,7,39,7,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,457,"            for (int i = 0; i < dimension; i++) {
",8,1,0,1,3,0,0,0,0,10,37,7,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,458,"                if (sigma * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX) {
",4,2,1,5,11,0,8,0,0,22,68,9,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,459,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,465,"            for (int i = 0; i < dimension; i++) {
",8,1,0,1,3,0,0,0,0,10,37,7,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,466,"                if (sigma * sqrtDiagC[i] > stopTolUpX) {
",4,2,1,2,5,0,0,0,0,10,40,9,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,470,"            final double historyBest = min(fitnessHistory);
",2,0,0,1,2,1,4,0,0,7,47,7,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,471,"            final double historyWorst = max(fitnessHistory);
",2,0,0,1,2,1,4,0,0,7,48,7,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,472,"            if (iterations > 2 &&
",2,2,0,0,1,0,0,0,0,4,21,7,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,477,"            if (iterations > fitnessHistory.length &&
",6,2,0,0,1,0,0,0,0,8,41,7,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,482,"            if (max(diagD) / min(diagD) > 1e7) {
",0,2,0,3,7,0,8,0,0,10,36,7,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,486,"            if (getConvergenceChecker() != null) {
",0,1,0,2,5,0,2,0,0,4,38,7,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,497,"            if (bestValue == fitness[arindex[(int)(0.1+lambda/4.)]]) {
",4,3,1,5,11,0,0,0,0,11,58,7,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,500,"            if (iterations > 2 && Math.max(historyWorst, bestFitness) -
",2,3,0,1,3,0,8,0,0,13,59,7,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,505,"            push(fitnessHistory,bestFitness);
",0,0,0,1,2,0,6,0,0,6,33,8,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,506,"            fitfun.setValueRange(worstFitness-bestFitness);
",4,1,0,1,2,0,4,0,0,9,47,8,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,507,"            if (generateStatistics) {
",2,0,0,1,3,0,0,0,0,2,25,7,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,514,"        return optimum;
",2,0,0,0,0,1,0,0,0,2,15,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,546,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,566,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,574,"        if (lambda <= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,578,"        final double[][] sigmaArray = new double[guess.length][1];
",6,0,0,4,8,1,0,0,0,7,58,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,579,"        for (int i = 0; i < guess.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,580,"            sigmaArray[i][0] = inputSigma[i];
",0,0,1,3,6,0,0,0,0,9,33,6,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,582,"        final RealMatrix insigma = new Array2DRowRealMatrix(sigmaArray, false);
",4,0,0,1,2,1,0,4,0,10,71,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,583,"        sigma = max(insigma); // overall standard deviation
",2,0,0,1,2,0,4,0,0,7,51,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,586,"        stopTolUpX = 1e3 * max(insigma);
",2,1,0,1,2,0,4,0,0,8,32,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,587,"        stopTolX = 1e-11 * max(insigma);
",2,1,0,1,2,0,4,0,0,8,32,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,588,"        stopTolFun = 1e-12;
",2,0,0,0,0,0,0,0,0,3,19,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,589,"        stopTolHistFun = 1e-13;
",2,0,0,0,0,0,0,0,0,3,23,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,592,"        mu = lambda / 2; // number of parents/points for recombination
",4,1,0,0,0,0,0,0,0,6,62,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,593,"        logMu2 = Math.log(mu + 0.5);
",4,1,0,1,2,0,4,0,0,10,28,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,594,"        weights = log(sequence(1, mu, 1)).scalarMultiply(-1).scalarAdd(logMu2);
",2,0,0,4,8,0,12,0,0,16,71,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,595,"        double sumw = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,596,"        double sumwq = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,597,"        for (int i = 0; i < mu; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,598,"            double w = weights.getEntry(i, 0);
",2,0,0,1,2,0,6,0,0,8,34,7,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,599,"            sumw += w;
",4,0,0,0,0,0,0,0,0,5,10,6,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,600,"            sumwq += w * w;
",6,1,0,0,0,0,0,0,0,8,15,6,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,602,"        weights = weights.scalarMultiply(1 / sumw);
",4,1,0,1,2,0,4,0,0,10,43,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,603,"        mueff = sumw * sumw / sumwq; // variance-effectiveness of sum w_i x_i
",8,2,0,0,0,0,0,0,0,11,69,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,606,"        cc = (4 + mueff / dimension) /
",6,3,0,1,2,0,0,0,0,10,30,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,608,"        cs = (mueff + 2) / (dimension + mueff + 3.);
",8,3,0,2,4,0,0,0,0,12,44,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,609,"        damps = (1 + 2 * Math.max(0, Math.sqrt((mueff - 1) /
",4,7,0,1,5,0,8,0,0,20,52,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,613,"        ccov1 = 2 / ((dimension + 1.3) * (dimension + 1.3) + mueff);
",8,5,0,3,6,0,0,0,0,14,60,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,614,"        ccovmu = Math.min(1 - ccov1, 2 * (mueff - 2 + 1 / mueff) /
",8,6,0,1,3,0,4,0,0,19,58,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,616,"        ccov1Sep = Math.min(1, ccov1 * (dimension + 1.5) / 3);
",6,3,0,2,4,0,4,0,0,14,54,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,617,"        ccovmuSep = Math.min(1 - ccov1, ccovmu * (dimension + 1.5) / 3);
",8,4,0,2,4,0,4,0,0,17,64,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,618,"        chiN = Math.sqrt(dimension) *
",2,1,0,1,2,0,6,0,0,10,29,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,621,"        xmean = MatrixUtils.createColumnRealMatrix(guess); // objective variables
",2,0,0,1,2,0,6,0,0,9,73,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,622,"        diagD = insigma.scalarMultiply(1 / sigma);
",4,1,0,1,2,0,4,0,0,10,42,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,623,"        diagC = square(diagD);
",2,0,0,1,2,0,4,0,0,7,22,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,624,"        pc = zeros(dimension, 1); // evolution paths for C and sigma
",2,0,0,1,2,0,4,0,0,7,60,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,625,"        ps = zeros(dimension, 1); // B defines the coordinate system
",2,0,0,1,2,0,4,0,0,7,60,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,626,"        normps = ps.getFrobeniusNorm();
",2,0,0,1,2,0,4,0,0,7,31,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,628,"        B = eye(dimension, dimension);
",2,0,0,1,2,0,6,0,0,9,30,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,629,"        D = ones(dimension, 1); // diagonal D defines the scaling
",2,0,0,1,2,0,4,0,0,7,57,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,630,"        BD = times(B, repmat(diagD.transpose(), dimension, 1));
",2,0,0,3,6,0,12,0,0,15,55,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,631,"        C = B.multiply(diag(square(D)).multiply(B.transpose())); // covariance
",2,0,0,5,10,0,16,0,0,19,70,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,632,"        historySize = 10 + (int) (3 * 10 * dimension / (double) lambda);
",6,3,0,3,6,0,0,0,0,10,64,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,633,"        fitnessHistory = new double[historySize]; // history of fitness values
",2,0,1,1,2,0,0,0,0,5,70,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,634,"        for (int i = 0; i < historySize; i++) {
",8,1,0,1,3,0,0,0,0,10,39,4,1,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,7,3367,"        y += 1.0;
",2,0,0,0,0,0,0,0,0,3,9,4,0.11111,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,7,3369,"        if (y == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.11111,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,7,3373,"        return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.11111,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,351,"                    handler.handleStep(interpolator, isLastStep);
",0,0,0,1,2,0,8,0,0,8,45,9,0.11111,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,352,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,218,"                switch (allowed) {
",2,0,0,1,3,0,0,0,0,2,18,8,0.11111,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,224,"                    return xB;
",2,0,0,0,0,1,0,0,0,2,10,9,0.11111,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,239,"                final int p = agingA - MAXIMAL_AGING;
",6,1,0,0,0,1,0,0,0,8,37,8,0.11111,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,240,"                final double weightA = (1 << p) - 1;
",4,2,0,1,2,1,0,0,0,7,36,8,0.11111,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,241,"                final double weightB = p + 1;
",4,1,0,0,0,1,0,0,0,6,29,8,0.11111,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,242,"                targetY = (weightA * yA - weightB * REDUCTION_FACTOR * yB) / (weightA + weightB);
",16,5,0,2,4,0,0,0,0,22,81,8,0.11111,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,243,"            } else if (agingB >= MAXIMAL_AGING) {
",4,1,0,1,4,0,0,0,0,5,37,7,0.11111,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,342,"                xA = nextX;
",4,0,0,0,0,0,0,0,0,5,11,8,0.11111,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,343,"                yA = nextY;
",4,0,0,0,0,0,0,0,0,5,11,8,0.11111,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,344,"                absYA = FastMath.abs(yA);
",2,0,0,1,2,0,6,0,0,9,25,8,0.11111,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,345,"                agingA = 0;
",2,0,0,0,0,0,0,0,0,3,11,8,0.11111,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,346,"                ++agingB;
",2,0,0,0,0,0,0,0,0,3,9,8,0.11111,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,349,"                signChangeIndex++;
",2,0,0,0,0,0,0,0,0,3,18,8,0.11111,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,218,"                switch (allowed) {
",2,0,0,1,3,0,0,0,0,2,18,8,0.11111,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,348,"            handler.resetState(t, y);
",0,0,0,1,2,0,8,0,0,8,25,7,0.10000,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,182,"            y[2] = computeObjectiveValue(x[2]);
",0,0,1,3,6,0,2,0,0,7,35,6,0.10000,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,183,"            if (Precision.equals(y[2], 0.0, 1)) {
",0,0,1,3,7,0,4,0,0,6,37,7,0.10000,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,188,"            if (y[1] * y[2] < 0) {
",0,2,1,3,7,0,0,0,0,6,22,6,0.10000,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,190,"                nbPoints        = 3;
",2,0,0,0,0,0,0,0,0,3,20,8,0.10000,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,191,"                signChangeIndex = 2;
",2,0,0,0,0,0,0,0,0,3,20,8,0.10000,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,300,"            if ((nbPoints > 2) && (end - start != nbPoints)) {
",8,4,0,3,7,0,0,0,0,12,50,6,0.10000,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,309,"            } else  if (nbPoints == x.length) {
",6,1,0,1,4,0,0,0,0,7,35,7,0.10000,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,326,"            System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);
",6,2,0,1,2,0,10,0,0,18,89,7,0.10000,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,327,"            x[signChangeIndex] = nextX;
",2,0,1,1,2,0,0,0,0,7,27,6,0.10000,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,328,"            System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);
",6,2,0,1,2,0,10,0,0,18,89,7,0.10000,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,329,"            y[signChangeIndex] = nextY;
",2,0,1,1,2,0,0,0,0,7,27,6,0.10000,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,330,"            ++nbPoints;
",2,0,0,0,0,0,0,0,0,3,11,6,0.10000,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,333,"            if (nextY * yA <= 0) {
",4,2,0,1,3,0,0,0,0,6,22,6,0.10000,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,335,"                xB = nextX;
",4,0,0,0,0,0,0,0,0,5,11,8,0.10000,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,336,"                yB = nextY;
",4,0,0,0,0,0,0,0,0,5,11,8,0.10000,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,337,"                absYB = FastMath.abs(yB);
",2,0,0,1,2,0,6,0,0,9,25,8,0.10000,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,338,"                ++agingA;
",2,0,0,0,0,0,0,0,0,3,9,8,0.10000,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,339,"                agingB = 0;
",2,0,0,0,0,0,0,0,0,3,11,8,0.10000,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,353,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.10000,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,367,"                    System.arraycopy(eventY, 0, y, 0, y.length);
",4,0,0,1,2,0,8,0,0,12,44,9,0.07692,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,368,"                    computeDerivatives(eventT, y, yDot);
",0,0,0,1,2,0,8,0,0,8,36,9,0.07692,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,369,"                    resetOccurred = true;
",2,0,0,0,0,0,0,0,0,4,21,8,0.07692,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,370,"                    for (final EventState remaining : occuringEvents) {
",4,0,0,1,3,1,0,2,0,7,51,8,0.07692,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,373,"                    return eventT;
",2,0,0,0,0,1,0,0,0,2,14,8,0.07692,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,363,"                boolean needReset = currentEvent.reset(eventT, eventY);
",2,0,0,1,2,0,8,0,0,10,55,7,0.06667,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,364,"                if (needReset) {
",2,0,0,1,3,0,0,0,0,2,16,6,0.06667,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,343,"        if (!(pendingEvent && (FastMath.abs(pendingEventTime - t) <= convergence))) {
",8,3,0,4,9,0,4,0,0,16,77,4,0.06667,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,347,"        if (nextAction == EventHandler.Action.RESET_STATE) {
",8,1,0,1,3,0,0,0,0,9,52,4,0.06667,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,350,"        pendingEvent      = false;
",2,0,0,0,0,0,0,0,0,4,26,4,0.06667,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,157,"        final double randomValue = random.nextDouble();
",2,0,0,1,2,1,4,0,0,7,47,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,158,"        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.50000,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,160,"        for (int i = 0; i < probabilities.length; i++) {
",10,1,0,1,3,0,0,0,0,12,48,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,161,"            sum += probabilities[i];
",2,0,1,1,2,0,0,0,0,7,24,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,162,"            if (randomValue < sum) {
",4,1,0,1,3,0,0,0,0,5,24,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,163,"                return singletons.get(i);
",0,0,0,1,2,1,6,0,0,6,25,9,0.50000,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,86,"        final int indexRm1 = iRm1[index];
",2,0,1,1,2,1,0,0,0,7,33,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,87,"        final int indexRm2 = iRm2[index];
",2,0,1,1,2,1,0,0,0,7,33,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,89,"        final int v0       = v[index];
",2,0,1,1,2,1,0,0,0,7,30,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,90,"        final int vM1      = v[i1[index]];
",2,0,1,2,4,1,0,0,0,9,34,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,91,"        final int vM2      = v[i2[index]];
",2,0,1,2,4,1,0,0,0,9,34,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,92,"        final int vM3      = v[i3[index]];
",2,0,1,2,4,1,0,0,0,9,34,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,94,"        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);
",2,3,1,4,8,1,0,0,0,14,71,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,95,"        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));
",10,5,0,4,8,1,0,0,0,16,57,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,96,"        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));
",8,4,0,3,6,1,0,0,0,13,49,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,97,"        final int z3 = z1      ^ z2;
",6,1,0,0,0,1,0,0,0,8,28,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,95,"        return direction;
",2,0,0,0,0,1,0,0,0,2,17,4,0.11111,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,54,"    public Line(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException {
",8,0,0,1,3,3,0,4,0,15,87,2,0.03846,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,55,"        reset(p1, p2);
",0,0,0,1,2,0,6,0,0,6,14,5,0.03846,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,56,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03846,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,74,"        final Vector3D delta = p2.subtract(p1);
",2,0,0,1,2,1,6,2,0,11,39,4,0.03846,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,75,"        final double norm2 = delta.getNormSq();
",2,0,0,1,2,1,4,0,0,7,39,4,0.03846,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,76,"        if (norm2 == 0.0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.03846,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,79,"        this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta);
",4,1,0,2,4,0,6,2,0,14,65,4,0.03846,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,80,"        zero = new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta);
",8,1,0,2,4,0,6,2,0,19,67,4,0.03846,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,81,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03846,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,249,"        return x * x + y * y + z * z;
",12,5,0,0,0,1,0,0,0,17,29,4,0.03846,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,151,"    public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {
",10,0,0,1,3,1,0,4,0,15,65,2,0.03571,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,152,"        this.x = MathArrays.linearCombination(a1, u1.x, a2, u2.x);
",10,0,0,1,2,0,8,0,0,19,58,4,0.03571,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,153,"        this.y = MathArrays.linearCombination(a1, u1.y, a2, u2.y);
",10,0,0,1,2,0,8,0,0,19,58,4,0.03571,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,154,"        this.z = MathArrays.linearCombination(a1, u1.z, a2, u2.z);
",10,0,0,1,2,0,8,0,0,19,58,4,0.03571,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,155,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03571,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,286,"        final Vector3D v3 = (Vector3D) v;
",4,0,0,1,2,1,0,4,0,9,33,4,0.03333,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,287,"        return new Vector3D(x - v3.x, y - v3.y, z - v3.z);
",18,3,0,1,2,1,0,2,0,23,50,5,0.03333,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,95,"    public Vector3D(double x, double y, double z) {
",8,0,0,1,3,1,0,0,0,9,47,2,0.02941,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,96,"        this.x = x;
",4,0,0,0,0,0,0,0,0,5,11,4,0.02941,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,97,"        this.y = y;
",4,0,0,0,0,0,0,0,0,5,11,4,0.02941,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,98,"        this.z = z;
",4,0,0,0,0,0,0,0,0,5,11,4,0.02941,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,99,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02941,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,137,"    public Vector3D(double a, Vector3D u) {
",6,0,0,1,3,1,0,2,0,9,39,2,0.02941,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,138,"        this.x = a * u.x;
",8,1,0,0,0,0,0,0,0,10,17,4,0.02941,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,139,"        this.y = a * u.y;
",8,1,0,0,0,0,0,0,0,10,17,4,0.02941,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,140,"        this.z = a * u.z;
",8,1,0,0,0,0,0,0,0,10,17,4,0.02941,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,141,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02941,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,41,"    public static final Vector3D ZERO   = new Vector3D(0, 0, 0);
",2,0,0,1,2,3,0,4,0,9,60,2,0.02941,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,44,"    public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);
",2,0,0,1,2,3,0,4,0,9,60,2,0.02941,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,47,"    public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);
",2,0,0,1,2,3,0,4,0,10,62,2,0.02941,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,50,"    public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);
",2,0,0,1,2,3,0,4,0,9,60,2,0.02941,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,53,"    public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);
",2,0,0,1,2,3,0,4,0,10,62,2,0.02941,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,56,"    public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);
",2,0,0,1,2,3,0,4,0,9,60,2,0.02941,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,59,"    public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);
",2,0,0,1,2,3,0,4,0,10,62,2,0.02941,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,63,"    public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);
",14,0,0,1,2,3,0,4,0,21,84,2,0.02941,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2477,"            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));
",6,5,1,5,10,1,0,0,0,20,91,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2479,"            ya = epsA * denom;
",6,1,0,0,0,0,0,0,0,8,18,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2480,"            yb = epsB * denom;
",6,1,0,0,0,0,0,0,0,8,18,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2481,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.50000,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1387,"        double[] tmp1 = new double[getSize()];
",2,0,0,3,6,0,2,0,0,4,38,5,0.50000,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1388,"        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2
",0,0,0,1,2,0,12,0,0,12,54,5,0.50000,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1389,"        double[] tmp2 = new double[getSize()];
",2,0,0,3,6,0,2,0,0,4,38,5,0.50000,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1390,"        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2
",0,0,0,1,2,0,12,0,0,12,54,5,0.50000,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1391,"        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2
",0,0,0,1,2,0,8,0,0,8,60,5,0.50000,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1392,"        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)
",0,0,0,2,4,0,6,0,0,6,70,5,0.50000,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1394,"        if (x[xOffset] >= 0) {
",0,1,1,2,5,0,0,0,0,5,22,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1397,"            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x
",0,0,0,1,2,0,10,0,0,10,52,7,0.50000,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1398,"            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)
",0,0,0,2,4,0,10,0,0,10,57,7,0.50000,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1399,"            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))
",0,0,0,3,6,0,6,0,0,6,64,7,0.50000,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1400,"            for (int i = 0; i < tmp2.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1401,"                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))
",4,2,1,4,8,0,0,0,0,13,64,8,0.50000,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1420,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,756,"        y.compiler.checkCompatibility(x.compiler);
",8,0,0,1,2,0,2,0,0,10,42,5,0.50000,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,757,"        final DerivativeStructure result = new DerivativeStructure(y.compiler);
",6,0,0,1,2,1,0,4,0,11,71,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,758,"        y.compiler.atan2(y.data, 0, x.data, 0, result.data, 0);
",16,0,0,1,2,0,2,0,0,18,55,5,0.50000,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,759,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1347,"                double v = 0;
",2,0,0,0,0,0,0,0,0,2,13,9,0.33333,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1348,"                q[n - 1] = -n * q[n - 2];
",6,3,1,2,4,0,0,0,0,15,25,8,0.33333,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1349,"                for (int k = n - 1; k >= 0; k -= 2) {
",8,2,0,1,3,0,0,0,0,11,37,8,0.33333,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1350,"                    v = v * x2 + q[k];
",6,2,1,1,2,0,0,0,0,13,18,10,0.33333,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1351,"                    if (k > 2) {
",2,1,0,1,3,0,0,0,0,3,12,10,0.33333,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1353,"                    } else if (k == 2) {
",2,1,0,1,4,0,0,0,0,3,20,11,0.33333,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1357,"                if ((n & 0x1) == 0) {
",2,2,0,2,5,0,0,0,0,4,21,8,0.33333,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1358,"                    v *= x;
",4,0,0,0,0,0,0,0,0,5,7,10,0.33333,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1361,"                coeff *= f;
",4,0,0,0,0,0,0,0,0,5,11,8,0.33333,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1362,"                function[n] = coeff * v;
",4,1,1,1,2,0,0,0,0,10,24,8,0.33333,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2423,"        return atan(x, 0.0, false);
",0,0,0,1,2,1,4,0,0,5,27,5,0.25000,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1327,"        double[] function = new double[1 + order];
",4,1,0,2,4,0,0,0,0,5,42,5,0.25000,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1328,"        final double x = operand[operandOffset];
",2,0,1,1,2,1,0,0,0,7,40,4,0.25000,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1329,"        function[0] = FastMath.atan(x);
",0,0,1,2,4,0,6,0,0,9,31,4,0.25000,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1330,"        if (order > 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.25000,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1338,"            final double[] q = new double[order];
",2,0,1,2,4,1,0,0,0,5,37,6,0.25000,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1339,"            q[0] = 1;
",0,0,1,1,2,0,0,0,0,3,9,6,0.25000,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,178,"        final int dim = getDimension();
",2,0,0,1,2,1,2,0,0,5,31,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,179,"        if (vals.length != dim) {
",6,1,0,1,3,0,0,0,0,7,25,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,229,"        final double[] centered = new double[values.length];
",6,0,0,2,4,1,0,0,0,7,52,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,230,"        for (int i = 0; i < centered.length; i++) {
",10,1,0,1,3,0,0,0,0,12,43,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,231,"            centered[i] = values[i] - getMeans()[i];
",0,1,1,4,8,0,2,0,0,14,40,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,233,"        final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered);
",2,0,0,2,4,1,6,0,0,9,77,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,234,"        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.50000,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,235,"        for (int i = 0; i < preMultiplied.length; i++) {
",10,1,0,1,3,0,0,0,0,12,48,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,236,"            sum += preMultiplied[i] * centered[i];
",2,1,1,2,4,0,0,0,0,12,38,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,238,"        return FastMath.exp(-0.5 * sum);
",2,1,0,1,2,1,4,0,0,8,32,5,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,831,"        return exp(x, 0.0, null);
",0,0,0,1,2,1,4,0,0,5,25,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,850,"        if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,851,"            intVal = (int) -x;
",4,0,0,1,2,0,0,0,0,6,18,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,853,"            if (intVal > 746) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,861,"            if (intVal > 709) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,871,"            if (intVal == 709) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,881,"            intVal++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,883,"            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,884,"            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,886,"            intVal = -intVal;
",4,0,0,0,0,0,0,0,0,6,17,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,888,"            intVal = (int) x;
",4,0,0,1,2,0,0,0,0,5,17,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,890,"            if (intVal > 709) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,898,"            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,899,"            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,906,"        final int intFrac = (int) ((x - intVal) * 1024.0);
",6,2,0,3,6,1,0,0,0,9,50,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,907,"        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
",6,0,1,1,2,1,0,0,0,9,64,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,908,"        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
",6,0,1,1,2,1,0,0,0,9,64,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,914,"        final double epsilon = x - (intVal + intFrac / 1024.0);
",8,3,0,1,2,1,0,0,0,12,55,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,923,"        double z = 0.04168701738764507;
",2,0,0,0,0,0,0,0,0,2,31,5,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,924,"        z = z * epsilon + 0.1666666505023083;
",6,2,0,0,0,0,0,0,0,9,37,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,925,"        z = z * epsilon + 0.5000000000042687;
",6,2,0,0,0,0,0,0,0,9,37,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,926,"        z = z * epsilon + 1.0;
",6,2,0,0,0,0,0,0,0,9,22,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,927,"        z = z * epsilon + -3.940510424527919E-20;
",6,2,0,0,0,0,0,0,0,10,41,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,934,"        double tempA = intPartA * fracPartA;
",6,1,0,0,0,0,0,0,0,7,36,5,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,935,"        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;
",14,5,0,0,0,0,0,0,0,19,82,5,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,941,"        final double tempC = tempB + tempA;
",6,1,0,0,0,1,0,0,0,8,35,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,943,"        if (extra != 0.0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,946,"            result = tempC*z + tempB + tempA;
",10,3,0,0,0,0,0,0,0,14,33,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,949,"        if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,955,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1179,"            if (x < 1.01 && x > 0.99 && hiPrec == null) {
",6,5,0,1,3,0,0,0,0,11,45,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1246,"            double tmp = epsilon * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,36,7,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1247,"            double aa = epsilon + tmp - tmp;
",8,2,0,0,0,0,0,0,0,10,32,7,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1248,"            double ab = epsilon - aa;
",6,1,0,0,0,0,0,0,0,7,25,7,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1249,"            double xa = aa;
",4,0,0,0,0,0,0,0,0,4,15,7,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1250,"            double xb = ab;
",4,0,0,0,0,0,0,0,0,4,15,7,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1253,"            final double numer = bits & 0x3ffffffffffL;
",4,1,0,0,0,1,0,0,0,6,43,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1254,"            final double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);
",6,2,0,1,2,1,0,0,0,9,65,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1255,"            aa = numer - xa*denom - xb * denom;
",12,4,0,0,0,0,0,0,0,17,35,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1256,"            xb += aa / denom;
",6,1,0,0,0,0,0,0,0,8,17,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1259,"            final double[] lnCoef_last = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
",6,1,1,2,4,1,0,0,0,10,71,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1260,"            double ya = lnCoef_last[0];
",2,0,1,1,2,0,0,0,0,4,27,7,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1261,"            double yb = lnCoef_last[1];
",2,0,1,1,2,0,0,0,0,4,27,7,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1263,"            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {
",10,2,0,1,3,0,0,0,0,13,55,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1265,"                aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,8,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1266,"                ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,8,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1268,"                tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,8,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1269,"                ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,8,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1270,"                yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,8,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1273,"                final double[] lnCoef_i = LN_HI_PREC_COEF[i];
",2,0,1,2,4,1,0,0,0,7,45,8,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1274,"                aa = ya + lnCoef_i[0];
",4,1,1,1,2,0,0,0,0,8,22,8,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1275,"                ab = yb + lnCoef_i[1];
",4,1,1,1,2,0,0,0,0,8,22,8,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1277,"                tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,8,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1278,"                ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,8,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1279,"                yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,8,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1283,"            aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1284,"            ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1292,"            lnza = aa + ab;
",6,1,0,0,0,0,0,0,0,8,15,6,0.50000,0,-1
