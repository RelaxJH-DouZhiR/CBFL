dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,predict
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,72,"        return solve(min, max);
",0,0,0,1,2,1,6,0,0,6,23,5,0.00000,1,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,71,300,"                  loop     = false;
",2,0,0,0,0,0,0,0,0,4,17,14,1.00000,1,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,127,"            setResult(yMax, 0);
",0,0,0,1,2,0,4,0,0,4,19,7,0.00000,1,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,250,"              scale = vecAbsoluteTolerance;
",4,0,0,0,0,0,0,0,0,5,29,12,0.00000,1,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,303,"        return getCumPct((Comparable<?>) v);
",2,0,0,2,4,1,2,2,0,6,36,5,0.00000,1,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,265,"                for (int i = p; i < n; ++i) {
",10,1,0,1,3,0,0,0,0,12,29,8,0.00000,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,79,1626,"          final int dp = p1[i] - p2[i];
",2,1,1,2,4,1,0,0,0,12,29,6,0.33333,1,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1135,"            int j = 4 * n - 1;
",4,2,0,0,0,0,0,0,0,6,18,7,0.00000,1,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,603,"        minPivot = MathUtils.SAFE_MIN * Math.max(1.0, eMax * eMax);
",10,2,0,1,2,0,4,0,0,17,59,4,0.02941,1,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,356,"        this.sourceFormat = sourceFormat;
",4,0,0,0,0,0,0,0,0,5,33,4,0.25000,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,357,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.25000,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),
",2,0,0,5,10,0,0,0,0,3,67,2,0.25000,0,1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,45,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),
",2,0,0,4,8,0,0,0,0,3,94,2,0.25000,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,46,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),
",2,0,0,1,2,0,0,0,0,3,41,2,0.25000,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,47,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),
",2,0,0,1,2,0,0,0,0,3,95,2,0.25000,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,48,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),
",2,0,0,1,2,0,0,0,0,3,60,2,0.25000,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,67,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,368,"        checkVectorDimensions(v.getDimension());
",0,0,0,2,4,0,6,0,0,6,40,5,1.00000,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,369,"        OpenMapRealVector res = new OpenMapRealVector(this);
",2,0,0,1,2,0,0,4,0,6,52,4,1.00000,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,370,"        Iterator iter = res.entries.iterator();
",6,0,0,1,2,0,2,2,0,10,39,4,1.00000,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,371,"        while (iter.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,24,5,1.00000,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,372,"            iter.advance();
",0,0,0,1,2,0,4,0,0,4,15,7,1.00000,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,373,"            res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));
",0,1,0,5,10,0,20,0,0,21,64,7,1.00000,0,1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,186,"        if (states[index] == FREE) {
",2,1,1,2,5,0,0,0,0,7,28,4,0.50000,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,187,"            return missingEntries;
",2,0,0,0,0,1,0,0,0,2,22,6,0.50000,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,354,"        final int hash  = hashOf(key);
",2,0,0,1,2,1,4,0,0,7,30,4,0.50000,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,355,"        int index = hash & mask;
",6,1,0,0,0,0,0,0,0,7,24,5,0.50000,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,356,"        if (containsKey(key, index)) {
",0,0,0,2,5,0,6,0,0,6,30,5,0.50000,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,357,"            return doRemove(index);
",0,0,0,1,2,1,4,0,0,4,23,7,0.50000,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,394,"        keys[index]   = 0;
",0,0,1,1,2,0,0,0,0,5,18,4,0.50000,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,395,"        states[index] = REMOVED;
",2,0,1,1,2,0,0,0,0,7,24,4,0.50000,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,396,"        final double previous = values[index];
",2,0,1,1,2,1,0,0,0,7,38,4,0.50000,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,239,"                    return x1;
",2,0,0,0,0,1,0,0,0,2,10,9,0.20000,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,187,"                    if (x == x1) {
",4,1,0,1,3,0,0,0,0,5,14,9,0.16667,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,50,43,"        super(DEFAULT_ABSOLUTE_ACCURACY, Method.REGULA_FALSI);
",6,0,0,1,2,0,0,0,0,6,54,4,0.12500,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,50,44,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12500,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,124,"        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);
",4,0,0,1,2,1,12,0,0,16,73,5,0.08333,0,1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,237,"                switch (allowed) {
",2,0,0,1,3,0,0,0,0,2,18,8,0.05000,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,50,195,"        return solve(maxEval, f, min, max, min + 0.5 * (max - min));
",6,3,0,2,4,1,10,0,0,19,60,5,0.04762,0,1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,205,"                switch (allowed) {
",2,0,0,1,3,0,0,0,0,2,18,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,178,"                switch (method) {
",2,0,0,1,3,0,0,0,0,2,17,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,171,"            if (f1 * fx < 0) {
",4,2,0,1,3,0,0,0,0,6,18,6,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,174,"                x0 = x1;
",4,0,0,0,0,0,0,0,0,5,8,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,175,"                f0 = f1;
",4,0,0,0,0,0,0,0,0,5,8,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,176,"                inverted = !inverted;
",4,0,0,0,0,0,0,0,0,6,21,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,178,"                switch (method) {
",2,0,0,1,3,0,0,0,0,2,17,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,198,"            x1 = x;
",4,0,0,0,0,0,0,0,0,5,7,6,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,51,43,"        super(DEFAULT_ABSOLUTE_ACCURACY, Method.REGULA_FALSI);
",6,0,0,1,2,0,0,0,0,6,54,4,0.12500,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,51,44,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12500,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,124,"        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);
",4,0,0,1,2,1,12,0,0,16,73,5,0.08333,0,1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,199,"                switch (allowed) {
",2,0,0,1,3,0,0,0,0,2,18,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,178,"                switch (method) {
",2,0,0,1,3,0,0,0,0,2,17,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,171,"            if (f1 * fx < 0) {
",4,2,0,1,3,0,0,0,0,6,18,6,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,174,"                x0 = x1;
",4,0,0,0,0,0,0,0,0,5,8,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,175,"                f0 = f1;
",4,0,0,0,0,0,0,0,0,5,8,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,176,"                inverted = !inverted;
",4,0,0,0,0,0,0,0,0,6,21,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,178,"                switch (method) {
",2,0,0,1,3,0,0,0,0,2,17,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,192,"            x1 = x;
",4,0,0,0,0,0,0,0,0,5,7,6,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,193,"            f1 = fx;
",4,0,0,0,0,0,0,0,0,5,8,6,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,198,"            if (FastMath.abs(f1) <= ftol) {
",2,1,0,2,5,0,6,0,0,9,31,6,0.04762,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,313,"  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {
",10,0,0,1,3,1,0,8,0,19,69,2,1.00000,0,1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,316,"  double u1u1 = u1.getNormSq();
",2,0,0,1,2,0,4,0,0,6,29,5,1.00000,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,317,"  double u2u2 = u2.getNormSq();
",2,0,0,1,2,0,4,0,0,6,29,5,1.00000,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,318,"  double v1v1 = v1.getNormSq();
",2,0,0,1,2,0,4,0,0,6,29,5,1.00000,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,319,"  double v2v2 = v2.getNormSq();
",2,0,0,1,2,0,4,0,0,6,29,5,1.00000,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,320,"  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {
",8,5,0,5,11,0,0,0,0,13,63,4,1.00000,0,1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,325,"  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);
",8,1,0,2,4,0,4,2,0,16,50,4,1.00000,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,328,"  double u1u2   = u1.dotProduct(u2);
",2,0,0,1,2,0,6,0,0,8,34,5,1.00000,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,329,"  double v1v2   = v1.dotProduct(v2);
",2,0,0,1,2,0,6,0,0,8,34,5,1.00000,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,330,"  double coeffU = u1u2 / u1u1;
",6,1,0,0,0,0,0,0,0,7,28,5,1.00000,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,331,"  double coeffV = v1v2 / u1u1;
",6,1,0,0,0,0,0,0,0,7,28,5,1.00000,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,332,"  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));
",14,5,0,3,6,0,4,0,0,23,79,5,1.00000,0,1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,333,"  double alpha  = coeffU - beta * coeffV;
",8,2,0,0,0,0,0,0,0,10,39,5,1.00000,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,334,"  v2 = new Vector3D(alpha, v1, beta, v2);
",10,0,0,1,2,0,0,2,0,13,39,4,1.00000,0,0
defect4j,math,org/apache/commons/math/complex/Complex,53,152,"        MathUtils.checkNotNull(rhs);
",0,0,0,1,2,0,6,0,0,6,28,5,0.05263,0,0
defect4j,math,org/apache/commons/math/complex/Complex,53,319,"        return isNaN;
",2,0,0,0,0,1,0,0,0,2,13,4,0.04348,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2119,"            buffer[--q] = '-';
",2,0,1,1,2,0,0,0,0,7,18,6,0.08333,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1041,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.07143,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1234,"            a.exp = b.exp;
",8,0,0,0,0,0,0,0,0,9,14,6,0.05556,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2328,"            exponent--;
",2,0,0,0,0,0,0,0,0,3,11,6,0.05556,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,576,"        return new Dfp(getField(), x);
",2,0,0,2,4,1,2,2,0,6,30,5,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,801,"        return nans == INFINITE;
",4,1,0,0,0,1,0,0,0,5,24,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1105,"        return exp * 4 - 4;
",2,2,0,0,0,1,0,0,0,4,19,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2305,"        if (isInfinite()) {
",0,0,0,2,5,0,2,0,0,2,19,5,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2313,"        if (isNaN()) {
",0,0,0,2,5,0,2,0,0,2,14,5,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2317,"        Dfp y = this;
",2,0,0,0,0,0,0,2,0,4,13,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2318,"        boolean negate = false;
",2,0,0,0,0,0,0,0,0,3,23,5,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2319,"        if (lessThan(getZero())) {
",0,0,0,3,7,0,4,0,0,4,26,5,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2326,"        int exponent = (int)(y.log10() * 3.32);
",2,1,0,3,6,0,4,0,0,7,39,5,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2327,"        if (exponent < 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.05263,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,473,"      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
",48,9,0,1,2,1,0,2,0,59,101,5,0.33333,0,1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,181,"    return x;
",2,0,0,0,0,1,0,0,0,2,9,4,0.02564,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,189,"    return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.02564,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,197,"    return z;
",2,0,0,0,0,1,0,0,0,2,9,4,0.02564,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,93,"  public Vector3D(double x, double y, double z) {
",8,0,0,1,3,1,0,0,0,9,47,2,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,94,"    this.x = x;
",4,0,0,0,0,0,0,0,0,5,11,4,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,95,"    this.y = y;
",4,0,0,0,0,0,0,0,0,5,11,4,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,96,"    this.z = z;
",4,0,0,0,0,0,0,0,0,5,11,4,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,97,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,35,"  public static final Vector3D ZERO   = new Vector3D(0, 0, 0);
",2,0,0,1,2,3,0,4,0,9,60,2,0.01266,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,85,"        Iterator() {
",2,0,0,1,3,0,0,0,0,2,12,3,1.00000,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,75,"        private final int[] counter = new int[dimension];
",2,0,1,2,4,2,0,0,0,6,49,3,1.00000,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,79,"        private int count = -1;
",2,0,0,0,0,1,0,0,0,4,23,3,1.00000,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,86,"            counter[last] = -1;
",0,0,1,1,2,0,0,0,0,6,19,5,1.00000,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,87,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,147,"            return counter[dim];
",0,0,1,1,2,1,0,0,0,4,20,6,1.00000,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,196,"        return new Iterator();
",0,0,0,1,2,1,0,2,0,2,22,6,1.00000,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,205,"        return dimension;
",2,0,0,0,0,1,0,0,0,2,17,4,1.00000,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,217,"        if (index < 0 ||
",2,2,0,0,1,0,0,0,0,4,16,4,1.00000,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,272,"        return count + c[last];
",2,1,1,1,2,1,0,0,0,7,23,4,1.00000,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,46,"public class MultidimensionalCounter implements Iterable<Integer> {
",2,0,0,0,1,1,0,4,0,7,67,1,1.00000,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,260,"        if (c.length != dimension) {
",6,1,0,1,3,0,0,0,0,7,28,4,0.50000,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,69,"        this(random, EmptyClusterStrategy.LARGEST_VARIANCE);
",6,0,0,1,2,0,0,0,0,6,52,4,0.50000,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,70,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,134,"        return clusters;
",2,0,0,0,0,1,0,0,0,2,16,4,0.50000,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,176,"            for (int i = 0; i < pointSet.size(); i++) {
",6,1,0,2,5,0,4,0,0,12,43,6,0.50000,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,177,"                final T p = pointSet.get(i);
",2,0,0,1,2,1,6,2,0,11,28,8,0.50000,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,178,"                final Cluster<T> nearest = getNearestCluster(resultSet, p);
",2,0,0,1,2,1,6,4,0,13,59,8,0.50000,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,179,"                final double d = p.distanceFrom(nearest.getCenter());
",2,0,0,2,4,1,8,0,0,11,53,8,0.50000,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,180,"                sum += d * d;
",6,1,0,0,0,0,0,0,0,8,13,8,0.50000,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,181,"                dx2[i] = sum;
",2,0,1,1,2,0,0,0,0,7,13,8,0.50000,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,186,"            final double r = random.nextDouble() * sum;
",4,1,0,1,2,1,4,0,0,10,43,6,0.50000,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,187,"            for (int i = 0 ; i < dx2.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.50000,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,188,"                if (dx2[i] >= r) {
",2,1,1,2,5,0,0,0,0,7,18,8,0.50000,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,182,"            } catch (OutOfRangeException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.50000,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,183,"                fwhmApprox = points[points.length - 1].getX() - points[0].getX();
",6,2,1,4,8,0,4,0,0,17,65,8,0.50000,0,1
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,271,"            double minY = Double.POSITIVE_INFINITY;
",6,0,0,0,0,0,0,0,0,6,39,6,0.50000,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,272,"            double maxY = Double.NEGATIVE_INFINITY;
",6,0,0,0,0,0,0,0,0,6,39,6,0.50000,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,273,"            for (final WeightedObservedPoint point : points) {
",4,0,0,1,3,1,0,2,0,7,50,5,0.50000,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,274,"                minY = Math.min(minY, point.getY());
",2,0,0,2,4,0,10,0,0,13,36,7,0.50000,0,1
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,275,"                maxY = Math.max(maxY, point.getY());
",2,0,0,2,4,0,10,0,0,13,36,7,0.50000,0,1
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,277,"            throw new OutOfRangeException(y, minY, maxY);
",6,0,0,1,2,0,0,2,0,8,45,6,0.50000,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,52,"        this(null, wrong, min, boundIsAllowed);
",6,0,0,1,2,0,0,0,0,6,39,4,0.50000,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,53,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,67,"        super(specific,
",2,0,0,0,1,0,0,0,0,2,15,4,0.50000,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,73,"        this.min = min;
",4,0,0,0,0,0,0,0,0,5,15,4,0.50000,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,74,"        this.boundIsAllowed = boundIsAllowed;
",4,0,0,0,0,0,0,0,0,5,37,4,0.50000,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,75,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,174,"        this(decimalDigits, true);
",2,0,0,1,2,0,0,0,0,3,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,175,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,188,"    private DfpField(final int decimalDigits, final boolean computeConstants) {
",6,0,0,1,3,3,0,0,0,9,75,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,190,"        this.radixDigits = (decimalDigits < 13) ? 4 : (decimalDigits + 3) / 4;
",6,3,0,2,4,0,0,0,0,10,70,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,191,"        this.rMode       = RoundingMode.ROUND_HALF_EVEN;
",6,0,0,0,0,0,0,0,0,7,48,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,192,"        this.ieeeFlags   = 0;
",2,0,0,0,0,0,0,0,0,3,21,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,193,"        this.zero        = new Dfp(this, 0);
",2,0,0,1,2,0,0,2,0,5,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,194,"        this.one         = new Dfp(this, 1);
",2,0,0,1,2,0,0,2,0,5,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,195,"        this.two         = new Dfp(this, 2);
",2,0,0,1,2,0,0,2,0,5,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,197,"        if (computeConstants) {
",2,0,0,1,3,0,0,0,0,2,23,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,199,"            synchronized (DfpField.class) {
",0,0,0,1,3,0,0,2,0,2,31,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,205,"                computeStringConstants((decimalDigits < 67) ? 200 : (3 * decimalDigits));
",4,2,0,3,6,0,2,0,0,8,73,9,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,208,"                sqr2           = new Dfp(this, sqr2String);
",4,0,0,1,2,0,0,2,0,7,43,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,209,"                sqr2Split      = split(sqr2String);
",2,0,0,1,2,0,4,0,0,7,35,8,0.03571,0,0
