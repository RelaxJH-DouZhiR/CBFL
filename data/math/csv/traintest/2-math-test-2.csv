dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,predict
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,209,"        return chromosomes.iterator();
",0,0,0,1,2,1,4,0,0,4,30,5,1.00000,1,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,65,"        this.elitismRate = elitismRate;
",4,0,0,0,0,0,0,0,0,5,31,4,0.40000,1,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,735,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.50000,1,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1752,"                throw new PathIsExploredException(); // XXX
",0,0,0,1,2,0,0,2,0,2,43,10,0.00000,1,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,238,"                targetY = -REDUCTION_FACTOR * yA;
",6,1,0,0,0,0,0,0,0,9,33,9,0.00000,1,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,520,"                for (int i = 0; i < weights.length; i++) {
",10,1,0,1,3,0,0,0,0,12,42,9,0.50000,1,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,164,"        if (!(geoMeanImpl instanceof GeometricMean)) {
",2,0,0,2,5,0,0,2,0,5,46,4,0.81818,1,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,343,"                    return eventT;
",2,0,0,0,0,1,0,0,0,2,14,8,0.08333,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,50,"        this.rows = rowDimension;
",4,0,0,0,0,0,0,0,0,5,25,4,0.03333,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,537,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,538,"            out[i] = getEntry(row, i);
",0,0,1,2,4,0,6,0,0,11,26,6,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,541,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,616,"        return getColumnDimension() == getRowDimension();
",0,1,0,2,4,1,4,0,0,5,49,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,18,85,"    public ArrayRealVector(double[] d) {
",4,0,0,2,5,1,0,0,0,5,36,2,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,18,86,"        data = d.clone();
",2,0,0,1,2,0,4,0,0,7,17,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,18,87,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,18,43,"    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();
",2,0,0,1,2,3,4,2,0,11,86,2,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,18,600,"            return data[index];
",0,0,1,1,2,1,0,0,0,4,19,7,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,18,610,"        return data.length;
",4,0,0,0,0,1,0,0,0,4,19,5,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,79,"        throws DimensionMismatchException, NoDataException, NullArgumentException {
",6,0,0,0,1,0,0,0,0,6,75,2,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,80,"        copyIn(d);
",0,0,0,1,2,0,4,0,0,4,10,5,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,81,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,254,"        return copyOut();
",0,0,0,1,2,1,2,0,0,2,17,5,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,272,"        if (data == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,273,"            if (row > 0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,276,"            if (column > 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,279,"            MathUtils.checkNotNull(subMatrix);
",0,0,0,1,2,0,6,0,0,6,34,7,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,280,"            final int nRows = subMatrix.length;
",6,0,0,0,0,1,0,0,0,7,35,6,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,281,"            if (nRows == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,285,"            final int nCols = subMatrix[0].length;
",4,0,1,1,2,1,0,0,0,7,38,6,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,286,"            if (nCols == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,289,"            data = new double[subMatrix.length][nCols];
",6,0,1,2,4,0,0,0,0,9,43,6,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,290,"            for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,291,"                if (subMatrix[i].length != nCols) {
",4,1,1,2,5,0,0,0,0,9,35,8,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,294,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);
",4,1,1,3,6,0,8,0,0,19,64,9,0.06667,0,1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,296,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,300,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,528,"        final int nRows = this.getRowDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,529,"        final double[][] out = new double[nRows][this.getColumnDimension()];
",2,0,1,5,10,1,2,0,0,7,68,4,0.06667,0,1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,531,"        for (int i = 0; i < nRows; i++) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,532,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);
",2,0,1,4,8,0,4,0,0,18,56,7,0.06667,0,1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,534,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,547,"        setSubMatrix(in, 0, 0);
",0,0,0,1,2,0,4,0,0,4,23,5,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,548,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,115,"        throws MathArithmeticException {
",2,0,0,0,1,0,0,0,0,2,32,2,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,81,"    private byte maxIter = 30;
",2,0,0,0,0,1,0,0,0,3,26,2,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,116,"        if (isSymmetric(matrix, false)) {
",0,0,0,2,5,0,4,0,0,5,33,5,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,117,"            transformToTridiagonal(matrix);
",0,0,0,1,2,0,4,0,0,4,31,7,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,118,"            findEigenVectors(transformer.getQ().getData());
",0,0,0,3,6,0,8,0,0,8,47,7,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,123,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,192,"        final int rows = matrix.getRowDimension();
",2,0,0,1,2,1,4,0,0,7,42,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,193,"        final int columns = matrix.getColumnDimension();
",2,0,0,1,2,1,4,0,0,7,48,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,194,"        final double eps = 10 * rows * columns * Precision.EPSILON;
",10,1,0,0,0,1,0,0,0,12,59,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,195,"        for (int i = 0; i < rows; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,196,"            for (int j = i + 1; j < columns; ++j) {
",10,2,0,1,3,0,0,0,0,13,39,6,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,208,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,223,"        if (cachedV == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,224,"            final int m = eigenvectors.length;
",6,0,0,0,0,1,0,0,0,7,34,6,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,225,"            cachedV = MatrixUtils.createRealMatrix(m, m);
",2,0,0,1,2,0,8,0,0,11,45,6,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,226,"            for (int k = 0; k < m; ++k) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,227,"                cachedV.setColumnVector(k, eigenvectors[k]);
",0,0,1,2,4,0,6,0,0,10,44,9,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,231,"        return cachedV;
",2,0,0,0,0,1,0,0,0,2,15,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,247,"        if (cachedD == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,249,"            cachedD = MatrixUtils.createRealDiagonalMatrix(realEigenvalues);
",2,0,0,1,2,0,6,0,0,9,64,6,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,251,"            for (int i = 0; i < imagEigenvalues.length; i++) {
",10,1,0,1,3,0,0,0,0,12,50,6,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,252,"                if (Precision.compareTo(imagEigenvalues[i], 0.0, EPSILON) > 0) {
",0,1,1,3,7,0,6,0,0,11,64,8,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,254,"                } else if (Precision.compareTo(imagEigenvalues[i], 0.0, EPSILON) < 0) {
",0,1,1,3,8,0,6,0,0,11,71,9,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,259,"        return cachedD;
",2,0,0,0,0,1,0,0,0,2,15,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,555,"        transformer = new TriDiagonalTransformer(matrix);
",4,0,0,1,2,0,0,2,0,7,49,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,556,"        main = transformer.getMainDiagonalRef();
",2,0,0,1,2,0,4,0,0,7,40,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,557,"        secondary = transformer.getSecondaryDiagonalRef();
",2,0,0,1,2,0,4,0,0,7,50,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,558,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,567,"        final double[][]z = householderMatrix.clone();
",2,0,0,3,6,1,4,0,0,7,46,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,568,"        final int n = main.length;
",6,0,0,0,0,1,0,0,0,7,26,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,569,"        realEigenvalues = new double[n];
",2,0,1,1,2,0,0,0,0,5,32,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,570,"        imagEigenvalues = new double[n];
",2,0,1,1,2,0,0,0,0,5,32,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,571,"        final double[] e = new double[n];
",2,0,1,2,4,1,0,0,0,5,33,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,572,"        for (int i = 0; i < n - 1; i++) {
",8,2,0,1,3,0,0,0,0,11,33,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,576,"        realEigenvalues[n - 1] = main[n - 1];
",4,2,1,2,4,0,0,0,0,11,37,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,577,"        e[n - 1] = 0;
",2,1,1,1,2,0,0,0,0,6,13,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,580,"        double maxAbsoluteValue = 0;
",2,0,0,0,0,0,0,0,0,2,28,5,0.06667,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,581,"        for (int i = 0; i < n; i++) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,246,"        this(0);
",0,0,0,1,2,0,0,0,0,0,8,3,1.00000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,247,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,253,"        this(lambda, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,
",6,0,0,0,1,0,0,0,0,6,62,4,1.00000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,256,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,570,"            lambda = 4 + (int) (3. * Math.log(dimension));
",2,2,0,3,6,0,6,0,0,11,46,6,1.00000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,916,"            double[] res = new double[x.length];
",6,0,0,2,4,0,0,0,0,6,36,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,917,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,918,"                double diff = boundaries[1][i] - boundaries[0][i];
",2,1,1,4,8,0,0,0,0,11,50,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,919,"                res[i] = (x[i] - boundaries[0][i]) / diff;
",2,2,1,5,10,0,0,0,0,17,42,7,0.33333,0,1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,921,"            return res;
",2,0,0,0,0,1,0,0,0,2,11,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,942,"            double[] res = new double[x.length];
",6,0,0,2,4,0,0,0,0,6,36,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,943,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,944,"                double diff = boundaries[1][i] - boundaries[0][i];
",2,1,1,4,8,0,0,0,0,11,50,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,945,"                res[i] = diff * x[i] + boundaries[0][i];
",2,2,1,4,8,0,0,0,0,17,40,7,0.33333,0,1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,947,"            return res;
",2,0,0,0,0,1,0,0,0,2,11,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,957,"                double[] repaired = repair(point);
",2,0,0,2,4,0,4,0,0,6,34,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,958,"                value = CMAESOptimizer.this
",4,0,0,0,0,0,0,0,0,5,27,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,999,"            double[] repaired = new double[x.length];
",6,0,0,2,4,0,0,0,0,6,41,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1000,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1001,"                if (x[i] < 0) {
",0,1,1,2,5,0,0,0,0,5,15,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1003,"                } else if (x[i] > 1.0) {
",0,1,1,2,6,0,0,0,0,5,24,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1006,"                    repaired[i] = x[i];
",0,0,1,2,4,0,0,0,0,9,19,10,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1009,"            return repaired;
",2,0,0,0,0,1,0,0,0,2,16,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,535,"                boundaries = new double[2][];
",2,0,0,2,4,0,0,0,0,3,29,8,0.25000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,536,"                boundaries[0] = lB;
",2,0,1,1,2,0,0,0,0,5,19,8,0.25000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,537,"                boundaries[1] = uB;
",2,0,1,1,2,0,0,0,0,5,19,8,0.25000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,128,"            lowerBound = lower.clone();
",2,0,0,1,2,0,4,0,0,7,27,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,136,"            upperBound = upper.clone();
",2,0,0,1,2,0,4,0,0,7,27,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,514,"                hasFiniteBounds = true;
",2,0,0,0,0,0,0,0,0,4,23,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,515,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,521,"            for (int i = 0; i < lB.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,522,"                if (Double.isInfinite(lB[i]) ||
",0,1,1,2,5,0,4,0,0,9,31,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,529,"            if (hasInfiniteBounds) {
",2,0,0,1,3,0,0,0,0,2,24,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,109,"            if (upper.length != dim) {
",6,1,0,1,3,0,0,0,0,7,26,6,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,112,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,113,"                final double v = startPoint[i];
",2,0,1,1,2,1,0,0,0,7,31,8,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,114,"                final double hi = upper[i];
",2,0,1,1,2,1,0,0,0,7,27,8,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,115,"                if (v > hi) {
",4,1,0,1,3,0,0,0,0,5,13,8,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,100,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.12500,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,101,"                final double v = startPoint[i];
",2,0,1,1,2,1,0,0,0,7,31,8,0.12500,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,102,"                final double lo = lower[i];
",2,0,1,1,2,1,0,0,0,7,27,8,0.12500,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,103,"                if (v < lo) {
",4,1,0,1,3,0,0,0,0,5,13,8,0.12500,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,64,"    public ExceptionContext(final Throwable throwable) {
",4,0,0,1,3,2,0,2,0,8,52,2,0.12500,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,65,"        this.throwable = throwable;
",4,0,0,0,0,0,0,0,0,5,27,4,0.12500,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,66,"        msgPatterns    = new ArrayList<Localizable>();
",2,0,0,1,2,0,0,4,0,7,46,4,0.12500,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,67,"        msgArguments   = new ArrayList<Object[]>();
",2,0,0,2,4,0,0,4,0,7,43,4,0.12500,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,68,"        context        = new HashMap<String, Object>();
",2,0,0,1,2,0,0,6,0,9,47,4,0.12500,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,69,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12500,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,87,"        msgPatterns.add(pattern);
",0,0,0,1,2,0,6,0,0,6,25,5,0.12500,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,88,"        msgArguments.add(ArgUtils.flatten(arguments));
",0,0,0,2,4,0,10,0,0,10,46,5,0.12500,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,89,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12500,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,368,"    private LocalizedFormats(final String sourceFormat) {
",4,0,0,1,3,2,0,2,0,8,53,2,0.12500,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,369,"        this.sourceFormat = sourceFormat;
",4,0,0,0,0,0,0,0,0,5,33,4,0.12500,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,370,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12500,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),
",2,0,0,5,10,0,0,0,0,3,67,2,0.12500,0,1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,45,"    ARRAY_SIZE_EXCEEDS_MAX_VARIABLES(""array size cannot be greater than {0}""),
",2,0,0,2,4,0,0,0,0,3,74,2,0.12500,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,423,"                            break generationLoop;
",2,0,0,0,0,0,0,0,0,2,21,13,1.00000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,995,"                    repaired[i] = 1.0;
",0,0,1,1,2,0,0,0,0,5,18,10,1.00000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,908,"            double[] res = new double[x.length];
",6,0,0,2,4,0,0,0,0,6,36,6,0.50000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,909,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.50000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,910,"                double diff = boundaries[1][i] - boundaries[0][i];
",2,1,1,4,8,0,0,0,0,11,50,8,0.50000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,911,"                res[i] = (x[i] - boundaries[0][i]) / diff;
",2,2,1,5,10,0,0,0,0,17,42,7,0.50000,0,1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,913,"            return res;
",2,0,0,0,0,1,0,0,0,2,11,5,0.50000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,933,"            double[] res = new double[x.length];
",6,0,0,2,4,0,0,0,0,6,36,6,0.50000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,934,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.50000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,935,"                double diff = boundaries[1][i] - boundaries[0][i];
",2,1,1,4,8,0,0,0,0,11,50,8,0.50000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,936,"                res[i] = diff * x[i] + boundaries[0][i];
",2,2,1,4,8,0,0,0,0,17,40,7,0.50000,0,1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,938,"            return res;
",2,0,0,0,0,1,0,0,0,2,11,5,0.50000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,948,"                double[] repaired = repair(point);
",2,0,0,2,4,0,4,0,0,6,34,8,0.50000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,949,"                value = CMAESOptimizer.this
",4,0,0,0,0,0,0,0,0,5,27,7,0.50000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,952,"            } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.50000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,990,"            double[] repaired = new double[x.length];
",6,0,0,2,4,0,0,0,0,6,41,6,0.50000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,991,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.50000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,992,"                if (x[i] < 0) {
",0,1,1,2,5,0,0,0,0,5,15,7,0.50000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,994,"                } else if (x[i] > 1.0) {
",0,1,1,2,6,0,0,0,0,5,24,8,0.50000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,997,"                    repaired[i] = x[i];
",0,0,1,2,4,0,0,0,0,9,19,10,0.50000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1000,"            return repaired;
",2,0,0,0,0,1,0,0,0,2,16,5,0.50000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1009,"            double penalty = 0;
",2,0,0,0,0,0,0,0,0,2,19,6,0.50000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1010,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.50000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1011,"                double diff = Math.abs(x[i] - repaired[i]);
",2,1,1,3,6,0,4,0,0,15,43,8,0.50000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1012,"                penalty += diff * valueRange;
",6,1,0,0,0,0,0,0,0,8,29,7,0.50000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1014,"            return isMinimize ? penalty : -penalty;
",6,0,0,0,0,1,0,0,0,7,39,6,0.50000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,529,"                boundaries = new double[2][];
",2,0,0,2,4,0,0,0,0,3,29,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,530,"                boundaries[0] = lB;
",2,0,1,1,2,0,0,0,0,5,19,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,531,"                boundaries[1] = uB;
",2,0,1,1,2,0,0,0,0,5,19,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,508,"                hasFiniteBounds = true;
",2,0,0,0,0,0,0,0,0,4,23,8,0.20000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,509,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.20000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,515,"            for (int i = 0; i < lB.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,6,0.20000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,516,"                if (Double.isInfinite(lB[i]) ||
",0,1,1,2,5,0,4,0,0,9,31,8,0.20000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,523,"            if (hasInfiniteBounds) {
",2,0,0,1,3,0,0,0,0,2,24,6,0.20000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,128,"            lowerBound = lower.clone();
",2,0,0,1,2,0,4,0,0,7,27,6,0.20000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,136,"            upperBound = upper.clone();
",2,0,0,1,2,0,4,0,0,7,27,6,0.20000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,109,"            if (upper.length != dim) {
",6,1,0,1,3,0,0,0,0,7,26,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,112,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,113,"                final double v = startPoint[i];
",2,0,1,1,2,1,0,0,0,7,31,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,114,"                final double hi = upper[i];
",2,0,1,1,2,1,0,0,0,7,27,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,115,"                if (v > hi) {
",4,1,0,1,3,0,0,0,0,5,13,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,100,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,101,"                final double v = startPoint[i];
",2,0,1,1,2,1,0,0,0,7,31,8,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,102,"                final double lo = lower[i];
",2,0,1,1,2,1,0,0,0,7,27,8,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,103,"                if (v < lo) {
",4,1,0,1,3,0,0,0,0,5,13,8,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,97,"            if (lower.length != dim) {
",6,1,0,1,3,0,0,0,0,7,26,6,0.12500,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,378,"                            arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k))
",2,0,0,2,5,0,14,0,0,17,52,13,0.07143,0,1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,407,"                    updateCovariance(hsig, bestArx, arz, arindex, xold);
",0,0,0,1,2,0,12,0,0,12,52,10,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,696,"        double negccov = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,697,"        if (ccov1 + ccovmu > 0) {
",4,2,0,1,3,0,0,0,0,6,25,4,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,698,"            RealMatrix arpos = bestArx.subtract(repmat(xold, 1, mu))
",2,0,0,2,4,0,10,2,0,14,56,6,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,700,"            RealMatrix roneu = pc.multiply(pc.transpose())
",2,0,0,2,4,0,8,2,0,12,46,6,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,703,"            double oldFac = hsig ? 0 : ccov1 * cc * (2. - cc);
",10,2,0,1,2,0,0,0,0,12,50,7,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,704,"            oldFac += 1. - ccov1 - ccovmu;
",6,1,0,0,0,0,0,0,0,8,30,6,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,705,"            if (isActiveCMA) {
",2,0,0,1,3,0,0,0,0,2,18,6,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,707,"                negccov = (1. - ccovmu) * 0.25 * mueff /
",6,3,0,1,2,0,0,0,0,10,40,8,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,709,"                double negminresidualvariance = 0.66;
",2,0,0,0,0,0,0,0,0,2,37,9,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,712,"                double negalphaold = 0.5; // where to make up for the variance
",2,0,0,0,0,0,0,0,0,2,62,9,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,715,"                int[] arReverseIndex = reverse(arindex);
",2,0,0,2,4,0,4,0,0,6,40,9,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,716,"                RealMatrix arzneg
",2,0,0,0,0,0,0,2,0,4,17,8,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,718,"                RealMatrix arnorms = sqrt(sumRows(square(arzneg)));
",2,0,0,3,6,0,8,2,0,12,51,8,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,719,"                int[] idxnorms = sortedIndices(arnorms.getRow(0));
",2,0,0,3,6,0,6,0,0,8,50,9,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,720,"                RealMatrix arnormsSorted = selectColumns(arnorms, idxnorms);
",2,0,0,1,2,0,6,2,0,10,60,8,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,721,"                int[] idxReverse = reverse(idxnorms);
",2,0,0,2,4,0,4,0,0,6,37,9,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,722,"                RealMatrix arnormsReverse = selectColumns(arnorms, idxReverse);
",2,0,0,1,2,0,6,2,0,10,63,8,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,723,"                arnorms = divide(arnormsReverse, arnormsSorted);
",2,0,0,1,2,0,6,0,0,9,48,8,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,724,"                int[] idxInv = inverse(idxnorms);
",2,0,0,2,4,0,4,0,0,6,33,9,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,725,"                RealMatrix arnormsInv = selectColumns(arnorms, idxInv);
",2,0,0,1,2,0,6,2,0,10,55,8,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,727,"                double negcovMax = (1. - negminresidualvariance) /
",4,2,0,1,2,0,0,0,0,6,50,9,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,729,"                if (negccov > negcovMax) {
",4,1,0,1,3,0,0,0,0,5,26,8,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,732,"                arzneg = times(arzneg, repmat(arnormsInv, dimension, 1));
",2,0,0,2,4,0,10,0,0,13,57,8,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,733,"                RealMatrix artmp = BD.multiply(arzneg);
",2,0,0,1,2,0,6,2,0,10,39,8,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,734,"                RealMatrix Cneg = artmp.multiply(diag(weights)).multiply(
",2,0,0,2,5,0,10,2,0,14,57,8,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,736,"                oldFac += negalphaold * negccov;
",6,1,0,0,0,0,0,0,0,8,32,8,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,737,"                C = C.scalarMultiply(oldFac)
",2,0,0,1,2,0,6,0,0,9,28,8,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,748,"            } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,759,"        updateBD(negccov);
",0,0,0,1,2,0,4,0,0,4,18,5,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,760,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,768,"        if (ccov1 + ccovmu + negccov > 0 &&
",6,3,0,0,1,0,0,0,0,9,35,4,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,771,"            C = triu(C, 0).add(triu(C, 1).transpose());
",2,0,0,4,8,0,12,0,0,15,43,6,0.07143,0,1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,773,"            EigenDecomposition eig = new EigenDecomposition(C);
",4,0,0,1,2,0,0,4,0,8,51,6,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,774,"            B = eig.getV(); // eigen decomposition, B==normalized eigenvectors
",2,0,0,1,2,0,4,0,0,7,66,6,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,775,"            D = eig.getD();
",2,0,0,1,2,0,4,0,0,7,15,6,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,776,"            diagD = diag(D);
",2,0,0,1,2,0,4,0,0,7,16,6,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,777,"            if (min(diagD) <= 0) {
",0,1,0,2,5,0,4,0,0,5,22,6,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,787,"            if (max(diagD) > 1e14 * min(diagD)) {
",0,2,0,3,7,0,8,0,0,10,37,6,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,792,"            diagC = diag(C);
",2,0,0,1,2,0,4,0,0,7,16,6,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,793,"            diagD = sqrt(diagD); // D contains standard deviations now
",2,0,0,1,2,0,4,0,0,7,58,6,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,794,"            BD = times(B, repmat(diagD.transpose(), dimension, 1)); // O(n^2)
",2,0,0,4,8,0,12,0,0,15,65,6,0.07143,0,1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,796,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1085,"        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
",2,0,0,6,12,0,8,0,0,10,71,5,0.07143,0,1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1086,"        for (int r = 0; r < m.getRowDimension(); r++) {
",6,1,0,2,5,0,4,0,0,12,47,4,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1087,"            for (int c = 0; c < m.getColumnDimension(); c++) {
",6,1,0,2,5,0,4,0,0,12,50,6,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1088,"                d[r][c] = m.getEntry(r, c) / n.getEntry(r, c);
",0,1,1,4,8,0,16,0,0,24,46,8,0.07143,0,1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1091,"        return new Array2DRowRealMatrix(d, false);
",2,0,0,1,2,1,0,2,0,5,42,5,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1115,"        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
",2,0,0,6,12,0,8,0,0,10,71,5,0.07143,0,1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1116,"        for (int r = 0; r < m.getRowDimension(); r++) {
",6,1,0,2,5,0,4,0,0,12,47,4,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1117,"            for (int c = 0; c < m.getColumnDimension(); c++) {
",6,1,0,2,5,0,4,0,0,12,50,6,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1118,"                d[r][c] = r <= c - k ? m.getEntry(r, c) : 0;
",6,2,1,3,6,0,8,0,0,23,44,8,0.07143,0,1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1121,"        return new Array2DRowRealMatrix(d, false);
",2,0,0,1,2,1,0,2,0,5,42,5,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1129,"        double[][] d = new double[1][m.getColumnDimension()];
",2,0,0,5,10,0,4,0,0,6,53,5,0.07143,0,1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1130,"        for (int c = 0; c < m.getColumnDimension(); c++) {
",6,1,0,2,5,0,4,0,0,12,50,4,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1131,"            double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1132,"            for (int r = 0; r < m.getRowDimension(); r++) {
",6,1,0,2,5,0,4,0,0,12,47,6,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1133,"                sum += m.getEntry(r, c);
",2,0,0,1,2,0,8,0,0,11,24,8,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1135,"            d[0][c] = sum;
",2,0,1,2,4,0,0,0,0,7,14,6,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1137,"        return new Array2DRowRealMatrix(d, false);
",2,0,0,1,2,1,0,2,0,5,42,5,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1314,"        int[] inverse = new int[indices.length];
",6,0,0,2,4,0,0,0,0,6,40,5,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1315,"        for (int i = 0; i < indices.length; i++) {
",10,1,0,1,3,0,0,0,0,12,42,4,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1316,"            inverse[indices[i]] = i;
",2,0,1,2,4,0,0,0,0,9,24,6,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1318,"        return inverse;
",2,0,0,0,0,1,0,0,0,2,15,4,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1326,"        int[] reverse = new int[indices.length];
",6,0,0,2,4,0,0,0,0,6,40,5,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1327,"        for (int i = 0; i < indices.length; i++) {
",10,1,0,1,3,0,0,0,0,12,42,4,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1328,"            reverse[i] = indices[indices.length - i - 1];
",6,1,1,2,4,0,0,0,0,14,45,6,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1330,"        return reverse;
",2,0,0,0,0,1,0,0,0,2,15,4,0.07143,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,521,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.07143,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,522,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.07143,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,523,"        if (vector.getDimension() != nRows) {
",2,1,0,2,5,0,4,0,0,7,37,4,0.07143,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,527,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.07143,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,528,"            setEntry(i, column, vector.getEntry(i));
",0,0,0,2,4,0,12,0,0,12,40,7,0.07143,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,530,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07143,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,534,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.07143,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,535,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.07143,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,536,"        final double[] out = new double[nCols];
",2,0,1,2,4,1,0,0,0,5,39,4,0.07143,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,537,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.07143,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,538,"            out[i] = getEntry(row, i);
",0,0,1,2,4,0,6,0,0,11,26,6,0.07143,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,541,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.07143,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,616,"        return getColumnDimension() == getRowDimension();
",0,1,0,2,4,1,4,0,0,5,49,4,0.07143,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,60,"public abstract class RealVector {
",2,0,0,0,1,2,0,0,0,4,34,1,0.07143,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1141,"    protected class SparseEntryIterator implements Iterator<Entry> {
",2,0,0,0,1,1,0,4,0,7,64,2,0.07143,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,62,"    public TriDiagonalTransformer(RealMatrix matrix) {
",4,0,0,1,3,1,0,2,0,7,50,2,0.07143,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,63,"        if (!matrix.isSquare()) {
",0,0,0,2,5,0,4,0,0,5,25,4,0.07143,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,68,"        final int m = matrix.getRowDimension();
",2,0,0,1,2,1,4,0,0,7,39,4,0.07143,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,69,"        householderVectors = matrix.getData();
",2,0,0,1,2,0,4,0,0,7,38,4,0.07143,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,70,"        main      = new double[m];
",2,0,1,1,2,0,0,0,0,5,26,4,0.07143,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,71,"        secondary = new double[m - 1];
",4,1,0,1,2,0,0,0,0,6,30,4,0.07143,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,72,"        cachedQ   = null;
",2,0,0,0,0,0,0,0,0,3,17,4,0.07143,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,73,"        cachedQt  = null;
",2,0,0,0,0,0,0,0,0,3,17,4,0.07143,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,74,"        cachedT   = null;
",2,0,0,0,0,0,0,0,0,3,17,4,0.07143,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,77,"        transform();
",0,0,0,1,2,0,2,0,0,2,12,5,0.07143,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,78,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07143,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,86,"        if (cachedQ == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.07143,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,87,"            cachedQ = getQT().transpose();
",2,0,0,2,4,0,4,0,0,7,30,6,0.07143,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,97,"        MatrixUtils.checkSubtractionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,48,5,1,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,99,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,1,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,100,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,1,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,101,"        final RealMatrix out = createMatrix(rowCount, columnCount);
",2,0,0,1,2,1,6,2,0,11,59,4,1,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,102,"        for (int row = 0; row < rowCount; ++row) {
",8,1,0,1,3,0,0,0,0,10,42,4,1,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,103,"            for (int col = 0; col < columnCount; ++col) {
",8,1,0,1,3,0,0,0,0,10,45,6,1,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,104,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));
",0,1,0,3,6,0,22,0,0,23,66,9,1,0,1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,108,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,1,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,241,"        return walkInColumnOrder(new RealMatrixPreservingVisitor() {
",0,0,0,1,4,1,2,2,0,4,60,5,1,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,456,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,1,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,457,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,1,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,458,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,1,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,459,"        for (int j = 0; j < columns; ++j) {
",8,1,0,1,3,0,0,0,0,10,35,4,1,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,460,"            for (int i = 0; i < rows; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,6,1,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,461,"                visitor.visit(i, j, data[i][j]);
",0,0,1,3,6,0,8,0,0,14,32,9,1,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,464,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,1,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,130,"        if (data == null ||
",2,2,0,0,1,0,0,0,0,4,19,4,1,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,134,"        return (data.length * data[0].length <= 4096) ?
",6,2,1,2,4,1,0,0,0,10,47,6,1,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,523,"        if ((left.getRowDimension()    != right.getRowDimension()) ||
",0,2,0,3,7,0,8,0,0,10,61,4,1,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,528,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,241,"        return walkInColumnOrder(new RealMatrixPreservingVisitor() {
",0,0,0,1,4,1,2,2,0,4,60,5,1,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,256,"                this.endRow = endRow;
",4,0,0,0,0,0,0,0,0,5,21,10,1,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,257,"                columnSum   = 0;
",2,0,0,0,0,0,0,0,0,3,16,10,1,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,258,"                maxColSum   = 0;
",2,0,0,0,0,0,0,0,0,3,16,10,1,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,259,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,263,"                columnSum += FastMath.abs(value);
",2,0,0,1,2,0,6,0,0,9,33,10,1,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,264,"                if (row == endRow) {
",4,1,0,1,3,0,0,0,0,5,20,10,1,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,265,"                    maxColSum = FastMath.max(maxColSum, columnSum);
",2,0,0,1,2,0,8,0,0,11,47,12,1,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,266,"                    columnSum = 0;
",2,0,0,0,0,0,0,0,0,3,14,12,1,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,268,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,272,"                return maxColSum;
",2,0,0,0,0,1,0,0,0,2,17,10,1,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3508,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,1,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3511,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,1,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3514,"        if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,4,1,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3519,"        long bits = Double.doubleToRawLongBits(a);
",2,0,0,1,2,0,6,0,0,8,42,5,1,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3520,"        if (bits == 0x8000000000000000L) {
",2,1,0,1,3,0,0,0,0,3,34,4,1,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3523,"        return a;
",2,0,0,0,0,1,0,0,0,2,9,4,1,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,63,"        throws NonPositiveDefiniteMatrixException {
",2,0,0,0,1,0,0,0,0,2,43,2,1,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,65,"        final int order = matrix.getRowDimension();
",2,0,0,1,2,1,4,0,0,7,43,4,1,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,66,"        final double[][] c = matrix.getData();
",2,0,0,3,6,1,4,0,0,7,38,4,1,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,67,"        final double[][] b = new double[order][order];
",2,0,1,4,8,1,0,0,0,7,46,4,1,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,69,"        int[] swap  = new int[order];
",2,0,1,2,4,0,0,0,0,4,29,5,1,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,70,"        int[] index = new int[order];
",2,0,1,2,4,0,0,0,0,4,29,5,1,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,71,"        for (int i = 0; i < order; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,1,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,72,"            index[i] = i;
",2,0,1,1,2,0,0,0,0,7,13,6,1,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,75,"        int r = 0;
",2,0,0,0,0,0,0,0,0,2,10,5,1,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,76,"        for (boolean loop = true; loop;) {
",4,0,0,1,3,0,0,0,0,5,34,4,1,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,79,"            swap[r] = r;
",2,0,1,1,2,0,0,0,0,7,12,6,1,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,80,"            for (int i = r + 1; i < order; ++i) {
",10,2,0,1,3,0,0,0,0,13,37,6,1,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,81,"                int ii  = index[i];
",2,0,1,1,2,0,0,0,0,6,19,9,1,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,82,"                int isi = index[swap[i]];
",2,0,1,2,4,0,0,0,0,8,25,9,1,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,83,"                if (c[ii][ii] > c[isi][isi]) {
",0,1,1,5,11,0,0,0,0,13,30,8,1,0,1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,84,"                    swap[r] = i;
",2,0,1,1,2,0,0,0,0,7,12,10,1,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,90,"            if (swap[r] != r) {
",2,1,1,2,5,0,0,0,0,7,19,6,1,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,91,"                int tmp = index[r];
",2,0,1,1,2,0,0,0,0,6,19,9,1,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,92,"                index[r] = index[swap[r]];
",0,0,1,3,6,0,0,0,0,11,26,8,1,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,93,"                index[swap[r]] = tmp;
",2,0,1,2,4,0,0,0,0,9,21,8,1,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,97,"            int ir = index[r];
",2,0,1,1,2,0,0,0,0,6,18,7,1,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,98,"            if (c[ir][ir] < small) {
",2,1,1,3,7,0,0,0,0,9,24,6,1,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,121,"                final double sqrt = FastMath.sqrt(c[ir][ir]);
",2,0,1,3,6,1,4,0,0,13,45,8,1,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,122,"                b[r][r] = sqrt;
",2,0,1,2,4,0,0,0,0,9,15,8,1,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,123,"                final double inverse  = 1 / sqrt;
",4,1,0,0,0,1,0,0,0,6,33,8,1,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,125,"                    final int ii = index[i];
",2,0,1,1,2,1,0,0,0,7,24,10,1,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,126,"                    final double e = inverse * c[ii][ir];
",4,1,1,2,4,1,0,0,0,12,37,10,1,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,127,"                    b[i][r] = e;
",2,0,1,2,4,0,0,0,0,9,12,10,1,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,128,"                    c[ii][ii] -= e * e;
",4,1,1,2,4,0,0,0,0,12,19,10,1,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,129,"                    for (int j = r + 1; j < i; ++j) {
",10,2,0,1,3,0,0,0,0,13,33,10,1,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,130,"                        final int ij = index[j];
",2,0,1,1,2,1,0,0,0,7,24,12,1,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,131,"                        final double f = c[ii][ij] - e * b[j][r];
",4,2,1,4,8,1,0,0,0,19,41,12,1,0,1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,132,"                        c[ii][ij] = f;
",2,0,1,2,4,0,0,0,0,9,14,12,1,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,133,"                        c[ij][ii] = f;
",2,0,1,2,4,0,0,0,0,9,14,12,1,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,138,"                loop = ++r < order;
",6,1,0,0,0,0,0,0,0,9,19,8,1,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,140,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,143,"        rank = r;
",4,0,0,0,0,0,0,0,0,5,9,4,1,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,144,"        root = MatrixUtils.createRealMatrix(order, r);
",2,0,0,1,2,0,8,0,0,11,46,4,1,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,145,"        for (int i = 0; i < order; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,1,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,146,"            for (int j = 0; j < r; ++j) {
",8,1,0,1,3,0,0,0,0,10,29,6,1,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,147,"                root.setEntry(index[i], j, b[i][j]);
",0,0,1,4,8,0,6,0,0,16,36,9,1,0,1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,151,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,160,"        return root;
",2,0,0,0,0,1,0,0,0,2,12,4,1,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3507,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,1,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3510,"        if (a < b) {
",4,1,0,1,3,0,0,0,0,5,12,4,1,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,375,"        return Math.sqrt(a);
",0,0,0,1,2,1,6,0,0,6,20,5,1,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,100,"                if (r == 0) {
",2,1,0,1,3,0,0,0,0,3,13,8,1.00000,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,105,"                for (int i = r; i < order; ++i) {
",10,1,0,1,3,0,0,0,0,12,33,8,1.00000,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,106,"                    if (c[index[i]][index[i]] < -small) {
",2,1,1,5,11,0,0,0,0,14,37,10,1.00000,0,1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,115,"                ++r;
",2,0,0,0,0,0,0,0,0,3,4,8,1.00000,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,116,"                loop = false;
",2,0,0,0,0,0,0,0,0,4,13,8,1.00000,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,142,"        MatrixUtils.checkMultiplicationCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,51,5,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,144,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,145,"        final int nCols = m.getColumnDimension();
",2,0,0,1,2,1,4,0,0,7,41,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,146,"        final int nSum  = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,147,"        final RealMatrix out = createMatrix(nRows, nCols);
",2,0,0,1,2,1,6,2,0,11,50,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,148,"        for (int row = 0; row < nRows; ++row) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,149,"            for (int col = 0; col < nCols; ++col) {
",8,1,0,1,3,0,0,0,0,10,39,6,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,150,"                double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,9,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,151,"                for (int i = 0; i < nSum; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,8,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,152,"                    sum += getEntry(row, i) * m.getEntry(i, col);
",2,1,0,2,4,0,14,0,0,18,45,10,0.66667,0,1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,154,"                out.setEntry(row, col, sum);
",0,0,0,1,2,0,10,0,0,10,28,9,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,158,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,589,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,590,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,591,"        final RealMatrix out = createMatrix(nCols, nRows);
",2,0,0,1,2,1,6,2,0,11,50,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,592,"        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {
",0,0,0,1,4,0,2,2,0,4,63,5,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,602,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,860,"        return walkInRowOrder(visitor);
",0,0,0,1,2,1,4,0,0,4,31,5,0.66667,0,0
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,184,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,1.00000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,22,1107,"            return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.50000,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,129,"        final double nhalf = numeratorDegreesOfFreedom / 2;
",4,1,0,0,0,1,0,0,0,6,51,4,0.25000,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,130,"        final double mhalf = denominatorDegreesOfFreedom / 2;
",4,1,0,0,0,1,0,0,0,6,53,4,0.25000,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,131,"        final double logx = FastMath.log(x);
",2,0,0,1,2,1,6,0,0,9,36,4,0.25000,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,132,"        final double logn = FastMath.log(numeratorDegreesOfFreedom);
",2,0,0,1,2,1,6,0,0,9,60,4,0.25000,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,133,"        final double logm = FastMath.log(denominatorDegreesOfFreedom);
",2,0,0,1,2,1,6,0,0,9,62,4,0.25000,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,134,"        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +
",6,2,0,0,1,1,4,0,0,13,66,4,0.25000,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,136,"        return FastMath.exp(nhalf * logn + nhalf * logx - logx +
",10,8,0,0,1,1,4,0,0,22,56,5,0.25000,0,0
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,109,"        if (x < lower || x > upper) {
",8,3,0,1,3,0,0,0,0,11,29,4,0.25000,0,0
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,112,"        return 1 / (upper - lower);
",4,2,0,1,2,1,0,0,0,6,27,4,0.25000,0,0
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,174,"        return upper;
",2,0,0,0,0,1,0,0,0,2,13,4,0.25000,0,0
defect4j,math,org/apache/commons/math3/special/Beta,22,170,"        return logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);
",4,0,0,1,2,1,8,0,0,12,57,5,0.25000,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,258,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.14286,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,22,864,"            intVal = (int) x;
",4,0,0,1,2,0,0,0,0,5,17,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,22,866,"            if (intVal > 709) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,22,874,"            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,22,875,"            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,72,"        this(k, m1, m2, m3, null);
",8,0,0,1,2,0,0,0,0,8,26,4,0.08696,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,73,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.08696,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,155,"            setSeed(System.currentTimeMillis() + System.identityHashCode(this));
",0,1,0,3,6,0,10,0,0,11,68,7,0.08696,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,156,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.08696,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,179,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });
",4,2,0,7,14,0,2,0,0,8,71,5,0.08696,0,1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,180,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.08696,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,22,57,"        super(K, M1, M2, M3);
",8,0,0,1,2,0,0,0,0,8,21,4,0.08696,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,22,58,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.08696,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,94,"    protected AbstractWell(final int k, final int m1, final int m2, final int m3, final int[] seed) {
",12,0,0,2,5,6,0,0,0,18,97,2,0.08511,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,99,"        final int w = 32;
",2,0,0,0,0,1,0,0,0,3,17,4,0.08511,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,100,"        final int r = (k + w - 1) / w;
",8,3,0,1,2,1,0,0,0,12,30,4,0.08511,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,101,"        this.v      = new int[r];
",2,0,1,1,2,0,0,0,0,5,25,4,0.08511,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,102,"        this.index  = 0;
",2,0,0,0,0,0,0,0,0,3,16,4,0.08511,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,106,"        iRm1 = new int[r];
",2,0,1,1,2,0,0,0,0,5,18,4,0.08511,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,107,"        iRm2 = new int[r];
",2,0,1,1,2,0,0,0,0,5,18,4,0.08511,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,108,"        i1   = new int[r];
",2,0,1,1,2,0,0,0,0,5,18,4,0.08511,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,109,"        i2   = new int[r];
",2,0,1,1,2,0,0,0,0,5,18,4,0.08511,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,110,"        i3   = new int[r];
",2,0,1,1,2,0,0,0,0,5,18,4,0.08511,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,111,"        for (int j = 0; j < r; ++j) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.08511,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,112,"            iRm1[j] = (j + r - 1) % r;
",6,3,1,2,4,0,0,0,0,14,26,6,0.08511,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,113,"            iRm2[j] = (j + r - 2) % r;
",6,3,1,2,4,0,0,0,0,14,26,6,0.08511,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,114,"            i1[j]   = (j + m1)    % r;
",6,2,1,2,4,0,0,0,0,13,26,6,0.08511,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,115,"            i2[j]   = (j + m2)    % r;
",6,2,1,2,4,0,0,0,0,13,26,6,0.08511,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,116,"            i3[j]   = (j + m3)    % r;
",6,2,1,2,4,0,0,0,0,13,26,6,0.08511,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,120,"        setSeed(seed);
",0,0,0,1,2,0,4,0,0,4,14,5,0.08511,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,122,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.08511,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,154,"        if (seed == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.08511,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,234,"        double previous = val[0];
",2,0,1,1,2,0,0,0,0,4,25,5,1.00000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,235,"        final int max = val.length;
",6,0,0,0,0,1,0,0,0,7,27,4,1.00000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,239,"        for (index = 1; index < max; index++) {
",8,1,0,1,3,0,0,0,0,11,39,5,1.00000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,240,"            switch (dir) {
",2,0,0,1,3,0,0,0,0,2,14,7,1.00000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,242,"                if (strict) {
",2,0,0,1,3,0,0,0,0,2,13,8,1.00000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,243,"                    if (val[index] <= previous) {
",2,1,1,2,5,0,0,0,0,7,29,10,1.00000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,268,"            previous = val[index];
",2,0,1,1,2,0,0,0,0,7,22,7,1.00000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,271,"        if (index == max) {
",4,1,0,1,3,0,0,0,0,5,19,4,1.00000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,273,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,1.00000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,295,"        checkOrder(val, dir, strict, true);
",0,0,0,1,2,0,8,0,0,9,35,5,1.00000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,296,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,306,"        checkOrder(val, OrderDirection.INCREASING, true);
",4,0,0,1,2,0,4,0,0,9,49,5,1.00000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,307,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,143,"    public static enum OrderDirection {
",2,0,0,0,1,2,0,0,0,4,35,2,1.00000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,145,"        INCREASING,
",2,0,0,0,0,0,0,0,0,2,11,3,1.00000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,147,"        DECREASING
",2,0,0,0,0,0,0,0,0,2,10,3,1.00000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,166,"            switch (dir) {
",2,0,0,1,3,0,0,0,0,2,14,6,1.00000,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,141,"        return new UnivariateFunction() {
",0,0,0,1,3,1,0,2,0,2,33,6,1.00000,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,141,"        return new UnivariateFunction() {
",0,0,0,1,3,1,0,2,0,2,33,6,1.00000,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,144,"                double r = f[0].value(x);
",2,0,1,2,4,0,4,0,0,8,25,10,1.00000,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,145,"                for (int i = 1; i < f.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,9,1.00000,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,146,"                    r += f[i].value(x);
",2,0,1,2,4,0,4,0,0,11,19,11,1.00000,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,148,"                return r;
",2,0,0,0,0,1,0,0,0,2,9,9,1.00000,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,64,"               DimensionMismatchException {
",2,0,0,0,1,0,0,0,0,2,28,2,1.00000,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,65,"        if (x == null ||
",2,2,0,0,1,0,0,0,0,4,16,4,1.00000,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,69,"        if (x.length == 0 ||
",4,2,0,0,1,0,0,0,0,6,20,4,1.00000,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,73,"        if (y.length != x.length) {
",8,1,0,1,3,0,0,0,0,9,27,4,1.00000,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,76,"        MathArrays.checkOrder(x);
",0,0,0,1,2,0,6,0,0,6,25,5,1.00000,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,78,"        abscissa = MathArrays.copyOf(x);
",2,0,0,1,2,0,6,0,0,9,32,4,1.00000,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,79,"        ordinate = MathArrays.copyOf(y);
",2,0,0,1,2,0,6,0,0,9,32,4,1.00000,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,80,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,84,"        int index = Arrays.binarySearch(abscissa, x);
",2,0,0,1,2,0,8,0,0,10,45,5,1.00000,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,85,"        double fx = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,1.00000,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,87,"        if (index < -1) {
",2,1,0,1,3,0,0,0,0,4,17,4,1.00000,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,89,"            fx = ordinate[-index-2];
",4,1,1,1,2,0,0,0,0,9,24,6,1.00000,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,90,"        } else if (index >= 0) {
",2,1,0,1,4,0,0,0,0,3,24,5,1.00000,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,96,"            fx = ordinate[0];
",2,0,1,1,2,0,0,0,0,5,17,7,1.00000,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,99,"        return fx;
",2,0,0,0,0,1,0,0,0,2,10,4,1.00000,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,193,"                                d = -tol1;
",4,0,0,0,0,0,0,0,0,6,10,16,0.25000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,539,"         return copyOf(source, source.length);
",4,0,0,1,2,1,4,0,0,8,37,5,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,567,"         final double[] output = new double[len];
",2,0,1,2,4,1,0,0,0,5,40,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,568,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));
",4,0,0,2,4,0,14,0,0,18,73,5,0.20000,0,1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,569,"         return output;
",2,0,0,0,0,1,0,0,0,2,14,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/analysis/function/Sin,23,33,"public class Sin implements UnivariateDifferentiable, DifferentiableUnivariateFunction {
",2,0,0,0,1,1,0,4,0,7,88,1,0.20000,0,0
defect4j,math,org/apache/commons/math3/analysis/function/Sin,23,36,"        return FastMath.sin(x);
",0,0,0,1,2,1,6,0,0,6,23,5,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1653,"        double x2 = x*x;
",6,1,0,0,0,0,0,0,0,7,16,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1655,"        double p = 2.7553817452272217E-6;
",2,0,0,0,0,0,0,0,0,2,33,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,24,532,"         return copyOf(source, source.length);
",4,0,0,1,2,1,4,0,0,8,37,5,0.25000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,24,560,"         final double[] output = new double[len];
",2,0,1,2,4,1,0,0,0,5,40,4,0.25000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,24,561,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));
",4,0,0,2,4,0,14,0,0,18,73,5,0.25000,0,1
defect4j,math,org/apache/commons/math3/util/MathArrays,24,562,"         return output;
",2,0,0,0,0,1,0,0,0,2,14,4,0.25000,0,0
defect4j,math,org/apache/commons/math3/analysis/function/Sin,24,33,"public class Sin implements UnivariateDifferentiable, DifferentiableUnivariateFunction {
",2,0,0,0,1,1,0,4,0,7,88,1,0.25000,0,0
defect4j,math,org/apache/commons/math3/analysis/function/Sin,24,36,"        return FastMath.sin(x);
",0,0,0,1,2,1,6,0,0,6,23,5,0.25000,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,183,"                            if (x <= m) {
",4,1,0,1,3,0,0,0,0,5,13,14,0.20000,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,184,"                                d = tol1;
",4,0,0,0,0,0,0,0,0,5,9,16,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1653,"        double x2 = x*x;
",6,1,0,0,0,0,0,0,0,7,16,5,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1655,"        double p = 2.7553817452272217E-6;
",2,0,0,0,0,0,0,0,0,2,33,5,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1656,"        p = p * x2 + -1.9841269659586505E-4;
",6,2,0,0,0,0,0,0,0,10,36,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1657,"        p = p * x2 + 0.008333333333329196;
",6,2,0,0,0,0,0,0,0,9,34,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1658,"        p = p * x2 + -0.16666666666666666;
",6,2,0,0,0,0,0,0,0,10,34,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1661,"        p = p * x2 * x;
",8,1,0,0,0,0,0,0,0,10,15,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1663,"        return p;
",2,0,0,0,0,1,0,0,0,2,9,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1673,"        double x2 = x*x;
",6,1,0,0,0,0,0,0,0,7,16,5,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1675,"        double p = 2.479773539153719E-5;
",2,0,0,0,0,0,0,0,0,2,32,5,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1676,"        p = p * x2 + -0.0013888888689039883;
",6,2,0,0,0,0,0,0,0,10,36,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1677,"        p = p * x2 + 0.041666666666621166;
",6,2,0,0,0,0,0,0,0,9,34,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1678,"        p = p * x2 + -0.49999999999999994;
",6,2,0,0,0,0,0,0,0,10,34,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1679,"        p *= x2;
",4,0,0,0,0,0,0,0,0,5,8,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1681,"        return p;
",2,0,0,0,0,1,0,0,0,2,9,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1692,"        int idx = (int) ((xa * 8.0) + 0.5);
",4,2,0,3,6,0,0,0,0,6,35,5,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1693,"        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;
",4,1,1,1,2,1,0,0,0,10,54,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1696,"        final double sintA = SINE_TABLE_A[idx];
",2,0,1,1,2,1,0,0,0,7,39,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1697,"        final double sintB = SINE_TABLE_B[idx];
",2,0,1,1,2,1,0,0,0,7,39,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1698,"        final double costA = COSINE_TABLE_A[idx];
",2,0,1,1,2,1,0,0,0,7,41,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1699,"        final double costB = COSINE_TABLE_B[idx];
",2,0,1,1,2,1,0,0,0,7,41,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1702,"        double sinEpsA = epsilon;
",4,0,0,0,0,0,0,0,0,4,25,5,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1703,"        double sinEpsB = polySine(epsilon);
",2,0,0,1,2,0,4,0,0,6,35,5,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1704,"        final double cosEpsA = 1.0;
",2,0,0,0,0,1,0,0,0,3,27,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1705,"        final double cosEpsB = polyCosine(epsilon);
",2,0,0,1,2,1,4,0,0,7,43,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1708,"        final double temp = sinEpsA * HEX_40000000;
",6,1,0,0,0,1,0,0,0,8,43,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1709,"        double temp2 = (sinEpsA + temp) - temp;
",8,2,0,1,2,0,0,0,0,10,39,5,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1710,"        sinEpsB +=  sinEpsA - temp2;
",6,1,0,0,0,0,0,0,0,8,28,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1711,"        sinEpsA = temp2;
",4,0,0,0,0,0,0,0,0,5,16,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1737,"        double a = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1738,"        double b = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1740,"        double t = sintA;
",4,0,0,0,0,0,0,0,0,4,17,5,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1741,"        double c = a + t;
",6,1,0,0,0,0,0,0,0,7,17,5,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1742,"        double d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,10,24,5,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1743,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1744,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1746,"        t = costA * sinEpsA;
",6,1,0,0,0,0,0,0,0,8,20,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1747,"        c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1748,"        d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,326,"                a = FastMath.sqrt(c1 / c2);
",6,1,0,1,2,0,4,0,0,12,27,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,327,"                omega = FastMath.sqrt(c2 / c3);
",6,1,0,1,2,0,4,0,0,12,31,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,201,"            this.observations = observations.clone();
",2,0,0,1,2,0,4,0,0,7,41,5,0.25000,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,202,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.25000,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,215,"            sortObservations();
",0,0,0,1,2,0,2,0,0,2,19,6,0.25000,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,216,"            guessAOmega();
",0,0,0,1,2,0,2,0,0,2,14,6,0.25000,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,217,"            guessPhi();
",0,0,0,1,2,0,2,0,0,2,11,6,0.25000,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,218,"            return new double[] { a, omega, phi };
",6,0,0,2,4,1,0,0,0,6,38,7,0.25000,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,228,"            WeightedObservedPoint curr = observations[0];
",2,0,1,1,2,0,0,2,0,6,45,5,0.25000,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,229,"            for (int j = 1; j < observations.length; ++j) {
",10,1,0,1,3,0,0,0,0,12,47,5,0.25000,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,48,"                                Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,1.00000,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,49,"        getContext().addMessage(pattern, args);
",0,0,0,2,4,0,8,0,0,8,39,5,1.00000,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,50,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,69,"        this(LocalizedFormats.ILLEGAL_STATE);
",4,0,0,1,2,0,0,0,0,4,37,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,70,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,74,"        return context;
",2,0,0,0,0,1,0,0,0,2,15,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,45,"                                     Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,0.14286,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,46,"        context = new ExceptionContext(this);
",2,0,0,1,2,0,0,2,0,5,37,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,47,"        context.addMessage(pattern, args);
",0,0,0,1,2,0,8,0,0,8,34,5,0.14286,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,188,"            this.numerator = (int) a0;
",4,0,0,1,2,0,0,0,0,5,26,6,0.04545,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,189,"            this.denominator = 1;
",2,0,0,0,0,0,0,0,0,3,21,6,0.04545,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,190,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.04545,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,215,"                p0 = p1;
",4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,216,"                p1 = p2;
",4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,217,"                q0 = q1;
",4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,218,"                q1 = q2;
",4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,219,"                a0 = a1;
",4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,220,"                r0 = r1;
",4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,26,3255,"            return x*y;
",4,1,0,0,0,1,0,0,0,5,11,6,0.02000,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,193,"        long p0 = 1;
",2,0,0,0,0,0,0,0,0,2,12,5,0.01961,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,194,"        long q0 = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.01961,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,195,"        long p1 = a0;
",4,0,0,0,0,0,0,0,0,4,13,5,0.01961,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,196,"        long q1 = 1;
",2,0,0,0,0,0,0,0,0,2,12,5,0.01961,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,198,"        long p2 = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.01961,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,199,"        long q2 = 1;
",2,0,0,0,0,0,0,0,0,2,12,5,0.01961,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,201,"        int n = 0;
",2,0,0,0,0,0,0,0,0,2,10,5,0.01961,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,202,"        boolean stop = false;
",2,0,0,0,0,0,0,0,0,3,21,5,0.01961,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,204,"            ++n;
",2,0,0,0,0,0,0,0,0,3,4,6,0.01961,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,205,"            double r1 = 1.0 / (r0 - a0);
",6,2,0,1,2,0,0,0,0,8,28,7,0.01961,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,206,"            long a1 = (long)FastMath.floor(r1);
",2,0,0,2,4,0,6,0,0,8,35,7,0.01961,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,207,"            p2 = (a1 * p1) + p0;
",8,2,0,1,2,0,0,0,0,11,20,6,0.01961,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,208,"            q2 = (a1 * q1) + q0;
",8,2,0,1,2,0,0,0,0,11,20,6,0.01961,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,213,"            double convergent = (double)p2 / (double)q2;
",6,1,0,2,4,0,0,0,0,7,44,7,0.01961,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,214,"            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {
",14,6,0,2,5,0,4,0,0,24,93,6,0.01961,0,1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,224,"        } while (!stop);
",2,0,0,1,3,0,0,0,0,3,16,4,0.01961,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,122,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01923,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,121,"        this(value, epsilon, Integer.MAX_VALUE, maxIterations);
",10,0,0,1,2,0,0,0,0,10,55,4,0.01887,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,177,"    {
",0,0,0,0,1,0,0,0,0,0,1,3,0.01818,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,178,"        long overflow = Integer.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,6,34,5,0.01818,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,179,"        double r0 = value;
",4,0,0,0,0,0,0,0,0,4,18,5,0.01818,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,180,"        long a0 = (long)FastMath.floor(r0);
",2,0,0,2,4,0,6,0,0,8,35,5,0.01818,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,181,"        if (a0 > overflow) {
",4,1,0,1,3,0,0,0,0,5,20,4,0.01818,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,187,"        if (FastMath.abs(a0 - value) < epsilon) {
",6,2,0,2,5,0,4,0,0,12,41,4,0.01818,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,26,2927,"        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0
",8,2,0,2,4,1,0,0,0,11,61,5,0.01695,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,26,3241,"        if (x != x) { // NaN
",4,1,0,1,3,0,0,0,0,5,20,4,0.01695,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,555,"        return new Fraction(numerator * i, denominator);
",6,1,0,1,2,1,0,2,0,9,48,5,0.50000,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,319,"        return (double)numerator / (double)denominator;
",4,1,0,2,4,1,0,0,0,5,47,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,256,"    public Fraction(int num, int den) {
",6,0,0,1,3,1,0,0,0,7,35,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,257,"        if (den == 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,261,"        if (den < 0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,271,"        final int d = ArithmeticUtils.gcd(num, den);
",2,0,0,1,2,1,8,0,0,11,44,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,272,"        if (d > 1) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,273,"            num /= d;
",4,0,0,0,0,0,0,0,0,5,9,6,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,274,"            den /= d;
",4,0,0,0,0,0,0,0,0,5,9,6,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,278,"        if (den < 0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,282,"        this.numerator   = num;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,283,"        this.denominator = den;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,284,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,42,"    public static final Fraction TWO = new Fraction(2, 1);
",2,0,0,1,2,3,0,4,0,9,54,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,45,"    public static final Fraction ONE = new Fraction(1, 1);
",2,0,0,1,2,3,0,4,0,9,54,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,48,"    public static final Fraction ZERO = new Fraction(0, 1);
",2,0,0,1,2,3,0,4,0,9,55,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,51,"    public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);
",2,0,0,1,2,3,0,4,0,9,62,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,54,"    public static final Fraction ONE_FIFTH = new Fraction(1, 5);
",2,0,0,1,2,3,0,4,0,9,60,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,57,"    public static final Fraction ONE_HALF = new Fraction(1, 2);
",2,0,0,1,2,3,0,4,0,9,59,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,60,"    public static final Fraction ONE_QUARTER = new Fraction(1, 4);
",2,0,0,1,2,3,0,4,0,9,62,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,63,"    public static final Fraction ONE_THIRD = new Fraction(1, 3);
",2,0,0,1,2,3,0,4,0,9,60,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,66,"    public static final Fraction THREE_FIFTHS = new Fraction(3, 5);
",2,0,0,1,2,3,0,4,0,9,63,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,69,"    public static final Fraction THREE_QUARTERS = new Fraction(3, 4);
",2,0,0,1,2,3,0,4,0,9,65,2,0.00488,0,0
