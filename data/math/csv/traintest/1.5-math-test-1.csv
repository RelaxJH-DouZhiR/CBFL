dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,predict
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,275,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,1.00000,1,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,267,"                return current;
",2,0,0,0,0,1,0,0,0,2,15,8,0.11111,1,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,209,"            if ((p2 > overflow) || (q2 > overflow)) {
",8,3,0,3,7,0,0,0,0,11,41,6,0.01961,1,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,597,"        return multiply(100).doubleValue();
",0,0,0,2,4,1,4,0,0,4,35,5,1.00000,1,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,374,"        return res;
",2,0,0,0,0,1,0,0,0,2,11,4,1,1,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,173,"        final int n1n2prod = n1 * n2;
",6,1,0,0,0,1,0,0,0,8,29,4,1.00000,1,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,189,"            q1 = q2;
",4,0,0,0,0,0,0,0,0,5,8,6,0.04082,1,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,136,"            if ((Boolean) tree.getAttribute()) {
",0,0,0,3,7,0,4,2,0,6,36,7,0.00000,1,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,338,"            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
",0,1,0,2,5,0,8,0,0,9,50,6,0.05882,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1274,"                aa = ya + lnCoef_i[0];
",4,1,1,1,2,0,0,0,0,8,22,8,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1275,"                ab = yb + lnCoef_i[1];
",4,1,1,1,2,0,0,0,0,8,22,8,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1277,"                tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,8,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1278,"                ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,8,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1279,"                yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,8,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1283,"            aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,6,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1284,"            ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,6,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1292,"            lnza = aa + ab;
",6,1,0,0,0,0,0,0,0,8,15,6,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1293,"            lnzb = -(lnza - aa - ab);
",8,1,0,1,2,0,0,0,0,11,25,6,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1294,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1348,"            hiPrec[0] = a;
",2,0,1,1,2,0,0,0,0,5,14,6,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1349,"            hiPrec[1] = b;
",2,0,1,1,2,0,0,0,0,5,14,6,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1443,"        final double lns[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,35,4,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1445,"        if (y == 0.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1449,"        if (x != x) { // X is NaN
",4,1,0,1,3,0,0,0,0,5,25,4,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1454,"        if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1479,"        if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1490,"        if (y == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1502,"        if (x == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1526,"        if (y == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1540,"        if (x < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1557,"        if (y < 8e298 && y > -8e298) {
",4,3,0,1,3,0,0,0,0,8,30,4,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1558,"            double tmp1 = y * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,31,7,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1559,"            ya = y + tmp1 - tmp1;
",8,2,0,0,0,0,0,0,0,11,21,6,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1560,"            yb = y - ya;
",6,1,0,0,0,0,0,0,0,8,12,6,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1561,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1569,"        final double lores = log(x, lns);
",2,0,0,1,2,1,6,0,0,9,33,4,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1570,"        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN
",0,0,0,2,5,0,6,0,0,6,73,5,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1574,"        double lna = lns[0];
",2,0,1,1,2,0,0,0,0,4,20,5,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1575,"        double lnb = lns[1];
",2,0,1,1,2,0,0,0,0,4,20,5,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1578,"        double tmp1 = lna * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,33,5,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1579,"        double tmp2 = lna + tmp1 - tmp1;
",8,2,0,0,0,0,0,0,0,10,32,5,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1580,"        lnb += lna - tmp2;
",6,1,0,0,0,0,0,0,0,8,18,4,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1581,"        lna = tmp2;
",4,0,0,0,0,0,0,0,0,5,11,4,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1584,"        final double aa = lna * ya;
",6,1,0,0,0,1,0,0,0,8,27,4,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1585,"        final double ab = lna * yb + lnb * ya + lnb * yb;
",14,5,0,0,0,1,0,0,0,20,49,4,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1587,"        lna = aa+ab;
",6,1,0,0,0,0,0,0,0,8,12,4,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1588,"        lnb = -(lna - aa - ab);
",8,1,0,1,2,0,0,0,0,11,23,4,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1590,"        double z = 1.0 / 120.0;
",2,1,0,0,0,0,0,0,0,3,23,5,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1591,"        z = z * lnb + (1.0 / 24.0);
",6,3,0,1,2,0,0,0,0,10,27,4,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1592,"        z = z * lnb + (1.0 / 6.0);
",6,3,0,1,2,0,0,0,0,10,26,4,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1593,"        z = z * lnb + 0.5;
",6,2,0,0,0,0,0,0,0,9,18,4,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1594,"        z = z * lnb + 1.0;
",6,2,0,0,0,0,0,0,0,9,18,4,0.50000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1595,"        z = z * lnb;
",6,1,0,0,0,0,0,0,0,8,12,4,0.50000,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,246,"        random.setSeed(seed);
",0,0,0,1,2,0,6,0,0,6,21,5,0.42857,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,247,"        randomData.reSeed(seed);
",0,0,0,1,2,0,6,0,0,6,24,5,0.42857,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,248,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.42857,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,461,"        delegate.reSeed(seed);
",0,0,0,1,2,0,6,0,0,6,22,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,462,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.33333,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,648,"       getRan().setSeed(seed);
",0,0,0,2,4,0,6,0,0,6,23,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,649,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,374,"        if (shape < 1) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,413,"        final double d = shape - 0.333333333333333333;
",4,1,0,0,0,1,0,0,0,6,46,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,414,"        final double c = 1 / (3 * FastMath.sqrt(d));
",2,2,0,2,4,1,6,0,0,11,44,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,417,"            final double x = random.nextGaussian();
",2,0,0,1,2,1,4,0,0,7,39,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,418,"            final double v = (1 + c * x) * (1 + c * x) * (1 + c * x);
",14,7,0,3,6,1,0,0,0,22,57,6,0.33333,0,1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,420,"            if (v <= 0) {
",2,1,0,1,3,0,0,0,0,3,13,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,424,"            final double x2 = x * x;
",6,1,0,0,0,1,0,0,0,8,24,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,425,"            final double u = random.nextDouble();
",2,0,0,1,2,1,4,0,0,7,37,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,428,"            if (u < 1 - 0.0331 * x2 * x2) {
",6,3,0,1,3,0,0,0,0,9,31,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,429,"                return scale * d * v;
",6,1,0,0,0,1,0,0,0,7,21,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,432,"            if (FastMath.log(u) < 0.5 * x2 + d * (1 - v + FastMath.log(v))) {
",6,6,0,4,9,0,12,0,0,24,65,6,0.33333,0,1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,433,"                return scale * d * v;
",6,1,0,0,0,1,0,0,0,7,21,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,311,"        final double n = random.nextGaussian();
",2,0,0,1,2,1,4,0,0,7,39,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,312,"        return FastMath.exp(scale + shape * n);
",6,2,0,1,2,1,4,0,0,12,39,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,79,"        super(K, M1, M2, M3, seed);
",10,0,0,1,2,0,0,0,0,10,27,4,0.31034,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,80,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.31034,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,714,"        if (rand == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.31034,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,715,"            initRan();
",0,0,0,1,2,0,2,0,0,2,10,7,0.31034,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,717,"        return rand;
",2,0,0,0,0,1,0,0,0,2,12,4,0.31034,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,725,"        rand = new Well19937c(System.currentTimeMillis() + System.identityHashCode(this));
",2,1,0,3,6,0,8,2,0,14,82,4,0.31034,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,726,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.31034,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,132,"        this(k, m1, m2, m3, new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });
",12,2,0,7,14,0,0,0,0,14,83,4,0.25000,0,1
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,133,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.25000,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,86,"        final int indexRm1 = iRm1[index];
",2,0,1,1,2,1,0,0,0,7,33,4,0.22500,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,87,"        final int indexRm2 = iRm2[index];
",2,0,1,1,2,1,0,0,0,7,33,4,0.22500,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,89,"        final int v0       = v[index];
",2,0,1,1,2,1,0,0,0,7,30,4,0.22500,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,90,"        final int vM1      = v[i1[index]];
",2,0,1,2,4,1,0,0,0,9,34,4,0.22500,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,91,"        final int vM2      = v[i2[index]];
",2,0,1,2,4,1,0,0,0,9,34,4,0.22500,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,63,"        super(optimizer);
",2,0,0,1,2,0,0,0,0,2,17,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,64,"        degree = -1; // To avoid compilation error until the instance variable is removed.
",2,0,0,0,0,0,0,0,0,4,82,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,65,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,110,"        return fit(new PolynomialFunction.Parametric(), guess);
",4,0,0,2,4,1,4,0,0,8,55,5,0.20000,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,69,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.20000,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,70,"        MathUtils.checkNotNull(c);
",0,0,0,1,2,0,6,0,0,6,26,5,0.20000,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,71,"        int n = c.length;
",6,0,0,0,0,0,0,0,0,6,17,5,0.20000,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,72,"        if (n == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,75,"        while ((n > 1) && (c[n - 1] == 0)) {
",4,4,1,4,9,0,0,0,0,10,36,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,78,"        this.coefficients = new double[n];
",2,0,1,1,2,0,0,0,0,5,34,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,79,"        System.arraycopy(c, 0, this.coefficients, 0, n);
",2,0,0,1,2,0,8,0,0,10,48,5,0.20000,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,80,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,94,"       return evaluate(coefficients, x);
",0,0,0,1,2,1,6,0,0,6,33,5,0.20000,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,395,"    public static class Parametric implements ParametricUnivariateFunction {
",2,0,0,0,1,2,0,2,0,6,72,2,0.12500,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,130,"        MathUtils.checkNotNull(coefficients);
",0,0,0,1,2,0,6,0,0,6,37,5,0.12500,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,131,"        int n = coefficients.length;
",6,0,0,0,0,0,0,0,0,6,28,5,0.12500,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,132,"        if (n == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.12500,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,135,"        double result = coefficients[n - 1];
",4,1,1,1,2,0,0,0,0,7,36,5,0.12500,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,136,"        for (int j = n - 2; j >= 0; j--) {
",8,2,0,1,3,0,0,0,0,11,34,4,0.12500,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,139,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.12500,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,153,"        return fit(Integer.MAX_VALUE, f, initialGuess);
",4,0,0,1,2,1,6,0,0,10,47,5,0.05000,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,210,"        public OldTheoreticalValuesFunction(final ParametricUnivariateFunction f) {
",4,0,0,1,3,2,0,2,0,8,75,3,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,211,"            this.f = f;
",4,0,0,0,0,0,0,0,0,5,11,5,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,212,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,176,"        double[] target  = new double[observations.size()];
",2,0,0,3,6,0,4,0,0,6,51,5,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,177,"        double[] weights = new double[observations.size()];
",2,0,0,3,6,0,4,0,0,6,51,5,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,178,"        int i = 0;
",2,0,0,0,0,0,0,0,0,2,10,5,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,179,"        for (WeightedObservedPoint point : observations) {
",4,0,0,1,3,0,0,2,0,6,50,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,180,"            target[i]  = point.getY();
",0,0,1,2,4,0,4,0,0,9,26,6,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,181,"            weights[i] = point.getWeight();
",0,0,1,2,4,0,4,0,0,9,31,6,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,182,"            ++i;
",2,0,0,0,0,0,0,0,0,3,4,6,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,183,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,187,"        if (optimizer == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,189,"            optimum = oldOptimizer.optimize(maxEval, new OldTheoreticalValuesFunction(f),
",4,0,0,1,3,0,6,2,0,13,77,6,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,59,"        return weight;
",2,0,0,0,0,1,0,0,0,2,14,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,423,"        return optimizeInternal(maxEval,
",0,0,0,0,1,1,4,0,0,4,32,5,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,62,"@Deprecated
",2,0,0,0,0,0,0,0,0,2,11,2,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,109,"        observations.add(new WeightedObservedPoint(weight, x, y));
",6,0,0,2,4,0,4,2,0,12,58,5,0.04167,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,110,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04167,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,73,"        return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.04167,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,49,"    public WeightedObservedPoint(final double weight, final double x, final double y) {
",8,0,0,1,3,4,0,0,0,12,83,2,0.04000,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,50,"        this.weight = weight;
",4,0,0,0,0,0,0,0,0,5,21,4,0.04000,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,51,"        this.x      = x;
",4,0,0,0,0,0,0,0,0,5,16,4,0.04000,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,52,"        this.y      = y;
",4,0,0,0,0,0,0,0,0,5,16,4,0.04000,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,53,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04000,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,69,"    public CurveFitter(final DifferentiableMultivariateVectorOptimizer optimizer) {
",4,0,0,1,3,2,0,2,0,8,79,2,0.03846,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,70,"        this.oldOptimizer = optimizer;
",4,0,0,0,0,0,0,0,0,5,30,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,71,"        this.optimizer    = null;
",2,0,0,0,0,0,0,0,0,3,25,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,72,"        observations      = new ArrayList<WeightedObservedPoint>();
",2,0,0,1,2,0,0,4,0,7,59,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,73,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03846,0,0
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,158,"        this(100, 1e-10, 1e-10, 1e-10, Precision.SAFE_MIN);
",4,0,0,1,2,0,0,0,0,4,51,5,0.02381,0,0
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,159,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02381,0,0
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,270,"        super(null); // No custom convergence criterion.
",0,0,0,1,2,0,0,0,0,1,48,3,0.01639,0,0
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,271,"        this.initialStepBoundFactor = initialStepBoundFactor;
",4,0,0,0,0,0,0,0,0,5,53,4,0.01639,0,0
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,272,"        this.costRelativeTolerance = costRelativeTolerance;
",4,0,0,0,0,0,0,0,0,5,51,4,0.01639,0,0
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,273,"        this.parRelativeTolerance = parRelativeTolerance;
",4,0,0,0,0,0,0,0,0,5,49,4,0.01639,0,0
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,274,"        this.orthoTolerance = orthoTolerance;
",4,0,0,0,0,0,0,0,0,5,37,4,0.01639,0,0
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,275,"        this.qrRankingThreshold = threshold;
",4,0,0,0,0,0,0,0,0,5,36,4,0.01639,0,0
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,276,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01639,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,401,"                final double mij = matrix.getEntry(i, j);
",2,0,0,1,2,1,8,0,0,11,41,8,0.01266,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,402,"                final double mji = matrix.getEntry(j, i);
",2,0,0,1,2,1,8,0,0,11,41,8,0.01266,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,403,"                if (FastMath.abs(mij - mji) >
",4,2,0,1,3,0,4,0,0,10,29,8,0.01266,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,13,3532,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.01220,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,13,3535,"        if (a < b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.01220,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,13,3539,"        if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.01220,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,13,3544,"        long bits = Double.doubleToRawLongBits(a);
",2,0,0,1,2,0,6,0,0,8,42,5,0.01220,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,13,3545,"        if (bits == 0x8000000000000000L) {
",2,1,0,1,3,0,0,0,0,3,34,4,0.01220,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,13,3548,"        return a;
",2,0,0,0,0,1,0,0,0,2,9,4,0.01220,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,56,"    protected AbstractRealMatrix() {}
",2,0,0,2,4,1,0,0,0,3,33,2,0.01205,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,47,"    private static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance(Locale.US);
",6,0,0,1,2,3,4,2,0,15,95,2,0.01205,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,50,"        DEFAULT_FORMAT.getFormat().setMinimumFractionDigits(1);
",0,0,0,2,4,0,6,0,0,6,55,5,0.01205,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,51,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01205,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,616,"        return getColumnDimension() == getRowDimension();
",0,1,0,2,4,1,4,0,0,5,49,4,0.01205,0,0
defect4j,math,org/apache/commons/math3/linear/RealLinearOperator,13,53,"public abstract class RealLinearOperator {
",2,0,0,0,1,2,0,0,0,4,42,1,0.01205,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,52,"    public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();
",2,0,0,1,2,3,4,2,0,11,85,2,0.01205,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,58,"    public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(""["", ""]"", """", """", ""; "", "", "");
",2,0,0,2,4,3,0,4,0,15,104,2,0.01205,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,391,"        final int rows = matrix.getRowDimension();
",2,0,0,1,2,1,4,0,0,7,42,4,0.01205,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,392,"        if (rows != matrix.getColumnDimension()) {
",2,1,0,2,5,0,4,0,0,7,42,4,0.01205,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,399,"        for (int i = 0; i < rows; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.01205,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,400,"            for (int j = i + 1; j < rows; j++) {
",10,2,0,1,3,0,0,0,0,13,36,6,0.01205,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,413,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.01205,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,440,"        return isSymmetricInternal(matrix, eps, false);
",0,0,0,1,2,1,6,0,0,7,47,5,0.01205,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,455,"        checkRowIndex(m, row);
",0,0,0,1,2,0,6,0,0,6,22,5,0.01205,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,456,"        checkColumnIndex(m, column);
",0,0,0,1,2,0,6,0,0,6,28,5,0.01205,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,457,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01205,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,468,"        if (row < 0 ||
",2,2,0,0,1,0,0,0,0,4,14,4,0.01205,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,473,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01205,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,484,"        if (column < 0 || column >= m.getColumnDimension()) {
",4,3,0,2,5,0,4,0,0,11,53,4,0.01205,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,488,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01205,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,99,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,
",8,0,0,0,1,0,0,0,0,8,76,4,0.01205,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,101,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01205,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,115,"        this(prefix, suffix, rowPrefix, rowSuffix, rowSeparator, columnSeparator,
",12,0,0,0,1,0,0,0,0,12,73,4,0.01205,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,117,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01205,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,133,"                            final NumberFormat format) {
",2,0,0,0,2,1,0,2,0,5,28,3,0.01205,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,134,"        this.prefix            = prefix;
",4,0,0,0,0,0,0,0,0,5,32,4,0.01205,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,135,"        this.suffix            = suffix;
",4,0,0,0,0,0,0,0,0,5,32,4,0.01205,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,136,"        this.rowPrefix         = rowPrefix;
",4,0,0,0,0,0,0,0,0,5,35,4,0.01205,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,137,"        this.rowSuffix         = rowSuffix;
",4,0,0,0,0,0,0,0,0,5,35,4,0.01205,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,138,"        this.rowSeparator      = rowSeparator;
",4,0,0,0,0,0,0,0,0,5,38,4,0.01205,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,139,"        this.columnSeparator   = columnSeparator;
",4,0,0,0,0,0,0,0,0,5,41,4,0.01205,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,140,"        this.format            = format;
",4,0,0,0,0,0,0,0,0,5,32,4,0.01205,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,142,"        this.format.setGroupingUsed(false);
",2,0,0,1,2,0,2,0,0,5,35,5,0.01205,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,143,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01205,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,207,"        return format;
",2,0,0,0,0,1,0,0,0,2,14,4,0.01205,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,215,"        return getInstance(Locale.getDefault());
",0,0,0,2,4,1,6,0,0,6,40,5,0.01205,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,224,"        return new RealMatrixFormat(CompositeFormat.getDefaultNumberFormat(locale));
",0,0,0,2,4,1,6,2,0,8,76,5,0.01205,0,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,67,"    public DiagonalMatrix(final double[] d) {
",4,0,0,2,5,2,0,0,0,6,41,2,0.01205,0,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,68,"        data = d.clone();
",2,0,0,1,2,0,4,0,0,7,17,4,0.01205,0,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,69,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01205,0,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,107,"        return new DiagonalMatrix(data);
",2,0,0,1,2,1,0,2,0,4,32,5,0.01205,0,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,203,"        final int dim = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,34,4,0.01205,0,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,204,"        final double[][] out = new double[dim][dim];
",2,0,1,4,8,1,0,0,0,7,44,4,0.01205,0,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,237,"        MatrixUtils.checkMatrixIndex(this, row, column);
",0,0,0,1,2,0,8,0,0,8,48,5,0.01205,0,0
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,37,"        super(optimizer);
",2,0,0,1,2,0,0,0,0,2,17,4,0.12500,0,0
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,38,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12500,0,0
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,68,"        return fit(new PolynomialFunction.Parametric(), guess);
",4,0,0,2,4,1,4,0,0,8,55,5,0.12500,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,69,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.12500,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,70,"        MathUtils.checkNotNull(c);
",0,0,0,1,2,0,6,0,0,6,26,5,0.12500,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,71,"        int n = c.length;
",6,0,0,0,0,0,0,0,0,6,17,5,0.12500,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,72,"        if (n == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.12500,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,75,"        while ((n > 1) && (c[n - 1] == 0)) {
",4,4,1,4,9,0,0,0,0,10,36,4,0.12500,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,78,"        this.coefficients = new double[n];
",2,0,1,1,2,0,0,0,0,5,34,4,0.12500,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,79,"        System.arraycopy(c, 0, this.coefficients, 0, n);
",2,0,0,1,2,0,8,0,0,10,48,5,0.12500,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,80,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12500,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,94,"       return evaluate(coefficients, x);
",0,0,0,1,2,1,6,0,0,6,33,5,0.12500,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,395,"    public static class Parametric implements ParametricUnivariateFunction {
",2,0,0,0,1,2,0,2,0,6,72,2,0.09091,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,130,"        MathUtils.checkNotNull(coefficients);
",0,0,0,1,2,0,6,0,0,6,37,5,0.09091,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,131,"        int n = coefficients.length;
",6,0,0,0,0,0,0,0,0,6,28,5,0.09091,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,132,"        if (n == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,135,"        double result = coefficients[n - 1];
",4,1,1,1,2,0,0,0,0,7,36,5,0.09091,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,136,"        for (int j = n - 2; j >= 0; j--) {
",8,2,0,1,3,0,0,0,0,11,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,139,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,136,"        return fit(Integer.MAX_VALUE, f, initialGuess);
",4,0,0,1,2,1,6,0,0,10,47,5,0.04348,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,98,"        super(rows, columns);
",4,0,0,1,2,0,0,0,0,4,21,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,99,"        this.rows = rows;
",4,0,0,0,0,0,0,0,0,5,17,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,100,"        this.columns = columns;
",4,0,0,0,0,0,0,0,0,5,23,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,103,"        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,0,0,0,0,12,49,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,104,"        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,0,0,0,0,12,55,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,107,"        blocks = createBlocksLayout(rows, columns);
",2,0,0,1,2,0,6,0,0,9,43,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,258,"        final int blockRows = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,1,0,0,0,12,62,4,0.04000,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,259,"        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,1,0,0,0,12,65,4,0.04000,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,261,"        final double[][] blocks = new double[blockRows * blockColumns][];
",6,1,0,4,8,1,0,0,0,8,65,4,0.04000,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,262,"        int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.04000,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,263,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.04000,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,264,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.04000,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,265,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,57,6,0.04000,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,266,"            final int iHeight = pEnd - pStart;
",6,1,0,0,0,1,0,0,0,8,34,6,0.04000,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,267,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,6,0.04000,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,268,"                final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,8,0.04000,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,269,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,60,8,0.04000,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,270,"                final int jWidth = qEnd - qStart;
",6,1,0,0,0,1,0,0,0,8,33,8,0.04000,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,271,"                blocks[blockIndex] = new double[iHeight * jWidth];
",4,1,1,2,4,0,0,0,0,10,50,8,0.04000,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,272,"                ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,8,0.04000,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,159,"        double[] target  = new double[observations.size()];
",2,0,0,3,6,0,4,0,0,6,51,5,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,160,"        double[] weights = new double[observations.size()];
",2,0,0,3,6,0,4,0,0,6,51,5,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,161,"        int i = 0;
",2,0,0,0,0,0,0,0,0,2,10,5,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,162,"        for (WeightedObservedPoint point : observations) {
",4,0,0,1,3,0,0,2,0,6,50,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,163,"            target[i]  = point.getY();
",0,0,1,2,4,0,4,0,0,9,26,6,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,164,"            weights[i] = point.getWeight();
",0,0,1,2,4,0,4,0,0,9,31,6,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,165,"            ++i;
",2,0,0,0,0,0,0,0,0,3,4,6,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,166,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,169,"        final TheoreticalValuesFunction model = new TheoreticalValuesFunction(f);
",4,0,0,1,2,1,0,4,0,9,73,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,172,"        final PointVectorValuePair optimum
",2,0,0,0,0,1,0,2,0,5,34,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,57,"        return weight;
",2,0,0,0,0,1,0,0,0,2,14,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,218,"            return new ModelFunctionJacobian(new MultivariateMatrixFunction() {
",0,0,0,1,4,1,0,4,0,4,67,6,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,191,"        public TheoreticalValuesFunction(final ParametricUnivariateFunction f) {
",4,0,0,1,3,2,0,2,0,8,72,3,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,192,"            this.f = f;
",4,0,0,0,0,0,0,0,0,5,11,5,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,193,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,199,"            return new ModelFunction(new MultivariateVectorFunction() {
",0,0,0,1,4,1,0,4,0,4,59,6,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,218,"            return new ModelFunctionJacobian(new MultivariateMatrixFunction() {
",0,0,0,1,4,1,0,4,0,4,67,6,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,199,"            return new ModelFunction(new MultivariateVectorFunction() {
",0,0,0,1,4,1,0,4,0,4,59,6,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,92,"        observations.add(new WeightedObservedPoint(weight, x, y));
",6,0,0,2,4,0,4,2,0,12,58,5,0.03704,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,93,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03704,0,0
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,75,"        return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.03704,0,0
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,45,"    public WeightedObservedPoint(final double weight, final double x, final double y) {
",8,0,0,1,3,4,0,0,0,12,83,2,0.03571,0,0
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,46,"        this.weight = weight;
",4,0,0,0,0,0,0,0,0,5,21,4,0.03571,0,0
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,47,"        this.x      = x;
",4,0,0,0,0,0,0,0,0,5,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,48,"        this.y      = y;
",4,0,0,0,0,0,0,0,0,5,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,49,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03571,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,63,"    public CurveFitter(final MultivariateVectorOptimizer optimizer) {
",4,0,0,1,3,2,0,2,0,8,65,2,0.03448,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,64,"        this.optimizer = optimizer;
",4,0,0,0,0,0,0,0,0,5,27,4,0.03448,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,65,"        observations = new ArrayList<WeightedObservedPoint>();
",2,0,0,1,2,0,0,4,0,7,54,4,0.03448,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,66,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03448,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,156,"        this(100, 1e-10, 1e-10, 1e-10, Precision.SAFE_MIN);
",4,0,0,1,2,0,0,0,0,4,51,5,0.02381,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,157,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02381,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,268,"        super(null); // No custom convergence criterion.
",0,0,0,1,2,0,0,0,0,1,48,3,0.01639,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,269,"        this.initialStepBoundFactor = initialStepBoundFactor;
",4,0,0,0,0,0,0,0,0,5,53,4,0.01639,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,270,"        this.costRelativeTolerance = costRelativeTolerance;
",4,0,0,0,0,0,0,0,0,5,51,4,0.01639,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,271,"        this.parRelativeTolerance = parRelativeTolerance;
",4,0,0,0,0,0,0,0,0,5,49,4,0.01639,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,272,"        this.orthoTolerance = orthoTolerance;
",4,0,0,0,0,0,0,0,0,5,37,4,0.01639,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,273,"        this.qrRankingThreshold = threshold;
",4,0,0,0,0,0,0,0,0,5,36,4,0.01639,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,274,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01639,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian,14,35,"    public ModelFunctionJacobian(MultivariateMatrixFunction j) {
",4,0,0,1,3,1,0,2,0,7,60,2,0.01176,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian,14,36,"        jacobian = j;
",4,0,0,0,0,0,0,0,0,5,13,4,0.01176,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian,14,37,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01176,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunction,14,35,"    public ModelFunction(MultivariateVectorFunction m) {
",4,0,0,1,3,1,0,2,0,7,52,2,0.01163,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunction,14,36,"        model = m;
",4,0,0,0,0,0,0,0,0,5,10,4,0.01163,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunction,14,37,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01163,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,14,3421,"        return (a <= b) ? a : b;
",8,1,0,1,2,1,0,0,0,9,24,5,0.01163,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,14,264,"        if (o == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.01163,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,14,267,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01163,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,14,43,"        return getDefaultNumberFormat(Locale.getDefault());
",0,0,0,2,4,1,6,0,0,6,51,5,0.01163,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Weight,14,41,"    public Weight(double[] weight) {
",4,0,0,2,5,1,0,0,0,5,32,2,0.01163,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Weight,14,42,"        final int dim = weight.length;
",6,0,0,0,0,1,0,0,0,7,30,4,0.01163,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Weight,14,43,"        weightMatrix = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(dim, dim);
",14,0,0,1,2,0,6,0,0,21,86,4,0.01163,0,1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Target,14,38,"    public Target(double[] observations) {
",4,0,0,2,5,1,0,0,0,5,38,2,0.01163,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Target,14,39,"        target = observations.clone();
",2,0,0,1,2,0,4,0,0,7,30,4,0.01163,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Target,14,40,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01163,0,0
defect4j,math,org/apache/commons/math3/optim/MaxEval,14,35,"    public MaxEval(int max) {
",4,0,0,1,3,1,0,0,0,5,25,2,0.01163,0,0
defect4j,math,org/apache/commons/math3/optim/MaxEval,14,36,"        if (max <= 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.01163,0,0
defect4j,math,org/apache/commons/math3/optim/MaxEval,14,40,"        maxEval = max;
",4,0,0,0,0,0,0,0,0,5,14,4,0.01163,0,0
defect4j,math,org/apache/commons/math3/optim/MaxEval,14,41,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01163,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1542,"                return pow(-x, y);
",2,0,0,1,2,1,4,0,0,7,18,9,1.00000,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,131,"    public MersenneTwister(long seed) {
",4,0,0,1,3,1,0,0,0,5,35,2,0.02174,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,132,"        mt = new int[N];
",2,0,1,1,2,0,0,0,0,5,16,4,0.02174,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,133,"        setSeed(seed);
",0,0,0,1,2,0,4,0,0,4,14,5,0.02174,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,134,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02174,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,94,"    private static final int[] MAG01 = { 0x0, 0x9908b0df };
",2,0,0,2,4,3,0,0,0,5,55,2,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,144,"        long longMT = seed;
",4,0,0,0,0,0,0,0,0,4,19,5,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,146,"        mt[0]= (int) longMT;
",2,0,1,2,4,0,0,0,0,5,20,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,147,"        for (mti = 1; mti < N; ++mti) {
",8,1,0,1,3,0,0,0,0,11,31,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,150,"            longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;
",8,5,0,3,6,0,0,0,0,14,71,6,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,151,"            mt[mti]= (int) longMT;
",2,0,1,2,4,0,0,0,0,7,22,6,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,154,"        clear(); // Clear normal deviate cache
",0,0,0,1,2,0,2,0,0,2,38,5,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,155,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,167,"        if (seed == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,172,"        setSeed(19650218);
",0,0,0,1,2,0,2,0,0,2,18,5,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,173,"        int i = 1;
",2,0,0,0,0,0,0,0,0,2,10,5,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,174,"        int j = 0;
",2,0,0,0,0,0,0,0,0,2,10,5,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,176,"        for (int k = FastMath.max(N, seed.length); k != 0; k--) {
",10,1,0,2,5,0,6,0,0,18,57,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,177,"            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);
",2,3,1,5,10,0,0,0,0,13,73,7,0.01389,0,1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,178,"            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);
",6,5,1,5,10,0,0,0,0,15,73,7,0.01389,0,1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,179,"            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1664525l)) + seed[j] + j; // non linear
",10,5,1,5,10,0,0,0,0,19,76,7,0.01389,0,1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,180,"            mt[i]   = (int) (l & 0xffffffffl);
",2,1,1,3,6,0,0,0,0,8,34,6,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,181,"            i++; j++;
",4,0,0,0,0,0,0,0,0,6,9,6,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,182,"            if (i >= N) {
",4,1,0,1,3,0,0,0,0,5,13,6,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,183,"                mt[0] = mt[N - 1];
",2,1,1,2,4,0,0,0,0,8,18,8,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,184,"                i = 1;
",2,0,0,0,0,0,0,0,0,3,6,8,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,186,"            if (j >= seed.length) {
",6,1,0,1,3,0,0,0,0,7,23,6,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,187,"                j = 0;
",2,0,0,0,0,0,0,0,0,3,6,8,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,191,"        for (int k = N - 1; k != 0; k--) {
",8,2,0,1,3,0,0,0,0,11,34,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,192,"            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);
",2,3,1,5,10,0,0,0,0,13,73,7,0.01389,0,1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,193,"            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);
",6,5,1,5,10,0,0,0,0,15,73,7,0.01389,0,1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,194,"            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1566083941l)) - i; // non linear
",10,5,0,4,8,0,0,0,0,15,69,7,0.01389,0,1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,195,"            mt[i]   = (int) (l & 0xffffffffL);
",2,1,1,3,6,0,0,0,0,8,34,6,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,196,"            i++;
",2,0,0,0,0,0,0,0,0,3,4,6,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,197,"            if (i >= N) {
",4,1,0,1,3,0,0,0,0,5,13,6,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,198,"                mt[0] = mt[N - 1];
",2,1,1,2,4,0,0,0,0,8,18,8,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,199,"                i = 1;
",2,0,0,0,0,0,0,0,0,3,6,8,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,203,"        mt[0] = 0x80000000; // MSB is 1; assuring non-zero initial array
",0,0,1,1,2,0,0,0,0,3,64,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,205,"        clear(); // Clear normal deviate cache
",0,0,0,1,2,0,2,0,0,2,38,5,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,207,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,216,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });
",4,2,0,7,14,0,2,0,0,8,71,5,0.01389,0,1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,217,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01389,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,16,384,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.15385,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,16,393,"      if (x > 20) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.15385,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,16,870,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.13333,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,16,874,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.13333,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,16,395,"              return 0.5 * exp(x);
",0,1,0,1,2,1,4,0,0,5,20,6,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,16,399,"              return 0.5 * exp(-x);
",2,1,0,1,2,1,2,0,0,6,21,6,0.09091,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,131,"    public MersenneTwister(long seed) {
",4,0,0,1,3,1,0,0,0,5,35,2,0.09091,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,132,"        mt = new int[N];
",2,0,1,1,2,0,0,0,0,5,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,133,"        setSeed(seed);
",0,0,0,1,2,0,4,0,0,4,14,5,0.09091,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,134,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.09091,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,94,"    private static final int[] MAG01 = { 0x0, 0x9908b0df };
",2,0,0,2,4,3,0,0,0,5,55,2,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,144,"        long longMT = seed;
",4,0,0,0,0,0,0,0,0,4,19,5,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,146,"        mt[0]= (int) longMT;
",2,0,1,2,4,0,0,0,0,5,20,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,147,"        for (mti = 1; mti < N; ++mti) {
",8,1,0,1,3,0,0,0,0,11,31,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,150,"            longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;
",8,5,0,3,6,0,0,0,0,14,71,6,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,151,"            mt[mti]= (int) longMT;
",2,0,1,2,4,0,0,0,0,7,22,6,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,154,"        clear(); // Clear normal deviate cache
",0,0,0,1,2,0,2,0,0,2,38,5,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,155,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,167,"        if (seed == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,172,"        setSeed(19650218);
",0,0,0,1,2,0,2,0,0,2,18,5,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,173,"        int i = 1;
",2,0,0,0,0,0,0,0,0,2,10,5,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,174,"        int j = 0;
",2,0,0,0,0,0,0,0,0,2,10,5,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,176,"        for (int k = FastMath.max(N, seed.length); k != 0; k--) {
",10,1,0,2,5,0,6,0,0,18,57,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,177,"            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);
",2,3,1,5,10,0,0,0,0,13,73,7,0.05714,0,1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,178,"            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);
",6,5,1,5,10,0,0,0,0,15,73,7,0.05714,0,1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,179,"            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1664525l)) + seed[j] + j; // non linear
",10,5,1,5,10,0,0,0,0,19,76,7,0.05714,0,1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,180,"            mt[i]   = (int) (l & 0xffffffffl);
",2,1,1,3,6,0,0,0,0,8,34,6,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,181,"            i++; j++;
",4,0,0,0,0,0,0,0,0,6,9,6,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,182,"            if (i >= N) {
",4,1,0,1,3,0,0,0,0,5,13,6,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,183,"                mt[0] = mt[N - 1];
",2,1,1,2,4,0,0,0,0,8,18,8,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,184,"                i = 1;
",2,0,0,0,0,0,0,0,0,3,6,8,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,186,"            if (j >= seed.length) {
",6,1,0,1,3,0,0,0,0,7,23,6,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,187,"                j = 0;
",2,0,0,0,0,0,0,0,0,3,6,8,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,191,"        for (int k = N - 1; k != 0; k--) {
",8,2,0,1,3,0,0,0,0,11,34,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,192,"            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);
",2,3,1,5,10,0,0,0,0,13,73,7,0.05714,0,1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,193,"            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);
",6,5,1,5,10,0,0,0,0,15,73,7,0.05714,0,1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,194,"            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1566083941l)) - i; // non linear
",10,5,0,4,8,0,0,0,0,15,69,7,0.05714,0,1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,195,"            mt[i]   = (int) (l & 0xffffffffL);
",2,1,1,3,6,0,0,0,0,8,34,6,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,196,"            i++;
",2,0,0,0,0,0,0,0,0,3,4,6,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,197,"            if (i >= N) {
",4,1,0,1,3,0,0,0,0,5,13,6,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,198,"                mt[0] = mt[N - 1];
",2,1,1,2,4,0,0,0,0,8,18,8,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,199,"                i = 1;
",2,0,0,0,0,0,0,0,0,3,6,8,0.05714,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1510,"            if (isNaN()) {
",0,0,0,2,5,0,2,0,0,2,14,7,1.00000,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1511,"                return this;
",0,0,0,0,0,1,0,0,0,0,12,3,1.00000,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1514,"            if (x.isNaN()) {
",0,0,0,2,5,0,4,0,0,4,16,7,1.00000,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1515,"                return x;
",2,0,0,0,0,1,0,0,0,2,9,8,1.00000,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1518,"            if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) {
",18,6,0,2,5,0,0,0,0,24,73,6,1.00000,0,1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1519,"                result = newInstance(this);
",2,0,0,1,2,0,2,0,0,5,27,8,1.00000,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1520,"                result.sign = (byte) (sign * x.sign);
",10,1,0,2,4,0,0,0,0,12,37,8,1.00000,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1521,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,1.00000,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1478,"            field.setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);
",4,0,0,1,2,0,4,0,0,8,47,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1479,"            return DfpField.FLAG_OVERFLOW;
",4,0,0,0,0,1,0,0,0,4,30,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1663,"            result = dotrap(excp, MULTIPLY_TRAP, result, result);
",2,0,0,1,2,0,10,0,0,13,53,6,0.25000,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2278,"                result.exp = result.exp - ERR_SCALE;
",10,1,0,0,0,0,0,0,0,12,36,5,0.25000,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2279,"                def = newInstance(getZero());
",2,0,0,2,4,0,4,0,0,7,29,5,0.25000,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2280,"                def.sign = result.sign;
",8,0,0,0,0,0,0,0,0,9,23,5,0.25000,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2281,"                def.nans = INFINITE;
",6,0,0,0,0,0,0,0,0,7,20,5,0.25000,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2282,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.25000,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2268,"                if ( (result.exp+mant.length) < MIN_EXP) {
",10,2,0,2,5,0,0,0,0,12,42,5,0.20000,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2272,"                    def = newInstance(result);  // gradual underflow
",2,0,0,1,2,0,4,0,0,7,48,7,0.20000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,583,"            lambda = 4 + (int) (3. * Math.log(dimension));
",2,2,0,3,6,0,6,0,0,11,46,6,1.00000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,751,"                    negccov = negcovMax;
",4,0,0,0,0,0,0,0,0,5,20,10,1.00000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,246,"        this(0);
",0,0,0,1,2,0,0,0,0,0,8,3,0.50000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,247,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,253,"        this(lambda, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,
",6,0,0,0,1,0,0,0,0,6,62,4,0.50000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,256,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,929,"            double[] res = new double[x.length];
",6,0,0,2,4,0,0,0,0,6,36,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,930,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,931,"                double diff = boundaries[1][i] - boundaries[0][i];
",2,1,1,4,8,0,0,0,0,11,50,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,932,"                res[i] = (x[i] - boundaries[0][i]) / diff;
",2,2,1,5,10,0,0,0,0,17,42,7,0.33333,0,1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,934,"            return res;
",2,0,0,0,0,1,0,0,0,2,11,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,955,"            double[] res = new double[x.length];
",6,0,0,2,4,0,0,0,0,6,36,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,956,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,957,"                double diff = boundaries[1][i] - boundaries[0][i];
",2,1,1,4,8,0,0,0,0,11,50,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,958,"                res[i] = diff * x[i] + boundaries[0][i];
",2,2,1,4,8,0,0,0,0,17,40,7,0.33333,0,1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,960,"            return res;
",2,0,0,0,0,1,0,0,0,2,11,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,970,"                double[] repaired = repair(point);
",2,0,0,2,4,0,4,0,0,6,34,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,971,"                value = CMAESOptimizer.this
",4,0,0,0,0,0,0,0,0,5,27,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,974,"            } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1014,"            double[] repaired = new double[x.length];
",6,0,0,2,4,0,0,0,0,6,41,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1015,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1016,"                if (x[i] < 0) {
",0,1,1,2,5,0,0,0,0,5,15,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1018,"                } else if (x[i] > 1.0) {
",0,1,1,2,6,0,0,0,0,5,24,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1021,"                    repaired[i] = x[i];
",0,0,1,2,4,0,0,0,0,9,19,10,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1024,"            return repaired;
",2,0,0,0,0,1,0,0,0,2,16,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1033,"            double penalty = 0;
",2,0,0,0,0,0,0,0,0,2,19,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1034,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1035,"                double diff = Math.abs(x[i] - repaired[i]);
",2,1,1,3,6,0,4,0,0,15,43,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1036,"                penalty += diff * valueRange;
",6,1,0,0,0,0,0,0,0,8,29,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1038,"            return isMinimize ? penalty : -penalty;
",6,0,0,0,0,1,0,0,0,7,39,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,459,"                    break generationLoop;
",2,0,0,0,0,0,0,0,0,2,21,9,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,535,"                boundaries = new double[2][];
",2,0,0,2,4,0,0,0,0,3,29,8,0.20000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,536,"                boundaries[0] = lB;
",2,0,1,1,2,0,0,0,0,5,19,8,0.20000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,537,"                boundaries[1] = uB;
",2,0,1,1,2,0,0,0,0,5,19,8,0.20000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,540,"                for (int i = 0; i < lB.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.20000,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,541,"                    if (Double.isInfinite(boundaries[1][i] - boundaries[0][i])) {
",0,1,1,6,13,0,4,0,0,13,61,11,0.20000,0,1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,128,"            lowerBound = lower.clone();
",2,0,0,1,2,0,4,0,0,7,27,6,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,136,"            upperBound = upper.clone();
",2,0,0,1,2,0,4,0,0,7,27,6,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,514,"                hasFiniteBounds = true;
",2,0,0,0,0,0,0,0,0,4,23,8,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,515,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,521,"            for (int i = 0; i < lB.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,6,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,522,"                if (Double.isInfinite(lB[i]) ||
",0,1,1,2,5,0,4,0,0,9,31,8,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,529,"            if (hasInfiniteBounds) {
",2,0,0,1,3,0,0,0,0,2,24,6,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,109,"            if (upper.length != dim) {
",6,1,0,1,3,0,0,0,0,7,26,6,0.12500,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,112,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.12500,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,113,"                final double v = startPoint[i];
",2,0,1,1,2,1,0,0,0,7,31,8,0.12500,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,114,"                final double hi = upper[i];
",2,0,1,1,2,1,0,0,0,7,27,8,0.12500,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,115,"                if (v > hi) {
",4,1,0,1,3,0,0,0,0,5,13,8,0.12500,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,100,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,101,"                final double v = startPoint[i];
",2,0,1,1,2,1,0,0,0,7,31,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,102,"                final double lo = lower[i];
",2,0,1,1,2,1,0,0,0,7,27,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,103,"                if (v < lo) {
",4,1,0,1,3,0,0,0,0,5,13,8,0.11111,0,0
