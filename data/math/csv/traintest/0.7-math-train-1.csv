dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,306,"                throw new FractionConversionException(value, p2, q2);
",6,0,0,1,2,0,0,2,0,8,53,9,0.50000,1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,268,"        return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();
",0,2,0,6,12,1,6,0,0,8,90,4,0.16667,1
defect4j,math,org/apache/commons/math3/complex/Complex,5,305,"            return NaN;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,372,"                    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,187,"        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
",10,0,0,6,12,1,10,4,0,25,99,4,0.00000,1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,87,"        final Line reverted = new Line(zero, zero.subtract(direction));
",4,0,0,2,4,1,6,4,0,15,63,4,0.00000,1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,183,"        return FastMath.pow(2 * FastMath.PI, -dim / 2) *
",6,3,0,1,2,1,4,0,0,14,48,4,0.50000,1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,921,"            return
",0,0,0,0,0,1,0,0,0,0,6,3,0.06667,1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,136,"            if ((Boolean) tree.getAttribute()) {
",0,0,0,3,7,0,4,2,0,6,36,7,0.00000,1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,338,"            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
",0,1,0,2,5,0,8,0,0,9,50,6,0.05882,1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,209,"        return chromosomes.iterator();
",0,0,0,1,2,1,4,0,0,4,30,5,1.00000,1
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,65,"        this.elitismRate = elitismRate;
",4,0,0,0,0,0,0,0,0,5,31,4,0.40000,1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,735,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.50000,1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1752,"                throw new PathIsExploredException(); // XXX
",0,0,0,1,2,0,0,2,0,2,43,10,0.00000,1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,238,"                targetY = -REDUCTION_FACTOR * yA;
",6,1,0,0,0,0,0,0,0,9,33,9,0.00000,1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,520,"                for (int i = 0; i < weights.length; i++) {
",10,1,0,1,3,0,0,0,0,12,42,9,0.50000,1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,164,"        if (!(geoMeanImpl instanceof GeometricMean)) {
",2,0,0,2,5,0,0,2,0,5,46,4,0.81818,1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,343,"                    return eventT;
",2,0,0,0,0,1,0,0,0,2,14,8,0.08333,1
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,50,"        this.rows = rowDimension;
",4,0,0,0,0,0,0,0,0,5,25,4,0.03333,1
defect4j,math,org/apache/commons/math/complex/Complex,46,297,"            return isZero ? NaN : INF;
",6,0,0,0,0,1,0,0,0,6,26,7,0.00000,1
defect4j,math,org/apache/commons/math/complex/Complex,47,105,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02174,1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,189,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.16667,1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,383,"        Iterator iter = res.entries.iterator();
",6,0,0,1,2,0,2,2,0,10,39,4,0.00000,1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,359,"      if (c == 0) {
",2,1,0,1,3,0,0,0,0,3,13,8,0.00000,1
defect4j,math,org/apache/commons/math/complex/Complex,53,153,"        return createComplex(real + rhs.getReal(),
",2,1,0,1,3,1,6,0,0,9,42,5,0.05263,1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,273,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,243,"        indices[last] = idx;
",2,0,1,1,2,0,0,0,0,7,20,4,0.00000,1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,175,"            int sum = 0;
",2,0,0,0,0,0,0,0,0,2,12,7,0.50000,1
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,121,"        return fit(new Gaussian.Parametric(), guess);
",4,0,0,2,4,1,4,0,0,8,45,5,0.20000,1
defect4j,math,org/apache/commons/math/util/FastMath,59,3482,"        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);
",16,2,0,3,6,1,4,0,0,22,59,5,0.00000,1
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,94,"            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN, p);
",4,0,0,1,2,0,6,0,0,10,105,7,0.00000,1
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,162,"                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));
",0,0,1,4,8,0,24,0,0,29,100,8,1.00000,1
defect4j,math,org/apache/commons/math/util/MathUtils,63,417,"        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;
",4,3,0,3,6,1,12,0,0,19,54,4,0.00000,1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,258,"            chiSquare += residual * residual / residualsWeights[i];
",6,2,1,1,2,0,0,0,0,13,55,6,0.00000,1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,243,"        throw new MaxIterationsExceededException(maximalIterationCount);
",2,0,0,1,2,0,0,2,0,4,64,5,0.00000,1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,97,"        return optimizer.getResult();
",0,0,0,1,2,1,4,0,0,4,29,5,0.00000,1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,171,"                    out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));
",0,2,1,4,8,0,6,0,0,15,61,10,0.80000,1
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,72,"        return solve(min, max);
",0,0,0,1,2,1,6,0,0,6,23,5,0.00000,1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,71,300,"                  loop     = false;
",2,0,0,0,0,0,0,0,0,4,17,14,1.00000,1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,127,"            setResult(yMax, 0);
",0,0,0,1,2,0,4,0,0,4,19,7,0.00000,1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,250,"              scale = vecAbsoluteTolerance;
",4,0,0,0,0,0,0,0,0,5,29,12,0.00000,1
defect4j,math,org/apache/commons/math/stat/Frequency,75,303,"        return getCumPct((Comparable<?>) v);
",2,0,0,2,4,1,2,2,0,6,36,5,0.00000,1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,265,"                for (int i = p; i < n; ++i) {
",10,1,0,1,3,0,0,0,0,12,29,8,0.00000,1
defect4j,math,org/apache/commons/math/util/MathUtils,79,1626,"          final int dp = p1[i] - p2[i];
",2,1,1,2,4,1,0,0,0,12,29,6,0.33333,1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1135,"            int j = 4 * n - 1;
",4,2,0,0,0,0,0,0,0,6,18,7,0.00000,1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,603,"        minPivot = MathUtils.SAFE_MIN * Math.max(1.0, eMax * eMax);
",10,2,0,1,2,0,4,0,0,17,59,4,0.02941,1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,82,"            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {
",0,1,0,2,5,0,8,0,0,9,50,6,0.07692,1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,345,"          Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
",4,1,0,2,4,0,4,2,0,11,63,6,0.10000,1
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,94,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.33333,1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,85,198,"        if (fa * fb >= 0.0 ) {
",4,2,0,1,3,0,0,0,0,6,22,4,0.06250,1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,333,"                coefficients[i] =
",0,0,1,1,2,0,0,0,0,5,17,6,0.12500,1
defect4j,math,org/apache/commons/math/stat/Frequency,89,111,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,1
defect4j,math,org/apache/commons/math/stat/Frequency,90,121,"        Object obj = v;
",4,0,0,0,0,0,0,2,0,6,15,4,0.20000,1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,260,"        double dOn = object.doubleValue();
",2,0,0,1,2,0,4,0,0,6,34,5,0.00000,1
defect4j,math,org/apache/commons/math/util/MathUtils,94,412,"        if (u * v == 0) {
",4,2,0,1,3,0,0,0,0,6,17,4,0.02222,1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,148,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,0.50000,1
defect4j,math,org/apache/commons/math/complex/Complex,96,258,"                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); 
",2,3,0,8,16,0,28,0,0,34,179,11,0.03448,1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,779,"        final double[] out = new double[v.length];
",6,0,0,2,4,1,0,0,0,7,42,4,0.33333,1
defect4j,math,org/apache/commons/math/util/MathUtils,99,714,"        return lcm;
",2,0,0,0,0,1,0,0,0,2,11,4,1.00000,1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,207,"        double[] errors = new double[problem.getAllParameters().length];
",4,0,0,3,6,0,4,0,0,8,64,5,0.00000,1
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,377,"        if (
",0,0,0,0,1,0,0,0,0,0,4,3,0.18182,1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,264,"        return sumYY - sumXY * sumXY / sumXX;
",8,3,0,0,0,1,0,0,0,11,37,4,0.12500,1
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,1,53,"        super(LocalizedFormats.FRACTION_CONVERSION_OVERFLOW, value, p, q);
",10,0,0,1,2,0,0,0,0,10,66,4,1,0
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,1,54,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,1,48,"                                Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,0.80000,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,1,49,"        getContext().addMessage(pattern, args);
",0,0,0,2,4,0,8,0,0,8,39,5,0.80000,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,1,50,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.80000,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,332,"            numerator   = BigInteger.valueOf(p1);
",2,0,0,1,2,0,6,0,0,9,37,6,0.50000,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,333,"            denominator = BigInteger.valueOf(q1);
",2,0,0,1,2,0,6,0,0,9,37,6,0.50000,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,356,"        this(value, 0, maxDenominator, 100);
",4,0,0,1,2,0,0,0,0,4,36,4,0.50000,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,357,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,144,"       this(value, 0, maxDenominator, 100);
",4,0,0,1,2,0,0,0,0,4,36,4,0.50000,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,145,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,215,"                throw new FractionConversionException(value, p2, q2);
",6,0,0,1,2,0,0,2,0,8,53,9,0.50000,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,239,"            this.numerator = (int) p1;
",4,0,0,1,2,0,0,0,0,5,26,6,0.50000,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,240,"            this.denominator = (int) q1;
",4,0,0,1,2,0,0,0,0,5,28,6,0.50000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,69,"        this(LocalizedFormats.ILLEGAL_STATE);
",4,0,0,1,2,0,0,0,0,4,37,5,0.23529,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,70,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.23529,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,193,"        return inverseCumulativeProbability(random.nextDouble());
",0,0,0,2,4,1,6,0,0,6,57,5,1.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,86,"        final int indexRm1 = iRm1[index];
",2,0,1,1,2,1,0,0,0,7,33,4,1.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,87,"        final int indexRm2 = iRm2[index];
",2,0,1,1,2,1,0,0,0,7,33,4,1.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,89,"        final int v0       = v[index];
",2,0,1,1,2,1,0,0,0,7,30,4,1.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,90,"        final int vM1      = v[i1[index]];
",2,0,1,2,4,1,0,0,0,9,34,4,1.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,91,"        final int vM2      = v[i2[index]];
",2,0,1,2,4,1,0,0,0,9,34,4,1.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,92,"        final int vM3      = v[i3[index]];
",2,0,1,2,4,1,0,0,0,9,34,4,1.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,94,"        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);
",2,3,1,4,8,1,0,0,0,14,71,4,1.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,95,"        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));
",10,5,0,4,8,1,0,0,0,16,57,4,1.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,96,"        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));
",8,4,0,3,6,1,0,0,0,13,49,4,1.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,97,"        final int z3 = z1      ^ z2;
",6,1,0,0,0,1,0,0,0,8,28,4,1.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,98,"        int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));
",16,7,0,6,12,0,0,0,0,23,72,5,1.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,100,"        v[index]     = z3;
",2,0,1,1,2,0,0,0,0,7,18,4,1.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,101,"        v[indexRm1]  = z4;
",2,0,1,1,2,0,0,0,0,7,18,4,1.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,816,"        final int len = a.length;
",6,0,0,0,0,1,0,0,0,7,25,4,0.09091,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,817,"        if (len != b.length) {
",6,1,0,1,3,0,0,0,0,7,22,4,0.09091,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,823,"        final double[] prodHigh = new double[len];
",2,0,1,2,4,1,0,0,0,5,42,4,0.09091,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,113,"        Line line1 = (Line) getHyperplane();
",2,0,0,2,4,0,2,4,0,8,36,4,0.14286,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,114,"        Line line2 = (Line) subLine.getHyperplane();
",2,0,0,2,4,0,4,4,0,10,44,4,0.14286,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,117,"        Vector2D v2D = line1.intersection(line2);
",2,0,0,1,2,0,6,2,0,10,41,4,0.14286,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,120,"        Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
",2,0,0,3,6,0,10,2,0,14,71,4,0.14286,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,56,"        this(new Line(start, end), buildIntervalSet(start, end));
",4,0,0,3,6,0,6,2,0,12,57,4,0.14286,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,57,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,113,"        Vector3D v1D = line.intersection(subLine.line);
",6,0,0,1,2,0,4,2,0,12,47,4,0.14286,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,116,"        Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));
",2,0,0,2,4,0,10,2,0,14,65,4,0.14286,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,156,"        return distance(p) < 1.0e-10;
",0,1,0,1,2,1,4,0,0,5,29,4,0.14286,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,164,"        final Vector3D d = p.subtract(zero);
",2,0,0,1,2,1,6,2,0,11,36,4,0.14286,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,165,"        final Vector3D n = new Vector3D(1.0, d, -d.dotProduct(direction), direction);
",6,0,0,2,4,1,6,4,0,18,77,4,0.14286,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,166,"        return n.getNorm();
",0,0,0,1,2,1,4,0,0,4,19,5,0.14286,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,195,"        final double cos = direction.dotProduct(line.direction);
",6,0,0,1,2,1,4,0,0,11,56,4,0.14286,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,196,"        final double n = 1 - cos * cos;
",6,2,0,0,0,1,0,0,0,9,31,4,0.14286,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,197,"        if (n < Precision.EPSILON) {
",6,1,0,1,3,0,0,0,0,7,28,4,0.14286,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,202,"        final Vector3D delta0 = line.zero.subtract(zero);
",6,0,0,1,2,1,4,2,0,13,49,4,0.14286,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,203,"        final double a        = delta0.dotProduct(direction);
",2,0,0,1,2,1,6,0,0,9,53,4,0.14286,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,204,"        final double b        = delta0.dotProduct(line.direction);
",6,0,0,1,2,1,4,0,0,11,58,4,0.14286,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,206,"        return new Vector3D(1, zero, (a - b * cos) / n, direction);
",12,3,0,2,4,1,0,2,0,17,59,5,0.14286,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,216,"        final Vector3D closest = closestPoint(line);
",2,0,0,1,2,1,4,2,0,9,44,4,0.14286,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,217,"        return line.contains(closest) ? closest : null;
",2,0,0,1,2,1,6,0,0,8,47,5,0.14286,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,56,"        super(new Line(start, end), buildIntervalSet(start, end));
",4,0,0,3,6,0,6,2,0,12,58,4,0.12500,0
defect4j,math,org/apache/commons/math3/complex/Complex,5,304,"        if (real == 0.0 && imaginary == 0.0) {
",4,3,0,1,3,0,0,0,0,7,38,4,0.25000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,451,"                if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) {
",8,1,0,2,5,0,0,0,0,10,62,9,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,233,"        if (mti >= N) { // generate N words at one time
",4,1,0,1,3,0,0,0,0,5,47,4,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,234,"            int mtNext = mt[0];
",2,0,1,1,2,0,0,0,0,4,19,7,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,235,"            for (int k = 0; k < N - M; ++k) {
",10,2,0,1,3,0,0,0,0,13,33,6,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,236,"                int mtCurr = mtNext;
",4,0,0,0,0,0,0,0,0,4,20,9,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,237,"                mtNext = mt[k + 1];
",4,1,1,1,2,0,0,0,0,8,19,8,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,238,"                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);
",6,3,0,2,4,0,0,0,0,10,50,8,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,239,"                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y & 0x1];
",8,4,1,4,8,0,0,0,0,21,47,8,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,241,"            for (int k = N - M; k < N - 1; ++k) {
",12,3,0,1,3,0,0,0,0,16,37,6,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,242,"                int mtCurr = mtNext;
",4,0,0,0,0,0,0,0,0,4,20,9,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,243,"                mtNext = mt[k + 1];
",4,1,1,1,2,0,0,0,0,8,19,8,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,244,"                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);
",6,3,0,2,4,0,0,0,0,10,50,8,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,245,"                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];
",10,5,1,5,10,0,0,0,0,24,53,8,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,247,"            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);
",4,3,1,3,6,0,0,0,0,10,49,6,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,248,"            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];
",8,5,1,4,8,0,0,0,0,20,51,6,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,250,"            mti = 0;
",2,0,0,0,0,0,0,0,0,3,8,6,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,253,"        y = mt[mti++];
",4,0,1,1,2,0,0,0,0,8,14,4,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,256,"        y ^=  y >>> 11;
",4,1,0,0,0,0,0,0,0,6,15,4,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,257,"        y ^= (y <<   7) & 0x9d2c5680;
",4,2,0,1,2,0,0,0,0,7,29,4,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,258,"        y ^= (y <<  15) & 0xefc60000;
",4,2,0,1,2,0,0,0,0,7,29,4,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,259,"        y ^=  y >>> 18;
",4,1,0,0,0,0,0,0,0,6,15,4,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,261,"        return y >>> (32 - bits);
",4,2,0,1,2,1,0,0,0,6,25,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,843,"        DoubleIndex(double value, int index) {
",6,0,0,1,3,0,0,0,0,6,38,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,844,"            this.value = value;
",4,0,0,0,0,0,0,0,0,5,19,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,845,"            this.index = index;
",4,0,0,0,0,0,0,0,0,5,19,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,846,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,850,"            return Double.compare(value, o.value);
",4,0,0,1,2,1,6,0,0,10,38,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,833,"    private static class DoubleIndex implements Comparable<DoubleIndex> {
",2,0,0,0,1,2,0,4,0,8,69,2,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,892,"        public FitnessFunction() {
",2,0,0,1,3,1,0,0,0,3,26,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,893,"            valueRange = 1;
",2,0,0,0,0,0,0,0,0,3,15,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,894,"            isRepairMode = true;
",2,0,0,0,0,0,0,0,0,4,20,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,895,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,903,"            if (isRepairMode) {
",2,0,0,1,3,0,0,0,0,2,19,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,904,"                double[] repaired = repair(point);
",2,0,0,2,4,0,4,0,0,6,34,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,905,"                value = CMAESOptimizer.this.computeObjectiveValue(repaired) +
",4,1,0,1,2,0,4,0,0,10,61,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,907,"            } else {
",0,0,0,0,2,0,0,0,0,0,8,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,910,"            return isMinimize ? value : -value;
",6,0,0,0,0,1,0,0,0,7,35,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,936,"            this.valueRange = valueRange;
",4,0,0,0,0,0,0,0,0,5,29,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,937,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,944,"            final double[] lB = CMAESOptimizer.this.getLowerBound();
",4,0,0,2,4,1,2,0,0,7,56,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,945,"            final double[] uB = CMAESOptimizer.this.getUpperBound();
",4,0,0,2,4,1,2,0,0,7,56,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,947,"            final double[] repaired = new double[x.length];
",6,0,0,2,4,1,0,0,0,7,47,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,948,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,949,"                if (x[i] < lB[i]) {
",0,1,1,3,7,0,0,0,0,9,19,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,951,"                } else if (x[i] > uB[i]) {
",0,1,1,3,8,0,0,0,0,9,26,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,954,"                    repaired[i] = x[i];
",0,0,1,2,4,0,0,0,0,9,19,10,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,957,"            return repaired;
",2,0,0,0,0,1,0,0,0,2,16,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,966,"            double penalty = 0;
",2,0,0,0,0,0,0,0,0,2,19,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,967,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,968,"                double diff = Math.abs(x[i] - repaired[i]);
",2,1,1,3,6,0,4,0,0,15,43,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,969,"                penalty += diff * valueRange;
",6,1,0,0,0,0,0,0,0,8,29,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,971,"            return isMinimize ? penalty : -penalty;
",6,0,0,0,0,1,0,0,0,7,39,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,881,"    private class FitnessFunction {
",2,0,0,0,1,1,0,0,0,3,31,2,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,370,"        isMinimize = getGoalType().equals(GoalType.MINIMIZE);
",6,0,0,2,4,0,4,0,0,11,53,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,371,"        final FitnessFunction fitfun = new FitnessFunction();
",2,0,0,1,2,1,0,4,0,7,53,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,372,"        final double[] guess = getStartPoint();
",2,0,0,2,4,1,2,0,0,5,39,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,374,"        dimension = guess.length;
",6,0,0,0,0,0,0,0,0,7,25,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,375,"        initializeCMA(guess);
",0,0,0,1,2,0,4,0,0,4,21,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,376,"        iterations = 0;
",2,0,0,0,0,0,0,0,0,3,15,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,377,"        double bestValue = fitfun.value(guess);
",2,0,0,1,2,0,6,0,0,8,39,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,378,"        push(fitnessHistory, bestValue);
",0,0,0,1,2,0,6,0,0,6,32,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,379,"        PointValuePair optimum
",2,0,0,0,0,0,0,2,0,4,22,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,382,"        PointValuePair lastResult = null;
",2,0,0,0,0,0,0,2,0,4,33,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,387,"        for (iterations = 1; iterations <= maxIterations; iterations++) {
",8,1,0,1,3,0,0,0,0,11,65,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,7,3367,"        y += 1.0;
",2,0,0,0,0,0,0,0,0,3,9,4,0.11111,0
defect4j,math,org/apache/commons/math3/util/FastMath,7,3369,"        if (y == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.11111,0
defect4j,math,org/apache/commons/math3/util/FastMath,7,3373,"        return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.11111,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,351,"                    handler.handleStep(interpolator, isLastStep);
",0,0,0,1,2,0,8,0,0,8,45,9,0.11111,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,352,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,218,"                switch (allowed) {
",2,0,0,1,3,0,0,0,0,2,18,8,0.11111,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,224,"                    return xB;
",2,0,0,0,0,1,0,0,0,2,10,9,0.11111,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,239,"                final int p = agingA - MAXIMAL_AGING;
",6,1,0,0,0,1,0,0,0,8,37,8,0.11111,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,240,"                final double weightA = (1 << p) - 1;
",4,2,0,1,2,1,0,0,0,7,36,8,0.11111,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,241,"                final double weightB = p + 1;
",4,1,0,0,0,1,0,0,0,6,29,8,0.11111,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,242,"                targetY = (weightA * yA - weightB * REDUCTION_FACTOR * yB) / (weightA + weightB);
",16,5,0,2,4,0,0,0,0,22,81,8,0.11111,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,243,"            } else if (agingB >= MAXIMAL_AGING) {
",4,1,0,1,4,0,0,0,0,5,37,7,0.11111,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,342,"                xA = nextX;
",4,0,0,0,0,0,0,0,0,5,11,8,0.11111,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,343,"                yA = nextY;
",4,0,0,0,0,0,0,0,0,5,11,8,0.11111,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,344,"                absYA = FastMath.abs(yA);
",2,0,0,1,2,0,6,0,0,9,25,8,0.11111,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,345,"                agingA = 0;
",2,0,0,0,0,0,0,0,0,3,11,8,0.11111,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,346,"                ++agingB;
",2,0,0,0,0,0,0,0,0,3,9,8,0.11111,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,349,"                signChangeIndex++;
",2,0,0,0,0,0,0,0,0,3,18,8,0.11111,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,218,"                switch (allowed) {
",2,0,0,1,3,0,0,0,0,2,18,8,0.11111,0
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,348,"            handler.resetState(t, y);
",0,0,0,1,2,0,8,0,0,8,25,7,0.10000,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,157,"        final double randomValue = random.nextDouble();
",2,0,0,1,2,1,4,0,0,7,47,4,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,158,"        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,160,"        for (int i = 0; i < probabilities.length; i++) {
",10,1,0,1,3,0,0,0,0,12,48,4,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,161,"            sum += probabilities[i];
",2,0,1,1,2,0,0,0,0,7,24,6,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,162,"            if (randomValue < sum) {
",4,1,0,1,3,0,0,0,0,5,24,6,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,163,"                return singletons.get(i);
",0,0,0,1,2,1,6,0,0,6,25,9,0.50000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,95,"        return direction;
",2,0,0,0,0,1,0,0,0,2,17,4,0.11111,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,54,"    public Line(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException {
",8,0,0,1,3,3,0,4,0,15,87,2,0.03846,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,55,"        reset(p1, p2);
",0,0,0,1,2,0,6,0,0,6,14,5,0.03846,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,56,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03846,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,74,"        final Vector3D delta = p2.subtract(p1);
",2,0,0,1,2,1,6,2,0,11,39,4,0.03846,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,75,"        final double norm2 = delta.getNormSq();
",2,0,0,1,2,1,4,0,0,7,39,4,0.03846,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,76,"        if (norm2 == 0.0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.03846,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,79,"        this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta);
",4,1,0,2,4,0,6,2,0,14,65,4,0.03846,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,80,"        zero = new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta);
",8,1,0,2,4,0,6,2,0,19,67,4,0.03846,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,81,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03846,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,249,"        return x * x + y * y + z * z;
",12,5,0,0,0,1,0,0,0,17,29,4,0.03846,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,151,"    public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {
",10,0,0,1,3,1,0,4,0,15,65,2,0.03571,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,152,"        this.x = MathArrays.linearCombination(a1, u1.x, a2, u2.x);
",10,0,0,1,2,0,8,0,0,19,58,4,0.03571,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,153,"        this.y = MathArrays.linearCombination(a1, u1.y, a2, u2.y);
",10,0,0,1,2,0,8,0,0,19,58,4,0.03571,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,154,"        this.z = MathArrays.linearCombination(a1, u1.z, a2, u2.z);
",10,0,0,1,2,0,8,0,0,19,58,4,0.03571,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2477,"            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));
",6,5,1,5,10,1,0,0,0,20,91,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2479,"            ya = epsA * denom;
",6,1,0,0,0,0,0,0,0,8,18,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2480,"            yb = epsB * denom;
",6,1,0,0,0,0,0,0,0,8,18,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2481,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.50000,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1387,"        double[] tmp1 = new double[getSize()];
",2,0,0,3,6,0,2,0,0,4,38,5,0.50000,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1388,"        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2
",0,0,0,1,2,0,12,0,0,12,54,5,0.50000,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1389,"        double[] tmp2 = new double[getSize()];
",2,0,0,3,6,0,2,0,0,4,38,5,0.50000,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1390,"        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2
",0,0,0,1,2,0,12,0,0,12,54,5,0.50000,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1391,"        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2
",0,0,0,1,2,0,8,0,0,8,60,5,0.50000,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1392,"        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)
",0,0,0,2,4,0,6,0,0,6,70,5,0.50000,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1394,"        if (x[xOffset] >= 0) {
",0,1,1,2,5,0,0,0,0,5,22,4,0.50000,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1397,"            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x
",0,0,0,1,2,0,10,0,0,10,52,7,0.50000,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1398,"            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)
",0,0,0,2,4,0,10,0,0,10,57,7,0.50000,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1399,"            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))
",0,0,0,3,6,0,6,0,0,6,64,7,0.50000,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1400,"            for (int i = 0; i < tmp2.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,178,"        final int dim = getDimension();
",2,0,0,1,2,1,2,0,0,5,31,4,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,179,"        if (vals.length != dim) {
",6,1,0,1,3,0,0,0,0,7,25,4,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,229,"        final double[] centered = new double[values.length];
",6,0,0,2,4,1,0,0,0,7,52,4,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,230,"        for (int i = 0; i < centered.length; i++) {
",10,1,0,1,3,0,0,0,0,12,43,4,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,231,"            centered[i] = values[i] - getMeans()[i];
",0,1,1,4,8,0,2,0,0,14,40,6,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,233,"        final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered);
",2,0,0,2,4,1,6,0,0,9,77,4,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,234,"        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,235,"        for (int i = 0; i < preMultiplied.length; i++) {
",10,1,0,1,3,0,0,0,0,12,48,4,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,236,"            sum += preMultiplied[i] * centered[i];
",2,1,1,2,4,0,0,0,0,12,38,6,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,238,"        return FastMath.exp(-0.5 * sum);
",2,1,0,1,2,1,4,0,0,8,32,5,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,831,"        return exp(x, 0.0, null);
",0,0,0,1,2,1,4,0,0,5,25,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,850,"        if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,851,"            intVal = (int) -x;
",4,0,0,1,2,0,0,0,0,6,18,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,853,"            if (intVal > 746) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,861,"            if (intVal > 709) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,871,"            if (intVal == 709) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,881,"            intVal++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,883,"            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,884,"            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,886,"            intVal = -intVal;
",4,0,0,0,0,0,0,0,0,6,17,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,888,"            intVal = (int) x;
",4,0,0,1,2,0,0,0,0,5,17,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,890,"            if (intVal > 709) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,898,"            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,899,"            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,906,"        final int intFrac = (int) ((x - intVal) * 1024.0);
",6,2,0,3,6,1,0,0,0,9,50,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,907,"        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
",6,0,1,1,2,1,0,0,0,9,64,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,908,"        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
",6,0,1,1,2,1,0,0,0,9,64,4,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1016,"                if (x[i] < 0) {
",0,1,1,2,5,0,0,0,0,5,15,7,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1018,"                } else if (x[i] > 1.0) {
",0,1,1,2,6,0,0,0,0,5,24,8,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1021,"                    repaired[i] = x[i];
",0,0,1,2,4,0,0,0,0,9,19,10,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1024,"            return repaired;
",2,0,0,0,0,1,0,0,0,2,16,5,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1033,"            double penalty = 0;
",2,0,0,0,0,0,0,0,0,2,19,6,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1034,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1035,"                double diff = Math.abs(x[i] - repaired[i]);
",2,1,1,3,6,0,4,0,0,15,43,8,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1036,"                penalty += diff * valueRange;
",6,1,0,0,0,0,0,0,0,8,29,7,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1038,"            return isMinimize ? penalty : -penalty;
",6,0,0,0,0,1,0,0,0,7,39,6,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,459,"                    break generationLoop;
",2,0,0,0,0,0,0,0,0,2,21,9,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,535,"                boundaries = new double[2][];
",2,0,0,2,4,0,0,0,0,3,29,8,0.20000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,536,"                boundaries[0] = lB;
",2,0,1,1,2,0,0,0,0,5,19,8,0.20000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,537,"                boundaries[1] = uB;
",2,0,1,1,2,0,0,0,0,5,19,8,0.20000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,540,"                for (int i = 0; i < lB.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.20000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,541,"                    if (Double.isInfinite(boundaries[1][i] - boundaries[0][i])) {
",0,1,1,6,13,0,4,0,0,13,61,11,0.20000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,128,"            lowerBound = lower.clone();
",2,0,0,1,2,0,4,0,0,7,27,6,0.14286,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,136,"            upperBound = upper.clone();
",2,0,0,1,2,0,4,0,0,7,27,6,0.14286,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,514,"                hasFiniteBounds = true;
",2,0,0,0,0,0,0,0,0,4,23,8,0.14286,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,515,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.14286,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,521,"            for (int i = 0; i < lB.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,6,0.14286,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,522,"                if (Double.isInfinite(lB[i]) ||
",0,1,1,2,5,0,4,0,0,9,31,8,0.14286,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,529,"            if (hasInfiniteBounds) {
",2,0,0,1,3,0,0,0,0,2,24,6,0.14286,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,109,"            if (upper.length != dim) {
",6,1,0,1,3,0,0,0,0,7,26,6,0.12500,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,112,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.12500,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,113,"                final double v = startPoint[i];
",2,0,1,1,2,1,0,0,0,7,31,8,0.12500,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,114,"                final double hi = upper[i];
",2,0,1,1,2,1,0,0,0,7,27,8,0.12500,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,115,"                if (v > hi) {
",4,1,0,1,3,0,0,0,0,5,13,8,0.12500,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,100,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.11111,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,101,"                final double v = startPoint[i];
",2,0,1,1,2,1,0,0,0,7,31,8,0.11111,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,246,"        this(0);
",0,0,0,1,2,0,0,0,0,0,8,3,1.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,247,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,253,"        this(lambda, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,
",6,0,0,0,1,0,0,0,0,6,62,4,1.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,256,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,570,"            lambda = 4 + (int) (3. * Math.log(dimension));
",2,2,0,3,6,0,6,0,0,11,46,6,1.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,916,"            double[] res = new double[x.length];
",6,0,0,2,4,0,0,0,0,6,36,6,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,917,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,918,"                double diff = boundaries[1][i] - boundaries[0][i];
",2,1,1,4,8,0,0,0,0,11,50,8,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,919,"                res[i] = (x[i] - boundaries[0][i]) / diff;
",2,2,1,5,10,0,0,0,0,17,42,7,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,921,"            return res;
",2,0,0,0,0,1,0,0,0,2,11,5,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,942,"            double[] res = new double[x.length];
",6,0,0,2,4,0,0,0,0,6,36,6,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,943,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,944,"                double diff = boundaries[1][i] - boundaries[0][i];
",2,1,1,4,8,0,0,0,0,11,50,8,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,945,"                res[i] = diff * x[i] + boundaries[0][i];
",2,2,1,4,8,0,0,0,0,17,40,7,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,947,"            return res;
",2,0,0,0,0,1,0,0,0,2,11,5,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,957,"                double[] repaired = repair(point);
",2,0,0,2,4,0,4,0,0,6,34,8,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,958,"                value = CMAESOptimizer.this
",4,0,0,0,0,0,0,0,0,5,27,7,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,999,"            double[] repaired = new double[x.length];
",6,0,0,2,4,0,0,0,0,6,41,6,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1000,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,423,"                            break generationLoop;
",2,0,0,0,0,0,0,0,0,2,21,13,1.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,995,"                    repaired[i] = 1.0;
",0,0,1,1,2,0,0,0,0,5,18,10,1.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,908,"            double[] res = new double[x.length];
",6,0,0,2,4,0,0,0,0,6,36,6,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,909,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,910,"                double diff = boundaries[1][i] - boundaries[0][i];
",2,1,1,4,8,0,0,0,0,11,50,8,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,911,"                res[i] = (x[i] - boundaries[0][i]) / diff;
",2,2,1,5,10,0,0,0,0,17,42,7,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,913,"            return res;
",2,0,0,0,0,1,0,0,0,2,11,5,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,933,"            double[] res = new double[x.length];
",6,0,0,2,4,0,0,0,0,6,36,6,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,934,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,935,"                double diff = boundaries[1][i] - boundaries[0][i];
",2,1,1,4,8,0,0,0,0,11,50,8,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,936,"                res[i] = diff * x[i] + boundaries[0][i];
",2,2,1,4,8,0,0,0,0,17,40,7,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,938,"            return res;
",2,0,0,0,0,1,0,0,0,2,11,5,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,948,"                double[] repaired = repair(point);
",2,0,0,2,4,0,4,0,0,6,34,8,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,949,"                value = CMAESOptimizer.this
",4,0,0,0,0,0,0,0,0,5,27,7,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,952,"            } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,990,"            double[] repaired = new double[x.length];
",6,0,0,2,4,0,0,0,0,6,41,6,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,991,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,992,"                if (x[i] < 0) {
",0,1,1,2,5,0,0,0,0,5,15,7,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,994,"                } else if (x[i] > 1.0) {
",0,1,1,2,6,0,0,0,0,5,24,8,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,997,"                    repaired[i] = x[i];
",0,0,1,2,4,0,0,0,0,9,19,10,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1000,"            return repaired;
",2,0,0,0,0,1,0,0,0,2,16,5,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1009,"            double penalty = 0;
",2,0,0,0,0,0,0,0,0,2,19,6,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1010,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1011,"                double diff = Math.abs(x[i] - repaired[i]);
",2,1,1,3,6,0,4,0,0,15,43,8,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1012,"                penalty += diff * valueRange;
",6,1,0,0,0,0,0,0,0,8,29,7,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1014,"            return isMinimize ? penalty : -penalty;
",6,0,0,0,0,1,0,0,0,7,39,6,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,529,"                boundaries = new double[2][];
",2,0,0,2,4,0,0,0,0,3,29,8,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,530,"                boundaries[0] = lB;
",2,0,1,1,2,0,0,0,0,5,19,8,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,531,"                boundaries[1] = uB;
",2,0,1,1,2,0,0,0,0,5,19,8,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,508,"                hasFiniteBounds = true;
",2,0,0,0,0,0,0,0,0,4,23,8,0.20000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,509,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.20000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,515,"            for (int i = 0; i < lB.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,6,0.20000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,516,"                if (Double.isInfinite(lB[i]) ||
",0,1,1,2,5,0,4,0,0,9,31,8,0.20000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,523,"            if (hasInfiniteBounds) {
",2,0,0,1,3,0,0,0,0,2,24,6,0.20000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,128,"            lowerBound = lower.clone();
",2,0,0,1,2,0,4,0,0,7,27,6,0.20000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,136,"            upperBound = upper.clone();
",2,0,0,1,2,0,4,0,0,7,27,6,0.20000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,109,"            if (upper.length != dim) {
",6,1,0,1,3,0,0,0,0,7,26,6,0.16667,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,112,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.16667,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,113,"                final double v = startPoint[i];
",2,0,1,1,2,1,0,0,0,7,31,8,0.16667,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,114,"                final double hi = upper[i];
",2,0,1,1,2,1,0,0,0,7,27,8,0.16667,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,115,"                if (v > hi) {
",4,1,0,1,3,0,0,0,0,5,13,8,0.16667,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,100,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.14286,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,101,"                final double v = startPoint[i];
",2,0,1,1,2,1,0,0,0,7,31,8,0.14286,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,102,"                final double lo = lower[i];
",2,0,1,1,2,1,0,0,0,7,27,8,0.14286,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,103,"                if (v < lo) {
",4,1,0,1,3,0,0,0,0,5,13,8,0.14286,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,97,"            if (lower.length != dim) {
",6,1,0,1,3,0,0,0,0,7,26,6,0.12500,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,378,"                            arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k))
",2,0,0,2,5,0,14,0,0,17,52,13,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,407,"                    updateCovariance(hsig, bestArx, arz, arindex, xold);
",0,0,0,1,2,0,12,0,0,12,52,10,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,696,"        double negccov = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,697,"        if (ccov1 + ccovmu > 0) {
",4,2,0,1,3,0,0,0,0,6,25,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,97,"        MatrixUtils.checkSubtractionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,48,5,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,99,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,100,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,101,"        final RealMatrix out = createMatrix(rowCount, columnCount);
",2,0,0,1,2,1,6,2,0,11,59,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,102,"        for (int row = 0; row < rowCount; ++row) {
",8,1,0,1,3,0,0,0,0,10,42,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,103,"            for (int col = 0; col < columnCount; ++col) {
",8,1,0,1,3,0,0,0,0,10,45,6,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,104,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));
",0,1,0,3,6,0,22,0,0,23,66,9,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,108,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,241,"        return walkInColumnOrder(new RealMatrixPreservingVisitor() {
",0,0,0,1,4,1,2,2,0,4,60,5,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,456,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,457,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,458,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,459,"        for (int j = 0; j < columns; ++j) {
",8,1,0,1,3,0,0,0,0,10,35,4,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,460,"            for (int i = 0; i < rows; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,6,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,461,"                visitor.visit(i, j, data[i][j]);
",0,0,1,3,6,0,8,0,0,14,32,9,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,464,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,1,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,130,"        if (data == null ||
",2,2,0,0,1,0,0,0,0,4,19,4,1,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,134,"        return (data.length * data[0].length <= 4096) ?
",6,2,1,2,4,1,0,0,0,10,47,6,1,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,523,"        if ((left.getRowDimension()    != right.getRowDimension()) ||
",0,2,0,3,7,0,8,0,0,10,61,4,1,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,528,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,241,"        return walkInColumnOrder(new RealMatrixPreservingVisitor() {
",0,0,0,1,4,1,2,2,0,4,60,5,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,256,"                this.endRow = endRow;
",4,0,0,0,0,0,0,0,0,5,21,10,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,257,"                columnSum   = 0;
",2,0,0,0,0,0,0,0,0,3,16,10,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,258,"                maxColSum   = 0;
",2,0,0,0,0,0,0,0,0,3,16,10,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,259,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,263,"                columnSum += FastMath.abs(value);
",2,0,0,1,2,0,6,0,0,9,33,10,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,264,"                if (row == endRow) {
",4,1,0,1,3,0,0,0,0,5,20,10,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,265,"                    maxColSum = FastMath.max(maxColSum, columnSum);
",2,0,0,1,2,0,8,0,0,11,47,12,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,266,"                    columnSum = 0;
",2,0,0,0,0,0,0,0,0,3,14,12,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,268,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,272,"                return maxColSum;
",2,0,0,0,0,1,0,0,0,2,17,10,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3508,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3511,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3514,"        if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3519,"        long bits = Double.doubleToRawLongBits(a);
",2,0,0,1,2,0,6,0,0,8,42,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3520,"        if (bits == 0x8000000000000000L) {
",2,1,0,1,3,0,0,0,0,3,34,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3523,"        return a;
",2,0,0,0,0,1,0,0,0,2,9,4,1,0
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,184,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,1.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,22,1107,"            return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,129,"        final double nhalf = numeratorDegreesOfFreedom / 2;
",4,1,0,0,0,1,0,0,0,6,51,4,0.25000,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,130,"        final double mhalf = denominatorDegreesOfFreedom / 2;
",4,1,0,0,0,1,0,0,0,6,53,4,0.25000,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,131,"        final double logx = FastMath.log(x);
",2,0,0,1,2,1,6,0,0,9,36,4,0.25000,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,132,"        final double logn = FastMath.log(numeratorDegreesOfFreedom);
",2,0,0,1,2,1,6,0,0,9,60,4,0.25000,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,133,"        final double logm = FastMath.log(denominatorDegreesOfFreedom);
",2,0,0,1,2,1,6,0,0,9,62,4,0.25000,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,134,"        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +
",6,2,0,0,1,1,4,0,0,13,66,4,0.25000,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,136,"        return FastMath.exp(nhalf * logn + nhalf * logx - logx +
",10,8,0,0,1,1,4,0,0,22,56,5,0.25000,0
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,109,"        if (x < lower || x > upper) {
",8,3,0,1,3,0,0,0,0,11,29,4,0.25000,0
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,112,"        return 1 / (upper - lower);
",4,2,0,1,2,1,0,0,0,6,27,4,0.25000,0
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,174,"        return upper;
",2,0,0,0,0,1,0,0,0,2,13,4,0.25000,0
defect4j,math,org/apache/commons/math3/special/Beta,22,170,"        return logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);
",4,0,0,1,2,1,8,0,0,12,57,5,0.25000,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,258,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.14286,0
defect4j,math,org/apache/commons/math3/util/FastMath,22,864,"            intVal = (int) x;
",4,0,0,1,2,0,0,0,0,5,17,6,0.11111,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,234,"        double previous = val[0];
",2,0,1,1,2,0,0,0,0,4,25,5,1.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,235,"        final int max = val.length;
",6,0,0,0,0,1,0,0,0,7,27,4,1.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,239,"        for (index = 1; index < max; index++) {
",8,1,0,1,3,0,0,0,0,11,39,5,1.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,240,"            switch (dir) {
",2,0,0,1,3,0,0,0,0,2,14,7,1.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,242,"                if (strict) {
",2,0,0,1,3,0,0,0,0,2,13,8,1.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,243,"                    if (val[index] <= previous) {
",2,1,1,2,5,0,0,0,0,7,29,10,1.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,268,"            previous = val[index];
",2,0,1,1,2,0,0,0,0,7,22,7,1.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,271,"        if (index == max) {
",4,1,0,1,3,0,0,0,0,5,19,4,1.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,273,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,1.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,295,"        checkOrder(val, dir, strict, true);
",0,0,0,1,2,0,8,0,0,9,35,5,1.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,296,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,306,"        checkOrder(val, OrderDirection.INCREASING, true);
",4,0,0,1,2,0,4,0,0,9,49,5,1.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,307,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,143,"    public static enum OrderDirection {
",2,0,0,0,1,2,0,0,0,4,35,2,1.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,145,"        INCREASING,
",2,0,0,0,0,0,0,0,0,2,11,3,1.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,147,"        DECREASING
",2,0,0,0,0,0,0,0,0,2,10,3,1.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,24,532,"         return copyOf(source, source.length);
",4,0,0,1,2,1,4,0,0,8,37,5,0.25000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,24,560,"         final double[] output = new double[len];
",2,0,1,2,4,1,0,0,0,5,40,4,0.25000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,24,561,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));
",4,0,0,2,4,0,14,0,0,18,73,5,0.25000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,24,562,"         return output;
",2,0,0,0,0,1,0,0,0,2,14,4,0.25000,0
defect4j,math,org/apache/commons/math3/analysis/function/Sin,24,33,"public class Sin implements UnivariateDifferentiable, DifferentiableUnivariateFunction {
",2,0,0,0,1,1,0,4,0,7,88,1,0.25000,0
defect4j,math,org/apache/commons/math3/analysis/function/Sin,24,36,"        return FastMath.sin(x);
",0,0,0,1,2,1,6,0,0,6,23,5,0.25000,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,183,"                            if (x <= m) {
",4,1,0,1,3,0,0,0,0,5,13,14,0.20000,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,184,"                                d = tol1;
",4,0,0,0,0,0,0,0,0,5,9,16,0.20000,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1653,"        double x2 = x*x;
",6,1,0,0,0,0,0,0,0,7,16,5,0.20000,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1655,"        double p = 2.7553817452272217E-6;
",2,0,0,0,0,0,0,0,0,2,33,5,0.20000,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1656,"        p = p * x2 + -1.9841269659586505E-4;
",6,2,0,0,0,0,0,0,0,10,36,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1657,"        p = p * x2 + 0.008333333333329196;
",6,2,0,0,0,0,0,0,0,9,34,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1658,"        p = p * x2 + -0.16666666666666666;
",6,2,0,0,0,0,0,0,0,10,34,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1661,"        p = p * x2 * x;
",8,1,0,0,0,0,0,0,0,10,15,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1663,"        return p;
",2,0,0,0,0,1,0,0,0,2,9,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1673,"        double x2 = x*x;
",6,1,0,0,0,0,0,0,0,7,16,5,0.20000,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,326,"                a = FastMath.sqrt(c1 / c2);
",6,1,0,1,2,0,4,0,0,12,27,7,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,327,"                omega = FastMath.sqrt(c2 / c3);
",6,1,0,1,2,0,4,0,0,12,31,7,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,201,"            this.observations = observations.clone();
",2,0,0,1,2,0,4,0,0,7,41,5,0.25000,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,48,"                                Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,1.00000,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,49,"        getContext().addMessage(pattern, args);
",0,0,0,2,4,0,8,0,0,8,39,5,1.00000,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,50,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,69,"        this(LocalizedFormats.ILLEGAL_STATE);
",4,0,0,1,2,0,0,0,0,4,37,5,0.16667,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,70,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.16667,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,74,"        return context;
",2,0,0,0,0,1,0,0,0,2,15,4,0.16667,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,45,"                                     Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,0.14286,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,46,"        context = new ExceptionContext(this);
",2,0,0,1,2,0,0,2,0,5,37,4,0.14286,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,47,"        context.addMessage(pattern, args);
",0,0,0,1,2,0,8,0,0,8,34,5,0.14286,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,188,"            this.numerator = (int) a0;
",4,0,0,1,2,0,0,0,0,5,26,6,0.04545,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,189,"            this.denominator = 1;
",2,0,0,0,0,0,0,0,0,3,21,6,0.04545,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,190,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.04545,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,215,"                p0 = p1;
",4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,216,"                p1 = p2;
",4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,217,"                q0 = q1;
",4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,555,"        return new Fraction(numerator * i, denominator);
",6,1,0,1,2,1,0,2,0,9,48,5,0.50000,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,319,"        return (double)numerator / (double)denominator;
",4,1,0,2,4,1,0,0,0,5,47,4,0.03846,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,256,"    public Fraction(int num, int den) {
",6,0,0,1,3,1,0,0,0,7,35,2,0.00488,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,257,"        if (den == 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00488,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,261,"        if (den < 0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00488,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,271,"        final int d = ArithmeticUtils.gcd(num, den);
",2,0,0,1,2,1,8,0,0,11,44,4,0.00488,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,272,"        if (d > 1) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00488,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,273,"            num /= d;
",4,0,0,0,0,0,0,0,0,5,9,6,0.00488,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,274,"            den /= d;
",4,0,0,0,0,0,0,0,0,5,9,6,0.00488,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,278,"        if (den < 0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00488,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,282,"        this.numerator   = num;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00488,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,283,"        this.denominator = den;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00488,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,138,"                Integer minRow = null;
",2,0,0,0,0,0,0,2,0,4,22,7,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,139,"                int minIndex = tableau.getWidth();
",2,0,0,1,2,0,4,0,0,6,34,8,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,140,"                for (Integer row : minRatioPositions) {
",4,0,0,1,3,0,0,2,0,6,39,7,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,141,"                    int i = tableau.getNumObjectiveFunctions();
",2,0,0,1,2,0,4,0,0,6,43,10,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,142,"                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {
",8,4,0,2,5,0,4,0,0,17,58,9,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,143,"                        if (row == tableau.getBasicRow(i)) {
",2,1,0,2,5,0,6,0,0,9,36,11,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,144,"                            if (i < minIndex) {
",4,1,0,1,3,0,0,0,0,5,19,13,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,145,"                                minIndex = i;
",4,0,0,0,0,0,0,0,0,5,13,15,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,146,"                                minRow = row;
",4,0,0,0,0,0,0,0,0,5,13,15,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,150,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,151,"                return minRow;
",2,0,0,0,0,1,0,0,0,2,14,7,0.33333,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,45,"                                     Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,0.25000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,46,"        context = new ExceptionContext(this);
",2,0,0,1,2,0,0,2,0,5,37,4,0.25000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,47,"        context.addMessage(pattern, args);
",0,0,0,1,2,0,8,0,0,8,34,5,0.25000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.25000,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,127,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,121,"                        int column = i + tableau.getArtificialVariableOffset();
",4,1,0,1,2,0,4,0,0,9,55,12,0.12500,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,122,"                        final double entry = tableau.getEntry(row, column);
",2,0,0,1,2,1,8,0,0,11,51,11,0.12500,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,123,"                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {
",0,1,0,4,9,0,18,0,0,19,86,11,0.12500,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,124,"                            return row;
",2,0,0,0,0,1,0,0,0,2,11,13,0.12500,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,104,"                    minRatioPositions.add(i);
",0,0,0,1,2,0,6,0,0,6,25,11,0.11111,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,119,"                for (Integer row : minRatioPositions) {
",4,0,0,1,3,0,0,2,0,6,39,7,0.11111,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,120,"                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
",6,1,0,2,5,0,4,0,0,12,63,9,0.11111,0
defect4j,math,org/apache/commons/math3/util/Precision,28,117,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,7,0.07692,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,231,"                matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1); // excess
",2,1,0,2,4,0,8,0,0,13,74,10,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,227,"            doIteration(tableau);
",0,0,0,1,2,0,4,0,0,4,21,7,0.06667,0
defect4j,math,org/apache/commons/math3/util/Precision,28,115,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.06250,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,257,"        if (o == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.05556,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,260,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05556,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,74,"        throws DimensionMismatchException, NoDataException, NullArgumentException {
",6,0,0,0,1,0,0,0,0,6,75,2,0.05556,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,75,"        copyIn(d);
",0,0,0,1,2,0,4,0,0,4,10,5,0.05556,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,76,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05556,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,262,"        if (data == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.05556,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,263,"            if (row > 0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.05556,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,266,"            if (column > 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.05556,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,269,"            MathUtils.checkNotNull(subMatrix);
",0,0,0,1,2,0,6,0,0,6,34,7,0.05556,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,270,"            final int nRows = subMatrix.length;
",6,0,0,0,0,1,0,0,0,7,35,6,0.05556,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,271,"            if (nRows == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.05556,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,275,"            final int nCols = subMatrix[0].length;
",4,0,1,1,2,1,0,0,0,7,38,6,0.05556,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,276,"            if (nCols == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.05556,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,279,"            data = new double[subMatrix.length][nCols];
",6,0,1,2,4,0,0,0,0,9,43,6,0.05556,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,361,"        OpenMapRealVector res = new OpenMapRealVector(this);
",2,0,0,1,2,0,0,4,0,6,52,4,1,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,362,"        Iterator iter = entries.iterator();
",2,0,0,1,2,0,4,2,0,8,35,4,1,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,363,"        while (iter.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,24,5,1,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,364,"            iter.advance();
",0,0,0,1,2,0,4,0,0,4,15,7,1,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,365,"            res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));
",0,1,0,5,10,0,20,0,0,21,64,7,1,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,281,"                j = probe(perturb, j);
",2,0,0,1,2,0,6,0,0,9,22,8,1,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,282,"                index = j & mask;
",6,1,0,0,0,0,0,0,0,8,17,8,1,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,283,"                perturb >>= PERTURB_SHIFT;
",4,0,0,0,0,0,0,0,0,5,26,8,1,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,285,"                if (states[index] != FULL || keys[index] == key) {
",4,3,1,3,7,0,0,0,0,15,50,8,1,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,292,"            return index;
",2,0,0,0,0,1,0,0,0,2,13,6,1,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,360,"        checkVectorDimensions(v.getDimension());
",0,0,0,2,4,0,6,0,0,6,40,5,1,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,277,"        int perturb = perturb(hash);
",2,0,0,1,2,0,4,0,0,6,28,5,1,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,278,"        int j = index;
",4,0,0,0,0,0,0,0,0,4,14,5,1,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,279,"        if (states[index] == FULL) {
",2,1,1,2,5,0,0,0,0,7,28,4,1,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,291,"        if (states[index] == FREE) {
",2,1,1,2,5,0,0,0,0,7,28,4,1,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,247,"        return hash & 0x7fffffff;
",2,1,0,0,0,1,0,0,0,3,25,4,1.00000,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,323,"        return (j << 2) + j + perturb + 1;
",6,2,0,1,2,1,0,0,0,8,34,4,1.00000,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,351,"        final int hash  = hashOf(key);
",2,0,0,1,2,1,4,0,0,7,30,4,1.00000,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,352,"        int index = hash & mask;
",6,1,0,0,0,0,0,0,0,7,24,5,1.00000,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,353,"        if (containsKey(key, index)) {
",0,0,0,2,5,0,6,0,0,6,30,5,1.00000,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,354,"            return doRemove(index);
",0,0,0,1,2,1,4,0,0,4,23,7,1.00000,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,391,"        keys[index]   = 0;
",0,0,1,1,2,0,0,0,0,5,18,4,1.00000,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,45,"    private static final double[] LANCZOS = {
",2,0,0,1,3,3,0,0,0,5,41,2,1.00000,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,63,"    private static final double HALF_LOG_2_PI = 0.5 * FastMath.log(2.0 * FastMath.PI);
",6,2,0,1,2,3,4,0,0,15,82,2,1.00000,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,154,"        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {
",4,3,0,5,11,0,12,0,0,19,68,4,1.00000,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,186,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,1.00000,0
defect4j,math,org/apache/commons/math3/special/Erf,30,67,"        if (FastMath.abs(x) > 40) {
",0,1,0,2,5,0,6,0,0,7,27,4,1.00000,0
defect4j,math,org/apache/commons/math3/special/Erf,30,70,"        final double ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);
",6,1,0,1,2,1,4,0,0,12,71,4,1.00000,0
defect4j,math,org/apache/commons/math3/special/Erf,30,71,"        return x < 0 ? -ret : ret;
",6,1,0,0,0,1,0,0,0,8,26,5,1.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,375,"        return Math.sqrt(a);
",0,0,0,1,2,1,6,0,0,6,20,5,1.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3020,"        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0
",8,2,0,2,4,1,0,0,0,11,61,5,1.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3535,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,1.00000,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,82,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,90,"        final double[] z = new double[x.length + y.length];
",10,1,0,2,4,1,0,0,0,12,51,4,1.00000,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,92,"        System.arraycopy(x, 0, z, 0, x.length);
",4,0,0,1,2,0,8,0,0,12,39,5,1.00000,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,93,"        System.arraycopy(y, 0, z, x.length, y.length);
",8,0,0,1,2,0,8,0,0,16,46,5,1.00000,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,95,"        return z;
",2,0,0,0,0,1,0,0,0,2,9,4,1.00000,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,129,"        ensureDataConformance(x, y);
",0,0,0,1,2,0,6,0,0,6,28,5,1.00000,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,131,"        final double[] z = concatenateSamples(x, y);
",2,0,0,2,4,1,6,0,0,9,44,4,1.00000,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,132,"        final double[] ranks = naturalRanking.rank(z);
",2,0,0,2,4,1,6,0,0,9,46,4,1.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,31,80,"        return context.getMessage();
",0,0,0,1,2,1,4,0,0,4,28,5,1.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,31,86,"        return context.getLocalizedMessage();
",0,0,0,1,2,1,4,0,0,4,37,5,1.00000,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,178,"        return solverAbsoluteAccuracy;
",2,0,0,0,0,1,0,0,0,2,30,4,0.20000,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,194,"            return denominatorDF / (denominatorDF - 2);
",4,2,0,1,2,1,0,0,0,6,43,6,0.20000,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,230,"            final double numeratorDF = getNumeratorDegreesOfFreedom();
",2,0,0,1,2,1,2,0,0,5,58,6,0.20000,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,231,"            final double denomDFMinusTwo = denominatorDF - 2;
",4,1,0,0,0,1,0,0,0,6,49,6,0.20000,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,233,"            return ( 2 * (denominatorDF * denominatorDF) * (numeratorDF + denominatorDF - 2) ) /
",8,5,0,3,6,1,0,0,0,13,84,6,0.20000,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,145,"            ret = 0;
",2,0,0,0,0,0,0,0,0,3,8,6,0.16667,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,163,"        return numeratorDegreesOfFreedom;
",2,0,0,0,0,1,0,0,0,2,33,4,0.16667,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,191,"        final double denominatorDF = getDenominatorDegreesOfFreedom();
",2,0,0,1,2,1,2,0,0,5,62,4,0.16667,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,193,"        if (denominatorDF > 2) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.16667,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,214,"        if (!numericalVarianceIsCalculated) {
",2,0,0,1,3,0,0,0,0,3,37,4,0.16667,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,215,"            numericalVariance = calculateNumericalVariance();
",2,0,0,1,2,0,2,0,0,5,49,6,0.16667,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,216,"            numericalVarianceIsCalculated = true;
",2,0,0,0,0,0,0,0,0,4,37,6,0.16667,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,218,"        return numericalVariance;
",2,0,0,0,0,1,0,0,0,2,25,4,0.16667,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,227,"        final double denominatorDF = getDenominatorDegreesOfFreedom();
",2,0,0,1,2,1,2,0,0,5,62,4,0.16667,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,229,"        if (denominatorDF > 4) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.16667,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,248,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.16667,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,260,"        return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,5,0.16667,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,114,"        return numberOfTrials * probabilityOfSuccess;
",4,1,0,0,0,1,0,0,0,5,45,4,0.16667,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,124,"        final double p = probabilityOfSuccess;
",4,0,0,0,0,1,0,0,0,5,38,4,0.16667,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2480,"            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));
",6,5,1,5,10,1,0,0,0,20,91,6,1.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2482,"            ya = epsA * denom;
",6,1,0,0,0,0,0,0,0,8,18,6,1.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2483,"            yb = epsB * denom;
",6,1,0,0,0,0,0,0,0,8,18,6,1.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2484,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,1.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,81,"        this(p1, p2.subtract(p1).crossProduct(p3.subtract(p1)));
",2,0,0,4,8,0,14,0,0,16,56,4,0.50000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,82,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,204,"                final SubHyperplane.SplitSubHyperplane<S> split = other.split(inserted);
",6,0,0,1,2,1,6,2,0,15,72,7,0.33333,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,205,"                plusList.add(split.getPlus());
",0,0,0,2,4,0,8,0,0,8,30,8,0.33333,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,206,"                minusList.add(split.getMinus());
",0,0,0,2,4,0,8,0,0,8,32,8,0.33333,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,207,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.33333,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,324,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.33333,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,406,"        return originOffset + (sameOrientationAs(plane) ? -plane.originOffset : plane.originOffset);
",10,1,0,2,4,1,4,0,0,16,92,4,0.33333,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,427,"        return (((Plane) other).w).dotProduct(w) > 0.0;
",4,1,0,4,8,1,4,2,0,11,47,4,0.33333,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,63,"            final double global = otherPlane.getOffset(thisPlane);
",2,0,0,1,2,1,6,0,0,9,54,6,0.33333,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,64,"            return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);
",16,2,0,3,6,1,0,0,0,19,88,7,0.33333,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,105,"            final double global = otherPlane.getOffset(thisPlane);
",2,0,0,1,2,1,6,0,0,9,54,6,0.33333,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,106,"            return (global < -1.0e-10) ?
",2,1,0,1,2,1,0,0,0,4,28,8,0.33333,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,674,"        final double ca1        = SPLIT_FACTOR * a1;
",6,1,0,0,0,1,0,0,0,8,44,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,675,"        final double a1High     = ca1 - (ca1 - a1);
",8,2,0,1,2,1,0,0,0,11,43,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,676,"        final double a1Low      = a1 - a1High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,677,"        final double cb1        = SPLIT_FACTOR * b1;
",6,1,0,0,0,1,0,0,0,8,44,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,678,"        final double b1High     = cb1 - (cb1 - b1);
",8,2,0,1,2,1,0,0,0,11,43,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,679,"        final double b1Low      = b1 - b1High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,682,"        final double prod1High  = a1 * b1;
",6,1,0,0,0,1,0,0,0,8,34,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,683,"        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,686,"        final double ca2        = SPLIT_FACTOR * a2;
",6,1,0,0,0,1,0,0,0,8,44,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,687,"        final double a2High     = ca2 - (ca2 - a2);
",8,2,0,1,2,1,0,0,0,11,43,4,0.20000,0
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,59,"            return GEQ;
",2,0,0,0,0,1,0,0,0,2,11,5,1.00000,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,406,"            coefficients[i] = 0;
",0,0,1,1,2,0,0,0,0,5,20,8,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,407,"            continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,261,"            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),
",0,0,0,2,5,1,6,2,0,9,73,7,0.25000,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,339,"                columnsToDrop.add(i);
",0,0,0,1,2,0,6,0,0,6,21,9,0.25000,0
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,57,"        switch (this) {
",0,0,0,1,3,0,0,0,0,0,15,3,0.25000,0
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,57,"        switch (this) {
",0,0,0,1,3,0,0,0,0,0,15,3,0.25000,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,226,"                matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1); // excess
",2,1,0,2,4,0,8,0,0,13,74,10,0.08333,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,33,67,"        final double[] p = getKey();
",2,0,0,2,4,1,2,0,0,5,28,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,33,68,"        return p == null ? null : p.clone();
",2,1,0,1,2,1,4,0,0,7,36,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/Pair,33,63,"        return key;
",2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,162,"        columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);
",0,0,0,1,2,0,6,0,0,6,44,7,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,199,"            matrix.setEntry(zIndex, getSlackVariableOffset() - 1,
",0,1,0,1,3,0,8,0,0,9,53,7,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,215,"                matrix.setEntry(row, getSlackVariableOffset() - 1,
",0,1,0,1,3,0,8,0,0,9,50,9,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,298,"        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,299,"        for (double coefficient : coefficients.toArray()) {
",2,0,0,2,5,0,4,0,0,6,51,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,300,"            sum -= coefficient;
",4,0,0,0,0,0,0,0,0,5,19,6,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,302,"        return sum;
",2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,347,"            columnsToDrop.add(col);
",0,0,0,1,2,0,6,0,0,6,23,9,0.06250,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,181,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06250,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,224,"                matrix.setEntry(row, getSlackVariableOffset() + slackVar++, 1);  // slack
",2,1,0,2,4,0,8,0,0,12,73,9,0.05882,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,332,"        List<Integer> columnsToDrop = new ArrayList<Integer>();
",2,0,0,1,2,0,0,8,0,10,55,4,0.05882,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,333,"        columnsToDrop.add(0);
",0,0,0,1,2,0,4,0,0,4,21,5,0.05882,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,336,"        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
",6,1,0,3,7,0,4,0,0,12,82,4,0.05882,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,337,"            final double entry = tableau.getEntry(0, i);
",2,0,0,1,2,1,6,0,0,9,44,6,0.05882,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,344,"        for (int i = 0; i < getNumArtificialVariables(); i++) {
",6,1,0,2,5,0,2,0,0,10,55,4,0.05882,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,345,"          int col = i + getArtificialVariableOffset();
",4,1,0,1,2,0,2,0,0,7,44,7,0.05882,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,346,"          if (getBasicRow(col) == null) {
",0,1,0,2,5,0,4,0,0,6,31,6,0.05882,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,351,"        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
",2,2,0,7,14,0,8,0,0,12,83,5,0.05882,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,352,"        for (int i = 1; i < getHeight(); i++) {
",6,1,0,2,5,0,2,0,0,10,39,4,0.05882,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,353,"          int col = 0;
",2,0,0,0,0,0,0,0,0,2,12,7,0.05882,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,354,"          for (int j = 0; j < getWidth(); j++) {
",6,1,0,2,5,0,2,0,0,10,38,6,0.05882,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,355,"            if (!columnsToDrop.contains(j)) {
",0,0,0,2,5,0,6,0,0,7,33,8,0.05882,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,356,"              matrix[i - 1][col++] = tableau.getEntry(i, j);
",4,1,1,3,6,0,8,0,0,17,46,10,0.05882,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,361,"        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
",6,2,0,2,5,0,4,0,0,13,53,4,0.05882,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,362,"          columnLabels.remove((int) columnsToDrop.get(i));
",0,0,0,3,6,0,10,0,0,10,48,7,0.05882,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,365,"        this.tableau = new Array2DRowRealMatrix(matrix);
",4,0,0,1,2,0,0,2,0,7,48,4,0.05882,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,366,"        this.numArtificialVariables = 0;
",2,0,0,0,0,0,0,0,0,3,32,4,0.05882,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,367,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05882,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,112,"        this.chromosomes.addAll(chromosomeColl);
",2,0,0,1,2,0,4,0,0,6,40,5,1.00000,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,36,"    private double elitismRate = 0.9;
",2,0,0,0,0,1,0,0,0,3,33,2,1,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,50,"    public ListPopulation(final List<Chromosome> chromosomes, final int populationLimit) {
",6,0,0,1,3,3,0,4,0,13,86,2,0.80000,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,51,"        if (chromosomes.size() > populationLimit) {
",2,1,0,2,5,0,4,0,0,7,43,4,0.80000,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,732,"        float result = numerator.floatValue() / denominator.floatValue();
",2,1,0,2,4,0,8,0,0,11,65,5,0.50000,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,244,"        if (o == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.05405,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,247,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05405,0
defect4j,math,org/apache/commons/math/util/FastMath,37,393,"          return exp(x)/2.0;
",0,1,0,1,2,1,4,0,0,5,18,6,1,0
defect4j,math,org/apache/commons/math/util/FastMath,37,453,"          return exp(x)/2.0;
",0,1,0,1,2,1,4,0,0,5,18,6,1,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1178,"        if (Double.isNaN(realPart) ||
",0,1,0,1,3,0,6,0,0,7,29,4,1,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1182,"        return new Complex(realPart, imaginaryPart);
",4,0,0,1,2,1,0,2,0,6,44,5,1,0
defect4j,math,org/apache/commons/math/util/FastMath,37,867,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,1,0
defect4j,math,org/apache/commons/math/util/FastMath,37,871,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,1,0
defect4j,math,org/apache/commons/math/util/FastMath,37,383,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,1,0
defect4j,math,org/apache/commons/math/util/FastMath,37,392,"      if (x > 20.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,1,0
defect4j,math,org/apache/commons/math/util/FastMath,37,442,"      boolean negate = false;
",2,0,0,0,0,0,0,0,0,3,23,5,1,0
defect4j,math,org/apache/commons/math/util/FastMath,37,443,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,1,0
defect4j,math,org/apache/commons/math/util/FastMath,37,452,"      if (x > 20.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,1,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1022,"        double real2 = 2.0 * real;
",4,1,0,0,0,0,0,0,0,5,26,5,1,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2413,"            initialTrustRegionRadius = minDiff / 3.0;
",4,1,0,0,0,0,0,0,0,6,41,6,0.50000,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,126,"            lowerBound = lower.clone();
",2,0,0,1,2,0,4,0,0,7,27,6,0.50000,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,134,"            upperBound = upper.clone();
",2,0,0,1,2,0,4,0,0,7,27,6,0.50000,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,98,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.33333,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,99,"                final double v = startPoint[i];
",2,0,1,1,2,1,0,0,0,7,31,8,0.33333,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,100,"                final double lo = lower[i];
",2,0,1,1,2,1,0,0,0,7,27,8,0.33333,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,101,"                if (v < lo) {
",4,1,0,1,3,0,0,0,0,5,13,8,0.33333,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,107,"            if (upper.length != dim) {
",6,1,0,1,3,0,0,0,0,7,26,6,0.33333,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,110,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.33333,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,111,"                final double v = startPoint[i];
",2,0,1,1,2,1,0,0,0,7,31,8,0.33333,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,112,"                final double hi = upper[i];
",2,0,1,1,2,1,0,0,0,7,27,8,0.33333,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,113,"                if (v > hi) {
",4,1,0,1,3,0,0,0,0,5,13,8,0.33333,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,95,"            if (lower.length != dim) {
",6,1,0,1,3,0,0,0,0,7,26,6,0.25000,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,44,"    public RealPointValuePair(final double[] point, final double value) {
",6,0,0,2,5,3,0,0,0,9,69,2,0.08333,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,45,"        this.point = (point == null) ? null : point.clone();
",4,1,0,2,4,0,4,0,0,10,52,4,0.08333,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,46,"        this.value = value;
",4,0,0,0,0,0,0,0,0,5,19,4,0.08333,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.08333,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1640,"                    stepa = interpolationPoints.getEntry(nfx, nfxm);
",2,0,0,1,2,0,8,0,0,11,48,11,0.08333,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1641,"                    stepb = -initialTrustRegionRadius;
",4,0,0,0,0,0,0,0,0,6,34,11,0.08333,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1642,"                    if (lowerDifference.getEntry(nfxm) == ZERO) {
",2,1,0,2,5,0,6,0,0,9,45,11,0.08333,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1646,"                    if (upperDifference.getEntry(nfxm) == ZERO) {
",2,1,0,2,5,0,6,0,0,9,45,11,0.08333,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1650,"                    interpolationPoints.setEntry(nfm, nfxm, stepb);
",0,0,0,1,2,0,10,0,0,10,47,12,0.08333,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1713,"                    final int ih = nfx * (nfx + 1) / 2 - 1;
",6,4,0,1,2,1,0,0,0,11,39,11,0.08333,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1714,"                    final double tmp = (f - fbeg) / stepb;
",8,2,0,1,2,1,0,0,0,11,38,11,0.08333,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1715,"                    final double diff = stepb - stepa;
",6,1,0,0,0,1,0,0,0,8,34,11,0.08333,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1716,"                    modelSecondDerivativesValues.setEntry(ih, TWO * (tmp - gradientAtTrustRegionCenter.getEntry(nfxm)) / diff);
",6,3,0,3,6,0,12,0,0,21,107,12,0.08333,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1717,"                    gradientAtTrustRegionCenter.setEntry(nfxm, (gradientAtTrustRegionCenter.getEntry(nfxm) * stepb - tmp * stepa) / diff);
",8,4,0,3,6,0,12,0,0,24,118,12,0.08333,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1718,"                    if (stepa * stepb < ZERO) {
",6,2,0,1,3,0,0,0,0,8,27,11,0.08333,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1719,"                        if (f < fAtInterpolationPoints.getEntry(nfm - n)) {
",6,2,0,2,5,0,4,0,0,12,51,13,0.08333,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1720,"                            fAtInterpolationPoints.setEntry(nfm, fAtInterpolationPoints.getEntry(nfm - n));
",4,1,0,2,4,0,10,0,0,15,79,16,0.08333,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1721,"                            fAtInterpolationPoints.setEntry(nfm - n, f);
",4,1,0,1,2,0,6,0,0,11,44,16,0.08333,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1722,"                            if (trustRegionCenterInterpolationPointIndex == nfm) {
",4,1,0,1,3,0,0,0,0,5,54,15,0.08333,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1725,"                            interpolationPoints.setEntry(nfm - n, nfxm, stepb);
",4,1,0,1,2,0,8,0,0,13,51,16,0.08333,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1726,"                            interpolationPoints.setEntry(nfm, nfxm, stepa);
",0,0,0,1,2,0,10,0,0,10,47,16,0.08333,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1729,"                    bMatrix.setEntry(0, nfxm, -(stepa + stepb) / (stepa * stepb));
",8,3,0,3,6,0,6,0,0,18,62,12,0.08333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,244,"    super(interpolator);
",2,0,0,1,2,0,0,0,0,2,20,4,0.03571,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,246,"    if (interpolator.currentState == null) {
",4,1,0,1,3,0,0,0,0,5,40,4,0.03571,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,248,"      yDotKLast = null;
",2,0,0,0,0,0,0,0,0,3,17,6,0.03571,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,249,"      v         = null;
",2,0,0,0,0,0,0,0,0,3,17,6,0.03571,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,250,"      vectorsInitialized = false;
",2,0,0,0,0,0,0,0,0,4,27,6,0.03571,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,273,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03571,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,278,"    return new DormandPrince853StepInterpolator(this);
",0,0,0,1,2,1,0,2,0,2,50,6,0.03571,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,288,"    super.reinitialize(integrator, y, yDotK, forward, primaryMapper, secondaryMappers);
",14,0,0,1,2,0,0,0,0,14,83,5,0.03571,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,290,"    final int dimension = currentState.length;
",6,0,0,0,0,1,0,0,0,7,42,4,0.03571,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,292,"    yDotKLast = new double[3][];
",2,0,0,2,4,0,0,0,0,3,28,4,0.03571,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,293,"    for (int k = 0; k < yDotKLast.length; ++k) {
",10,1,0,1,3,0,0,0,0,12,44,4,0.03571,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,294,"      yDotKLast[k] = new double[dimension];
",0,0,1,2,4,0,0,0,0,7,37,6,0.03571,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,297,"    v = new double[7][];
",2,0,0,2,4,0,0,0,0,3,20,4,0.03571,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,298,"    for (int k = 0; k < v.length; ++k) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.03571,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,299,"      v[k]  = new double[dimension];
",0,0,1,2,4,0,0,0,0,7,30,6,0.03571,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,302,"    vectorsInitialized = false;
",2,0,0,0,0,0,0,0,0,4,27,4,0.03571,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,304,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03571,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,37,"        super(max);
",2,0,0,1,2,0,0,0,0,2,11,4,1.00000,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,38,"        getContext().addMessage(LocalizedFormats.EVALUATIONS);
",4,0,0,2,4,0,4,0,0,8,54,5,1.00000,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,39,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,42,"        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);
",6,0,0,1,2,0,0,0,0,6,47,4,1.00000,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,43,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,53,"                                     Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,1.00000,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,54,"        getContext().addMessage(specific, max, args);
",0,0,0,2,4,0,10,0,0,10,45,5,1.00000,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,55,"        this.max = max;
",4,0,0,0,0,0,0,0,0,5,15,4,1.00000,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,56,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,62,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,1.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,45,"                                     Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,1.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,46,"        context = new ExceptionContext(this);
",2,0,0,1,2,0,0,2,0,5,37,4,1.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,47,"        context.addMessage(pattern, args);
",0,0,0,1,2,0,8,0,0,8,34,5,1.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,370,"        return evaluate(values, weights, 0, values.length);
",4,0,0,1,2,1,6,0,0,10,51,5,1.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,222,"        return test(values, weights, begin, length, false);
",0,0,0,1,2,1,10,0,0,11,51,5,0.50000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,258,"        if (weights == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.50000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,262,"        if (weights.length != values.length) {
",8,1,0,1,3,0,0,0,0,9,38,4,0.50000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,266,"        boolean containsPositiveWeight = false;
",2,0,0,0,0,0,0,0,0,3,39,5,0.50000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,267,"        for (int i = begin; i < begin + length; i++) {
",12,2,0,1,3,0,0,0,0,15,46,4,0.50000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,268,"            if (Double.isNaN(weights[i])) {
",0,0,1,3,7,0,4,0,0,8,31,7,0.50000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,271,"            if (Double.isInfinite(weights[i])) {
",0,0,1,3,7,0,4,0,0,8,36,7,0.50000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,274,"            if (weights[i] < 0) {
",0,1,1,2,5,0,0,0,0,5,21,6,0.50000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,277,"            if (!containsPositiveWeight && weights[i] > 0.0) {
",2,2,1,2,5,0,0,0,0,9,50,6,0.50000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,278,"                containsPositiveWeight = true;
",2,0,0,0,0,0,0,0,0,4,30,8,0.50000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,282,"        if (!containsPositiveWeight) {
",2,0,0,1,3,0,0,0,0,3,30,4,0.50000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,286,"        return test(values, begin, length, allowEmpty);
",0,0,0,1,2,1,10,0,0,10,47,5,0.50000,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,68,"        return (point == null) ? null : point.clone();
",2,1,0,2,4,1,4,0,0,7,46,5,0.07143,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,181,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,347,"            columnsToDrop.add(col);
",0,0,0,1,2,0,6,0,0,6,23,9,0.06667,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,73,"        throws DimensionMismatchException, NoDataException, NullArgumentException {
",6,0,0,0,1,0,0,0,0,6,75,2,0.06250,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,74,"        copyIn(d);
",0,0,0,1,2,0,4,0,0,4,10,5,0.06250,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,75,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06250,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,261,"        if (data == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.06250,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,262,"            if (row > 0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.06250,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,265,"            if (column > 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.06250,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,268,"            MathUtils.checkNotNull(subMatrix);
",0,0,0,1,2,0,6,0,0,6,34,7,0.06250,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,269,"            final int nRows = subMatrix.length;
",6,0,0,0,0,1,0,0,0,7,35,6,0.06250,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,270,"            if (nRows == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.06250,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,274,"            final int nCols = subMatrix[0].length;
",4,0,1,1,2,1,0,0,0,7,38,6,0.06250,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,275,"            if (nCols == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.06250,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,278,"            data = new double[subMatrix.length][nCols];
",6,0,1,2,4,0,0,0,0,9,43,6,0.06250,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,279,"            for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.06250,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,280,"                if (subMatrix[i].length != nCols) {
",4,1,1,2,5,0,0,0,0,9,35,8,0.06250,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,283,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);
",4,1,1,3,6,0,8,0,0,19,64,9,0.06250,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,285,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.06250,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,289,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06250,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,525,"        setSubMatrix(in, 0, 0);
",0,0,0,1,2,0,4,0,0,4,23,5,0.06250,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,526,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06250,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,332,"        List<Integer> columnsToDrop = new ArrayList<Integer>();
",2,0,0,1,2,0,0,8,0,10,55,4,0.06250,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,333,"        columnsToDrop.add(0);
",0,0,0,1,2,0,4,0,0,4,21,5,0.06250,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,336,"        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
",6,1,0,3,7,0,4,0,0,12,82,4,0.06250,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,337,"            final double entry = tableau.getEntry(0, i);
",2,0,0,1,2,1,6,0,0,9,44,6,0.06250,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,338,"            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
",0,1,0,2,5,0,8,0,0,9,50,6,0.06250,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,344,"        for (int i = 0; i < getNumArtificialVariables(); i++) {
",6,1,0,2,5,0,2,0,0,10,55,4,0.06250,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,345,"          int col = i + getArtificialVariableOffset();
",4,1,0,1,2,0,2,0,0,7,44,7,0.06250,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,346,"          if (getBasicRow(col) == null) {
",0,1,0,2,5,0,4,0,0,6,31,6,0.06250,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,351,"        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
",2,2,0,7,14,0,8,0,0,12,83,5,0.06250,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,352,"        for (int i = 1; i < getHeight(); i++) {
",6,1,0,2,5,0,2,0,0,10,39,4,0.06250,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,353,"          int col = 0;
",2,0,0,0,0,0,0,0,0,2,12,7,0.06250,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,354,"          for (int j = 0; j < getWidth(); j++) {
",6,1,0,2,5,0,2,0,0,10,38,6,0.06250,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,355,"            if (!columnsToDrop.contains(j)) {
",0,0,0,2,5,0,6,0,0,7,33,8,0.06250,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,356,"              matrix[i - 1][col++] = tableau.getEntry(i, j);
",4,1,1,3,6,0,8,0,0,17,46,10,0.06250,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,361,"        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
",6,2,0,2,5,0,4,0,0,13,53,4,0.06250,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,362,"          columnLabels.remove((int) columnsToDrop.get(i));
",0,0,0,3,6,0,10,0,0,10,48,7,0.06250,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,365,"        this.tableau = new Array2DRowRealMatrix(matrix);
",4,0,0,1,2,0,0,2,0,7,48,4,0.06250,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,366,"        this.numArtificialVariables = 0;
",2,0,0,0,0,0,0,0,0,3,32,4,0.06250,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,647,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,643,"        if (n > 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,1,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1160,"                double xa = x - 1.0;
",4,1,0,0,0,0,0,0,0,5,20,9,1,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1161,"                double xb = xa - x + 1.0;
",6,2,0,0,0,0,0,0,0,8,25,9,1,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1162,"                double tmp = xa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,31,9,1,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1163,"                double aa = xa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,10,27,9,1,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1164,"                double ab = xa - aa;
",6,1,0,0,0,0,0,0,0,7,20,9,1,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1165,"                xa = aa;
",4,0,0,0,0,0,0,0,0,5,8,8,1,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1166,"                xb = ab;
",4,0,0,0,0,0,0,0,0,5,8,8,1,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1168,"                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];
",6,1,1,2,4,0,0,0,0,9,53,9,1,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1169,"                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];
",6,1,1,2,4,0,0,0,0,9,53,9,1,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1171,"                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {
",10,2,0,1,3,0,0,0,0,13,53,8,1,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1173,"                    aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,10,1,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1174,"                    ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,10,1,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1176,"                    tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,10,1,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1177,"                    ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,10,1,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,209,"    if ((initialStepSize < minStep) || (initialStepSize > maxStep)) {
",8,3,0,3,7,0,0,0,0,11,65,4,0.50000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,212,"      initialStep = initialStepSize;
",4,0,0,0,0,0,0,0,0,5,30,6,0.50000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,214,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,252,"      return forward ? initialStep : -initialStep;
",6,0,0,0,0,1,0,0,0,7,44,7,0.50000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3373,"        y += 1.0;
",2,0,0,0,0,0,0,0,0,3,9,4,0.16667,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3375,"        if (y == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.16667,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3379,"        return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.16667,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,334,"            handler.resetState(t, y);
",0,0,0,1,2,0,8,0,0,8,25,7,0.11111,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,172,"            nbPoints        = 2;
",2,0,0,0,0,0,0,0,0,3,20,6,0.09091,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,173,"            signChangeIndex = 1;
",2,0,0,0,0,0,0,0,0,3,20,6,0.09091,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,340,"                    System.arraycopy(eventY, 0, y, 0, y.length);
",4,0,0,1,2,0,8,0,0,12,44,9,0.08333,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,341,"                    computeDerivatives(eventT, y, yDot);
",0,0,0,1,2,0,8,0,0,8,36,9,0.08333,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,342,"                    resetOccurred = true;
",2,0,0,0,0,0,0,0,0,4,21,8,0.08333,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,329,"        if (!(pendingEvent && (FastMath.abs(pendingEventTime - t) <= convergence))) {
",8,3,0,4,9,0,4,0,0,16,77,4,0.07143,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,333,"        if (nextAction == EventHandler.Action.RESET_STATE) {
",8,1,0,1,3,0,0,0,0,9,52,4,0.07143,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,336,"        pendingEvent      = false;
",2,0,0,0,0,0,0,0,0,4,26,4,0.07143,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,337,"        pendingEventTime  = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,31,4,0.07143,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,339,"        return (nextAction == EventHandler.Action.RESET_STATE) ||
",8,2,0,1,2,1,0,0,0,10,57,4,0.07143,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,337,"                if (currentEvent.reset(eventT, eventY)) {
",0,0,0,2,5,0,8,0,0,8,41,7,0.07143,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,49,"        super(rowDimension, columnDimension);
",4,0,0,1,2,0,0,0,0,4,37,4,0.03333,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,51,"        this.columns = columnDimension;
",4,0,0,0,0,0,0,0,0,5,31,4,0.03333,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,52,"        this.entries = new OpenIntToDoubleHashMap(0.0);
",2,0,0,1,2,0,0,2,0,5,47,4,0.03333,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,53,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03333,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,57,"        if (columnDimension < 1) {
",2,1,0,1,3,0,0,0,0,3,26,4,0.00388,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,60,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00388,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,53,"    protected AbstractRealMatrix(final int rowDimension, final int columnDimension) {
",6,0,0,1,3,3,0,0,0,9,81,2,0.00386,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,54,"        if (rowDimension < 1) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00386,0
defect4j,math,org/apache/commons/math/linear/RealLinearOperator,45,52,"public abstract class RealLinearOperator {
",2,0,0,0,1,2,0,0,0,4,42,1,0.00315,0
defect4j,math,org/apache/commons/math/complex/Complex,46,260,"            return isZero ? NaN : INF;
",6,0,0,0,0,1,0,0,0,6,26,7,1,0
defect4j,math,org/apache/commons/math/complex/Complex,46,1183,"        return ""("" + real + "", "" + imaginary + "")"";
",4,1,0,1,2,1,0,0,0,8,43,4,1.00000,0
defect4j,math,org/apache/commons/math/complex/Complex,46,587,"        return this.add(I).divide(I.subtract(this)).log()
",0,0,0,4,8,1,12,0,0,12,49,6,0.33333,0
defect4j,math,org/apache/commons/math/complex/Complex,46,258,"        if (divisor.isZero) {
",4,0,0,1,3,0,0,0,0,4,21,5,0.30769,0
defect4j,math,org/apache/commons/math/complex/Complex,46,253,"        MathUtils.checkNotNull(divisor);
",0,0,0,1,2,0,6,0,0,6,32,5,0.26667,0
defect4j,math,org/apache/commons/math/complex/Complex,46,254,"        if (isNaN || divisor.isNaN) {
",6,1,0,1,3,0,0,0,0,7,29,4,0.26667,0
defect4j,math,org/apache/commons/math/complex/Complex,46,583,"        if (isNaN) {
",2,0,0,1,3,0,0,0,0,2,12,4,0.25000,0
defect4j,math,org/apache/commons/math/util/FastMath,46,1284,"            if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.25000,0
defect4j,math,org/apache/commons/math/util/FastMath,46,1288,"            return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.25000,0
defect4j,math,org/apache/commons/math/util/FastMath,46,3004,"            if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,46,3005,"                return Math.PI/4.0;
",4,1,0,0,0,1,0,0,0,5,19,8,0.20000,0
defect4j,math,org/apache/commons/math/complex/Complex,46,329,"                return isNaN;
",2,0,0,0,0,1,0,0,0,2,13,8,0.16667,0
defect4j,math,org/apache/commons/math/complex/Complex,46,430,"            return INF;
",2,0,0,0,0,1,0,0,0,2,11,6,0.14286,0
defect4j,math,org/apache/commons/math/complex/Complex,46,276,"            double q = d / c;
",6,1,0,0,0,0,0,0,0,7,17,7,0.11111,0
defect4j,math,org/apache/commons/math/complex/Complex,46,277,"            double denominator = d * q + c;
",8,2,0,0,0,0,0,0,0,10,31,7,0.11111,0
defect4j,math,org/apache/commons/math/complex/Complex,46,278,"            return createComplex((imaginary * q + real) / denominator,
",8,3,0,1,3,1,2,0,0,13,58,7,0.11111,0
defect4j,math,org/apache/commons/math/complex/Complex,46,122,"            return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.09091,0
defect4j,math,org/apache/commons/math/complex/Complex,46,263,"        if (divisor.isInfinite() && !isInfinite()) {
",0,1,0,3,7,0,6,0,0,8,44,4,0.08333,0
defect4j,math,org/apache/commons/math/complex/Complex,47,257,"            return NaN;
",2,0,0,0,0,1,0,0,0,2,11,6,1,0
defect4j,math,org/apache/commons/math/util/FastMath,47,2991,"                if (y < 0.0 || invy < 0.0) {
",4,3,0,1,3,0,0,0,0,7,28,8,0.50000,0
defect4j,math,org/apache/commons/math/util/FastMath,47,2994,"                    return Math.PI;
",4,0,0,0,0,1,0,0,0,4,15,11,0.50000,0
defect4j,math,org/apache/commons/math/complex/Complex,47,583,"        return this.add(I).divide(I.subtract(this)).log()
",0,0,0,4,8,1,12,0,0,12,49,6,0.33333,0
defect4j,math,org/apache/commons/math/complex/Complex,47,256,"        if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) {
",0,3,0,3,7,0,8,0,0,11,64,4,0.30769,0
defect4j,math,org/apache/commons/math/complex/Complex,47,251,"        MathUtils.checkNotNull(divisor);
",0,0,0,1,2,0,6,0,0,6,32,5,0.26667,0
defect4j,math,org/apache/commons/math/complex/Complex,47,252,"        if (isNaN || divisor.isNaN) {
",6,1,0,1,3,0,0,0,0,7,29,4,0.26667,0
defect4j,math,org/apache/commons/math/complex/Complex,47,579,"        if (isNaN) {
",2,0,0,1,3,0,0,0,0,2,12,4,0.25000,0
defect4j,math,org/apache/commons/math/complex/Complex,47,268,"            double q = c / d;
",6,1,0,0,0,0,0,0,0,7,17,7,0.20000,0
defect4j,math,org/apache/commons/math/complex/Complex,47,269,"            double denominator = c * q + d;
",8,2,0,0,0,0,0,0,0,10,31,7,0.20000,0
defect4j,math,org/apache/commons/math/complex/Complex,47,270,"            return createComplex((real * q + imaginary) / denominator,
",8,3,0,1,3,1,2,0,0,13,58,7,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,47,1315,"            if (x < 1.01 && x > 0.99 && hiPrec == null) {
",6,5,0,1,3,0,0,0,0,11,45,6,0.14286,0
defect4j,math,org/apache/commons/math/complex/Complex,47,747,"            return NaN;
",2,0,0,0,0,1,0,0,0,2,11,6,0.14286,0
defect4j,math,org/apache/commons/math/util/FastMath,47,2990,"            if (x < 0.0 || invx < 0.0) {
",4,3,0,1,3,0,0,0,0,7,28,6,0.12500,0
defect4j,math,org/apache/commons/math/util/FastMath,47,2997,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.12500,0
defect4j,math,org/apache/commons/math/util/FastMath,47,2978,"            double result = x*y;
",6,1,0,0,0,0,0,0,0,7,20,7,0.11111,0
defect4j,math,org/apache/commons/math/util/FastMath,47,2979,"            double invx = 1.0/x;
",4,1,0,0,0,0,0,0,0,5,20,7,0.11111,0
defect4j,math,org/apache/commons/math/util/FastMath,47,2980,"            double invy = 1.0/y;
",4,1,0,0,0,0,0,0,0,5,20,7,0.11111,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,39,"public class ExceptionContext implements Serializable {
",2,0,0,0,1,1,0,2,0,5,55,1,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,45,"    private List<Localizable> msgPatterns = new ArrayList<Localizable>();
",2,0,0,1,2,1,0,8,0,11,69,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,51,"    private List<Object[]> msgArguments = new ArrayList<Object[]>();
",2,0,0,3,6,1,0,8,0,11,64,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,55,"    private Map<String, Object> context = new HashMap<String, Object>();
",2,0,0,1,2,1,0,12,0,15,68,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,66,"        msgPatterns.add(pattern);
",0,0,0,1,2,0,6,0,0,6,25,5,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,67,"        msgArguments.add(ArgUtils.flatten(arguments));
",0,0,0,2,4,0,10,0,0,10,46,5,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,68,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,355,"    private LocalizedFormats(final String sourceFormat) {
",4,0,0,1,3,2,0,2,0,8,53,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,356,"        this.sourceFormat = sourceFormat;
",4,0,0,0,0,0,0,0,0,5,33,4,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,357,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),
",2,0,0,5,10,0,0,0,0,3,67,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,45,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),
",2,0,0,4,8,0,0,0,0,3,94,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,46,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),
",2,0,0,1,2,0,0,0,0,3,41,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,47,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),
",2,0,0,1,2,0,0,0,0,3,95,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,48,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),
",2,0,0,1,2,0,0,0,0,3,60,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,49,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),
",2,0,0,1,2,0,0,0,0,3,54,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,50,"    BANDWIDTH(""bandwidth ({0})""),
",2,0,0,3,6,0,0,0,0,3,29,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,51,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),
",2,0,0,4,8,0,0,0,0,3,108,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,52,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),
",2,0,0,3,6,0,0,0,0,3,93,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,53,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),
",2,0,0,1,2,0,0,0,0,3,123,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,54,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),
",2,0,0,1,2,0,0,0,0,3,89,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,55,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),
",2,0,0,2,4,0,0,0,0,3,108,2,0.25000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,67,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,368,"        checkVectorDimensions(v.getDimension());
",0,0,0,2,4,0,6,0,0,6,40,5,1.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,369,"        OpenMapRealVector res = new OpenMapRealVector(this);
",2,0,0,1,2,0,0,4,0,6,52,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,370,"        Iterator iter = res.entries.iterator();
",6,0,0,1,2,0,2,2,0,10,39,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,371,"        while (iter.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,24,5,1.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,372,"            iter.advance();
",0,0,0,1,2,0,4,0,0,4,15,7,1.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,373,"            res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));
",0,1,0,5,10,0,20,0,0,21,64,7,1.00000,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,186,"        if (states[index] == FREE) {
",2,1,1,2,5,0,0,0,0,7,28,4,0.50000,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,187,"            return missingEntries;
",2,0,0,0,0,1,0,0,0,2,22,6,0.50000,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,354,"        final int hash  = hashOf(key);
",2,0,0,1,2,1,4,0,0,7,30,4,0.50000,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,355,"        int index = hash & mask;
",6,1,0,0,0,0,0,0,0,7,24,5,0.50000,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,356,"        if (containsKey(key, index)) {
",0,0,0,2,5,0,6,0,0,6,30,5,0.50000,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,357,"            return doRemove(index);
",0,0,0,1,2,1,4,0,0,4,23,7,0.50000,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,394,"        keys[index]   = 0;
",0,0,1,1,2,0,0,0,0,5,18,4,0.50000,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,395,"        states[index] = REMOVED;
",2,0,1,1,2,0,0,0,0,7,24,4,0.50000,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,396,"        final double previous = values[index];
",2,0,1,1,2,1,0,0,0,7,38,4,0.50000,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,397,"        values[index] = missingEntries;
",2,0,1,1,2,0,0,0,0,7,31,4,0.50000,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,398,"        --size;
",2,0,0,0,0,0,0,0,0,3,7,4,0.50000,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,399,"        ++count;
",2,0,0,0,0,0,0,0,0,3,8,4,0.50000,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,400,"        return previous;
",2,0,0,0,0,1,0,0,0,2,16,4,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,63,"        int d = getDimension();
",2,0,0,1,2,0,2,0,0,4,23,5,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,64,"        if (d != n) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.50000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,239,"                    return x1;
",2,0,0,0,0,1,0,0,0,2,10,9,0.20000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,187,"                    if (x == x1) {
",4,1,0,1,3,0,0,0,0,5,14,9,0.16667,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,50,43,"        super(DEFAULT_ABSOLUTE_ACCURACY, Method.REGULA_FALSI);
",6,0,0,1,2,0,0,0,0,6,54,4,0.12500,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,50,44,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12500,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,124,"        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);
",4,0,0,1,2,1,12,0,0,16,73,5,0.08333,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,237,"                switch (allowed) {
",2,0,0,1,3,0,0,0,0,2,18,8,0.05000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,50,195,"        return solve(maxEval, f, min, max, min + 0.5 * (max - min));
",6,3,0,2,4,1,10,0,0,19,60,5,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,205,"                switch (allowed) {
",2,0,0,1,3,0,0,0,0,2,18,8,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,178,"                switch (method) {
",2,0,0,1,3,0,0,0,0,2,17,8,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,171,"            if (f1 * fx < 0) {
",4,2,0,1,3,0,0,0,0,6,18,6,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,174,"                x0 = x1;
",4,0,0,0,0,0,0,0,0,5,8,8,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,175,"                f0 = f1;
",4,0,0,0,0,0,0,0,0,5,8,8,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,176,"                inverted = !inverted;
",4,0,0,0,0,0,0,0,0,6,21,8,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,178,"                switch (method) {
",2,0,0,1,3,0,0,0,0,2,17,8,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,198,"            x1 = x;
",4,0,0,0,0,0,0,0,0,5,7,6,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,199,"            f1 = fx;
",4,0,0,0,0,0,0,0,0,5,8,6,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,204,"            if (FastMath.abs(f1) <= ftol) {
",2,1,0,2,5,0,6,0,0,9,31,6,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,235,"            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
",6,3,0,2,6,0,14,0,0,23,65,6,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,252,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,68,"        super(absoluteAccuracy);
",2,0,0,1,2,0,0,0,0,2,24,4,0.04167,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,69,"        this.allowed = AllowedSolution.ANY_SIDE;
",6,0,0,0,0,0,0,0,0,7,40,4,0.04167,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,70,"        this.method = method;
",4,0,0,0,0,0,0,0,0,5,21,4,0.04167,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,51,43,"        super(DEFAULT_ABSOLUTE_ACCURACY, Method.REGULA_FALSI);
",6,0,0,1,2,0,0,0,0,6,54,4,0.12500,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,51,44,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12500,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,124,"        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);
",4,0,0,1,2,1,12,0,0,16,73,5,0.08333,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,199,"                switch (allowed) {
",2,0,0,1,3,0,0,0,0,2,18,8,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,178,"                switch (method) {
",2,0,0,1,3,0,0,0,0,2,17,8,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,171,"            if (f1 * fx < 0) {
",4,2,0,1,3,0,0,0,0,6,18,6,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,174,"                x0 = x1;
",4,0,0,0,0,0,0,0,0,5,8,8,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,175,"                f0 = f1;
",4,0,0,0,0,0,0,0,0,5,8,8,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,176,"                inverted = !inverted;
",4,0,0,0,0,0,0,0,0,6,21,8,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,178,"                switch (method) {
",2,0,0,1,3,0,0,0,0,2,17,8,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,192,"            x1 = x;
",4,0,0,0,0,0,0,0,0,5,7,6,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,193,"            f1 = fx;
",4,0,0,0,0,0,0,0,0,5,8,6,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,198,"            if (FastMath.abs(f1) <= ftol) {
",2,1,0,2,5,0,6,0,0,9,31,6,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,229,"            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
",6,3,0,2,6,0,14,0,0,23,65,6,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,246,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,195,"        return solve(maxEval, f, min, max, min + 0.5 * (max - min));
",6,3,0,2,4,1,10,0,0,19,60,5,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,68,"        super(absoluteAccuracy);
",2,0,0,1,2,0,0,0,0,2,24,4,0.04167,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,69,"        this.allowed = AllowedSolution.ANY_SIDE;
",6,0,0,0,0,0,0,0,0,7,40,4,0.04167,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,70,"        this.method = method;
",4,0,0,0,0,0,0,0,0,5,21,4,0.04167,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,313,"  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {
",10,0,0,1,3,1,0,8,0,19,69,2,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,316,"  double u1u1 = u1.getNormSq();
",2,0,0,1,2,0,4,0,0,6,29,5,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,317,"  double u2u2 = u2.getNormSq();
",2,0,0,1,2,0,4,0,0,6,29,5,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,318,"  double v1v1 = v1.getNormSq();
",2,0,0,1,2,0,4,0,0,6,29,5,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,319,"  double v2v2 = v2.getNormSq();
",2,0,0,1,2,0,4,0,0,6,29,5,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,320,"  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {
",8,5,0,5,11,0,0,0,0,13,63,4,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,325,"  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);
",8,1,0,2,4,0,4,2,0,16,50,4,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,328,"  double u1u2   = u1.dotProduct(u2);
",2,0,0,1,2,0,6,0,0,8,34,5,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,329,"  double v1v2   = v1.dotProduct(v2);
",2,0,0,1,2,0,6,0,0,8,34,5,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,330,"  double coeffU = u1u2 / u1u1;
",6,1,0,0,0,0,0,0,0,7,28,5,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,331,"  double coeffV = v1v2 / u1u1;
",6,1,0,0,0,0,0,0,0,7,28,5,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,332,"  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));
",14,5,0,3,6,0,4,0,0,23,79,5,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,333,"  double alpha  = coeffU - beta * coeffV;
",8,2,0,0,0,0,0,0,0,10,39,5,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,334,"  v2 = new Vector3D(alpha, v1, beta, v2);
",10,0,0,1,2,0,0,2,0,13,39,4,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,337,"  Vector3D uRef  = u1;
",4,0,0,0,0,0,0,2,0,6,20,4,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,338,"  Vector3D vRef  = v1;
",4,0,0,0,0,0,0,2,0,6,20,4,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,339,"  Vector3D v1Su1 = v1.subtract(u1);
",2,0,0,1,2,0,6,2,0,10,33,4,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,340,"  Vector3D v2Su2 = v2.subtract(u2);
",2,0,0,1,2,0,6,2,0,10,33,4,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,341,"  Vector3D k     = v1Su1.crossProduct(v2Su2);
",2,0,0,1,2,0,6,2,0,10,43,4,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,342,"  Vector3D u3    = u1.crossProduct(u2);
",2,0,0,1,2,0,6,2,0,10,37,4,1.00000,0
defect4j,math,org/apache/commons/math/complex/Complex,53,152,"        MathUtils.checkNotNull(rhs);
",0,0,0,1,2,0,6,0,0,6,28,5,0.05263,0
defect4j,math,org/apache/commons/math/complex/Complex,53,319,"        return isNaN;
",2,0,0,0,0,1,0,0,0,2,13,4,0.04348,0
defect4j,math,org/apache/commons/math/util/MathUtils,53,2334,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02381,0
defect4j,math,org/apache/commons/math/util/MathUtils,53,2331,"        if (o == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.02326,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2119,"            buffer[--q] = '-';
",2,0,1,1,2,0,0,0,0,7,18,6,0.08333,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1041,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.07143,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1234,"            a.exp = b.exp;
",8,0,0,0,0,0,0,0,0,9,14,6,0.05556,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2328,"            exponent--;
",2,0,0,0,0,0,0,0,0,3,11,6,0.05556,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,576,"        return new Dfp(getField(), x);
",2,0,0,2,4,1,2,2,0,6,30,5,0.05263,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,801,"        return nans == INFINITE;
",4,1,0,0,0,1,0,0,0,5,24,4,0.05263,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1105,"        return exp * 4 - 4;
",2,2,0,0,0,1,0,0,0,4,19,4,0.05263,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2305,"        if (isInfinite()) {
",0,0,0,2,5,0,2,0,0,2,19,5,0.05263,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2313,"        if (isNaN()) {
",0,0,0,2,5,0,2,0,0,2,14,5,0.05263,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2317,"        Dfp y = this;
",2,0,0,0,0,0,0,2,0,4,13,4,0.05263,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2318,"        boolean negate = false;
",2,0,0,0,0,0,0,0,0,3,23,5,0.05263,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2319,"        if (lessThan(getZero())) {
",0,0,0,3,7,0,4,0,0,4,26,5,0.05263,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2326,"        int exponent = (int)(y.log10() * 3.32);
",2,1,0,3,6,0,4,0,0,7,39,5,0.05263,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2327,"        if (exponent < 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.05263,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2331,"        Dfp tempDfp = DfpMath.pow(getTwo(), exponent);
",2,0,0,2,4,0,8,2,0,12,46,4,0.05263,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2332,"        while (tempDfp.lessThan(y) || tempDfp.equals(y)) {
",0,1,0,3,7,0,12,0,0,13,50,4,0.05263,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2336,"        exponent--;
",2,0,0,0,0,0,0,0,0,3,11,4,0.05263,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2340,"        y = y.divide(DfpMath.pow(getTwo(), exponent));
",2,0,0,3,6,0,12,0,0,15,46,4,0.05263,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2341,"        if (exponent > -1023) {
",2,1,0,1,3,0,0,0,0,4,23,4,0.05263,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2342,"            y = y.subtract(getOne());
",2,0,0,2,4,0,6,0,0,9,25,6,0.05263,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,473,"      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
",48,9,0,1,2,1,0,2,0,59,101,5,0.33333,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,181,"    return x;
",2,0,0,0,0,1,0,0,0,2,9,4,0.02564,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,189,"    return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.02564,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,197,"    return z;
",2,0,0,0,0,1,0,0,0,2,9,4,0.02564,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,93,"  public Vector3D(double x, double y, double z) {
",8,0,0,1,3,1,0,0,0,9,47,2,0.01266,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,94,"    this.x = x;
",4,0,0,0,0,0,0,0,0,5,11,4,0.01266,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,95,"    this.y = y;
",4,0,0,0,0,0,0,0,0,5,11,4,0.01266,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,96,"    this.z = z;
",4,0,0,0,0,0,0,0,0,5,11,4,0.01266,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,97,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01266,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,35,"  public static final Vector3D ZERO   = new Vector3D(0, 0, 0);
",2,0,0,1,2,3,0,4,0,9,60,2,0.01266,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,38,"  public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);
",2,0,0,1,2,3,0,4,0,9,60,2,0.01266,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,41,"  public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);
",2,0,0,1,2,3,0,4,0,10,62,2,0.01266,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,44,"  public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);
",2,0,0,1,2,3,0,4,0,9,60,2,0.01266,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,47,"  public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);
",2,0,0,1,2,3,0,4,0,10,62,2,0.01266,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,85,"        Iterator() {
",2,0,0,1,3,0,0,0,0,2,12,3,1.00000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,75,"        private final int[] counter = new int[dimension];
",2,0,1,2,4,2,0,0,0,6,49,3,1.00000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,79,"        private int count = -1;
",2,0,0,0,0,1,0,0,0,4,23,3,1.00000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,86,"            counter[last] = -1;
",0,0,1,1,2,0,0,0,0,6,19,5,1.00000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,87,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,147,"            return counter[dim];
",0,0,1,1,2,1,0,0,0,4,20,6,1.00000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,196,"        return new Iterator();
",0,0,0,1,2,1,0,2,0,2,22,6,1.00000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,205,"        return dimension;
",2,0,0,0,0,1,0,0,0,2,17,4,1.00000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,217,"        if (index < 0 ||
",2,2,0,0,1,0,0,0,0,4,16,4,1.00000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,272,"        return count + c[last];
",2,1,1,1,2,1,0,0,0,7,23,4,1.00000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,46,"public class MultidimensionalCounter implements Iterable<Integer> {
",2,0,0,0,1,1,0,4,0,7,67,1,1.00000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,260,"        if (c.length != dimension) {
",6,1,0,1,3,0,0,0,0,7,28,4,0.50000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,263,"        int count = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.50000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,264,"        for (int i = 0; i < dimension; i++) {
",8,1,0,1,3,0,0,0,0,10,37,4,0.50000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,265,"            final int index = c[i];
",2,0,1,1,2,1,0,0,0,7,23,6,0.50000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,266,"            if (index < 0 ||
",2,2,0,0,1,0,0,0,0,4,16,6,0.50000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,270,"            count += uniCounterOffset[i] * c[i];
",2,1,1,2,4,0,0,0,0,12,36,6,0.50000,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,69,"        this(random, EmptyClusterStrategy.LARGEST_VARIANCE);
",6,0,0,1,2,0,0,0,0,6,52,4,0.50000,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,70,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,134,"        return clusters;
",2,0,0,0,0,1,0,0,0,2,16,4,0.50000,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,176,"            for (int i = 0; i < pointSet.size(); i++) {
",6,1,0,2,5,0,4,0,0,12,43,6,0.50000,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,177,"                final T p = pointSet.get(i);
",2,0,0,1,2,1,6,2,0,11,28,8,0.50000,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,178,"                final Cluster<T> nearest = getNearestCluster(resultSet, p);
",2,0,0,1,2,1,6,4,0,13,59,8,0.50000,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,179,"                final double d = p.distanceFrom(nearest.getCenter());
",2,0,0,2,4,1,8,0,0,11,53,8,0.50000,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,180,"                sum += d * d;
",6,1,0,0,0,0,0,0,0,8,13,8,0.50000,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,181,"                dx2[i] = sum;
",2,0,1,1,2,0,0,0,0,7,13,8,0.50000,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,186,"            final double r = random.nextDouble() * sum;
",4,1,0,1,2,1,4,0,0,10,43,6,0.50000,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,187,"            for (int i = 0 ; i < dx2.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.50000,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,188,"                if (dx2[i] >= r) {
",2,1,1,2,5,0,0,0,0,7,18,8,0.50000,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,189,"                    final T p = pointSet.remove(i);
",2,0,0,1,2,1,6,2,0,11,31,10,0.50000,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,190,"                    resultSet.add(new Cluster<T>(p));
",2,0,0,2,4,0,4,4,0,10,33,11,0.50000,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,191,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.50000,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,194,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,44,"public final class MathUtils {
",2,0,0,0,1,2,0,0,0,4,30,1,0.33333,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,182,"            } catch (OutOfRangeException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.50000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,183,"                fwhmApprox = points[points.length - 1].getX() - points[0].getX();
",6,2,1,4,8,0,4,0,0,17,65,8,0.50000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,271,"            double minY = Double.POSITIVE_INFINITY;
",6,0,0,0,0,0,0,0,0,6,39,6,0.50000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,272,"            double maxY = Double.NEGATIVE_INFINITY;
",6,0,0,0,0,0,0,0,0,6,39,6,0.50000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,273,"            for (final WeightedObservedPoint point : points) {
",4,0,0,1,3,1,0,2,0,7,50,5,0.50000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,274,"                minY = Math.min(minY, point.getY());
",2,0,0,2,4,0,10,0,0,13,36,7,0.50000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,275,"                maxY = Math.max(maxY, point.getY());
",2,0,0,2,4,0,10,0,0,13,36,7,0.50000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,277,"            throw new OutOfRangeException(y, minY, maxY);
",6,0,0,1,2,0,0,2,0,8,45,6,0.50000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,52,"        this(null, wrong, min, boundIsAllowed);
",6,0,0,1,2,0,0,0,0,6,39,4,0.50000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,53,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,67,"        super(specific,
",2,0,0,0,1,0,0,0,0,2,15,4,0.50000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,73,"        this.min = min;
",4,0,0,0,0,0,0,0,0,5,15,4,0.50000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,74,"        this.boundIsAllowed = boundIsAllowed;
",4,0,0,0,0,0,0,0,0,5,37,4,0.50000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,75,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,46,"        this(null, wrong, lo, hi);
",6,0,0,1,2,0,0,0,0,6,26,4,0.50000,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,62,"        super(specific, LocalizedFormats.OUT_OF_RANGE_SIMPLE,
",6,0,0,0,1,0,0,0,0,6,53,4,0.50000,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,64,"        this.lo = lo;
",4,0,0,0,0,0,0,0,0,5,13,4,0.50000,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,65,"        this.hi = hi;
",4,0,0,0,0,0,0,0,0,5,13,4,0.50000,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,174,"        this(decimalDigits, true);
",2,0,0,1,2,0,0,0,0,3,26,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,175,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,188,"    private DfpField(final int decimalDigits, final boolean computeConstants) {
",6,0,0,1,3,3,0,0,0,9,75,2,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,190,"        this.radixDigits = (decimalDigits < 13) ? 4 : (decimalDigits + 3) / 4;
",6,3,0,2,4,0,0,0,0,10,70,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,191,"        this.rMode       = RoundingMode.ROUND_HALF_EVEN;
",6,0,0,0,0,0,0,0,0,7,48,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,192,"        this.ieeeFlags   = 0;
",2,0,0,0,0,0,0,0,0,3,21,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,193,"        this.zero        = new Dfp(this, 0);
",2,0,0,1,2,0,0,2,0,5,36,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,194,"        this.one         = new Dfp(this, 1);
",2,0,0,1,2,0,0,2,0,5,36,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,195,"        this.two         = new Dfp(this, 2);
",2,0,0,1,2,0,0,2,0,5,36,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,197,"        if (computeConstants) {
",2,0,0,1,3,0,0,0,0,2,23,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,199,"            synchronized (DfpField.class) {
",0,0,0,1,3,0,0,2,0,2,31,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,205,"                computeStringConstants((decimalDigits < 67) ? 200 : (3 * decimalDigits));
",4,2,0,3,6,0,2,0,0,8,73,9,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,208,"                sqr2           = new Dfp(this, sqr2String);
",4,0,0,1,2,0,0,2,0,7,43,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,209,"                sqr2Split      = split(sqr2String);
",2,0,0,1,2,0,4,0,0,7,35,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,210,"                sqr2Reciprocal = new Dfp(this, sqr2ReciprocalString);
",4,0,0,1,2,0,0,2,0,7,53,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,211,"                sqr3           = new Dfp(this, sqr3String);
",4,0,0,1,2,0,0,2,0,7,43,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,212,"                sqr3Reciprocal = new Dfp(this, sqr3ReciprocalString);
",4,0,0,1,2,0,0,2,0,7,53,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,213,"                pi             = new Dfp(this, piString);
",4,0,0,1,2,0,0,2,0,7,41,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,214,"                piSplit        = split(piString);
",2,0,0,1,2,0,4,0,0,7,33,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,215,"                e              = new Dfp(this, eString);
",4,0,0,1,2,0,0,2,0,7,40,8,0.03571,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,149,"                double scaleFactor = 1d;
",2,0,0,0,0,0,0,0,0,2,24,9,0.50000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,150,"                double lastScaleFactor = 1d;
",2,0,0,0,0,0,0,0,0,2,28,9,0.50000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,151,"                final int maxPower = 5;
",2,0,0,0,0,1,0,0,0,3,23,8,0.50000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,152,"                final double scale = FastMath.max(a,b);
",2,0,0,1,2,1,8,0,0,11,39,8,0.50000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,153,"                if (scale <= 0) {  // Can't scale
",2,1,0,1,3,0,0,0,0,3,33,8,0.50000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,158,"                infinite = true;
",2,0,0,0,0,0,0,0,0,4,16,8,0.50000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,159,"                for (int i = 0; i < maxPower; i++) {
",8,1,0,1,3,0,0,0,0,10,36,8,0.50000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,160,"                    lastScaleFactor = scaleFactor;
",4,0,0,0,0,0,0,0,0,5,30,10,0.50000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,161,"                    scaleFactor *= scale;
",4,0,0,0,0,0,0,0,0,5,21,10,0.50000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,162,"                    if (a != 0.0 && a > b) {
",6,3,0,1,3,0,0,0,0,9,24,10,0.50000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,169,"                    infinite = Double.isInfinite(p2) || Double.isInfinite(q2);
",2,1,0,2,4,0,12,0,0,16,58,10,0.50000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,170,"                    if (!infinite) {
",2,0,0,1,3,0,0,0,0,3,16,10,0.50000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,171,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.50000,0
defect4j,math,org/apache/commons/math/util/FastMath,60,644,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.25000,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,387,"        return new IllegalArgumentException() {
",0,0,0,1,3,1,0,2,0,2,39,6,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,316,"    private LocalizedFormats(final String sourceFormat) {
",4,0,0,1,3,2,0,2,0,8,53,2,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,317,"        this.sourceFormat = sourceFormat;
",4,0,0,0,0,0,0,0,0,5,33,4,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,318,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),
",2,0,0,5,10,0,0,0,0,3,67,2,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,45,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),
",2,0,0,4,8,0,0,0,0,3,94,2,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,46,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),
",2,0,0,1,2,0,0,0,0,3,41,2,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,47,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),
",2,0,0,1,2,0,0,0,0,3,95,2,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,48,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),
",2,0,0,1,2,0,0,0,0,3,60,2,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,49,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),
",2,0,0,1,2,0,0,0,0,3,54,2,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,50,"    BANDWIDTH_OUT_OF_INTERVAL(""bandwidth must be in the interval [0,1], but got {0}""),
",2,0,0,3,6,0,0,0,0,3,82,2,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,51,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n,k), got n = {0}, k = {1}""),
",2,0,0,4,8,0,0,0,0,3,107,2,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,52,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n,k), got n = {0}""),
",2,0,0,3,6,0,0,0,0,3,92,2,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,53,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),
",2,0,0,1,2,0,0,0,0,3,123,2,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,54,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),
",2,0,0,1,2,0,0,0,0,3,89,2,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,55,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),
",2,0,0,2,4,0,0,0,0,3,108,2,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,35,"    private static final double EXP_INT_TABLE_A[] = new double[1500];
",2,0,0,2,4,3,0,0,0,5,65,2,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,40,"    private static final double EXP_INT_TABLE_B[] = new double[1500];
",2,0,0,2,4,3,0,0,0,5,65,2,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,45,"    private static final double EXP_FRAC_TABLE_A[] = new double[1025];
",2,0,0,2,4,3,0,0,0,5,66,2,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,50,"    private static final double EXP_FRAC_TABLE_B[] = new double[1025];
",2,0,0,2,4,3,0,0,0,5,66,2,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,53,"    private static final double FACT[] = new double[20];
",2,0,0,2,4,3,0,0,0,5,52,2,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,56,"    private static final double LN_MANT[][] = new double[1024][];
",2,0,0,4,8,3,0,0,0,5,61,2,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,65,"    private static final double LN_SPLIT_COEF[][] = {
",2,0,0,2,5,3,0,0,0,5,49,2,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,85,"    private static final double LN_QUICK_COEF[][] = {
",2,0,0,2,5,3,0,0,0,5,49,2,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,98,"    private static final double LN_HI_PREC_COEF[][] = {
",2,0,0,2,5,3,0,0,0,5,51,2,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,108,"    private static final double SINE_TABLE_A[] = new double[14];
",2,0,0,2,4,3,0,0,0,5,60,2,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,111,"    private static final double SINE_TABLE_B[] = new double[14];
",2,0,0,2,4,3,0,0,0,5,60,2,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,114,"    private static final double COSINE_TABLE_A[] = new double[14];
",2,0,0,2,4,3,0,0,0,5,62,2,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,117,"    private static final double COSINE_TABLE_B[] = new double[14];
",2,0,0,2,4,3,0,0,0,5,62,2,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,120,"    private static final double TANGENT_TABLE_A[] = new double[14];
",2,0,0,2,4,3,0,0,0,5,63,2,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,123,"    private static final double TANGENT_TABLE_B[] = new double[14];
",2,0,0,2,4,3,0,0,0,5,63,2,1.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,33,"public final class MathUtils {
",2,0,0,0,1,2,0,0,0,4,30,1,0.00228,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,75,"    private static final long[] FACTORIALS = new long[] {
",2,0,0,2,5,3,0,0,0,5,53,2,0.00228,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,63,"        this(wrong, previous, index, MathUtils.OrderDirection.INCREASING, true);
",12,0,0,1,2,0,0,0,0,13,72,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,64,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,82,"        super(direction == MathUtils.OrderDirection.INCREASING ?
",8,1,0,0,1,0,0,0,0,9,56,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,91,"        this.direction = direction;
",4,0,0,0,0,0,0,0,0,5,27,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,92,"        this.strict = strict;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,93,"        this.index = index;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,94,"        this.previous = previous;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,95,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,101,"        return direction;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,107,"        return strict;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,402,"                            tmp = 0.1;
",2,0,0,0,0,0,0,0,0,3,10,12,0.28571,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,627,"            } else if (fp < 0) {
",2,1,0,1,4,0,0,0,0,3,20,7,0.25000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,628,"                paru = Math.min(paru, lmPar);
",2,0,0,1,2,0,8,0,0,11,29,9,0.25000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,605,"            for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,6,0.21053,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,275,"        updateJacobian();
",0,0,0,1,2,0,2,0,0,2,17,5,1.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,278,"        double[][] jTj = new double[cols][cols];
",2,0,1,4,8,0,0,0,0,6,40,5,1.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,279,"        for (int i = 0; i < cols; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,4,1.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,280,"            for (int j = i; j < cols; ++j) {
",10,1,0,1,3,0,0,0,0,12,32,6,1.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,281,"                double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,9,1.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,282,"                for (int k = 0; k < rows; ++k) {
",8,1,0,1,3,0,0,0,0,10,32,8,1.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,283,"                    sum += jacobian[k][i] * jacobian[k][j];
",2,1,1,4,8,0,0,0,0,16,39,10,1.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,285,"                jTj[i][j] = sum;
",2,0,1,2,4,0,0,0,0,9,16,8,1.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,286,"                jTj[j][i] = sum;
",2,0,1,2,4,0,0,0,0,9,16,8,1.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,292,"            RealMatrix inverse =
",2,0,0,0,0,0,0,2,0,4,20,6,1.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,312,"        if (rows <= cols) {
",4,1,0,1,3,0,0,0,0,5,19,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,65,44,"    protected AbstractRealMatrix() {
",2,0,0,1,3,1,0,0,0,3,32,2,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,65,45,"        lu = null;
",2,0,0,0,0,0,0,0,0,3,10,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,65,46,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,77,"        super(rowDimension, columnDimension);
",4,0,0,1,2,0,0,0,0,4,37,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,78,"        data = new double[rowDimension][columnDimension];
",2,0,1,2,4,0,0,0,0,7,49,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,79,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,95,"        throws IllegalArgumentException, NullPointerException {
",4,0,0,0,1,0,0,0,0,4,55,2,1.00000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,96,"        copyIn(d);
",0,0,0,1,2,0,4,0,0,4,10,5,1.00000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,97,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,298,"        return copyOut();
",0,0,0,1,2,1,2,0,0,2,17,5,1.00000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,316,"        if (data == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,317,"            if (row > 0) {
",2,1,0,1,3,0,0,0,0,3,14,6,1.00000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,321,"            if (column > 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,1.00000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,325,"            final int nRows = subMatrix.length;
",6,0,0,0,0,1,0,0,0,7,35,6,1.00000,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,152,"        return evaluations;
",2,0,0,0,0,1,0,0,0,2,19,4,1,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,66,82,"        return iterationCount;
",2,0,0,0,0,1,0,0,0,2,22,4,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,107,"            a = lo;
",4,0,0,0,0,0,0,0,0,5,7,6,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,108,"            b = hi;
",4,0,0,0,0,0,0,0,0,5,7,6,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,158,"                        d = p / q;
",6,1,0,0,0,0,0,0,0,8,10,12,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,159,"                        u = x + d;
",6,1,0,0,0,0,0,0,0,8,10,12,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,162,"                        if (u - a < tol2
",6,2,0,0,1,0,0,0,0,8,16,13,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,175,"                            e = a - x;
",6,1,0,0,0,0,0,0,0,8,10,14,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,182,"                        e = b - x;
",6,1,0,0,0,0,0,0,0,8,10,12,1,0
defect4j,math,org/apache/commons/math/optimization/GoalType,66,27,"public enum GoalType implements Serializable {
",2,0,0,0,1,1,0,2,0,5,46,1,1,0
defect4j,math,org/apache/commons/math/optimization/GoalType,66,30,"    MAXIMIZE,
",2,0,0,0,0,0,0,0,0,2,9,2,1,0
defect4j,math,org/apache/commons/math/optimization/GoalType,66,33,"    MINIMIZE
",2,0,0,0,0,0,0,0,0,2,8,2,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,43,"        super(100, 1E-10);
",0,0,0,1,2,0,0,0,0,0,18,3,1.00000,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,44,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,37,"    private static final double GOLDEN_SECTION = 0.5 * (3 - Math.sqrt(5));
",2,2,0,2,4,3,4,0,0,11,70,2,1.00000,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,57,"        clearResult();
",0,0,0,1,2,0,2,0,0,2,14,5,1.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,381,"                            tmp = 0.1;
",2,0,0,0,0,0,0,0,0,3,10,12,0.28571,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,607,"            } else if (fp < 0) {
",2,1,0,1,4,0,0,0,0,3,20,7,0.28571,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,608,"                paru = Math.min(paru, lmPar);
",2,0,0,1,2,0,8,0,0,11,29,9,0.28571,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,510,"            for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,6,0.25000,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,161,"        TDistribution tDistribution = new TDistributionImpl(nObs - 2);
",4,1,0,1,2,0,0,4,0,9,62,4,0.80000,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,162,"        int nVars = correlationMatrix.getColumnDimension();
",2,0,0,1,2,0,4,0,0,6,51,5,0.80000,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,163,"        double[][] out = new double[nVars][nVars];
",2,0,1,4,8,0,0,0,0,6,42,5,0.80000,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,164,"        for (int i = 0; i < nVars; i++) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.80000,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,165,"            for (int j = 0; j < nVars; j++) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.80000,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,166,"                if (i == j) {
",4,1,0,1,3,0,0,0,0,5,13,8,0.80000,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,167,"                    out[i][j] = 0d;
",0,0,1,2,4,0,0,0,0,7,15,10,0.80000,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,169,"                    double r = correlationMatrix.getEntry(i, j);
",2,0,0,1,2,0,8,0,0,10,44,11,0.80000,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,170,"                    double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));
",10,5,0,4,8,0,8,0,0,23,59,11,0.80000,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,175,"        return new BlockRealMatrix(out);
",2,0,0,1,2,1,0,2,0,4,32,5,0.80000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,46,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.80000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.80000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,128,"        double p0 = 1.0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.80000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,129,"        double p1 = getA(0, x);
",2,0,0,1,2,0,4,0,0,6,23,5,0.80000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,130,"        double q0 = 0.0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.80000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,131,"        double q1 = 1.0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.80000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,132,"        double c = p1 / q1;
",6,1,0,0,0,0,0,0,0,7,19,5,0.80000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,133,"        int n = 0;
",2,0,0,0,0,0,0,0,0,2,10,5,0.80000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,134,"        double relativeError = Double.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,6,40,5,0.80000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,135,"        while (n < maxIterations && relativeError > epsilon) {
",8,3,0,1,3,0,0,0,0,11,54,4,0.80000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,136,"            ++n;
",2,0,0,0,0,0,0,0,0,3,4,6,0.80000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,137,"            double a = getA(n, x);
",2,0,0,1,2,0,6,0,0,8,22,7,0.80000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,66,"        return solve(f, min, max);
",0,0,0,1,2,1,8,0,0,8,26,5,1.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator,71,180,"                loop     = false;
",2,0,0,0,0,0,0,0,0,4,17,12,1.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,150,"    if ((initialStepSize < minStep) || (initialStepSize > maxStep)) {
",8,3,0,3,7,0,0,0,0,11,65,4,0.50000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,153,"      initialStep = initialStepSize;
",4,0,0,0,0,0,0,0,0,5,30,6,0.50000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,155,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,211,"      return forward ? initialStep : -initialStep;
",6,0,0,0,0,1,0,0,0,7,44,7,0.50000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,292,"          filteredH = maxStep;
",4,0,0,0,0,0,0,0,0,5,20,6,0.33333,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,196,"        return (start < mid) && (mid < end);
",8,3,0,2,4,1,0,0,0,11,36,4,0.50000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,73,196,"        return (start < mid) && (mid < end);
",8,3,0,2,4,1,0,0,0,11,36,4,1.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,73,225,"        if (!isSequence(lower, initial, upper)) {
",0,0,0,2,5,0,8,0,0,9,41,4,1.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,292,"          filteredH = maxStep;
",4,0,0,0,0,0,0,0,0,5,20,6,1.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,309,"                    final double factor = computeStepGrowShrinkFactor(error);
",2,0,0,1,2,1,4,0,0,7,57,10,1.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,310,"                    hNew = filterStep(stepSize * factor, forward, false);
",6,1,0,1,2,0,4,0,0,13,53,10,1.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,311,"                    interpolator.rescale(hNew);
",0,0,0,1,2,0,6,0,0,6,27,11,1.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,290,"                        final double dt = manager.getEventTime() - stepStart;
",4,1,0,1,2,1,4,0,0,10,53,12,0.50000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,291,"                        if (Math.abs(dt) <= Math.ulp(stepStart)) {
",0,1,0,3,7,0,12,0,0,13,42,12,0.50000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,296,"                            hNew = dt;
",4,0,0,0,0,0,0,0,0,5,10,14,0.50000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,297,"                            interpolator.rescale(hNew);
",0,0,0,1,2,0,6,0,0,6,27,15,0.50000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,299,"                    } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.50000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,356,"        final double stopTime  = stepStart;
",4,0,0,0,0,1,0,0,0,5,35,4,0.50000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,357,"        stepStart = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,23,4,0.50000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,358,"        stepSize  = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,23,4,0.50000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,359,"        return stopTime;
",2,0,0,0,0,1,0,0,0,2,16,4,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,919,"        return walkInRowOrder(visitor);
",0,0,0,1,2,1,4,0,0,4,31,5,0.33333,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,496,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.33333,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,497,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.33333,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,498,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.33333,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,499,"        for (int i = 0; i < rows; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.33333,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,500,"            final double[] rowI = data[i];
",2,0,1,2,4,1,0,0,0,7,30,6,0.33333,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,501,"            for (int j = 0; j < columns; ++j) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.33333,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,502,"                visitor.visit(i, j, rowI[j]);
",0,0,1,2,4,0,8,0,0,12,29,9,0.33333,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,505,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,236,"        interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);
",0,0,0,1,2,0,12,0,0,12,66,5,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,237,"        interpolator.storeTime(stepStart);
",0,0,0,1,2,0,6,0,0,6,34,5,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,239,"        double hNew = stepSize;
",4,0,0,0,0,0,0,0,0,4,23,5,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,240,"        interpolator.rescale(hNew);
",0,0,0,1,2,0,6,0,0,6,27,5,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,242,"        boolean lastStep = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,243,"        while (!lastStep) {
",2,0,0,1,3,0,0,0,0,3,19,4,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,246,"            interpolator.shift();
",0,0,0,1,2,0,4,0,0,4,21,7,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,248,"            double error = 0;
",2,0,0,0,0,0,0,0,0,2,17,7,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,249,"            for (boolean loop = true; loop;) {
",4,0,0,1,3,0,0,0,0,5,34,6,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,251,"                stepSize = hNew;
",4,0,0,0,0,0,0,0,0,5,16,8,0.33333,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,143,"            --p;
",2,0,0,0,0,0,0,0,0,3,4,6,1,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,283,"        if (cachedVt == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,1,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,284,"            cachedVt = getV().transpose();
",2,0,0,2,4,0,4,0,0,7,30,6,1,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,288,"        return cachedVt;
",2,0,0,0,0,1,0,0,0,2,16,4,1,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,182,"                    wData[i] = new double[p];
",0,0,1,2,4,0,0,0,0,7,25,10,0.80000,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,217,"        if (cachedS == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.80000,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,220,"            cachedS = MatrixUtils.createRealDiagonalMatrix(singularValues);
",2,0,0,1,2,0,6,0,0,9,63,6,0.80000,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,223,"        return cachedS;
",2,0,0,0,0,1,0,0,0,2,15,4,0.80000,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,202,"        final RealMatrix m = createRealMatrix(diagonal.length, diagonal.length);
",10,0,0,1,2,1,2,2,0,15,72,4,0.80000,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,203,"        for (int i = 0; i < diagonal.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,43,4,0.80000,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,204,"            m.setEntry(i, i, diagonal[i]);
",0,0,1,2,4,0,8,0,0,12,30,7,0.80000,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,206,"        return m;
",2,0,0,0,0,1,0,0,0,2,9,4,0.80000,0
defect4j,math,org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,76,30,"public class DefaultRealMatrixPreservingVisitor implements RealMatrixPreservingVisitor {
",2,0,0,0,1,1,0,2,0,5,88,1,0.50000,0
defect4j,math,org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,76,35,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,76,44,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,195,"        return walkInColumnOrder(new RealMatrixPreservingVisitor() {
",0,0,0,1,4,1,2,2,0,4,60,5,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,603,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,604,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,605,"        final RealMatrix out = createMatrix(nCols, nRows);
",2,0,0,1,2,1,6,2,0,11,50,4,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,606,"        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {
",0,0,0,1,4,0,2,2,0,4,63,5,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,616,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,919,"        return walkInRowOrder(visitor);
",0,0,0,1,2,1,4,0,0,4,31,5,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,195,"        return walkInColumnOrder(new RealMatrixPreservingVisitor() {
",0,0,0,1,4,1,2,2,0,4,60,5,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,210,"                this.endRow = endRow;
",4,0,0,0,0,0,0,0,0,5,21,10,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,211,"                columnSum   = 0;
",2,0,0,0,0,0,0,0,0,3,16,10,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,212,"                maxColSum   = 0;
",2,0,0,0,0,0,0,0,0,3,16,10,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,213,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,217,"                columnSum += Math.abs(value);
",2,0,0,1,2,0,6,0,0,9,29,10,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,218,"                if (row == endRow) {
",4,1,0,1,3,0,0,0,0,5,20,10,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,219,"                    maxColSum = Math.max(maxColSum, columnSum);
",2,0,0,1,2,0,8,0,0,11,43,12,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,220,"                    columnSum = 0;
",2,0,0,0,0,0,0,0,0,3,14,12,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,222,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,226,"                return maxColSum;
",2,0,0,0,0,1,0,0,0,2,17,10,0.50000,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,633,"        if ((left.getRowDimension()    != right.getRowDimension()) ||
",0,2,0,3,7,0,8,0,0,10,61,4,0.50000,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,640,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,210,"        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,211,"        Iterator<Entry> it = sparseIterator();
",2,0,0,1,2,0,2,4,0,8,38,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,213,"        while (it.hasNext() && (e = it.next()) != null) {
",2,2,0,4,9,0,8,0,0,13,49,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,214,"            final double value = e.getValue();
",2,0,0,1,2,1,4,0,0,7,34,6,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,215,"            sum += value * value;
",6,1,0,0,0,0,0,0,0,8,21,6,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,216,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,217,"        return Math.sqrt(sum);
",0,0,0,1,2,1,6,0,0,6,22,5,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,222,"        double norm = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,223,"        Iterator<Entry> it = sparseIterator();
",2,0,0,1,2,0,2,4,0,8,38,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,225,"        while (it.hasNext() && (e = it.next()) != null) {
",2,2,0,4,9,0,8,0,0,13,49,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,226,"            norm += Math.abs(e.getValue());
",2,0,0,2,4,0,8,0,0,11,31,6,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,228,"        return norm;
",2,0,0,0,0,1,0,0,0,2,12,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,499,"        double max = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,1.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,500,"        Iterator iter = entries.iterator();
",2,0,0,1,2,0,4,2,0,8,35,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,501,"        while (iter.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,24,5,1.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,502,"            iter.advance();
",0,0,0,1,2,0,4,0,0,4,15,7,1.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,503,"            max += iter.value();
",2,0,0,1,2,0,4,0,0,7,20,6,1.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,505,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,709,"        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,1.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,710,"        for (double a : data) {
",4,0,0,1,3,0,0,0,0,4,23,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,711,"            sum += Math.abs(a);
",2,0,0,1,2,0,6,0,0,9,19,6,1.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,713,"        return sum;
",2,0,0,0,0,1,0,0,0,2,11,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,719,"        double max = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,1.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,720,"        for (double a : data) {
",4,0,0,1,3,0,0,0,0,4,23,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,721,"            max += Math.max(max, Math.abs(a));
",2,0,0,2,4,0,12,0,0,15,34,6,1.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,723,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,863,"        protected OpenMapSparseIterator() {
",2,0,0,1,3,1,0,0,0,3,35,3,0.50000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,864,"            iter = entries.iterator();
",2,0,0,1,2,0,4,0,0,7,26,5,0.50000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,865,"            current = new OpenMapEntry(iter);
",4,0,0,1,2,0,0,2,0,7,33,5,0.50000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,866,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,870,"            return iter.hasNext();
",0,0,0,1,2,1,4,0,0,4,22,6,0.50000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,875,"            iter.advance();
",0,0,0,1,2,0,4,0,0,4,15,6,0.50000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,267,"                    double r1 = y0 / y2;
",6,1,0,0,0,0,0,0,0,7,20,11,0.11111,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,268,"                    double r2 = y1 / y2;
",6,1,0,0,0,0,0,0,0,7,20,11,0.11111,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,269,"                    p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
",18,7,0,4,8,0,0,0,0,26,56,10,0.11111,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,79,30,"public class EuclideanIntegerPoint implements Clusterable<EuclideanIntegerPoint>, Serializable {
",2,0,0,0,1,1,0,6,0,9,96,1,1.00000,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,45,"    public Cluster(final T center) {
",4,0,0,1,3,2,0,2,0,8,32,2,1.00000,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,46,"        this.center = center;
",4,0,0,0,0,0,0,0,0,5,21,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1090,"                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;
",4,3,1,1,2,0,0,0,0,10,43,11,1.00000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1091,"                    dMin = 0.0;
",2,0,0,0,0,0,0,0,0,3,11,11,1.00000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1092,"                    updateSigma(tau);
",0,0,0,1,2,0,4,0,0,4,17,12,1.00000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1093,"                    return deflatedEnd;
",2,0,0,0,0,1,0,0,0,2,19,11,1.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,870,"            return dotProduct((ArrayRealVector) v);
",2,0,0,2,4,1,2,2,0,6,39,7,1.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,884,"        checkVectorDimensions(v.length);
",4,0,0,1,2,0,2,0,0,6,32,5,1.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,885,"        double dot = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,1.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,886,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,887,"            dot += data[i] * v[i];
",2,1,1,2,4,0,0,0,0,12,22,6,1.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,889,"        return dot;
",2,0,0,0,0,1,0,0,0,2,11,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,900,"        return dotProduct(v.data);
",4,0,0,1,2,1,2,0,0,6,26,5,1.00000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,336,"        if (eigenvectors == null) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.50000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,337,"            findEigenVectors();
",0,0,0,1,2,0,2,0,0,2,19,7,0.50000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,339,"        return eigenvectors[i].copy();
",0,0,1,2,4,1,2,0,0,6,30,5,0.50000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,175,"    public ArrayRealVector(ArrayRealVector v, boolean deep) {
",6,0,0,1,3,1,0,2,0,9,57,2,0.50000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,176,"        data = deep ? v.data.clone() : v.data;
",12,0,0,1,2,0,2,0,0,15,38,4,0.50000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,177,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,225,"        return new ArrayRealVector(this, true);
",0,0,0,1,2,1,0,2,0,3,39,5,0.50000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1105,"                        tau *= 0.25;
",2,0,0,0,0,0,0,0,0,3,12,15,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1106,"                        tType -= 12;
",2,0,0,0,0,0,0,0,0,3,12,15,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1530,"                tType = -5;
",2,0,0,0,0,0,0,0,0,4,11,8,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1531,"                double s = 0.25 * dMin;
",4,1,0,0,0,0,0,0,0,5,23,9,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1534,"                final int np = nn - 2 * pingPong;
",6,2,0,0,0,1,0,0,0,9,33,8,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1535,"                double b1 = work[np - 2];
",4,1,1,1,2,0,0,0,0,7,25,9,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1536,"                double b2 = work[np - 6];
",4,1,1,1,2,0,0,0,0,7,25,9,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1537,"                final double gam = dN2;
",4,0,0,0,0,1,0,0,0,5,23,8,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1538,"                if (work[np - 8] > b2 || work[np - 4] > b1) {
",8,5,1,3,7,0,0,0,0,17,45,8,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1541,"                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);
",10,6,1,4,8,0,0,0,0,20,58,9,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1544,"                if (end - start > 3) {
",4,2,0,1,3,0,0,0,0,6,22,8,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1564,"                if (a2 < cnst1) {
",4,1,0,1,3,0,0,0,0,5,17,8,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1565,"                    tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);
",6,4,0,3,6,0,6,0,0,17,43,10,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1509,"                            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.50000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1529,"                tType = -5;
",2,0,0,0,0,0,0,0,0,4,11,8,0.50000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1530,"                double s = 0.25 * dMin;
",4,1,0,0,0,0,0,0,0,5,23,9,0.50000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1533,"                final int np = nn - 2 * pingPong;
",6,2,0,0,0,1,0,0,0,9,33,8,0.50000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1534,"                double b1 = work[np - 2];
",4,1,1,1,2,0,0,0,0,7,25,9,0.50000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1535,"                double b2 = work[np - 6];
",4,1,1,1,2,0,0,0,0,7,25,9,0.50000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1536,"                final double gam = dN2;
",4,0,0,0,0,1,0,0,0,5,23,8,0.50000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1537,"                if (work[np - 8] > b2 || work[np - 4] > b1) {
",8,5,1,3,7,0,0,0,0,17,45,8,0.50000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1540,"                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);
",10,6,1,4,8,0,0,0,0,20,58,9,0.50000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1543,"                if (end - start > 2) {
",4,2,0,1,3,0,0,0,0,6,22,8,0.50000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1544,"                    b2 = work[nn - 13] / work[nn - 15];
",6,3,1,2,4,0,0,0,0,14,35,10,0.50000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1621,"                tau = 0.25 * dMin1;
",4,1,0,0,0,0,0,0,0,6,19,7,0.50000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1622,"                if (dMin1 == dN1) {
",4,1,0,1,3,0,0,0,0,5,19,7,0.50000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1625,"                tType = -9;
",2,0,0,0,0,0,0,0,0,4,11,7,0.50000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1627,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.50000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,81,77,"    public ArrayRealVector(double[] d) {
",4,0,0,2,5,1,0,0,0,5,36,2,0.33333,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,81,78,"        data = d.clone();
",2,0,0,1,2,0,4,0,0,7,17,4,0.33333,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,81,79,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1479,"                        gam = dN;
",4,0,0,0,0,0,0,0,0,5,9,11,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1480,"                        a2 = 0.0;
",2,0,0,0,0,0,0,0,0,3,9,11,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1481,"                        if (work[nn - 5]  >  work[nn - 7]) {
",4,3,1,3,7,0,0,0,0,11,36,11,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1484,"                        b2 = work[nn - 5] / work[nn - 7];
",6,3,1,2,4,0,0,0,0,14,33,11,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1485,"                        np = nn - 9;
",4,1,0,0,0,0,0,0,0,6,12,11,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1504,"                        if(b2 == 0.0) {
",2,1,0,1,3,0,0,0,0,3,15,11,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1507,"                        b1 = b2;
",4,0,0,0,0,0,0,0,0,5,8,11,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1508,"                        if (work[i4]  >  work[i4 - 2]) {
",2,2,1,3,7,0,0,0,0,10,32,11,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1511,"                        b2 = b2 * (work[i4] / work[i4 - 2]);
",6,3,1,3,6,0,0,0,0,16,36,11,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1512,"                        a2 = a2 + b2;
",6,1,0,0,0,0,0,0,0,8,13,11,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1513,"                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {
",6,4,0,2,5,0,8,0,0,18,48,11,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1586,"            if (dMin1 == dN1 && dMin2 == dN2) {
",8,3,0,1,3,0,0,0,0,11,35,5,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1084,"                } else if ((dMin < 0.0) &&
",2,2,0,1,4,0,0,0,0,4,26,9,0.12500,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,308,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.50000,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,169,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.50000,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,170,"                        matrix[row][getSlackVariableOffset() + slackVar++] = 1;  // slack
",2,1,1,3,6,0,2,0,0,11,65,8,0.12500,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,152,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.12500,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,191,"            doIteration(tableau);
",0,0,0,1,2,0,4,0,0,4,21,7,0.12500,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,338,"        double[] out = new double[data.length];
",6,0,0,2,4,0,0,0,0,6,39,5,0.10000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,339,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.10000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,340,"            out[i] = data[i] * d;
",2,1,1,2,4,0,0,0,0,12,21,6,0.10000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,342,"        return new ArrayRealVector(out);
",2,0,0,1,2,1,0,2,0,4,32,5,0.10000,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,297,"                return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.10000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,884,"        checkVectorDimensions(v.length);
",4,0,0,1,2,0,2,0,0,6,32,5,0.09091,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,885,"        double dot = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.09091,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,886,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.09091,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,887,"            dot += data[i] * v[i];
",2,1,1,2,4,0,0,0,0,12,22,6,0.09091,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,349,"              coefficients[i] = 0;
",0,0,1,1,2,0,0,0,0,5,20,8,0.33333,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,151,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.14286,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,190,"            doIteration(tableau);
",0,0,0,1,2,0,4,0,0,4,21,7,0.14286,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,179,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,297,"                return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.11111,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,884,"        checkVectorDimensions(v.length);
",4,0,0,1,2,0,2,0,0,6,32,5,0.10000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,885,"        double dot = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.10000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,886,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.10000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,887,"            dot += data[i] * v[i];
",2,1,1,2,4,0,0,0,0,12,22,6,0.10000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,889,"        return dot;
",2,0,0,0,0,1,0,0,0,2,11,4,0.10000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,1287,"        if (data.length != n) {
",6,1,0,1,3,0,0,0,0,7,23,4,0.10000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,1292,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.10000,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,129,"        if (tableau.getNumArtificialVariables() == 0) {
",0,1,0,2,5,0,4,0,0,5,47,4,0.10000,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,132,"        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {
",6,2,0,3,7,0,8,0,0,17,83,4,0.10000,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,61,"                                final boolean copyArray) {
",2,0,0,0,2,1,0,0,0,3,26,3,1,0
defect4j,math,org/apache/commons/math/MathException,85,106,"      super(buildMessage(Locale.US, pattern, arguments));
",4,0,0,2,4,0,6,0,0,10,51,5,1.00000,0
defect4j,math,org/apache/commons/math/MathException,85,107,"      this.pattern   = pattern;
",4,0,0,0,0,0,0,0,0,5,25,4,1.00000,0
defect4j,math,org/apache/commons/math/MathException,85,108,"      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();
",4,1,0,3,6,0,4,2,0,12,73,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,991,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,992,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,993,"        final StringBuffer res = new StringBuffer();
",2,0,0,1,2,1,0,4,0,7,44,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,994,"        String fullClassName = getClass().getName();
",2,0,0,2,4,0,4,2,0,8,44,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,995,"        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);
",2,1,0,2,4,0,8,2,0,14,84,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,996,"        res.append(shortClassName).append(""{"");
",0,0,0,2,5,0,8,0,0,9,39,5,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,998,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,999,"            if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1000,"                res.append("","");
",0,0,0,1,2,0,4,0,0,5,16,9,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1002,"            res.append(""{"");
",0,0,0,1,3,0,4,0,0,5,16,7,1.00000,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,291,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,1.00000,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,168,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,1.00000,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,151,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.16667,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,190,"            doIteration(tableau);
",0,0,0,1,2,0,4,0,0,4,21,7,0.16667,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,87,70,"        return point.clone();
",0,0,0,1,2,1,4,0,0,4,21,5,0.14286,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,884,"        checkVectorDimensions(v.length);
",4,0,0,1,2,0,2,0,0,6,32,5,0.11111,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,885,"        double dot = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.11111,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,886,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.11111,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,887,"            dot += data[i] * v[i];
",2,1,1,2,4,0,0,0,0,12,22,6,0.11111,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,889,"        return dot;
",2,0,0,0,0,1,0,0,0,2,11,4,0.11111,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,1287,"        if (data.length != n) {
",6,1,0,1,3,0,0,0,0,7,23,4,0.11111,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,1292,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,325,"        double[] coefficients = new double[getOriginalNumDecisionVariables()];
",2,0,0,3,6,0,2,0,0,4,70,5,0.11111,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,326,"        Integer basicRow =
",2,0,0,0,0,0,0,2,0,4,18,4,0.11111,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,339,"                         coefficients[i] = 0;
",0,0,1,1,2,0,0,0,0,5,20,12,0.50000,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,172,"                        matrix[row][getSlackVariableOffset() + slackVar++] = -1; // excess
",2,1,1,3,6,0,2,0,0,12,66,9,0.20000,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,70,"        return point.clone();
",0,0,0,1,2,1,4,0,0,4,21,5,0.16667,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,279,"                    return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.14286,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,884,"        checkVectorDimensions(v.length);
",4,0,0,1,2,0,2,0,0,6,32,5,0.12500,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,885,"        double dot = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.12500,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,886,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.12500,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,887,"            dot += data[i] * v[i];
",2,1,1,2,4,0,0,0,0,12,22,6,0.12500,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,889,"        return dot;
",2,0,0,0,0,1,0,0,0,2,11,4,0.12500,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,1287,"        if (data.length != n) {
",6,1,0,1,3,0,0,0,0,7,23,4,0.12500,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,1292,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12500,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,154,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.12500,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,179,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12500,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,192,"        return tableau.getSolution();
",0,0,0,1,2,1,4,0,0,4,29,5,0.12500,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,270,"        return (double)numerator / (double)denominator;
",4,1,0,2,4,1,0,0,0,5,47,4,0.03846,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,604,"                t /= 2; // cast out twos
",2,0,0,0,0,0,0,0,0,3,24,8,0.02439,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,434,"    private static final long[] factorials = new long[] 
",2,0,0,2,4,3,0,0,0,5,51,2,0.01818,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,182,"            return n;
",2,0,0,0,0,1,0,0,0,2,9,6,1.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,345,"        long result = Math.round(factorialDouble(n));
",2,0,0,2,4,0,8,0,0,10,45,5,1.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,430,"            u /= 2;
",2,0,0,0,0,0,0,0,0,3,7,6,0.05000,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,36,"    private static UnivariateRealSolverFactory factory = null;
",2,0,0,0,0,2,0,2,0,6,58,2,0.50000,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,128,"        return bracket( function, initial, lowerBound, upperBound,
",0,0,0,0,1,1,10,0,0,10,58,5,0.50000,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,171,"        if (function == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.50000,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,141,"                throw new IllegalArgumentException
",0,0,0,0,0,0,0,2,0,2,34,8,0.33333,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,986,"        if (v.length != this.getColumnDimension()) {
",4,1,0,2,5,0,2,0,0,7,44,4,0.33333,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,989,"        final int nRows = this.getRowDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.33333,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,990,"        final int nCols = this.getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,44,4,0.33333,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,991,"        final BigDecimal[] out = new BigDecimal[v.length];
",6,0,0,2,4,1,0,4,0,11,50,4,0.33333,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,992,"        for (int row = 0; row < nRows; row++) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.33333,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,993,"            BigDecimal sum = ZERO;
",4,0,0,0,0,0,0,2,0,6,22,6,0.33333,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,710,"        if (a==0 || b==0){
",4,3,0,1,3,0,0,0,0,7,18,4,1.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,711,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,1.00000,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,58,"        return (EstimatedParameter[]) parameters.toArray(new EstimatedParameter[parameters.size()]);
",0,0,0,5,10,1,8,4,0,12,92,5,1.00000,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,162,"        updateJacobian();
",0,0,0,1,2,0,2,0,0,2,17,5,0.50000,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,165,"        final int rows = problem.getMeasurements().length;
",4,0,0,1,2,1,4,0,0,9,50,4,0.50000,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,166,"        final int cols = problem.getAllParameters().length;
",4,0,0,1,2,1,4,0,0,9,51,4,0.50000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,367,"        for (int i = 0; i < in.length; i ++) {
",10,1,0,1,3,0,0,0,0,12,38,4,1,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,368,"            if (in[i] < 0) {
",0,1,1,2,5,0,0,0,0,5,16,6,1,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,372,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,1,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,72,"        if (x <= 0.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,1,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,75,"            ret = Gamma.regularizedGammaP(getAlpha(), x / getBeta());
",4,1,0,3,6,0,8,0,0,14,57,6,1,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,78,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,1,0
defect4j,math,org/apache/commons/math/special/Gamma,103,161,"            ret = 0.0;
",2,0,0,0,0,0,0,0,0,3,10,7,0.25000,0
defect4j,math,org/apache/commons/math/special/Gamma,104,200,"        return regularizedGammaQ(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);
",4,0,0,1,2,1,8,0,0,12,67,5,0.16667,0
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,290,"            pos.setIndex(initialIndex);
",0,0,0,1,2,0,6,0,0,6,27,6,0.50000,0
