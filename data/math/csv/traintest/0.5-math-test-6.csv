dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,predict
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,82,"            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {
",0,1,0,2,5,0,8,0,0,9,50,6,0.07692,1,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,345,"          Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
",4,1,0,2,4,0,4,2,0,11,63,6,0.10000,1,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,94,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.33333,1,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,85,198,"        if (fa * fb >= 0.0 ) {
",4,2,0,1,3,0,0,0,0,6,22,4,0.06250,1,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,333,"                coefficients[i] =
",0,0,1,1,2,0,0,0,0,5,17,6,0.12500,1,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,111,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,1,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,121,"        Object obj = v;
",4,0,0,0,0,0,0,2,0,6,15,4,0.20000,1,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,260,"        double dOn = object.doubleValue();
",2,0,0,1,2,0,4,0,0,6,34,5,0.00000,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,412,"        if (u * v == 0) {
",4,2,0,1,3,0,0,0,0,6,17,4,0.02222,1,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,149,"                double scaleFactor = 1d;
",2,0,0,0,0,0,0,0,0,2,24,9,0.50000,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,150,"                double lastScaleFactor = 1d;
",2,0,0,0,0,0,0,0,0,2,28,9,0.50000,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,151,"                final int maxPower = 5;
",2,0,0,0,0,1,0,0,0,3,23,8,0.50000,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,152,"                final double scale = FastMath.max(a,b);
",2,0,0,1,2,1,8,0,0,11,39,8,0.50000,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,153,"                if (scale <= 0) {  // Can't scale
",2,1,0,1,3,0,0,0,0,3,33,8,0.50000,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,158,"                infinite = true;
",2,0,0,0,0,0,0,0,0,4,16,8,0.50000,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,159,"                for (int i = 0; i < maxPower; i++) {
",8,1,0,1,3,0,0,0,0,10,36,8,0.50000,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,160,"                    lastScaleFactor = scaleFactor;
",4,0,0,0,0,0,0,0,0,5,30,10,0.50000,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,161,"                    scaleFactor *= scale;
",4,0,0,0,0,0,0,0,0,5,21,10,0.50000,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,162,"                    if (a != 0.0 && a > b) {
",6,3,0,1,3,0,0,0,0,9,24,10,0.50000,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,387,"        return new IllegalArgumentException() {
",0,0,0,1,3,1,0,2,0,2,39,6,1.00000,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,316,"    private LocalizedFormats(final String sourceFormat) {
",4,0,0,1,3,2,0,2,0,8,53,2,1.00000,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,317,"        this.sourceFormat = sourceFormat;
",4,0,0,0,0,0,0,0,0,5,33,4,1.00000,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,318,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),
",2,0,0,5,10,0,0,0,0,3,67,2,1.00000,0,1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,45,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),
",2,0,0,4,8,0,0,0,0,3,94,2,1.00000,0,1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,46,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),
",2,0,0,1,2,0,0,0,0,3,41,2,1.00000,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,47,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),
",2,0,0,1,2,0,0,0,0,3,95,2,1.00000,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,48,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),
",2,0,0,1,2,0,0,0,0,3,60,2,1.00000,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,49,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),
",2,0,0,1,2,0,0,0,0,3,54,2,1.00000,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,50,"    BANDWIDTH_OUT_OF_INTERVAL(""bandwidth must be in the interval [0,1], but got {0}""),
",2,0,0,3,6,0,0,0,0,3,82,2,1.00000,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,35,"    private static final double EXP_INT_TABLE_A[] = new double[1500];
",2,0,0,2,4,3,0,0,0,5,65,2,1.00000,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,40,"    private static final double EXP_INT_TABLE_B[] = new double[1500];
",2,0,0,2,4,3,0,0,0,5,65,2,1.00000,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,45,"    private static final double EXP_FRAC_TABLE_A[] = new double[1025];
",2,0,0,2,4,3,0,0,0,5,66,2,1.00000,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,50,"    private static final double EXP_FRAC_TABLE_B[] = new double[1025];
",2,0,0,2,4,3,0,0,0,5,66,2,1.00000,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,53,"    private static final double FACT[] = new double[20];
",2,0,0,2,4,3,0,0,0,5,52,2,1.00000,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,56,"    private static final double LN_MANT[][] = new double[1024][];
",2,0,0,4,8,3,0,0,0,5,61,2,1.00000,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,65,"    private static final double LN_SPLIT_COEF[][] = {
",2,0,0,2,5,3,0,0,0,5,49,2,1.00000,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,85,"    private static final double LN_QUICK_COEF[][] = {
",2,0,0,2,5,3,0,0,0,5,49,2,1.00000,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,98,"    private static final double LN_HI_PREC_COEF[][] = {
",2,0,0,2,5,3,0,0,0,5,51,2,1.00000,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,108,"    private static final double SINE_TABLE_A[] = new double[14];
",2,0,0,2,4,3,0,0,0,5,60,2,1.00000,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,111,"    private static final double SINE_TABLE_B[] = new double[14];
",2,0,0,2,4,3,0,0,0,5,60,2,1.00000,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,33,"public final class MathUtils {
",2,0,0,0,1,2,0,0,0,4,30,1,0.00228,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,75,"    private static final long[] FACTORIALS = new long[] {
",2,0,0,2,5,3,0,0,0,5,53,2,0.00228,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,63,"        this(wrong, previous, index, MathUtils.OrderDirection.INCREASING, true);
",12,0,0,1,2,0,0,0,0,13,72,4,0.00000,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,64,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,82,"        super(direction == MathUtils.OrderDirection.INCREASING ?
",8,1,0,0,1,0,0,0,0,9,56,5,0.00000,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,91,"        this.direction = direction;
",4,0,0,0,0,0,0,0,0,5,27,4,0.00000,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,92,"        this.strict = strict;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,93,"        this.index = index;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00000,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,402,"                            tmp = 0.1;
",2,0,0,0,0,0,0,0,0,3,10,12,0.28571,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,627,"            } else if (fp < 0) {
",2,1,0,1,4,0,0,0,0,3,20,7,0.25000,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,628,"                paru = Math.min(paru, lmPar);
",2,0,0,1,2,0,8,0,0,11,29,9,0.25000,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,275,"        updateJacobian();
",0,0,0,1,2,0,2,0,0,2,17,5,1.00000,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,278,"        double[][] jTj = new double[cols][cols];
",2,0,1,4,8,0,0,0,0,6,40,5,1.00000,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,279,"        for (int i = 0; i < cols; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,4,1.00000,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,280,"            for (int j = i; j < cols; ++j) {
",10,1,0,1,3,0,0,0,0,12,32,6,1.00000,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,281,"                double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,9,1.00000,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,282,"                for (int k = 0; k < rows; ++k) {
",8,1,0,1,3,0,0,0,0,10,32,8,1.00000,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,283,"                    sum += jacobian[k][i] * jacobian[k][j];
",2,1,1,4,8,0,0,0,0,16,39,10,1.00000,0,1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,285,"                jTj[i][j] = sum;
",2,0,1,2,4,0,0,0,0,9,16,8,1.00000,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,286,"                jTj[j][i] = sum;
",2,0,1,2,4,0,0,0,0,9,16,8,1.00000,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,292,"            RealMatrix inverse =
",2,0,0,0,0,0,0,2,0,4,20,6,1.00000,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,312,"        if (rows <= cols) {
",4,1,0,1,3,0,0,0,0,5,19,4,1.00000,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,65,44,"    protected AbstractRealMatrix() {
",2,0,0,1,3,1,0,0,0,3,32,2,1.00000,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,65,45,"        lu = null;
",2,0,0,0,0,0,0,0,0,3,10,4,1.00000,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,65,46,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,77,"        super(rowDimension, columnDimension);
",4,0,0,1,2,0,0,0,0,4,37,4,1.00000,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,78,"        data = new double[rowDimension][columnDimension];
",2,0,1,2,4,0,0,0,0,7,49,4,1.00000,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,79,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,95,"        throws IllegalArgumentException, NullPointerException {
",4,0,0,0,1,0,0,0,0,4,55,2,1.00000,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,152,"        return evaluations;
",2,0,0,0,0,1,0,0,0,2,19,4,1,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,66,82,"        return iterationCount;
",2,0,0,0,0,1,0,0,0,2,22,4,1,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,107,"            a = lo;
",4,0,0,0,0,0,0,0,0,5,7,6,1,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,108,"            b = hi;
",4,0,0,0,0,0,0,0,0,5,7,6,1,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,158,"                        d = p / q;
",6,1,0,0,0,0,0,0,0,8,10,12,1,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,159,"                        u = x + d;
",6,1,0,0,0,0,0,0,0,8,10,12,1,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,162,"                        if (u - a < tol2
",6,2,0,0,1,0,0,0,0,8,16,13,1,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,175,"                            e = a - x;
",6,1,0,0,0,0,0,0,0,8,10,14,1,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,43,"        super(100, 1E-10);
",0,0,0,1,2,0,0,0,0,0,18,3,1.00000,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,44,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,37,"    private static final double GOLDEN_SECTION = 0.5 * (3 - Math.sqrt(5));
",2,2,0,2,4,3,4,0,0,11,70,2,1.00000,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,381,"                            tmp = 0.1;
",2,0,0,0,0,0,0,0,0,3,10,12,0.28571,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,607,"            } else if (fp < 0) {
",2,1,0,1,4,0,0,0,0,3,20,7,0.28571,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,608,"                paru = Math.min(paru, lmPar);
",2,0,0,1,2,0,8,0,0,11,29,9,0.28571,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,161,"        TDistribution tDistribution = new TDistributionImpl(nObs - 2);
",4,1,0,1,2,0,0,4,0,9,62,4,0.80000,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,162,"        int nVars = correlationMatrix.getColumnDimension();
",2,0,0,1,2,0,4,0,0,6,51,5,0.80000,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,163,"        double[][] out = new double[nVars][nVars];
",2,0,1,4,8,0,0,0,0,6,42,5,0.80000,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,164,"        for (int i = 0; i < nVars; i++) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.80000,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,165,"            for (int j = 0; j < nVars; j++) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.80000,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,166,"                if (i == j) {
",4,1,0,1,3,0,0,0,0,5,13,8,0.80000,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,167,"                    out[i][j] = 0d;
",0,0,1,2,4,0,0,0,0,7,15,10,0.80000,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,169,"                    double r = correlationMatrix.getEntry(i, j);
",2,0,0,1,2,0,8,0,0,10,44,11,0.80000,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,170,"                    double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));
",10,5,0,4,8,0,8,0,0,23,59,11,0.80000,0,1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,175,"        return new BlockRealMatrix(out);
",2,0,0,1,2,1,0,2,0,4,32,5,0.80000,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,46,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.80000,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.80000,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,128,"        double p0 = 1.0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.80000,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,129,"        double p1 = getA(0, x);
",2,0,0,1,2,0,4,0,0,6,23,5,0.80000,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,130,"        double q0 = 0.0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.80000,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator,71,180,"                loop     = false;
",2,0,0,0,0,0,0,0,0,4,17,12,1.00000,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,150,"    if ((initialStepSize < minStep) || (initialStepSize > maxStep)) {
",8,3,0,3,7,0,0,0,0,11,65,4,0.50000,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,153,"      initialStep = initialStepSize;
",4,0,0,0,0,0,0,0,0,5,30,6,0.50000,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,155,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,196,"        return (start < mid) && (mid < end);
",8,3,0,2,4,1,0,0,0,11,36,4,0.50000,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,73,196,"        return (start < mid) && (mid < end);
",8,3,0,2,4,1,0,0,0,11,36,4,1.00000,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,292,"          filteredH = maxStep;
",4,0,0,0,0,0,0,0,0,5,20,6,1.00000,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,309,"                    final double factor = computeStepGrowShrinkFactor(error);
",2,0,0,1,2,1,4,0,0,7,57,10,1.00000,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,310,"                    hNew = filterStep(stepSize * factor, forward, false);
",6,1,0,1,2,0,4,0,0,13,53,10,1.00000,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,311,"                    interpolator.rescale(hNew);
",0,0,0,1,2,0,6,0,0,6,27,11,1.00000,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,290,"                        final double dt = manager.getEventTime() - stepStart;
",4,1,0,1,2,1,4,0,0,10,53,12,0.50000,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,291,"                        if (Math.abs(dt) <= Math.ulp(stepStart)) {
",0,1,0,3,7,0,12,0,0,13,42,12,0.50000,0,1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,296,"                            hNew = dt;
",4,0,0,0,0,0,0,0,0,5,10,14,0.50000,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,297,"                            interpolator.rescale(hNew);
",0,0,0,1,2,0,6,0,0,6,27,15,0.50000,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,299,"                    } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.50000,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,356,"        final double stopTime  = stepStart;
",4,0,0,0,0,1,0,0,0,5,35,4,0.50000,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,357,"        stepStart = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,23,4,0.50000,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,358,"        stepSize  = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,23,4,0.50000,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,359,"        return stopTime;
",2,0,0,0,0,1,0,0,0,2,16,4,0.50000,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,919,"        return walkInRowOrder(visitor);
",0,0,0,1,2,1,4,0,0,4,31,5,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,496,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,497,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,498,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,499,"        for (int i = 0; i < rows; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,500,"            final double[] rowI = data[i];
",2,0,1,2,4,1,0,0,0,7,30,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,501,"            for (int j = 0; j < columns; ++j) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,502,"                visitor.visit(i, j, rowI[j]);
",0,0,1,2,4,0,8,0,0,12,29,9,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,505,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,236,"        interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);
",0,0,0,1,2,0,12,0,0,12,66,5,0.33333,0,1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,143,"            --p;
",2,0,0,0,0,0,0,0,0,3,4,6,1,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,283,"        if (cachedVt == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,1,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,284,"            cachedVt = getV().transpose();
",2,0,0,2,4,0,4,0,0,7,30,6,1,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,288,"        return cachedVt;
",2,0,0,0,0,1,0,0,0,2,16,4,1,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,182,"                    wData[i] = new double[p];
",0,0,1,2,4,0,0,0,0,7,25,10,0.80000,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,217,"        if (cachedS == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.80000,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,220,"            cachedS = MatrixUtils.createRealDiagonalMatrix(singularValues);
",2,0,0,1,2,0,6,0,0,9,63,6,0.80000,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,223,"        return cachedS;
",2,0,0,0,0,1,0,0,0,2,15,4,0.80000,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,202,"        final RealMatrix m = createRealMatrix(diagonal.length, diagonal.length);
",10,0,0,1,2,1,2,2,0,15,72,4,0.80000,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,203,"        for (int i = 0; i < diagonal.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,43,4,0.80000,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,204,"            m.setEntry(i, i, diagonal[i]);
",0,0,1,2,4,0,8,0,0,12,30,7,0.80000,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,206,"        return m;
",2,0,0,0,0,1,0,0,0,2,9,4,0.80000,0,0
defect4j,math,org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,76,30,"public class DefaultRealMatrixPreservingVisitor implements RealMatrixPreservingVisitor {
",2,0,0,0,1,1,0,2,0,5,88,1,0.50000,0,0
defect4j,math,org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,76,35,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0,0
defect4j,math,org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,76,44,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.50000,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,195,"        return walkInColumnOrder(new RealMatrixPreservingVisitor() {
",0,0,0,1,4,1,2,2,0,4,60,5,0.50000,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,603,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.50000,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,604,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.50000,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,605,"        final RealMatrix out = createMatrix(nCols, nRows);
",2,0,0,1,2,1,6,2,0,11,50,4,0.50000,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,606,"        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {
",0,0,0,1,4,0,2,2,0,4,63,5,0.50000,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,616,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.50000,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,919,"        return walkInRowOrder(visitor);
",0,0,0,1,2,1,4,0,0,4,31,5,0.50000,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,195,"        return walkInColumnOrder(new RealMatrixPreservingVisitor() {
",0,0,0,1,4,1,2,2,0,4,60,5,0.50000,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,210,"                this.endRow = endRow;
",4,0,0,0,0,0,0,0,0,5,21,10,0.50000,0,0
