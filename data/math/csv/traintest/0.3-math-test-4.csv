dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,predict
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,121,"        return fit(new Gaussian.Parametric(), guess);
",4,0,0,2,4,1,4,0,0,8,45,5,0.20000,1,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3482,"        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);
",16,2,0,3,6,1,4,0,0,22,59,5,0.00000,1,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,94,"            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN, p);
",4,0,0,1,2,0,6,0,0,10,105,7,0.00000,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,162,"                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));
",0,0,1,4,8,0,24,0,0,29,100,8,1.00000,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,63,417,"        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;
",4,3,0,3,6,1,12,0,0,19,54,4,0.00000,1,1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,258,"            chiSquare += residual * residual / residualsWeights[i];
",6,2,1,1,2,0,0,0,0,13,55,6,0.00000,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,243,"        throw new MaxIterationsExceededException(maximalIterationCount);
",2,0,0,1,2,0,0,2,0,4,64,5,0.00000,1,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,97,"        return optimizer.getResult();
",0,0,0,1,2,1,4,0,0,4,29,5,0.00000,1,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,171,"                    out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));
",0,2,1,4,8,0,6,0,0,15,61,10,0.80000,1,0
defect4j,math,org/apache/commons/math/util/FastMath,37,867,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,1,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2413,"            initialTrustRegionRadius = minDiff / 3.0;
",4,1,0,0,0,0,0,0,0,6,41,6,0.50000,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,126,"            lowerBound = lower.clone();
",2,0,0,1,2,0,4,0,0,7,27,6,0.50000,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,134,"            upperBound = upper.clone();
",2,0,0,1,2,0,4,0,0,7,27,6,0.50000,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,98,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,99,"                final double v = startPoint[i];
",2,0,1,1,2,1,0,0,0,7,31,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,100,"                final double lo = lower[i];
",2,0,1,1,2,1,0,0,0,7,27,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,101,"                if (v < lo) {
",4,1,0,1,3,0,0,0,0,5,13,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,107,"            if (upper.length != dim) {
",6,1,0,1,3,0,0,0,0,7,26,6,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,110,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,111,"                final double v = startPoint[i];
",2,0,1,1,2,1,0,0,0,7,31,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,112,"                final double hi = upper[i];
",2,0,1,1,2,1,0,0,0,7,27,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,113,"                if (v > hi) {
",4,1,0,1,3,0,0,0,0,5,13,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,95,"            if (lower.length != dim) {
",6,1,0,1,3,0,0,0,0,7,26,6,0.25000,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,44,"    public RealPointValuePair(final double[] point, final double value) {
",6,0,0,2,5,3,0,0,0,9,69,2,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,45,"        this.point = (point == null) ? null : point.clone();
",4,1,0,2,4,0,4,0,0,10,52,4,0.08333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,244,"    super(interpolator);
",2,0,0,1,2,0,0,0,0,2,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,246,"    if (interpolator.currentState == null) {
",4,1,0,1,3,0,0,0,0,5,40,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,248,"      yDotKLast = null;
",2,0,0,0,0,0,0,0,0,3,17,6,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,249,"      v         = null;
",2,0,0,0,0,0,0,0,0,3,17,6,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,250,"      vectorsInitialized = false;
",2,0,0,0,0,0,0,0,0,4,27,6,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,273,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,278,"    return new DormandPrince853StepInterpolator(this);
",0,0,0,1,2,1,0,2,0,2,50,6,0.03571,0,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,37,"        super(max);
",2,0,0,1,2,0,0,0,0,2,11,4,1.00000,0,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,38,"        getContext().addMessage(LocalizedFormats.EVALUATIONS);
",4,0,0,2,4,0,4,0,0,8,54,5,1.00000,0,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,39,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,42,"        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);
",6,0,0,1,2,0,0,0,0,6,47,4,1.00000,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,43,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,53,"                                     Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,1.00000,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,370,"        return evaluate(values, weights, 0, values.length);
",4,0,0,1,2,1,6,0,0,10,51,5,1.00000,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,222,"        return test(values, weights, begin, length, false);
",0,0,0,1,2,1,10,0,0,11,51,5,0.50000,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,258,"        if (weights == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.50000,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,262,"        if (weights.length != values.length) {
",8,1,0,1,3,0,0,0,0,9,38,4,0.50000,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,266,"        boolean containsPositiveWeight = false;
",2,0,0,0,0,0,0,0,0,3,39,5,0.50000,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,68,"        return (point == null) ? null : point.clone();
",2,1,0,2,4,1,4,0,0,7,46,5,0.07143,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,181,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,347,"            columnsToDrop.add(col);
",0,0,0,1,2,0,6,0,0,6,23,9,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,73,"        throws DimensionMismatchException, NoDataException, NullArgumentException {
",6,0,0,0,1,0,0,0,0,6,75,2,0.06250,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,74,"        copyIn(d);
",0,0,0,1,2,0,4,0,0,4,10,5,0.06250,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,75,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06250,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,261,"        if (data == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.06250,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,262,"            if (row > 0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.06250,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,265,"            if (column > 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.06250,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,268,"            MathUtils.checkNotNull(subMatrix);
",0,0,0,1,2,0,6,0,0,6,34,7,0.06250,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,269,"            final int nRows = subMatrix.length;
",6,0,0,0,0,1,0,0,0,7,35,6,0.06250,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,270,"            if (nRows == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.06250,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,274,"            final int nCols = subMatrix[0].length;
",4,0,1,1,2,1,0,0,0,7,38,6,0.06250,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,275,"            if (nCols == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.06250,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,278,"            data = new double[subMatrix.length][nCols];
",6,0,1,2,4,0,0,0,0,9,43,6,0.06250,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,279,"            for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.06250,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,280,"                if (subMatrix[i].length != nCols) {
",4,1,1,2,5,0,0,0,0,9,35,8,0.06250,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,647,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,643,"        if (n > 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,1,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1160,"                double xa = x - 1.0;
",4,1,0,0,0,0,0,0,0,5,20,9,1,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1161,"                double xb = xa - x + 1.0;
",6,2,0,0,0,0,0,0,0,8,25,9,1,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1162,"                double tmp = xa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,31,9,1,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1163,"                double aa = xa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,10,27,9,1,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,209,"    if ((initialStepSize < minStep) || (initialStepSize > maxStep)) {
",8,3,0,3,7,0,0,0,0,11,65,4,0.50000,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,212,"      initialStep = initialStepSize;
",4,0,0,0,0,0,0,0,0,5,30,6,0.50000,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,214,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,252,"      return forward ? initialStep : -initialStep;
",6,0,0,0,0,1,0,0,0,7,44,7,0.50000,0,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3373,"        y += 1.0;
",2,0,0,0,0,0,0,0,0,3,9,4,0.16667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3375,"        if (y == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.16667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3379,"        return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.16667,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,334,"            handler.resetState(t, y);
",0,0,0,1,2,0,8,0,0,8,25,7,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,49,"        super(rowDimension, columnDimension);
",4,0,0,1,2,0,0,0,0,4,37,4,0.03333,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,51,"        this.columns = columnDimension;
",4,0,0,0,0,0,0,0,0,5,31,4,0.03333,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,52,"        this.entries = new OpenIntToDoubleHashMap(0.0);
",2,0,0,1,2,0,0,2,0,5,47,4,0.03333,0,0
defect4j,math,org/apache/commons/math/complex/Complex,46,260,"            return isZero ? NaN : INF;
",6,0,0,0,0,1,0,0,0,6,26,7,1,0,0
defect4j,math,org/apache/commons/math/complex/Complex,46,1183,"        return ""("" + real + "", "" + imaginary + "")"";
",4,1,0,1,2,1,0,0,0,8,43,4,1.00000,0,0
defect4j,math,org/apache/commons/math/complex/Complex,46,587,"        return this.add(I).divide(I.subtract(this)).log()
",0,0,0,4,8,1,12,0,0,12,49,6,0.33333,0,1
defect4j,math,org/apache/commons/math/complex/Complex,46,258,"        if (divisor.isZero) {
",4,0,0,1,3,0,0,0,0,4,21,5,0.30769,0,0
defect4j,math,org/apache/commons/math/complex/Complex,46,253,"        MathUtils.checkNotNull(divisor);
",0,0,0,1,2,0,6,0,0,6,32,5,0.26667,0,0
defect4j,math,org/apache/commons/math/complex/Complex,46,254,"        if (isNaN || divisor.isNaN) {
",6,1,0,1,3,0,0,0,0,7,29,4,0.26667,0,0
defect4j,math,org/apache/commons/math/complex/Complex,46,583,"        if (isNaN) {
",2,0,0,1,3,0,0,0,0,2,12,4,0.25000,0,0
defect4j,math,org/apache/commons/math/util/FastMath,46,1284,"            if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.25000,0,0
defect4j,math,org/apache/commons/math/complex/Complex,47,257,"            return NaN;
",2,0,0,0,0,1,0,0,0,2,11,6,1,0,0
defect4j,math,org/apache/commons/math/util/FastMath,47,2991,"                if (y < 0.0 || invy < 0.0) {
",4,3,0,1,3,0,0,0,0,7,28,8,0.50000,0,0
defect4j,math,org/apache/commons/math/util/FastMath,47,2994,"                    return Math.PI;
",4,0,0,0,0,1,0,0,0,4,15,11,0.50000,0,0
defect4j,math,org/apache/commons/math/complex/Complex,47,583,"        return this.add(I).divide(I.subtract(this)).log()
",0,0,0,4,8,1,12,0,0,12,49,6,0.33333,0,1
defect4j,math,org/apache/commons/math/complex/Complex,47,256,"        if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) {
",0,3,0,3,7,0,8,0,0,11,64,4,0.30769,0,0
defect4j,math,org/apache/commons/math/complex/Complex,47,251,"        MathUtils.checkNotNull(divisor);
",0,0,0,1,2,0,6,0,0,6,32,5,0.26667,0,0
defect4j,math,org/apache/commons/math/complex/Complex,47,252,"        if (isNaN || divisor.isNaN) {
",6,1,0,1,3,0,0,0,0,7,29,4,0.26667,0,0
