dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,predict
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,136,"            if ((Boolean) tree.getAttribute()) {
",0,0,0,3,7,0,4,2,0,6,36,7,0.00000,1,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,338,"            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
",0,1,0,2,5,0,8,0,0,9,50,6,0.05882,1,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,209,"        return chromosomes.iterator();
",0,0,0,1,2,1,4,0,0,4,30,5,1.00000,1,-1
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,65,"        this.elitismRate = elitismRate;
",4,0,0,0,0,0,0,0,0,5,31,4,0.40000,1,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,735,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.50000,1,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1752,"                throw new PathIsExploredException(); // XXX
",0,0,0,1,2,0,0,2,0,2,43,10,0.00000,1,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,238,"                targetY = -REDUCTION_FACTOR * yA;
",6,1,0,0,0,0,0,0,0,9,33,9,0.00000,1,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,520,"                for (int i = 0; i < weights.length; i++) {
",10,1,0,1,3,0,0,0,0,12,42,9,0.50000,1,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,929,"            double[] res = new double[x.length];
",6,0,0,2,4,0,0,0,0,6,36,6,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,930,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,931,"                double diff = boundaries[1][i] - boundaries[0][i];
",2,1,1,4,8,0,0,0,0,11,50,8,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,932,"                res[i] = (x[i] - boundaries[0][i]) / diff;
",2,2,1,5,10,0,0,0,0,17,42,7,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,934,"            return res;
",2,0,0,0,0,1,0,0,0,2,11,5,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,955,"            double[] res = new double[x.length];
",6,0,0,2,4,0,0,0,0,6,36,6,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,956,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,957,"                double diff = boundaries[1][i] - boundaries[0][i];
",2,1,1,4,8,0,0,0,0,11,50,8,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,958,"                res[i] = diff * x[i] + boundaries[0][i];
",2,2,1,4,8,0,0,0,0,17,40,7,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,960,"            return res;
",2,0,0,0,0,1,0,0,0,2,11,5,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,970,"                double[] repaired = repair(point);
",2,0,0,2,4,0,4,0,0,6,34,8,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,971,"                value = CMAESOptimizer.this
",4,0,0,0,0,0,0,0,0,5,27,7,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,974,"            } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1014,"            double[] repaired = new double[x.length];
",6,0,0,2,4,0,0,0,0,6,41,6,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1015,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,246,"        this(0);
",0,0,0,1,2,0,0,0,0,0,8,3,1.00000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,247,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,253,"        this(lambda, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,
",6,0,0,0,1,0,0,0,0,6,62,4,1.00000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,256,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,570,"            lambda = 4 + (int) (3. * Math.log(dimension));
",2,2,0,3,6,0,6,0,0,11,46,6,1.00000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,916,"            double[] res = new double[x.length];
",6,0,0,2,4,0,0,0,0,6,36,6,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,917,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,918,"                double diff = boundaries[1][i] - boundaries[0][i];
",2,1,1,4,8,0,0,0,0,11,50,8,0.33333,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,423,"                            break generationLoop;
",2,0,0,0,0,0,0,0,0,2,21,13,1.00000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,995,"                    repaired[i] = 1.0;
",0,0,1,1,2,0,0,0,0,5,18,10,1.00000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,908,"            double[] res = new double[x.length];
",6,0,0,2,4,0,0,0,0,6,36,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,909,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.50000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,910,"                double diff = boundaries[1][i] - boundaries[0][i];
",2,1,1,4,8,0,0,0,0,11,50,8,0.50000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,911,"                res[i] = (x[i] - boundaries[0][i]) / diff;
",2,2,1,5,10,0,0,0,0,17,42,7,0.50000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,913,"            return res;
",2,0,0,0,0,1,0,0,0,2,11,5,0.50000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,933,"            double[] res = new double[x.length];
",6,0,0,2,4,0,0,0,0,6,36,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,934,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.50000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,935,"                double diff = boundaries[1][i] - boundaries[0][i];
",2,1,1,4,8,0,0,0,0,11,50,8,0.50000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,936,"                res[i] = diff * x[i] + boundaries[0][i];
",2,2,1,4,8,0,0,0,0,17,40,7,0.50000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,938,"            return res;
",2,0,0,0,0,1,0,0,0,2,11,5,0.50000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,948,"                double[] repaired = repair(point);
",2,0,0,2,4,0,4,0,0,6,34,8,0.50000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,949,"                value = CMAESOptimizer.this
",4,0,0,0,0,0,0,0,0,5,27,7,0.50000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,952,"            } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.50000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,990,"            double[] repaired = new double[x.length];
",6,0,0,2,4,0,0,0,0,6,41,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,991,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.50000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,992,"                if (x[i] < 0) {
",0,1,1,2,5,0,0,0,0,5,15,7,0.50000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,994,"                } else if (x[i] > 1.0) {
",0,1,1,2,6,0,0,0,0,5,24,8,0.50000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,997,"                    repaired[i] = x[i];
",0,0,1,2,4,0,0,0,0,9,19,10,0.50000,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1000,"            return repaired;
",2,0,0,0,0,1,0,0,0,2,16,5,0.50000,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,97,"        MatrixUtils.checkSubtractionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,48,5,1,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,99,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,1,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,100,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,1,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,101,"        final RealMatrix out = createMatrix(rowCount, columnCount);
",2,0,0,1,2,1,6,2,0,11,59,4,1,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,102,"        for (int row = 0; row < rowCount; ++row) {
",8,1,0,1,3,0,0,0,0,10,42,4,1,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,103,"            for (int col = 0; col < columnCount; ++col) {
",8,1,0,1,3,0,0,0,0,10,45,6,1,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,104,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));
",0,1,0,3,6,0,22,0,0,23,66,9,1,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,108,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,1,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,241,"        return walkInColumnOrder(new RealMatrixPreservingVisitor() {
",0,0,0,1,4,1,2,2,0,4,60,5,1,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,456,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,1,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,457,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,1,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,458,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,1,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,459,"        for (int j = 0; j < columns; ++j) {
",8,1,0,1,3,0,0,0,0,10,35,4,1,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,460,"            for (int i = 0; i < rows; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,6,1,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,461,"                visitor.visit(i, j, data[i][j]);
",0,0,1,3,6,0,8,0,0,14,32,9,1,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,464,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,1,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,184,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,1.00000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1107,"            return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.50000,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,129,"        final double nhalf = numeratorDegreesOfFreedom / 2;
",4,1,0,0,0,1,0,0,0,6,51,4,0.25000,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,130,"        final double mhalf = denominatorDegreesOfFreedom / 2;
",4,1,0,0,0,1,0,0,0,6,53,4,0.25000,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,131,"        final double logx = FastMath.log(x);
",2,0,0,1,2,1,6,0,0,9,36,4,0.25000,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,234,"        double previous = val[0];
",2,0,1,1,2,0,0,0,0,4,25,5,1.00000,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,235,"        final int max = val.length;
",6,0,0,0,0,1,0,0,0,7,27,4,1.00000,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,239,"        for (index = 1; index < max; index++) {
",8,1,0,1,3,0,0,0,0,11,39,5,1.00000,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,240,"            switch (dir) {
",2,0,0,1,3,0,0,0,0,2,14,7,1.00000,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,242,"                if (strict) {
",2,0,0,1,3,0,0,0,0,2,13,8,1.00000,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,243,"                    if (val[index] <= previous) {
",2,1,1,2,5,0,0,0,0,7,29,10,1.00000,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,268,"            previous = val[index];
",2,0,1,1,2,0,0,0,0,7,22,7,1.00000,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,24,532,"         return copyOf(source, source.length);
",4,0,0,1,2,1,4,0,0,8,37,5,0.25000,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,24,560,"         final double[] output = new double[len];
",2,0,1,2,4,1,0,0,0,5,40,4,0.25000,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,24,561,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));
",4,0,0,2,4,0,14,0,0,18,73,5,0.25000,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,24,562,"         return output;
",2,0,0,0,0,1,0,0,0,2,14,4,0.25000,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/Sin,24,33,"public class Sin implements UnivariateDifferentiable, DifferentiableUnivariateFunction {
",2,0,0,0,1,1,0,4,0,7,88,1,0.25000,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/Sin,24,36,"        return FastMath.sin(x);
",0,0,0,1,2,1,6,0,0,6,23,5,0.25000,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,183,"                            if (x <= m) {
",4,1,0,1,3,0,0,0,0,5,13,14,0.20000,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,326,"                a = FastMath.sqrt(c1 / c2);
",6,1,0,1,2,0,4,0,0,12,27,7,0.33333,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,48,"                                Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,1.00000,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,49,"        getContext().addMessage(pattern, args);
",0,0,0,2,4,0,8,0,0,8,39,5,1.00000,0,-1
