dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,predict
defect4j,math,org/apache/commons/math/util/MathUtils,63,417,"        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;
",4,3,0,3,6,1,12,0,0,19,54,4,0.00000,1,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,258,"            chiSquare += residual * residual / residualsWeights[i];
",6,2,1,1,2,0,0,0,0,13,55,6,0.00000,1,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,243,"        throw new MaxIterationsExceededException(maximalIterationCount);
",2,0,0,1,2,0,0,2,0,4,64,5,0.00000,1,-1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,97,"        return optimizer.getResult();
",0,0,0,1,2,1,4,0,0,4,29,5,0.00000,1,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,171,"                    out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));
",0,2,1,4,8,0,6,0,0,15,61,10,0.80000,1,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,72,"        return solve(min, max);
",0,0,0,1,2,1,6,0,0,6,23,5,0.00000,1,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,71,300,"                  loop     = false;
",2,0,0,0,0,0,0,0,0,4,17,14,1.00000,1,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,127,"            setResult(yMax, 0);
",0,0,0,1,2,0,4,0,0,4,19,7,0.00000,1,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,50,"    BANDWIDTH(""bandwidth ({0})""),
",2,0,0,3,6,0,0,0,0,3,29,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,51,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),
",2,0,0,4,8,0,0,0,0,3,108,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,52,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),
",2,0,0,3,6,0,0,0,0,3,93,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,53,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),
",2,0,0,1,2,0,0,0,0,3,123,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,54,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),
",2,0,0,1,2,0,0,0,0,3,89,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,55,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),
",2,0,0,2,4,0,0,0,0,3,108,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),
",2,0,0,1,2,0,0,0,0,3,100,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,57,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),
",2,0,0,2,4,0,0,0,0,3,94,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,58,"    CANNOT_CONVERT_OBJECT_TO_FRACTION(""cannot convert given object to a fraction number: {0}""),
",2,0,0,2,4,0,0,0,0,3,91,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),
",2,0,0,3,6,0,0,0,0,3,97,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),
",2,0,0,2,4,0,0,0,0,3,83,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),
",2,0,0,2,4,0,0,0,0,3,86,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),
",2,0,0,2,4,0,0,0,0,3,87,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),
",2,0,0,1,2,0,0,0,0,3,84,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),
",2,0,0,1,2,0,0,0,0,3,131,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,67,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,368,"        checkVectorDimensions(v.getDimension());
",0,0,0,2,4,0,6,0,0,6,40,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,369,"        OpenMapRealVector res = new OpenMapRealVector(this);
",2,0,0,1,2,0,0,4,0,6,52,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,370,"        Iterator iter = res.entries.iterator();
",6,0,0,1,2,0,2,2,0,10,39,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,371,"        while (iter.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,24,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,372,"            iter.advance();
",0,0,0,1,2,0,4,0,0,4,15,7,1.00000,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,373,"            res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));
",0,1,0,5,10,0,20,0,0,21,64,7,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,186,"        if (states[index] == FREE) {
",2,1,1,2,5,0,0,0,0,7,28,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,187,"            return missingEntries;
",2,0,0,0,0,1,0,0,0,2,22,6,0.50000,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,354,"        final int hash  = hashOf(key);
",2,0,0,1,2,1,4,0,0,7,30,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,355,"        int index = hash & mask;
",6,1,0,0,0,0,0,0,0,7,24,5,0.50000,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,356,"        if (containsKey(key, index)) {
",0,0,0,2,5,0,6,0,0,6,30,5,0.50000,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,357,"            return doRemove(index);
",0,0,0,1,2,1,4,0,0,4,23,7,0.50000,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,394,"        keys[index]   = 0;
",0,0,1,1,2,0,0,0,0,5,18,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,395,"        states[index] = REMOVED;
",2,0,1,1,2,0,0,0,0,7,24,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,396,"        final double previous = values[index];
",2,0,1,1,2,1,0,0,0,7,38,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,397,"        values[index] = missingEntries;
",2,0,1,1,2,0,0,0,0,7,31,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,398,"        --size;
",2,0,0,0,0,0,0,0,0,3,7,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,399,"        ++count;
",2,0,0,0,0,0,0,0,0,3,8,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,400,"        return previous;
",2,0,0,0,0,1,0,0,0,2,16,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,63,"        int d = getDimension();
",2,0,0,1,2,0,2,0,0,4,23,5,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,64,"        if (d != n) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,666,"        } else if (entries.containsKey(index)) {
",0,0,0,2,6,0,6,0,0,6,40,6,0.50000,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,667,"            entries.remove(index);
",0,0,0,1,2,0,6,0,0,6,22,8,0.50000,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,210,"        final int hash  = hashOf(key);
",2,0,0,1,2,1,4,0,0,7,30,4,0.33333,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,211,"        int index = hash & mask;
",6,1,0,0,0,0,0,0,0,7,24,5,0.33333,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,212,"        if (containsKey(key, index)) {
",0,0,0,2,5,0,6,0,0,6,30,5,0.33333,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,213,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.33333,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,33,"public class OpenMapRealVector extends AbstractRealVector
",2,0,0,0,0,1,0,2,0,5,57,1,0.33333,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,133,"    public OpenIntToDoubleHashMap(final OpenIntToDoubleHashMap source) {
",4,0,0,1,3,2,0,2,0,8,68,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,134,"        final int length = source.keys.length;
",8,0,0,0,0,1,0,0,0,9,38,4,0.25000,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,135,"        keys = new int[length];
",2,0,1,1,2,0,0,0,0,5,23,4,0.25000,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,239,"                    return x1;
",2,0,0,0,0,1,0,0,0,2,10,9,0.20000,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,187,"                    if (x == x1) {
",4,1,0,1,3,0,0,0,0,5,14,9,0.16667,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,50,43,"        super(DEFAULT_ABSOLUTE_ACCURACY, Method.REGULA_FALSI);
",6,0,0,1,2,0,0,0,0,6,54,4,0.12500,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,50,44,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12500,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,124,"        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);
",4,0,0,1,2,1,12,0,0,16,73,5,0.08333,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,237,"                switch (allowed) {
",2,0,0,1,3,0,0,0,0,2,18,8,0.05000,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,50,195,"        return solve(maxEval, f, min, max, min + 0.5 * (max - min));
",6,3,0,2,4,1,10,0,0,19,60,5,0.04762,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,205,"                switch (allowed) {
",2,0,0,1,3,0,0,0,0,2,18,8,0.04762,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,178,"                switch (method) {
",2,0,0,1,3,0,0,0,0,2,17,8,0.04762,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,171,"            if (f1 * fx < 0) {
",4,2,0,1,3,0,0,0,0,6,18,6,0.04762,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,174,"                x0 = x1;
",4,0,0,0,0,0,0,0,0,5,8,8,0.04762,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,175,"                f0 = f1;
",4,0,0,0,0,0,0,0,0,5,8,8,0.04762,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,176,"                inverted = !inverted;
",4,0,0,0,0,0,0,0,0,6,21,8,0.04762,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,178,"                switch (method) {
",2,0,0,1,3,0,0,0,0,2,17,8,0.04762,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,198,"            x1 = x;
",4,0,0,0,0,0,0,0,0,5,7,6,0.04762,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,199,"            f1 = fx;
",4,0,0,0,0,0,0,0,0,5,8,6,0.04762,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,204,"            if (FastMath.abs(f1) <= ftol) {
",2,1,0,2,5,0,6,0,0,9,31,6,0.04762,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,235,"            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
",6,3,0,2,6,0,14,0,0,23,65,6,0.04762,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,252,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04762,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,68,"        super(absoluteAccuracy);
",2,0,0,1,2,0,0,0,0,2,24,4,0.04167,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,69,"        this.allowed = AllowedSolution.ANY_SIDE;
",6,0,0,0,0,0,0,0,0,7,40,4,0.04167,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,70,"        this.method = method;
",4,0,0,0,0,0,0,0,0,5,21,4,0.04167,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,71,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04167,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,149,"        final double ftol = getFunctionValueAccuracy();
",2,0,0,1,2,1,2,0,0,5,47,4,0.04000,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,150,"        final double atol = getAbsoluteAccuracy();
",2,0,0,1,2,1,2,0,0,5,42,4,0.04000,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,151,"        final double rtol = getRelativeAccuracy();
",2,0,0,1,2,1,2,0,0,5,42,4,0.04000,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,155,"        boolean inverted = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.04000,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,160,"            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
",14,5,0,4,8,1,0,0,0,20,53,6,0.04000,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,161,"            final double fx = computeObjectiveValue(x);
",2,0,0,1,2,1,4,0,0,7,43,6,0.04000,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,166,"            if (fx == 0.0) {
",2,1,0,1,3,0,0,0,0,3,16,6,0.04000,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,50,128,"        return absoluteAccuracy;
",2,0,0,0,0,1,0,0,0,2,24,4,0.03704,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,51,43,"        super(DEFAULT_ABSOLUTE_ACCURACY, Method.REGULA_FALSI);
",6,0,0,1,2,0,0,0,0,6,54,4,0.12500,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,51,44,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12500,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,124,"        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);
",4,0,0,1,2,1,12,0,0,16,73,5,0.08333,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,199,"                switch (allowed) {
",2,0,0,1,3,0,0,0,0,2,18,8,0.04762,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,178,"                switch (method) {
",2,0,0,1,3,0,0,0,0,2,17,8,0.04762,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,171,"            if (f1 * fx < 0) {
",4,2,0,1,3,0,0,0,0,6,18,6,0.04762,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,174,"                x0 = x1;
",4,0,0,0,0,0,0,0,0,5,8,8,0.04762,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,175,"                f0 = f1;
",4,0,0,0,0,0,0,0,0,5,8,8,0.04762,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,176,"                inverted = !inverted;
",4,0,0,0,0,0,0,0,0,6,21,8,0.04762,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,178,"                switch (method) {
",2,0,0,1,3,0,0,0,0,2,17,8,0.04762,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,192,"            x1 = x;
",4,0,0,0,0,0,0,0,0,5,7,6,0.04762,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,193,"            f1 = fx;
",4,0,0,0,0,0,0,0,0,5,8,6,0.04762,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,198,"            if (FastMath.abs(f1) <= ftol) {
",2,1,0,2,5,0,6,0,0,9,31,6,0.04762,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,229,"            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
",6,3,0,2,6,0,14,0,0,23,65,6,0.04762,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,246,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04762,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,195,"        return solve(maxEval, f, min, max, min + 0.5 * (max - min));
",6,3,0,2,4,1,10,0,0,19,60,5,0.04762,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,68,"        super(absoluteAccuracy);
",2,0,0,1,2,0,0,0,0,2,24,4,0.04167,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,69,"        this.allowed = AllowedSolution.ANY_SIDE;
",6,0,0,0,0,0,0,0,0,7,40,4,0.04167,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,70,"        this.method = method;
",4,0,0,0,0,0,0,0,0,5,21,4,0.04167,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,71,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04167,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,149,"        final double ftol = getFunctionValueAccuracy();
",2,0,0,1,2,1,2,0,0,5,47,4,0.04000,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,150,"        final double atol = getAbsoluteAccuracy();
",2,0,0,1,2,1,2,0,0,5,42,4,0.04000,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,151,"        final double rtol = getRelativeAccuracy();
",2,0,0,1,2,1,2,0,0,5,42,4,0.04000,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,155,"        boolean inverted = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.04000,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,160,"            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
",14,5,0,4,8,1,0,0,0,20,53,6,0.04000,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,161,"            final double fx = computeObjectiveValue(x);
",2,0,0,1,2,1,4,0,0,7,43,6,0.04000,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,166,"            if (fx == 0.0) {
",2,1,0,1,3,0,0,0,0,3,16,6,0.04000,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,313,"  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {
",10,0,0,1,3,1,0,8,0,19,69,2,1.00000,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,316,"  double u1u1 = u1.getNormSq();
",2,0,0,1,2,0,4,0,0,6,29,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,317,"  double u2u2 = u2.getNormSq();
",2,0,0,1,2,0,4,0,0,6,29,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,318,"  double v1v1 = v1.getNormSq();
",2,0,0,1,2,0,4,0,0,6,29,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,319,"  double v2v2 = v2.getNormSq();
",2,0,0,1,2,0,4,0,0,6,29,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,320,"  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {
",8,5,0,5,11,0,0,0,0,13,63,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,325,"  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);
",8,1,0,2,4,0,4,2,0,16,50,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,328,"  double u1u2   = u1.dotProduct(u2);
",2,0,0,1,2,0,6,0,0,8,34,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,329,"  double v1v2   = v1.dotProduct(v2);
",2,0,0,1,2,0,6,0,0,8,34,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,330,"  double coeffU = u1u2 / u1u1;
",6,1,0,0,0,0,0,0,0,7,28,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,331,"  double coeffV = v1v2 / u1u1;
",6,1,0,0,0,0,0,0,0,7,28,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,332,"  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));
",14,5,0,3,6,0,4,0,0,23,79,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,333,"  double alpha  = coeffU - beta * coeffV;
",8,2,0,0,0,0,0,0,0,10,39,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,334,"  v2 = new Vector3D(alpha, v1, beta, v2);
",10,0,0,1,2,0,0,2,0,13,39,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,337,"  Vector3D uRef  = u1;
",4,0,0,0,0,0,0,2,0,6,20,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,338,"  Vector3D vRef  = v1;
",4,0,0,0,0,0,0,2,0,6,20,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,339,"  Vector3D v1Su1 = v1.subtract(u1);
",2,0,0,1,2,0,6,2,0,10,33,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,340,"  Vector3D v2Su2 = v2.subtract(u2);
",2,0,0,1,2,0,6,2,0,10,33,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,341,"  Vector3D k     = v1Su1.crossProduct(v2Su2);
",2,0,0,1,2,0,6,2,0,10,43,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,342,"  Vector3D u3    = u1.crossProduct(u2);
",2,0,0,1,2,0,6,2,0,10,37,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,343,"  double c       = k.dotProduct(u3);
",2,0,0,1,2,0,6,0,0,8,34,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,344,"  if (c == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,378,"  c = FastMath.sqrt(c);
",2,0,0,1,2,0,6,0,0,9,21,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,379,"  double inv = 1.0 / (c + c);
",6,2,0,1,2,0,0,0,0,8,27,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,380,"  q1 = inv * k.getX();
",4,1,0,1,2,0,4,0,0,10,20,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,381,"  q2 = inv * k.getY();
",4,1,0,1,2,0,4,0,0,10,20,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,382,"  q3 = inv * k.getZ();
",4,1,0,1,2,0,4,0,0,10,20,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,385,"   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,
",6,3,0,2,5,0,8,2,0,20,53,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,388,"  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());
",2,2,0,3,6,0,10,0,0,15,46,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,152,"        MathUtils.checkNotNull(rhs);
",0,0,0,1,2,0,6,0,0,6,28,5,0.05263,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,319,"        return isNaN;
",2,0,0,0,0,1,0,0,0,2,13,4,0.04348,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,53,2334,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02381,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,53,2331,"        if (o == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.02326,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,53,85,"    private static final long[] FACTORIALS = new long[] {
",2,0,0,2,5,3,0,0,0,5,53,2,0.01587,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,997,"        return new Complex(realPart, imaginaryPart);
",4,0,0,1,2,1,0,2,0,6,44,5,0.01449,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2119,"            buffer[--q] = '-';
",2,0,1,1,2,0,0,0,0,7,18,6,0.08333,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1041,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.07143,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1234,"            a.exp = b.exp;
",8,0,0,0,0,0,0,0,0,9,14,6,0.05556,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2328,"            exponent--;
",2,0,0,0,0,0,0,0,0,3,11,6,0.05556,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,576,"        return new Dfp(getField(), x);
",2,0,0,2,4,1,2,2,0,6,30,5,0.05263,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,801,"        return nans == INFINITE;
",4,1,0,0,0,1,0,0,0,5,24,4,0.05263,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1105,"        return exp * 4 - 4;
",2,2,0,0,0,1,0,0,0,4,19,4,0.05263,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2305,"        if (isInfinite()) {
",0,0,0,2,5,0,2,0,0,2,19,5,0.05263,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2313,"        if (isNaN()) {
",0,0,0,2,5,0,2,0,0,2,14,5,0.05263,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2317,"        Dfp y = this;
",2,0,0,0,0,0,0,2,0,4,13,4,0.05263,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2318,"        boolean negate = false;
",2,0,0,0,0,0,0,0,0,3,23,5,0.05263,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2319,"        if (lessThan(getZero())) {
",0,0,0,3,7,0,4,0,0,4,26,5,0.05263,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2326,"        int exponent = (int)(y.log10() * 3.32);
",2,1,0,3,6,0,4,0,0,7,39,5,0.05263,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2327,"        if (exponent < 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.05263,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2331,"        Dfp tempDfp = DfpMath.pow(getTwo(), exponent);
",2,0,0,2,4,0,8,2,0,12,46,4,0.05263,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2332,"        while (tempDfp.lessThan(y) || tempDfp.equals(y)) {
",0,1,0,3,7,0,12,0,0,13,50,4,0.05263,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2336,"        exponent--;
",2,0,0,0,0,0,0,0,0,3,11,4,0.05263,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2340,"        y = y.divide(DfpMath.pow(getTwo(), exponent));
",2,0,0,3,6,0,12,0,0,15,46,4,0.05263,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2341,"        if (exponent > -1023) {
",2,1,0,1,3,0,0,0,0,4,23,4,0.05263,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2342,"            y = y.subtract(getOne());
",2,0,0,2,4,0,6,0,0,9,25,6,0.05263,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2345,"        if (exponent < -1074) {
",2,1,0,1,3,0,0,0,0,4,23,4,0.05263,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2349,"        if (exponent > 1023) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.05263,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2354,"        y = y.multiply(newInstance(4503599627370496l)).rint();
",2,0,0,3,6,0,8,0,0,11,54,4,0.05263,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2355,"        String str = y.toString();
",2,0,0,1,2,0,4,2,0,8,26,4,0.05263,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2356,"        str = str.substring(0, str.length()-1);
",2,1,0,2,4,0,8,0,0,12,39,4,0.05263,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2357,"        long mantissa = Long.parseLong(str);
",2,0,0,1,2,0,6,0,0,8,36,5,0.05263,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2359,"        if (mantissa == 4503599627370496L) {
",2,1,0,1,3,0,0,0,0,3,36,4,0.05263,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2366,"        if (exponent <= -1023) {
",2,1,0,1,3,0,0,0,0,4,24,4,0.05263,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,473,"      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
",48,9,0,1,2,1,0,2,0,59,101,5,0.33333,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,181,"    return x;
",2,0,0,0,0,1,0,0,0,2,9,4,0.02564,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,189,"    return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.02564,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,197,"    return z;
",2,0,0,0,0,1,0,0,0,2,9,4,0.02564,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,93,"  public Vector3D(double x, double y, double z) {
",8,0,0,1,3,1,0,0,0,9,47,2,0.01266,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,94,"    this.x = x;
",4,0,0,0,0,0,0,0,0,5,11,4,0.01266,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,95,"    this.y = y;
",4,0,0,0,0,0,0,0,0,5,11,4,0.01266,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,96,"    this.z = z;
",4,0,0,0,0,0,0,0,0,5,11,4,0.01266,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,97,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01266,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,35,"  public static final Vector3D ZERO   = new Vector3D(0, 0, 0);
",2,0,0,1,2,3,0,4,0,9,60,2,0.01266,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,38,"  public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);
",2,0,0,1,2,3,0,4,0,9,60,2,0.01266,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,41,"  public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);
",2,0,0,1,2,3,0,4,0,10,62,2,0.01266,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,44,"  public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);
",2,0,0,1,2,3,0,4,0,9,60,2,0.01266,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,47,"  public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);
",2,0,0,1,2,3,0,4,0,10,62,2,0.01266,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,50,"  public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);
",2,0,0,1,2,3,0,4,0,9,60,2,0.01266,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,53,"  public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);
",2,0,0,1,2,3,0,4,0,10,62,2,0.01266,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,57,"  public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);
",14,0,0,1,2,3,0,4,0,21,84,2,0.01266,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,61,"  public static final Vector3D POSITIVE_INFINITY =
",2,0,0,0,0,3,0,2,0,7,48,2,0.01266,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,65,"  public static final Vector3D NEGATIVE_INFINITY =
",2,0,0,0,0,3,0,2,0,7,48,2,0.01266,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,69,"  private static final Vector3DFormat DEFAULT_FORMAT =
",2,0,0,0,0,3,0,2,0,7,52,2,0.01266,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,85,"        Iterator() {
",2,0,0,1,3,0,0,0,0,2,12,3,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,75,"        private final int[] counter = new int[dimension];
",2,0,1,2,4,2,0,0,0,6,49,3,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,79,"        private int count = -1;
",2,0,0,0,0,1,0,0,0,4,23,3,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,86,"            counter[last] = -1;
",0,0,1,1,2,0,0,0,0,6,19,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,87,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,147,"            return counter[dim];
",0,0,1,1,2,1,0,0,0,4,20,6,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,196,"        return new Iterator();
",0,0,0,1,2,1,0,2,0,2,22,6,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,205,"        return dimension;
",2,0,0,0,0,1,0,0,0,2,17,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,217,"        if (index < 0 ||
",2,2,0,0,1,0,0,0,0,4,16,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,272,"        return count + c[last];
",2,1,1,1,2,1,0,0,0,7,23,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,46,"public class MultidimensionalCounter implements Iterable<Integer> {
",2,0,0,0,1,1,0,4,0,7,67,1,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,260,"        if (c.length != dimension) {
",6,1,0,1,3,0,0,0,0,7,28,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,263,"        int count = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.50000,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,264,"        for (int i = 0; i < dimension; i++) {
",8,1,0,1,3,0,0,0,0,10,37,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,265,"            final int index = c[i];
",2,0,1,1,2,1,0,0,0,7,23,6,0.50000,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,266,"            if (index < 0 ||
",2,2,0,0,1,0,0,0,0,4,16,6,0.50000,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,270,"            count += uniCounterOffset[i] * c[i];
",2,1,1,2,4,0,0,0,0,12,36,6,0.50000,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,56,44,"public final class MathUtils {
",2,0,0,0,1,2,0,0,0,4,30,1,0.25000,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,56,89,"    private static final long[] FACTORIALS = new long[] {
",2,0,0,2,5,3,0,0,0,5,53,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,56,2220,"         return copyOf(source, source.length);
",4,0,0,1,2,1,4,0,0,8,37,5,0.25000,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,56,2243,"         final int[] output = new int[len];
",2,0,1,2,4,1,0,0,0,5,34,4,0.25000,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,56,2244,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));
",4,0,0,2,4,0,14,0,0,18,73,5,0.25000,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,56,2245,"         return output;
",2,0,0,0,0,1,0,0,0,2,14,4,0.25000,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,165,"    public MultidimensionalCounter(int ... size) {
",4,0,0,1,3,1,0,0,0,5,46,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,166,"        dimension = size.length;
",6,0,0,0,0,0,0,0,0,7,24,4,0.25000,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,69,"        this(random, EmptyClusterStrategy.LARGEST_VARIANCE);
",6,0,0,1,2,0,0,0,0,6,52,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,70,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,134,"        return clusters;
",2,0,0,0,0,1,0,0,0,2,16,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,176,"            for (int i = 0; i < pointSet.size(); i++) {
",6,1,0,2,5,0,4,0,0,12,43,6,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,177,"                final T p = pointSet.get(i);
",2,0,0,1,2,1,6,2,0,11,28,8,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,178,"                final Cluster<T> nearest = getNearestCluster(resultSet, p);
",2,0,0,1,2,1,6,4,0,13,59,8,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,179,"                final double d = p.distanceFrom(nearest.getCenter());
",2,0,0,2,4,1,8,0,0,11,53,8,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,180,"                sum += d * d;
",6,1,0,0,0,0,0,0,0,8,13,8,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,181,"                dx2[i] = sum;
",2,0,1,1,2,0,0,0,0,7,13,8,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,186,"            final double r = random.nextDouble() * sum;
",4,1,0,1,2,1,4,0,0,10,43,6,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,187,"            for (int i = 0 ; i < dx2.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,188,"                if (dx2[i] >= r) {
",2,1,1,2,5,0,0,0,0,7,18,8,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,189,"                    final T p = pointSet.remove(i);
",2,0,0,1,2,1,6,2,0,11,31,10,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,190,"                    resultSet.add(new Cluster<T>(p));
",2,0,0,2,4,0,4,4,0,10,33,11,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,191,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,194,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,57,44,"public final class MathUtils {
",2,0,0,0,1,2,0,0,0,4,30,1,0.33333,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,57,89,"    private static final long[] FACTORIALS = new long[] {
",2,0,0,2,5,3,0,0,0,5,53,2,0.33333,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,57,1873,"      double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.33333,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,57,1874,"      for (int i = 0; i < p1.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,4,0.33333,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,57,1875,"          final double dp = p1[i] - p2[i];
",2,1,1,2,4,1,0,0,0,12,32,6,0.33333,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,57,1876,"          sum += dp * dp;
",6,1,0,0,0,0,0,0,0,8,15,6,0.33333,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,57,1878,"      return FastMath.sqrt(sum);
",0,0,0,1,2,1,6,0,0,6,26,5,0.33333,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,55,"    private static final double EXP_INT_TABLE_A[] = new double[1500];
",2,0,0,2,4,3,0,0,0,5,65,2,0.33333,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,60,"    private static final double EXP_INT_TABLE_B[] = new double[1500];
",2,0,0,2,4,3,0,0,0,5,65,2,0.33333,0,-1
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,182,"            } catch (OutOfRangeException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.50000,0,-1
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,183,"                fwhmApprox = points[points.length - 1].getX() - points[0].getX();
",6,2,1,4,8,0,4,0,0,17,65,8,0.50000,0,-1
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,271,"            double minY = Double.POSITIVE_INFINITY;
",6,0,0,0,0,0,0,0,0,6,39,6,0.50000,0,-1
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,272,"            double maxY = Double.NEGATIVE_INFINITY;
",6,0,0,0,0,0,0,0,0,6,39,6,0.50000,0,-1
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,273,"            for (final WeightedObservedPoint point : points) {
",4,0,0,1,3,1,0,2,0,7,50,5,0.50000,0,-1
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,274,"                minY = Math.min(minY, point.getY());
",2,0,0,2,4,0,10,0,0,13,36,7,0.50000,0,-1
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,275,"                maxY = Math.max(maxY, point.getY());
",2,0,0,2,4,0,10,0,0,13,36,7,0.50000,0,-1
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,277,"            throw new OutOfRangeException(y, minY, maxY);
",6,0,0,1,2,0,0,2,0,8,45,6,0.50000,0,-1
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,52,"        this(null, wrong, min, boundIsAllowed);
",6,0,0,1,2,0,0,0,0,6,39,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,53,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0,-1
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,67,"        super(specific,
",2,0,0,0,1,0,0,0,0,2,15,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,73,"        this.min = min;
",4,0,0,0,0,0,0,0,0,5,15,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,74,"        this.boundIsAllowed = boundIsAllowed;
",4,0,0,0,0,0,0,0,0,5,37,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,75,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0,-1
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,46,"        this(null, wrong, lo, hi);
",6,0,0,1,2,0,0,0,0,6,26,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0,-1
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,62,"        super(specific, LocalizedFormats.OUT_OF_RANGE_SIMPLE,
",6,0,0,0,1,0,0,0,0,6,53,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,64,"        this.lo = lo;
",4,0,0,0,0,0,0,0,0,5,13,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,65,"        this.hi = hi;
",4,0,0,0,0,0,0,0,0,5,13,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,66,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,58,44,"        super(null, specific, general, args);
",6,0,0,1,2,0,0,0,0,7,37,3,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,58,45,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,65,"        super(cause);
",2,0,0,1,2,0,0,0,0,2,13,4,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,66,"        this.specific = specific;
",4,0,0,0,0,0,0,0,0,5,25,4,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,67,"        this.general = general;
",4,0,0,0,0,0,0,0,0,5,23,4,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,68,"        this.arguments = ArgUtils.flatten(arguments);
",2,0,0,1,2,0,6,0,0,9,45,4,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,69,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,58,50,"        super(specific, general, wrong, arguments);
",8,0,0,1,2,0,0,0,0,8,43,4,0.25000,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,174,"        this(decimalDigits, true);
",2,0,0,1,2,0,0,0,0,3,26,4,0.03571,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,175,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03571,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,188,"    private DfpField(final int decimalDigits, final boolean computeConstants) {
",6,0,0,1,3,3,0,0,0,9,75,2,0.03571,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,190,"        this.radixDigits = (decimalDigits < 13) ? 4 : (decimalDigits + 3) / 4;
",6,3,0,2,4,0,0,0,0,10,70,4,0.03571,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,191,"        this.rMode       = RoundingMode.ROUND_HALF_EVEN;
",6,0,0,0,0,0,0,0,0,7,48,4,0.03571,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,192,"        this.ieeeFlags   = 0;
",2,0,0,0,0,0,0,0,0,3,21,4,0.03571,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,193,"        this.zero        = new Dfp(this, 0);
",2,0,0,1,2,0,0,2,0,5,36,4,0.03571,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,194,"        this.one         = new Dfp(this, 1);
",2,0,0,1,2,0,0,2,0,5,36,4,0.03571,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,195,"        this.two         = new Dfp(this, 2);
",2,0,0,1,2,0,0,2,0,5,36,4,0.03571,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,197,"        if (computeConstants) {
",2,0,0,1,3,0,0,0,0,2,23,4,0.03571,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,199,"            synchronized (DfpField.class) {
",0,0,0,1,3,0,0,2,0,2,31,8,0.03571,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,205,"                computeStringConstants((decimalDigits < 67) ? 200 : (3 * decimalDigits));
",4,2,0,3,6,0,2,0,0,8,73,9,0.03571,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,208,"                sqr2           = new Dfp(this, sqr2String);
",4,0,0,1,2,0,0,2,0,7,43,8,0.03571,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,209,"                sqr2Split      = split(sqr2String);
",2,0,0,1,2,0,4,0,0,7,35,8,0.03571,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,210,"                sqr2Reciprocal = new Dfp(this, sqr2ReciprocalString);
",4,0,0,1,2,0,0,2,0,7,53,8,0.03571,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,211,"                sqr3           = new Dfp(this, sqr3String);
",4,0,0,1,2,0,0,2,0,7,43,8,0.03571,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,212,"                sqr3Reciprocal = new Dfp(this, sqr3ReciprocalString);
",4,0,0,1,2,0,0,2,0,7,53,8,0.03571,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,213,"                pi             = new Dfp(this, piString);
",4,0,0,1,2,0,0,2,0,7,41,8,0.03571,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,214,"                piSplit        = split(piString);
",2,0,0,1,2,0,4,0,0,7,33,8,0.03571,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,215,"                e              = new Dfp(this, eString);
",4,0,0,1,2,0,0,2,0,7,40,8,0.03571,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,216,"                eSplit         = split(eString);
",2,0,0,1,2,0,4,0,0,7,32,8,0.03571,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,217,"                ln2            = new Dfp(this, ln2String);
",4,0,0,1,2,0,0,2,0,7,42,8,0.03571,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,218,"                ln2Split       = split(ln2String);
",2,0,0,1,2,0,4,0,0,7,34,8,0.03571,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,219,"                ln5            = new Dfp(this, ln5String);
",4,0,0,1,2,0,0,2,0,7,42,8,0.03571,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,220,"                ln5Split       = split(ln5String);
",2,0,0,1,2,0,4,0,0,7,34,8,0.03571,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,221,"                ln10           = new Dfp(this, ln10String);
",4,0,0,1,2,0,0,2,0,7,43,8,0.03571,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,223,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03571,0,-1
