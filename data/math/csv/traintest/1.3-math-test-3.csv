dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,predict
defect4j,math,org/apache/commons/math/complex/Complex,46,297,"            return isZero ? NaN : INF;
",6,0,0,0,0,1,0,0,0,6,26,7,0.00000,1,0
defect4j,math,org/apache/commons/math/complex/Complex,47,105,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02174,1,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,189,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.16667,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,383,"        Iterator iter = res.entries.iterator();
",6,0,0,1,2,0,2,2,0,10,39,4,0.00000,1,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,359,"      if (c == 0) {
",2,1,0,1,3,0,0,0,0,3,13,8,0.00000,1,0
defect4j,math,org/apache/commons/math/complex/Complex,53,153,"        return createComplex(real + rhs.getReal(),
",2,1,0,1,3,1,6,0,0,9,42,5,0.05263,1,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,273,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,1,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,243,"        indices[last] = idx;
",2,0,1,1,2,0,0,0,0,7,20,4,0.00000,1,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,175,"            int sum = 0;
",2,0,0,0,0,0,0,0,0,2,12,7,0.50000,1,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,282,"        this.numerator   = num;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,283,"        this.denominator = den;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,284,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,42,"    public static final Fraction TWO = new Fraction(2, 1);
",2,0,0,1,2,3,0,4,0,9,54,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,45,"    public static final Fraction ONE = new Fraction(1, 1);
",2,0,0,1,2,3,0,4,0,9,54,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,48,"    public static final Fraction ZERO = new Fraction(0, 1);
",2,0,0,1,2,3,0,4,0,9,55,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,51,"    public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);
",2,0,0,1,2,3,0,4,0,9,62,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,54,"    public static final Fraction ONE_FIFTH = new Fraction(1, 5);
",2,0,0,1,2,3,0,4,0,9,60,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,57,"    public static final Fraction ONE_HALF = new Fraction(1, 2);
",2,0,0,1,2,3,0,4,0,9,59,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,60,"    public static final Fraction ONE_QUARTER = new Fraction(1, 4);
",2,0,0,1,2,3,0,4,0,9,62,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,63,"    public static final Fraction ONE_THIRD = new Fraction(1, 3);
",2,0,0,1,2,3,0,4,0,9,60,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,66,"    public static final Fraction THREE_FIFTHS = new Fraction(3, 5);
",2,0,0,1,2,3,0,4,0,9,63,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,69,"    public static final Fraction THREE_QUARTERS = new Fraction(3, 4);
",2,0,0,1,2,3,0,4,0,9,65,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,72,"    public static final Fraction TWO_FIFTHS = new Fraction(2, 5);
",2,0,0,1,2,3,0,4,0,9,61,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,138,"                Integer minRow = null;
",2,0,0,0,0,0,0,2,0,4,22,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,139,"                int minIndex = tableau.getWidth();
",2,0,0,1,2,0,4,0,0,6,34,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,140,"                for (Integer row : minRatioPositions) {
",4,0,0,1,3,0,0,2,0,6,39,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,141,"                    int i = tableau.getNumObjectiveFunctions();
",2,0,0,1,2,0,4,0,0,6,43,10,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,142,"                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {
",8,4,0,2,5,0,4,0,0,17,58,9,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,143,"                        if (row == tableau.getBasicRow(i)) {
",2,1,0,2,5,0,6,0,0,9,36,11,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,144,"                            if (i < minIndex) {
",4,1,0,1,3,0,0,0,0,5,19,13,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,145,"                                minIndex = i;
",4,0,0,0,0,0,0,0,0,5,13,15,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,146,"                                minRow = row;
",4,0,0,0,0,0,0,0,0,5,13,15,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,150,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,151,"                return minRow;
",2,0,0,0,0,1,0,0,0,2,14,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,45,"                                     Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,0.25000,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,46,"        context = new ExceptionContext(this);
",2,0,0,1,2,0,0,2,0,5,37,4,0.25000,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,47,"        context.addMessage(pattern, args);
",0,0,0,1,2,0,8,0,0,8,34,5,0.25000,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.25000,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,127,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,121,"                        int column = i + tableau.getArtificialVariableOffset();
",4,1,0,1,2,0,4,0,0,9,55,12,0.12500,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,122,"                        final double entry = tableau.getEntry(row, column);
",2,0,0,1,2,1,8,0,0,11,51,11,0.12500,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,123,"                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {
",0,1,0,4,9,0,18,0,0,19,86,11,0.12500,0,1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,124,"                            return row;
",2,0,0,0,0,1,0,0,0,2,11,13,0.12500,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,104,"                    minRatioPositions.add(i);
",0,0,0,1,2,0,6,0,0,6,25,11,0.11111,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,119,"                for (Integer row : minRatioPositions) {
",4,0,0,1,3,0,0,2,0,6,39,7,0.11111,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,120,"                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
",6,1,0,2,5,0,4,0,0,12,63,9,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,117,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,7,0.07692,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,231,"                matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1); // excess
",2,1,0,2,4,0,8,0,0,13,74,10,0.07143,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,227,"            doIteration(tableau);
",0,0,0,1,2,0,4,0,0,4,21,7,0.06667,0,0
defect4j,math,org/apache/commons/math3/util/Precision,28,115,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.06250,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,257,"        if (o == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,260,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,74,"        throws DimensionMismatchException, NoDataException, NullArgumentException {
",6,0,0,0,1,0,0,0,0,6,75,2,0.05556,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,75,"        copyIn(d);
",0,0,0,1,2,0,4,0,0,4,10,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,76,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,262,"        if (data == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,263,"            if (row > 0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,266,"            if (column > 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,269,"            MathUtils.checkNotNull(subMatrix);
",0,0,0,1,2,0,6,0,0,6,34,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,270,"            final int nRows = subMatrix.length;
",6,0,0,0,0,1,0,0,0,7,35,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,271,"            if (nRows == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,275,"            final int nCols = subMatrix[0].length;
",4,0,1,1,2,1,0,0,0,7,38,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,276,"            if (nCols == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,279,"            data = new double[subMatrix.length][nCols];
",6,0,1,2,4,0,0,0,0,9,43,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,280,"            for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,281,"                if (subMatrix[i].length != nCols) {
",4,1,1,2,5,0,0,0,0,9,35,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,284,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);
",4,1,1,3,6,0,8,0,0,19,64,9,0.05556,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,286,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,290,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,526,"        setSubMatrix(in, 0, 0);
",0,0,0,1,2,0,4,0,0,4,23,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,527,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,52,"    protected AbstractRealMatrix() {}
",2,0,0,2,4,1,0,0,0,3,33,2,0.05556,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,209,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,337,"        Set<Integer> columnsToDrop = new TreeSet<Integer>();
",2,0,0,1,2,0,0,8,0,10,52,4,0.05556,0,1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,338,"        columnsToDrop.add(0);
",0,0,0,1,2,0,4,0,0,4,21,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,341,"        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
",6,1,0,3,7,0,4,0,0,12,82,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,342,"            final double entry = tableau.getEntry(0, i);
",2,0,0,1,2,1,6,0,0,9,44,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,343,"            if (Precision.compareTo(entry, 0d, epsilon) > 0) {
",0,1,0,2,5,0,8,0,0,9,50,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,349,"        for (int i = 0; i < getNumArtificialVariables(); i++) {
",6,1,0,2,5,0,2,0,0,10,55,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,350,"            int col = i + getArtificialVariableOffset();
",4,1,0,1,2,0,2,0,0,7,44,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,351,"            if (getBasicRow(col) == null) {
",0,1,0,2,5,0,4,0,0,6,31,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,352,"                columnsToDrop.add(col);
",0,0,0,1,2,0,6,0,0,6,23,9,0.05556,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,356,"        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
",2,2,0,7,14,0,8,0,0,12,83,5,0.05556,0,1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,357,"        for (int i = 1; i < getHeight(); i++) {
",6,1,0,2,5,0,2,0,0,10,39,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,358,"            int col = 0;
",2,0,0,0,0,0,0,0,0,2,12,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,359,"            for (int j = 0; j < getWidth(); j++) {
",6,1,0,2,5,0,2,0,0,10,38,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,360,"                if (!columnsToDrop.contains(j)) {
",0,0,0,2,5,0,6,0,0,7,33,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,361,"                    matrix[i - 1][col++] = tableau.getEntry(i, j);
",4,1,1,3,6,0,8,0,0,17,46,10,0.05556,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,367,"        Integer[] drop = columnsToDrop.toArray(new Integer[columnsToDrop.size()]);
",2,0,0,4,8,0,8,4,0,14,74,4,0.05556,0,1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,368,"        for (int i = drop.length - 1; i >= 0; i--) {
",10,2,0,1,3,0,0,0,0,13,44,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,369,"            columnLabels.remove((int) drop[i]);
",0,0,1,3,6,0,4,0,0,8,35,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,372,"        this.tableau = new Array2DRowRealMatrix(matrix);
",4,0,0,1,2,0,0,2,0,7,48,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,373,"        this.numArtificialVariables = 0;
",2,0,0,0,0,0,0,0,0,3,32,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,374,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,202,"            doIteration(tableau);
",0,0,0,1,2,0,4,0,0,4,21,7,0.05000,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,325,"        return row;
",2,0,0,0,0,1,0,0,0,2,11,4,0.05000,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,486,"        return new ArrayRealVector(getRow(row), false);
",0,0,0,2,4,1,4,2,0,7,47,5,0.04762,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,491,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.04762,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,492,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,493,"        if (vector.getDimension() != nCols) {
",2,1,0,2,5,0,4,0,0,7,37,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,361,"        OpenMapRealVector res = new OpenMapRealVector(this);
",2,0,0,1,2,0,0,4,0,6,52,4,1,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,362,"        Iterator iter = entries.iterator();
",2,0,0,1,2,0,4,2,0,8,35,4,1,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,363,"        while (iter.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,24,5,1,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,364,"            iter.advance();
",0,0,0,1,2,0,4,0,0,4,15,7,1,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,365,"            res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));
",0,1,0,5,10,0,20,0,0,21,64,7,1,0,1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,281,"                j = probe(perturb, j);
",2,0,0,1,2,0,6,0,0,9,22,8,1,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,282,"                index = j & mask;
",6,1,0,0,0,0,0,0,0,8,17,8,1,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,283,"                perturb >>= PERTURB_SHIFT;
",4,0,0,0,0,0,0,0,0,5,26,8,1,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,285,"                if (states[index] != FULL || keys[index] == key) {
",4,3,1,3,7,0,0,0,0,15,50,8,1,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,292,"            return index;
",2,0,0,0,0,1,0,0,0,2,13,6,1,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,360,"        checkVectorDimensions(v.getDimension());
",0,0,0,2,4,0,6,0,0,6,40,5,1,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,277,"        int perturb = perturb(hash);
",2,0,0,1,2,0,4,0,0,6,28,5,1,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,278,"        int j = index;
",4,0,0,0,0,0,0,0,0,4,14,5,1,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,279,"        if (states[index] == FULL) {
",2,1,1,2,5,0,0,0,0,7,28,4,1,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,291,"        if (states[index] == FREE) {
",2,1,1,2,5,0,0,0,0,7,28,4,1,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,247,"        return hash & 0x7fffffff;
",2,1,0,0,0,1,0,0,0,3,25,4,1.00000,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,323,"        return (j << 2) + j + perturb + 1;
",6,2,0,1,2,1,0,0,0,8,34,4,1.00000,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,351,"        final int hash  = hashOf(key);
",2,0,0,1,2,1,4,0,0,7,30,4,1.00000,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,352,"        int index = hash & mask;
",6,1,0,0,0,0,0,0,0,7,24,5,1.00000,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,353,"        if (containsKey(key, index)) {
",0,0,0,2,5,0,6,0,0,6,30,5,1.00000,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,354,"            return doRemove(index);
",0,0,0,1,2,1,4,0,0,4,23,7,1.00000,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,391,"        keys[index]   = 0;
",0,0,1,1,2,0,0,0,0,5,18,4,1.00000,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,392,"        states[index] = REMOVED;
",2,0,1,1,2,0,0,0,0,7,24,4,1.00000,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,393,"        final double previous = values[index];
",2,0,1,1,2,1,0,0,0,7,38,4,1.00000,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,394,"        values[index] = missingEntries;
",2,0,1,1,2,0,0,0,0,7,31,4,1.00000,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,395,"        --size;
",2,0,0,0,0,0,0,0,0,3,7,4,1.00000,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,396,"        ++count;
",2,0,0,0,0,0,0,0,0,3,8,4,1.00000,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,397,"        return previous;
",2,0,0,0,0,1,0,0,0,2,16,4,1.00000,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,592,"            entries.remove(index);
",0,0,0,1,2,0,6,0,0,6,22,8,1.00000,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,210,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.90000,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,421,"                growTable();
",0,0,0,1,2,0,2,0,0,2,12,9,0.81818,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,434,"        final int oldLength      = states.length;
",6,0,0,0,0,1,0,0,0,7,41,4,0.81818,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,435,"        final int[] oldKeys      = keys;
",4,0,0,1,2,1,0,0,0,5,32,4,0.81818,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,436,"        final double[] oldValues = values;
",4,0,0,1,2,1,0,0,0,5,34,4,0.81818,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,437,"        final byte[] oldStates   = states;
",4,0,0,1,2,1,0,0,0,5,34,4,0.81818,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,439,"        final int newLength = RESIZE_MULTIPLIER * oldLength;
",6,1,0,0,0,1,0,0,0,8,52,4,0.81818,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,440,"        final int[] newKeys = new int[newLength];
",2,0,1,2,4,1,0,0,0,5,41,4,0.81818,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,441,"        final double[] newValues = new double[newLength];
",2,0,1,2,4,1,0,0,0,5,49,4,0.81818,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,442,"        final byte[] newStates = new byte[newLength];
",2,0,1,2,4,1,0,0,0,5,45,4,0.81818,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,443,"        final int newMask = newLength - 1;
",4,1,0,0,0,1,0,0,0,6,34,4,0.81818,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,444,"        for (int i = 0; i < oldLength; ++i) {
",8,1,0,1,3,0,0,0,0,10,37,4,0.81818,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,445,"            if (oldStates[i] == FULL) {
",2,1,1,2,5,0,0,0,0,7,27,6,0.81818,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,446,"                final int key = oldKeys[i];
",2,0,1,1,2,1,0,0,0,7,27,8,0.81818,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,45,"    private static final double[] LANCZOS = {
",2,0,0,1,3,3,0,0,0,5,41,2,1.00000,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,63,"    private static final double HALF_LOG_2_PI = 0.5 * FastMath.log(2.0 * FastMath.PI);
",6,2,0,1,2,3,4,0,0,15,82,2,1.00000,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,154,"        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {
",4,3,0,5,11,0,12,0,0,19,68,4,1.00000,0,1
defect4j,math,org/apache/commons/math3/special/Gamma,30,186,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,1.00000,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,67,"        if (FastMath.abs(x) > 40) {
",0,1,0,2,5,0,6,0,0,7,27,4,1.00000,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,70,"        final double ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);
",6,1,0,1,2,1,4,0,0,12,71,4,1.00000,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,71,"        return x < 0 ? -ret : ret;
",6,1,0,0,0,1,0,0,0,8,26,5,1.00000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,375,"        return Math.sqrt(a);
",0,0,0,1,2,1,6,0,0,6,20,5,1.00000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3020,"        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0
",8,2,0,2,4,1,0,0,0,11,61,5,1.00000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3535,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,1.00000,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,82,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,90,"        final double[] z = new double[x.length + y.length];
",10,1,0,2,4,1,0,0,0,12,51,4,1.00000,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,92,"        System.arraycopy(x, 0, z, 0, x.length);
",4,0,0,1,2,0,8,0,0,12,39,5,1.00000,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,93,"        System.arraycopy(y, 0, z, x.length, y.length);
",8,0,0,1,2,0,8,0,0,16,46,5,1.00000,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,95,"        return z;
",2,0,0,0,0,1,0,0,0,2,9,4,1.00000,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,129,"        ensureDataConformance(x, y);
",0,0,0,1,2,0,6,0,0,6,28,5,1.00000,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,131,"        final double[] z = concatenateSamples(x, y);
",2,0,0,2,4,1,6,0,0,9,44,4,1.00000,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,132,"        final double[] ranks = naturalRanking.rank(z);
",2,0,0,2,4,1,6,0,0,9,46,4,1.00000,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,134,"        double sumRankX = 0;
",2,0,0,0,0,0,0,0,0,2,20,5,1.00000,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,140,"        for (int i = 0; i < x.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,36,4,1.00000,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,141,"            sumRankX += ranks[i];
",2,0,1,1,2,0,0,0,0,7,21,6,1.00000,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,148,"        final double U1 = sumRankX - (x.length * (x.length + 1)) / 2;
",12,4,0,2,4,1,0,0,0,17,61,4,1.00000,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,153,"        final double U2 = x.length * y.length - U1;
",12,2,0,0,0,1,0,0,0,15,43,4,1.00000,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,155,"        return FastMath.max(U1, U2);
",0,0,0,1,2,1,8,0,0,8,28,5,1.00000,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,176,"        final double EU = n1n2prod / 2.0;
",4,1,0,0,0,1,0,0,0,6,33,4,1.00000,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,177,"        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
",8,3,0,1,2,1,0,0,0,12,52,4,1.00000,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,179,"        final double z = (Umin - EU) / FastMath.sqrt(VarU);
",6,2,0,2,4,1,6,0,0,15,51,4,1.00000,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,181,"        final NormalDistribution standardNormal = new NormalDistribution(0, 1);
",2,0,0,1,2,1,0,4,0,7,71,4,1.00000,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,183,"        return 2 * standardNormal.cumulativeProbability(z);
",0,1,0,1,2,1,6,0,0,7,51,4,1.00000,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,224,"        final double Umax = mannWhitneyU(x, y);
",2,0,0,1,2,1,6,0,0,9,39,4,1.00000,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,229,"        final double Umin = x.length * y.length - Umax;
",12,2,0,0,0,1,0,0,0,15,47,4,1.00000,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,231,"        return calculateAsymptoticPValue(Umin, x.length, y.length);
",8,0,0,1,2,1,4,0,0,12,59,5,1.00000,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,432,"        public IntDoublePair(double value, int position) {
",6,0,0,1,3,1,0,0,0,7,50,3,1.00000,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,433,"            this.value = value;
",4,0,0,0,0,0,0,0,0,5,19,5,1.00000,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,31,80,"        return context.getMessage();
",0,0,0,1,2,1,4,0,0,4,28,5,1.00000,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,31,86,"        return context.getLocalizedMessage();
",0,0,0,1,2,1,4,0,0,4,37,5,1.00000,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,178,"        return solverAbsoluteAccuracy;
",2,0,0,0,0,1,0,0,0,2,30,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,194,"            return denominatorDF / (denominatorDF - 2);
",4,2,0,1,2,1,0,0,0,6,43,6,0.20000,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,230,"            final double numeratorDF = getNumeratorDegreesOfFreedom();
",2,0,0,1,2,1,2,0,0,5,58,6,0.20000,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,231,"            final double denomDFMinusTwo = denominatorDF - 2;
",4,1,0,0,0,1,0,0,0,6,49,6,0.20000,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,233,"            return ( 2 * (denominatorDF * denominatorDF) * (numeratorDF + denominatorDF - 2) ) /
",8,5,0,3,6,1,0,0,0,13,84,6,0.20000,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,145,"            ret = 0;
",2,0,0,0,0,0,0,0,0,3,8,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,163,"        return numeratorDegreesOfFreedom;
",2,0,0,0,0,1,0,0,0,2,33,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,191,"        final double denominatorDF = getDenominatorDegreesOfFreedom();
",2,0,0,1,2,1,2,0,0,5,62,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,193,"        if (denominatorDF > 2) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,214,"        if (!numericalVarianceIsCalculated) {
",2,0,0,1,3,0,0,0,0,3,37,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,215,"            numericalVariance = calculateNumericalVariance();
",2,0,0,1,2,0,2,0,0,5,49,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,216,"            numericalVarianceIsCalculated = true;
",2,0,0,0,0,0,0,0,0,4,37,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,218,"        return numericalVariance;
",2,0,0,0,0,1,0,0,0,2,25,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,227,"        final double denominatorDF = getDenominatorDegreesOfFreedom();
",2,0,0,1,2,1,2,0,0,5,62,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,229,"        if (denominatorDF > 4) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,248,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,260,"        return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,114,"        return numberOfTrials * probabilityOfSuccess;
",4,1,0,0,0,1,0,0,0,5,45,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,124,"        final double p = probabilityOfSuccess;
",4,0,0,0,0,1,0,0,0,5,38,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,125,"        return numberOfTrials * p * (1 - p);
",6,2,0,1,2,1,0,0,0,8,36,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,137,"        return probabilityOfSuccess < 1.0 ? 0 : numberOfTrials;
",4,1,0,0,0,1,0,0,0,5,55,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,149,"        return probabilityOfSuccess > 0.0 ? numberOfTrials : 0;
",4,1,0,0,0,1,0,0,0,5,55,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,172,"        return denominatorDegreesOfFreedom;
",2,0,0,0,0,1,0,0,0,2,35,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,96,"        if (x < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,98,"        } else if (x >= numberOfTrials) {
",4,1,0,1,4,0,0,0,0,5,33,5,0.14286,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,101,"            ret = 1.0 - Beta.regularizedBeta(probabilityOfSuccess,
",2,1,0,0,1,0,6,0,0,10,54,7,0.14286,0,0
defect4j,math,org/apache/commons/math3/special/Beta,31,129,"            ret = 1.0 - regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);
",4,2,0,1,2,0,10,0,0,17,67,7,0.10256,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,147,"            double n = numeratorDegreesOfFreedom;
",4,0,0,0,0,0,0,0,0,4,37,7,0.10000,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,148,"            double m = denominatorDegreesOfFreedom;
",4,0,0,0,0,0,0,0,0,4,39,7,0.10000,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,150,"            ret = Beta.regularizedBeta((n * x) / (m + n * x),
",12,4,0,2,5,0,4,0,0,21,49,6,0.10000,0,1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,49,"    public BinomialDistribution(int trials, double p) {
",6,0,0,1,3,1,0,0,0,7,51,2,0.10000,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,50,"        if (trials < 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.10000,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,54,"        if (p < 0 || p > 1) {
",4,3,0,1,3,0,0,0,0,7,21,4,0.10000,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,58,"        probabilityOfSuccess = p;
",4,0,0,0,0,0,0,0,0,5,25,4,0.10000,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,59,"        numberOfTrials = trials;
",4,0,0,0,0,0,0,0,0,5,24,4,0.10000,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,60,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.10000,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,144,"        if (x <= 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2480,"            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));
",6,5,1,5,10,1,0,0,0,20,91,6,1.00000,0,1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2482,"            ya = epsA * denom;
",6,1,0,0,0,0,0,0,0,8,18,6,1.00000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2483,"            yb = epsB * denom;
",6,1,0,0,0,0,0,0,0,8,18,6,1.00000,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2484,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,1.00000,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,81,"        this(p1, p2.subtract(p1).crossProduct(p3.subtract(p1)));
",2,0,0,4,8,0,14,0,0,16,56,4,0.50000,0,1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,82,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,204,"                final SubHyperplane.SplitSubHyperplane<S> split = other.split(inserted);
",6,0,0,1,2,1,6,2,0,15,72,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,205,"                plusList.add(split.getPlus());
",0,0,0,2,4,0,8,0,0,8,30,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,206,"                minusList.add(split.getMinus());
",0,0,0,2,4,0,8,0,0,8,32,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,207,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,324,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,406,"        return originOffset + (sameOrientationAs(plane) ? -plane.originOffset : plane.originOffset);
",10,1,0,2,4,1,4,0,0,16,92,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,427,"        return (((Plane) other).w).dotProduct(w) > 0.0;
",4,1,0,4,8,1,4,2,0,11,47,4,0.33333,0,1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,63,"            final double global = otherPlane.getOffset(thisPlane);
",2,0,0,1,2,1,6,0,0,9,54,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,64,"            return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);
",16,2,0,3,6,1,0,0,0,19,88,7,0.33333,0,1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,105,"            final double global = otherPlane.getOffset(thisPlane);
",2,0,0,1,2,1,6,0,0,9,54,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,106,"            return (global < -1.0e-10) ?
",2,1,0,1,2,1,0,0,0,4,28,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,674,"        final double ca1        = SPLIT_FACTOR * a1;
",6,1,0,0,0,1,0,0,0,8,44,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,675,"        final double a1High     = ca1 - (ca1 - a1);
",8,2,0,1,2,1,0,0,0,11,43,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,676,"        final double a1Low      = a1 - a1High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,677,"        final double cb1        = SPLIT_FACTOR * b1;
",6,1,0,0,0,1,0,0,0,8,44,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,678,"        final double b1High     = cb1 - (cb1 - b1);
",8,2,0,1,2,1,0,0,0,11,43,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,679,"        final double b1Low      = b1 - b1High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,682,"        final double prod1High  = a1 * b1;
",6,1,0,0,0,1,0,0,0,8,34,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,683,"        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.20000,0,1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,686,"        final double ca2        = SPLIT_FACTOR * a2;
",6,1,0,0,0,1,0,0,0,8,44,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,687,"        final double a2High     = ca2 - (ca2 - a2);
",8,2,0,1,2,1,0,0,0,11,43,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,688,"        final double a2Low      = a2 - a2High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,689,"        final double cb2        = SPLIT_FACTOR * b2;
",6,1,0,0,0,1,0,0,0,8,44,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,690,"        final double b2High     = cb2 - (cb2 - b2);
",8,2,0,1,2,1,0,0,0,11,43,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,691,"        final double b2Low      = b2 - b2High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,694,"        final double prod2High  = a2 * b2;
",6,1,0,0,0,1,0,0,0,8,34,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,695,"        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.20000,0,1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,698,"        final double s12High    = prod1High + prod2High;
",6,1,0,0,0,1,0,0,0,8,48,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,699,"        final double s12Prime   = s12High - prod2High;
",6,1,0,0,0,1,0,0,0,8,46,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,700,"        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);
",12,4,0,3,6,1,0,0,0,17,86,4,0.20000,0,1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,704,"        double result = s12High + (prod1Low + prod2Low + s12Low);
",10,2,0,1,2,0,0,0,0,12,57,5,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,706,"        if (Double.isNaN(result)) {
",0,0,0,2,5,0,6,0,0,6,27,5,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,712,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,754,"        final double ca1        = SPLIT_FACTOR * a1;
",6,1,0,0,0,1,0,0,0,8,44,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,755,"        final double a1High     = ca1 - (ca1 - a1);
",8,2,0,1,2,1,0,0,0,11,43,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,756,"        final double a1Low      = a1 - a1High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,757,"        final double cb1        = SPLIT_FACTOR * b1;
",6,1,0,0,0,1,0,0,0,8,44,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,758,"        final double b1High     = cb1 - (cb1 - b1);
",8,2,0,1,2,1,0,0,0,11,43,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,759,"        final double b1Low      = b1 - b1High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,762,"        final double prod1High  = a1 * b1;
",6,1,0,0,0,1,0,0,0,8,34,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,763,"        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.20000,0,1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,766,"        final double ca2        = SPLIT_FACTOR * a2;
",6,1,0,0,0,1,0,0,0,8,44,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,767,"        final double a2High     = ca2 - (ca2 - a2);
",8,2,0,1,2,1,0,0,0,11,43,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,768,"        final double a2Low      = a2 - a2High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,769,"        final double cb2        = SPLIT_FACTOR * b2;
",6,1,0,0,0,1,0,0,0,8,44,4,0.20000,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,59,"            return GEQ;
",2,0,0,0,0,1,0,0,0,2,11,5,1.00000,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,406,"            coefficients[i] = 0;
",0,0,1,1,2,0,0,0,0,5,20,8,0.50000,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,407,"            continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.50000,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,261,"            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),
",0,0,0,2,5,1,6,2,0,9,73,7,0.25000,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,339,"                columnsToDrop.add(i);
",0,0,0,1,2,0,6,0,0,6,21,9,0.25000,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,57,"        switch (this) {
",0,0,0,1,3,0,0,0,0,0,15,3,0.25000,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,57,"        switch (this) {
",0,0,0,1,3,0,0,0,0,0,15,3,0.25000,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,226,"                matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1); // excess
",2,1,0,2,4,0,8,0,0,13,74,10,0.08333,0,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,33,67,"        final double[] p = getKey();
",2,0,0,2,4,1,2,0,0,5,28,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,33,68,"        return p == null ? null : p.clone();
",2,1,0,1,2,1,4,0,0,7,36,5,0.06667,0,0
defect4j,math,org/apache/commons/math3/util/Pair,33,63,"        return key;
",2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,162,"        columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);
",0,0,0,1,2,0,6,0,0,6,44,7,0.06667,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,199,"            matrix.setEntry(zIndex, getSlackVariableOffset() - 1,
",0,1,0,1,3,0,8,0,0,9,53,7,0.06667,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,215,"                matrix.setEntry(row, getSlackVariableOffset() - 1,
",0,1,0,1,3,0,8,0,0,9,50,9,0.06667,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,298,"        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.06667,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,299,"        for (double coefficient : coefficients.toArray()) {
",2,0,0,2,5,0,4,0,0,6,51,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,300,"            sum -= coefficient;
",4,0,0,0,0,0,0,0,0,5,19,6,0.06667,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,302,"        return sum;
",2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,347,"            columnsToDrop.add(col);
",0,0,0,1,2,0,6,0,0,6,23,9,0.06250,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,181,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06250,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,224,"                matrix.setEntry(row, getSlackVariableOffset() + slackVar++, 1);  // slack
",2,1,0,2,4,0,8,0,0,12,73,9,0.05882,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,332,"        List<Integer> columnsToDrop = new ArrayList<Integer>();
",2,0,0,1,2,0,0,8,0,10,55,4,0.05882,0,1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,333,"        columnsToDrop.add(0);
",0,0,0,1,2,0,4,0,0,4,21,5,0.05882,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,336,"        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
",6,1,0,3,7,0,4,0,0,12,82,4,0.05882,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,337,"            final double entry = tableau.getEntry(0, i);
",2,0,0,1,2,1,6,0,0,9,44,6,0.05882,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,344,"        for (int i = 0; i < getNumArtificialVariables(); i++) {
",6,1,0,2,5,0,2,0,0,10,55,4,0.05882,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,345,"          int col = i + getArtificialVariableOffset();
",4,1,0,1,2,0,2,0,0,7,44,7,0.05882,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,346,"          if (getBasicRow(col) == null) {
",0,1,0,2,5,0,4,0,0,6,31,6,0.05882,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,351,"        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
",2,2,0,7,14,0,8,0,0,12,83,5,0.05882,0,1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,352,"        for (int i = 1; i < getHeight(); i++) {
",6,1,0,2,5,0,2,0,0,10,39,4,0.05882,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,353,"          int col = 0;
",2,0,0,0,0,0,0,0,0,2,12,7,0.05882,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,354,"          for (int j = 0; j < getWidth(); j++) {
",6,1,0,2,5,0,2,0,0,10,38,6,0.05882,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,355,"            if (!columnsToDrop.contains(j)) {
",0,0,0,2,5,0,6,0,0,7,33,8,0.05882,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,356,"              matrix[i - 1][col++] = tableau.getEntry(i, j);
",4,1,1,3,6,0,8,0,0,17,46,10,0.05882,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,361,"        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
",6,2,0,2,5,0,4,0,0,13,53,4,0.05882,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,362,"          columnLabels.remove((int) columnsToDrop.get(i));
",0,0,0,3,6,0,10,0,0,10,48,7,0.05882,0,1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,365,"        this.tableau = new Array2DRowRealMatrix(matrix);
",4,0,0,1,2,0,0,2,0,7,48,4,0.05882,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,366,"        this.numArtificialVariables = 0;
",2,0,0,0,0,0,0,0,0,3,32,4,0.05882,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,367,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05882,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,33,257,"        if (o == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.05882,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,33,260,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05882,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,74,"        throws DimensionMismatchException, NoDataException, NullArgumentException {
",6,0,0,0,1,0,0,0,0,6,75,2,0.05882,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,75,"        copyIn(d);
",0,0,0,1,2,0,4,0,0,4,10,5,0.05882,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,76,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05882,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,262,"        if (data == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.05882,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,263,"            if (row > 0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.05882,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,266,"            if (column > 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.05882,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,269,"            MathUtils.checkNotNull(subMatrix);
",0,0,0,1,2,0,6,0,0,6,34,7,0.05882,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,270,"            final int nRows = subMatrix.length;
",6,0,0,0,0,1,0,0,0,7,35,6,0.05882,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,271,"            if (nRows == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.05882,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,275,"            final int nCols = subMatrix[0].length;
",4,0,1,1,2,1,0,0,0,7,38,6,0.05882,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,276,"            if (nCols == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.05882,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,279,"            data = new double[subMatrix.length][nCols];
",6,0,1,2,4,0,0,0,0,9,43,6,0.05882,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,280,"            for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.05882,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,281,"                if (subMatrix[i].length != nCols) {
",4,1,1,2,5,0,0,0,0,9,35,8,0.05882,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,284,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);
",4,1,1,3,6,0,8,0,0,19,64,9,0.05882,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,286,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.05882,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,290,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05882,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,526,"        setSubMatrix(in, 0, 0);
",0,0,0,1,2,0,4,0,0,4,23,5,0.05882,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,527,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05882,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,174,"            doIteration(tableau);
",0,0,0,1,2,0,4,0,0,4,21,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,44,"    protected AbstractRealMatrix() {}
",2,0,0,2,4,1,0,0,0,3,33,2,0.05556,0,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,33,41,"        this(point, value, true);
",4,0,0,1,2,0,0,0,0,5,25,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,33,42,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05263,0,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,33,55,"        super(copyArray ? ((point == null) ? null :
",4,1,0,1,4,0,0,0,0,6,43,3,0.05263,0,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,33,59,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/Pair,33,42,"    public Pair(K k, V v) {
",6,0,0,1,3,1,0,4,0,11,23,2,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/Pair,33,43,"        key = k;
",4,0,0,0,0,0,0,0,0,5,8,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/Pair,33,44,"        value = v;
",4,0,0,0,0,0,0,0,0,5,10,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/util/Pair,33,45,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05263,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,317,"                return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.05263,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,320,"        return row;
",2,0,0,0,0,1,0,0,0,2,11,4,0.05263,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,397,"      int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
",2,0,0,1,2,0,6,0,0,8,72,5,0.05263,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,112,"        this.chromosomes.addAll(chromosomeColl);
",2,0,0,1,2,0,4,0,0,6,40,5,1.00000,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,113,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,36,"    private double elitismRate = 0.9;
",2,0,0,0,0,1,0,0,0,3,33,2,1,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,50,"    public ListPopulation(final List<Chromosome> chromosomes, final int populationLimit) {
",6,0,0,1,3,3,0,4,0,13,86,2,0.80000,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,51,"        if (chromosomes.size() > populationLimit) {
",2,1,0,2,5,0,4,0,0,7,43,4,0.80000,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,55,"        if (populationLimit <= 0) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.80000,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,59,"        this.chromosomes = chromosomes;
",4,0,0,0,0,0,0,0,0,5,31,4,0.80000,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,60,"        this.populationLimit = populationLimit;
",4,0,0,0,0,0,0,0,0,5,39,4,0.80000,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,732,"        float result = numerator.floatValue() / denominator.floatValue();
",2,1,0,2,4,0,8,0,0,11,65,5,0.50000,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,244,"        if (o == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.05405,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,247,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,119,"    public BigFraction(BigInteger num, BigInteger den) {
",6,0,0,1,3,1,0,4,0,11,52,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,120,"        MathUtils.checkNotNull(num, LocalizedFormats.NUMERATOR);
",4,0,0,1,2,0,6,0,0,10,56,5,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,121,"        MathUtils.checkNotNull(den, LocalizedFormats.DENOMINATOR);
",4,0,0,1,2,0,6,0,0,10,58,5,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,122,"        if (BigInteger.ZERO.equals(den)) {
",4,0,0,2,5,0,4,0,0,8,34,5,0.05405,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,393,"          return exp(x)/2.0;
",0,1,0,1,2,1,4,0,0,5,18,6,1,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,453,"          return exp(x)/2.0;
",0,1,0,1,2,1,4,0,0,5,18,6,1,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1178,"        if (Double.isNaN(realPart) ||
",0,1,0,1,3,0,6,0,0,7,29,4,1,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1182,"        return new Complex(realPart, imaginaryPart);
",4,0,0,1,2,1,0,2,0,6,44,5,1,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,867,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,1,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,871,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,1,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,383,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,1,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,392,"      if (x > 20.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,1,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,442,"      boolean negate = false;
",2,0,0,0,0,0,0,0,0,3,23,5,1,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,443,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,1,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,452,"      if (x > 20.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,1,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1022,"        double real2 = 2.0 * real;
",4,1,0,0,0,0,0,0,0,5,26,5,1,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1023,"        double imaginary2 = 2.0 * imaginary;
",4,1,0,0,0,0,0,0,0,5,36,5,1,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1024,"        double d = FastMath.cos(real2) + FastMath.cosh(imaginary2);
",2,1,0,2,4,0,12,0,0,15,59,5,1,0,1
defect4j,math,org/apache/commons/math/complex/Complex,37,1026,"        return createComplex(FastMath.sin(real2) / d,
",2,1,0,1,3,1,8,0,0,11,45,5,1,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1066,"        double real2 = 2.0 * real;
",4,1,0,0,0,0,0,0,0,5,26,5,1,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1067,"        double imaginary2 = 2.0 * imaginary;
",4,1,0,0,0,0,0,0,0,5,36,5,1,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1068,"        double d = FastMath.cosh(real2) + FastMath.cos(imaginary2);
",2,1,0,2,4,0,12,0,0,15,59,5,1,0,1
defect4j,math,org/apache/commons/math/complex/Complex,37,1070,"        return createComplex(FastMath.sinh(real2) / d,
",2,1,0,1,3,1,8,0,0,11,46,5,1,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,807,"        return exp(x, 0.0, null);
",0,0,0,1,2,1,4,0,0,5,25,4,1,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,464,"      if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,1.00000,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,471,"      if (x > 0.25) {
",2,1,0,1,3,0,0,0,0,3,15,4,1.00000,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2413,"            initialTrustRegionRadius = minDiff / 3.0;
",4,1,0,0,0,0,0,0,0,6,41,6,0.50000,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,126,"            lowerBound = lower.clone();
",2,0,0,1,2,0,4,0,0,7,27,6,0.50000,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,134,"            upperBound = upper.clone();
",2,0,0,1,2,0,4,0,0,7,27,6,0.50000,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,98,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,99,"                final double v = startPoint[i];
",2,0,1,1,2,1,0,0,0,7,31,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,100,"                final double lo = lower[i];
",2,0,1,1,2,1,0,0,0,7,27,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,101,"                if (v < lo) {
",4,1,0,1,3,0,0,0,0,5,13,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,107,"            if (upper.length != dim) {
",6,1,0,1,3,0,0,0,0,7,26,6,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,110,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,111,"                final double v = startPoint[i];
",2,0,1,1,2,1,0,0,0,7,31,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,112,"                final double hi = upper[i];
",2,0,1,1,2,1,0,0,0,7,27,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,113,"                if (v > hi) {
",4,1,0,1,3,0,0,0,0,5,13,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,95,"            if (lower.length != dim) {
",6,1,0,1,3,0,0,0,0,7,26,6,0.25000,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,44,"    public RealPointValuePair(final double[] point, final double value) {
",6,0,0,2,5,3,0,0,0,9,69,2,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,45,"        this.point = (point == null) ? null : point.clone();
",4,1,0,2,4,0,4,0,0,10,52,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,46,"        this.value = value;
",4,0,0,0,0,0,0,0,0,5,19,4,0.08333,0,0
