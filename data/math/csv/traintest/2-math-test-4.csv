dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,predict
defect4j,math,org/apache/commons/math/complex/Complex,53,153,"        return createComplex(real + rhs.getReal(),
",2,1,0,1,3,1,6,0,0,9,42,5,0.05263,1,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,273,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,1,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,243,"        indices[last] = idx;
",2,0,1,1,2,0,0,0,0,7,20,4,0.00000,1,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,175,"            int sum = 0;
",2,0,0,0,0,0,0,0,0,2,12,7,0.50000,1,-1
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,121,"        return fit(new Gaussian.Parametric(), guess);
",4,0,0,2,4,1,4,0,0,8,45,5,0.20000,1,-1
defect4j,math,org/apache/commons/math/util/FastMath,59,3482,"        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);
",16,2,0,3,6,1,4,0,0,22,59,5,0.00000,1,-1
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,94,"            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN, p);
",4,0,0,1,2,0,6,0,0,10,105,7,0.00000,1,-1
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,162,"                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));
",0,0,1,4,8,0,24,0,0,29,100,8,1.00000,1,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1721,"                            fAtInterpolationPoints.setEntry(nfm - n, f);
",4,1,0,1,2,0,6,0,0,11,44,16,0.08333,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1722,"                            if (trustRegionCenterInterpolationPointIndex == nfm) {
",4,1,0,1,3,0,0,0,0,5,54,15,0.08333,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1725,"                            interpolationPoints.setEntry(nfm - n, nfxm, stepb);
",4,1,0,1,2,0,8,0,0,13,51,16,0.08333,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1726,"                            interpolationPoints.setEntry(nfm, nfxm, stepa);
",0,0,0,1,2,0,10,0,0,10,47,16,0.08333,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1729,"                    bMatrix.setEntry(0, nfxm, -(stepa + stepb) / (stepa * stepb));
",8,3,0,3,6,0,6,0,0,18,62,12,0.08333,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1730,"                    bMatrix.setEntry(nfm, nfxm, -HALF / interpolationPoints.getEntry(nfm - n, nfxm));
",6,2,0,2,4,0,14,0,0,23,81,12,0.08333,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1731,"                    bMatrix.setEntry(nfm - n, nfxm,
",4,1,0,0,1,0,6,0,0,11,31,12,0.08333,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1733,"                    zMatrix.setEntry(0, nfxm, Math.sqrt(TWO) / (stepa * stepb));
",4,2,0,3,6,0,12,0,0,18,60,12,0.08333,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1734,"                    zMatrix.setEntry(nfm, nfxm, Math.sqrt(HALF) / rhosq);
",2,1,0,2,4,0,14,0,0,17,53,12,0.08333,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1736,"                    zMatrix.setEntry(nfm - n, nfxm,
",4,1,0,0,1,0,6,0,0,11,31,12,0.08333,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1738,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.08333,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,76,"        return evaluations.getCount();
",0,0,0,1,2,1,4,0,0,4,30,5,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,94,"            evaluations.incrementCount();
",0,0,0,1,2,0,4,0,0,4,29,7,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,97,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,98,"        return function.value(point);
",0,0,0,1,2,1,6,0,0,6,29,5,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,132,"        return goal;
",2,0,0,0,0,1,0,0,0,2,12,4,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,241,"        isMinimize = (getGoalType() == GoalType.MINIMIZE);
",6,1,0,2,4,0,2,0,0,10,50,4,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,242,"        currentBest = new ArrayRealVector(getStartPoint());
",2,0,0,2,4,0,2,2,0,7,51,4,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,244,"        final double value = bobyqa(lowerBound, upperBound);
",2,0,0,1,2,1,6,0,0,9,52,4,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,287,"        printMethod(); // XXX
",0,0,0,1,2,0,2,0,0,2,21,5,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,289,"        final int n = currentBest.getDimension();
",2,0,0,1,2,1,4,0,0,7,41,4,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,298,"        for (int j = 0; j < n; j++) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,299,"            final double boundDiff = boundDifference[j];
",2,0,1,1,2,1,0,0,0,7,44,6,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,300,"            lowerDifference.setEntry(j, lowerBound[j] - currentBest.getEntry(j));
",0,1,1,3,6,0,12,0,0,17,69,7,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,301,"            upperDifference.setEntry(j, upperBound[j] - currentBest.getEntry(j));
",0,1,1,3,6,0,12,0,0,17,69,7,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,302,"            if (lowerDifference.getEntry(j) >= -initialTrustRegionRadius) {
",2,1,0,2,5,0,6,0,0,10,63,6,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,314,"            } else if (upperDifference.getEntry(j) <= initialTrustRegionRadius) {
",2,1,0,2,6,0,6,0,0,9,69,7,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,332,"        return bobyqb(lowerBound, upperBound);
",0,0,0,1,2,1,6,0,0,6,38,5,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,376,"        printMethod(); // XXX
",0,0,0,1,2,0,2,0,0,2,21,5,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,378,"        final int n = currentBest.getDimension();
",2,0,0,1,2,1,4,0,0,7,41,4,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,379,"        final int npt = numberOfInterpolationPoints;
",4,0,0,0,0,1,0,0,0,5,44,4,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,380,"        final int np = n + 1;
",4,1,0,0,0,1,0,0,0,6,21,4,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,381,"        final int nptm = npt - np;
",6,1,0,0,0,1,0,0,0,8,26,4,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,382,"        final int nh = n * np / 2;
",6,2,0,0,0,1,0,0,0,9,26,4,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,384,"        final ArrayRealVector work1 = new ArrayRealVector(n);
",4,0,0,1,2,1,0,4,0,9,53,4,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,385,"        final ArrayRealVector work2 = new ArrayRealVector(npt);
",4,0,0,1,2,1,0,4,0,9,55,4,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,386,"        final ArrayRealVector work3 = new ArrayRealVector(npt);
",4,0,0,1,2,1,0,4,0,9,55,4,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,388,"        double cauchy = Double.NaN;
",6,0,0,0,0,0,0,0,0,6,27,5,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,389,"        double alpha = Double.NaN;
",6,0,0,0,0,0,0,0,0,6,26,5,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,390,"        double dsq = Double.NaN;
",6,0,0,0,0,0,0,0,0,6,24,5,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,391,"        double crvmin = Double.NaN;
",6,0,0,0,0,0,0,0,0,6,27,5,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,405,"        trustRegionCenterInterpolationPointIndex = 0;
",2,0,0,0,0,0,0,0,0,3,45,4,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,407,"        prelim(lowerBound, upperBound);
",0,0,0,1,2,0,6,0,0,6,31,5,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1584,"        printMethod(); // XXX
",0,0,0,1,2,0,2,0,0,2,21,5,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1586,"        final int n = currentBest.getDimension();
",2,0,0,1,2,1,4,0,0,7,41,4,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1587,"        final int npt = numberOfInterpolationPoints;
",4,0,0,0,0,1,0,0,0,5,44,4,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1588,"        final int ndim = bMatrix.getRowDimension();
",2,0,0,1,2,1,4,0,0,7,43,4,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1590,"        final double rhosq = initialTrustRegionRadius * initialTrustRegionRadius;
",6,1,0,0,0,1,0,0,0,8,73,4,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1591,"        final double recip = 1d / rhosq;
",4,1,0,0,0,1,0,0,0,6,32,4,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1592,"        final int np = n + 1;
",4,1,0,0,0,1,0,0,0,6,21,4,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1597,"        for (int j = 0; j < n; j++) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1598,"            originShift.setEntry(j, currentBest.getEntry(j));
",0,0,0,2,4,0,12,0,0,12,49,7,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1599,"            for (int k = 0; k < npt; k++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1600,"                interpolationPoints.setEntry(k, j, ZERO);
",0,0,0,1,2,0,10,0,0,10,41,9,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1602,"            for (int i = 0; i < ndim; i++) {
",8,1,0,1,3,0,0,0,0,10,32,6,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1603,"                bMatrix.setEntry(i, j, ZERO);
",0,0,0,1,2,0,10,0,0,10,29,9,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1606,"        for (int i = 0, max = n * np / 2; i < max; i++) {
",14,3,0,1,3,0,0,0,0,18,49,4,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1607,"            modelSecondDerivativesValues.setEntry(i, ZERO);
",0,0,0,1,2,0,8,0,0,8,47,7,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1609,"        for (int k = 0; k < npt; k++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1610,"            modelSecondDerivativesParameters.setEntry(k, ZERO);
",0,0,0,1,2,0,8,0,0,8,51,7,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1611,"            for (int j = 0, max = npt - np; j < max; j++) {
",14,2,0,1,3,0,0,0,0,17,47,6,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1612,"                zMatrix.setEntry(k, j, ZERO);
",0,0,0,1,2,0,10,0,0,10,29,9,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1620,"        int ipt = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1621,"        int jpt = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1622,"        double fbeg = Double.NaN;
",6,0,0,0,0,0,0,0,0,6,25,5,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1624,"            final int nfm = getEvaluations();
",2,0,0,1,2,1,2,0,0,5,33,6,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1625,"            final int nfx = nfm - n;
",6,1,0,0,0,1,0,0,0,8,24,6,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1626,"            final int nfmm = nfm - 1;
",4,1,0,0,0,1,0,0,0,6,25,6,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1627,"            final int nfxm = nfx - 1;
",4,1,0,0,0,1,0,0,0,6,25,6,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1628,"            double stepa = 0;
",2,0,0,0,0,0,0,0,0,2,17,7,0.07692,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1629,"            double stepb = 0;
",2,0,0,0,0,0,0,0,0,2,17,7,0.07692,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,244,"    super(interpolator);
",2,0,0,1,2,0,0,0,0,2,20,4,0.03571,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,246,"    if (interpolator.currentState == null) {
",4,1,0,1,3,0,0,0,0,5,40,4,0.03571,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,248,"      yDotKLast = null;
",2,0,0,0,0,0,0,0,0,3,17,6,0.03571,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,249,"      v         = null;
",2,0,0,0,0,0,0,0,0,3,17,6,0.03571,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,250,"      vectorsInitialized = false;
",2,0,0,0,0,0,0,0,0,4,27,6,0.03571,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,273,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03571,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,278,"    return new DormandPrince853StepInterpolator(this);
",0,0,0,1,2,1,0,2,0,2,50,6,0.03571,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,288,"    super.reinitialize(integrator, y, yDotK, forward, primaryMapper, secondaryMappers);
",14,0,0,1,2,0,0,0,0,14,83,5,0.03571,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,290,"    final int dimension = currentState.length;
",6,0,0,0,0,1,0,0,0,7,42,4,0.03571,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,292,"    yDotKLast = new double[3][];
",2,0,0,2,4,0,0,0,0,3,28,4,0.03571,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,293,"    for (int k = 0; k < yDotKLast.length; ++k) {
",10,1,0,1,3,0,0,0,0,12,44,4,0.03571,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,294,"      yDotKLast[k] = new double[dimension];
",0,0,1,2,4,0,0,0,0,7,37,6,0.03571,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,297,"    v = new double[7][];
",2,0,0,2,4,0,0,0,0,3,20,4,0.03571,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,298,"    for (int k = 0; k < v.length; ++k) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.03571,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,299,"      v[k]  = new double[dimension];
",0,0,1,2,4,0,0,0,0,7,30,6,0.03571,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,302,"    vectorsInitialized = false;
",2,0,0,0,0,0,0,0,0,4,27,4,0.03571,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,304,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03571,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,309,"    super.storeTime(t);
",4,0,0,1,2,0,0,0,0,4,19,5,0.03571,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,310,"    vectorsInitialized = false;
",2,0,0,0,0,0,0,0,0,4,27,4,0.03571,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,311,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03571,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,407,"    if (currentState == null) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.03571,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,409,"      return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.03571,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,220,"    super(METHOD_NAME, true, STATIC_C, STATIC_A, STATIC_B,
",8,0,0,0,1,0,0,0,0,9,54,4,0.03448,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,223,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03448,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,231,"    super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.03125,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,232,"    yDotKLast = null;
",2,0,0,0,0,0,0,0,0,3,17,4,0.03125,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,233,"    v         = null;
",2,0,0,0,0,0,0,0,0,3,17,4,0.03125,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,234,"    vectorsInitialized = false;
",2,0,0,0,0,0,0,0,0,4,27,4,0.03125,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,235,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03125,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,180,"    private static final double[][] D = {
",2,0,0,2,5,3,0,0,0,5,37,2,0.03125,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,63,"  private static final double[] STATIC_C = {
",2,0,0,1,3,3,0,0,0,5,42,2,0.03125,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,70,"  private static final double[][] STATIC_A = {
",2,0,0,2,5,3,0,0,0,5,44,2,0.03125,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,137,"  private static final double[] STATIC_B = {
",2,0,0,1,3,3,0,0,0,5,42,2,0.03125,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,247,"    return 8;
",0,0,0,0,0,1,0,0,0,0,9,3,0.03125,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,3473,"        if (a < b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.02703,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,3474,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.02703,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,236,"              for (int i = 0; i < scale.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,40,12,0.02174,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,237,"                scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]);
",4,2,1,3,6,0,4,0,0,19,78,14,0.02174,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,115,"    super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);
",10,0,0,1,2,0,0,0,0,10,76,4,0.01887,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,117,"    this.fsal      = fsal;
",4,0,0,0,0,0,0,0,0,5,22,4,0.01887,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,118,"    this.c         = c;
",4,0,0,0,0,0,0,0,0,5,19,4,0.01887,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,119,"    this.a         = a;
",4,0,0,0,0,0,0,0,0,5,19,4,0.01887,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,120,"    this.b         = b;
",4,0,0,0,0,0,0,0,0,5,19,4,0.01887,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,121,"    this.prototype = prototype;
",4,0,0,0,0,0,0,0,0,5,27,4,0.01887,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,123,"    exp = -1.0 / getOrder();
",2,1,0,1,2,0,2,0,0,7,24,4,0.01887,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,126,"    setSafety(0.9);
",0,0,0,1,2,0,2,0,0,2,15,5,0.01887,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,127,"    setMinReduction(0.2);
",0,0,0,1,2,0,2,0,0,2,21,5,0.01887,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,128,"    setMaxGrowth(10.0);
",0,0,0,1,2,0,2,0,0,2,19,5,0.01887,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,130,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01887,0,-1
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,37,"        super(max);
",2,0,0,1,2,0,0,0,0,2,11,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,38,"        getContext().addMessage(LocalizedFormats.EVALUATIONS);
",4,0,0,2,4,0,4,0,0,8,54,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,39,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,42,"        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);
",6,0,0,1,2,0,0,0,0,6,47,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,43,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,53,"                                     Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,54,"        getContext().addMessage(specific, max, args);
",0,0,0,2,4,0,10,0,0,10,45,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,55,"        this.max = max;
",4,0,0,0,0,0,0,0,0,5,15,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,56,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,62,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,45,"                                     Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,46,"        context = new ExceptionContext(this);
",2,0,0,1,2,0,0,2,0,5,37,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,47,"        context.addMessage(pattern, args);
",0,0,0,1,2,0,8,0,0,8,34,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,69,"        this(LocalizedFormats.ILLEGAL_STATE);
",4,0,0,1,2,0,0,0,0,4,37,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,70,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,74,"        return context;
",2,0,0,0,0,1,0,0,0,2,15,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,40,151,"            maxCountCallback.trigger(maximalCount);
",0,0,0,1,2,0,6,0,0,6,39,7,1.00000,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,40,65,"                     throw new MaxCountExceededException(max);
",2,0,0,1,2,0,0,2,0,4,41,10,1.00000,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,393,"        this.allowed = allowedSolution;
",4,0,0,0,0,0,0,0,0,5,31,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,394,"        return super.solve(maxEval, f, min, max, startValue);
",12,0,0,1,2,1,0,0,0,12,53,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,295,"        } catch (MaxCountExceededException e) {
",2,0,0,1,4,0,0,2,0,4,39,6,1.00000,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,296,"            throw new TooManyEvaluationsException(e.getMax());
",0,0,0,2,4,0,4,2,0,6,50,8,1.00000,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,128,"        this.maximalOrder = maximalOrder;
",4,0,0,0,0,0,0,0,0,5,33,4,0.33333,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,129,"        this.allowed = AllowedSolution.ANY_SIDE;
",6,0,0,0,0,0,0,0,0,7,40,4,0.33333,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,130,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.33333,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,124,"        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);
",6,0,0,1,2,0,0,0,0,6,65,4,0.25000,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,125,"        if (maximalOrder < 2) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.25000,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,40,59,"        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);
",6,0,0,1,2,0,0,0,0,6,65,4,0.25000,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,40,60,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.25000,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,265,"                        --end;
",2,0,0,0,0,0,0,0,0,3,6,12,0.07692,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,235,"                targetY = -REDUCTION_FACTOR * yB;
",6,1,0,0,0,0,0,0,0,9,33,8,0.06250,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,294,"                nbPoints = end - start;
",6,1,0,0,0,0,0,0,0,8,23,8,0.05882,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,295,"                System.arraycopy(x, start, x, 0, nbPoints);
",0,0,0,1,2,0,12,0,0,12,43,9,0.05882,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,296,"                System.arraycopy(y, start, y, 0, nbPoints);
",0,0,0,1,2,0,12,0,0,12,43,9,0.05882,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,297,"                signChangeIndex -= start;
",4,0,0,0,0,0,0,0,0,5,25,8,0.05882,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,260,"                    if (signChangeIndex - start >= end - signChangeIndex) {
",8,3,0,1,3,0,0,0,0,11,55,10,0.05556,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,269,"                    nextX = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,19,10,0.05556,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,290,"            if ((nbPoints > 2) && (end - start != nbPoints)) {
",8,4,0,3,7,0,0,0,0,12,50,6,0.05556,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,299,"            } else  if (nbPoints == x.length) {
",6,1,0,1,4,0,0,0,0,7,35,7,0.05556,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,370,"        return evaluate(values, weights, 0, values.length);
",4,0,0,1,2,1,6,0,0,10,51,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,222,"        return test(values, weights, begin, length, false);
",0,0,0,1,2,1,10,0,0,11,51,5,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,258,"        if (weights == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,262,"        if (weights.length != values.length) {
",8,1,0,1,3,0,0,0,0,9,38,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,266,"        boolean containsPositiveWeight = false;
",2,0,0,0,0,0,0,0,0,3,39,5,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,267,"        for (int i = begin; i < begin + length; i++) {
",12,2,0,1,3,0,0,0,0,15,46,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,268,"            if (Double.isNaN(weights[i])) {
",0,0,1,3,7,0,4,0,0,8,31,7,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,271,"            if (Double.isInfinite(weights[i])) {
",0,0,1,3,7,0,4,0,0,8,36,7,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,274,"            if (weights[i] < 0) {
",0,1,1,2,5,0,0,0,0,5,21,6,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,277,"            if (!containsPositiveWeight && weights[i] > 0.0) {
",2,2,1,2,5,0,0,0,0,9,50,6,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,278,"                containsPositiveWeight = true;
",2,0,0,0,0,0,0,0,0,4,30,8,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,282,"        if (!containsPositiveWeight) {
",2,0,0,1,3,0,0,0,0,3,30,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,286,"        return test(values, begin, length, allowEmpty);
",0,0,0,1,2,1,10,0,0,10,47,5,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,316,"        double var = Double.NaN;
",6,0,0,0,0,0,0,0,0,6,24,5,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,318,"        if (test(values, weights,begin, length)) {
",0,0,0,2,5,0,10,0,0,10,42,5,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,319,"            clear();
",0,0,0,1,2,0,2,0,0,2,8,7,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,320,"            if (length == 1) {
",2,1,0,1,3,0,0,0,0,3,18,6,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,322,"            } else if (length > 1) {
",2,1,0,1,4,0,0,0,0,3,24,7,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,323,"                Mean mean = new Mean();
",2,0,0,1,2,0,0,4,0,6,23,9,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,324,"                double m = mean.evaluate(values, weights, begin, length);
",2,0,0,1,2,0,12,0,0,14,57,10,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,325,"                var = evaluate(values, weights, m, begin, length);
",2,0,0,1,2,0,12,0,0,15,50,9,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,328,"        return var;
",2,0,0,0,0,1,0,0,0,2,11,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,504,"        double var = Double.NaN;
",6,0,0,0,0,0,0,0,0,6,24,5,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,506,"        if (test(values, weights, begin, length)) {
",0,0,0,2,5,0,10,0,0,10,43,5,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,507,"            if (length == 1) {
",2,1,0,1,3,0,0,0,0,3,18,6,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,509,"            } else if (length > 1) {
",2,1,0,1,4,0,0,0,0,3,24,7,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,510,"                double accum = 0.0;
",2,0,0,0,0,0,0,0,0,2,19,10,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,511,"                double dev = 0.0;
",2,0,0,0,0,0,0,0,0,2,17,10,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,512,"                double accum2 = 0.0;
",2,0,0,0,0,0,0,0,0,2,20,10,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,513,"                for (int i = begin; i < begin + length; i++) {
",12,2,0,1,3,0,0,0,0,15,46,9,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,514,"                    dev = values[i] - mean;
",4,1,1,1,2,0,0,0,0,10,23,11,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,515,"                    accum += weights[i] * (dev * dev);
",6,2,1,2,4,0,0,0,0,13,34,11,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,516,"                    accum2 += weights[i] * dev;
",4,1,1,1,2,0,0,0,0,10,27,11,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,519,"                double sumWts = 0;
",2,0,0,0,0,0,0,0,0,2,18,10,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,521,"                    sumWts += weights[i];
",2,0,1,1,2,0,0,0,0,7,21,11,0.50000,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,524,"                if (isBiasCorrected) {
",2,0,0,1,3,0,0,0,0,2,22,9,0.50000,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,68,"        return (point == null) ? null : point.clone();
",2,1,0,2,4,1,4,0,0,7,46,5,0.07143,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,181,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,347,"            columnsToDrop.add(col);
",0,0,0,1,2,0,6,0,0,6,23,9,0.06667,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,73,"        throws DimensionMismatchException, NoDataException, NullArgumentException {
",6,0,0,0,1,0,0,0,0,6,75,2,0.06250,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,74,"        copyIn(d);
",0,0,0,1,2,0,4,0,0,4,10,5,0.06250,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,75,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06250,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,261,"        if (data == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.06250,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,262,"            if (row > 0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.06250,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,265,"            if (column > 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.06250,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,268,"            MathUtils.checkNotNull(subMatrix);
",0,0,0,1,2,0,6,0,0,6,34,7,0.06250,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,269,"            final int nRows = subMatrix.length;
",6,0,0,0,0,1,0,0,0,7,35,6,0.06250,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,270,"            if (nRows == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.06250,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,274,"            final int nCols = subMatrix[0].length;
",4,0,1,1,2,1,0,0,0,7,38,6,0.06250,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,275,"            if (nCols == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.06250,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,278,"            data = new double[subMatrix.length][nCols];
",6,0,1,2,4,0,0,0,0,9,43,6,0.06250,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,279,"            for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.06250,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,280,"                if (subMatrix[i].length != nCols) {
",4,1,1,2,5,0,0,0,0,9,35,8,0.06250,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,283,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);
",4,1,1,3,6,0,8,0,0,19,64,9,0.06250,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,285,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.06250,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,289,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06250,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,525,"        setSubMatrix(in, 0, 0);
",0,0,0,1,2,0,4,0,0,4,23,5,0.06250,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,526,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06250,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,332,"        List<Integer> columnsToDrop = new ArrayList<Integer>();
",2,0,0,1,2,0,0,8,0,10,55,4,0.06250,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,333,"        columnsToDrop.add(0);
",0,0,0,1,2,0,4,0,0,4,21,5,0.06250,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,336,"        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
",6,1,0,3,7,0,4,0,0,12,82,4,0.06250,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,337,"            final double entry = tableau.getEntry(0, i);
",2,0,0,1,2,1,6,0,0,9,44,6,0.06250,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,338,"            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
",0,1,0,2,5,0,8,0,0,9,50,6,0.06250,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,344,"        for (int i = 0; i < getNumArtificialVariables(); i++) {
",6,1,0,2,5,0,2,0,0,10,55,4,0.06250,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,345,"          int col = i + getArtificialVariableOffset();
",4,1,0,1,2,0,2,0,0,7,44,7,0.06250,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,346,"          if (getBasicRow(col) == null) {
",0,1,0,2,5,0,4,0,0,6,31,6,0.06250,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,351,"        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
",2,2,0,7,14,0,8,0,0,12,83,5,0.06250,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,352,"        for (int i = 1; i < getHeight(); i++) {
",6,1,0,2,5,0,2,0,0,10,39,4,0.06250,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,353,"          int col = 0;
",2,0,0,0,0,0,0,0,0,2,12,7,0.06250,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,354,"          for (int j = 0; j < getWidth(); j++) {
",6,1,0,2,5,0,2,0,0,10,38,6,0.06250,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,355,"            if (!columnsToDrop.contains(j)) {
",0,0,0,2,5,0,6,0,0,7,33,8,0.06250,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,356,"              matrix[i - 1][col++] = tableau.getEntry(i, j);
",4,1,1,3,6,0,8,0,0,17,46,10,0.06250,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,361,"        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
",6,2,0,2,5,0,4,0,0,13,53,4,0.06250,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,362,"          columnLabels.remove((int) columnsToDrop.get(i));
",0,0,0,3,6,0,10,0,0,10,48,7,0.06250,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,365,"        this.tableau = new Array2DRowRealMatrix(matrix);
",4,0,0,1,2,0,0,2,0,7,48,4,0.06250,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,366,"        this.numArtificialVariables = 0;
",2,0,0,0,0,0,0,0,0,3,32,4,0.06250,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,367,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06250,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,42,330,"        if (o == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.06250,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,42,333,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06250,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,44,"    protected AbstractRealMatrix() {}
",2,0,0,2,4,1,0,0,0,3,33,2,0.05882,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,174,"            doIteration(tableau);
",0,0,0,1,2,0,4,0,0,4,21,7,0.05882,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,447,"        if (v instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.05556,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,448,"            final double[] vData = ((ArrayRealVector) v).data;
",6,0,0,3,6,1,0,2,0,9,50,6,0.05556,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,449,"            checkVectorDimensions(vData.length);
",4,0,0,1,2,0,2,0,0,6,36,7,0.05556,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,450,"            double dot = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.05556,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,451,"            for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.05556,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,452,"                dot += data[i] * vData[i];
",2,1,1,2,4,0,0,0,0,12,26,8,0.05556,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,454,"            return dot;
",2,0,0,0,0,1,0,0,0,2,11,6,0.05556,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,173,"        while (!tableau.isOptimal()) {
",0,0,0,2,5,0,4,0,0,5,30,4,0.05556,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,178,"        if (!Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, epsilon)) {
",0,0,0,4,9,0,14,0,0,15,82,4,0.05556,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,197,"        return tableau.getSolution();
",0,0,0,1,2,1,4,0,0,4,29,5,0.05556,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,44,"    public RealPointValuePair(final double[] point, final double value) {
",6,0,0,2,5,3,0,0,0,9,69,2,0.05556,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,45,"        this.point = (point == null) ? null : point.clone();
",4,1,0,2,4,0,4,0,0,10,52,4,0.05556,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,46,"        this.value = value;
",4,0,0,0,0,0,0,0,0,5,19,4,0.05556,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05556,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,42,92,"        return coefficients.dotProduct(new ArrayRealVector(point, false)) + constantTerm;
",4,1,0,2,4,1,4,2,0,12,81,4,0.05556,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,317,"                return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.05556,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,320,"        return row;
",2,0,0,0,0,1,0,0,0,2,11,4,0.05556,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,397,"      int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
",2,0,0,1,2,0,6,0,0,8,72,5,0.05556,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,398,"      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
",4,1,0,1,2,0,4,2,0,12,92,4,0.05556,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,399,"      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
",4,1,0,2,4,0,6,0,0,13,102,5,0.05556,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,401,"      Set<Integer> basicRows = new HashSet<Integer>();
",2,0,0,1,2,0,0,8,0,10,48,4,0.05556,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,402,"      double[] coefficients = new double[getOriginalNumDecisionVariables()];
",2,0,0,3,6,0,2,0,0,4,70,5,0.05556,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,403,"      for (int i = 0; i < coefficients.length; i++) {
",10,1,0,1,3,0,0,0,0,12,47,4,0.05556,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,404,"          int colIndex = columnLabels.indexOf(""x"" + i);
",4,1,0,1,2,0,4,0,0,10,45,7,0.05556,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,405,"          if (colIndex < 0) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.05556,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,409,"          Integer basicRow = getBasicRow(colIndex);
",2,0,0,1,2,0,4,2,0,8,41,6,0.05556,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,413,"          if (basicRows.contains(basicRow)) {
",0,0,0,2,5,0,6,0,0,6,35,7,0.05556,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,418,"              basicRows.add(basicRow);
",0,0,0,1,2,0,6,0,0,6,24,9,0.05556,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,419,"              coefficients[i] =
",0,0,1,1,2,0,0,0,0,5,17,8,0.05556,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,424,"      return new RealPointValuePair(coefficients, f.getValue(coefficients));
",2,0,0,2,4,1,6,2,0,10,70,5,0.05556,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,92,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.05556,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,192,"        tableau.dropPhase1Objective();
",0,0,0,1,2,0,4,0,0,4,30,5,0.05263,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,194,"        while (!tableau.isOptimal()) {
",0,0,0,2,5,0,4,0,0,5,30,4,0.05263,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,98,"        if (++iterations > maxIterations) {
",4,1,0,1,3,0,0,0,0,6,35,4,0.05000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,101,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,70,"        double minValue = 0;
",2,0,0,0,0,0,0,0,0,2,20,5,0.05000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,71,"        Integer minPos = null;
",2,0,0,0,0,0,0,2,0,4,22,4,0.05000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,72,"        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {
",6,2,0,3,7,0,8,0,0,17,83,4,0.05000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,73,"            final double entry = tableau.getEntry(0, i);
",2,0,0,1,2,1,6,0,0,9,44,6,0.05000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,74,"            if (Precision.compareTo(entry, minValue, maxUlps) < 0) {
",0,1,0,2,5,0,10,0,0,11,56,6,0.05000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,75,"                minValue = entry;
",4,0,0,0,0,0,0,0,0,5,17,8,0.05000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,76,"                minPos = i;
",4,0,0,0,0,0,0,0,0,5,11,8,0.05000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,79,"        return minPos;
",2,0,0,0,0,1,0,0,0,2,14,4,0.05000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,90,"        List<Integer> minRatioPositions = new ArrayList<Integer>();
",2,0,0,1,2,0,0,8,0,10,59,4,0.05000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,91,"        double minRatio = Double.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,6,35,5,0.05000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,92,"        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
",6,1,0,3,7,0,8,0,0,16,80,4,0.05000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,93,"            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
",2,1,0,2,4,1,10,0,0,14,63,6,0.05000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,94,"            final double entry = tableau.getEntry(i, col);
",2,0,0,1,2,1,8,0,0,11,46,6,0.05000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,96,"            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
",0,1,0,2,5,0,8,0,0,9,50,6,0.05000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,97,"                final double ratio = rhs / entry;
",6,1,0,0,0,1,0,0,0,8,33,8,0.05000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,98,"                final int cmp = Precision.compareTo(ratio, minRatio, maxUlps);
",2,0,0,1,2,1,10,0,0,13,62,8,0.05000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,99,"                if (cmp == 0) {
",2,1,0,1,3,0,0,0,0,3,15,8,0.05000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,101,"                } else if (cmp < 0) {
",2,1,0,1,4,0,0,0,0,3,21,9,0.05000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,102,"                    minRatio = ratio;
",4,0,0,0,0,0,0,0,0,5,17,11,0.05000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,103,"                    minRatioPositions = new ArrayList<Integer>();
",2,0,0,1,2,0,0,4,0,7,45,11,0.05000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,104,"                    minRatioPositions.add(i);
",0,0,0,1,2,0,6,0,0,6,25,12,0.05000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,109,"        if (minRatioPositions.size() == 0) {
",0,1,0,2,5,0,4,0,0,5,36,4,0.05000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,111,"        } else if (minRatioPositions.size() > 1) {
",0,1,0,2,6,0,4,0,0,5,42,5,0.05000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,125,"        return minRatioPositions.get(0);
",0,0,0,1,2,1,4,0,0,4,32,5,0.05000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,137,"        incrementIterationsCounter();
",0,0,0,1,2,0,2,0,0,2,29,5,0.05000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,139,"        Integer pivotCol = getPivotColumn(tableau);
",2,0,0,1,2,0,4,2,0,8,43,4,0.05000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,140,"        Integer pivotRow = getPivotRow(tableau, pivotCol);
",2,0,0,1,2,0,6,2,0,10,50,4,0.05000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,141,"        if (pivotRow == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.05000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,146,"        double pivotVal = tableau.getEntry(pivotRow, pivotCol);
",2,0,0,1,2,0,8,0,0,10,55,5,0.05000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,147,"        tableau.divideRow(pivotRow, pivotVal);
",0,0,0,1,2,0,8,0,0,8,38,5,0.05000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,150,"        for (int i = 0; i < tableau.getHeight(); i++) {
",6,1,0,2,5,0,4,0,0,12,47,4,0.05000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,151,"            if (i != pivotRow) {
",4,1,0,1,3,0,0,0,0,5,20,6,0.05000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,152,"                double multiplier = tableau.getEntry(i, pivotCol);
",2,0,0,1,2,0,8,0,0,10,50,9,0.05000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,153,"                tableau.subtractRow(i, pivotRow, multiplier);
",0,0,0,1,2,0,10,0,0,10,45,9,0.05000,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,156,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05000,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,647,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,643,"        if (n > 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,1,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1160,"                double xa = x - 1.0;
",4,1,0,0,0,0,0,0,0,5,20,9,1,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1161,"                double xb = xa - x + 1.0;
",6,2,0,0,0,0,0,0,0,8,25,9,1,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1162,"                double tmp = xa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,31,9,1,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1163,"                double aa = xa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,10,27,9,1,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1164,"                double ab = xa - aa;
",6,1,0,0,0,0,0,0,0,7,20,9,1,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1165,"                xa = aa;
",4,0,0,0,0,0,0,0,0,5,8,8,1,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1166,"                xb = ab;
",4,0,0,0,0,0,0,0,0,5,8,8,1,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1168,"                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];
",6,1,1,2,4,0,0,0,0,9,53,9,1,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1169,"                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];
",6,1,1,2,4,0,0,0,0,9,53,9,1,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1171,"                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {
",10,2,0,1,3,0,0,0,0,13,53,8,1,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1173,"                    aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,10,1,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1174,"                    ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,10,1,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1176,"                    tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,10,1,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1177,"                    ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,10,1,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1178,"                    yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,10,1,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1181,"                    aa = ya + LN_QUICK_COEF[i][0];
",4,1,1,2,4,0,0,0,0,10,30,10,1,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1182,"                    ab = yb + LN_QUICK_COEF[i][1];
",4,1,1,2,4,0,0,0,0,10,30,10,1,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1184,"                    tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,10,1,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1185,"                    ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,10,1,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1186,"                    yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,10,1,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1190,"                aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,8,1,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1191,"                ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,8,1,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1193,"                tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,8,1,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1194,"                ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,8,1,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1195,"                yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,8,1,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1197,"                return ya + yb;
",4,1,0,0,0,1,0,0,0,5,15,8,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,163,"        if (values == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,167,"        if (begin < 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,171,"        if (length < 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,175,"        if (begin + length > values.length) {
",8,2,0,1,3,0,0,0,0,10,37,4,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,180,"        if (length == 0 && !allowEmpty) {
",4,2,0,1,3,0,0,0,0,7,33,4,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,184,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,43,59,"        if (values == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,43,62,"        return evaluate(values, 0, values.length);
",4,0,0,1,2,1,4,0,0,8,42,5,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,577,"        checkEmpty();
",0,0,0,1,2,0,2,0,0,2,13,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,578,"        this.geoMeanImpl = geoMeanImpl;
",4,0,0,0,0,0,0,0,0,5,31,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,579,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,635,"        checkEmpty();
",0,0,0,1,2,0,2,0,0,2,13,5,1.00000,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,636,"        this.varianceImpl = varianceImpl;
",4,0,0,0,0,0,0,0,0,5,33,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,637,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,84,"        value += FastMath.log(d);
",2,0,0,1,2,0,6,0,0,9,25,4,0.85714,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,85,"        n++;
",2,0,0,0,0,0,0,0,0,3,4,4,0.85714,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,86,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.85714,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,150,"        sumImpl.increment(value);
",0,0,0,1,2,0,6,0,0,6,25,5,0.81818,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,209,"    if ((initialStepSize < minStep) || (initialStepSize > maxStep)) {
",8,3,0,3,7,0,0,0,0,11,65,4,0.50000,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,212,"      initialStep = initialStepSize;
",4,0,0,0,0,0,0,0,0,5,30,6,0.50000,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,214,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,252,"      return forward ? initialStep : -initialStep;
",6,0,0,0,0,1,0,0,0,7,44,7,0.50000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,44,3373,"        y += 1.0;
",2,0,0,0,0,0,0,0,0,3,9,4,0.16667,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,44,3375,"        if (y == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.16667,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,44,3379,"        return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.16667,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,334,"            handler.resetState(t, y);
",0,0,0,1,2,0,8,0,0,8,25,7,0.11111,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,172,"            nbPoints        = 2;
",2,0,0,0,0,0,0,0,0,3,20,6,0.09091,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,173,"            signChangeIndex = 1;
",2,0,0,0,0,0,0,0,0,3,20,6,0.09091,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,340,"                    System.arraycopy(eventY, 0, y, 0, y.length);
",4,0,0,1,2,0,8,0,0,12,44,9,0.08333,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,341,"                    computeDerivatives(eventT, y, yDot);
",0,0,0,1,2,0,8,0,0,8,36,9,0.08333,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,342,"                    resetOccurred = true;
",2,0,0,0,0,0,0,0,0,4,21,8,0.08333,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,329,"        if (!(pendingEvent && (FastMath.abs(pendingEventTime - t) <= convergence))) {
",8,3,0,4,9,0,4,0,0,16,77,4,0.07143,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,333,"        if (nextAction == EventHandler.Action.RESET_STATE) {
",8,1,0,1,3,0,0,0,0,9,52,4,0.07143,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,336,"        pendingEvent      = false;
",2,0,0,0,0,0,0,0,0,4,26,4,0.07143,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,337,"        pendingEventTime  = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,31,4,0.07143,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,339,"        return (nextAction == EventHandler.Action.RESET_STATE) ||
",8,2,0,1,2,1,0,0,0,10,57,4,0.07143,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,337,"                if (currentEvent.reset(eventT, eventY)) {
",0,0,0,2,5,0,8,0,0,8,41,7,0.07143,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,287,"                return nextX;
",2,0,0,0,0,1,0,0,0,2,13,8,0.07143,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,146,"        final double[] x = new double[maximalOrder + 1];
",4,1,0,2,4,1,0,0,0,6,48,4,0.06667,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,147,"        final double[] y = new double[maximalOrder + 1];
",4,1,0,2,4,1,0,0,0,6,48,4,0.06667,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,148,"        x[0] = getMin();
",0,0,1,2,4,0,2,0,0,5,16,4,0.06667,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,149,"        x[1] = getStartValue();
",0,0,1,2,4,0,2,0,0,5,23,4,0.06667,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,150,"        x[2] = getMax();
",0,0,1,2,4,0,2,0,0,5,16,4,0.06667,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,151,"        verifySequence(x[0], x[1], x[2]);
",0,0,1,4,8,0,2,0,0,8,33,5,0.06667,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,154,"        y[1] = computeObjectiveValue(x[1]);
",0,0,1,3,6,0,2,0,0,7,35,4,0.06667,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,155,"        if (Precision.equals(y[1], 0.0, 1)) {
",0,0,1,3,7,0,4,0,0,6,37,5,0.06667,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,161,"        y[0] = computeObjectiveValue(x[0]);
",0,0,1,3,6,0,2,0,0,7,35,4,0.06667,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,162,"        if (Precision.equals(y[0], 0.0, 1)) {
",0,0,1,3,7,0,4,0,0,6,37,5,0.06667,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,169,"        if (y[0] * y[1] < 0) {
",0,2,1,3,7,0,0,0,0,6,22,4,0.06667,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,195,"        final double[] tmpX = new double[x.length];
",6,0,0,2,4,1,0,0,0,7,43,4,0.06667,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,198,"        double xA    = x[signChangeIndex - 1];
",4,1,1,1,2,0,0,0,0,7,38,5,0.06667,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,199,"        double yA    = y[signChangeIndex - 1];
",4,1,1,1,2,0,0,0,0,7,38,5,0.06667,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,200,"        double absYA = FastMath.abs(yA);
",2,0,0,1,2,0,6,0,0,8,32,5,0.06667,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,201,"        int agingA   = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.06667,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,202,"        double xB    = x[signChangeIndex];
",2,0,1,1,2,0,0,0,0,6,34,5,0.06667,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,203,"        double yB    = y[signChangeIndex];
",2,0,1,1,2,0,0,0,0,6,34,5,0.06667,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,204,"        double absYB = FastMath.abs(yB);
",2,0,0,1,2,0,6,0,0,8,32,5,0.06667,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,205,"        int agingB   = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.06667,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,211,"            final double xTol = getAbsoluteAccuracy() +
",2,1,0,1,2,1,2,0,0,6,43,6,0.06667,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,213,"            if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {
",6,4,0,6,13,0,10,0,0,20,87,6,0.06667,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,233,"            if (agingA >= MAXIMAL_AGING) {
",4,1,0,1,3,0,0,0,0,5,30,6,0.06667,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,236,"            } else if (agingB >= MAXIMAL_AGING) {
",4,1,0,1,4,0,0,0,0,5,37,7,0.06667,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,241,"                targetY = 0;
",2,0,0,0,0,0,0,0,0,3,12,9,0.06667,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,246,"            int start = 0;
",2,0,0,0,0,0,0,0,0,2,14,7,0.06667,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,247,"            int end   = nbPoints;
",4,0,0,0,0,0,0,0,0,4,21,7,0.06667,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,251,"                System.arraycopy(x, start, tmpX, start, end - start);
",4,1,0,1,2,0,12,0,0,17,53,9,0.06667,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,252,"                nextX = guessX(targetY, tmpX, y, start, end);
",2,0,0,1,2,0,12,0,0,15,45,8,0.06667,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,254,"                if (!((nextX > xA) && (nextX < xB))) {
",8,3,0,4,9,0,0,0,0,12,38,8,0.06667,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,273,"            } while (Double.isNaN(nextX) && (end - start > 1));
",4,3,0,3,7,0,6,0,0,13,51,6,0.06667,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,275,"            if (Double.isNaN(nextX)) {
",0,0,0,2,5,0,6,0,0,6,26,7,0.06667,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,283,"            final double nextY = computeObjectiveValue(nextX);
",2,0,0,1,2,1,4,0,0,7,50,6,0.06667,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,284,"            if (Precision.equals(nextY, 0.0, 1)) {
",0,0,0,2,5,0,6,0,0,6,38,7,0.06667,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,365,"        for (int i = start; i < end - 1; ++i) {
",10,2,0,1,3,0,0,0,0,13,39,4,0.06667,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,366,"            final int delta = i + 1 - start;
",6,2,0,0,0,1,0,0,0,9,32,6,0.06667,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,49,"        super(rowDimension, columnDimension);
",4,0,0,1,2,0,0,0,0,4,37,4,0.03333,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,51,"        this.columns = columnDimension;
",4,0,0,0,0,0,0,0,0,5,31,4,0.03333,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,52,"        this.entries = new OpenIntToDoubleHashMap(0.0);
",2,0,0,1,2,0,0,2,0,5,47,4,0.03333,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,53,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03333,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,57,"        if (columnDimension < 1) {
",2,1,0,1,3,0,0,0,0,3,26,4,0.00388,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,60,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00388,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,53,"    protected AbstractRealMatrix(final int rowDimension, final int columnDimension) {
",6,0,0,1,3,3,0,0,0,9,81,2,0.00386,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,54,"        if (rowDimension < 1) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00386,0,-1
defect4j,math,org/apache/commons/math/linear/RealLinearOperator,45,52,"public abstract class RealLinearOperator {
",2,0,0,0,1,2,0,0,0,4,42,1,0.00315,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,345,"        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {
",0,0,0,1,4,0,2,2,0,4,63,5,0.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,358,"                this.startRow    = startRow;
",4,0,0,0,0,0,0,0,0,5,28,10,0.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,359,"                this.startColumn = startColumn;
",4,0,0,0,0,0,0,0,0,5,31,10,0.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,360,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,365,"                destination[row - startRow][column - startColumn] = value;
",10,2,1,2,4,0,0,0,0,15,58,10,0.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,366,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,44,"    protected AbstractRealMatrix() {}
",2,0,0,2,4,1,0,0,0,3,33,2,0.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,55,"            throw new NotStrictlyPositiveException(rowDimension);
",2,0,0,1,2,0,0,2,0,4,53,7,0.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,58,"            throw new NotStrictlyPositiveException(columnDimension);
",2,0,0,1,2,0,0,2,0,4,56,7,0.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,71,"        MatrixUtils.checkAdditionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,45,5,0.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,73,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,0.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,74,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,0.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,75,"        final RealMatrix out = createMatrix(rowCount, columnCount);
",2,0,0,1,2,1,6,2,0,11,59,4,0.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,76,"        for (int row = 0; row < rowCount; ++row) {
",8,1,0,1,3,0,0,0,0,10,42,4,0.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,77,"            for (int col = 0; col < columnCount; ++col) {
",8,1,0,1,3,0,0,0,0,10,45,6,0.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,78,"                out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col));
",0,1,0,3,6,0,22,0,0,23,66,9,0.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,82,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,88,"        MatrixUtils.checkSubtractionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,48,5,0.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,90,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,0.00000,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,91,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,0.00000,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,260,"            return isZero ? NaN : INF;
",6,0,0,0,0,1,0,0,0,6,26,7,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,1183,"        return ""("" + real + "", "" + imaginary + "")"";
",4,1,0,1,2,1,0,0,0,8,43,4,1.00000,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,587,"        return this.add(I).divide(I.subtract(this)).log()
",0,0,0,4,8,1,12,0,0,12,49,6,0.33333,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,258,"        if (divisor.isZero) {
",4,0,0,1,3,0,0,0,0,4,21,5,0.30769,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,253,"        MathUtils.checkNotNull(divisor);
",0,0,0,1,2,0,6,0,0,6,32,5,0.26667,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,254,"        if (isNaN || divisor.isNaN) {
",6,1,0,1,3,0,0,0,0,7,29,4,0.26667,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,583,"        if (isNaN) {
",2,0,0,1,3,0,0,0,0,2,12,4,0.25000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1284,"            if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.25000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1288,"            return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.25000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,3004,"            if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,6,0.20000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,3005,"                return Math.PI/4.0;
",4,1,0,0,0,1,0,0,0,5,19,8,0.20000,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,329,"                return isNaN;
",2,0,0,0,0,1,0,0,0,2,13,8,0.16667,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,430,"            return INF;
",2,0,0,0,0,1,0,0,0,2,11,6,0.14286,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,276,"            double q = d / c;
",6,1,0,0,0,0,0,0,0,7,17,7,0.11111,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,277,"            double denominator = d * q + c;
",8,2,0,0,0,0,0,0,0,10,31,7,0.11111,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,278,"            return createComplex((imaginary * q + real) / denominator,
",8,3,0,1,3,1,2,0,0,13,58,7,0.11111,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,122,"            return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.09091,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,263,"        if (divisor.isInfinite() && !isInfinite()) {
",0,1,0,3,7,0,6,0,0,8,44,4,0.08333,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,267,"        final double c = divisor.getReal();
",2,0,0,1,2,1,4,0,0,7,35,4,0.08333,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,268,"        final double d = divisor.getImaginary();
",2,0,0,1,2,1,4,0,0,7,40,4,0.08333,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,270,"        if (FastMath.abs(c) < FastMath.abs(d)) {
",0,1,0,3,7,0,12,0,0,13,40,4,0.08333,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,46,2337,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06780,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,754,"        return createComplex(FastMath.log(abs()),
",0,0,0,2,5,1,8,0,0,8,41,5,0.06667,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1256,"        return log(x, null);
",0,0,0,1,2,1,4,0,0,5,20,4,0.06667,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,46,2334,"        if (o == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.06667,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1269,"        long bits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,5,0.05556,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1272,"        if ((bits & 0x8000000000000000L) != 0 || x != x) {
",6,4,0,2,5,0,0,0,0,10,50,4,0.05556,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1283,"        if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.05556,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,164,"        return createComplex(real + addend.getReal(),
",2,1,0,1,3,1,6,0,0,9,45,5,0.05263,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1266,"        if (x==0) { // Handle special case of +0/-0
",2,1,0,1,3,0,0,0,0,3,43,4,0.05263,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,3003,"        if (y == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.05263,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,46,85,"    private static final long[] FACTORIALS = new long[] {
",2,0,0,2,5,3,0,0,0,5,53,2,0.05000,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,379,"        return isNaN;
",2,0,0,0,0,1,0,0,0,2,13,4,0.04762,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,750,"        if (isNaN) {
",2,0,0,1,3,0,0,0,0,2,12,4,0.04762,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,2977,"        if (y == 0.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.04762,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,497,"        return createComplex(real - subtrahend.getReal(),
",2,1,0,1,3,1,6,0,0,9,49,5,0.04545,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,2973,"        if (x !=x || y != y) {
",8,3,0,1,3,0,0,0,0,11,22,4,0.04545,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,159,"        MathUtils.checkNotNull(addend);
",0,0,0,1,2,0,6,0,0,6,31,5,0.04348,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,160,"        if (isNaN || addend.isNaN) {
",6,1,0,1,3,0,0,0,0,7,28,4,0.04348,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,492,"        MathUtils.checkNotNull(subtrahend);
",0,0,0,1,2,0,6,0,0,6,35,5,0.04000,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,493,"        if (isNaN || subtrahend.isNaN) {
",6,1,0,1,3,0,0,0,0,7,32,4,0.04000,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,425,"        if (Double.isInfinite(real) ||
",0,1,0,1,3,0,6,0,0,7,30,4,0.03704,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,121,"        if (isInfinite()) {
",0,0,0,2,5,0,2,0,0,2,19,5,0.02941,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,118,"        if (isNaN) {
",2,0,0,1,3,0,0,0,0,2,12,4,0.02857,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,421,"        MathUtils.checkNotNull(factor);
",0,0,0,1,2,0,6,0,0,6,31,5,0.02857,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,422,"        if (isNaN || factor.isNaN) {
",6,1,0,1,3,0,0,0,0,7,28,4,0.02857,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,3410,"        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0
",8,2,0,2,4,1,0,0,0,11,61,5,0.02439,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,327,"            Complex c = (Complex)other;
",4,0,0,1,2,0,0,4,0,8,27,6,0.02381,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,328,"            if (c.isNaN) {
",4,0,0,1,3,0,0,0,0,4,14,7,0.02381,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,326,"        if (other instanceof Complex){
",2,0,0,1,3,0,0,2,0,4,30,5,0.02273,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,392,"        return isInfinite;
",2,0,0,0,0,1,0,0,0,2,18,4,0.02273,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,99,"    public Complex(double real, double imaginary) {
",6,0,0,1,3,1,0,0,0,7,47,2,0.02174,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,100,"        this.real = real;
",4,0,0,0,0,0,0,0,0,5,17,4,0.02174,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,257,"            return NaN;
",2,0,0,0,0,1,0,0,0,2,11,6,1,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2991,"                if (y < 0.0 || invy < 0.0) {
",4,3,0,1,3,0,0,0,0,7,28,8,0.50000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2994,"                    return Math.PI;
",4,0,0,0,0,1,0,0,0,4,15,11,0.50000,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,583,"        return this.add(I).divide(I.subtract(this)).log()
",0,0,0,4,8,1,12,0,0,12,49,6,0.33333,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,256,"        if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) {
",0,3,0,3,7,0,8,0,0,11,64,4,0.30769,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,251,"        MathUtils.checkNotNull(divisor);
",0,0,0,1,2,0,6,0,0,6,32,5,0.26667,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,252,"        if (isNaN || divisor.isNaN) {
",6,1,0,1,3,0,0,0,0,7,29,4,0.26667,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,579,"        if (isNaN) {
",2,0,0,1,3,0,0,0,0,2,12,4,0.25000,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,268,"            double q = c / d;
",6,1,0,0,0,0,0,0,0,7,17,7,0.20000,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,269,"            double denominator = c * q + d;
",8,2,0,0,0,0,0,0,0,10,31,7,0.20000,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,270,"            return createComplex((real * q + imaginary) / denominator,
",8,3,0,1,3,1,2,0,0,13,58,7,0.20000,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1315,"            if (x < 1.01 && x > 0.99 && hiPrec == null) {
",6,5,0,1,3,0,0,0,0,11,45,6,0.14286,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,747,"            return NaN;
",2,0,0,0,0,1,0,0,0,2,11,6,0.14286,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2990,"            if (x < 0.0 || invx < 0.0) {
",4,3,0,1,3,0,0,0,0,7,28,6,0.12500,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2997,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.12500,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2978,"            double result = x*y;
",6,1,0,0,0,0,0,0,0,7,20,7,0.11111,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2979,"            double invx = 1.0/x;
",4,1,0,0,0,0,0,0,0,5,20,7,0.11111,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2980,"            double invy = 1.0/y;
",4,1,0,0,0,0,0,0,0,5,20,7,0.11111,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2982,"            if (invx == 0.0) { // X is infinite
",2,1,0,1,3,0,0,0,0,3,35,6,0.11111,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,273,"            double q = d / c;
",6,1,0,0,0,0,0,0,0,7,17,7,0.11111,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,274,"            double denominator = d * q + c;
",8,2,0,0,0,0,0,0,0,10,31,7,0.11111,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,275,"            return createComplex((imaginary * q + real) / denominator,
",8,3,0,1,3,1,2,0,0,13,58,7,0.11111,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1429,"            lnza = -0.16624882440418567;
",2,0,0,0,0,0,0,0,0,4,28,6,0.09091,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1430,"            lnza = lnza * epsilon + 0.19999954120254515;
",6,2,0,0,0,0,0,0,0,9,44,6,0.09091,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1431,"            lnza = lnza * epsilon + -0.2499999997677497;
",6,2,0,0,0,0,0,0,0,10,44,6,0.09091,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1432,"            lnza = lnza * epsilon + 0.3333333333332802;
",6,2,0,0,0,0,0,0,0,9,43,6,0.09091,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1433,"            lnza = lnza * epsilon + -0.5;
",6,2,0,0,0,0,0,0,0,10,29,6,0.09091,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1434,"            lnza = lnza * epsilon + 1.0;
",6,2,0,0,0,0,0,0,0,9,28,6,0.09091,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1435,"            lnza = lnza * epsilon;
",6,1,0,0,0,0,0,0,0,8,22,6,0.09091,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,260,"        if (divisor.isInfinite() && !isInfinite()) {
",0,1,0,3,7,0,6,0,0,8,44,4,0.08333,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,264,"        final double c = divisor.getReal();
",2,0,0,1,2,1,4,0,0,7,35,4,0.08333,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,265,"        final double d = divisor.getImaginary();
",2,0,0,1,2,1,4,0,0,7,40,4,0.08333,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,267,"        if (FastMath.abs(c) < FastMath.abs(d)) {
",0,1,0,3,7,0,12,0,0,13,40,4,0.08333,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,419,"            return NaN;
",2,0,0,0,0,1,0,0,0,2,11,6,0.08333,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,47,2337,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06780,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,47,2334,"        if (o == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.06667,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1256,"        return log(x, null);
",0,0,0,1,2,1,4,0,0,5,20,4,0.06667,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1362,"        double lnm[] = LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];
",4,2,1,5,10,0,0,0,0,8,66,5,0.06667,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1373,"        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));
",8,4,0,3,6,0,0,0,0,12,89,5,0.06667,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1375,"        double lnza = 0.0;
",2,0,0,0,0,0,0,0,0,2,18,5,0.06667,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1376,"        double lnzb = 0.0;
",2,0,0,0,0,0,0,0,0,2,18,5,0.06667,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1378,"        if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.06667,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1452,"        double a = LN_2_A*exp;
",6,1,0,0,0,0,0,0,0,7,22,5,0.06667,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1453,"        double b = 0.0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.06667,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1454,"        double c = a+lnm[0];
",4,1,1,1,2,0,0,0,0,7,20,5,0.06667,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1455,"        double d = -(c-a-lnm[0]);
",6,1,1,2,4,0,0,0,0,10,25,5,0.06667,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1456,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.06667,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1457,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.06667,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1459,"        c = a + lnza;
",6,1,0,0,0,0,0,0,0,8,13,4,0.06667,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1460,"        d = -(c - a - lnza);
",8,1,0,1,2,0,0,0,0,11,20,4,0.06667,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1461,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.06667,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1462,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.06667,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1464,"        c = a + LN_2_B*exp;
",8,2,0,0,0,0,0,0,0,11,19,4,0.06667,0,-1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,39,"public class ExceptionContext implements Serializable {
",2,0,0,0,1,1,0,2,0,5,55,1,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,45,"    private List<Localizable> msgPatterns = new ArrayList<Localizable>();
",2,0,0,1,2,1,0,8,0,11,69,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,51,"    private List<Object[]> msgArguments = new ArrayList<Object[]>();
",2,0,0,3,6,1,0,8,0,11,64,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,55,"    private Map<String, Object> context = new HashMap<String, Object>();
",2,0,0,1,2,1,0,12,0,15,68,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,66,"        msgPatterns.add(pattern);
",0,0,0,1,2,0,6,0,0,6,25,5,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,67,"        msgArguments.add(ArgUtils.flatten(arguments));
",0,0,0,2,4,0,10,0,0,10,46,5,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,68,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,355,"    private LocalizedFormats(final String sourceFormat) {
",4,0,0,1,3,2,0,2,0,8,53,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,356,"        this.sourceFormat = sourceFormat;
",4,0,0,0,0,0,0,0,0,5,33,4,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,357,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),
",2,0,0,5,10,0,0,0,0,3,67,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,45,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),
",2,0,0,4,8,0,0,0,0,3,94,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,46,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),
",2,0,0,1,2,0,0,0,0,3,41,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,47,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),
",2,0,0,1,2,0,0,0,0,3,95,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,48,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),
",2,0,0,1,2,0,0,0,0,3,60,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,49,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),
",2,0,0,1,2,0,0,0,0,3,54,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,50,"    BANDWIDTH(""bandwidth ({0})""),
",2,0,0,3,6,0,0,0,0,3,29,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,51,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),
",2,0,0,4,8,0,0,0,0,3,108,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,52,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),
",2,0,0,3,6,0,0,0,0,3,93,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,53,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),
",2,0,0,1,2,0,0,0,0,3,123,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,54,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),
",2,0,0,1,2,0,0,0,0,3,89,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,55,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),
",2,0,0,2,4,0,0,0,0,3,108,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),
",2,0,0,1,2,0,0,0,0,3,100,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,57,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),
",2,0,0,2,4,0,0,0,0,3,94,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,58,"    CANNOT_CONVERT_OBJECT_TO_FRACTION(""cannot convert given object to a fraction number: {0}""),
",2,0,0,2,4,0,0,0,0,3,91,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),
",2,0,0,3,6,0,0,0,0,3,97,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),
",2,0,0,2,4,0,0,0,0,3,83,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),
",2,0,0,2,4,0,0,0,0,3,86,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),
",2,0,0,2,4,0,0,0,0,3,87,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),
",2,0,0,1,2,0,0,0,0,3,84,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),
",2,0,0,1,2,0,0,0,0,3,131,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),
",2,0,0,1,2,0,0,0,0,3,75,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),
",2,0,0,2,4,0,0,0,0,3,98,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),
",2,0,0,2,4,0,0,0,0,3,78,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),
",2,0,0,1,2,0,0,0,0,3,95,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),
",2,0,0,2,4,0,0,0,0,3,74,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),
",2,0,0,1,2,0,0,0,0,3,55,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),
",2,0,0,3,6,0,0,0,0,3,79,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),
",2,0,0,2,4,0,0,0,0,3,115,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),
",2,0,0,5,10,0,0,0,0,3,78,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */
",2,0,0,3,6,0,0,0,0,3,46,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),
",2,0,0,2,4,0,0,0,0,3,112,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),
",2,0,0,2,4,0,0,0,0,3,86,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),
",2,0,0,5,10,0,0,0,0,3,290,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),
",2,0,0,3,6,0,0,0,0,3,263,2,0.25000,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */
",2,0,0,1,2,0,0,0,0,3,52,2,0.25000,0,-1
