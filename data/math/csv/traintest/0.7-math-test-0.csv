dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,predict
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,306,"                throw new FractionConversionException(value, p2, q2);
",6,0,0,1,2,0,0,2,0,8,53,9,0.50000,1,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,268,"        return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();
",0,2,0,6,12,1,6,0,0,8,90,4,0.16667,1,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,305,"            return NaN;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,1,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,372,"                    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,1,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,187,"        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
",10,0,0,6,12,1,10,4,0,25,99,4,0.00000,1,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,87,"        final Line reverted = new Line(zero, zero.subtract(direction));
",4,0,0,2,4,1,6,4,0,15,63,4,0.00000,1,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,183,"        return FastMath.pow(2 * FastMath.PI, -dim / 2) *
",6,3,0,1,2,1,4,0,0,14,48,4,0.50000,1,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,921,"            return
",0,0,0,0,0,1,0,0,0,0,6,3,0.06667,1,-1
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,1,53,"        super(LocalizedFormats.FRACTION_CONVERSION_OVERFLOW, value, p, q);
",10,0,0,1,2,0,0,0,0,10,66,4,1,0,-1
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,1,54,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,1,48,"                                Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,0.80000,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,1,49,"        getContext().addMessage(pattern, args);
",0,0,0,2,4,0,8,0,0,8,39,5,0.80000,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,1,50,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.80000,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,332,"            numerator   = BigInteger.valueOf(p1);
",2,0,0,1,2,0,6,0,0,9,37,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,333,"            denominator = BigInteger.valueOf(q1);
",2,0,0,1,2,0,6,0,0,9,37,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,356,"        this(value, 0, maxDenominator, 100);
",4,0,0,1,2,0,0,0,0,4,36,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,357,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,144,"       this(value, 0, maxDenominator, 100);
",4,0,0,1,2,0,0,0,0,4,36,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,145,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,215,"                throw new FractionConversionException(value, p2, q2);
",6,0,0,1,2,0,0,2,0,8,53,9,0.50000,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,239,"            this.numerator = (int) p1;
",4,0,0,1,2,0,0,0,0,5,26,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,240,"            this.denominator = (int) q1;
",4,0,0,1,2,0,0,0,0,5,28,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,69,"        this(LocalizedFormats.ILLEGAL_STATE);
",4,0,0,1,2,0,0,0,0,4,37,5,0.23529,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,70,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.23529,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,193,"        return inverseCumulativeProbability(random.nextDouble());
",0,0,0,2,4,1,6,0,0,6,57,5,1.00000,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,86,"        final int indexRm1 = iRm1[index];
",2,0,1,1,2,1,0,0,0,7,33,4,1.00000,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,87,"        final int indexRm2 = iRm2[index];
",2,0,1,1,2,1,0,0,0,7,33,4,1.00000,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,89,"        final int v0       = v[index];
",2,0,1,1,2,1,0,0,0,7,30,4,1.00000,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,90,"        final int vM1      = v[i1[index]];
",2,0,1,2,4,1,0,0,0,9,34,4,1.00000,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,91,"        final int vM2      = v[i2[index]];
",2,0,1,2,4,1,0,0,0,9,34,4,1.00000,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,92,"        final int vM3      = v[i3[index]];
",2,0,1,2,4,1,0,0,0,9,34,4,1.00000,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,94,"        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);
",2,3,1,4,8,1,0,0,0,14,71,4,1.00000,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,95,"        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));
",10,5,0,4,8,1,0,0,0,16,57,4,1.00000,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,96,"        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));
",8,4,0,3,6,1,0,0,0,13,49,4,1.00000,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,97,"        final int z3 = z1      ^ z2;
",6,1,0,0,0,1,0,0,0,8,28,4,1.00000,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,98,"        int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));
",16,7,0,6,12,0,0,0,0,23,72,5,1.00000,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,100,"        v[index]     = z3;
",2,0,1,1,2,0,0,0,0,7,18,4,1.00000,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,101,"        v[indexRm1]  = z4;
",2,0,1,1,2,0,0,0,0,7,18,4,1.00000,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,816,"        final int len = a.length;
",6,0,0,0,0,1,0,0,0,7,25,4,0.09091,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,817,"        if (len != b.length) {
",6,1,0,1,3,0,0,0,0,7,22,4,0.09091,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,823,"        final double[] prodHigh = new double[len];
",2,0,1,2,4,1,0,0,0,5,42,4,0.09091,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,113,"        Line line1 = (Line) getHyperplane();
",2,0,0,2,4,0,2,4,0,8,36,4,0.14286,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,114,"        Line line2 = (Line) subLine.getHyperplane();
",2,0,0,2,4,0,4,4,0,10,44,4,0.14286,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,117,"        Vector2D v2D = line1.intersection(line2);
",2,0,0,1,2,0,6,2,0,10,41,4,0.14286,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,120,"        Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
",2,0,0,3,6,0,10,2,0,14,71,4,0.14286,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,56,"        this(new Line(start, end), buildIntervalSet(start, end));
",4,0,0,3,6,0,6,2,0,12,57,4,0.14286,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,57,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,113,"        Vector3D v1D = line.intersection(subLine.line);
",6,0,0,1,2,0,4,2,0,12,47,4,0.14286,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,116,"        Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));
",2,0,0,2,4,0,10,2,0,14,65,4,0.14286,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,156,"        return distance(p) < 1.0e-10;
",0,1,0,1,2,1,4,0,0,5,29,4,0.14286,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,164,"        final Vector3D d = p.subtract(zero);
",2,0,0,1,2,1,6,2,0,11,36,4,0.14286,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,165,"        final Vector3D n = new Vector3D(1.0, d, -d.dotProduct(direction), direction);
",6,0,0,2,4,1,6,4,0,18,77,4,0.14286,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,166,"        return n.getNorm();
",0,0,0,1,2,1,4,0,0,4,19,5,0.14286,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,195,"        final double cos = direction.dotProduct(line.direction);
",6,0,0,1,2,1,4,0,0,11,56,4,0.14286,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,196,"        final double n = 1 - cos * cos;
",6,2,0,0,0,1,0,0,0,9,31,4,0.14286,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,197,"        if (n < Precision.EPSILON) {
",6,1,0,1,3,0,0,0,0,7,28,4,0.14286,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,202,"        final Vector3D delta0 = line.zero.subtract(zero);
",6,0,0,1,2,1,4,2,0,13,49,4,0.14286,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,203,"        final double a        = delta0.dotProduct(direction);
",2,0,0,1,2,1,6,0,0,9,53,4,0.14286,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,204,"        final double b        = delta0.dotProduct(line.direction);
",6,0,0,1,2,1,4,0,0,11,58,4,0.14286,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,206,"        return new Vector3D(1, zero, (a - b * cos) / n, direction);
",12,3,0,2,4,1,0,2,0,17,59,5,0.14286,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,216,"        final Vector3D closest = closestPoint(line);
",2,0,0,1,2,1,4,2,0,9,44,4,0.14286,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,217,"        return line.contains(closest) ? closest : null;
",2,0,0,1,2,1,6,0,0,8,47,5,0.14286,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,56,"        super(new Line(start, end), buildIntervalSet(start, end));
",4,0,0,3,6,0,6,2,0,12,58,4,0.12500,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,304,"        if (real == 0.0 && imaginary == 0.0) {
",4,3,0,1,3,0,0,0,0,7,38,4,0.25000,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,451,"                if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) {
",8,1,0,2,5,0,0,0,0,10,62,9,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,233,"        if (mti >= N) { // generate N words at one time
",4,1,0,1,3,0,0,0,0,5,47,4,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,234,"            int mtNext = mt[0];
",2,0,1,1,2,0,0,0,0,4,19,7,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,235,"            for (int k = 0; k < N - M; ++k) {
",10,2,0,1,3,0,0,0,0,13,33,6,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,236,"                int mtCurr = mtNext;
",4,0,0,0,0,0,0,0,0,4,20,9,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,237,"                mtNext = mt[k + 1];
",4,1,1,1,2,0,0,0,0,8,19,8,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,238,"                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);
",6,3,0,2,4,0,0,0,0,10,50,8,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,239,"                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y & 0x1];
",8,4,1,4,8,0,0,0,0,21,47,8,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,241,"            for (int k = N - M; k < N - 1; ++k) {
",12,3,0,1,3,0,0,0,0,16,37,6,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,242,"                int mtCurr = mtNext;
",4,0,0,0,0,0,0,0,0,4,20,9,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,243,"                mtNext = mt[k + 1];
",4,1,1,1,2,0,0,0,0,8,19,8,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,244,"                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);
",6,3,0,2,4,0,0,0,0,10,50,8,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,245,"                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];
",10,5,1,5,10,0,0,0,0,24,53,8,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,247,"            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);
",4,3,1,3,6,0,0,0,0,10,49,6,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,248,"            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];
",8,5,1,4,8,0,0,0,0,20,51,6,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,250,"            mti = 0;
",2,0,0,0,0,0,0,0,0,3,8,6,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,253,"        y = mt[mti++];
",4,0,1,1,2,0,0,0,0,8,14,4,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,256,"        y ^=  y >>> 11;
",4,1,0,0,0,0,0,0,0,6,15,4,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,257,"        y ^= (y <<   7) & 0x9d2c5680;
",4,2,0,1,2,0,0,0,0,7,29,4,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,258,"        y ^= (y <<  15) & 0xefc60000;
",4,2,0,1,2,0,0,0,0,7,29,4,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,259,"        y ^=  y >>> 18;
",4,1,0,0,0,0,0,0,0,6,15,4,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,261,"        return y >>> (32 - bits);
",4,2,0,1,2,1,0,0,0,6,25,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,843,"        DoubleIndex(double value, int index) {
",6,0,0,1,3,0,0,0,0,6,38,3,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,844,"            this.value = value;
",4,0,0,0,0,0,0,0,0,5,19,5,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,845,"            this.index = index;
",4,0,0,0,0,0,0,0,0,5,19,5,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,846,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,850,"            return Double.compare(value, o.value);
",4,0,0,1,2,1,6,0,0,10,38,6,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,833,"    private static class DoubleIndex implements Comparable<DoubleIndex> {
",2,0,0,0,1,2,0,4,0,8,69,2,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,892,"        public FitnessFunction() {
",2,0,0,1,3,1,0,0,0,3,26,3,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,893,"            valueRange = 1;
",2,0,0,0,0,0,0,0,0,3,15,5,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,894,"            isRepairMode = true;
",2,0,0,0,0,0,0,0,0,4,20,5,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,895,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,903,"            if (isRepairMode) {
",2,0,0,1,3,0,0,0,0,2,19,5,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,904,"                double[] repaired = repair(point);
",2,0,0,2,4,0,4,0,0,6,34,8,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,905,"                value = CMAESOptimizer.this.computeObjectiveValue(repaired) +
",4,1,0,1,2,0,4,0,0,10,61,7,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,907,"            } else {
",0,0,0,0,2,0,0,0,0,0,8,3,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,910,"            return isMinimize ? value : -value;
",6,0,0,0,0,1,0,0,0,7,35,6,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,936,"            this.valueRange = valueRange;
",4,0,0,0,0,0,0,0,0,5,29,5,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,937,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,944,"            final double[] lB = CMAESOptimizer.this.getLowerBound();
",4,0,0,2,4,1,2,0,0,7,56,5,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,945,"            final double[] uB = CMAESOptimizer.this.getUpperBound();
",4,0,0,2,4,1,2,0,0,7,56,5,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,947,"            final double[] repaired = new double[x.length];
",6,0,0,2,4,1,0,0,0,7,47,5,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,948,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,949,"                if (x[i] < lB[i]) {
",0,1,1,3,7,0,0,0,0,9,19,7,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,951,"                } else if (x[i] > uB[i]) {
",0,1,1,3,8,0,0,0,0,9,26,8,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,954,"                    repaired[i] = x[i];
",0,0,1,2,4,0,0,0,0,9,19,10,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,957,"            return repaired;
",2,0,0,0,0,1,0,0,0,2,16,5,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,966,"            double penalty = 0;
",2,0,0,0,0,0,0,0,0,2,19,6,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,967,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,968,"                double diff = Math.abs(x[i] - repaired[i]);
",2,1,1,3,6,0,4,0,0,15,43,8,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,969,"                penalty += diff * valueRange;
",6,1,0,0,0,0,0,0,0,8,29,7,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,971,"            return isMinimize ? penalty : -penalty;
",6,0,0,0,0,1,0,0,0,7,39,6,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,881,"    private class FitnessFunction {
",2,0,0,0,1,1,0,0,0,3,31,2,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,370,"        isMinimize = getGoalType().equals(GoalType.MINIMIZE);
",6,0,0,2,4,0,4,0,0,11,53,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,371,"        final FitnessFunction fitfun = new FitnessFunction();
",2,0,0,1,2,1,0,4,0,7,53,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,372,"        final double[] guess = getStartPoint();
",2,0,0,2,4,1,2,0,0,5,39,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,374,"        dimension = guess.length;
",6,0,0,0,0,0,0,0,0,7,25,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,375,"        initializeCMA(guess);
",0,0,0,1,2,0,4,0,0,4,21,5,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,376,"        iterations = 0;
",2,0,0,0,0,0,0,0,0,3,15,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,377,"        double bestValue = fitfun.value(guess);
",2,0,0,1,2,0,6,0,0,8,39,5,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,378,"        push(fitnessHistory, bestValue);
",0,0,0,1,2,0,6,0,0,6,32,5,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,379,"        PointValuePair optimum
",2,0,0,0,0,0,0,2,0,4,22,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,382,"        PointValuePair lastResult = null;
",2,0,0,0,0,0,0,2,0,4,33,4,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,387,"        for (iterations = 1; iterations <= maxIterations; iterations++) {
",8,1,0,1,3,0,0,0,0,11,65,5,1,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,7,3367,"        y += 1.0;
",2,0,0,0,0,0,0,0,0,3,9,4,0.11111,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,7,3369,"        if (y == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.11111,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,7,3373,"        return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.11111,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,351,"                    handler.handleStep(interpolator, isLastStep);
",0,0,0,1,2,0,8,0,0,8,45,9,0.11111,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,352,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,218,"                switch (allowed) {
",2,0,0,1,3,0,0,0,0,2,18,8,0.11111,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,224,"                    return xB;
",2,0,0,0,0,1,0,0,0,2,10,9,0.11111,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,239,"                final int p = agingA - MAXIMAL_AGING;
",6,1,0,0,0,1,0,0,0,8,37,8,0.11111,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,240,"                final double weightA = (1 << p) - 1;
",4,2,0,1,2,1,0,0,0,7,36,8,0.11111,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,241,"                final double weightB = p + 1;
",4,1,0,0,0,1,0,0,0,6,29,8,0.11111,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,242,"                targetY = (weightA * yA - weightB * REDUCTION_FACTOR * yB) / (weightA + weightB);
",16,5,0,2,4,0,0,0,0,22,81,8,0.11111,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,243,"            } else if (agingB >= MAXIMAL_AGING) {
",4,1,0,1,4,0,0,0,0,5,37,7,0.11111,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,342,"                xA = nextX;
",4,0,0,0,0,0,0,0,0,5,11,8,0.11111,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,343,"                yA = nextY;
",4,0,0,0,0,0,0,0,0,5,11,8,0.11111,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,344,"                absYA = FastMath.abs(yA);
",2,0,0,1,2,0,6,0,0,9,25,8,0.11111,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,345,"                agingA = 0;
",2,0,0,0,0,0,0,0,0,3,11,8,0.11111,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,346,"                ++agingB;
",2,0,0,0,0,0,0,0,0,3,9,8,0.11111,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,349,"                signChangeIndex++;
",2,0,0,0,0,0,0,0,0,3,18,8,0.11111,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,218,"                switch (allowed) {
",2,0,0,1,3,0,0,0,0,2,18,8,0.11111,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,348,"            handler.resetState(t, y);
",0,0,0,1,2,0,8,0,0,8,25,7,0.10000,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,157,"        final double randomValue = random.nextDouble();
",2,0,0,1,2,1,4,0,0,7,47,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,158,"        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.50000,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,160,"        for (int i = 0; i < probabilities.length; i++) {
",10,1,0,1,3,0,0,0,0,12,48,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,161,"            sum += probabilities[i];
",2,0,1,1,2,0,0,0,0,7,24,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,162,"            if (randomValue < sum) {
",4,1,0,1,3,0,0,0,0,5,24,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,163,"                return singletons.get(i);
",0,0,0,1,2,1,6,0,0,6,25,9,0.50000,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,95,"        return direction;
",2,0,0,0,0,1,0,0,0,2,17,4,0.11111,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,54,"    public Line(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException {
",8,0,0,1,3,3,0,4,0,15,87,2,0.03846,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,55,"        reset(p1, p2);
",0,0,0,1,2,0,6,0,0,6,14,5,0.03846,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,56,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03846,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,74,"        final Vector3D delta = p2.subtract(p1);
",2,0,0,1,2,1,6,2,0,11,39,4,0.03846,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,75,"        final double norm2 = delta.getNormSq();
",2,0,0,1,2,1,4,0,0,7,39,4,0.03846,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,76,"        if (norm2 == 0.0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.03846,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,79,"        this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta);
",4,1,0,2,4,0,6,2,0,14,65,4,0.03846,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,80,"        zero = new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta);
",8,1,0,2,4,0,6,2,0,19,67,4,0.03846,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,81,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03846,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,249,"        return x * x + y * y + z * z;
",12,5,0,0,0,1,0,0,0,17,29,4,0.03846,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,151,"    public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {
",10,0,0,1,3,1,0,4,0,15,65,2,0.03571,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,152,"        this.x = MathArrays.linearCombination(a1, u1.x, a2, u2.x);
",10,0,0,1,2,0,8,0,0,19,58,4,0.03571,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,153,"        this.y = MathArrays.linearCombination(a1, u1.y, a2, u2.y);
",10,0,0,1,2,0,8,0,0,19,58,4,0.03571,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,154,"        this.z = MathArrays.linearCombination(a1, u1.z, a2, u2.z);
",10,0,0,1,2,0,8,0,0,19,58,4,0.03571,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2477,"            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));
",6,5,1,5,10,1,0,0,0,20,91,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2479,"            ya = epsA * denom;
",6,1,0,0,0,0,0,0,0,8,18,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2480,"            yb = epsB * denom;
",6,1,0,0,0,0,0,0,0,8,18,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2481,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.50000,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1387,"        double[] tmp1 = new double[getSize()];
",2,0,0,3,6,0,2,0,0,4,38,5,0.50000,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1388,"        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2
",0,0,0,1,2,0,12,0,0,12,54,5,0.50000,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1389,"        double[] tmp2 = new double[getSize()];
",2,0,0,3,6,0,2,0,0,4,38,5,0.50000,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1390,"        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2
",0,0,0,1,2,0,12,0,0,12,54,5,0.50000,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1391,"        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2
",0,0,0,1,2,0,8,0,0,8,60,5,0.50000,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1392,"        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)
",0,0,0,2,4,0,6,0,0,6,70,5,0.50000,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1394,"        if (x[xOffset] >= 0) {
",0,1,1,2,5,0,0,0,0,5,22,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1397,"            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x
",0,0,0,1,2,0,10,0,0,10,52,7,0.50000,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1398,"            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)
",0,0,0,2,4,0,10,0,0,10,57,7,0.50000,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1399,"            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))
",0,0,0,3,6,0,6,0,0,6,64,7,0.50000,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1400,"            for (int i = 0; i < tmp2.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,178,"        final int dim = getDimension();
",2,0,0,1,2,1,2,0,0,5,31,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,179,"        if (vals.length != dim) {
",6,1,0,1,3,0,0,0,0,7,25,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,229,"        final double[] centered = new double[values.length];
",6,0,0,2,4,1,0,0,0,7,52,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,230,"        for (int i = 0; i < centered.length; i++) {
",10,1,0,1,3,0,0,0,0,12,43,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,231,"            centered[i] = values[i] - getMeans()[i];
",0,1,1,4,8,0,2,0,0,14,40,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,233,"        final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered);
",2,0,0,2,4,1,6,0,0,9,77,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,234,"        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.50000,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,235,"        for (int i = 0; i < preMultiplied.length; i++) {
",10,1,0,1,3,0,0,0,0,12,48,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,236,"            sum += preMultiplied[i] * centered[i];
",2,1,1,2,4,0,0,0,0,12,38,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,238,"        return FastMath.exp(-0.5 * sum);
",2,1,0,1,2,1,4,0,0,8,32,5,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,831,"        return exp(x, 0.0, null);
",0,0,0,1,2,1,4,0,0,5,25,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,850,"        if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,851,"            intVal = (int) -x;
",4,0,0,1,2,0,0,0,0,6,18,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,853,"            if (intVal > 746) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,861,"            if (intVal > 709) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,871,"            if (intVal == 709) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,881,"            intVal++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,883,"            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,884,"            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,886,"            intVal = -intVal;
",4,0,0,0,0,0,0,0,0,6,17,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,888,"            intVal = (int) x;
",4,0,0,1,2,0,0,0,0,5,17,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,890,"            if (intVal > 709) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,898,"            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,899,"            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,906,"        final int intFrac = (int) ((x - intVal) * 1024.0);
",6,2,0,3,6,1,0,0,0,9,50,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,907,"        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
",6,0,1,1,2,1,0,0,0,9,64,4,0.50000,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,908,"        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
",6,0,1,1,2,1,0,0,0,9,64,4,0.50000,0,-1
