dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,49,"        super(rowDimension, columnDimension);
",4,0,0,1,2,0,0,0,0,4,37,4,0.03333,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,50,"        this.rows = rowDimension;
",4,0,0,0,0,0,0,0,0,5,25,4,0.03333,1
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,51,"        this.columns = columnDimension;
",4,0,0,0,0,0,0,0,0,5,31,4,0.03333,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,52,"        this.entries = new OpenIntToDoubleHashMap(0.0);
",2,0,0,1,2,0,0,2,0,5,47,4,0.03333,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,53,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03333,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,57,"        if (columnDimension < 1) {
",2,1,0,1,3,0,0,0,0,3,26,4,0.00388,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,60,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00388,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,53,"    protected AbstractRealMatrix(final int rowDimension, final int columnDimension) {
",6,0,0,1,3,3,0,0,0,9,81,2,0.00386,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,54,"        if (rowDimension < 1) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00386,0
defect4j,math,org/apache/commons/math/linear/RealLinearOperator,45,52,"public abstract class RealLinearOperator {
",2,0,0,0,1,2,0,0,0,4,42,1,0.00315,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,345,"        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {
",0,0,0,1,4,0,2,2,0,4,63,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,358,"                this.startRow    = startRow;
",4,0,0,0,0,0,0,0,0,5,28,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,359,"                this.startColumn = startColumn;
",4,0,0,0,0,0,0,0,0,5,31,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,360,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,365,"                destination[row - startRow][column - startColumn] = value;
",10,2,1,2,4,0,0,0,0,15,58,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,366,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,44,"    protected AbstractRealMatrix() {}
",2,0,0,2,4,1,0,0,0,3,33,2,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,55,"            throw new NotStrictlyPositiveException(rowDimension);
",2,0,0,1,2,0,0,2,0,4,53,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,58,"            throw new NotStrictlyPositiveException(columnDimension);
",2,0,0,1,2,0,0,2,0,4,56,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,71,"        MatrixUtils.checkAdditionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,45,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,73,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,74,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,75,"        final RealMatrix out = createMatrix(rowCount, columnCount);
",2,0,0,1,2,1,6,2,0,11,59,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,76,"        for (int row = 0; row < rowCount; ++row) {
",8,1,0,1,3,0,0,0,0,10,42,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,77,"            for (int col = 0; col < columnCount; ++col) {
",8,1,0,1,3,0,0,0,0,10,45,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,78,"                out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col));
",0,1,0,3,6,0,22,0,0,23,66,9,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,82,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,88,"        MatrixUtils.checkSubtractionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,48,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,90,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,91,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,92,"        final RealMatrix out = createMatrix(rowCount, columnCount);
",2,0,0,1,2,1,6,2,0,11,59,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,93,"        for (int row = 0; row < rowCount; ++row) {
",8,1,0,1,3,0,0,0,0,10,42,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,94,"            for (int col = 0; col < columnCount; ++col) {
",8,1,0,1,3,0,0,0,0,10,45,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,95,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));
",0,1,0,3,6,0,22,0,0,23,66,9,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,99,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,104,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,105,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,106,"        final RealMatrix out = createMatrix(rowCount, columnCount);
",2,0,0,1,2,1,6,2,0,11,59,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,107,"        for (int row = 0; row < rowCount; ++row) {
",8,1,0,1,3,0,0,0,0,10,42,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,108,"            for (int col = 0; col < columnCount; ++col) {
",8,1,0,1,3,0,0,0,0,10,45,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,109,"                out.setEntry(row, col, getEntry(row, col) + d);
",2,1,0,2,4,0,14,0,0,17,47,9,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,113,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,118,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,119,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,120,"        final RealMatrix out = createMatrix(rowCount, columnCount);
",2,0,0,1,2,1,6,2,0,11,59,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,121,"        for (int row = 0; row < rowCount; ++row) {
",8,1,0,1,3,0,0,0,0,10,42,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,122,"            for (int col = 0; col < columnCount; ++col) {
",8,1,0,1,3,0,0,0,0,10,45,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,123,"                out.setEntry(row, col, getEntry(row, col) * d);
",2,1,0,2,4,0,14,0,0,17,47,9,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,127,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,133,"        MatrixUtils.checkMultiplicationCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,51,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,135,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,136,"        final int nCols = m.getColumnDimension();
",2,0,0,1,2,1,4,0,0,7,41,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,137,"        final int nSum  = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,138,"        final RealMatrix out = createMatrix(nRows, nCols);
",2,0,0,1,2,1,6,2,0,11,50,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,139,"        for (int row = 0; row < nRows; ++row) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,140,"            for (int col = 0; col < nCols; ++col) {
",8,1,0,1,3,0,0,0,0,10,39,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,141,"                double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,9,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,142,"                for (int i = 0; i < nSum; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,143,"                    sum += getEntry(row, i) * m.getEntry(i, col);
",2,1,0,2,4,0,14,0,0,18,45,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,145,"                out.setEntry(row, col, sum);
",0,0,0,1,2,0,10,0,0,10,28,9,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,149,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,154,"        return m.multiply(this);
",0,0,0,1,2,1,4,0,0,4,24,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,159,"        if (p < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,160,"            throw new IllegalArgumentException(""p must be >= 0"");
",0,0,0,1,2,0,0,2,0,3,53,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,163,"        if (!isSquare()) {
",0,0,0,2,5,0,2,0,0,3,18,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,164,"            throw new NonSquareMatrixException(getRowDimension(), getColumnDimension());
",0,0,0,3,6,0,4,2,0,6,76,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,167,"        if (p == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,168,"            return MatrixUtils.createRealIdentityMatrix(this.getRowDimension());
",0,0,0,2,4,1,6,0,0,6,68,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,171,"        if (p == 1) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,172,"            return this.copy();
",0,0,0,1,2,1,2,0,0,2,19,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,175,"        final int power = p - 1;
",4,1,0,0,0,1,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,184,"        final char[] binaryRepresentation = Integer.toBinaryString(power).toCharArray();
",2,0,0,3,6,1,8,0,0,11,80,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,185,"        final ArrayList<Integer> nonZeroPositions = new ArrayList<Integer>();
",2,0,0,1,2,1,0,8,0,11,69,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,186,"        int maxI = -1;
",2,0,0,0,0,0,0,0,0,3,14,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,188,"        for (int i = 0; i < binaryRepresentation.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,55,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,189,"            if (binaryRepresentation[i] == '1') {
",0,1,1,2,5,0,0,0,0,6,37,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,190,"                final int pos = binaryRepresentation.length - i - 1;
",8,1,0,0,0,1,0,0,0,10,52,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,191,"                nonZeroPositions.add(pos);
",0,0,0,1,2,0,6,0,0,6,26,9,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,194,"                if (maxI == -1) {
",2,1,0,1,3,0,0,0,0,4,17,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,195,"                    maxI = pos;
",4,0,0,0,0,0,0,0,0,5,11,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,200,"        RealMatrix[] results = new RealMatrix[maxI + 1];
",4,1,0,2,4,0,0,4,0,9,48,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,201,"        results[0] = this.copy();
",0,0,1,2,4,0,2,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,203,"        for (int i = 1; i <= maxI; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,204,"            results[i] = results[i-1].multiply(results[i-1]);
",4,2,1,4,8,0,2,0,0,17,49,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,207,"        RealMatrix result = this.copy();
",2,0,0,1,2,0,2,2,0,6,32,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,209,"        for (Integer i : nonZeroPositions) {
",4,0,0,1,3,0,0,2,0,6,36,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,210,"            result = result.multiply(results[i]);
",2,0,1,2,4,0,4,0,0,11,37,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,211,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,213,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,218,"        final double[][] data = new double[getRowDimension()][getColumnDimension()];
",2,0,0,6,12,1,4,0,0,7,76,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,220,"        for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,221,"            final double[] dataI = data[i];
",2,0,1,2,4,1,0,0,0,7,31,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,222,"            for (int j = 0; j < dataI.length; ++j) {
",10,1,0,1,3,0,0,0,0,12,40,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,223,"                dataI[j] = getEntry(i, j);
",0,0,1,2,4,0,6,0,0,11,26,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,227,"        return data;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,232,"        return walkInColumnOrder(new RealMatrixPreservingVisitor() {
",0,0,0,1,4,1,2,2,0,4,60,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,270,"        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {
",0,0,0,1,4,1,2,2,0,4,63,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,297,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,299,"        final RealMatrix subMatrix =
",2,0,0,0,0,1,0,2,0,5,28,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,301,"        for (int i = startRow; i <= endRow; ++i) {
",10,1,0,1,3,0,0,0,0,12,42,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,302,"            for (int j = startColumn; j <= endColumn; ++j) {
",10,1,0,1,3,0,0,0,0,12,48,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,303,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));
",8,2,0,2,4,0,10,0,0,20,66,9,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,307,"        return subMatrix;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,313,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);
",0,0,0,1,2,0,8,0,0,8,69,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,316,"        final RealMatrix subMatrix =
",2,0,0,0,0,1,0,2,0,5,28,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,318,"        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {
",0,0,0,1,4,0,4,2,0,6,71,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,328,"        return subMatrix;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,336,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,337,"        final int rowsCount    = endRow + 1 - startRow;
",6,2,0,0,0,1,0,0,0,9,47,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,338,"        final int columnsCount = endColumn + 1 - startColumn;
",6,2,0,0,0,1,0,0,0,9,53,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,339,"        if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {
",10,3,1,4,9,0,0,0,0,15,81,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,340,"            throw new MatrixDimensionMismatchException(destination.length, destination[0].length,
",6,0,1,1,3,0,0,2,0,10,85,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,345,"        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {
",0,0,0,1,4,0,2,2,0,4,63,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,369,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,374,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);
",0,0,0,1,2,0,8,0,0,8,69,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,375,"        if ((destination.length < selectedRows.length) ||
",8,2,0,1,3,0,0,0,0,10,49,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,377,"            throw new MatrixDimensionMismatchException(destination.length, destination[0].length,
",6,0,1,1,3,0,0,2,0,10,85,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,382,"        for (int i = 0; i < selectedRows.length; i++) {
",10,1,0,1,3,0,0,0,0,12,47,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,383,"            final double[] destinationI = destination[i];
",2,0,1,2,4,1,0,0,0,7,45,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,384,"            for (int j = 0; j < selectedColumns.length; j++) {
",10,1,0,1,3,0,0,0,0,12,50,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,385,"                destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]);
",0,0,1,4,8,0,2,0,0,15,64,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,388,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,393,"        MathUtils.checkNotNull(subMatrix);
",0,0,0,1,2,0,6,0,0,6,34,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,394,"        final int nRows = subMatrix.length;
",6,0,0,0,0,1,0,0,0,7,35,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,395,"        if (nRows == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,396,"            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
",4,0,0,1,2,0,0,2,0,6,61,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,399,"        final int nCols = subMatrix[0].length;
",4,0,1,1,2,1,0,0,0,7,38,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,400,"        if (nCols == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,401,"            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
",4,0,0,1,2,0,0,2,0,6,64,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,404,"        for (int r = 1; r < nRows; ++r) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,405,"            if (subMatrix[r].length != nCols) {
",4,1,1,2,5,0,0,0,0,9,35,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,406,"                throw new DimensionMismatchException(nCols, subMatrix[r].length);
",4,0,1,2,4,0,0,2,0,10,65,9,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,410,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,411,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,412,"        MatrixUtils.checkRowIndex(this, nRows + row - 1);
",4,2,0,1,2,0,4,0,0,10,49,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,413,"        MatrixUtils.checkColumnIndex(this, nCols + column - 1);
",4,2,0,1,2,0,4,0,0,10,55,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,415,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,416,"            for (int j = 0; j < nCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,417,"                setEntry(row + i, column + j, subMatrix[i][j]);
",8,2,1,3,6,0,2,0,0,18,47,9,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,420,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,424,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,425,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,426,"        final RealMatrix out = createMatrix(1, nCols);
",2,0,0,1,2,1,4,2,0,9,46,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,427,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,428,"            out.setEntry(0, i, getEntry(row, i));
",0,0,0,2,4,0,12,0,0,12,37,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,431,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,436,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,437,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,438,"        if ((matrix.getRowDimension() != 1) ||
",0,2,0,2,5,0,4,0,0,6,38,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,440,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),
",0,0,0,1,3,0,4,2,0,6,68,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,444,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,445,"            setEntry(row, i, matrix.getEntry(0, i));
",0,0,0,2,4,0,12,0,0,12,40,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,447,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,451,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,452,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,453,"        final RealMatrix out = createMatrix(nRows, 1);
",2,0,0,1,2,1,4,2,0,9,46,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,454,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,455,"            out.setEntry(i, 0, getEntry(i, column));
",0,0,0,2,4,0,12,0,0,12,40,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,458,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,463,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,464,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,465,"        if ((matrix.getRowDimension() != nRows) ||
",2,2,0,2,5,0,4,0,0,8,42,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,467,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),
",0,0,0,1,3,0,4,2,0,6,68,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,471,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,472,"            setEntry(i, column, matrix.getEntry(i, 0));
",0,0,0,2,4,0,12,0,0,12,43,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,474,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,478,"        return new ArrayRealVector(getRow(row), false);
",0,0,0,2,4,1,4,2,0,7,47,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,483,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,484,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,485,"        if (vector.getDimension() != nCols) {
",2,1,0,2,5,0,4,0,0,7,37,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,486,"            throw new MatrixDimensionMismatchException(1, vector.getDimension(),
",0,0,0,1,3,0,4,2,0,6,68,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,489,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,490,"            setEntry(row, i, vector.getEntry(i));
",0,0,0,2,4,0,12,0,0,12,37,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,492,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,496,"        return new ArrayRealVector(getColumn(column), false);
",0,0,0,2,4,1,4,2,0,7,53,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,501,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,502,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,503,"        if (vector.getDimension() != nRows) {
",2,1,0,2,5,0,4,0,0,7,37,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,504,"            throw new MatrixDimensionMismatchException(vector.getDimension(), 1,
",0,0,0,1,3,0,4,2,0,6,68,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,507,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,508,"            setEntry(i, column, vector.getEntry(i));
",0,0,0,2,4,0,12,0,0,12,40,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,510,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,514,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,515,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,516,"        final double[] out = new double[nCols];
",2,0,1,2,4,1,0,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,517,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,518,"            out[i] = getEntry(row, i);
",0,0,1,2,4,0,6,0,0,11,26,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,521,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,526,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,527,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,528,"        if (array.length != nCols) {
",6,1,0,1,3,0,0,0,0,7,28,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,529,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);
",6,0,0,1,2,0,0,2,0,8,70,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,531,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,532,"            setEntry(row, i, array[i]);
",0,0,1,2,4,0,6,0,0,10,27,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,534,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,538,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,539,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,540,"        final double[] out = new double[nRows];
",2,0,1,2,4,1,0,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,541,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,542,"            out[i] = getEntry(i, column);
",0,0,1,2,4,0,6,0,0,11,29,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,545,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,550,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,551,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,552,"        if (array.length != nRows) {
",6,1,0,1,3,0,0,0,0,7,28,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,553,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);
",6,0,0,1,2,0,0,2,0,8,70,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,555,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,556,"            setEntry(i, column, array[i]);
",0,0,1,2,4,0,6,0,0,10,30,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,558,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,574,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,575,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,576,"        final RealMatrix out = createMatrix(nCols, nRows);
",2,0,0,1,2,1,6,2,0,11,50,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,577,"        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {
",0,0,0,1,4,0,2,2,0,4,63,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,587,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,592,"        return getColumnDimension() == getRowDimension();
",0,1,0,2,4,1,4,0,0,5,49,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,615,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,616,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,617,"        if (nRows != nCols) {
",4,1,0,1,3,0,0,0,0,5,21,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,618,"            throw new NonSquareMatrixException(nRows, nCols);
",4,0,0,1,2,0,0,2,0,6,49,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,620,"        double trace = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,621,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,622,"            trace += getEntry(i, i);
",2,0,0,1,2,0,6,0,0,9,24,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,624,"        return trace;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,629,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,630,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,631,"        if (v.length != nCols) {
",6,1,0,1,3,0,0,0,0,7,24,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,632,"            throw new DimensionMismatchException(v.length, nCols);
",6,0,0,1,2,0,0,2,0,8,54,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,635,"        final double[] out = new double[nRows];
",2,0,1,2,4,1,0,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,636,"        for (int row = 0; row < nRows; ++row) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,637,"            double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,638,"            for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,639,"                sum += getEntry(row, i) * v[i];
",2,1,1,2,4,0,6,0,0,14,31,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,641,"            out[row] = sum;
",2,0,1,1,2,0,0,0,0,7,15,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,644,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,651,"            return new ArrayRealVector(operate(((ArrayRealVector) v).getDataRef()), false);
",2,0,0,5,10,1,4,4,0,11,79,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,652,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,653,"            final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,654,"            final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,655,"            if (v.getDimension() != nCols) {
",2,1,0,2,5,0,4,0,0,7,32,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,656,"                throw new DimensionMismatchException(v.getDimension(), nCols);
",2,0,0,2,4,0,4,2,0,8,62,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,659,"            final double[] out = new double[nRows];
",2,0,1,2,4,1,0,0,0,5,39,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,660,"            for (int row = 0; row < nRows; ++row) {
",8,1,0,1,3,0,0,0,0,10,39,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,661,"                double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,662,"                for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,9,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,663,"                    sum += getEntry(row, i) * v.getEntry(i);
",2,1,0,2,4,0,12,0,0,16,40,11,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,665,"                out[row] = sum;
",2,0,1,1,2,0,0,0,0,7,15,9,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,668,"            return new ArrayRealVector(out, false);
",2,0,0,1,2,1,0,2,0,5,39,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,675,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,676,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,677,"        if (v.length != nRows) {
",6,1,0,1,3,0,0,0,0,7,24,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,678,"            throw new DimensionMismatchException(v.length, nRows);
",6,0,0,1,2,0,0,2,0,8,54,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,681,"        final double[] out = new double[nCols];
",2,0,1,2,4,1,0,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,682,"        for (int col = 0; col < nCols; ++col) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,683,"            double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,684,"            for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,685,"                sum += getEntry(i, col) * v[i];
",2,1,1,2,4,0,6,0,0,14,31,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,687,"            out[col] = sum;
",2,0,1,1,2,0,0,0,0,7,15,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,690,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,696,"            return new ArrayRealVector(preMultiply(((ArrayRealVector) v).getDataRef()), false);
",2,0,0,5,10,1,4,4,0,11,83,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,697,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,699,"            final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,700,"            final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,701,"            if (v.getDimension() != nRows) {
",2,1,0,2,5,0,4,0,0,7,32,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,702,"                throw new DimensionMismatchException(v.getDimension(), nRows);
",2,0,0,2,4,0,4,2,0,8,62,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,705,"            final double[] out = new double[nCols];
",2,0,1,2,4,1,0,0,0,5,39,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,706,"            for (int col = 0; col < nCols; ++col) {
",8,1,0,1,3,0,0,0,0,10,39,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,707,"                double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,708,"                for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,9,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,709,"                    sum += getEntry(i, col) * v.getEntry(i);
",2,1,0,2,4,0,12,0,0,16,40,11,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,711,"                out[col] = sum;
",2,0,1,1,2,0,0,0,0,7,15,9,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,714,"            return new ArrayRealVector(out, false);
",2,0,0,1,2,1,0,2,0,5,39,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,720,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,721,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,722,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,723,"        for (int row = 0; row < rows; ++row) {
",8,1,0,1,3,0,0,0,0,10,38,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,724,"            for (int column = 0; column < columns; ++column) {
",8,1,0,1,3,0,0,0,0,10,50,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,725,"                final double oldValue = getEntry(row, column);
",2,0,0,1,2,1,6,0,0,9,46,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,726,"                final double newValue = visitor.visit(row, column, oldValue);
",2,0,0,1,2,1,10,0,0,13,61,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,727,"                setEntry(row, column, newValue);
",0,0,0,1,2,0,8,0,0,8,32,9,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,730,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,735,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,736,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,737,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,738,"        for (int row = 0; row < rows; ++row) {
",8,1,0,1,3,0,0,0,0,10,38,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,739,"            for (int column = 0; column < columns; ++column) {
",8,1,0,1,3,0,0,0,0,10,50,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,740,"                visitor.visit(row, column, getEntry(row, column));
",0,0,0,2,4,0,14,0,0,14,50,9,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,743,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,750,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,751,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,753,"        for (int row = startRow; row <= endRow; ++row) {
",10,1,0,1,3,0,0,0,0,12,48,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,754,"            for (int column = startColumn; column <= endColumn; ++column) {
",10,1,0,1,3,0,0,0,0,12,63,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,755,"                final double oldValue = getEntry(row, column);
",2,0,0,1,2,1,6,0,0,9,46,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,756,"                final double newValue = visitor.visit(row, column, oldValue);
",2,0,0,1,2,1,10,0,0,13,61,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,757,"                setEntry(row, column, newValue);
",0,0,0,1,2,0,8,0,0,8,32,9,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,760,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,767,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,768,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,770,"        for (int row = startRow; row <= endRow; ++row) {
",10,1,0,1,3,0,0,0,0,12,48,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,771,"            for (int column = startColumn; column <= endColumn; ++column) {
",10,1,0,1,3,0,0,0,0,12,63,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,772,"                visitor.visit(row, column, getEntry(row, column));
",0,0,0,2,4,0,14,0,0,14,50,9,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,775,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,780,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,781,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,782,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,783,"        for (int column = 0; column < columns; ++column) {
",8,1,0,1,3,0,0,0,0,10,50,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,784,"            for (int row = 0; row < rows; ++row) {
",8,1,0,1,3,0,0,0,0,10,38,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,785,"                final double oldValue = getEntry(row, column);
",2,0,0,1,2,1,6,0,0,9,46,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,786,"                final double newValue = visitor.visit(row, column, oldValue);
",2,0,0,1,2,1,10,0,0,13,61,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,787,"                setEntry(row, column, newValue);
",0,0,0,1,2,0,8,0,0,8,32,9,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,790,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,795,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,796,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,797,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,798,"        for (int column = 0; column < columns; ++column) {
",8,1,0,1,3,0,0,0,0,10,50,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,799,"            for (int row = 0; row < rows; ++row) {
",8,1,0,1,3,0,0,0,0,10,38,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,800,"                visitor.visit(row, column, getEntry(row, column));
",0,0,0,2,4,0,14,0,0,14,50,9,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,803,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,810,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,811,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,813,"        for (int column = startColumn; column <= endColumn; ++column) {
",10,1,0,1,3,0,0,0,0,12,63,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,814,"            for (int row = startRow; row <= endRow; ++row) {
",10,1,0,1,3,0,0,0,0,12,48,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,815,"                final double oldValue = getEntry(row, column);
",2,0,0,1,2,1,6,0,0,9,46,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,816,"                final double newValue = visitor.visit(row, column, oldValue);
",2,0,0,1,2,1,10,0,0,13,61,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,817,"                setEntry(row, column, newValue);
",0,0,0,1,2,0,8,0,0,8,32,9,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,820,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,827,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,828,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,830,"        for (int column = startColumn; column <= endColumn; ++column) {
",10,1,0,1,3,0,0,0,0,12,63,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,831,"            for (int row = startRow; row <= endRow; ++row) {
",10,1,0,1,3,0,0,0,0,12,48,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,832,"                visitor.visit(row, column, getEntry(row, column));
",0,0,0,2,4,0,14,0,0,14,50,9,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,835,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,840,"        return walkInRowOrder(visitor);
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,845,"        return walkInRowOrder(visitor);
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,852,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,1,12,0,0,12,73,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,859,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,1,12,0,0,12,73,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,868,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,869,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,870,"        final StringBuffer res = new StringBuffer();
",2,0,0,1,2,1,0,4,0,7,44,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,871,"        String fullClassName = getClass().getName();
",2,0,0,2,4,0,4,2,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,872,"        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);
",2,1,0,2,4,0,8,2,0,14,84,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,873,"        res.append(shortClassName).append(""{"");
",0,0,0,2,5,0,8,0,0,9,39,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,875,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,876,"            if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,877,"                res.append("","");
",0,0,0,1,2,0,4,0,0,5,16,9,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,879,"            res.append(""{"");
",0,0,0,1,3,0,4,0,0,5,16,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,880,"            for (int j = 0; j < nCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,881,"                if (j > 0) {
",2,1,0,1,3,0,0,0,0,3,12,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,882,"                    res.append("","");
",0,0,0,1,2,0,4,0,0,5,16,11,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,884,"                res.append(getEntry(i, j));
",0,0,0,2,4,0,10,0,0,10,27,9,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,886,"            res.append(""}"");
",0,0,0,1,3,0,4,0,0,5,16,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,889,"        res.append(""}"");
",0,0,0,1,3,0,4,0,0,5,16,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,890,"        return res.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,903,"        if (object == this ) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,904,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,906,"        if (object instanceof RealMatrix == false) {
",2,1,0,1,3,0,0,2,0,6,44,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,907,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,909,"        RealMatrix m = (RealMatrix) object;
",4,0,0,1,2,0,0,4,0,8,35,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,910,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,911,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,912,"        if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {
",4,3,0,3,7,0,8,0,0,15,70,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,913,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,915,"        for (int row = 0; row < nRows; ++row) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,916,"            for (int col = 0; col < nCols; ++col) {
",8,1,0,1,3,0,0,0,0,10,39,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,917,"                if (getEntry(row, col) != m.getEntry(row, col)) {
",0,1,0,3,7,0,14,0,0,15,49,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,918,"                    return false;
",0,0,0,0,0,1,0,0,0,1,13,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,922,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,932,"        int ret = 7;
",2,0,0,0,0,0,0,0,0,2,12,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,933,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,934,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,935,"        ret = ret * 31 + nRows;
",6,2,0,0,0,0,0,0,0,9,23,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,936,"        ret = ret * 31 + nCols;
",6,2,0,0,0,0,0,0,0,9,23,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,937,"        for (int row = 0; row < nRows; ++row) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,938,"            for (int col = 0; col < nCols; ++col) {
",8,1,0,1,3,0,0,0,0,10,39,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,939,"               ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) *
",8,8,0,3,6,0,0,0,0,17,48,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,943,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,232,"        return walkInColumnOrder(new RealMatrixPreservingVisitor() {
",0,0,0,1,4,1,2,2,0,4,60,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,247,"                this.endRow = endRow;
",4,0,0,0,0,0,0,0,0,5,21,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,248,"                columnSum   = 0;
",2,0,0,0,0,0,0,0,0,3,16,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,249,"                maxColSum   = 0;
",2,0,0,0,0,0,0,0,0,3,16,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,250,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,254,"                columnSum += FastMath.abs(value);
",2,0,0,1,2,0,6,0,0,9,33,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,255,"                if (row == endRow) {
",4,1,0,1,3,0,0,0,0,5,20,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,256,"                    maxColSum = FastMath.max(maxColSum, columnSum);
",2,0,0,1,2,0,8,0,0,11,47,12,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,257,"                    columnSum = 0;
",2,0,0,0,0,0,0,0,0,3,14,12,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,259,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,263,"                return maxColSum;
",2,0,0,0,0,1,0,0,0,2,17,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1231,"            class UnmodifiableEntry extends Entry {
",2,0,0,0,1,0,0,2,0,4,39,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1235,"                    return v.getEntry(getIndex());
",0,0,0,2,4,1,6,0,0,6,30,11,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1241,"                    throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,12,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,797,"        public Entry() {
",2,0,0,1,3,1,0,0,0,3,16,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,798,"            setIndex(0);
",0,0,0,1,2,0,2,0,0,2,12,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,799,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,807,"            return getEntry(getIndex());
",0,0,0,2,4,1,4,0,0,4,28,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,816,"            setEntry(getIndex(), value);
",0,0,0,2,4,0,6,0,0,6,28,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,817,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,825,"            return index;
",2,0,0,0,0,1,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,834,"            this.index = index;
",4,0,0,0,0,0,0,0,0,5,19,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,835,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,936,"        return new RealVector() {
",0,0,0,1,3,1,0,2,0,2,25,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1231,"            class UnmodifiableEntry extends Entry {
",2,0,0,0,1,0,0,2,0,4,39,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,940,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,946,"                return v.map(function);
",0,0,0,1,2,1,6,0,0,6,23,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,952,"                final Iterator<Entry> i = v.iterator();
",2,0,0,1,2,1,4,4,0,11,39,9,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,953,"                return new Iterator<Entry>() {
",0,0,0,1,3,1,0,4,0,4,30,12,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,978,"                final Iterator<Entry> i = v.sparseIterator();
",2,0,0,1,2,1,4,4,0,11,45,9,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,980,"                return new Iterator<Entry>() {
",0,0,0,1,3,1,0,4,0,4,30,12,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1005,"                return v.copy();
",0,0,0,1,2,1,4,0,0,4,16,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1011,"                return v.add(w);
",0,0,0,1,2,1,6,0,0,6,16,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1017,"                return v.subtract(w);
",0,0,0,1,2,1,6,0,0,6,21,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1023,"                return v.mapAdd(d);
",0,0,0,1,2,1,6,0,0,6,19,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1029,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1035,"                return v.mapSubtract(d);
",0,0,0,1,2,1,6,0,0,6,24,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1041,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1047,"                return v.mapMultiply(d);
",0,0,0,1,2,1,6,0,0,6,24,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1053,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1059,"                return v.mapDivide(d);
",0,0,0,1,2,1,6,0,0,6,22,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1065,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1071,"                return v.ebeMultiply(w);
",0,0,0,1,2,1,6,0,0,6,24,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1077,"                return v.ebeDivide(w);
",0,0,0,1,2,1,6,0,0,6,22,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1083,"                return v.dotProduct(w);
",0,0,0,1,2,1,6,0,0,6,23,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1089,"                return v.cosine(w);
",0,0,0,1,2,1,6,0,0,6,19,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1095,"                return v.getNorm();
",0,0,0,1,2,1,4,0,0,4,19,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1101,"                return v.getL1Norm();
",0,0,0,1,2,1,4,0,0,4,21,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1107,"                return v.getLInfNorm();
",0,0,0,1,2,1,4,0,0,4,23,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1113,"                return v.getDistance(w);
",0,0,0,1,2,1,6,0,0,6,24,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1119,"                return v.getL1Distance(w);
",0,0,0,1,2,1,6,0,0,6,26,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1125,"                return v.getLInfDistance(w);
",0,0,0,1,2,1,6,0,0,6,28,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1131,"                return v.unitVector();
",0,0,0,1,2,1,4,0,0,4,22,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1137,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1143,"                return v.projection(w);
",0,0,0,1,2,1,6,0,0,6,23,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1149,"                return v.outerProduct(w);
",0,0,0,1,2,1,6,0,0,6,25,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1155,"                return v.getEntry(index);
",0,0,0,1,2,1,6,0,0,6,25,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1161,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1167,"                return v.getDimension();
",0,0,0,1,2,1,4,0,0,4,24,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1173,"                return v.append(w);
",0,0,0,1,2,1,6,0,0,6,19,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1179,"                return v.append(d);
",0,0,0,1,2,1,6,0,0,6,19,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1185,"                return v.getSubVector(index, n);
",0,0,0,1,2,1,8,0,0,8,32,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1191,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1197,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1203,"                return v.toArray();
",0,0,0,1,2,1,4,0,0,4,19,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1209,"                return v.isNaN();
",0,0,0,1,2,1,4,0,0,4,17,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1215,"                return v.isInfinite();
",0,0,0,1,2,1,4,0,0,4,22,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1221,"                return v.combine(a, b, y);
",0,0,0,1,2,1,10,0,0,10,26,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1227,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,58,"public abstract class RealVector {
",2,0,0,0,1,2,0,0,0,4,34,1,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,851,"    protected class SparseEntryIterator implements Iterator<Entry> {
",2,0,0,0,1,1,0,4,0,7,64,2,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,149,"        checkVectorDimensions(v.getDimension());
",0,0,0,2,4,0,6,0,0,6,40,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,150,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,160,"        int d = getDimension();
",2,0,0,1,2,0,2,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,161,"        if (d != n) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,162,"            throw new DimensionMismatchException(d, n);
",4,0,0,1,2,0,0,2,0,6,43,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,164,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,173,"        if (index < 0 ||
",2,2,0,0,1,0,0,0,0,4,16,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,175,"            throw new OutOfRangeException(LocalizedFormats.INDEX,
",4,0,0,0,1,0,0,2,0,6,53,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,178,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,190,"        RealVector result = v.copy();
",2,0,0,1,2,0,4,2,0,8,29,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,191,"        Iterator<Entry> it = sparseIterator();
",2,0,0,1,2,0,2,4,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,193,"        while (it.hasNext() && (e = it.next()) != null) {
",2,2,0,4,9,0,8,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,194,"            final int index = e.getIndex();
",2,0,0,1,2,1,4,0,0,7,31,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,195,"            result.setEntry(index, e.getValue() + result.getEntry(index));
",0,1,0,3,6,0,16,0,0,17,62,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,196,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,197,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,210,"        RealVector result = v.copy();
",2,0,0,1,2,0,4,2,0,8,29,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,211,"        Iterator<Entry> it = sparseIterator();
",2,0,0,1,2,0,2,4,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,213,"        while (it.hasNext() && (e = it.next()) != null) {
",2,2,0,4,9,0,8,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,214,"            final int index = e.getIndex();
",2,0,0,1,2,1,4,0,0,7,31,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,215,"            result.setEntry(index, e.getValue() - result.getEntry(index));
",0,1,0,3,6,0,16,0,0,17,62,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,216,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,217,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,228,"        return copy().mapAddToSelf(d);
",0,0,0,2,4,1,6,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,239,"        if (d != 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,240,"            return mapToSelf(FunctionUtils.fix2ndArgument(new Add(), d));
",0,0,0,3,6,1,8,2,0,10,61,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,242,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,261,"        checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,262,"        double d = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,263,"        Iterator<Entry> it = sparseIterator();
",2,0,0,1,2,0,2,4,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,265,"        while (it.hasNext() && (e = it.next()) != null) {
",2,2,0,4,9,0,8,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,266,"            d += e.getValue() * v.getEntry(e.getIndex());
",2,1,0,3,6,0,12,0,0,16,45,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,268,"        return d;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,279,"        final double norm = getNorm();
",2,0,0,1,2,1,2,0,0,5,30,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,280,"        final double vNorm = v.getNorm();
",2,0,0,1,2,1,4,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,282,"        if (norm == 0 ||
",2,2,0,0,1,0,0,0,0,4,16,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,284,"            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
",4,0,0,1,2,0,0,2,0,6,62,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,286,"        return dotProduct(v) / (norm * vNorm);
",4,2,0,2,4,1,4,0,0,10,38,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,324,"        checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,325,"        double d = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,326,"        Iterator<Entry> it = iterator();
",2,0,0,1,2,0,2,4,0,8,32,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,328,"        while (it.hasNext() && (e = it.next()) != null) {
",2,2,0,4,9,0,8,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,329,"            final double diff = e.getValue() - v.getEntry(e.getIndex());
",2,1,0,3,6,1,12,0,0,16,60,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,330,"            d += diff * diff;
",6,1,0,0,0,0,0,0,0,8,17,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,331,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,332,"        return FastMath.sqrt(d);
",0,0,0,1,2,1,6,0,0,6,24,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,346,"        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,347,"        Iterator<Entry> it = sparseIterator();
",2,0,0,1,2,0,2,4,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,349,"        while (it.hasNext() && (e = it.next()) != null) {
",2,2,0,4,9,0,8,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,350,"            final double value = e.getValue();
",2,0,0,1,2,1,4,0,0,7,34,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,351,"            sum += value * value;
",6,1,0,0,0,0,0,0,0,8,21,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,352,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,353,"        return FastMath.sqrt(sum);
",0,0,0,1,2,1,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,367,"        double norm = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,368,"        Iterator<Entry> it = sparseIterator();
",2,0,0,1,2,0,2,4,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,370,"        while (it.hasNext() && (e = it.next()) != null) {
",2,2,0,4,9,0,8,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,371,"            norm += FastMath.abs(e.getValue());
",2,0,0,2,4,0,8,0,0,11,35,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,373,"        return norm;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,387,"        double norm = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,388,"        Iterator<Entry> it = sparseIterator();
",2,0,0,1,2,0,2,4,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,390,"        while (it.hasNext() && (e = it.next()) != null) {
",2,2,0,4,9,0,8,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,391,"            norm = FastMath.max(norm, FastMath.abs(e.getValue()));
",2,0,0,3,6,0,14,0,0,17,54,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,393,"        return norm;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,408,"        checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,409,"        double d = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,410,"        Iterator<Entry> it = iterator();
",2,0,0,1,2,0,2,4,0,8,32,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,412,"        while (it.hasNext() && (e = it.next()) != null) {
",2,2,0,4,9,0,8,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,413,"            d += FastMath.abs(e.getValue() - v.getEntry(e.getIndex()));
",2,1,0,4,8,0,16,0,0,20,59,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,415,"        return d;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,433,"        checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,434,"        double d = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,435,"        Iterator<Entry> it = iterator();
",2,0,0,1,2,0,2,4,0,8,32,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,437,"        while (it.hasNext() && (e = it.next()) != null) {
",2,2,0,4,9,0,8,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,438,"            d = FastMath.max(FastMath.abs(e.getValue() - v.getEntry(e.getIndex())), d);
",2,1,0,5,10,0,22,0,0,26,75,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,440,"        return d;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,450,"        int minIndex    = -1;
",2,0,0,0,0,0,0,0,0,3,21,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,451,"        double minValue = Double.POSITIVE_INFINITY;
",6,0,0,0,0,0,0,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,452,"        Iterator<Entry> iterator = iterator();
",2,0,0,1,2,0,2,4,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,453,"        while (iterator.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,454,"            final Entry entry = iterator.next();
",2,0,0,1,2,1,4,2,0,9,36,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,455,"            if (entry.getValue() <= minValue) {
",2,1,0,2,5,0,4,0,0,7,35,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,456,"                minIndex = entry.getIndex();
",2,0,0,1,2,0,4,0,0,7,28,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,457,"                minValue = entry.getValue();
",2,0,0,1,2,0,4,0,0,7,28,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,459,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,460,"        return minIndex;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,470,"        final int minIndex = getMinIndex();
",2,0,0,1,2,1,2,0,0,5,35,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,471,"        return minIndex < 0 ? Double.NaN : getEntry(minIndex);
",6,1,0,1,2,1,4,0,0,11,54,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,481,"        int maxIndex    = -1;
",2,0,0,0,0,0,0,0,0,3,21,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,482,"        double maxValue = Double.NEGATIVE_INFINITY;
",6,0,0,0,0,0,0,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,483,"        Iterator<Entry> iterator = iterator();
",2,0,0,1,2,0,2,4,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,484,"        while (iterator.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,485,"            final Entry entry = iterator.next();
",2,0,0,1,2,1,4,2,0,9,36,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,486,"            if (entry.getValue() >= maxValue) {
",2,1,0,2,5,0,4,0,0,7,35,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,487,"                maxIndex = entry.getIndex();
",2,0,0,1,2,0,4,0,0,7,28,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,488,"                maxValue = entry.getValue();
",2,0,0,1,2,0,4,0,0,7,28,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,490,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,491,"        return maxIndex;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,501,"        final int maxIndex = getMaxIndex();
",2,0,0,1,2,1,2,0,0,5,35,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,502,"        return maxIndex < 0 ? Double.NaN : getEntry(maxIndex);
",6,1,0,1,2,1,4,0,0,11,54,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,514,"        return copy().mapMultiplyToSelf(d);
",0,0,0,2,4,1,6,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,525,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Multiply(), d));
",0,0,0,3,6,1,8,2,0,10,66,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,536,"        return copy().mapSubtractToSelf(d);
",0,0,0,2,4,1,6,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,547,"        return mapAddToSelf(-d);
",2,0,0,1,2,1,2,0,0,5,24,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,558,"        return copy().mapDivideToSelf(d);
",0,0,0,2,4,1,6,0,0,6,33,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,569,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Divide(), d));
",0,0,0,3,6,1,8,2,0,10,64,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,580,"        if (v instanceof SparseRealVector || this instanceof SparseRealVector) {
",2,1,0,1,3,0,0,4,0,7,72,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,581,"            product = new OpenMapRealMatrix(this.getDimension(),
",2,0,0,1,3,0,2,2,0,7,52,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,584,"            product = new Array2DRowRealMatrix(this.getDimension(),
",2,0,0,1,3,0,2,2,0,7,55,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,587,"        Iterator<Entry> thisIt = sparseIterator();
",2,0,0,1,2,0,2,4,0,8,42,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,588,"        Entry thisE = null;
",2,0,0,0,0,0,0,2,0,4,19,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,589,"        while (thisIt.hasNext() && (thisE = thisIt.next()) != null) {
",2,2,0,4,9,0,8,0,0,13,61,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,590,"            Iterator<Entry> otherIt = v.sparseIterator();
",2,0,0,1,2,0,4,4,0,10,45,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,591,"            Entry otherE = null;
",2,0,0,0,0,0,0,2,0,4,20,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,592,"            while (otherIt.hasNext() && (otherE = otherIt.next()) != null) {
",2,2,0,4,9,0,8,0,0,13,64,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,593,"                product.setEntry(thisE.getIndex(), otherE.getIndex(),
",0,0,0,2,5,0,12,0,0,12,53,9,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,596,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,598,"        return product;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,618,"        Iterator<Entry> it = iterator();
",2,0,0,1,2,0,2,4,0,8,32,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,619,"        Entry e = null;
",2,0,0,0,0,0,0,2,0,4,15,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,620,"        while (it.hasNext() && (e = it.next()) != null) {
",2,2,0,4,9,0,8,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,621,"            e.setValue(value);
",0,0,0,1,2,0,6,0,0,6,18,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,623,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,633,"        int dim = getDimension();
",2,0,0,1,2,0,2,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,634,"        double[] values = new double[dim];
",2,0,1,2,4,0,0,0,0,4,34,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,635,"        for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,636,"            values[i] = getEntry(i);
",0,0,1,2,4,0,4,0,0,9,24,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,638,"        return values;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,649,"        RealVector copy = copy();
",2,0,0,1,2,0,2,2,0,6,25,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,650,"        copy.unitize();
",0,0,0,1,2,0,4,0,0,4,15,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,651,"        return copy;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,662,"        mapDivideToSelf(getNorm());
",0,0,0,2,4,0,4,0,0,4,27,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,663,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,677,"        return new SparseEntryIterator();
",0,0,0,1,2,1,0,2,0,2,33,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,687,"        final int dim = getDimension();
",2,0,0,1,2,1,2,0,0,5,31,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,688,"        return new Iterator<Entry>() {
",0,0,0,1,3,1,0,4,0,4,30,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,725,"        return copy().mapToSelf(function);
",0,0,0,2,4,1,6,0,0,6,34,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,742,"        Iterator<Entry> it = (function.value(0) == 0) ? sparseIterator() : iterator();
",2,1,0,4,8,0,8,4,0,15,78,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,744,"        while (it.hasNext() && (e = it.next()) != null) {
",2,2,0,4,9,0,8,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,745,"            e.setValue(function.value(e.getValue()));
",0,0,0,3,6,0,12,0,0,12,41,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,747,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,764,"        return copy().combineToSelf(a, b, y);
",0,0,0,2,4,1,10,0,0,10,37,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,780,"        checkVectorDimensions(y);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,781,"        for (int i = 0; i < getDimension(); i++) {
",6,1,0,2,5,0,2,0,0,10,42,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,782,"            final double xi = getEntry(i);
",2,0,0,1,2,1,4,0,0,7,30,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,783,"            final double yi = y.getEntry(i);
",2,0,0,1,2,1,6,0,0,9,32,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,784,"            setEntry(i, a * xi + b * yi);
",8,3,0,1,2,0,4,0,0,15,29,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,786,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,936,"        return new RealVector() {
",0,0,0,1,3,1,0,2,0,2,25,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,688,"        return new Iterator<Entry>() {
",0,0,0,1,3,1,0,4,0,4,30,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,691,"            private int i = 0;
",2,0,0,0,0,1,0,0,0,3,18,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,694,"            private Entry e = new Entry();
",2,0,0,1,2,1,0,4,0,7,30,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,698,"                return i < dim;
",4,1,0,0,0,1,0,0,0,5,15,9,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,703,"                e.setIndex(i++);
",2,0,0,1,2,0,4,0,0,7,16,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,704,"                return e;
",2,0,0,0,0,1,0,0,0,2,9,9,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,709,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,270,"        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {
",0,0,0,1,4,1,2,2,0,4,63,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,279,"                sum = 0;
",2,0,0,0,0,0,0,0,0,3,8,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,280,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,284,"                sum += value * value;
",6,1,0,0,0,0,0,0,0,8,21,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,285,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,289,"                return FastMath.sqrt(sum);
",0,0,0,1,2,1,6,0,0,6,26,11,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,577,"        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {
",0,0,0,1,4,0,2,2,0,4,63,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,582,"                out.setEntry(column, row, value);
",0,0,0,1,2,0,10,0,0,10,33,11,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,583,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,860,"        protected SparseEntryIterator() {
",2,0,0,1,3,1,0,0,0,3,33,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,861,"            dim = getDimension();
",2,0,0,1,2,0,2,0,0,5,21,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,862,"            current = new Entry();
",2,0,0,1,2,0,0,2,0,5,22,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,863,"            next = new Entry();
",2,0,0,1,2,0,0,2,0,5,19,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,864,"            if (next.getValue() == 0) {
",0,1,0,2,5,0,4,0,0,5,27,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,865,"                advance(next);
",0,0,0,1,2,0,4,0,0,4,14,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,867,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,875,"            if (e == null) {
",2,1,0,1,3,0,0,0,0,3,16,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,876,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,879,"                e.setIndex(e.getIndex() + 1);
",0,1,0,2,4,0,8,0,0,9,29,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,880,"            } while (e.getIndex() < dim && e.getValue() == 0);
",2,3,0,3,7,0,8,0,0,13,50,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,881,"            if (e.getIndex() >= dim) {
",2,1,0,2,5,0,4,0,0,7,26,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,882,"                e.setIndex(-1);
",0,0,0,1,2,0,4,0,0,5,15,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,884,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,888,"            return next.getIndex() >= 0;
",0,1,0,1,2,1,4,0,0,5,28,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,893,"            int index = next.getIndex();
",2,0,0,1,2,0,4,0,0,6,28,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,894,"            if (index < 0) {
",2,1,0,1,3,0,0,0,0,3,16,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,895,"                throw new NoSuchElementException();
",0,0,0,1,2,0,0,2,0,2,35,9,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,897,"            current.setIndex(index);
",0,0,0,1,2,0,6,0,0,6,24,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,898,"            advance(next);
",0,0,0,1,2,0,4,0,0,4,14,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,899,"            return current;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,904,"            throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,851,"    protected class SparseEntryIterator implements Iterator<Entry> {
",2,0,0,0,1,1,0,4,0,7,64,2,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,953,"                return new Iterator<Entry>() {
",0,0,0,1,3,1,0,4,0,4,30,12,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,955,"                    private final UnmodifiableEntry e = new UnmodifiableEntry();
",2,0,0,1,2,2,0,4,0,8,60,12,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,959,"                        return i.hasNext();
",0,0,0,1,2,1,4,0,0,4,19,15,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,964,"                        e.setIndex(i.next().getIndex());
",0,0,0,3,6,0,10,0,0,10,32,15,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,965,"                        return e;
",2,0,0,0,0,1,0,0,0,2,9,14,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,970,"                        throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,16,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,980,"                return new Iterator<Entry>() {
",0,0,0,1,3,1,0,4,0,4,30,12,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,982,"                    private final UnmodifiableEntry e = new UnmodifiableEntry();
",2,0,0,1,2,2,0,4,0,8,60,12,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,986,"                        return i.hasNext();
",0,0,0,1,2,1,4,0,0,4,19,15,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,991,"                        e.setIndex(i.next().getIndex());
",0,0,0,3,6,0,10,0,0,10,32,15,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,992,"                        return e;
",2,0,0,0,0,1,0,0,0,2,9,14,0.00000,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,997,"                        throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,16,0.00000,0
defect4j,math,org/apache/commons/math/linear/MatrixDimensionMismatchException,45,45,"        super(LocalizedFormats.DIMENSIONS_MISMATCH_2x2,
",4,0,0,0,1,0,0,0,0,4,47,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/MatrixDimensionMismatchException,45,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/MatrixDimensionMismatchException,45,54,"        return getWrongDimension(0);
",0,0,0,1,2,1,2,0,0,2,28,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/MatrixDimensionMismatchException,45,60,"        return getExpectedDimension(0);
",0,0,0,1,2,1,2,0,0,2,31,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/MatrixDimensionMismatchException,45,66,"        return getWrongDimension(1);
",0,0,0,1,2,1,2,0,0,2,28,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/MatrixDimensionMismatchException,45,72,"        return getExpectedDimension(1);
",0,0,0,1,2,1,2,0,0,2,31,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/MultiDimensionMismatchException,45,45,"        this(LocalizedFormats.DIMENSIONS_MISMATCH, wrong, expected);
",8,0,0,1,2,0,0,0,0,8,60,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MultiDimensionMismatchException,45,46,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MultiDimensionMismatchException,45,59,"        super(specific, wrong, expected);
",6,0,0,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MultiDimensionMismatchException,45,60,"        this.wrong = wrong.clone();
",2,0,0,1,2,0,4,0,0,7,27,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MultiDimensionMismatchException,45,61,"        this.expected = expected.clone();
",2,0,0,1,2,0,4,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MultiDimensionMismatchException,45,62,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MultiDimensionMismatchException,45,68,"        return wrong.clone();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/MultiDimensionMismatchException,45,74,"        return expected.clone();
",0,0,0,1,2,1,4,0,0,4,24,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/MultiDimensionMismatchException,45,82,"        return wrong[index];
",0,0,1,1,2,1,0,0,0,4,20,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/MultiDimensionMismatchException,45,89,"        return expected[index];
",0,0,1,1,2,1,0,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,45,44,"                                        Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,45,45,"        context = new ExceptionContext(this);
",2,0,0,1,2,0,0,2,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,45,46,"        context.addMessage(pattern, args);
",0,0,0,1,2,0,8,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,45,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,45,51,"        return context;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,45,57,"        return context.getMessage();
",0,0,0,1,2,1,4,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,45,63,"        return context.getLocalizedMessage();
",0,0,0,1,2,1,4,0,0,4,37,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,64,"    public ExceptionContext(final Throwable throwable) {
",4,0,0,1,3,2,0,2,0,8,52,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,65,"        this.throwable = throwable;
",4,0,0,0,0,0,0,0,0,5,27,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,66,"        msgPatterns    = new ArrayList<Localizable>();
",2,0,0,1,2,0,0,4,0,7,46,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,67,"        msgArguments   = new ArrayList<Object[]>();
",2,0,0,2,4,0,0,4,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,68,"        context        = new HashMap<String, Object>();
",2,0,0,1,2,0,0,6,0,9,47,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,69,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,75,"        return throwable;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,87,"        msgPatterns.add(pattern);
",0,0,0,1,2,0,6,0,0,6,25,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,88,"        msgArguments.add(ArgUtils.flatten(arguments));
",0,0,0,2,4,0,10,0,0,10,46,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,89,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,100,"        context.put(key, value);
",0,0,0,1,2,0,8,0,0,8,24,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,101,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,110,"        return context.get(key);
",0,0,0,1,2,1,6,0,0,6,24,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,119,"        return context.keySet();
",0,0,0,1,2,1,4,0,0,4,24,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,128,"        return getMessage(Locale.US);
",4,0,0,1,2,1,2,0,0,6,29,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,137,"        return getMessage(Locale.getDefault());
",0,0,0,2,4,1,6,0,0,6,39,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,147,"        return buildMessage(locale, "": "");
",0,0,0,1,2,1,4,0,0,5,34,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,159,"        return buildMessage(locale, separator);
",0,0,0,1,2,1,6,0,0,6,39,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,171,"        final StringBuilder sb = new StringBuilder();
",2,0,0,1,2,1,0,4,0,7,45,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,172,"        int count = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,173,"        final int len = msgPatterns.size();
",2,0,0,1,2,1,4,0,0,7,35,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,174,"        for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,175,"            final Localizable pat = msgPatterns.get(i);
",2,0,0,1,2,1,6,2,0,11,43,6,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,176,"            final Object[] args = msgArguments.get(i);
",2,0,0,2,4,1,6,2,0,11,42,6,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,177,"            final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),
",2,0,0,1,3,1,6,4,0,13,75,6,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,179,"            sb.append(fmt.format(args));
",0,0,0,2,4,0,10,0,0,10,28,7,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,180,"            if (++count < len) {
",4,1,0,1,3,0,0,0,0,6,20,6,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,182,"                sb.append(separator);
",0,0,0,1,2,0,6,0,0,6,21,9,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,186,"        return sb.toString();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,197,"        out.writeObject(throwable);
",0,0,0,1,2,0,6,0,0,6,27,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,198,"        serializeMessages(out);
",0,0,0,1,2,0,4,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,199,"        serializeContext(out);
",0,0,0,1,2,0,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,200,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,211,"        throwable = (Throwable) in.readObject();
",2,0,0,2,4,0,4,2,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,212,"        deSerializeMessages(in);
",0,0,0,1,2,0,4,0,0,4,24,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,213,"        deSerializeContext(in);
",0,0,0,1,2,0,4,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,214,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,225,"        final int len = msgPatterns.size();
",2,0,0,1,2,1,4,0,0,7,35,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,226,"        out.writeInt(len);
",0,0,0,1,2,0,6,0,0,6,18,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,228,"        for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,229,"            final Localizable pat = msgPatterns.get(i);
",2,0,0,1,2,1,6,2,0,11,43,6,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,231,"            out.writeObject(pat);
",0,0,0,1,2,0,6,0,0,6,21,7,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,232,"            final Object[] args = msgArguments.get(i);
",2,0,0,2,4,1,6,2,0,11,42,6,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,233,"            final int aLen = args.length;
",6,0,0,0,0,1,0,0,0,7,29,6,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,235,"            out.writeInt(aLen);
",0,0,0,1,2,0,6,0,0,6,19,7,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,236,"            for (int j = 0; j < aLen; j++) {
",8,1,0,1,3,0,0,0,0,10,32,6,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,237,"                if (args[j] instanceof Serializable) {
",0,0,1,2,5,0,0,2,0,6,38,9,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,239,"                    out.writeObject(args[j]);
",0,0,1,2,4,0,4,0,0,8,25,11,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,242,"                    out.writeObject(nonSerializableReplacement(args[j]));
",0,0,1,3,6,0,6,0,0,10,53,11,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,246,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,259,"        final int len = in.readInt();
",2,0,0,1,2,1,4,0,0,7,29,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,260,"        msgPatterns = new ArrayList<Localizable>(len);
",4,0,0,1,2,0,0,4,0,9,46,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,261,"        msgArguments = new ArrayList<Object[]>(len);
",4,0,0,2,4,0,0,4,0,9,44,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,263,"        for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,265,"            final Localizable pat = (Localizable) in.readObject();
",2,0,0,2,4,1,4,4,0,11,54,6,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,266,"            msgPatterns.add(pat);
",0,0,0,1,2,0,6,0,0,6,21,7,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,268,"            final int aLen = in.readInt();
",2,0,0,1,2,1,4,0,0,7,30,6,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,269,"            final Object[] args = new Object[aLen];
",2,0,1,2,4,1,0,4,0,9,39,6,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,270,"            for (int j = 0; j < aLen; j++) {
",8,1,0,1,3,0,0,0,0,10,32,6,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,272,"                args[j] = in.readObject();
",0,0,1,2,4,0,4,0,0,9,26,8,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,274,"            msgArguments.add(args);
",0,0,0,1,2,0,6,0,0,6,23,7,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,276,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,287,"        final int len = context.keySet().size();
",2,0,0,2,4,1,6,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,288,"        out.writeInt(len);
",0,0,0,1,2,0,6,0,0,6,18,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,289,"        for (String key : context.keySet()) {
",2,0,0,2,5,0,4,2,0,8,37,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,291,"            out.writeObject(key);
",0,0,0,1,2,0,6,0,0,6,21,7,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,292,"            final Object value = context.get(key);
",2,0,0,1,2,1,6,2,0,11,38,6,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,293,"            if (value instanceof Serializable) {
",2,0,0,1,3,0,0,2,0,4,36,7,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,295,"                out.writeObject(value);
",0,0,0,1,2,0,6,0,0,6,23,9,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,298,"                out.writeObject(nonSerializableReplacement(value));
",0,0,0,2,4,0,8,0,0,8,51,9,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,300,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,301,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,314,"        final int len = in.readInt();
",2,0,0,1,2,1,4,0,0,7,29,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,315,"        context = new HashMap<String, Object>();
",2,0,0,1,2,0,0,6,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,316,"        for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,318,"            final String key = (String) in.readObject();
",2,0,0,2,4,1,4,4,0,11,44,6,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,320,"            final Object value = in.readObject();
",2,0,0,1,2,1,4,2,0,9,37,6,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,321,"            context.put(key, value);
",0,0,0,1,2,0,8,0,0,8,24,7,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,323,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,333,"        return ""[Object could not be serialized: "" + obj.getClass().getName() + ""]"";
",0,1,0,3,6,1,6,0,0,9,76,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/NonSquareMatrixException,45,40,"        super(LocalizedFormats.NON_SQUARE_MATRIX, wrong, expected);
",8,0,0,1,2,0,0,0,0,8,59,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/NonSquareMatrixException,45,41,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,45,44,"        super(specific, wrong, expected);
",6,0,0,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,45,45,"        dimension = expected;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,45,46,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,45,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);
",8,0,0,1,2,0,0,0,0,8,67,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,45,57,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,45,63,"        return dimension;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,45,46,"        super(pattern, wrong, arguments);
",6,0,0,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,45,47,"        argument = wrong;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,45,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,45,54,"        return argument;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,318,"        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {
",0,0,0,1,4,0,4,2,0,6,71,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,323,"                return getEntry(selectedRows[row], selectedColumns[column]);
",0,0,1,3,6,1,2,0,0,10,60,11,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,53,"    public ArrayRealVector() {
",2,0,0,1,3,1,0,0,0,3,26,2,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,54,"        data = new double[0];
",2,0,0,1,2,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,55,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,62,"    public ArrayRealVector(int size) {
",4,0,0,1,3,1,0,0,0,5,34,2,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,63,"        data = new double[size];
",2,0,1,1,2,0,0,0,0,5,24,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,64,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,72,"    public ArrayRealVector(int size, double preset) {
",6,0,0,1,3,1,0,0,0,7,49,2,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,73,"        data = new double[size];
",2,0,1,1,2,0,0,0,0,5,24,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,74,"        Arrays.fill(data, preset);
",0,0,0,1,2,0,8,0,0,8,26,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,75,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,83,"    public ArrayRealVector(double[] d) {
",4,0,0,2,5,1,0,0,0,5,36,2,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,84,"        data = d.clone();
",2,0,0,1,2,0,4,0,0,7,17,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,85,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,101,"    public ArrayRealVector(double[] d, boolean copyArray) {
",6,0,0,2,5,1,0,0,0,7,55,2,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,102,"        if (d == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,103,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,105,"        data = copyArray ? d.clone() :  d;
",6,0,0,1,2,0,4,0,0,11,34,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,106,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,118,"    public ArrayRealVector(double[] d, int pos, int size) {
",8,0,0,2,5,1,0,0,0,9,55,2,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,119,"        if (d == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,120,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,122,"        if (d.length < pos + size) {
",8,2,0,1,3,0,0,0,0,10,28,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,123,"            throw new NumberIsTooLargeException(pos + size, d.length, true);
",8,1,0,1,2,0,0,2,0,12,64,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,125,"        data = new double[size];
",2,0,1,1,2,0,0,0,0,5,24,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,126,"        System.arraycopy(d, pos, data, 0, size);
",0,0,0,1,2,0,12,0,0,12,40,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,127,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,134,"    public ArrayRealVector(Double[] d) {
",4,0,0,2,5,1,0,2,0,7,36,2,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,135,"        data = new double[d.length];
",6,0,0,1,2,0,0,0,0,7,28,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,136,"        for (int i = 0; i < d.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,137,"            data[i] = d[i].doubleValue();
",0,0,1,3,6,0,2,0,0,11,29,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,139,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,151,"    public ArrayRealVector(Double[] d, int pos, int size) {
",8,0,0,2,5,1,0,2,0,11,55,2,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,152,"        if (d == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,153,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,155,"        if (d.length < pos + size) {
",8,2,0,1,3,0,0,0,0,10,28,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,156,"            throw new NumberIsTooLargeException(pos + size, d.length, true);
",8,1,0,1,2,0,0,2,0,12,64,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,158,"        data = new double[size];
",2,0,1,1,2,0,0,0,0,5,24,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,159,"        for (int i = pos; i < pos + size; i++) {
",12,2,0,1,3,0,0,0,0,15,40,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,160,"            data[i - pos] = d[i].doubleValue();
",4,1,1,3,6,0,2,0,0,14,35,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,162,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,170,"    public ArrayRealVector(RealVector v) {
",4,0,0,1,3,1,0,2,0,7,38,2,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,171,"        if (v == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,172,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,174,"        data = new double[v.getDimension()];
",2,0,0,2,4,0,4,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,175,"        for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,176,"            data[i] = v.getEntry(i);
",0,0,1,2,4,0,6,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,178,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,187,"        this(v, true);
",2,0,0,1,2,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,188,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,197,"    public ArrayRealVector(ArrayRealVector v, boolean deep) {
",6,0,0,1,3,1,0,2,0,9,57,2,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,198,"        data = deep ? v.data.clone() : v.data;
",12,0,0,1,2,0,2,0,0,15,38,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,199,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,206,"    public ArrayRealVector(ArrayRealVector v1, ArrayRealVector v2) {
",6,0,0,1,3,1,0,4,0,11,64,2,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,207,"        data = new double[v1.data.length + v2.data.length];
",14,1,0,1,2,0,0,0,0,16,51,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,208,"        System.arraycopy(v1.data, 0, data, 0, v1.data.length);
",10,0,0,1,2,0,6,0,0,16,54,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,209,"        System.arraycopy(v2.data, 0, data, v1.data.length, v2.data.length);
",16,0,0,1,2,0,6,0,0,22,67,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,210,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,217,"    public ArrayRealVector(ArrayRealVector v1, RealVector v2) {
",6,0,0,1,3,1,0,4,0,11,59,2,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,218,"        final int l1 = v1.data.length;
",8,0,0,0,0,1,0,0,0,9,30,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,219,"        final int l2 = v2.getDimension();
",2,0,0,1,2,1,4,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,220,"        data = new double[l1 + l2];
",6,1,0,1,2,0,0,0,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,221,"        System.arraycopy(v1.data, 0, data, 0, l1);
",4,0,0,1,2,0,8,0,0,12,42,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,222,"        for (int i = 0; i < l2; ++i) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,223,"            data[l1 + i] = v2.getEntry(i);
",4,1,1,2,4,0,6,0,0,14,30,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,225,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,232,"    public ArrayRealVector(RealVector v1, ArrayRealVector v2) {
",6,0,0,1,3,1,0,4,0,11,59,2,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,233,"        final int l1 = v1.getDimension();
",2,0,0,1,2,1,4,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,234,"        final int l2 = v2.data.length;
",8,0,0,0,0,1,0,0,0,9,30,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,235,"        data = new double[l1 + l2];
",6,1,0,1,2,0,0,0,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,236,"        for (int i = 0; i < l1; ++i) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,237,"            data[i] = v1.getEntry(i);
",0,0,1,2,4,0,6,0,0,11,25,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,239,"        System.arraycopy(v2.data, 0, data, l1, l2);
",4,0,0,1,2,0,10,0,0,14,43,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,240,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,247,"    public ArrayRealVector(ArrayRealVector v1, double[] v2) {
",6,0,0,2,5,1,0,2,0,9,57,2,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,248,"        final int l1 = v1.getDimension();
",2,0,0,1,2,1,4,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,249,"        final int l2 = v2.length;
",6,0,0,0,0,1,0,0,0,7,25,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,250,"        data = new double[l1 + l2];
",6,1,0,1,2,0,0,0,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,251,"        System.arraycopy(v1.data, 0, data, 0, l1);
",4,0,0,1,2,0,8,0,0,12,42,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,252,"        System.arraycopy(v2, 0, data, l1, l2);
",0,0,0,1,2,0,12,0,0,12,38,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,253,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,260,"    public ArrayRealVector(double[] v1, ArrayRealVector v2) {
",6,0,0,2,5,1,0,2,0,9,57,2,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,261,"        final int l1 = v1.length;
",6,0,0,0,0,1,0,0,0,7,25,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,262,"        final int l2 = v2.getDimension();
",2,0,0,1,2,1,4,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,263,"        data = new double[l1 + l2];
",6,1,0,1,2,0,0,0,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,264,"        System.arraycopy(v1, 0, data, 0, l1);
",0,0,0,1,2,0,10,0,0,10,37,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,265,"        System.arraycopy(v2.data, 0, data, l1, l2);
",4,0,0,1,2,0,10,0,0,14,43,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,266,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,273,"    public ArrayRealVector(double[] v1, double[] v2) {
",6,0,0,3,7,1,0,0,0,7,50,2,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,274,"        final int l1 = v1.length;
",6,0,0,0,0,1,0,0,0,7,25,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,275,"        final int l2 = v2.length;
",6,0,0,0,0,1,0,0,0,7,25,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,276,"        data = new double[l1 + l2];
",6,1,0,1,2,0,0,0,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,277,"        System.arraycopy(v1, 0, data, 0, l1);
",0,0,0,1,2,0,10,0,0,10,37,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,278,"        System.arraycopy(v2, 0, data, l1, l2);
",0,0,0,1,2,0,12,0,0,12,38,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,279,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,41,"    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();
",2,0,0,1,2,3,4,2,0,11,86,2,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,284,"        return new ArrayRealVector(this, true);
",0,0,0,1,2,1,0,2,0,3,39,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,290,"        if (v instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,291,"            final double[] vData = ((ArrayRealVector) v).data;
",6,0,0,3,6,1,0,2,0,9,50,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,292,"            final int dim = vData.length;
",6,0,0,0,0,1,0,0,0,7,29,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,293,"            checkVectorDimensions(dim);
",0,0,0,1,2,0,4,0,0,4,27,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,294,"            ArrayRealVector result = new ArrayRealVector(dim);
",4,0,0,1,2,0,0,4,0,8,50,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,295,"            double[] resultData = result.data;
",6,0,0,1,2,0,0,0,0,6,34,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,296,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,297,"                resultData[i] = data[i] + vData[i];
",0,1,1,3,6,0,0,0,0,14,35,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,299,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,301,"            checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,302,"            double[] out = data.clone();
",2,0,0,2,4,0,4,0,0,6,28,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,303,"            Iterator<Entry> it = v.sparseIterator();
",2,0,0,1,2,0,4,4,0,10,40,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,305,"            while (it.hasNext() && (e = it.next()) != null) {
",2,2,0,4,9,0,8,0,0,13,49,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,306,"                out[e.getIndex()] += e.getValue();
",0,0,1,3,6,0,8,0,0,11,34,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,308,"            return new ArrayRealVector(out, false);
",2,0,0,1,2,1,0,2,0,5,39,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,315,"        if (v instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,316,"            final double[] vData = ((ArrayRealVector) v).data;
",6,0,0,3,6,1,0,2,0,9,50,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,317,"            final int dim = vData.length;
",6,0,0,0,0,1,0,0,0,7,29,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,318,"            checkVectorDimensions(dim);
",0,0,0,1,2,0,4,0,0,4,27,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,319,"            ArrayRealVector result = new ArrayRealVector(dim);
",4,0,0,1,2,0,0,4,0,8,50,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,320,"            double[] resultData = result.data;
",6,0,0,1,2,0,0,0,0,6,34,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,321,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,322,"                resultData[i] = data[i] - vData[i];
",0,1,1,3,6,0,0,0,0,14,35,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,324,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,326,"            checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,327,"            double[] out = data.clone();
",2,0,0,2,4,0,4,0,0,6,28,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,328,"            Iterator<Entry> it = v.sparseIterator();
",2,0,0,1,2,0,4,4,0,10,40,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,330,"            while(it.hasNext() && (e = it.next()) != null) {
",2,2,0,4,9,0,8,0,0,13,48,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,331,"                out[e.getIndex()] -= e.getValue();
",0,0,1,3,6,0,8,0,0,11,34,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,333,"            return new ArrayRealVector(out, false);
",2,0,0,1,2,1,0,2,0,5,39,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,340,"        return copy().mapToSelf(function);
",0,0,0,2,4,1,6,0,0,6,34,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,346,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,347,"            data[i] = function.value(data[i]);
",0,0,1,3,6,0,4,0,0,13,34,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,349,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,355,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,356,"            data[i] = data[i] + d;
",2,1,1,2,4,0,0,0,0,12,22,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,358,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,364,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,365,"            data[i] = data[i] - d;
",2,1,1,2,4,0,0,0,0,12,22,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,367,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,373,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,374,"            data[i] = data[i] * d;
",2,1,1,2,4,0,0,0,0,12,22,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,376,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,382,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,383,"            data[i] = data[i] / d;
",2,1,1,2,4,0,0,0,0,12,22,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,385,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,391,"        if (v instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,392,"            final double[] vData = ((ArrayRealVector) v).data;
",6,0,0,3,6,1,0,2,0,9,50,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,393,"            final int dim = vData.length;
",6,0,0,0,0,1,0,0,0,7,29,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,394,"            checkVectorDimensions(dim);
",0,0,0,1,2,0,4,0,0,4,27,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,395,"            ArrayRealVector result = new ArrayRealVector(dim);
",4,0,0,1,2,0,0,4,0,8,50,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,396,"            double[] resultData = result.data;
",6,0,0,1,2,0,0,0,0,6,34,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,397,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,398,"                resultData[i] = data[i] * vData[i];
",0,1,1,3,6,0,0,0,0,14,35,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,400,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,402,"            checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,403,"            double[] out = data.clone();
",2,0,0,2,4,0,4,0,0,6,28,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,404,"            for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,405,"                out[i] *= v.getEntry(i);
",0,0,1,2,4,0,6,0,0,11,24,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,407,"            return new ArrayRealVector(out, false);
",2,0,0,1,2,1,0,2,0,5,39,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,413,"        if (v instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,414,"            final double[] vData = ((ArrayRealVector) v).data;
",6,0,0,3,6,1,0,2,0,9,50,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,415,"            final int dim = vData.length;
",6,0,0,0,0,1,0,0,0,7,29,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,416,"            checkVectorDimensions(dim);
",0,0,0,1,2,0,4,0,0,4,27,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,417,"            ArrayRealVector result = new ArrayRealVector(dim);
",4,0,0,1,2,0,0,4,0,8,50,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,418,"            double[] resultData = result.data;
",6,0,0,1,2,0,0,0,0,6,34,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,419,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,420,"                resultData[i] = data[i] / vData[i];
",0,1,1,3,6,0,0,0,0,14,35,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,422,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,424,"            checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,425,"            double[] out = data.clone();
",2,0,0,2,4,0,4,0,0,6,28,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,426,"            for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,427,"                out[i] /= v.getEntry(i);
",0,0,1,2,4,0,6,0,0,11,24,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,429,"            return new ArrayRealVector(out, false);
",2,0,0,1,2,1,0,2,0,5,39,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,440,"        return data;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,446,"        if (v instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,447,"            final double[] vData = ((ArrayRealVector) v).data;
",6,0,0,3,6,1,0,2,0,9,50,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,448,"            checkVectorDimensions(vData.length);
",4,0,0,1,2,0,2,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,449,"            double dot = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,450,"            for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,451,"                dot += data[i] * vData[i];
",2,1,1,2,4,0,0,0,0,12,26,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,453,"            return dot;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,455,"            checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,456,"            double dot = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,457,"            Iterator<Entry> it = v.sparseIterator();
",2,0,0,1,2,0,4,4,0,10,40,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,459,"            while(it.hasNext() && (e = it.next()) != null) {
",2,2,0,4,9,0,8,0,0,13,48,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,460,"                dot += data[e.getIndex()] * e.getValue();
",2,1,1,3,6,0,8,0,0,14,41,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,462,"            return dot;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,469,"        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,470,"        for (double a : data) {
",4,0,0,1,3,0,0,0,0,4,23,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,471,"            sum += a * a;
",6,1,0,0,0,0,0,0,0,8,13,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,473,"        return FastMath.sqrt(sum);
",0,0,0,1,2,1,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,479,"        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,480,"        for (double a : data) {
",4,0,0,1,3,0,0,0,0,4,23,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,481,"            sum += FastMath.abs(a);
",2,0,0,1,2,0,6,0,0,9,23,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,483,"        return sum;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,489,"        double max = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,490,"        for (double a : data) {
",4,0,0,1,3,0,0,0,0,4,23,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,491,"            max = FastMath.max(max, FastMath.abs(a));
",2,0,0,2,4,0,12,0,0,15,41,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,493,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,499,"        if (v instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,500,"            final double[] vData = ((ArrayRealVector) v).data;
",6,0,0,3,6,1,0,2,0,9,50,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,501,"            checkVectorDimensions(vData.length);
",4,0,0,1,2,0,2,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,502,"            double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,503,"            for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,504,"                final double delta = data[i] - vData[i];
",2,1,1,2,4,1,0,0,0,12,40,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,505,"                sum += delta * delta;
",6,1,0,0,0,0,0,0,0,8,21,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,507,"            return FastMath.sqrt(sum);
",0,0,0,1,2,1,6,0,0,6,26,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,509,"            checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,510,"            double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,511,"            for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,512,"                final double delta = data[i] - v.getEntry(i);
",2,1,1,2,4,1,6,0,0,14,45,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,513,"                sum += delta * delta;
",6,1,0,0,0,0,0,0,0,8,21,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,515,"            return FastMath.sqrt(sum);
",0,0,0,1,2,1,6,0,0,6,26,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,522,"        if (v instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,523,"            final double[] vData = ((ArrayRealVector) v).data;
",6,0,0,3,6,1,0,2,0,9,50,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,524,"            checkVectorDimensions(vData.length);
",4,0,0,1,2,0,2,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,525,"            double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,526,"            for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,527,"                final double delta = data[i] - vData[i];
",2,1,1,2,4,1,0,0,0,12,40,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,528,"                sum += FastMath.abs(delta);
",2,0,0,1,2,0,6,0,0,9,27,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,530,"            return sum;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,532,"            checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,533,"            double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,534,"            for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,535,"                final double delta = data[i] - v.getEntry(i);
",2,1,1,2,4,1,6,0,0,14,45,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,536,"                sum += FastMath.abs(delta);
",2,0,0,1,2,0,6,0,0,9,27,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,538,"            return sum;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,545,"        if (v instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,546,"            final double[] vData = ((ArrayRealVector) v).data;
",6,0,0,3,6,1,0,2,0,9,50,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,547,"            checkVectorDimensions(vData.length);
",4,0,0,1,2,0,2,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,548,"            double max = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,549,"            for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,550,"                final double delta = data[i] - vData[i];
",2,1,1,2,4,1,0,0,0,12,40,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,551,"                max = FastMath.max(max, FastMath.abs(delta));
",2,0,0,2,4,0,12,0,0,15,45,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,553,"            return max;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,555,"            checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,556,"            double max = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,557,"            for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,558,"                final double delta = data[i] - v.getEntry(i);
",2,1,1,2,4,1,6,0,0,14,45,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,559,"                max = FastMath.max(max, FastMath.abs(delta));
",2,0,0,2,4,0,12,0,0,15,45,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,561,"            return max;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,568,"        final double norm = getNorm();
",2,0,0,1,2,1,2,0,0,5,30,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,569,"        if (norm == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,570,"            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
",4,0,0,1,2,0,0,2,0,6,62,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,572,"        return mapDivide(norm);
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,578,"        final double norm = getNorm();
",2,0,0,1,2,1,2,0,0,5,30,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,579,"        if (norm == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,580,"            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
",4,0,0,1,2,0,0,2,0,6,62,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,582,"        mapDivideToSelf(norm);
",0,0,0,1,2,0,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,583,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,587,"        return v.mapMultiply(dotProduct(v) / v.dotProduct(v));
",0,1,0,3,6,1,14,0,0,15,54,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,593,"        if (v instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,594,"            final double[] vData = ((ArrayRealVector) v).data;
",6,0,0,3,6,1,0,2,0,9,50,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,595,"            final int m = data.length;
",6,0,0,0,0,1,0,0,0,7,26,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,596,"            final int n = vData.length;
",6,0,0,0,0,1,0,0,0,7,27,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,597,"            final RealMatrix out = MatrixUtils.createRealMatrix(m, n);
",2,0,0,1,2,1,8,2,0,13,58,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,598,"            for (int i = 0; i < m; i++) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,599,"                for (int j = 0; j < n; j++) {
",8,1,0,1,3,0,0,0,0,10,29,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,600,"                    out.setEntry(i, j, data[i] * vData[j]);
",0,1,1,3,6,0,8,0,0,17,39,11,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,603,"            return out;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,605,"            final int m = data.length;
",6,0,0,0,0,1,0,0,0,7,26,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,606,"            final int n = v.getDimension();
",2,0,0,1,2,1,4,0,0,7,31,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,607,"            final RealMatrix out = MatrixUtils.createRealMatrix(m, n);
",2,0,0,1,2,1,8,2,0,13,58,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,608,"            for (int i = 0; i < m; i++) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,609,"                for (int j = 0; j < n; j++) {
",8,1,0,1,3,0,0,0,0,10,29,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,610,"                    out.setEntry(i, j, data[i] * v.getEntry(j));
",0,1,1,3,6,0,14,0,0,19,44,11,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,613,"            return out;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,619,"        return data[index];
",0,0,1,1,2,1,0,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,624,"        return data.length;
",4,0,0,0,0,1,0,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,630,"            return new ArrayRealVector(this, (ArrayRealVector) v);
",2,0,0,2,4,1,0,4,0,6,54,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,631,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,632,"            return new ArrayRealVector(this, v);
",2,0,0,1,2,1,0,2,0,4,36,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,643,"        return new ArrayRealVector(this, v);
",2,0,0,1,2,1,0,2,0,4,36,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,648,"        final double[] out = new double[data.length + 1];
",6,1,0,2,4,1,0,0,0,8,49,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,649,"        System.arraycopy(data, 0, out, 0, data.length);
",4,0,0,1,2,0,8,0,0,12,47,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,650,"        out[data.length] = in;
",6,0,1,1,2,0,0,0,0,9,22,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,651,"        return new ArrayRealVector(out, false);
",2,0,0,1,2,1,0,2,0,5,39,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,656,"        ArrayRealVector out = new ArrayRealVector(n);
",4,0,0,1,2,0,0,4,0,8,45,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,658,"            System.arraycopy(data, index, out.data, 0, n);
",4,0,0,1,2,0,10,0,0,14,46,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,662,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,659,"        } catch (IndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,39,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,660,"            checkIndex(index);
",0,0,0,1,2,0,4,0,0,4,18,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,661,"            checkIndex(index + n - 1);
",4,2,0,1,2,0,2,0,0,8,26,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,663,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,669,"            data[index] = value;
",2,0,1,1,2,0,0,0,0,7,20,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,672,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,670,"        } catch (IndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,39,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,671,"            checkIndex(index);
",0,0,0,1,2,0,4,0,0,4,18,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,673,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,678,"        if (v instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,679,"            setSubVector(index, ((ArrayRealVector) v).data);
",4,0,0,3,6,0,4,2,0,10,48,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,682,"                for (int i = index; i < index + v.getDimension(); ++i) {
",10,2,0,2,5,0,4,0,0,17,56,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,683,"                    data[i] = v.getEntry(i - index);
",4,1,1,2,4,0,4,0,0,14,32,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,688,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,685,"            } catch (IndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,39,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,686,"                checkIndex(index);
",0,0,0,1,2,0,4,0,0,4,18,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,687,"                checkIndex(index + v.getDimension() - 1);
",2,2,0,2,4,0,6,0,0,10,41,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,690,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,702,"            System.arraycopy(v, 0, data, index, v.length);
",4,0,0,1,2,0,10,0,0,14,46,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,706,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,703,"        } catch (IndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,39,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,704,"            checkIndex(index);
",0,0,0,1,2,0,4,0,0,4,18,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,705,"            checkIndex(index + v.length - 1);
",6,2,0,1,2,0,2,0,0,10,33,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,707,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,712,"        Arrays.fill(data, value);
",0,0,0,1,2,0,8,0,0,8,25,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,713,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,718,"        return data.clone();
",0,0,0,1,2,1,4,0,0,4,20,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,724,"        return DEFAULT_FORMAT.format(this);
",0,0,0,1,2,1,4,0,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,736,"        checkVectorDimensions(v.getDimension());
",0,0,0,2,4,0,6,0,0,6,40,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,737,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,748,"        if (data.length != n) {
",6,1,0,1,3,0,0,0,0,7,23,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,749,"            throw new DimensionMismatchException(data.length, n);
",6,0,0,1,2,0,0,2,0,8,53,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,751,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,760,"        for (double v : data) {
",4,0,0,1,3,0,0,0,0,4,23,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,761,"            if (Double.isNaN(v)) {
",0,0,0,2,5,0,6,0,0,6,22,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,762,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,765,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,776,"        if (isNaN()) {
",0,0,0,2,5,0,2,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,777,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,780,"        for (double v : data) {
",4,0,0,1,3,0,0,0,0,4,23,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,781,"            if (Double.isInfinite(v)) {
",0,0,0,2,5,0,6,0,0,6,27,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,782,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,786,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,805,"        if (this == other) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,806,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,809,"        if (other == null || !(other instanceof RealVector)) {
",4,2,0,2,5,0,0,2,0,9,54,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,810,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,813,"        RealVector rhs = (RealVector) other;
",4,0,0,1,2,0,0,4,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,814,"        if (data.length != rhs.getDimension()) {
",4,1,0,2,5,0,4,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,815,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,818,"        if (rhs.isNaN()) {
",0,0,0,2,5,0,4,0,0,4,18,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,819,"            return this.isNaN();
",0,0,0,1,2,1,2,0,0,2,20,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,822,"        for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,823,"            if (data[i] != rhs.getEntry(i)) {
",0,1,1,3,7,0,6,0,0,11,33,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,824,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,827,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,838,"        if (isNaN()) {
",0,0,0,2,5,0,2,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,839,"            return 9;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,841,"        return MathUtils.hash(data);
",0,0,0,1,2,1,6,0,0,6,28,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,847,"        return copy().combineToSelf(a, b, y);
",0,0,0,2,4,1,10,0,0,10,37,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,853,"        if (y instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,854,"            final double[] yData = ((ArrayRealVector) y).data;
",6,0,0,3,6,1,0,2,0,9,50,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,855,"            checkVectorDimensions(yData.length);
",4,0,0,1,2,0,2,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,856,"            for (int i = 0; i < this.data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,44,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,857,"                data[i] = a * data[i] + b * yData[i];
",4,3,1,3,6,0,0,0,0,20,37,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,859,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,860,"            checkVectorDimensions(y);
",0,0,0,1,2,0,4,0,0,4,25,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,861,"            for (int i = 0; i < this.data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,44,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,862,"                data[i] = a * data[i] + b * y.getEntry(i);
",4,3,1,3,6,0,6,0,0,22,42,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,865,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,37,"public class ArrayRealVector extends RealVector implements Serializable {
",2,0,0,0,1,1,0,4,0,7,73,1,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,60,"    public OpenMapRealMatrix(OpenMapRealMatrix matrix) {
",4,0,0,1,3,1,0,2,0,7,52,2,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,61,"        this.rows = matrix.rows;
",6,0,0,0,0,0,0,0,0,7,24,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,62,"        this.columns = matrix.columns;
",6,0,0,0,0,0,0,0,0,7,30,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,63,"        this.entries = new OpenIntToDoubleHashMap(matrix.entries);
",6,0,0,1,2,0,0,2,0,9,58,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,64,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,69,"        return new OpenMapRealMatrix(this);
",0,0,0,1,2,1,0,2,0,2,35,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,75,"        return new OpenMapRealMatrix(rowDimension, columnDimension);
",4,0,0,1,2,1,0,2,0,6,60,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,81,"        return columns;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,95,"        MatrixUtils.checkAdditionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,45,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,97,"        final OpenMapRealMatrix out = new OpenMapRealMatrix(this);
",2,0,0,1,2,1,0,4,0,7,58,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,98,"        for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext();) {
",10,0,0,3,7,0,6,0,0,16,92,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,99,"            iterator.advance();
",0,0,0,1,2,0,4,0,0,4,19,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,100,"            final int row = iterator.key() / columns;
",4,1,0,1,2,1,4,0,0,10,41,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,101,"            final int col = iterator.key() - row * columns;
",6,2,0,1,2,1,4,0,0,13,47,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,102,"            out.setEntry(row, col, getEntry(row, col) + iterator.value());
",0,1,0,3,6,0,18,0,0,19,62,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,103,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,105,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,113,"            return subtract((OpenMapRealMatrix) m);
",2,0,0,2,4,1,2,2,0,6,39,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,114,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,115,"            return (OpenMapRealMatrix) super.subtract(m);
",4,0,0,2,4,1,0,2,0,6,45,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,129,"        MatrixUtils.checkAdditionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,45,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,131,"        final OpenMapRealMatrix out = new OpenMapRealMatrix(this);
",2,0,0,1,2,1,0,4,0,7,58,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,132,"        for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext();) {
",10,0,0,3,7,0,6,0,0,16,92,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,133,"            iterator.advance();
",0,0,0,1,2,0,4,0,0,4,19,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,134,"            final int row = iterator.key() / columns;
",4,1,0,1,2,1,4,0,0,10,41,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,135,"            final int col = iterator.key() - row * columns;
",6,2,0,1,2,1,4,0,0,13,47,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,136,"            out.setEntry(row, col, getEntry(row, col) - iterator.value());
",0,1,0,3,6,0,18,0,0,19,62,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,137,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,139,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,146,"            return multiply((OpenMapRealMatrix) m);
",2,0,0,2,4,1,2,2,0,6,39,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,147,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,150,"            MatrixUtils.checkMultiplicationCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,51,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,152,"            final int outCols = m.getColumnDimension();
",2,0,0,1,2,1,4,0,0,7,43,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,153,"            final BlockRealMatrix out = new BlockRealMatrix(rows, outCols);
",6,0,0,1,2,1,0,4,0,11,63,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,154,"            for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext();) {
",6,0,0,3,7,0,8,0,0,14,90,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,155,"                iterator.advance();
",0,0,0,1,2,0,4,0,0,4,19,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,156,"                final double value = iterator.value();
",2,0,0,1,2,1,4,0,0,7,38,9,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,157,"                final int key      = iterator.key();
",2,0,0,1,2,1,4,0,0,7,36,9,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,158,"                final int i        = key / columns;
",6,1,0,0,0,1,0,0,0,8,35,9,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,159,"                final int k        = key % columns;
",6,1,0,0,0,1,0,0,0,8,35,9,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,160,"                for (int j = 0; j < outCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,35,9,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,161,"                    out.addToEntry(i, j, value * m.getEntry(k, j));
",2,1,0,2,4,0,16,0,0,19,47,12,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,163,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,165,"            return out;
",2,0,0,0,0,1,0,0,0,2,11,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,180,"        MatrixUtils.checkMultiplicationCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,51,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,182,"        final int outCols = m.getColumnDimension();
",2,0,0,1,2,1,4,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,183,"        OpenMapRealMatrix out = new OpenMapRealMatrix(rows, outCols);
",6,0,0,1,2,0,0,4,0,10,61,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,184,"        for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext();) {
",6,0,0,3,7,0,8,0,0,14,90,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,185,"            iterator.advance();
",0,0,0,1,2,0,4,0,0,4,19,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,186,"            final double value = iterator.value();
",2,0,0,1,2,1,4,0,0,7,38,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,187,"            final int key      = iterator.key();
",2,0,0,1,2,1,4,0,0,7,36,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,188,"            final int i        = key / columns;
",6,1,0,0,0,1,0,0,0,8,35,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,189,"            final int k        = key % columns;
",6,1,0,0,0,1,0,0,0,8,35,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,190,"            for (int j = 0; j < outCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,191,"                final int rightKey = m.computeKey(k, j);
",2,0,0,1,2,1,8,0,0,11,40,8,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,192,"                if (m.entries.containsKey(rightKey)) {
",4,0,0,2,5,0,4,0,0,8,38,9,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,193,"                    final int outKey = out.computeKey(i, j);
",2,0,0,1,2,1,8,0,0,11,40,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,194,"                    final double outValue =
",2,0,0,0,0,1,0,0,0,3,23,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,196,"                    if (outValue == 0.0) {
",2,1,0,1,3,0,0,0,0,3,22,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,197,"                        out.entries.remove(outKey);
",4,0,0,1,2,0,4,0,0,8,27,13,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,199,"                        out.entries.put(outKey, outValue);
",4,0,0,1,2,0,6,0,0,10,34,13,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,203,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,205,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,211,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,212,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,213,"        return entries.get(computeKey(row, column));
",0,0,0,2,4,1,10,0,0,10,44,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,219,"        return rows;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,225,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,226,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,227,"        if (value == 0.0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,228,"            entries.remove(computeKey(row, column));
",0,0,0,2,4,0,10,0,0,10,40,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,230,"            entries.put(computeKey(row, column), value);
",0,0,0,2,4,0,12,0,0,12,44,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,232,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,237,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,238,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,239,"        final int key = computeKey(row, column);
",2,0,0,1,2,1,6,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,240,"        final double value = entries.get(key) + increment;
",4,1,0,1,2,1,6,0,0,12,50,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,241,"        if (value == 0.0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,242,"            entries.remove(key);
",0,0,0,1,2,0,6,0,0,6,20,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,244,"            entries.put(key, value);
",0,0,0,1,2,0,8,0,0,8,24,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,246,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,251,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,252,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,253,"        final int key = computeKey(row, column);
",2,0,0,1,2,1,6,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,254,"        final double value = entries.get(key) * factor;
",4,1,0,1,2,1,6,0,0,12,47,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,255,"        if (value == 0.0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,256,"            entries.remove(key);
",0,0,0,1,2,0,6,0,0,6,20,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,258,"            entries.put(key, value);
",0,0,0,1,2,0,8,0,0,8,24,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,260,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,269,"        return row * columns + column;
",6,2,0,0,0,1,0,0,0,8,30,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,31,"public class OpenMapRealMatrix extends AbstractRealMatrix
",2,0,0,0,0,1,0,2,0,5,57,1,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,45,50,"        this(boundIsAllowed ?
",2,0,0,0,1,0,0,0,0,2,21,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,45,54,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,45,67,"        super(specific, wrong, max);
",6,0,0,1,2,0,0,0,0,6,28,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,45,69,"        this.max = max;
",4,0,0,0,0,0,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,45,70,"        this.boundIsAllowed = boundIsAllowed;
",4,0,0,0,0,0,0,0,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,45,71,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,45,77,"        return boundIsAllowed;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,45,84,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,45,38,"        super(value, 0, false);
",2,0,0,1,2,0,0,0,0,3,23,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,45,39,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,45,48,"        super(specific, value, 0, false);
",4,0,0,1,2,0,0,0,0,5,33,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,45,49,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,45,50,"        this(boundIsAllowed ?
",2,0,0,0,1,0,0,0,0,2,21,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,45,54,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,45,68,"        super(specific, wrong, min);
",6,0,0,1,2,0,0,0,0,6,28,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,45,70,"        this.min = min;
",4,0,0,0,0,0,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,45,71,"        this.boundIsAllowed = boundIsAllowed;
",4,0,0,0,0,0,0,0,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,45,72,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,45,78,"        return boundIsAllowed;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,45,85,"        return min;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NoDataException,45,37,"        this(LocalizedFormats.NO_DATA);
",4,0,0,1,2,0,0,0,0,4,31,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/NoDataException,45,38,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/NoDataException,45,45,"        super(specific);
",2,0,0,1,2,0,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NoDataException,45,46,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,358,"    private LocalizedFormats(final String sourceFormat) {
",4,0,0,1,3,2,0,2,0,8,53,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,359,"        this.sourceFormat = sourceFormat;
",4,0,0,0,0,0,0,0,0,5,33,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,360,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),
",2,0,0,5,10,0,0,0,0,3,67,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,45,"    ARRAY_SIZE_EXCEEDS_MAX_VARIABLES(""array size cannot be greater than {0}""),
",2,0,0,2,4,0,0,0,0,3,74,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,46,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),
",2,0,0,4,8,0,0,0,0,3,94,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,47,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),
",2,0,0,1,2,0,0,0,0,3,41,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,48,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),
",2,0,0,1,2,0,0,0,0,3,95,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,49,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),
",2,0,0,1,2,0,0,0,0,3,60,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,50,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),
",2,0,0,1,2,0,0,0,0,3,54,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,51,"    BANDWIDTH(""bandwidth ({0})""),
",2,0,0,3,6,0,0,0,0,3,29,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,52,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),
",2,0,0,4,8,0,0,0,0,3,108,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,53,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),
",2,0,0,3,6,0,0,0,0,3,93,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,54,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),
",2,0,0,1,2,0,0,0,0,3,123,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,55,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),
",2,0,0,1,2,0,0,0,0,3,89,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),
",2,0,0,2,4,0,0,0,0,3,108,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,57,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),
",2,0,0,1,2,0,0,0,0,3,100,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,58,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),
",2,0,0,2,4,0,0,0,0,3,94,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),
",2,0,0,3,6,0,0,0,0,3,97,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),
",2,0,0,2,4,0,0,0,0,3,83,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),
",2,0,0,2,4,0,0,0,0,3,86,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),
",2,0,0,2,4,0,0,0,0,3,87,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),
",2,0,0,1,2,0,0,0,0,3,84,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),
",2,0,0,1,2,0,0,0,0,3,131,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),
",2,0,0,1,2,0,0,0,0,3,75,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),
",2,0,0,2,4,0,0,0,0,3,98,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),
",2,0,0,2,4,0,0,0,0,3,78,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),
",2,0,0,1,2,0,0,0,0,3,95,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),
",2,0,0,2,4,0,0,0,0,3,74,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),
",2,0,0,1,2,0,0,0,0,3,55,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),
",2,0,0,3,6,0,0,0,0,3,79,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),
",2,0,0,2,4,0,0,0,0,3,115,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),
",2,0,0,5,10,0,0,0,0,3,78,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */
",2,0,0,3,6,0,0,0,0,3,46,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),
",2,0,0,2,4,0,0,0,0,3,112,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),
",2,0,0,2,4,0,0,0,0,3,86,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),
",2,0,0,5,10,0,0,0,0,3,290,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),
",2,0,0,3,6,0,0,0,0,3,263,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */
",2,0,0,1,2,0,0,0,0,3,52,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,80,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),
",2,0,0,1,2,0,0,0,0,3,72,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,81,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),
",2,0,0,3,6,0,0,0,0,3,109,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,82,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),
",2,0,0,3,6,0,0,0,0,3,81,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,83,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),
",2,0,0,1,2,0,0,0,0,3,49,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,84,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */
",2,0,0,5,10,0,0,0,0,3,71,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,85,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */
",2,0,0,3,6,0,0,0,0,3,52,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,86,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */
",2,0,0,1,2,0,0,0,0,3,54,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,87,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),
",2,0,0,2,4,0,0,0,0,3,119,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,88,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),
",2,0,0,1,2,0,0,0,0,3,51,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,89,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),
",2,0,0,4,8,0,0,0,0,3,78,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,90,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),
",2,0,0,1,2,0,0,0,0,3,53,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,91,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */
",2,0,0,1,2,0,0,0,0,3,88,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,92,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),
",2,0,0,1,2,0,0,0,0,3,71,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,93,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),
",2,0,0,1,2,0,0,0,0,3,65,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,94,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),
",2,0,0,1,2,0,0,0,0,3,77,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,95,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),
",2,0,0,4,8,0,0,0,0,3,78,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,96,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),
",2,0,0,3,6,0,0,0,0,3,81,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,97,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),
",2,0,0,1,2,0,0,0,0,3,53,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,98,"    EVALUATION(""evaluation""), /* keep */
",2,0,0,1,2,0,0,0,0,3,36,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,99,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),
",2,0,0,3,6,0,0,0,0,3,77,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,100,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),
",2,0,0,2,4,0,0,0,0,3,69,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,101,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),
",2,0,0,12,24,0,0,0,0,3,175,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,102,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),
",2,0,0,3,6,0,0,0,0,3,85,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,103,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),
",2,0,0,2,4,0,0,0,0,3,79,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,104,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),
",2,0,0,2,4,0,0,0,0,3,54,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,105,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),
",2,0,0,2,4,0,0,0,0,3,73,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,106,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),
",2,0,0,5,10,0,0,0,0,3,85,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,107,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),
",2,0,0,1,2,0,0,0,0,3,62,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,108,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),
",2,0,0,1,2,0,0,0,0,3,54,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,109,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),
",2,0,0,4,8,0,0,0,0,3,56,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,110,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),
",2,0,0,4,8,0,0,0,0,3,56,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,111,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),
",2,0,0,2,4,0,0,0,0,3,76,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,112,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),
",2,0,0,6,12,0,0,0,0,3,107,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,113,"    ILL_CONDITIONED_OPERATOR(""condition number {1} is too high ""),
",2,0,0,2,4,0,0,0,0,3,62,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,114,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),
",2,0,0,3,6,0,0,0,0,3,95,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,115,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),
",2,0,0,3,6,0,0,0,0,3,50,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,116,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),
",2,0,0,5,10,0,0,0,0,3,64,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,117,"    INDEX(""index ({0})""), /* keep */
",2,0,0,3,6,0,0,0,0,3,32,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,118,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */
",2,0,0,2,4,0,0,0,0,3,59,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,119,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */
",2,0,0,3,6,0,0,0,0,3,51,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,120,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),
",2,0,0,3,6,0,0,0,0,3,79,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,121,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),
",2,0,0,1,2,0,0,0,0,3,59,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,122,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),
",2,0,0,3,6,0,0,0,0,3,72,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,123,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),
",2,0,0,3,6,0,0,0,0,3,79,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,124,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),
",2,0,0,3,6,0,0,0,0,3,67,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,125,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),
",2,0,0,4,8,0,0,0,0,3,121,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,126,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),
",2,0,0,2,4,0,0,0,0,3,103,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,127,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),
",2,0,0,2,4,0,0,0,0,3,98,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,128,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),
",2,0,0,3,6,0,0,0,0,3,75,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,129,"    DIMENSION(""dimension ({0})""), /* keep */
",2,0,0,3,6,0,0,0,0,3,40,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,130,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),
",2,0,0,3,6,0,0,0,0,3,105,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,131,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),
",2,0,0,3,6,0,0,0,0,3,83,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,132,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS(""{0} method needs at least two previous points""),
",2,0,0,2,4,0,0,0,0,3,103,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,133,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),
",2,0,0,2,4,0,0,0,0,3,66,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,134,"    INVALID_BINARY_DIGIT(""invalid binary digit: {0}""),
",2,0,0,2,4,0,0,0,0,3,50,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,135,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),
",2,0,0,4,8,0,0,0,0,3,112,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,136,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),
",2,0,0,4,8,0,0,0,0,3,124,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,137,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),
",2,0,0,3,6,0,0,0,0,3,72,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,138,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),
",2,0,0,2,4,0,0,0,0,3,71,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,139,"    NOT_ENOUGH_DATA_REGRESSION(""the number of observations is not sufficient to conduct regression""),
",2,0,0,1,2,0,0,0,0,3,97,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,140,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),
",2,0,0,4,8,0,0,0,0,3,141,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,141,"    INVALID_REGRESSION_OBSERVATION(""length of regressor array = {0} does not match the number of variables = {1} in the model""),
",2,0,0,3,6,0,0,0,0,3,124,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,142,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),
",2,0,0,26,52,0,0,0,0,3,165,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,143,"    ITERATOR_EXHAUSTED(""iterator exhausted""),
",2,0,0,1,2,0,0,0,0,3,41,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,144,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),
",2,0,0,4,8,0,0,0,0,3,56,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,145,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),
",2,0,0,4,8,0,0,0,0,3,56,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,146,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),
",2,0,0,1,2,0,0,0,0,3,101,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,147,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),
",2,0,0,1,2,0,0,0,0,3,67,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,148,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */
",2,0,0,5,10,0,0,0,0,3,111,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,149,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),
",2,0,0,5,10,0,0,0,0,3,111,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,150,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),
",2,0,0,1,2,0,0,0,0,3,70,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,151,"    EVALUATIONS(""evaluations""), /* keep */
",2,0,0,1,2,0,0,0,0,3,38,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,152,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */
",2,0,0,3,6,0,0,0,0,3,62,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,153,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),
",2,0,0,3,6,0,0,0,0,3,71,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,154,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({1,number,0.00E00}) reached, integration needs {0,number,0.00E00}""),
",2,0,0,4,8,0,0,0,0,3,132,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,155,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),
",2,0,0,3,6,0,0,0,0,3,156,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,156,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),
",2,0,0,2,4,0,0,0,0,3,43,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,157,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),
",2,0,0,1,2,0,0,0,0,3,49,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,158,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),
",2,0,0,2,4,0,0,0,0,3,92,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,159,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),
",2,0,0,2,4,0,0,0,0,3,55,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,160,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),
",2,0,0,5,10,0,0,0,0,3,68,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,161,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),
",2,0,0,3,6,0,0,0,0,3,58,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,162,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),
",2,0,0,3,6,0,0,0,0,3,79,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,163,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */
",2,0,0,3,6,0,0,0,0,3,60,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,164,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),
",2,0,0,3,6,0,0,0,0,3,73,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,165,"    NUMBER_OF_INTERPOLATION_POINTS(""number of interpolation points ({0})""), /* keep */
",2,0,0,3,6,0,0,0,0,3,82,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,166,"    NUMBER_OF_TRIALS(""number of trials ({0})""),
",2,0,0,3,6,0,0,0,0,3,43,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,167,"    ROBUSTNESS_ITERATIONS(""number of robustness iterations ({0})""),
",2,0,0,3,6,0,0,0,0,3,63,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,168,"    START_POSITION(""start position ({0})""), /* keep */
",2,0,0,3,6,0,0,0,0,3,50,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,169,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge (in less than {0} iterations) for value {1}""),
",2,0,0,4,8,0,0,0,0,3,131,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,170,"    NON_INVERTIBLE_TRANSFORM(""non-invertible affine transform collapses some lines into single points""),
",2,0,0,1,2,0,0,0,0,3,100,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,171,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),
",2,0,0,2,4,0,0,0,0,3,98,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,172,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),
",2,0,0,2,4,0,0,0,0,3,81,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,173,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),
",2,0,0,3,6,0,0,0,0,3,89,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,174,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),
",2,0,0,3,6,0,0,0,0,3,89,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,175,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),
",2,0,0,3,6,0,0,0,0,3,85,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,176,"    NON_SQUARE_MATRIX(""non square ({0}x{1}) matrix""),
",2,0,0,4,8,0,0,0,0,3,49,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,177,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),
",2,0,0,1,2,0,0,0,0,3,60,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,178,"    NORMALIZE_NAN(""Cannot normalize to NaN""),
",2,0,0,1,2,0,0,0,0,3,41,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,179,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),
",2,0,0,5,10,0,0,0,0,3,93,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,180,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),
",2,0,0,6,12,0,0,0,0,3,85,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,181,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */
",2,0,0,6,12,0,0,0,0,3,88,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,182,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),
",2,0,0,5,10,0,0,0,0,3,113,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,183,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),
",2,0,0,3,6,0,0,0,0,3,97,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,184,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),
",2,0,0,6,12,0,0,0,0,3,85,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,185,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */
",2,0,0,6,12,0,0,0,0,3,88,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,186,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),
",2,0,0,5,10,0,0,0,0,3,105,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,187,"    ALPHA(""alpha""), /* keep */
",2,0,0,1,2,0,0,0,0,3,26,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,188,"    BETA(""beta""), /* keep */
",2,0,0,1,2,0,0,0,0,3,24,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,189,"    NOT_POSITIVE_COLUMNDIMENSION(""invalid column dimension: {0} (must be positive)""),
",2,0,0,3,6,0,0,0,0,3,81,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,190,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""), /* keep */
",2,0,0,1,2,0,0,0,0,3,72,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,191,"    NON_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix: diagonal element at ({1},{1}) is smaller than {2} ({0})""),
",2,0,0,7,14,0,0,0,0,3,118,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,192,"    NON_POSITIVE_DEFINITE_OPERATOR(""non positive definite linear operator""), /* keep */
",2,0,0,1,2,0,0,0,0,3,83,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,193,"    NON_SELF_ADJOINT_OPERATOR(""non self-adjoint linear operator""), /* keep */
",2,0,0,1,2,0,0,0,0,3,73,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,194,"    NON_SQUARE_OPERATOR(""non square ({0}x{1}) linear operator""), /* keep */
",2,0,0,4,8,0,0,0,0,3,71,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,195,"    DEGREES_OF_FREEDOM(""degrees of freedom ({0})""), /* keep */
",2,0,0,3,6,0,0,0,0,3,58,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,196,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),
",2,0,0,3,6,0,0,0,0,3,77,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,197,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),
",2,0,0,3,6,0,0,0,0,3,66,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,198,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),
",2,0,0,3,6,0,0,0,0,3,65,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,199,"    EXPONENT(""exponent ({0})""), /* keep */
",2,0,0,3,6,0,0,0,0,3,38,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,200,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),
",2,0,0,3,6,0,0,0,0,3,53,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,201,"    LENGTH(""length ({0})""), /* keep */
",2,0,0,3,6,0,0,0,0,3,34,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,202,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),
",2,0,0,3,6,0,0,0,0,3,49,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,203,"    MEAN(""mean ({0})""), /* keep */
",2,0,0,3,6,0,0,0,0,3,30,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,204,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),
",2,0,0,2,4,0,0,0,0,3,72,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,205,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */
",2,0,0,3,6,0,0,0,0,3,56,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,206,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),
",2,0,0,3,6,0,0,0,0,3,65,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,207,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */
",2,0,0,2,5,0,0,0,0,3,53,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,208,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),
",2,0,0,3,6,0,0,0,0,3,69,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,209,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),
",2,0,0,3,6,0,0,0,0,3,71,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,210,"    POPULATION_SIZE(""population size ({0})""), /* keep */
",2,0,0,3,6,0,0,0,0,3,52,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,211,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),
",2,0,0,3,6,0,0,0,0,3,76,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,212,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),
",2,0,0,3,6,0,0,0,0,3,63,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,213,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),
",2,0,0,3,6,0,0,0,0,3,51,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,214,"    SCALE(""scale ({0})""), /* keep */
",2,0,0,3,6,0,0,0,0,3,32,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,215,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),
",2,0,0,3,6,0,0,0,0,3,51,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,216,"    SHAPE(""shape ({0})""), /* keep */
",2,0,0,3,6,0,0,0,0,3,32,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,217,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),
",2,0,0,3,6,0,0,0,0,3,77,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,218,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */
",2,0,0,3,6,0,0,0,0,3,58,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,219,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),
",2,0,0,3,6,0,0,0,0,3,63,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,220,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),
",2,0,0,3,6,0,0,0,0,3,63,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,221,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),
",2,0,0,2,4,0,0,0,0,3,44,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,222,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),
",2,0,0,2,4,0,0,0,0,3,87,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,223,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),
",2,0,0,2,4,0,0,0,0,3,62,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,224,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),
",2,0,0,6,12,0,0,0,0,3,104,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,225,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */
",2,0,0,6,12,0,0,0,0,3,107,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,226,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),
",2,0,0,1,2,0,0,0,0,3,79,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,227,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),
",2,0,0,6,12,0,0,0,0,3,104,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,228,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */
",2,0,0,6,12,0,0,0,0,3,107,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,229,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),
",2,0,0,5,10,0,0,0,0,3,99,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,230,"    NOT_SUPPORTED_IN_DIMENSION_N(""method not supported in dimension {0}""),
",2,0,0,2,4,0,0,0,0,3,70,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,231,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),
",2,0,0,1,2,0,0,0,0,3,45,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,232,"    NON_SYMMETRIC_MATRIX(""non symmetric matrix: the difference between entries at ({0},{1}) and ({1},{0}) is larger than {2}""), /* keep */
",2,0,0,8,16,0,0,0,0,3,134,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,233,"    NO_BIN_SELECTED(""no bin selected""),
",2,0,0,1,2,0,0,0,0,3,35,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,234,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""), /* keep */
",2,0,0,2,4,0,0,0,0,3,99,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,235,"    NO_DATA(""no data""), /* keep */
",2,0,0,1,2,0,0,0,0,3,30,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,236,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),
",2,0,0,4,8,0,0,0,0,3,82,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,237,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),
",2,0,0,1,2,0,0,0,0,3,99,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,238,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),
",2,0,0,1,2,0,0,0,0,3,45,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,239,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */
",2,0,0,1,2,0,0,0,0,3,62,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,240,"    NO_REGRESSORS(""Regression model must include at least one regressor""),
",2,0,0,1,2,0,0,0,0,3,70,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,241,"    NO_RESULT_AVAILABLE(""no result available""),
",2,0,0,1,2,0,0,0,0,3,43,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,242,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),
",2,0,0,6,12,0,0,0,0,3,75,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,243,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */
",2,0,0,1,2,0,0,0,0,3,51,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,244,"    ARRAY_ZERO_LENGTH_OR_NULL_NOTALLOWED(""A null or zero length array not allowed""),
",2,0,0,1,2,0,0,0,0,3,80,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,245,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */
",2,0,0,1,2,0,0,0,0,3,50,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,246,"    DENOMINATOR(""denominator""), /* keep */
",2,0,0,1,2,0,0,0,0,3,38,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,247,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */
",2,0,0,1,2,0,0,0,0,3,52,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,248,"    FRACTION(""fraction""), /* keep */
",2,0,0,1,2,0,0,0,0,3,32,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,249,"    FUNCTION(""function""), /* keep */
",2,0,0,1,2,0,0,0,0,3,32,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,250,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */
",2,0,0,1,2,0,0,0,0,3,48,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,251,"    INPUT_ARRAY(""input array""), /* keep */
",2,0,0,1,2,0,0,0,0,3,38,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,252,"    NUMERATOR(""numerator""), /* keep */
",2,0,0,1,2,0,0,0,0,3,34,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,253,"    NUMERATOR_FORMAT(""numerator format""), /* keep */
",2,0,0,1,2,0,0,0,0,3,48,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,254,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */
",2,0,0,1,2,0,0,0,0,3,75,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,255,"    REAL_FORMAT(""real format""), /* keep */
",2,0,0,1,2,0,0,0,0,3,38,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,256,"    WHOLE_FORMAT(""whole format""), /* keep */
",2,0,0,1,2,0,0,0,0,3,40,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,257,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */
",2,0,0,4,8,0,0,0,0,3,68,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,258,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */
",2,0,0,4,8,0,0,0,0,3,69,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,259,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */
",2,0,0,4,8,0,0,0,0,3,97,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,260,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */
",2,0,0,4,8,0,0,0,0,3,98,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,261,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),
",2,0,0,5,10,0,0,0,0,3,127,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,262,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),
",2,0,0,2,4,0,0,0,0,3,87,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,263,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),
",2,0,0,4,8,0,0,0,0,3,150,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,264,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),
",2,0,0,2,4,0,0,0,0,3,76,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,265,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),
",2,0,0,2,4,0,0,0,0,3,84,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,266,"    BOBYQA_BOUND_DIFFERENCE_CONDITION(""the difference between the upper and lower bound must be larger than twice the initial trust region radius ({0})""),
",2,0,0,3,6,0,0,0,0,3,150,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,267,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),
",2,0,0,3,6,0,0,0,0,3,87,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,268,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),
",2,0,0,4,8,0,0,0,0,3,101,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,269,"    SIGNIFICANCE_LEVEL(""significance level ({0})""), /* keep */
",2,0,0,3,6,0,0,0,0,3,58,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,270,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),
",2,0,0,5,10,0,0,0,0,3,150,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,271,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),
",2,0,0,6,12,0,0,0,0,3,96,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,272,"    OUT_OF_RANGE(""out of range""), /* keep */
",2,0,0,1,2,0,0,0,0,3,40,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,273,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */
",2,0,0,5,10,0,0,0,0,3,62,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,274,"    OUTLINE_BOUNDARY_LOOP_OPEN(""an outline boundary loop is open""),
",2,0,0,1,2,0,0,0,0,3,63,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,275,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),
",2,0,0,3,6,0,0,0,0,3,68,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,276,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),
",2,0,0,3,6,0,0,0,0,3,56,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,277,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),
",2,0,0,3,6,0,0,0,0,3,62,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,278,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),
",2,0,0,3,6,0,0,0,0,3,108,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,279,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),
",2,0,0,3,6,0,0,0,0,3,99,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,280,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */
",2,0,0,5,10,0,0,0,0,3,91,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,281,"    POLYNOMIAL(""polynomial""), /* keep */
",2,0,0,1,2,0,0,0,0,3,36,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,282,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),
",2,0,0,4,8,0,0,0,0,3,130,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,283,"    POPULATION_LIMIT_NOT_POSITIVE(""population limit has to be positive""),
",2,0,0,1,2,0,0,0,0,3,69,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,284,"    POSITION_SIZE_MISMATCH_INPUT_ARRAY(""position {0} and size {1} don't fit to the size of the input array {2}""),
",2,0,0,4,8,0,0,0,0,3,109,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,285,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),
",2,0,0,4,8,0,0,0,0,3,90,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,286,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),
",2,0,0,1,2,0,0,0,0,3,65,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,287,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),
",2,0,0,2,4,0,0,0,0,3,88,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,288,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),
",2,0,0,1,2,0,0,0,0,3,77,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,289,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),
",2,0,0,3,6,0,0,0,0,3,75,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,290,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),
",2,0,0,5,10,0,0,0,0,3,72,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,291,"    ROW_INDEX(""row index ({0})""), /* keep */
",2,0,0,3,6,0,0,0,0,3,40,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,292,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),
",2,0,0,7,14,0,0,0,0,3,126,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,293,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */
",2,0,0,5,10,0,0,0,0,3,98,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,294,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),
",2,0,0,5,10,0,0,0,0,3,113,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,295,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),
",2,0,0,1,2,0,0,0,0,3,66,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,296,"    SIMPLE_MESSAGE(""{0}""),
",2,0,0,2,4,0,0,0,0,3,22,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,297,"    SINGULAR_MATRIX(""matrix is singular""), /* keep */
",2,0,0,1,2,0,0,0,0,3,49,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,298,"    SINGULAR_OPERATOR(""operator is singular""),
",2,0,0,1,2,0,0,0,0,3,42,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,299,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),
",2,0,0,1,2,0,0,0,0,3,63,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,300,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),
",2,0,0,3,6,0,0,0,0,3,87,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,301,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),
",2,0,0,3,6,0,0,0,0,3,97,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,302,"    TOO_MUCH_CANCELLATION(""too much cancellation in a denominator""),
",2,0,0,1,2,0,0,0,0,3,64,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,303,"    TOO_MANY_REGRESSORS(""too many regressors ({0}) specified, only {1} in the model""),
",2,0,0,4,8,0,0,0,0,3,82,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,304,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),
",2,0,0,3,6,0,0,0,0,3,136,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,305,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),
",2,0,0,2,4,0,0,0,0,3,79,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,306,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),
",2,0,0,3,6,0,0,0,0,3,120,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,307,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),
",2,0,0,3,6,0,0,0,0,3,156,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,308,"    TRUST_REGION_STEP_FAILED(""trust region step has failed to reduce Q""),
",2,0,0,1,2,0,0,0,0,3,69,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,309,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),
",2,0,0,2,4,0,0,0,0,3,76,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,310,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),
",2,0,0,2,4,0,0,0,0,3,101,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,311,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),
",2,0,0,1,2,0,0,0,0,3,85,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,312,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),
",2,0,0,1,2,0,0,0,0,3,97,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,313,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),
",2,0,0,1,2,0,0,0,0,3,95,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,314,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),
",2,0,0,2,4,0,0,0,0,3,83,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,315,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),
",2,0,0,3,6,0,0,0,0,3,117,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,316,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),
",2,0,0,1,2,0,0,0,0,3,70,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,317,"    UNBOUNDED_SOLUTION(""unbounded solution""),
",2,0,0,1,2,0,0,0,0,3,41,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,318,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),
",2,0,0,20,40,0,0,0,0,3,118,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,319,"    UNKNOWN_PARAMETER(""unknown parameter {0}""),
",2,0,0,2,4,0,0,0,0,3,43,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,320,"    UNMATCHED_ODE_IN_EXPANDED_SET(""ode does not match the main ode set in the extended set""),
",2,0,0,1,2,0,0,0,0,3,89,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,321,"    CANNOT_PARSE_AS_TYPE(""string \""{0}\"" unparseable (from position {1}) as an object of type {2}""), /* keep */
",2,0,0,5,10,0,0,0,0,3,107,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,322,"    CANNOT_PARSE(""string \""{0}\"" unparseable (from position {1})""), /* keep */
",2,0,0,4,8,0,0,0,0,3,74,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,323,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),
",2,0,0,2,4,0,0,0,0,3,56,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,324,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),
",2,0,0,2,4,0,0,0,0,3,66,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,325,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),
",2,0,0,2,4,0,0,0,0,3,60,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,326,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),
",2,0,0,8,16,0,0,0,0,3,106,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,327,"    UNSUPPORTED_OPERATION(""unsupported operation""), /* keep */
",2,0,0,1,2,0,0,0,0,3,58,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,328,"    ARITHMETIC_EXCEPTION(""arithmetic exception""), /* keep */
",2,0,0,1,2,0,0,0,0,3,56,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,329,"    ILLEGAL_STATE(""illegal state""), /* keep */
",2,0,0,1,2,0,0,0,0,3,42,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,330,"    USER_EXCEPTION(""exception generated in user code""), /* keep */
",2,0,0,1,2,0,0,0,0,3,62,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,331,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),
",2,0,0,2,4,0,0,0,0,3,49,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,332,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),
",2,0,0,2,4,0,0,0,0,3,103,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,333,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),
",2,0,0,3,6,0,0,0,0,3,75,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,334,"    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(""vector must have at least one element""),
",2,0,0,1,2,0,0,0,0,3,79,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,335,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),
",2,0,0,1,2,0,0,0,0,3,86,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,336,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),
",2,0,0,4,8,0,0,0,0,3,75,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,337,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),
",2,0,0,3,6,0,0,0,0,3,64,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,338,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */
",2,0,0,3,6,0,0,0,0,3,54,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,339,"    ZERO_DENOMINATOR(""denominator must be different from 0""),
",2,0,0,1,2,0,0,0,0,3,57,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,340,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),
",2,0,0,3,6,0,0,0,0,3,69,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,341,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),
",2,0,0,3,6,0,0,0,0,3,82,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,342,"    ZERO_NORM(""zero norm""),
",2,0,0,1,2,0,0,0,0,3,23,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,343,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),
",2,0,0,1,2,0,0,0,0,3,59,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,344,"    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(""zero norm for rotation defining vector""),
",2,0,0,1,2,0,0,0,0,3,81,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,345,"    ZERO_NOT_ALLOWED(""zero not allowed here"");
",2,0,0,1,2,0,0,0,0,3,42,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,39,"public enum LocalizedFormats implements Localizable {
",2,0,0,0,1,1,0,2,0,5,53,1,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,364,"        return sourceFormat;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,370,"            ResourceBundle bundle =
",2,0,0,0,0,0,0,2,0,4,23,6,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,372,"            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {
",0,0,0,5,11,0,12,0,0,12,68,7,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,374,"                return bundle.getString(toString());
",0,0,0,2,4,1,6,0,0,6,36,9,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,379,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,377,"        } catch (MissingResourceException mre) {
",2,0,0,1,4,0,0,2,0,4,40,6,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,383,"        return sourceFormat;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,45,32,"    private ArgUtils() {}
",2,0,0,2,4,1,0,0,0,3,21,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,45,42,"        final List<Object> list = new ArrayList<Object>();
",2,0,0,1,2,1,0,8,0,11,50,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,45,43,"        if (array != null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,45,44,"            for (Object o : array) {
",4,0,0,1,3,0,0,2,0,6,24,6,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,45,45,"                if (o instanceof Object[]) {
",2,0,0,2,5,0,0,2,0,4,28,9,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,45,46,"                    for (Object oR : flatten((Object[]) o)) {
",4,0,0,4,9,0,2,4,0,10,41,10,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,45,47,"                        list.add(oR);
",0,0,0,1,2,0,6,0,0,6,13,13,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,45,50,"                    list.add(o);
",0,0,0,1,2,0,6,0,0,6,12,11,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,45,54,"        return list.toArray();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
