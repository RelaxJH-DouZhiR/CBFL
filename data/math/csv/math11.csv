dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,178,"        final int dim = getDimension();
",2,0,0,1,2,1,2,0,0,5,31,4,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,179,"        if (vals.length != dim) {
",6,1,0,1,3,0,0,0,0,7,25,4,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,183,"        return FastMath.pow(2 * FastMath.PI, -dim / 2) *
",6,3,0,1,2,1,4,0,0,14,48,4,0.50000,1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,229,"        final double[] centered = new double[values.length];
",6,0,0,2,4,1,0,0,0,7,52,4,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,230,"        for (int i = 0; i < centered.length; i++) {
",10,1,0,1,3,0,0,0,0,12,43,4,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,231,"            centered[i] = values[i] - getMeans()[i];
",0,1,1,4,8,0,2,0,0,14,40,6,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,233,"        final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered);
",2,0,0,2,4,1,6,0,0,9,77,4,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,234,"        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,235,"        for (int i = 0; i < preMultiplied.length; i++) {
",10,1,0,1,3,0,0,0,0,12,48,4,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,236,"            sum += preMultiplied[i] * centered[i];
",2,1,1,2,4,0,0,0,0,12,38,6,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,238,"        return FastMath.exp(-0.5 * sum);
",2,1,0,1,2,1,4,0,0,8,32,5,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,831,"        return exp(x, 0.0, null);
",0,0,0,1,2,1,4,0,0,5,25,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,850,"        if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,851,"            intVal = (int) -x;
",4,0,0,1,2,0,0,0,0,6,18,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,853,"            if (intVal > 746) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,861,"            if (intVal > 709) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,871,"            if (intVal == 709) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,881,"            intVal++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,883,"            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,884,"            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,886,"            intVal = -intVal;
",4,0,0,0,0,0,0,0,0,6,17,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,888,"            intVal = (int) x;
",4,0,0,1,2,0,0,0,0,5,17,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,890,"            if (intVal > 709) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,898,"            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,899,"            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,906,"        final int intFrac = (int) ((x - intVal) * 1024.0);
",6,2,0,3,6,1,0,0,0,9,50,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,907,"        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
",6,0,1,1,2,1,0,0,0,9,64,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,908,"        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
",6,0,1,1,2,1,0,0,0,9,64,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,914,"        final double epsilon = x - (intVal + intFrac / 1024.0);
",8,3,0,1,2,1,0,0,0,12,55,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,923,"        double z = 0.04168701738764507;
",2,0,0,0,0,0,0,0,0,2,31,5,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,924,"        z = z * epsilon + 0.1666666505023083;
",6,2,0,0,0,0,0,0,0,9,37,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,925,"        z = z * epsilon + 0.5000000000042687;
",6,2,0,0,0,0,0,0,0,9,37,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,926,"        z = z * epsilon + 1.0;
",6,2,0,0,0,0,0,0,0,9,22,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,927,"        z = z * epsilon + -3.940510424527919E-20;
",6,2,0,0,0,0,0,0,0,10,41,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,934,"        double tempA = intPartA * fracPartA;
",6,1,0,0,0,0,0,0,0,7,36,5,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,935,"        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;
",14,5,0,0,0,0,0,0,0,19,82,5,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,941,"        final double tempC = tempB + tempA;
",6,1,0,0,0,1,0,0,0,8,35,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,943,"        if (extra != 0.0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,946,"            result = tempC*z + tempB + tempA;
",10,3,0,0,0,0,0,0,0,14,33,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,949,"        if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,955,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1179,"            if (x < 1.01 && x > 0.99 && hiPrec == null) {
",6,5,0,1,3,0,0,0,0,11,45,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1246,"            double tmp = epsilon * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,36,7,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1247,"            double aa = epsilon + tmp - tmp;
",8,2,0,0,0,0,0,0,0,10,32,7,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1248,"            double ab = epsilon - aa;
",6,1,0,0,0,0,0,0,0,7,25,7,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1249,"            double xa = aa;
",4,0,0,0,0,0,0,0,0,4,15,7,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1250,"            double xb = ab;
",4,0,0,0,0,0,0,0,0,4,15,7,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1253,"            final double numer = bits & 0x3ffffffffffL;
",4,1,0,0,0,1,0,0,0,6,43,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1254,"            final double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);
",6,2,0,1,2,1,0,0,0,9,65,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1255,"            aa = numer - xa*denom - xb * denom;
",12,4,0,0,0,0,0,0,0,17,35,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1256,"            xb += aa / denom;
",6,1,0,0,0,0,0,0,0,8,17,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1259,"            final double[] lnCoef_last = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
",6,1,1,2,4,1,0,0,0,10,71,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1260,"            double ya = lnCoef_last[0];
",2,0,1,1,2,0,0,0,0,4,27,7,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1261,"            double yb = lnCoef_last[1];
",2,0,1,1,2,0,0,0,0,4,27,7,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1263,"            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {
",10,2,0,1,3,0,0,0,0,13,55,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1265,"                aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,8,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1266,"                ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,8,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1268,"                tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,8,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1269,"                ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,8,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1270,"                yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,8,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1273,"                final double[] lnCoef_i = LN_HI_PREC_COEF[i];
",2,0,1,2,4,1,0,0,0,7,45,8,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1274,"                aa = ya + lnCoef_i[0];
",4,1,1,1,2,0,0,0,0,8,22,8,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1275,"                ab = yb + lnCoef_i[1];
",4,1,1,1,2,0,0,0,0,8,22,8,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1277,"                tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,8,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1278,"                ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,8,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1279,"                yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,8,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1283,"            aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1284,"            ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1292,"            lnza = aa + ab;
",6,1,0,0,0,0,0,0,0,8,15,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1293,"            lnzb = -(lnza - aa - ab);
",8,1,0,1,2,0,0,0,0,11,25,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1294,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1348,"            hiPrec[0] = a;
",2,0,1,1,2,0,0,0,0,5,14,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1349,"            hiPrec[1] = b;
",2,0,1,1,2,0,0,0,0,5,14,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1443,"        final double lns[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,35,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1445,"        if (y == 0.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1449,"        if (x != x) { // X is NaN
",4,1,0,1,3,0,0,0,0,5,25,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1454,"        if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1479,"        if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1490,"        if (y == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1502,"        if (x == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1526,"        if (y == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1540,"        if (x < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1557,"        if (y < 8e298 && y > -8e298) {
",4,3,0,1,3,0,0,0,0,8,30,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1558,"            double tmp1 = y * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,31,7,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1559,"            ya = y + tmp1 - tmp1;
",8,2,0,0,0,0,0,0,0,11,21,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1560,"            yb = y - ya;
",6,1,0,0,0,0,0,0,0,8,12,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1561,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1569,"        final double lores = log(x, lns);
",2,0,0,1,2,1,6,0,0,9,33,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1570,"        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN
",0,0,0,2,5,0,6,0,0,6,73,5,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1574,"        double lna = lns[0];
",2,0,1,1,2,0,0,0,0,4,20,5,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1575,"        double lnb = lns[1];
",2,0,1,1,2,0,0,0,0,4,20,5,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1578,"        double tmp1 = lna * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,33,5,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1579,"        double tmp2 = lna + tmp1 - tmp1;
",8,2,0,0,0,0,0,0,0,10,32,5,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1580,"        lnb += lna - tmp2;
",6,1,0,0,0,0,0,0,0,8,18,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1581,"        lna = tmp2;
",4,0,0,0,0,0,0,0,0,5,11,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1584,"        final double aa = lna * ya;
",6,1,0,0,0,1,0,0,0,8,27,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1585,"        final double ab = lna * yb + lnb * ya + lnb * yb;
",14,5,0,0,0,1,0,0,0,20,49,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1587,"        lna = aa+ab;
",6,1,0,0,0,0,0,0,0,8,12,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1588,"        lnb = -(lna - aa - ab);
",8,1,0,1,2,0,0,0,0,11,23,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1590,"        double z = 1.0 / 120.0;
",2,1,0,0,0,0,0,0,0,3,23,5,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1591,"        z = z * lnb + (1.0 / 24.0);
",6,3,0,1,2,0,0,0,0,10,27,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1592,"        z = z * lnb + (1.0 / 6.0);
",6,3,0,1,2,0,0,0,0,10,26,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1593,"        z = z * lnb + 0.5;
",6,2,0,0,0,0,0,0,0,9,18,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1594,"        z = z * lnb + 1.0;
",6,2,0,0,0,0,0,0,0,9,18,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1595,"        z = z * lnb;
",6,1,0,0,0,0,0,0,0,8,12,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1597,"        final double result = exp(lna, z, null);
",2,0,0,1,2,1,6,0,0,10,40,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1599,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1613,"        if (e == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6142,"        return EXP_INT_A.clone();
",0,0,0,1,2,1,4,0,0,4,25,5,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6150,"        return EXP_INT_B.clone();
",0,0,0,1,2,1,4,0,0,4,25,5,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6158,"        return EXP_FRAC_A.clone();
",0,0,0,1,2,1,4,0,0,4,26,5,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6166,"        return EXP_FRAC_B.clone();
",0,0,0,1,2,1,4,0,0,4,26,5,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3744,"    private static class ExpFracTable {
",2,0,0,0,1,2,0,0,0,4,35,2,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3770,"                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();
",2,0,0,1,2,0,4,0,0,7,56,7,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3771,"                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();
",2,0,0,1,2,0,4,0,0,7,56,7,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3773,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3705,"    private static class ExpIntTable {
",2,0,0,0,1,2,0,0,0,4,34,2,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3737,"                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();
",2,0,0,1,2,0,4,0,0,7,54,7,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3738,"                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();
",2,0,0,1,2,0,4,0,0,7,54,7,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3740,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,373,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.50000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,374,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.50000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,375,"        if (v.length != nRows) {
",6,1,0,1,3,0,0,0,0,7,24,4,0.50000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,379,"        final double[] out = new double[nCols];
",2,0,1,2,4,1,0,0,0,5,39,4,0.50000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,380,"        for (int col = 0; col < nCols; ++col) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.50000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,381,"            double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.50000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,382,"            for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.50000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,383,"                sum += data[i][col] * v[i];
",2,1,1,3,6,0,0,0,0,14,27,8,0.50000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,385,"            out[col] = sum;
",2,0,1,1,2,0,0,0,0,7,15,6,0.50000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,388,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,164,"        return MathArrays.copyOf(means);
",0,0,0,1,2,1,6,0,0,6,32,5,0.33333,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1130,"        if (x==0) { // Handle special case of +0/-0
",2,1,0,1,3,0,0,0,0,3,43,4,0.25000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1133,"        long bits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,5,0.25000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1136,"        if ((bits & 0x8000000000000000L) != 0 || x != x) {
",6,4,0,2,5,0,0,0,0,10,50,4,0.25000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1147,"        if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.25000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1156,"        int exp = (int)(bits >> 52)-1023;
",4,2,0,2,4,0,0,0,0,6,33,5,0.25000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1158,"        if ((bits & 0x7ff0000000000000L) == 0) {
",2,2,0,2,5,0,0,0,0,4,40,4,0.25000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1178,"        if (exp == -1 || exp == 0) {
",4,3,0,1,3,0,0,0,0,8,28,4,0.25000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1228,"        final double[] lnm = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];
",8,2,0,5,10,1,0,0,0,11,79,4,0.25000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1239,"        final double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));
",8,4,0,3,6,1,0,0,0,13,95,4,0.25000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1241,"        double lnza = 0.0;
",2,0,0,0,0,0,0,0,0,2,18,5,0.25000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1242,"        double lnzb = 0.0;
",2,0,0,0,0,0,0,0,0,2,18,5,0.25000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1244,"        if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.25000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1320,"        double a = LN_2_A*exp;
",6,1,0,0,0,0,0,0,0,7,22,5,0.25000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1321,"        double b = 0.0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.25000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1322,"        double c = a+lnm[0];
",4,1,1,1,2,0,0,0,0,7,20,5,0.25000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1323,"        double d = -(c-a-lnm[0]);
",6,1,1,2,4,0,0,0,0,10,25,5,0.25000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1324,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.25000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1325,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.25000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1327,"        c = a + lnza;
",6,1,0,0,0,0,0,0,0,8,13,4,0.25000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1328,"        d = -(c - a - lnza);
",8,1,0,1,2,0,0,0,0,11,20,4,0.25000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1329,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.25000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1330,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.25000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1332,"        c = a + LN_2_B*exp;
",8,2,0,0,0,0,0,0,0,11,19,4,0.25000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1333,"        d = -(c - a - LN_2_B*exp);
",10,2,0,1,2,0,0,0,0,14,26,4,0.25000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1334,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.25000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1335,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.25000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1337,"        c = a + lnm[1];
",4,1,1,1,2,0,0,0,0,8,15,4,0.25000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1338,"        d = -(c - a - lnm[1]);
",6,1,1,2,4,0,0,0,0,11,22,4,0.25000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1339,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.25000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1340,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.25000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1342,"        c = a + lnzb;
",6,1,0,0,0,0,0,0,0,8,13,4,0.25000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1343,"        d = -(c - a - lnzb);
",8,1,0,1,2,0,0,0,0,11,20,4,0.25000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1344,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.25000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1345,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.25000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1347,"        if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.25000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1352,"        return a + b;
",4,1,0,0,0,1,0,0,0,5,13,4,0.25000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3777,"    private static class lnMant {
",2,0,0,0,1,2,0,0,0,4,29,2,0.25000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3791,"                LN_MANT = FastMathLiteralArrays.loadLnMant();
",2,0,0,1,2,0,4,0,0,7,45,7,0.25000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3793,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.25000,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,29,"    private static final double[] EXP_INT_A = new double[] {
",2,0,0,2,5,3,0,0,0,5,56,2,0.25000,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,1535,"    private static final double[] EXP_INT_B = new double[] {
",2,0,0,2,5,3,0,0,0,5,56,2,0.25000,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,3043,"    private static final double[] EXP_FRAC_A = new double[] {
",2,0,0,2,5,3,0,0,0,5,57,2,0.25000,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,4074,"    private static final double[] EXP_FRAC_B = new double[] {
",2,0,0,2,5,3,0,0,0,5,57,2,0.25000,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,5103,"    private static final double[][] LN_MANT = new double[][] {
",2,0,0,4,9,3,0,0,0,5,58,2,0.25000,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6174,"        return LN_MANT.clone();
",0,0,0,1,2,1,4,0,0,4,23,5,0.25000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,53,"        return dimension;
",2,0,0,0,0,1,0,0,0,2,17,4,0.12500,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,76,"        this(new Well19937c(), means, covariances);
",4,0,0,2,4,0,0,2,0,6,43,4,0.11111,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,77,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,103,"        super(rng, means.length);
",6,0,0,1,2,0,0,0,0,6,25,4,0.11111,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,105,"        final int dim = means.length;
",6,0,0,0,0,1,0,0,0,7,29,4,0.11111,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,107,"        if (covariances.length != dim) {
",6,1,0,1,3,0,0,0,0,7,32,4,0.11111,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,111,"        for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.11111,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,112,"            if (dim != covariances[i].length) {
",4,1,1,2,5,0,0,0,0,9,35,6,0.11111,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,117,"        this.means = MathArrays.copyOf(means);
",2,0,0,1,2,0,6,0,0,9,38,4,0.11111,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,119,"        covarianceMatrix = new Array2DRowRealMatrix(covariances);
",4,0,0,1,2,0,0,2,0,7,57,4,0.11111,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,122,"        final EigenDecomposition covMatDec = new EigenDecomposition(covarianceMatrix);
",4,0,0,1,2,1,0,4,0,9,78,4,0.11111,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,125,"        covarianceMatrixInverse = covMatDec.getSolver().getInverse();
",2,0,0,2,4,0,6,0,0,9,61,4,0.11111,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,127,"        covarianceMatrixDeterminant = covMatDec.getDeterminant();
",2,0,0,1,2,0,4,0,0,7,57,4,0.11111,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,130,"        final double[] covMatEigenvalues = covMatDec.getRealEigenvalues();
",2,0,0,2,4,1,4,0,0,7,66,4,0.11111,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,132,"        for (int i = 0; i < covMatEigenvalues.length; i++) {
",10,1,0,1,3,0,0,0,0,12,52,4,0.11111,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,133,"            if (covMatEigenvalues[i] < 0) {
",0,1,1,2,5,0,0,0,0,5,31,6,0.11111,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,139,"        final Array2DRowRealMatrix covMatEigenvectors = new Array2DRowRealMatrix(dim, dim);
",6,0,0,1,2,1,0,4,0,11,83,4,0.11111,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,140,"        for (int v = 0; v < dim; v++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.11111,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,141,"            final double[] evec = covMatDec.getEigenvector(v).toArray();
",2,0,0,3,6,1,8,0,0,11,60,6,0.11111,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,142,"            covMatEigenvectors.setColumn(v, evec);
",0,0,0,1,2,0,8,0,0,8,38,7,0.11111,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,145,"        final RealMatrix tmpMatrix = covMatEigenvectors.transpose();
",2,0,0,1,2,1,4,2,0,9,60,4,0.11111,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,148,"        for (int row = 0; row < dim; row++) {
",8,1,0,1,3,0,0,0,0,10,37,4,0.11111,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,149,"            final double factor = FastMath.sqrt(covMatEigenvalues[row]);
",2,0,1,2,4,1,4,0,0,11,60,6,0.11111,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,150,"            for (int col = 0; col < dim; col++) {
",8,1,0,1,3,0,0,0,0,10,37,6,0.11111,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,151,"                tmpMatrix.multiplyEntry(row, col, factor);
",0,0,0,1,2,0,10,0,0,10,42,9,0.11111,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,155,"        samplingMatrix = covMatEigenvectors.multiply(tmpMatrix);
",2,0,0,1,2,0,6,0,0,9,56,4,0.11111,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,156,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,41,"                                                   int n) {
",2,0,0,0,2,0,0,0,0,2,8,3,0.11111,0
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,42,"        random = rng;
",4,0,0,0,0,0,0,0,0,5,13,4,0.11111,0
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,43,"        dimension = n;
",4,0,0,0,0,0,0,0,0,5,14,4,0.11111,0
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,44,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,97,"    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);
",6,0,0,1,2,3,4,0,0,13,77,2,0.11111,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,115,"    private static final double LN_QUICK_COEF[][] = {
",2,0,0,2,5,3,0,0,0,5,49,2,0.11111,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,128,"    private static final double LN_HI_PREC_COEF[][] = {
",2,0,0,2,5,3,0,0,0,5,51,2,0.11111,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,141,"    private static final double SINE_TABLE_A[] =
",2,0,0,1,2,3,0,0,0,5,44,2,0.11111,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,160,"    private static final double SINE_TABLE_B[] =
",2,0,0,1,2,3,0,0,0,5,44,2,0.11111,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,179,"    private static final double COSINE_TABLE_A[] =
",2,0,0,1,2,3,0,0,0,5,46,2,0.11111,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,198,"    private static final double COSINE_TABLE_B[] =
",2,0,0,1,2,3,0,0,0,5,46,2,0.11111,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,218,"    private static final double TANGENT_TABLE_A[] =
",2,0,0,1,2,3,0,0,0,5,47,2,0.11111,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,237,"    private static final double TANGENT_TABLE_B[] =
",2,0,0,1,2,3,0,0,0,5,47,2,0.11111,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,256,"    private static final long RECIP_2PI[] = new long[] {
",2,0,0,2,5,3,0,0,0,5,52,2,0.11111,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,277,"    private static final long PI_O_4_BITS[] = new long[] {
",2,0,0,2,5,3,0,0,0,5,54,2,0.11111,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};
",2,0,0,2,4,3,0,0,0,5,126,2,0.11111,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,
",2,0,0,1,3,3,0,0,0,5,61,2,0.11111,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,379,"        return Math.sqrt(a);
",0,0,0,1,2,1,6,0,0,6,20,5,0.11111,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2999,"        return (x < 0l) ? -x : x;
",6,1,0,1,2,1,0,0,0,8,25,5,0.11111,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3017,"        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0
",8,2,0,2,4,1,0,0,0,11,61,5,0.11111,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3421,"        return (a <= b) ? a : b;
",8,1,0,1,2,1,0,0,0,9,24,5,0.11111,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,719,"         return copyOf(source, source.length);
",4,0,0,1,2,1,4,0,0,8,37,5,0.11111,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,747,"         final double[] output = new double[len];
",2,0,1,2,4,1,0,0,0,5,40,4,0.11111,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,748,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));
",4,0,0,2,4,0,14,0,0,18,73,5,0.11111,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,749,"         return output;
",2,0,0,0,0,1,0,0,0,2,14,4,0.11111,0
defect4j,math,org/apache/commons/math3/util/Precision,11,70,"        EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);
",4,2,0,2,4,0,4,0,0,11,65,4,0.11111,0
defect4j,math,org/apache/commons/math3/util/Precision,11,77,"        SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);
",4,2,0,2,4,0,4,0,0,11,68,4,0.11111,0
defect4j,math,org/apache/commons/math3/util/Precision,11,78,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math3/util/Precision,11,272,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;
",6,3,0,2,4,1,10,0,0,19,53,4,0.11111,0
defect4j,math,org/apache/commons/math3/util/Precision,11,331,"        long xInt = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,5,0.11111,0
defect4j,math,org/apache/commons/math3/util/Precision,11,332,"        long yInt = Double.doubleToLongBits(y);
",2,0,0,1,2,0,6,0,0,8,39,5,0.11111,0
defect4j,math,org/apache/commons/math3/util/Precision,11,335,"        if (xInt < 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.11111,0
defect4j,math,org/apache/commons/math3/util/Precision,11,338,"        if (yInt < 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.11111,0
defect4j,math,org/apache/commons/math3/util/Precision,11,342,"        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;
",8,2,0,1,2,1,4,0,0,15,61,4,0.11111,0
defect4j,math,org/apache/commons/math3/util/Precision,11,344,"        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);
",2,1,0,2,4,1,12,0,0,17,55,4,0.11111,0
defect4j,math,org/apache/commons/math3/util/MathUtils,11,264,"        if (o == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.11111,0
defect4j,math,org/apache/commons/math3/util/MathUtils,11,267,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,43,"        return getDefaultNumberFormat(Locale.getDefault());
",0,0,0,2,4,1,6,0,0,6,51,5,0.11111,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,54,"        final NumberFormat nf = NumberFormat.getInstance(locale);
",2,0,0,1,2,1,6,2,0,11,57,4,0.11111,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,55,"        nf.setMaximumFractionDigits(10);
",0,0,0,1,2,0,4,0,0,4,32,5,0.11111,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,56,"        return nf;
",2,0,0,0,0,1,0,0,0,2,10,4,0.11111,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,40,"    public BitsStreamGenerator() {
",2,0,0,1,3,1,0,0,0,3,30,2,0.11111,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,41,"        nextGaussian = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,26,4,0.11111,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,42,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,170,"        nextGaussian = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,26,4,0.11111,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,171,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,72,"        this(k, m1, m2, m3, null);
",8,0,0,1,2,0,0,0,0,8,26,4,0.11111,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,73,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,94,"    protected AbstractWell(final int k, final int m1, final int m2, final int m3, final int[] seed) {
",12,0,0,2,5,6,0,0,0,18,97,2,0.11111,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,99,"        final int w = 32;
",2,0,0,0,0,1,0,0,0,3,17,4,0.11111,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,100,"        final int r = (k + w - 1) / w;
",8,3,0,1,2,1,0,0,0,12,30,4,0.11111,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,101,"        this.v      = new int[r];
",2,0,1,1,2,0,0,0,0,5,25,4,0.11111,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,102,"        this.index  = 0;
",2,0,0,0,0,0,0,0,0,3,16,4,0.11111,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,106,"        iRm1 = new int[r];
",2,0,1,1,2,0,0,0,0,5,18,4,0.11111,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,107,"        iRm2 = new int[r];
",2,0,1,1,2,0,0,0,0,5,18,4,0.11111,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,108,"        i1   = new int[r];
",2,0,1,1,2,0,0,0,0,5,18,4,0.11111,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,109,"        i2   = new int[r];
",2,0,1,1,2,0,0,0,0,5,18,4,0.11111,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,110,"        i3   = new int[r];
",2,0,1,1,2,0,0,0,0,5,18,4,0.11111,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,111,"        for (int j = 0; j < r; ++j) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.11111,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,112,"            iRm1[j] = (j + r - 1) % r;
",6,3,1,2,4,0,0,0,0,14,26,6,0.11111,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,113,"            iRm2[j] = (j + r - 2) % r;
",6,3,1,2,4,0,0,0,0,14,26,6,0.11111,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,114,"            i1[j]   = (j + m1)    % r;
",6,2,1,2,4,0,0,0,0,13,26,6,0.11111,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,115,"            i2[j]   = (j + m2)    % r;
",6,2,1,2,4,0,0,0,0,13,26,6,0.11111,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,116,"            i3[j]   = (j + m3)    % r;
",6,2,1,2,4,0,0,0,0,13,26,6,0.11111,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,120,"        setSeed(seed);
",0,0,0,1,2,0,4,0,0,4,14,5,0.11111,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,122,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,154,"        if (seed == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.11111,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,155,"            setSeed(System.currentTimeMillis() + System.identityHashCode(this));
",0,1,0,3,6,0,10,0,0,11,68,7,0.11111,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,156,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.11111,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,159,"        System.arraycopy(seed, 0, v, 0, Math.min(seed.length, v.length));
",8,0,0,2,4,0,12,0,0,20,65,5,0.11111,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,161,"        if (seed.length < v.length) {
",8,1,0,1,3,0,0,0,0,9,29,4,0.11111,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,162,"            for (int i = seed.length; i < v.length; ++i) {
",14,1,0,1,3,0,0,0,0,16,46,6,0.11111,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,163,"                final long l = v[i - seed.length];
",8,1,1,1,2,1,0,0,0,12,34,8,0.11111,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,164,"                v[i] = (int) ((1812433253l * (l ^ (l >> 30)) + i) & 0xffffffffL);
",6,5,1,6,12,0,0,0,0,16,65,8,0.11111,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,168,"        index = 0;
",2,0,0,0,0,0,0,0,0,3,10,4,0.11111,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,169,"        clear();  // Clear normal deviate cache
",0,0,0,1,2,0,2,0,0,2,39,5,0.11111,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,170,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,179,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });
",4,2,0,7,14,0,2,0,0,8,71,5,0.11111,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,180,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math3/random/Well19937c,11,57,"        super(K, M1, M2, M3);
",8,0,0,1,2,0,0,0,0,8,21,4,0.11111,0
defect4j,math,org/apache/commons/math3/random/Well19937c,11,58,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,11,30,"public class DefaultRealMatrixPreservingVisitor implements RealMatrixPreservingVisitor {
",2,0,0,0,1,1,0,2,0,5,88,1,0.11111,0
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,11,34,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,11,41,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.11111,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,56,"    protected AbstractRealMatrix() {}
",2,0,0,2,4,1,0,0,0,3,33,2,0.11111,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,67,"        throws NotStrictlyPositiveException {
",2,0,0,0,1,0,0,0,0,2,37,2,0.11111,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,68,"        if (rowDimension < 1) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,71,"        if (columnDimension < 1) {
",2,1,0,1,3,0,0,0,0,3,26,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,74,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,47,"    private static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance(Locale.US);
",6,0,0,1,2,3,4,2,0,15,95,2,0.11111,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,50,"        DEFAULT_FORMAT.getFormat().setMinimumFractionDigits(1);
",0,0,0,2,4,0,6,0,0,6,55,5,0.11111,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,51,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,141,"        MatrixUtils.checkMultiplicationCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,51,5,0.11111,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,143,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,144,"        final int nCols = m.getColumnDimension();
",2,0,0,1,2,1,4,0,0,7,41,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,145,"        final int nSum  = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,146,"        final RealMatrix out = createMatrix(nRows, nCols);
",2,0,0,1,2,1,6,2,0,11,50,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,147,"        for (int row = 0; row < nRows; ++row) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,148,"            for (int col = 0; col < nCols; ++col) {
",8,1,0,1,3,0,0,0,0,10,39,6,0.11111,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,149,"                double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,9,0.11111,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,150,"                for (int i = 0; i < nSum; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,8,0.11111,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,151,"                    sum += getEntry(row, i) * m.getEntry(i, col);
",2,1,0,2,4,0,14,0,0,18,45,10,0.11111,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,153,"                out.setEntry(row, col, sum);
",0,0,0,1,2,0,10,0,0,10,28,9,0.11111,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,157,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,572,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.11111,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,573,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,574,"        if (array.length != nRows) {
",6,1,0,1,3,0,0,0,0,7,28,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,577,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,578,"            setEntry(i, column, array[i]);
",0,0,1,2,4,0,6,0,0,10,30,7,0.11111,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,580,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,598,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,599,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,600,"        final RealMatrix out = createMatrix(nCols, nRows);
",2,0,0,1,2,1,6,2,0,11,50,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,601,"        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {
",0,0,0,1,4,0,2,2,0,4,63,5,0.11111,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,611,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,616,"        return getColumnDimension() == getRowDimension();
",0,1,0,2,4,1,4,0,0,5,49,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,873,"        return walkInRowOrder(visitor);
",0,0,0,1,2,1,4,0,0,4,31,5,0.11111,0
defect4j,math,org/apache/commons/math3/linear/RealLinearOperator,11,53,"public abstract class RealLinearOperator {
",2,0,0,0,1,2,0,0,0,4,42,1,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,61,"        super(rowDimension, columnDimension);
",4,0,0,1,2,0,0,0,0,4,37,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,62,"        data = new double[rowDimension][columnDimension];
",2,0,1,2,4,0,0,0,0,7,49,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,63,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,79,"        throws DimensionMismatchException, NoDataException, NullArgumentException {
",6,0,0,0,1,0,0,0,0,6,75,2,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,80,"        copyIn(d);
",0,0,0,1,2,0,4,0,0,4,10,5,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,81,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,145,"        return new Array2DRowRealMatrix(rowDimension, columnDimension);
",4,0,0,1,2,1,0,2,0,6,63,5,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,254,"        return copyOut();
",0,0,0,1,2,1,2,0,0,2,17,5,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,272,"        if (data == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,273,"            if (row > 0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,276,"            if (column > 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,279,"            MathUtils.checkNotNull(subMatrix);
",0,0,0,1,2,0,6,0,0,6,34,7,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,280,"            final int nRows = subMatrix.length;
",6,0,0,0,0,1,0,0,0,7,35,6,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,281,"            if (nRows == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,285,"            final int nCols = subMatrix[0].length;
",4,0,1,1,2,1,0,0,0,7,38,6,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,286,"            if (nCols == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,289,"            data = new double[subMatrix.length][nCols];
",6,0,1,2,4,0,0,0,0,9,43,6,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,290,"            for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,291,"                if (subMatrix[i].length != nCols) {
",4,1,1,2,5,0,0,0,0,9,35,8,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,294,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);
",4,1,1,3,6,0,8,0,0,19,64,9,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,296,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,300,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,306,"        MatrixUtils.checkMatrixIndex(this, row, column);
",0,0,0,1,2,0,8,0,0,8,48,5,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,307,"        return data[row][column];
",0,0,1,2,4,1,0,0,0,6,25,5,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,314,"        MatrixUtils.checkMatrixIndex(this, row, column);
",0,0,0,1,2,0,8,0,0,8,48,5,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,315,"        data[row][column] = value;
",2,0,1,2,4,0,0,0,0,9,26,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,316,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,332,"        MatrixUtils.checkMatrixIndex(this, row, column);
",0,0,0,1,2,0,8,0,0,8,48,5,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,333,"        data[row][column] *= factor;
",2,0,1,2,4,0,0,0,0,9,28,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,334,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,339,"        return (data == null) ? 0 : data.length;
",6,1,0,1,2,1,0,0,0,7,40,5,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,345,"        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;
",4,3,1,5,10,1,0,0,0,11,66,5,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,410,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,411,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,412,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,413,"        for (int i = 0; i < rows; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,414,"            final double[] rowI = data[i];
",2,0,1,2,4,1,0,0,0,7,30,6,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,415,"            for (int j = 0; j < columns; ++j) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,416,"                visitor.visit(i, j, rowI[j]);
",0,0,1,2,4,0,8,0,0,12,29,9,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,419,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,528,"        final int nRows = this.getRowDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,529,"        final double[][] out = new double[nRows][this.getColumnDimension()];
",2,0,1,5,10,1,2,0,0,7,68,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,531,"        for (int i = 0; i < nRows; i++) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,532,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);
",2,0,1,4,8,0,4,0,0,18,56,7,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,534,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,547,"        setSubMatrix(in, 0, 0);
",0,0,0,1,2,0,4,0,0,4,23,5,0.11111,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,548,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,60,"public abstract class RealVector {
",2,0,0,0,1,2,0,0,0,4,34,1,0.11111,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1159,"    @Deprecated
",2,0,0,0,0,0,0,0,0,2,11,3,0.11111,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,85,"    public ArrayRealVector(double[] d) {
",4,0,0,2,5,1,0,0,0,5,36,2,0.11111,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,86,"        data = d.clone();
",2,0,0,1,2,0,4,0,0,7,17,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,87,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,202,"    public ArrayRealVector(ArrayRealVector v, boolean deep) {
",6,0,0,1,3,1,0,2,0,9,57,2,0.11111,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,203,"        data = deep ? v.data.clone() : v.data;
",12,0,0,1,2,0,2,0,0,15,38,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,204,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,43,"    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();
",2,0,0,1,2,3,4,2,0,11,86,2,0.11111,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,289,"        return new ArrayRealVector(this, true);
",0,0,0,1,2,1,0,2,0,3,39,5,0.11111,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,450,"        return data;
",2,0,0,0,0,1,0,0,0,2,12,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,726,"        return data.clone();
",0,0,0,1,2,1,4,0,0,4,20,5,0.11111,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,82,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);
",8,0,0,1,2,0,0,0,0,8,64,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,83,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,106,"                            final String separator, final NumberFormat format) {
",4,0,0,0,2,2,0,4,0,10,52,3,0.11111,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,107,"        this.prefix      = prefix;
",4,0,0,0,0,0,0,0,0,5,26,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,108,"        this.suffix      = suffix;
",4,0,0,0,0,0,0,0,0,5,26,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,109,"        this.separator   = separator;
",4,0,0,0,0,0,0,0,0,5,29,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,110,"        trimmedPrefix    = prefix.trim();
",2,0,0,1,2,0,4,0,0,7,33,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,111,"        trimmedSuffix    = suffix.trim();
",2,0,0,1,2,0,4,0,0,7,33,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,112,"        trimmedSeparator = separator.trim();
",2,0,0,1,2,0,4,0,0,7,36,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,113,"        this.format      = format;
",4,0,0,0,0,0,0,0,0,5,26,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,114,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,162,"        return getInstance(Locale.getDefault());
",0,0,0,2,4,1,6,0,0,6,40,5,0.11111,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,171,"        return new RealVectorFormat(CompositeFormat.getDefaultNumberFormat(locale));
",0,0,0,2,4,1,6,2,0,8,76,5,0.11111,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,601,"        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {
",0,0,0,1,4,0,2,2,0,4,63,5,0.11111,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,606,"                out.setEntry(column, row, value);
",0,0,0,1,2,0,10,0,0,10,33,11,0.11111,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,607,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,62,"    public TriDiagonalTransformer(RealMatrix matrix) {
",4,0,0,1,3,1,0,2,0,7,50,2,0.11111,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,63,"        if (!matrix.isSquare()) {
",0,0,0,2,5,0,4,0,0,5,25,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,68,"        final int m = matrix.getRowDimension();
",2,0,0,1,2,1,4,0,0,7,39,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,69,"        householderVectors = matrix.getData();
",2,0,0,1,2,0,4,0,0,7,38,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,70,"        main      = new double[m];
",2,0,1,1,2,0,0,0,0,5,26,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,71,"        secondary = new double[m - 1];
",4,1,0,1,2,0,0,0,0,6,30,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,72,"        cachedQ   = null;
",2,0,0,0,0,0,0,0,0,3,17,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,73,"        cachedQt  = null;
",2,0,0,0,0,0,0,0,0,3,17,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,74,"        cachedT   = null;
",2,0,0,0,0,0,0,0,0,3,17,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,77,"        transform();
",0,0,0,1,2,0,2,0,0,2,12,5,0.11111,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,78,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,86,"        if (cachedQ == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,87,"            cachedQ = getQT().transpose();
",2,0,0,2,4,0,4,0,0,7,30,6,0.11111,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,89,"        return cachedQ;
",2,0,0,0,0,1,0,0,0,2,15,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,98,"        if (cachedQt == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,99,"            final int m = householderVectors.length;
",6,0,0,0,0,1,0,0,0,7,40,6,0.11111,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,100,"            double[][] qta = new double[m][m];
",2,0,1,4,8,0,0,0,0,6,34,7,0.11111,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,103,"            for (int k = m - 1; k >= 1; --k) {
",8,2,0,1,3,0,0,0,0,11,34,6,0.11111,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,126,"            qta[0][0] = 1;
",0,0,1,2,4,0,0,0,0,3,14,6,0.11111,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,127,"            cachedQt = MatrixUtils.createRealMatrix(qta);
",2,0,0,1,2,0,6,0,0,9,45,6,0.11111,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,131,"        return cachedQt;
",2,0,0,0,0,1,0,0,0,2,16,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,175,"        return main;
",2,0,0,0,0,1,0,0,0,2,12,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,185,"        return secondary;
",2,0,0,0,0,1,0,0,0,2,17,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,193,"        final int m = householderVectors.length;
",6,0,0,0,0,1,0,0,0,7,40,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,194,"        final double[] z = new double[m];
",2,0,1,2,4,1,0,0,0,5,33,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,195,"        for (int k = 0; k < m - 1; k++) {
",8,2,0,1,3,0,0,0,0,11,33,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,252,"        main[m - 1] = householderVectors[m - 1][m - 1];
",6,3,1,3,6,0,0,0,0,14,47,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,253,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,99,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,
",8,0,0,0,1,0,0,0,0,8,76,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,101,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,115,"        this(prefix, suffix, rowPrefix, rowSuffix, rowSeparator, columnSeparator,
",12,0,0,0,1,0,0,0,0,12,73,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,117,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,133,"                            final NumberFormat format) {
",2,0,0,0,2,1,0,2,0,5,28,3,0.11111,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,134,"        this.prefix            = prefix;
",4,0,0,0,0,0,0,0,0,5,32,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,135,"        this.suffix            = suffix;
",4,0,0,0,0,0,0,0,0,5,32,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,136,"        this.rowPrefix         = rowPrefix;
",4,0,0,0,0,0,0,0,0,5,35,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,137,"        this.rowSuffix         = rowSuffix;
",4,0,0,0,0,0,0,0,0,5,35,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,138,"        this.rowSeparator      = rowSeparator;
",4,0,0,0,0,0,0,0,0,5,38,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,139,"        this.columnSeparator   = columnSeparator;
",4,0,0,0,0,0,0,0,0,5,41,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,140,"        this.format            = format;
",4,0,0,0,0,0,0,0,0,5,32,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,142,"        this.format.setGroupingUsed(false);
",2,0,0,1,2,0,2,0,0,5,35,5,0.11111,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,143,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,207,"        return format;
",2,0,0,0,0,1,0,0,0,2,14,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,215,"        return getInstance(Locale.getDefault());
",0,0,0,2,4,1,6,0,0,6,40,5,0.11111,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,224,"        return new RealMatrixFormat(CompositeFormat.getDefaultNumberFormat(locale));
",0,0,0,2,4,1,6,2,0,8,76,5,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,430,"                final ArrayRealVector[] eigenvectors) {
",2,0,0,1,4,1,0,2,0,5,39,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,431,"            this.realEigenvalues = realEigenvalues;
",4,0,0,0,0,0,0,0,0,5,39,5,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,432,"            this.imagEigenvalues = imagEigenvalues;
",4,0,0,0,0,0,0,0,0,5,39,5,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,433,"            this.eigenvectors = eigenvectors;
",4,0,0,0,0,0,0,0,0,5,33,5,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,434,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,413,"    private static class Solver implements DecompositionSolver {
",2,0,0,0,1,2,0,2,0,6,60,2,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,516,"            for (int i = 0; i < realEigenvalues.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,50,5,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,517,"                if (realEigenvalues[i] == 0 &&
",0,2,1,1,3,0,0,0,0,6,30,7,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,522,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,5,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,532,"            if (!isNonSingular()) {
",0,0,0,2,5,0,2,0,0,3,23,5,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,536,"            final int m = realEigenvalues.length;
",6,0,0,0,0,1,0,0,0,7,37,5,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,537,"            final double[][] invData = new double[m][m];
",2,0,1,4,8,1,0,0,0,7,44,5,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,539,"            for (int i = 0; i < m; ++i) {
",8,1,0,1,3,0,0,0,0,10,29,5,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,540,"                final double[] invI = invData[i];
",2,0,1,2,4,1,0,0,0,7,33,7,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,541,"                for (int j = 0; j < m; ++j) {
",8,1,0,1,3,0,0,0,0,10,29,7,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,542,"                    double invIJ = 0;
",2,0,0,0,0,0,0,0,0,2,17,10,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,543,"                    for (int k = 0; k < m; ++k) {
",8,1,0,1,3,0,0,0,0,10,29,9,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,544,"                        final double[] vK = eigenvectors[k].getDataRef();
",2,0,1,3,6,1,2,0,0,9,49,11,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,545,"                        invIJ += vK[i] * vK[j] / realEigenvalues[k];
",2,2,1,3,6,0,0,0,0,17,44,11,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,547,"                    invI[j] = invIJ;
",2,0,1,1,2,0,0,0,0,7,16,9,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,550,"            return MatrixUtils.createRealMatrix(invData);
",0,0,0,1,2,1,6,0,0,6,45,6,0.11111,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,52,"    public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();
",2,0,0,1,2,3,4,2,0,11,85,2,0.11111,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,58,"    public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(""["", ""]"", """", """", ""; "", "", "");
",2,0,0,2,4,3,0,4,0,15,104,2,0.11111,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,130,"        if (data == null ||
",2,2,0,0,1,0,0,0,0,4,19,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,134,"        return (data.length * data[0].length <= 4096) ?
",6,2,1,2,4,1,0,0,0,10,47,6,0.11111,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,391,"        final int rows = matrix.getRowDimension();
",2,0,0,1,2,1,4,0,0,7,42,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,392,"        if (rows != matrix.getColumnDimension()) {
",2,1,0,2,5,0,4,0,0,7,42,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,399,"        for (int i = 0; i < rows; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,400,"            for (int j = i + 1; j < rows; j++) {
",10,2,0,1,3,0,0,0,0,13,36,6,0.11111,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,413,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,440,"        return isSymmetricInternal(matrix, eps, false);
",0,0,0,1,2,1,6,0,0,7,47,5,0.11111,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,455,"        checkRowIndex(m, row);
",0,0,0,1,2,0,6,0,0,6,22,5,0.11111,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,456,"        checkColumnIndex(m, column);
",0,0,0,1,2,0,6,0,0,6,28,5,0.11111,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,457,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,468,"        if (row < 0 ||
",2,2,0,0,1,0,0,0,0,4,14,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,473,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,484,"        if (column < 0 || column >= m.getColumnDimension()) {
",4,3,0,2,5,0,4,0,0,11,53,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,488,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,607,"        if (left.getColumnDimension() != right.getRowDimension()) {
",0,1,0,3,7,0,8,0,0,9,59,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,611,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,118,"        throws MathArithmeticException {
",2,0,0,0,1,0,0,0,0,2,32,2,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,81,"    private byte maxIter = 30;
",2,0,0,0,0,1,0,0,0,3,26,2,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,119,"        final double symTol = 10 * matrix.getRowDimension() * matrix.getColumnDimension() * Precision.EPSILON;
",6,1,0,2,4,1,8,0,0,16,102,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,120,"        isSymmetric = MatrixUtils.isSymmetric(matrix, symTol);
",2,0,0,1,2,0,8,0,0,11,54,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,121,"        if (isSymmetric) {
",2,0,0,1,3,0,0,0,0,2,18,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,122,"            transformToTridiagonal(matrix);
",0,0,0,1,2,0,4,0,0,4,31,7,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,123,"            findEigenVectors(transformer.getQ().getData());
",0,0,0,3,6,0,8,0,0,8,47,7,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,128,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,272,"        for (int i = 0; i < imagEigenvalues.length; i++) {
",10,1,0,1,3,0,0,0,0,12,50,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,273,"            if (!Precision.equals(imagEigenvalues[i], 0.0, EPSILON)) {
",0,0,1,3,7,0,6,0,0,11,58,6,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,277,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,290,"        return realEigenvalues.clone();
",0,0,0,1,2,1,4,0,0,4,31,5,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,348,"        return eigenvectors[i].copy();
",0,0,1,2,4,1,2,0,0,6,30,5,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,357,"        double determinant = 1;
",2,0,0,0,0,0,0,0,0,2,23,5,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,358,"        for (double lambda : realEigenvalues) {
",4,0,0,1,3,0,0,0,0,4,39,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,359,"            determinant *= lambda;
",4,0,0,0,0,0,0,0,0,5,22,6,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,361,"        return determinant;
",2,0,0,0,0,1,0,0,0,2,19,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,406,"        if (hasComplexEigenvalues()) {
",0,0,0,2,5,0,2,0,0,2,30,5,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,409,"        return new Solver(realEigenvalues, imagEigenvalues, eigenvectors);
",6,0,0,1,2,1,0,2,0,8,66,5,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,561,"        transformer = new TriDiagonalTransformer(matrix);
",4,0,0,1,2,0,0,2,0,7,49,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,562,"        main = transformer.getMainDiagonalRef();
",2,0,0,1,2,0,4,0,0,7,40,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,563,"        secondary = transformer.getSecondaryDiagonalRef();
",2,0,0,1,2,0,4,0,0,7,50,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,564,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,573,"        final double[][]z = householderMatrix.clone();
",2,0,0,3,6,1,4,0,0,7,46,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,574,"        final int n = main.length;
",6,0,0,0,0,1,0,0,0,7,26,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,575,"        realEigenvalues = new double[n];
",2,0,1,1,2,0,0,0,0,5,32,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,576,"        imagEigenvalues = new double[n];
",2,0,1,1,2,0,0,0,0,5,32,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,577,"        final double[] e = new double[n];
",2,0,1,2,4,1,0,0,0,5,33,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,578,"        for (int i = 0; i < n - 1; i++) {
",8,2,0,1,3,0,0,0,0,11,33,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,582,"        realEigenvalues[n - 1] = main[n - 1];
",4,2,1,2,4,0,0,0,0,11,37,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,583,"        e[n - 1] = 0;
",2,1,1,1,2,0,0,0,0,6,13,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,586,"        double maxAbsoluteValue = 0;
",2,0,0,0,0,0,0,0,0,2,28,5,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,587,"        for (int i = 0; i < n; i++) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,588,"            if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {
",2,1,1,3,7,0,4,0,0,11,58,6,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,589,"                maxAbsoluteValue = FastMath.abs(realEigenvalues[i]);
",2,0,1,2,4,0,4,0,0,11,52,8,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,591,"            if (FastMath.abs(e[i]) > maxAbsoluteValue) {
",2,1,1,3,7,0,4,0,0,11,44,6,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,596,"        if (maxAbsoluteValue != 0) {
",2,1,0,1,3,0,0,0,0,3,28,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,597,"            for (int i=0; i < n; i++) {
",8,1,0,1,3,0,0,0,0,10,27,6,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,598,"                if (FastMath.abs(realEigenvalues[i]) <= Precision.EPSILON * maxAbsoluteValue) {
",6,2,1,3,7,0,4,0,0,16,79,8,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,601,"                if (FastMath.abs(e[i]) <= Precision.EPSILON * maxAbsoluteValue) {
",6,2,1,3,7,0,4,0,0,16,65,8,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,602,"                    e[i]=0;
",0,0,1,1,2,0,0,0,0,5,7,10,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,607,"        for (int j = 0; j < n; j++) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,608,"            int its = 0;
",2,0,0,0,0,0,0,0,0,2,12,7,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,611,"                for (m = j; m < n - 1; m++) {
",10,2,0,1,3,0,0,0,0,14,29,8,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,618,"                if (m != j) {
",4,1,0,1,3,0,0,0,0,5,13,8,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,674,"            } while (m != j);
",4,1,0,1,3,0,0,0,0,5,17,6,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,678,"        for (int i = 0; i < n; i++) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,679,"            int k = i;
",4,0,0,0,0,0,0,0,0,4,10,7,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,680,"            double p = realEigenvalues[i];
",2,0,1,1,2,0,0,0,0,6,30,7,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,681,"            for (int j = i + 1; j < n; j++) {
",10,2,0,1,3,0,0,0,0,13,33,6,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,687,"            if (k != i) {
",4,1,0,1,3,0,0,0,0,5,13,6,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,699,"        maxAbsoluteValue = 0;
",2,0,0,0,0,0,0,0,0,3,21,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,700,"        for (int i = 0; i < n; i++) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,701,"            if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {
",2,1,1,3,7,0,4,0,0,11,58,6,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,702,"                maxAbsoluteValue=FastMath.abs(realEigenvalues[i]);
",2,0,1,2,4,0,4,0,0,11,50,8,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,706,"        if (maxAbsoluteValue != 0.0) {
",2,1,0,1,3,0,0,0,0,3,30,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,707,"            for (int i=0; i < n; i++) {
",8,1,0,1,3,0,0,0,0,10,27,6,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,708,"                if (FastMath.abs(realEigenvalues[i]) < Precision.EPSILON * maxAbsoluteValue) {
",6,2,1,3,7,0,4,0,0,16,78,8,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,713,"        eigenvectors = new ArrayRealVector[n];
",2,0,1,1,2,0,0,2,0,7,38,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,714,"        final double[] tmp = new double[n];
",2,0,1,2,4,1,0,0,0,5,35,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,715,"        for (int i = 0; i < n; i++) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,716,"            for (int j = 0; j < n; j++) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,717,"                tmp[j] = z[j][i];
",0,0,1,3,6,0,0,0,0,11,17,8,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,719,"            eigenvectors[i] = new ArrayRealVector(tmp);
",2,0,1,2,4,0,0,2,0,9,43,6,0.11111,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,721,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,199,"        final UnivariateFunction toSolve = new UnivariateFunction() {
",2,0,0,1,3,1,0,4,0,7,61,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,202,"                return cumulativeProbability(x) - p;
",2,1,0,1,2,1,4,0,0,7,36,10,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,67,"    protected AbstractRealDistribution() {
",2,0,0,1,3,1,0,0,0,3,38,2,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,50,"    @Deprecated
",2,0,0,0,0,0,0,0,0,2,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,60,"    private double solverAbsoluteAccuracy = SOLVER_DEFAULT_ABSOLUTE_ACCURACY;
",4,0,0,0,0,1,0,0,0,5,73,2,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,70,"        random = null;
",2,0,0,0,0,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,71,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,76,"    protected AbstractRealDistribution(RandomGenerator rng) {
",4,0,0,1,3,1,0,2,0,7,57,2,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,77,"        random = rng;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,78,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,91,"        return probability(x0, x1);
",0,0,0,1,2,1,6,0,0,6,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,112,"        if (x0 > x1) {
",4,1,0,1,3,0,0,0,0,5,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,113,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,
",4,0,0,0,1,0,0,2,0,6,89,7,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,116,"        return cumulativeProbability(x1) - cumulativeProbability(x0);
",0,1,0,2,4,1,8,0,0,9,61,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,157,"        if (p < 0.0 || p > 1.0) {
",4,3,0,1,3,0,0,0,0,7,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,158,"            throw new OutOfRangeException(p, 0, 1);
",2,0,0,1,2,0,0,2,0,4,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,161,"        double lowerBound = getSupportLowerBound();
",2,0,0,1,2,0,2,0,0,4,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,162,"        if (p == 0.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,163,"            return lowerBound;
",2,0,0,0,0,1,0,0,0,2,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,166,"        double upperBound = getSupportUpperBound();
",2,0,0,1,2,0,2,0,0,4,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,167,"        if (p == 1.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,168,"            return upperBound;
",2,0,0,0,0,1,0,0,0,2,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,171,"        final double mu = getNumericalMean();
",2,0,0,1,2,1,2,0,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,172,"        final double sig = FastMath.sqrt(getNumericalVariance());
",2,0,0,2,4,1,6,0,0,9,57,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,174,"        chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||
",2,1,0,2,5,0,12,0,0,17,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,177,"        if (lowerBound == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,178,"            if (chebyshevApplies) {
",2,0,0,1,3,0,0,0,0,2,23,6,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,179,"                lowerBound = mu - sig * FastMath.sqrt((1. - p) / p);
",10,4,0,2,4,0,4,0,0,19,52,8,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,181,"                lowerBound = -1.0;
",2,0,0,0,0,0,0,0,0,4,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,182,"                while (cumulativeProbability(lowerBound) >= p) {
",2,1,0,2,5,0,4,0,0,7,48,8,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,183,"                    lowerBound *= 2.0;
",2,0,0,0,0,0,0,0,0,3,18,10,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,188,"        if (upperBound == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,189,"            if (chebyshevApplies) {
",2,0,0,1,3,0,0,0,0,2,23,6,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,190,"                upperBound = mu + sig * FastMath.sqrt(p / (1. - p));
",10,4,0,2,4,0,4,0,0,19,52,8,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,192,"                upperBound = 1.0;
",2,0,0,0,0,0,0,0,0,3,17,8,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,193,"                while (cumulativeProbability(upperBound) < p) {
",2,1,0,2,5,0,4,0,0,7,47,8,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,194,"                    upperBound *= 2.0;
",2,0,0,0,0,0,0,0,0,3,18,10,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,199,"        final UnivariateFunction toSolve = new UnivariateFunction() {
",2,0,0,1,3,1,0,4,0,7,61,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,206,"        double x = UnivariateSolverUtils.solve(toSolve,
",2,0,0,0,1,0,6,0,0,8,47,5,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,211,"        if (!isSupportConnected()) {
",0,0,0,2,5,0,2,0,0,3,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,213,"            final double dx = getSolverAbsoluteAccuracy();
",2,0,0,1,2,1,2,0,0,5,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,214,"            if (x - dx >= getSupportLowerBound()) {
",4,2,0,2,5,0,2,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,215,"                double px = cumulativeProbability(x);
",2,0,0,1,2,0,4,0,0,6,37,9,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,216,"                if (cumulativeProbability(x - dx) == px) {
",6,2,0,2,5,0,2,0,0,10,42,8,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,217,"                    upperBound = x;
",4,0,0,0,0,0,0,0,0,5,15,10,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,218,"                    while (upperBound - lowerBound > dx) {
",6,2,0,1,3,0,0,0,0,8,38,10,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,219,"                        final double midPoint = 0.5 * (lowerBound + upperBound);
",6,2,0,1,2,1,0,0,0,9,56,12,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,220,"                        if (cumulativeProbability(midPoint) < px) {
",2,1,0,2,5,0,4,0,0,7,43,12,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,221,"                            lowerBound = midPoint;
",4,0,0,0,0,0,0,0,0,5,22,14,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,223,"                            upperBound = midPoint;
",4,0,0,0,0,0,0,0,0,5,22,14,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,225,"                    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,226,"                    return upperBound;
",2,0,0,0,0,1,0,0,0,2,18,10,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,230,"        return x;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,241,"        return solverAbsoluteAccuracy;
",2,0,0,0,0,1,0,0,0,2,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,246,"        random.setSeed(seed);
",0,0,0,1,2,0,6,0,0,6,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,247,"        randomData.reSeed(seed);
",0,0,0,1,2,0,6,0,0,6,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,248,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,259,"        return inverseCumulativeProbability(random.nextDouble());
",0,0,0,2,4,1,6,0,0,6,57,5,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,269,"        if (sampleSize <= 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,270,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
",4,0,0,0,1,0,0,2,0,6,74,7,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,273,"        double[] out = new double[sampleSize];
",2,0,1,2,4,0,0,0,0,4,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,274,"        for (int i = 0; i < sampleSize; i++) {
",8,1,0,1,3,0,0,0,0,10,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,275,"            out[i] = sample();
",0,0,1,2,4,0,2,0,0,7,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,277,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,287,"        return 0d;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,108,"            throw new DimensionMismatchException(covariances.length, dim);
",6,0,0,1,2,0,0,2,0,8,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,113,"                throw new DimensionMismatchException(covariances[i].length, dim);
",4,0,1,2,4,0,0,2,0,10,65,9,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,134,"                throw new NonPositiveDefiniteMatrixException(covMatEigenvalues[i], i, 0);
",2,0,1,2,4,0,0,2,0,8,73,9,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,173,"        return covarianceMatrix.copy();
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,180,"            throw new DimensionMismatchException(vals.length, dim);
",6,0,0,1,2,0,0,2,0,8,55,7,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,195,"        final int dim = getDimension();
",2,0,0,1,2,1,2,0,0,5,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,196,"        final double[] std = new double[dim];
",2,0,1,2,4,1,0,0,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,197,"        final double[][] s = covarianceMatrix.getData();
",2,0,0,3,6,1,4,0,0,7,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,198,"        for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,199,"            std[i] = FastMath.sqrt(s[i][i]);
",0,0,1,4,8,0,4,0,0,15,32,6,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,201,"        return std;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,206,"        final int dim = getDimension();
",2,0,0,1,2,1,2,0,0,5,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,207,"        final double[] normalVals = new double[dim];
",2,0,1,2,4,1,0,0,0,5,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,209,"        for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,210,"            normalVals[i] = random.nextGaussian();
",0,0,1,2,4,0,4,0,0,9,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,213,"        final double[] vals = samplingMatrix.operate(normalVals);
",2,0,0,2,4,1,6,0,0,9,57,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,215,"        for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,216,"            vals[i] += means[i];
",0,0,1,2,4,0,0,0,0,9,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,219,"        return vals;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,48,"        random.setSeed(seed);
",0,0,0,1,2,0,6,0,0,6,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,49,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,61,"        if (sampleSize <= 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,62,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
",4,0,0,0,1,0,0,2,0,6,74,7,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,65,"        final double[][] out = new double[sampleSize][dimension];
",2,0,1,4,8,1,0,0,0,7,57,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,66,"        for (int i = 0; i < sampleSize; i++) {
",8,1,0,1,3,0,0,0,0,10,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,67,"            out[i] = sample();
",0,0,1,2,4,0,2,0,0,7,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,69,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,11,38,"        super(value, 0, false);
",2,0,0,1,2,0,0,0,0,3,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,11,39,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,11,48,"        super(specific, value, 0, false);
",4,0,0,1,2,0,0,0,0,5,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,11,49,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,11,50,"        this(boundIsAllowed ?
",2,0,0,0,1,0,0,0,0,2,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,11,54,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,11,68,"        super(specific, wrong, min);
",6,0,0,1,2,0,0,0,0,6,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,11,70,"        this.min = min;
",4,0,0,0,0,0,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,11,71,"        this.boundIsAllowed = boundIsAllowed;
",4,0,0,0,0,0,0,0,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,11,72,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,11,78,"        return boundIsAllowed;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,11,85,"        return min;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,11,46,"        super(pattern, wrong, arguments);
",6,0,0,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,11,47,"        argument = wrong;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,11,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,11,54,"        return argument;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,11,44,"                                        Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,11,45,"        context = new ExceptionContext(this);
",2,0,0,1,2,0,0,2,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,11,46,"        context.addMessage(pattern, args);
",0,0,0,1,2,0,8,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,11,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,11,51,"        return context;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,11,57,"        return context.getMessage();
",0,0,0,1,2,1,4,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,11,63,"        return context.getLocalizedMessage();
",0,0,0,1,2,1,4,0,0,4,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,11,44,"        super(specific, wrong, expected);
",6,0,0,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,11,45,"        dimension = expected;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,11,46,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,11,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);
",8,0,0,1,2,0,0,0,0,8,67,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,11,57,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,11,63,"        return dimension;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,11,47,"        super(wrong, threshold, false);
",4,0,0,1,2,0,0,0,0,5,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,11,48,"        this.index = index;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,11,49,"        this.threshold = threshold;
",4,0,0,0,0,0,0,0,0,5,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,11,51,"        final ExceptionContext context = getContext();
",2,0,0,1,2,1,2,2,0,7,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,11,52,"        context.addMessage(LocalizedFormats.NOT_POSITIVE_DEFINITE_MATRIX);
",4,0,0,1,2,0,4,0,0,8,66,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,11,53,"        context.addMessage(LocalizedFormats.ARRAY_ELEMENT, wrong, index);
",4,0,0,1,2,0,8,0,0,12,65,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,11,54,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,11,60,"        return index;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,11,66,"        return index;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,11,72,"        return threshold;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/SingularMatrixException,11,36,"        super(LocalizedFormats.SINGULAR_MATRIX);
",4,0,0,1,2,0,0,0,0,4,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/SingularMatrixException,11,37,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,59,"        this(0, 1);
",0,0,0,1,2,0,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,60,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,71,"        this(mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
",6,0,0,1,2,0,0,0,0,6,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,72,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,86,"        this(new Well19937c(), mean, sd, inverseCumAccuracy);
",6,0,0,2,4,0,0,2,0,8,53,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,87,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,104,"        super(rng);
",2,0,0,1,2,0,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,106,"        if (sd <= 0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,107,"            throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sd);
",6,0,0,1,2,0,0,2,0,8,80,7,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,110,"        this.mean = mean;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,111,"        standardDeviation = sd;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,112,"        solverAbsoluteAccuracy = inverseCumAccuracy;
",4,0,0,0,0,0,0,0,0,5,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,113,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,44,"    private static final double SQRT2PI = FastMath.sqrt(2 * FastMath.PI);
",6,1,0,1,2,3,4,0,0,14,69,2,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,46,"    private static final double SQRT2 = FastMath.sqrt(2.0);
",2,0,0,1,2,3,4,0,0,9,55,2,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,121,"        return mean;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,130,"        return standardDeviation;
",2,0,0,0,0,1,0,0,0,2,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,135,"        final double x0 = x - mean;
",6,1,0,0,0,1,0,0,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,136,"        final double x1 = x0 / standardDeviation;
",6,1,0,0,0,1,0,0,0,8,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,137,"        return FastMath.exp(-0.5 * x1 * x1) / (standardDeviation * SQRT2PI);
",8,3,0,2,4,1,4,0,0,16,68,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,148,"        final double dev = x - mean;
",6,1,0,0,0,1,0,0,0,8,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,149,"        if (FastMath.abs(dev) > 40 * standardDeviation) {
",2,2,0,2,5,0,6,0,0,10,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,150,"            return dev < 0 ? 0.0d : 1.0d;
",2,1,0,0,0,1,0,0,0,3,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,152,"        return 0.5 * (1 + Erf.erf(dev / (standardDeviation * SQRT2)));
",6,4,0,3,6,1,4,0,0,14,62,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,163,"        return probability(x0, x1);
",0,0,0,1,2,1,6,0,0,6,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,171,"        if (x0 > x1) {
",4,1,0,1,3,0,0,0,0,5,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,172,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,
",4,0,0,0,1,0,0,2,0,6,89,7,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,175,"        final double denom = standardDeviation * SQRT2;
",6,1,0,0,0,1,0,0,0,8,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,176,"        final double v0 = (x0 - mean) / denom;
",8,2,0,1,2,1,0,0,0,11,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,177,"        final double v1 = (x1 - mean) / denom;
",8,2,0,1,2,1,0,0,0,11,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,178,"        return 0.5 * Erf.erf(v0, v1);
",0,1,0,1,2,1,8,0,0,9,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,184,"        return solverAbsoluteAccuracy;
",2,0,0,0,0,1,0,0,0,2,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,193,"        return getMean();
",0,0,0,1,2,1,2,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,202,"        final double s = getStandardDeviation();
",2,0,0,1,2,1,2,0,0,5,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,203,"        return s * s;
",4,1,0,0,0,1,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,216,"        return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,229,"        return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,234,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,239,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,250,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,256,"        return standardDeviation * random.nextGaussian() + mean;
",4,2,0,1,2,1,4,0,0,10,56,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,11,46,"        this(LocalizedFormats.OUT_OF_RANGE_SIMPLE, wrong, lo, hi);
",10,0,0,1,2,0,0,0,0,10,58,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,11,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,11,62,"        super(specific, wrong, lo, hi);
",8,0,0,1,2,0,0,0,0,8,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,11,63,"        this.lo = lo;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,11,64,"        this.hi = hi;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,11,65,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,11,71,"        return lo;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,11,77,"        return hi;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,11,50,"        this(boundIsAllowed ?
",2,0,0,0,1,0,0,0,0,2,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,11,54,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,11,67,"        super(specific, wrong, max);
",6,0,0,1,2,0,0,0,0,6,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,11,69,"        this.max = max;
",4,0,0,0,0,0,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,11,70,"        this.boundIsAllowed = boundIsAllowed;
",4,0,0,0,0,0,0,0,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,11,71,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,11,77,"        return boundIsAllowed;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,11,84,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,353,"    private FastMath() {}
",2,0,0,2,4,1,0,0,0,3,21,2,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,365,"        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){
",12,3,0,1,3,0,0,0,0,16,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,366,"            return d; // These are un-normalised - don't try to convert
",2,0,0,0,0,1,0,0,0,2,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,368,"        long xl = Double.doubleToLongBits(d);
",2,0,0,1,2,0,6,0,0,8,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,369,"        xl = xl & MASK_30BITS; // Drop low order bits
",6,1,0,0,0,0,0,0,0,8,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,370,"        return Double.longBitsToDouble(xl);
",0,0,0,1,2,1,6,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,387,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,388,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,396,"      if (x > 20) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,397,"          if (x >= LOG_MAX_VALUE) {
",4,1,0,1,3,0,0,0,0,5,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,399,"              final double t = exp(0.5 * x);
",4,1,0,1,2,1,2,0,0,8,30,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,400,"              return (0.5 * t) * t;
",4,2,0,1,2,1,0,0,0,6,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,402,"              return 0.5 * exp(x);
",0,1,0,1,2,1,4,0,0,5,20,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,404,"      } else if (x < -20) {
",2,1,0,1,4,0,0,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,405,"          if (x <= -LOG_MAX_VALUE) {
",4,1,0,1,3,0,0,0,0,6,26,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,407,"              final double t = exp(-0.5 * x);
",4,1,0,1,2,1,2,0,0,9,31,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,408,"              return (0.5 * t) * t;
",4,2,0,1,2,1,0,0,0,6,21,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,410,"              return 0.5 * exp(-x);
",2,1,0,1,2,1,2,0,0,6,21,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,414,"      final double hiPrec[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,415,"      if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,416,"          x = -x;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,418,"      exp(x, 0.0, hiPrec);
",0,0,0,1,2,0,6,0,0,6,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,420,"      double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,421,"      double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,423,"      double temp = ya * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,424,"      double yaa = ya + temp - temp;
",8,2,0,0,0,0,0,0,0,10,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,425,"      double yab = ya - yaa;
",6,1,0,0,0,0,0,0,0,7,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,428,"      double recip = 1.0/ya;
",4,1,0,0,0,0,0,0,0,5,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,429,"      temp = recip * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,430,"      double recipa = recip + temp - temp;
",8,2,0,0,0,0,0,0,0,10,36,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,431,"      double recipb = recip - recipa;
",6,1,0,0,0,0,0,0,0,7,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,434,"      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;
",20,9,0,1,2,0,0,0,0,30,76,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,436,"      recipb += -yb * recip * recip;
",8,1,0,0,0,0,0,0,0,11,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,439,"      temp = ya + recipa;
",6,1,0,0,0,0,0,0,0,8,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,440,"      yb += -(temp - ya - recipa);
",8,1,0,1,2,0,0,0,0,11,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,441,"      ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,442,"      temp = ya + recipb;
",6,1,0,0,0,0,0,0,0,8,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,443,"      yb += -(temp - ya - recipb);
",8,1,0,1,2,0,0,0,0,11,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,444,"      ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,446,"      double result = ya + yb;
",6,1,0,0,0,0,0,0,0,7,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,447,"      result *= 0.5;
",2,0,0,0,0,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,448,"      return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,456,"      boolean negate = false;
",2,0,0,0,0,0,0,0,0,3,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,457,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,458,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,466,"      if (x > 20) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,467,"          if (x >= LOG_MAX_VALUE) {
",4,1,0,1,3,0,0,0,0,5,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,469,"              final double t = exp(0.5 * x);
",4,1,0,1,2,1,2,0,0,8,30,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,470,"              return (0.5 * t) * t;
",4,2,0,1,2,1,0,0,0,6,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,472,"              return 0.5 * exp(x);
",0,1,0,1,2,1,4,0,0,5,20,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,474,"      } else if (x < -20) {
",2,1,0,1,4,0,0,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,475,"          if (x <= -LOG_MAX_VALUE) {
",4,1,0,1,3,0,0,0,0,6,26,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,477,"              final double t = exp(-0.5 * x);
",4,1,0,1,2,1,2,0,0,9,31,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,478,"              return (-0.5 * t) * t;
",4,2,0,1,2,1,0,0,0,7,22,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,480,"              return -0.5 * exp(-x);
",2,1,0,1,2,1,2,0,0,7,22,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,484,"      if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,485,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,488,"      if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,489,"          x = -x;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,490,"          negate = true;
",2,0,0,0,0,0,0,0,0,4,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,495,"      if (x > 0.25) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,496,"          double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,497,"          exp(x, 0.0, hiPrec);
",0,0,0,1,2,0,6,0,0,6,20,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,499,"          double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,500,"          double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,502,"          double temp = ya * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,503,"          double yaa = ya + temp - temp;
",8,2,0,0,0,0,0,0,0,10,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,504,"          double yab = ya - yaa;
",6,1,0,0,0,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,507,"          double recip = 1.0/ya;
",4,1,0,0,0,0,0,0,0,5,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,508,"          temp = recip * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,509,"          double recipa = recip + temp - temp;
",8,2,0,0,0,0,0,0,0,10,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,510,"          double recipb = recip - recipa;
",6,1,0,0,0,0,0,0,0,7,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,513,"          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;
",20,9,0,1,2,0,0,0,0,30,76,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,515,"          recipb += -yb * recip * recip;
",8,1,0,0,0,0,0,0,0,11,30,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,517,"          recipa = -recipa;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,518,"          recipb = -recipb;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,521,"          temp = ya + recipa;
",6,1,0,0,0,0,0,0,0,8,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,522,"          yb += -(temp - ya - recipa);
",8,1,0,1,2,0,0,0,0,11,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,523,"          ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,524,"          temp = ya + recipb;
",6,1,0,0,0,0,0,0,0,8,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,525,"          yb += -(temp - ya - recipb);
",8,1,0,1,2,0,0,0,0,11,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,526,"          ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,528,"          result = ya + yb;
",6,1,0,0,0,0,0,0,0,8,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,529,"          result *= 0.5;
",2,0,0,0,0,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,530,"      }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,532,"          double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,533,"          expm1(x, hiPrec);
",0,0,0,1,2,0,6,0,0,6,17,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,535,"          double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,536,"          double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,539,"          double denom = 1.0 + ya;
",4,1,0,0,0,0,0,0,0,5,24,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,540,"          double denomr = 1.0 / denom;
",4,1,0,0,0,0,0,0,0,5,28,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,541,"          double denomb = -(denom - 1.0 - ya) + yb;
",8,2,0,1,2,0,0,0,0,11,41,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,542,"          double ratio = ya * denomr;
",6,1,0,0,0,0,0,0,0,7,27,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,543,"          double temp = ratio * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,35,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,544,"          double ra = ratio + temp - temp;
",8,2,0,0,0,0,0,0,0,10,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,545,"          double rb = ratio - ra;
",6,1,0,0,0,0,0,0,0,7,23,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,547,"          temp = denom * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,548,"          double za = denom + temp - temp;
",8,2,0,0,0,0,0,0,0,10,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,549,"          double zb = denom - za;
",6,1,0,0,0,0,0,0,0,7,23,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,551,"          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;
",22,9,0,1,2,0,0,0,0,32,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,554,"          rb += yb*denomr;                        // numerator
",6,1,0,0,0,0,0,0,0,8,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,555,"          rb += -ya * denomb * denomr * denomr;   // denominator
",10,1,0,0,0,0,0,0,0,13,54,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,558,"          temp = ya + ra;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,559,"          yb += -(temp - ya - ra);
",8,1,0,1,2,0,0,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,560,"          ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,561,"          temp = ya + rb;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,562,"          yb += -(temp - ya - rb);
",8,1,0,1,2,0,0,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,563,"          ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,565,"          result = ya + yb;
",6,1,0,0,0,0,0,0,0,8,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,566,"          result *= 0.5;
",2,0,0,0,0,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,569,"      if (negate) {
",2,0,0,1,3,0,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,570,"          result = -result;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,573,"      return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,581,"      boolean negate = false;
",2,0,0,0,0,0,0,0,0,3,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,583,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,584,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,593,"      if (x > 20.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,594,"          return 1.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,597,"      if (x < -20) {
",2,1,0,1,3,0,0,0,0,4,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,598,"          return -1.0;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,601,"      if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,602,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,605,"      if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,606,"          x = -x;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,607,"          negate = true;
",2,0,0,0,0,0,0,0,0,4,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,611,"      if (x >= 0.5) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,612,"          double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,614,"          exp(x*2.0, 0.0, hiPrec);
",2,1,0,1,2,0,4,0,0,7,24,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,616,"          double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,617,"          double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,620,"          double na = -1.0 + ya;
",4,1,0,0,0,0,0,0,0,6,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,621,"          double nb = -(na + 1.0 - ya);
",6,2,0,1,2,0,0,0,0,9,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,622,"          double temp = na + yb;
",6,1,0,0,0,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,623,"          nb += -(temp - na - yb);
",8,1,0,1,2,0,0,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,624,"          na = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,627,"          double da = 1.0 + ya;
",4,1,0,0,0,0,0,0,0,5,21,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,628,"          double db = -(da - 1.0 - ya);
",6,1,0,1,2,0,0,0,0,8,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,629,"          temp = da + yb;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,630,"          db += -(temp - da - yb);
",8,1,0,1,2,0,0,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,631,"          da = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,633,"          temp = da * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,634,"          double daa = da + temp - temp;
",8,2,0,0,0,0,0,0,0,10,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,635,"          double dab = da - daa;
",6,1,0,0,0,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,638,"          double ratio = na/da;
",6,1,0,0,0,0,0,0,0,7,21,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,639,"          temp = ratio * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,640,"          double ratioa = ratio + temp - temp;
",8,2,0,0,0,0,0,0,0,10,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,641,"          double ratiob = ratio - ratioa;
",6,1,0,0,0,0,0,0,0,7,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,644,"          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;
",22,9,0,1,2,0,0,0,0,32,72,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,647,"          ratiob += nb / da;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,649,"          ratiob += -db * na / da / da;
",10,3,0,0,0,0,0,0,0,15,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,651,"          result = ratioa + ratiob;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,652,"      }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,654,"          double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,656,"          expm1(x*2.0, hiPrec);
",2,1,0,1,2,0,4,0,0,7,21,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,658,"          double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,659,"          double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,662,"          double na = ya;
",4,0,0,0,0,0,0,0,0,4,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,663,"          double nb = yb;
",4,0,0,0,0,0,0,0,0,4,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,666,"          double da = 2.0 + ya;
",4,1,0,0,0,0,0,0,0,5,21,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,667,"          double db = -(da - 2.0 - ya);
",6,1,0,1,2,0,0,0,0,8,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,668,"          double temp = da + yb;
",6,1,0,0,0,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,669,"          db += -(temp - da - yb);
",8,1,0,1,2,0,0,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,670,"          da = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,672,"          temp = da * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,673,"          double daa = da + temp - temp;
",8,2,0,0,0,0,0,0,0,10,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,674,"          double dab = da - daa;
",6,1,0,0,0,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,677,"          double ratio = na/da;
",6,1,0,0,0,0,0,0,0,7,21,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,678,"          temp = ratio * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,679,"          double ratioa = ratio + temp - temp;
",8,2,0,0,0,0,0,0,0,10,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,680,"          double ratiob = ratio - ratioa;
",6,1,0,0,0,0,0,0,0,7,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,683,"          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;
",22,9,0,1,2,0,0,0,0,32,72,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,686,"          ratiob += nb / da;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,688,"          ratiob += -db * na / da / da;
",10,3,0,0,0,0,0,0,0,15,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,690,"          result = ratioa + ratiob;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,693,"      if (negate) {
",2,0,0,1,3,0,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,694,"          result = -result;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,697,"      return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,705,"        return FastMath.log(a + FastMath.sqrt(a * a - 1));
",6,3,0,2,4,1,8,0,0,17,50,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,713,"        boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,714,"        if (a < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,715,"            negative = true;
",2,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,716,"            a = -a;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,720,"        if (a > 0.167) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,721,"            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);
",8,3,0,2,4,0,8,0,0,20,54,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,723,"            final double a2 = a * a;
",6,1,0,0,0,1,0,0,0,8,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,724,"            if (a > 0.097) {
",2,1,0,1,3,0,0,0,0,3,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,725,"                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);
",52,17,0,8,16,0,0,0,0,70,212,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,726,"            } else if (a > 0.036) {
",2,1,0,1,4,0,0,0,0,3,23,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,727,"                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);
",40,13,0,6,12,0,0,0,0,54,160,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,728,"            } else if (a > 0.0036) {
",2,1,0,1,4,0,0,0,0,3,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,729,"                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);
",28,9,0,4,8,0,0,0,0,38,109,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,731,"                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);
",16,5,0,2,4,0,0,0,0,22,63,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,735,"        return negative ? -absAsinh : absAsinh;
",6,0,0,0,0,1,0,0,0,7,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,743,"        boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,744,"        if (a < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,745,"            negative = true;
",2,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,746,"            a = -a;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,750,"        if (a > 0.15) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,751,"            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));
",6,4,0,3,6,0,4,0,0,15,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,753,"            final double a2 = a * a;
",6,1,0,0,0,1,0,0,0,8,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,754,"            if (a > 0.087) {
",2,1,0,1,3,0,0,0,0,3,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,755,"                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));
",36,17,0,8,16,0,0,0,0,54,141,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,756,"            } else if (a > 0.031) {
",2,1,0,1,4,0,0,0,0,3,23,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,757,"                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));
",28,13,0,6,12,0,0,0,0,42,109,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,758,"            } else if (a > 0.003) {
",2,1,0,1,4,0,0,0,0,3,23,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,759,"                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));
",20,9,0,4,8,0,0,0,0,30,77,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,761,"                absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));
",12,5,0,2,4,0,0,0,0,18,47,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,765,"        return negative ? -absAtanh : absAtanh;
",6,0,0,0,0,1,0,0,0,7,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,774,"        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a
",6,2,0,3,6,2,0,0,0,9,87,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,783,"        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a
",6,2,0,3,6,2,0,0,0,9,91,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,791,"        return nextAfter(a, Double.POSITIVE_INFINITY);
",4,0,0,1,2,1,4,0,0,8,46,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,799,"        return nextAfter(a, Float.POSITIVE_INFINITY);
",4,0,0,1,2,1,4,0,0,8,45,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,807,"        return Math.random();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,854,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,855,"                    hiPrec[0] = 0.0;
",0,0,1,1,2,0,0,0,0,3,16,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,856,"                    hiPrec[1] = 0.0;
",0,0,1,1,2,0,0,0,0,3,16,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,858,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,863,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;
",4,2,0,1,2,1,6,0,0,13,79,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,864,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,865,"                    hiPrec[0] /= 285040095144011776.0;
",0,0,1,1,2,0,0,0,0,3,34,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,866,"                    hiPrec[1] /= 285040095144011776.0;
",0,0,1,1,2,0,0,0,0,3,34,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,868,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,873,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;
",4,2,0,1,2,1,6,0,0,13,79,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,874,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,875,"                    hiPrec[0] /= 4.455505956692756620;
",0,0,1,1,2,0,0,0,0,3,34,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,876,"                    hiPrec[1] /= 4.455505956692756620;
",0,0,1,1,2,0,0,0,0,3,34,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,878,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,891,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,892,"                    hiPrec[0] = Double.POSITIVE_INFINITY;
",4,0,1,1,2,0,0,0,0,7,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,893,"                    hiPrec[1] = 0.0;
",0,0,1,1,2,0,0,0,0,3,16,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,895,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,944,"            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;
",20,7,0,0,0,0,0,0,0,28,63,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,951,"            hiPrec[0] = tempA;
",2,0,1,1,2,0,0,0,0,5,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,952,"            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;
",16,6,1,1,2,0,0,0,0,25,58,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,963,"      return expm1(x, null);
",0,0,0,1,2,1,4,0,0,5,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,972,"        if (x != x || x == 0.0) { // NaN or zero
",6,3,0,1,3,0,0,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,973,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,976,"        if (x <= -1.0 || x >= 1.0) {
",4,3,0,1,3,0,0,0,0,8,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,979,"            double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,980,"            exp(x, 0.0, hiPrec);
",0,0,0,1,2,0,6,0,0,6,20,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,981,"            if (x > 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,982,"                return -1.0 + hiPrec[0] + hiPrec[1];
",0,1,1,2,4,1,0,0,0,6,36,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,984,"                final double ra = -1.0 + hiPrec[0];
",2,1,1,1,2,1,0,0,0,7,35,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,985,"                double rb = -(ra + 1.0 - hiPrec[0]);
",4,2,1,2,4,0,0,0,0,9,36,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,986,"                rb += hiPrec[1];
",2,0,1,1,2,0,0,0,0,5,16,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,987,"                return ra + rb;
",4,1,0,0,0,1,0,0,0,5,15,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,994,"        boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,996,"        if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,997,"            x = -x;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,998,"            negative = true;
",2,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1002,"            int intFrac = (int) (x * 1024.0);
",4,1,0,2,4,0,0,0,0,5,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1003,"            double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;
",6,1,1,1,2,0,0,0,0,9,60,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1004,"            double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
",6,0,1,1,2,0,0,0,0,8,54,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1006,"            double temp = tempA + tempB;
",6,1,0,0,0,0,0,0,0,7,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1007,"            tempB = -(temp - tempA - tempB);
",8,1,0,1,2,0,0,0,0,11,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1008,"            tempA = temp;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1010,"            temp = tempA * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1011,"            baseA = tempA + temp - temp;
",8,2,0,0,0,0,0,0,0,11,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1012,"            baseB = tempB + (tempA - baseA);
",8,2,0,1,2,0,0,0,0,11,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1014,"            epsilon = x - intFrac/1024.0;
",6,2,0,0,0,0,0,0,0,9,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1019,"        double zb = 0.008336750013465571;
",2,0,0,0,0,0,0,0,0,2,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1020,"        zb = zb * epsilon + 0.041666663879186654;
",6,2,0,0,0,0,0,0,0,9,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1021,"        zb = zb * epsilon + 0.16666666666745392;
",6,2,0,0,0,0,0,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1022,"        zb = zb * epsilon + 0.49999999999999994;
",6,2,0,0,0,0,0,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1023,"        zb = zb * epsilon;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1024,"        zb = zb * epsilon;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1026,"        double za = epsilon;
",4,0,0,0,0,0,0,0,0,4,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1027,"        double temp = za + zb;
",6,1,0,0,0,0,0,0,0,7,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1028,"        zb = -(temp - za - zb);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1029,"        za = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1031,"        temp = za * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1032,"        temp = za + temp - temp;
",8,2,0,0,0,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1033,"        zb += za - temp;
",6,1,0,0,0,0,0,0,0,8,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1034,"        za = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1037,"        double ya = za * baseA;
",6,1,0,0,0,0,0,0,0,7,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1039,"        temp = ya + za * baseB;
",8,2,0,0,0,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1040,"        double yb = -(temp - ya - za * baseB);
",10,2,0,1,2,0,0,0,0,13,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1041,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1043,"        temp = ya + zb * baseA;
",8,2,0,0,0,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1044,"        yb += -(temp - ya - zb * baseA);
",10,2,0,1,2,0,0,0,0,14,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1045,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1047,"        temp = ya + zb * baseB;
",8,2,0,0,0,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1048,"        yb += -(temp - ya - zb*baseB);
",10,2,0,1,2,0,0,0,0,14,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1049,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1053,"        temp = ya + baseA;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1054,"        yb += -(temp - baseA - ya);
",8,1,0,1,2,0,0,0,0,11,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1055,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1057,"        temp = ya + za;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1059,"        yb += -(temp - ya - za);
",8,1,0,1,2,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1060,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1062,"        temp = ya + baseB;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1064,"        yb += -(temp - ya - baseB);
",8,1,0,1,2,0,0,0,0,11,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1065,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1067,"        temp = ya + zb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1069,"        yb += -(temp - ya - zb);
",8,1,0,1,2,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1070,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1072,"        if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1074,"            double denom = 1.0 + ya;
",4,1,0,0,0,0,0,0,0,5,24,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1075,"            double denomr = 1.0 / denom;
",4,1,0,0,0,0,0,0,0,5,28,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1076,"            double denomb = -(denom - 1.0 - ya) + yb;
",8,2,0,1,2,0,0,0,0,11,41,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1077,"            double ratio = ya * denomr;
",6,1,0,0,0,0,0,0,0,7,27,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1078,"            temp = ratio * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1079,"            final double ra = ratio + temp - temp;
",8,2,0,0,0,1,0,0,0,11,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1080,"            double rb = ratio - ra;
",6,1,0,0,0,0,0,0,0,7,23,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1082,"            temp = denom * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1083,"            za = denom + temp - temp;
",8,2,0,0,0,0,0,0,0,11,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1084,"            zb = denom - za;
",6,1,0,0,0,0,0,0,0,8,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1086,"            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;
",22,9,0,1,2,0,0,0,0,32,60,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1097,"            rb += yb * denomr;                      // numerator
",6,1,0,0,0,0,0,0,0,8,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1098,"            rb += -ya * denomb * denomr * denomr;   // denominator
",10,1,0,0,0,0,0,0,0,13,54,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1101,"            ya = -ra;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1102,"            yb = -rb;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1105,"        if (hiPrecOut != null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1106,"            hiPrecOut[0] = ya;
",2,0,1,1,2,0,0,0,0,5,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1107,"            hiPrecOut[1] = yb;
",2,0,1,1,2,0,0,0,0,5,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1110,"        return ya + yb;
",4,1,0,0,0,1,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1120,"        return log(x, null);
",0,0,0,1,2,1,4,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1131,"            return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1137,"            if (x != 0.0) {
",2,1,0,1,3,0,0,0,0,3,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1138,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1139,"                    hiPrec[0] = Double.NaN;
",4,0,1,1,2,0,0,0,0,7,23,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1142,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1148,"            if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1149,"                hiPrec[0] = Double.POSITIVE_INFINITY;
",4,0,1,1,2,0,0,0,0,7,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1152,"            return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1160,"            if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1162,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1163,"                    hiPrec[0] = Double.NEGATIVE_INFINITY;
",4,0,1,1,2,0,0,0,0,7,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1166,"                return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1170,"            bits <<= 1;
",2,0,0,0,0,0,0,0,0,3,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1171,"            while ( (bits & 0x0010000000000000L) == 0) {
",2,2,0,2,5,0,0,0,0,4,44,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1172,"                --exp;
",2,0,0,0,0,0,0,0,0,3,6,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1173,"                bits <<= 1;
",2,0,0,0,0,0,0,0,0,3,11,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1184,"                double xa = x - 1.0;
",4,1,0,0,0,0,0,0,0,5,20,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1185,"                double xb = xa - x + 1.0;
",6,2,0,0,0,0,0,0,0,8,25,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1186,"                double tmp = xa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,31,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1187,"                double aa = xa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,10,27,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1188,"                double ab = xa - aa;
",6,1,0,0,0,0,0,0,0,7,20,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1189,"                xa = aa;
",4,0,0,0,0,0,0,0,0,5,8,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1190,"                xb = ab;
",4,0,0,0,0,0,0,0,0,5,8,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1192,"                final double[] lnCoef_last = LN_QUICK_COEF[LN_QUICK_COEF.length - 1];
",6,1,1,2,4,1,0,0,0,10,69,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1193,"                double ya = lnCoef_last[0];
",2,0,1,1,2,0,0,0,0,4,27,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1194,"                double yb = lnCoef_last[1];
",2,0,1,1,2,0,0,0,0,4,27,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1196,"                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {
",10,2,0,1,3,0,0,0,0,13,53,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1198,"                    aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1199,"                    ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1201,"                    tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1202,"                    ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1203,"                    yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1206,"                    final double[] lnCoef_i = LN_QUICK_COEF[i];
",2,0,1,2,4,1,0,0,0,7,43,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1207,"                    aa = ya + lnCoef_i[0];
",4,1,1,1,2,0,0,0,0,8,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1208,"                    ab = yb + lnCoef_i[1];
",4,1,1,1,2,0,0,0,0,8,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1210,"                    tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1211,"                    ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1212,"                    yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1216,"                aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1217,"                ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1219,"                tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1220,"                ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1221,"                yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1223,"                return ya + yb;
",4,1,0,0,0,1,0,0,0,5,15,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1297,"            lnza = -0.16624882440418567;
",2,0,0,0,0,0,0,0,0,4,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1298,"            lnza = lnza * epsilon + 0.19999954120254515;
",6,2,0,0,0,0,0,0,0,9,44,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1299,"            lnza = lnza * epsilon + -0.2499999997677497;
",6,2,0,0,0,0,0,0,0,10,44,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1300,"            lnza = lnza * epsilon + 0.3333333333332802;
",6,2,0,0,0,0,0,0,0,9,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1301,"            lnza = lnza * epsilon + -0.5;
",6,2,0,0,0,0,0,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1302,"            lnza = lnza * epsilon + 1.0;
",6,2,0,0,0,0,0,0,0,9,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1303,"            lnza = lnza * epsilon;
",6,1,0,0,0,0,0,0,0,8,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1362,"        if (x == -1) {
",2,1,0,1,3,0,0,0,0,4,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1363,"            return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1366,"        if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1367,"            return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1370,"        if (x > 1e-6 ||
",2,2,0,0,1,0,0,0,0,4,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1372,"            final double xpa = 1 + x;
",4,1,0,0,0,1,0,0,0,6,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1373,"            final double xpb = -(xpa - 1 - x);
",6,1,0,1,2,1,0,0,0,9,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1375,"            final double[] hiPrec = new double[2];
",2,0,0,2,4,1,0,0,0,3,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1376,"            final double lores = log(xpa, hiPrec);
",2,0,0,1,2,1,6,0,0,9,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1377,"            if (Double.isInfinite(lores)) { // Don't allow this to be converted to NaN
",0,0,0,2,5,0,6,0,0,6,74,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1378,"                return lores;
",2,0,0,0,0,1,0,0,0,2,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1383,"            final double fx1 = xpb / xpa;
",6,1,0,0,0,1,0,0,0,8,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1384,"            final double epsilon = 0.5 * fx1 + 1;
",4,2,0,0,0,1,0,0,0,7,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1385,"            return epsilon * fx1 + hiPrec[1] + hiPrec[0];
",4,3,1,2,4,1,0,0,0,11,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1388,"            final double y = (x * F_1_3 - F_1_2) * x + 1;
",10,4,0,1,2,1,0,0,0,15,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1389,"            return y * x;
",4,1,0,0,0,1,0,0,0,5,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1398,"        final double hiPrec[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1400,"        final double lores = log(x, hiPrec);
",2,0,0,1,2,1,6,0,0,9,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1401,"        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN
",0,0,0,2,5,0,6,0,0,6,73,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1402,"            return lores;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1405,"        final double tmp = hiPrec[0] * HEX_40000000;
",4,1,1,1,2,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1406,"        final double lna = hiPrec[0] + tmp - tmp;
",6,2,1,1,2,1,0,0,0,11,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1407,"        final double lnb = hiPrec[0] - lna + hiPrec[1];
",4,2,1,2,4,1,0,0,0,11,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1409,"        final double rln10a = 0.4342944622039795;
",2,0,0,0,0,1,0,0,0,3,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1410,"        final double rln10b = 1.9699272335463627E-8;
",2,0,0,0,0,1,0,0,0,3,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1412,"        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;
",16,7,0,0,0,1,0,0,0,23,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1432,"        return log(x) / log(base);
",0,1,0,2,4,1,8,0,0,9,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1446,"            return 1.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1450,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1455,"            long bits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1456,"            if ((bits & 0x8000000000000000L) != 0) {
",2,2,0,2,5,0,0,0,0,4,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1458,"                long yi = (long) y;
",4,0,0,1,2,0,0,0,0,4,19,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1460,"                if (y < 0 && y == yi && (yi & 1) == 1) {
",8,6,0,2,5,0,0,0,0,14,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1461,"                    return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1464,"                if (y > 0 && y == yi && (yi & 1) == 1) {
",8,6,0,2,5,0,0,0,0,14,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1465,"                    return -0.0;
",0,0,0,0,0,1,0,0,0,1,12,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1469,"            if (y < 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1470,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1472,"            if (y > 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1473,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1476,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1480,"            if (y != y) { // y is NaN
",4,1,0,1,3,0,0,0,0,5,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1481,"                return y;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1483,"            if (y < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1484,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1486,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1491,"            if (x * x == 1.0) {
",4,2,0,1,3,0,0,0,0,6,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1492,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1495,"            if (x * x > 1.0) {
",4,2,0,1,3,0,0,0,0,6,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1496,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1498,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1503,"            if (y != y) { // y is NaN
",4,1,0,1,3,0,0,0,0,5,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1504,"                return y;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1507,"            if (y < 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1508,"                long yi = (long) y;
",4,0,0,1,2,0,0,0,0,4,19,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1509,"                if (y == yi && (yi & 1) == 1) {
",6,4,0,2,5,0,0,0,0,10,31,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1510,"                    return -0.0;
",0,0,0,0,0,1,0,0,0,1,12,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1513,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1516,"            if (y > 0)  {
",2,1,0,1,3,0,0,0,0,3,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1517,"                long yi = (long) y;
",4,0,0,1,2,0,0,0,0,4,19,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1518,"                if (y == yi && (yi & 1) == 1) {
",6,4,0,2,5,0,0,0,0,10,31,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1519,"                    return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1522,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1528,"            if (x * x == 1.0) {
",4,2,0,1,3,0,0,0,0,6,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1529,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1532,"            if (x * x < 1.0) {
",4,2,0,1,3,0,0,0,0,6,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1533,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1535,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1542,"            if (y >= TWO_POWER_53 || y <= -TWO_POWER_53) {
",8,3,0,1,3,0,0,0,0,12,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1543,"                return pow(-x, y);
",2,0,0,1,2,1,4,0,0,7,18,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1546,"            if (y == (long) y) {
",4,1,0,2,5,0,0,0,0,5,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1548,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);
",6,2,0,4,8,1,8,0,0,19,53,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1550,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1562,"            double tmp1 = y * 9.31322574615478515625E-10;
",4,1,0,0,0,0,0,0,0,5,45,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1563,"            double tmp2 = tmp1 * 9.31322574615478515625E-10;
",4,1,0,0,0,0,0,0,0,5,48,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1564,"            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;
",12,3,0,1,2,0,0,0,0,16,56,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1565,"            yb = y - ya;
",6,1,0,0,0,0,0,0,0,8,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1571,"            return lores;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1614,"            return 1.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1615,"        } else if (e < 0) {
",2,1,0,1,4,0,0,0,0,3,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1616,"            e = -e;
",4,0,0,0,0,0,0,0,0,6,7,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1617,"            d = 1.0 / d;
",4,1,0,0,0,0,0,0,0,6,12,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1622,"        final int splitFactor = 0x8000001;
",2,0,0,0,0,1,0,0,0,3,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1623,"        final double cd       = splitFactor * d;
",6,1,0,0,0,1,0,0,0,8,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1624,"        final double d1High   = cd - (cd - d);
",8,2,0,1,2,1,0,0,0,11,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1625,"        final double d1Low    = d - d1High;
",6,1,0,0,0,1,0,0,0,8,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1628,"        double resultHigh = 1;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1629,"        double resultLow  = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1632,"        double d2p     = d;
",4,0,0,0,0,0,0,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1633,"        double d2pHigh = d1High;
",4,0,0,0,0,0,0,0,0,4,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1634,"        double d2pLow  = d1Low;
",4,0,0,0,0,0,0,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1636,"        while (e != 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1638,"            if ((e & 0x1) != 0) {
",2,2,0,2,5,0,0,0,0,4,21,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1641,"                final double tmpHigh = resultHigh * d2p;
",6,1,0,0,0,1,0,0,0,8,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1642,"                final double cRH     = splitFactor * resultHigh;
",6,1,0,0,0,1,0,0,0,8,48,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1643,"                final double rHH     = cRH - (cRH - resultHigh);
",8,2,0,1,2,1,0,0,0,11,48,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1644,"                final double rHL     = resultHigh - rHH;
",6,1,0,0,0,1,0,0,0,8,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1645,"                final double tmpLow  = rHL * d2pLow - (((tmpHigh - rHH * d2pHigh) - rHL * d2pHigh) - rHH * d2pLow);
",20,8,0,3,6,1,0,0,0,29,99,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1646,"                resultHigh = tmpHigh;
",4,0,0,0,0,0,0,0,0,5,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1647,"                resultLow  = resultLow * d2p + tmpLow;
",8,2,0,0,0,0,0,0,0,11,38,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1652,"            final double tmpHigh = d2pHigh * d2p;
",6,1,0,0,0,1,0,0,0,8,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1653,"            final double cD2pH   = splitFactor * d2pHigh;
",6,1,0,0,0,1,0,0,0,8,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1654,"            final double d2pHH   = cD2pH - (cD2pH - d2pHigh);
",8,2,0,1,2,1,0,0,0,11,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1655,"            final double d2pHL   = d2pHigh - d2pHH;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1656,"            final double tmpLow  = d2pHL * d2pLow - (((tmpHigh - d2pHH * d2pHigh) - d2pHL * d2pHigh) - d2pHH * d2pLow);
",20,8,0,3,6,1,0,0,0,29,107,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1657,"            final double cTmpH   = splitFactor * tmpHigh;
",6,1,0,0,0,1,0,0,0,8,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1658,"            d2pHigh = cTmpH - (cTmpH - tmpHigh);
",8,2,0,1,2,0,0,0,0,11,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1659,"            d2pLow  = d2pLow * d2p + tmpLow + (tmpHigh - d2pHigh);
",12,4,0,1,2,0,0,0,0,17,54,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1660,"            d2p     = d2pHigh + d2pLow;
",6,1,0,0,0,0,0,0,0,8,27,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1662,"            e = e >> 1;
",4,1,0,0,0,0,0,0,0,6,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1664,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1666,"        return resultHigh + resultLow;
",4,1,0,0,0,1,0,0,0,5,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1678,"        double x2 = x*x;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1680,"        double p = 2.7553817452272217E-6;
",2,0,0,0,0,0,0,0,0,2,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1681,"        p = p * x2 + -1.9841269659586505E-4;
",6,2,0,0,0,0,0,0,0,10,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1682,"        p = p * x2 + 0.008333333333329196;
",6,2,0,0,0,0,0,0,0,9,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1683,"        p = p * x2 + -0.16666666666666666;
",6,2,0,0,0,0,0,0,0,10,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1686,"        p = p * x2 * x;
",8,1,0,0,0,0,0,0,0,10,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1688,"        return p;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1698,"        double x2 = x*x;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1700,"        double p = 2.479773539153719E-5;
",2,0,0,0,0,0,0,0,0,2,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1701,"        p = p * x2 + -0.0013888888689039883;
",6,2,0,0,0,0,0,0,0,10,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1702,"        p = p * x2 + 0.041666666666621166;
",6,2,0,0,0,0,0,0,0,9,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1703,"        p = p * x2 + -0.49999999999999994;
",6,2,0,0,0,0,0,0,0,10,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1704,"        p *= x2;
",4,0,0,0,0,0,0,0,0,5,8,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1706,"        return p;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1717,"        int idx = (int) ((xa * 8.0) + 0.5);
",4,2,0,3,6,0,0,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1718,"        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;
",4,1,1,1,2,1,0,0,0,10,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1721,"        final double sintA = SINE_TABLE_A[idx];
",2,0,1,1,2,1,0,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1722,"        final double sintB = SINE_TABLE_B[idx];
",2,0,1,1,2,1,0,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1723,"        final double costA = COSINE_TABLE_A[idx];
",2,0,1,1,2,1,0,0,0,7,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1724,"        final double costB = COSINE_TABLE_B[idx];
",2,0,1,1,2,1,0,0,0,7,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1727,"        double sinEpsA = epsilon;
",4,0,0,0,0,0,0,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1728,"        double sinEpsB = polySine(epsilon);
",2,0,0,1,2,0,4,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1729,"        final double cosEpsA = 1.0;
",2,0,0,0,0,1,0,0,0,3,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1730,"        final double cosEpsB = polyCosine(epsilon);
",2,0,0,1,2,1,4,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1733,"        final double temp = sinEpsA * HEX_40000000;
",6,1,0,0,0,1,0,0,0,8,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1734,"        double temp2 = (sinEpsA + temp) - temp;
",8,2,0,1,2,0,0,0,0,10,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1735,"        sinEpsB +=  sinEpsA - temp2;
",6,1,0,0,0,0,0,0,0,8,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1736,"        sinEpsA = temp2;
",4,0,0,0,0,0,0,0,0,5,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1762,"        double a = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1763,"        double b = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1765,"        double t = sintA;
",4,0,0,0,0,0,0,0,0,4,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1766,"        double c = a + t;
",6,1,0,0,0,0,0,0,0,7,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1767,"        double d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,10,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1768,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1769,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1771,"        t = costA * sinEpsA;
",6,1,0,0,0,0,0,0,0,8,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1772,"        c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1773,"        d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1774,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1775,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1777,"        b = b + sintA * cosEpsB + costA * sinEpsB;
",12,4,0,0,0,0,0,0,0,17,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1792,"        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;
",18,6,0,0,0,0,0,0,0,25,68,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1819,"        if (xb != 0.0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1820,"            t = ((costA + costB) * (cosEpsA + cosEpsB) -
",10,5,0,2,5,0,0,0,0,16,44,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1822,"            c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1823,"            d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1824,"            a = c;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1825,"            b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1828,"        result = a + b;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1830,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1841,"        final double pi2a = 1.5707963267948966;
",2,0,0,0,0,1,0,0,0,3,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1842,"        final double pi2b = 6.123233995736766E-17;
",2,0,0,0,0,1,0,0,0,3,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1844,"        final double a = pi2a - xa;
",6,1,0,0,0,1,0,0,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1845,"        double b = -(a - pi2a + xa);
",8,2,0,1,2,0,0,0,0,11,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1846,"        b += pi2b - xb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1848,"        return sinQ(a, b);
",0,0,0,1,2,1,6,0,0,6,18,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1861,"        int idx = (int) ((xa * 8.0) + 0.5);
",4,2,0,3,6,0,0,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1862,"        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;
",4,1,1,1,2,1,0,0,0,10,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1865,"        final double sintA = SINE_TABLE_A[idx];
",2,0,1,1,2,1,0,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1866,"        final double sintB = SINE_TABLE_B[idx];
",2,0,1,1,2,1,0,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1867,"        final double costA = COSINE_TABLE_A[idx];
",2,0,1,1,2,1,0,0,0,7,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1868,"        final double costB = COSINE_TABLE_B[idx];
",2,0,1,1,2,1,0,0,0,7,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1871,"        double sinEpsA = epsilon;
",4,0,0,0,0,0,0,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1872,"        double sinEpsB = polySine(epsilon);
",2,0,0,1,2,0,4,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1873,"        final double cosEpsA = 1.0;
",2,0,0,0,0,1,0,0,0,3,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1874,"        final double cosEpsB = polyCosine(epsilon);
",2,0,0,1,2,1,4,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1877,"        double temp = sinEpsA * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1878,"        double temp2 = (sinEpsA + temp) - temp;
",8,2,0,1,2,0,0,0,0,10,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1879,"        sinEpsB +=  sinEpsA - temp2;
",6,1,0,0,0,0,0,0,0,8,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1880,"        sinEpsA = temp2;
",4,0,0,0,0,0,0,0,0,5,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1905,"        double a = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1906,"        double b = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1909,"        double t = sintA;
",4,0,0,0,0,0,0,0,0,4,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1910,"        double c = a + t;
",6,1,0,0,0,0,0,0,0,7,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1911,"        double d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,10,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1912,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1913,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1915,"        t = costA*sinEpsA;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1916,"        c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1917,"        d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1918,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1919,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1921,"        b = b + sintA*cosEpsB + costA*sinEpsB;
",12,4,0,0,0,0,0,0,0,17,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1922,"        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;
",18,6,0,0,0,0,0,0,0,25,62,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1924,"        double sina = a + b;
",6,1,0,0,0,0,0,0,0,7,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1925,"        double sinb = -(sina - a - b);
",8,1,0,1,2,0,0,0,0,10,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1929,"        a = b = c = d = 0.0;
",8,0,0,0,0,0,0,0,0,12,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1931,"        t = costA*cosEpsA;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1932,"        c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1933,"        d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1934,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1935,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1937,"        t = -sintA*sinEpsA;
",6,1,0,0,0,0,0,0,0,9,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1938,"        c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1939,"        d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1940,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1941,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1943,"        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;
",16,6,0,0,0,0,0,0,0,23,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1944,"        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);
",16,6,0,1,2,0,0,0,0,23,56,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1946,"        double cosa = a + b;
",6,1,0,0,0,0,0,0,0,7,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1947,"        double cosb = -(cosa - a - b);
",8,1,0,1,2,0,0,0,0,10,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1949,"        if (cotanFlag) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1951,"            tmp = cosa; cosa = sina; sina = tmp;
",12,0,0,0,0,0,0,0,0,15,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1952,"            tmp = cosb; cosb = sinb; sinb = tmp;
",12,0,0,0,0,0,0,0,0,15,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1966,"        double est = sina/cosa;
",6,1,0,0,0,0,0,0,0,7,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1969,"        temp = est * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1970,"        double esta = (est + temp) - temp;
",8,2,0,1,2,0,0,0,0,10,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1971,"        double estb =  est - esta;
",6,1,0,0,0,0,0,0,0,7,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1973,"        temp = cosa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1974,"        double cosaa = (cosa + temp) - temp;
",8,2,0,1,2,0,0,0,0,10,36,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1975,"        double cosab =  cosa - cosaa;
",6,1,0,0,0,0,0,0,0,7,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1978,"        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding
",22,9,0,1,2,0,0,0,0,31,114,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1979,"        err += sinb/cosa;                     // Change in est due to sinb
",6,1,0,0,0,0,0,0,0,8,66,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1980,"        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb
",10,3,0,0,0,0,0,0,0,15,66,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1982,"        if (xb != 0.0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1985,"            double xbadj = xb + est*est*xb;
",10,2,0,0,0,0,0,0,0,12,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1986,"            if (cotanFlag) {
",2,0,0,1,3,0,0,0,0,2,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1987,"                xbadj = -xbadj;
",4,0,0,0,0,0,0,0,0,6,15,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1990,"            err += xbadj;
",4,0,0,0,0,0,0,0,0,5,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1993,"        return est+err;
",4,1,0,0,0,1,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2010,"        long inbits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,41,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2011,"        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;
",4,3,0,3,6,0,0,0,0,7,53,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2014,"        inbits &= 0x000fffffffffffffL;
",2,0,0,0,0,0,0,0,0,3,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2015,"        inbits |= 0x0010000000000000L;
",2,0,0,0,0,0,0,0,0,3,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2018,"        exponent++;
",2,0,0,0,0,0,0,0,0,3,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2019,"        inbits <<= 11;
",2,0,0,0,0,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2025,"        int idx = exponent >> 6;
",4,1,0,0,0,0,0,0,0,5,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2026,"        int shift = exponent - (idx << 6);
",6,2,0,1,2,0,0,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2028,"        if (shift != 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2029,"            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);
",8,3,1,3,6,0,0,0,0,14,53,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2030,"            shpi0 |= RECIP_2PI[idx] >>> (64-shift);
",4,2,1,2,4,0,0,0,0,11,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2031,"            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));
",8,5,1,5,10,0,0,0,0,20,70,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2032,"            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));
",10,6,1,5,10,0,0,0,0,21,72,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2034,"            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];
",6,2,1,2,4,0,0,0,0,11,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2035,"            shpiA = RECIP_2PI[idx];
",2,0,1,1,2,0,0,0,0,7,23,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2036,"            shpiB = RECIP_2PI[idx+1];
",4,1,1,1,2,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2040,"        long a = inbits >>> 32;
",4,1,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2041,"        long b = inbits & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,5,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2043,"        long c = shpiA >>> 32;
",4,1,0,0,0,0,0,0,0,5,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2044,"        long d = shpiA & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,5,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2046,"        long ac = a * c;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2047,"        long bd = b * d;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2048,"        long bc = b * c;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2049,"        long ad = a * d;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2051,"        long prodB = bd + (ad << 32);
",6,2,0,1,2,0,0,0,0,8,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2052,"        long prodA = ac + (ad >>> 32);
",6,2,0,1,2,0,0,0,0,8,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2054,"        boolean bita = (bd & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,6,47,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2055,"        boolean bitb = (ad & 0x80000000L ) != 0;
",4,2,0,1,2,0,0,0,0,6,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2056,"        boolean bitsum = (prodB & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,6,52,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2059,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2061,"            prodA++;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2064,"        bita = (prodB & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2065,"        bitb = (bc & 0x80000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2067,"        prodB = prodB + (bc << 32);
",6,2,0,1,2,0,0,0,0,9,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2068,"        prodA = prodA + (bc >>> 32);
",6,2,0,1,2,0,0,0,0,9,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2070,"        bitsum = (prodB & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2073,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2075,"            prodA++;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2079,"        c = shpiB >>> 32;
",4,1,0,0,0,0,0,0,0,6,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2080,"        d = shpiB & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2081,"        ac = a * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2082,"        bc = b * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2083,"        ad = a * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2086,"        ac = ac + ((bc + ad) >>> 32);
",8,3,0,2,4,0,0,0,0,12,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2088,"        bita = (prodB & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2089,"        bitb = (ac & 0x8000000000000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2090,"        prodB += ac;
",4,0,0,0,0,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2091,"        bitsum = (prodB & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2093,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2095,"            prodA++;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2099,"        c = shpi0 >>> 32;
",4,1,0,0,0,0,0,0,0,6,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2100,"        d = shpi0 & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2102,"        bd = b * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2103,"        bc = b * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2104,"        ad = a * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2106,"        prodA += bd + ((bc + ad) << 32);
",8,3,0,2,4,0,0,0,0,12,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2118,"        int intPart = (int)(prodA >>> 62);
",4,1,0,2,4,0,0,0,0,5,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2121,"        prodA <<= 2;
",2,0,0,0,0,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2122,"        prodA |= prodB >>> 62;
",4,1,0,0,0,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2123,"        prodB <<= 2;
",2,0,0,0,0,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2126,"        a = prodA >>> 32;
",4,1,0,0,0,0,0,0,0,6,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2127,"        b = prodA & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2129,"        c = PI_O_4_BITS[0] >>> 32;
",2,1,1,1,2,0,0,0,0,6,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2130,"        d = PI_O_4_BITS[0] & 0xffffffffL;
",2,1,1,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2132,"        ac = a * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2133,"        bd = b * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2134,"        bc = b * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2135,"        ad = a * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2137,"        long prod2B = bd + (ad << 32);
",6,2,0,1,2,0,0,0,0,8,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2138,"        long prod2A = ac + (ad >>> 32);
",6,2,0,1,2,0,0,0,0,8,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2140,"        bita = (bd & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2141,"        bitb = (ad & 0x80000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2142,"        bitsum = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2145,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2147,"            prod2A++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2150,"        bita = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2151,"        bitb = (bc & 0x80000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2153,"        prod2B = prod2B + (bc << 32);
",6,2,0,1,2,0,0,0,0,9,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2154,"        prod2A = prod2A + (bc >>> 32);
",6,2,0,1,2,0,0,0,0,9,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2156,"        bitsum = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2159,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2161,"            prod2A++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2165,"        c = PI_O_4_BITS[1] >>> 32;
",2,1,1,1,2,0,0,0,0,6,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2166,"        d = PI_O_4_BITS[1] & 0xffffffffL;
",2,1,1,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2167,"        ac = a * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2168,"        bc = b * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2169,"        ad = a * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2172,"        ac = ac + ((bc + ad) >>> 32);
",8,3,0,2,4,0,0,0,0,12,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2174,"        bita = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2175,"        bitb = (ac & 0x8000000000000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2176,"        prod2B += ac;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2177,"        bitsum = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2179,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2181,"            prod2A++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2185,"        a = prodB >>> 32;
",4,1,0,0,0,0,0,0,0,6,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2186,"        b = prodB & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2187,"        c = PI_O_4_BITS[0] >>> 32;
",2,1,1,1,2,0,0,0,0,6,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2188,"        d = PI_O_4_BITS[0] & 0xffffffffL;
",2,1,1,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2189,"        ac = a * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2190,"        bc = b * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2191,"        ad = a * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2194,"        ac = ac + ((bc + ad) >>> 32);
",8,3,0,2,4,0,0,0,0,12,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2196,"        bita = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2197,"        bitb = (ac & 0x8000000000000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2198,"        prod2B += ac;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2199,"        bitsum = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2201,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2203,"            prod2A++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2207,"        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits
",6,2,0,1,2,0,0,0,0,8,68,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2208,"        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits
",10,5,0,4,8,0,0,0,0,15,102,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2210,"        double sumA = tmpA + tmpB;
",6,1,0,0,0,0,0,0,0,7,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2211,"        double sumB = -(sumA - tmpA - tmpB);
",8,1,0,1,2,0,0,0,0,10,36,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2214,"        result[0] = intPart;
",2,0,1,1,2,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2215,"        result[1] = sumA * 2.0;
",2,1,1,1,2,0,0,0,0,6,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2216,"        result[2] = sumB * 2.0;
",2,1,1,1,2,0,0,0,0,6,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2217,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2226,"        boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2227,"        int quadrant = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2229,"        double xb = 0.0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2232,"        xa = x;
",4,0,0,0,0,0,0,0,0,5,7,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2233,"        if (x < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2234,"            negative = true;
",2,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2235,"            xa = -xa;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2239,"        if (xa == 0.0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2240,"            long bits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2241,"            if (bits < 0) {
",2,1,0,1,3,0,0,0,0,3,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2242,"                return -0.0;
",0,0,0,0,0,1,0,0,0,1,12,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2244,"            return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2247,"        if (xa != xa || xa == Double.POSITIVE_INFINITY) {
",10,3,0,1,3,0,0,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2248,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2252,"        if (xa > 3294198.0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2256,"            double reduceResults[] = new double[3];
",2,0,0,2,4,0,0,0,0,2,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2257,"            reducePayneHanek(xa, reduceResults);
",0,0,0,1,2,0,6,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2258,"            quadrant = ((int) reduceResults[0]) & 3;
",2,1,1,3,6,0,0,0,0,6,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2259,"            xa = reduceResults[1];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2260,"            xb = reduceResults[2];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2261,"        } else if (xa > 1.5707963267948966) {
",2,1,0,1,4,0,0,0,0,3,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2262,"            final CodyWaite cw = new CodyWaite(xa);
",4,0,0,1,2,1,0,4,0,9,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2263,"            quadrant = cw.getK() & 3;
",2,1,0,1,2,0,4,0,0,8,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2264,"            xa = cw.getRemA();
",2,0,0,1,2,0,4,0,0,7,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2265,"            xb = cw.getRemB();
",2,0,0,1,2,0,4,0,0,7,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2268,"        if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2269,"            quadrant ^= 2;  // Flip bit 1
",2,0,0,0,0,0,0,0,0,3,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2272,"        switch (quadrant) {
",2,0,0,1,3,0,0,0,0,2,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2274,"                return sinQ(xa, xb);
",0,0,0,1,2,1,6,0,0,6,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2276,"                return cosQ(xa, xb);
",0,0,0,1,2,1,6,0,0,6,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2278,"                return -sinQ(xa, xb);
",0,0,0,1,2,1,6,0,0,7,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2280,"                return -cosQ(xa, xb);
",0,0,0,1,2,1,6,0,0,7,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2282,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2293,"        int quadrant = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2296,"        double xa = x;
",4,0,0,0,0,0,0,0,0,4,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2297,"        if (x < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2298,"            xa = -xa;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2301,"        if (xa != xa || xa == Double.POSITIVE_INFINITY) {
",10,3,0,1,3,0,0,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2302,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2306,"        double xb = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2307,"        if (xa > 3294198.0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2311,"            double reduceResults[] = new double[3];
",2,0,0,2,4,0,0,0,0,2,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2312,"            reducePayneHanek(xa, reduceResults);
",0,0,0,1,2,0,6,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2313,"            quadrant = ((int) reduceResults[0]) & 3;
",2,1,1,3,6,0,0,0,0,6,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2314,"            xa = reduceResults[1];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2315,"            xb = reduceResults[2];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2316,"        } else if (xa > 1.5707963267948966) {
",2,1,0,1,4,0,0,0,0,3,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2317,"            final CodyWaite cw = new CodyWaite(xa);
",4,0,0,1,2,1,0,4,0,9,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2318,"            quadrant = cw.getK() & 3;
",2,1,0,1,2,0,4,0,0,8,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2319,"            xa = cw.getRemA();
",2,0,0,1,2,0,4,0,0,7,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2320,"            xb = cw.getRemB();
",2,0,0,1,2,0,4,0,0,7,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2326,"        switch (quadrant) {
",2,0,0,1,3,0,0,0,0,2,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2328,"                return cosQ(xa, xb);
",0,0,0,1,2,1,6,0,0,6,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2330,"                return -sinQ(xa, xb);
",0,0,0,1,2,1,6,0,0,7,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2332,"                return -cosQ(xa, xb);
",0,0,0,1,2,1,6,0,0,7,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2334,"                return sinQ(xa, xb);
",0,0,0,1,2,1,6,0,0,6,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2336,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2347,"        boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2348,"        int quadrant = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2351,"        double xa = x;
",4,0,0,0,0,0,0,0,0,4,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2352,"        if (x < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2353,"            negative = true;
",2,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2354,"            xa = -xa;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2358,"        if (xa == 0.0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2359,"            long bits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2360,"            if (bits < 0) {
",2,1,0,1,3,0,0,0,0,3,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2361,"                return -0.0;
",0,0,0,0,0,1,0,0,0,1,12,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2363,"            return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2366,"        if (xa != xa || xa == Double.POSITIVE_INFINITY) {
",10,3,0,1,3,0,0,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2367,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2371,"        double xb = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2372,"        if (xa > 3294198.0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2376,"            double reduceResults[] = new double[3];
",2,0,0,2,4,0,0,0,0,2,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2377,"            reducePayneHanek(xa, reduceResults);
",0,0,0,1,2,0,6,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2378,"            quadrant = ((int) reduceResults[0]) & 3;
",2,1,1,3,6,0,0,0,0,6,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2379,"            xa = reduceResults[1];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2380,"            xb = reduceResults[2];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2381,"        } else if (xa > 1.5707963267948966) {
",2,1,0,1,4,0,0,0,0,3,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2382,"            final CodyWaite cw = new CodyWaite(xa);
",4,0,0,1,2,1,0,4,0,9,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2383,"            quadrant = cw.getK() & 3;
",2,1,0,1,2,0,4,0,0,8,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2384,"            xa = cw.getRemA();
",2,0,0,1,2,0,4,0,0,7,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2385,"            xb = cw.getRemB();
",2,0,0,1,2,0,4,0,0,7,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2388,"        if (xa > 1.5) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2390,"            final double pi2a = 1.5707963267948966;
",2,0,0,0,0,1,0,0,0,3,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2391,"            final double pi2b = 6.123233995736766E-17;
",2,0,0,0,0,1,0,0,0,3,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2393,"            final double a = pi2a - xa;
",6,1,0,0,0,1,0,0,0,8,27,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2394,"            double b = -(a - pi2a + xa);
",8,2,0,1,2,0,0,0,0,11,28,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2395,"            b += pi2b - xb;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2397,"            xa = a + b;
",6,1,0,0,0,0,0,0,0,8,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2398,"            xb = -(xa - a - b);
",8,1,0,1,2,0,0,0,0,11,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2399,"            quadrant ^= 1;
",2,0,0,0,0,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2400,"            negative ^= true;
",2,0,0,0,0,0,0,0,0,4,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2404,"        if ((quadrant & 1) == 0) {
",2,2,0,2,5,0,0,0,0,4,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2405,"            result = tanQ(xa, xb, false);
",2,0,0,1,2,0,6,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2407,"            result = -tanQ(xa, xb, true);
",2,0,0,1,2,0,6,0,0,11,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2410,"        if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2411,"            result = -result;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2414,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2423,"        return atan(x, 0.0, false);
",0,0,0,1,2,1,4,0,0,5,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2433,"        boolean negate = false;
",2,0,0,0,0,0,0,0,0,3,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2436,"        if (xa == 0.0) { // Matches +/- 0.0; return correct sign
",2,1,0,1,3,1,0,0,0,3,56,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2437,"            return leftPlane ? copySign(Math.PI, xa) : xa;
",8,0,0,1,2,1,4,0,0,12,46,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2440,"        if (xa < 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2442,"            xa = -xa;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2443,"            xb = -xb;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2444,"            negate = true;
",2,0,0,0,0,0,0,0,0,4,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2447,"        if (xa > 1.633123935319537E16) { // Very large input
",2,1,0,1,3,0,0,0,0,3,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2448,"            return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);
",16,3,0,3,6,1,0,0,0,20,69,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2452,"        if (xa < 1) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2453,"            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);
",8,4,0,4,8,0,0,0,0,14,65,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2455,"            final double oneOverXa = 1 / xa;
",4,1,0,0,0,1,0,0,0,6,32,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2456,"            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);
",8,4,0,4,8,0,0,0,0,15,89,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2458,"        double epsA = xa - TANGENT_TABLE_A[idx];
",4,1,1,1,2,0,0,0,0,9,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2459,"        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);
",6,2,1,2,4,0,0,0,0,13,50,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2460,"        epsB += xb - TANGENT_TABLE_B[idx];
",4,1,1,1,2,0,0,0,0,10,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2462,"        double temp = epsA + epsB;
",6,1,0,0,0,0,0,0,0,7,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2463,"        epsB = -(temp - epsA - epsB);
",8,1,0,1,2,0,0,0,0,11,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2464,"        epsA = temp;
",4,0,0,0,0,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2467,"        temp = xa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2468,"        double ya = xa + temp - temp;
",8,2,0,0,0,0,0,0,0,10,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2469,"        double yb = xb + xa - ya;
",8,2,0,0,0,0,0,0,0,10,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2470,"        xa = ya;
",4,0,0,0,0,0,0,0,0,5,8,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2471,"        xb += yb;
",4,0,0,0,0,0,0,0,0,5,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2474,"        if (idx == 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2477,"            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));
",6,5,1,5,10,1,0,0,0,20,91,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2479,"            ya = epsA * denom;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2480,"            yb = epsB * denom;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2481,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2482,"            double temp2 = xa * TANGENT_TABLE_A[idx];
",4,1,1,1,2,0,0,0,0,9,41,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2483,"            double za = 1d + temp2;
",4,1,0,0,0,0,0,0,0,5,23,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2484,"            double zb = -(za - 1d - temp2);
",6,1,0,1,2,0,0,0,0,8,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2485,"            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];
",6,3,1,2,4,0,0,0,0,18,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2486,"            temp = za + temp2;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2487,"            zb += -(temp - za - temp2);
",8,1,0,1,2,0,0,0,0,11,27,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2488,"            za = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2490,"            zb += xb * TANGENT_TABLE_B[idx];
",4,1,1,1,2,0,0,0,0,10,32,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2491,"            ya = epsA / za;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2493,"            temp = ya * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2494,"            final double yaa = (ya + temp) - temp;
",8,2,0,1,2,1,0,0,0,11,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2495,"            final double yab = ya - yaa;
",6,1,0,0,0,1,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2497,"            temp = za * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2498,"            final double zaa = (za + temp) - temp;
",8,2,0,1,2,1,0,0,0,11,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2499,"            final double zab = za - zaa;
",6,1,0,0,0,1,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2502,"            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;
",22,9,0,1,2,0,0,0,0,32,65,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2504,"            yb += -epsA * zb / za / za;
",10,3,0,0,0,0,0,0,0,15,27,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2505,"            yb += epsB / za;
",6,1,0,0,0,0,0,0,0,8,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2509,"        epsA = ya;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2510,"        epsB = yb;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2513,"        final double epsA2 = epsA * epsA;
",6,1,0,0,0,1,0,0,0,8,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2524,"        yb = 0.07490822288864472;
",2,0,0,0,0,0,0,0,0,3,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2525,"        yb = yb * epsA2 + -0.09088450866185192;
",6,2,0,0,0,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2526,"        yb = yb * epsA2 + 0.11111095942313305;
",6,2,0,0,0,0,0,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2527,"        yb = yb * epsA2 + -0.1428571423679182;
",6,2,0,0,0,0,0,0,0,10,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2528,"        yb = yb * epsA2 + 0.19999999999923582;
",6,2,0,0,0,0,0,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2529,"        yb = yb * epsA2 + -0.33333333333333287;
",6,2,0,0,0,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2530,"        yb = yb * epsA2 * epsA;
",8,1,0,0,0,0,0,0,0,10,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2533,"        ya = epsA;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2535,"        temp = ya + yb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2536,"        yb = -(temp - ya - yb);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2537,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2540,"        yb += epsB / (1d + epsA * epsA);
",8,3,0,1,2,0,0,0,0,12,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2543,"        double za = EIGHTHS[idx] + ya;
",4,1,1,1,2,0,0,0,0,9,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2544,"        double zb = -(za - EIGHTHS[idx] - ya);
",6,1,1,2,4,0,0,0,0,12,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2545,"        temp = za + yb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2546,"        zb += -(temp - za - yb);
",8,1,0,1,2,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2547,"        za = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2549,"        double result = za + zb;
",6,1,0,0,0,0,0,0,0,7,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2550,"        double resultb = -(result - za - zb);
",8,1,0,1,2,0,0,0,0,10,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2552,"        if (leftPlane) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2554,"            final double pia = 1.5707963267948966 * 2;
",2,1,0,0,0,1,0,0,0,4,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2555,"            final double pib = 6.123233995736766E-17 * 2;
",2,1,0,0,0,1,0,0,0,4,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2557,"            za = pia - result;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2558,"            zb = -(za - pia + result);
",8,2,0,1,2,0,0,0,0,12,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2559,"            zb += pib - resultb;
",6,1,0,0,0,0,0,0,0,8,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2561,"            result = za + zb;
",6,1,0,0,0,0,0,0,0,8,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2562,"            resultb = -(result - za - zb);
",8,1,0,1,2,0,0,0,0,11,30,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2566,"        if (negate ^ leftPlane) {
",4,1,0,1,3,0,0,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2567,"            result = -result;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2570,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2580,"        if (x != x || y != y) {
",8,3,0,1,3,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2581,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2584,"        if (y == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2585,"            final double result = x * y;
",6,1,0,0,0,1,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2586,"            final double invx = 1d / x;
",4,1,0,0,0,1,0,0,0,6,27,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2587,"            final double invy = 1d / y;
",4,1,0,0,0,1,0,0,0,6,27,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2589,"            if (invx == 0) { // X is infinite
",2,1,0,1,3,0,0,0,0,3,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2590,"                if (x > 0) {
",2,1,0,1,3,0,0,0,0,3,12,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2591,"                    return y; // return +/- 0.0
",2,0,0,0,0,2,0,0,0,2,27,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2593,"                    return copySign(Math.PI, y);
",4,0,0,1,2,1,4,0,0,8,28,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2597,"            if (x < 0 || invx < 0) {
",4,3,0,1,3,0,0,0,0,7,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2598,"                if (y < 0 || invy < 0) {
",4,3,0,1,3,0,0,0,0,7,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2599,"                    return -Math.PI;
",4,0,0,0,0,1,0,0,0,5,16,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2601,"                    return Math.PI;
",4,0,0,0,0,1,0,0,0,4,15,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2604,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2610,"        if (y == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2611,"            if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2612,"                return Math.PI * F_1_4;
",6,1,0,0,0,1,0,0,0,7,23,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2615,"            if (x == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2616,"                return Math.PI * F_3_4;
",6,1,0,0,0,1,0,0,0,7,23,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2619,"            return Math.PI * F_1_2;
",6,1,0,0,0,1,0,0,0,7,23,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2622,"        if (y == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2623,"            if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2624,"                return -Math.PI * F_1_4;
",6,1,0,0,0,1,0,0,0,8,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2627,"            if (x == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2628,"                return -Math.PI * F_3_4;
",6,1,0,0,0,1,0,0,0,8,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2631,"            return -Math.PI * F_1_2;
",6,1,0,0,0,1,0,0,0,8,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2634,"        if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2635,"            if (y > 0 || 1 / y > 0) {
",4,4,0,1,3,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2636,"                return 0d;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2639,"            if (y < 0 || 1 / y < 0) {
",4,4,0,1,3,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2640,"                return -0d;
",0,0,0,0,0,1,0,0,0,1,11,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2644,"        if (x == Double.NEGATIVE_INFINITY)
",6,1,0,1,2,0,0,0,0,7,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2646,"            if (y > 0.0 || 1 / y > 0.0) {
",4,4,0,1,3,0,0,0,0,8,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2647,"                return Math.PI;
",4,0,0,0,0,1,0,0,0,4,15,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2650,"            if (y < 0 || 1 / y < 0) {
",4,4,0,1,3,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2651,"                return -Math.PI;
",4,0,0,0,0,1,0,0,0,5,16,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2657,"        if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2658,"            if (y > 0 || 1 / y > 0) {
",4,4,0,1,3,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2659,"                return Math.PI * F_1_2;
",6,1,0,0,0,1,0,0,0,7,23,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2662,"            if (y < 0 || 1 / y < 0) {
",4,4,0,1,3,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2663,"                return -Math.PI * F_1_2;
",6,1,0,0,0,1,0,0,0,8,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2668,"        final double r = y / x;
",6,1,0,0,0,1,0,0,0,8,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2669,"        if (Double.isInfinite(r)) { // bypass calculations that can create NaN
",0,0,0,2,5,0,6,0,0,6,70,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2670,"            return atan(r, 0, x < 0);
",2,1,0,1,2,1,4,0,0,7,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2673,"        double ra = doubleHighPart(r);
",2,0,0,1,2,0,4,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2674,"        double rb = r - ra;
",6,1,0,0,0,0,0,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2677,"        final double xa = doubleHighPart(x);
",2,0,0,1,2,1,4,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2678,"        final double xb = x - xa;
",6,1,0,0,0,1,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2680,"        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
",22,9,0,1,2,0,0,0,0,32,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2682,"        final double temp = ra + rb;
",6,1,0,0,0,1,0,0,0,8,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2683,"        rb = -(temp - ra - rb);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2684,"        ra = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2686,"        if (ra == 0) { // Fix up the sign so atan works correctly
",2,1,0,1,3,0,0,0,0,3,57,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2687,"            ra = copySign(0d, y);
",2,0,0,1,2,0,4,0,0,7,21,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2691,"        final double result = atan(ra, rb, x < 0);
",4,1,0,1,2,1,6,0,0,12,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2693,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2701,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2702,"          return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2705,"      if (x > 1.0 || x < -1.0) {
",4,3,0,1,3,0,0,0,0,8,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2706,"          return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2709,"      if (x == 1.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2710,"          return Math.PI/2.0;
",4,1,0,0,0,1,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2713,"      if (x == -1.0) {
",2,1,0,1,3,0,0,0,0,4,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2714,"          return -Math.PI/2.0;
",4,1,0,0,0,1,0,0,0,6,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2717,"      if (x == 0.0) { // Matches +/- 0.0; return correct sign
",2,1,0,1,3,1,0,0,0,3,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2718,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2724,"      double temp = x * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2725,"      final double xa = x + temp - temp;
",8,2,0,0,0,1,0,0,0,11,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2726,"      final double xb = x - xa;
",6,1,0,0,0,1,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2729,"      double ya = xa*xa;
",6,1,0,0,0,0,0,0,0,7,18,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2730,"      double yb = xa*xb*2.0 + xb*xb;
",10,3,0,0,0,0,0,0,0,13,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2733,"      ya = -ya;
",4,0,0,0,0,0,0,0,0,6,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2734,"      yb = -yb;
",4,0,0,0,0,0,0,0,0,6,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2736,"      double za = 1.0 + ya;
",4,1,0,0,0,0,0,0,0,5,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2737,"      double zb = -(za - 1.0 - ya);
",6,1,0,1,2,0,0,0,0,8,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2739,"      temp = za + yb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2740,"      zb += -(temp - za - yb);
",8,1,0,1,2,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2741,"      za = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2745,"      y = sqrt(za);
",2,0,0,1,2,0,4,0,0,7,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2746,"      temp = y * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2747,"      ya = y + temp - temp;
",8,2,0,0,0,0,0,0,0,11,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2748,"      yb = y - ya;
",6,1,0,0,0,0,0,0,0,8,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2751,"      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);
",18,8,0,2,4,0,0,0,0,27,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2754,"      double dx = zb / (2.0*y);
",6,2,0,1,2,0,0,0,0,8,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2757,"      double r = x/y;
",6,1,0,0,0,0,0,0,0,7,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2758,"      temp = r * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2759,"      double ra = r + temp - temp;
",8,2,0,0,0,0,0,0,0,10,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2760,"      double rb = r - ra;
",6,1,0,0,0,0,0,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2762,"      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division
",22,9,0,1,2,0,0,0,0,32,83,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2763,"      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
",10,3,0,0,0,0,0,0,0,15,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2765,"      temp = ra + rb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2766,"      rb = -(temp - ra - rb);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2767,"      ra = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2769,"      return atan(ra, rb, false);
",0,0,0,1,2,1,6,0,0,7,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2777,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2778,"          return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2781,"      if (x > 1.0 || x < -1.0) {
",4,3,0,1,3,0,0,0,0,8,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2782,"          return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2785,"      if (x == -1.0) {
",2,1,0,1,3,0,0,0,0,4,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2786,"          return Math.PI;
",4,0,0,0,0,1,0,0,0,4,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2789,"      if (x == 1.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2790,"          return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2793,"      if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2794,"          return Math.PI/2.0;
",4,1,0,0,0,1,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2800,"      double temp = x * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2801,"      final double xa = x + temp - temp;
",8,2,0,0,0,1,0,0,0,11,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2802,"      final double xb = x - xa;
",6,1,0,0,0,1,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2805,"      double ya = xa*xa;
",6,1,0,0,0,0,0,0,0,7,18,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2806,"      double yb = xa*xb*2.0 + xb*xb;
",10,3,0,0,0,0,0,0,0,13,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2809,"      ya = -ya;
",4,0,0,0,0,0,0,0,0,6,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2810,"      yb = -yb;
",4,0,0,0,0,0,0,0,0,6,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2812,"      double za = 1.0 + ya;
",4,1,0,0,0,0,0,0,0,5,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2813,"      double zb = -(za - 1.0 - ya);
",6,1,0,1,2,0,0,0,0,8,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2815,"      temp = za + yb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2816,"      zb += -(temp - za - yb);
",8,1,0,1,2,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2817,"      za = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2820,"      double y = sqrt(za);
",2,0,0,1,2,0,4,0,0,6,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2821,"      temp = y * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2822,"      ya = y + temp - temp;
",8,2,0,0,0,0,0,0,0,11,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2823,"      yb = y - ya;
",6,1,0,0,0,0,0,0,0,8,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2826,"      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);
",18,8,0,2,4,0,0,0,0,27,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2829,"      yb += zb / (2.0*y);
",6,2,0,1,2,0,0,0,0,9,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2830,"      y = ya+yb;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2831,"      yb = -(y - ya - yb);
",8,1,0,1,2,0,0,0,0,11,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2834,"      double r = y/x;
",6,1,0,0,0,0,0,0,0,7,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2837,"      if (Double.isInfinite(r)) { // x is effectively zero
",0,0,0,2,5,0,6,0,0,6,52,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2838,"          return Math.PI/2; // so return the appropriate value
",4,1,0,0,0,2,0,0,0,5,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2841,"      double ra = doubleHighPart(r);
",2,0,0,1,2,0,4,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2842,"      double rb = r - ra;
",6,1,0,0,0,0,0,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2844,"      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division
",22,9,0,1,2,0,0,0,0,32,83,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2845,"      rb += yb / x;  // Add in effect additional bits of sqrt.
",6,1,0,0,0,0,0,0,0,8,56,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2847,"      temp = ra + rb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2848,"      rb = -(temp - ra - rb);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2849,"      ra = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2851,"      return atan(ra, rb, x<0);
",2,1,0,1,2,1,6,0,0,9,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2860,"      long inbits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,41,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2861,"      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;
",4,3,0,3,6,0,0,0,0,7,53,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2862,"      boolean subnormal = false;
",2,0,0,0,0,0,0,0,0,3,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2864,"      if (exponent == -1023) {
",2,1,0,1,3,0,0,0,0,4,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2865,"          if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2866,"              return x;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2870,"          subnormal = true;
",2,0,0,0,0,0,0,0,0,4,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2871,"          x *= 1.8014398509481984E16;  // 2^54
",2,0,0,0,0,0,0,0,0,3,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2872,"          inbits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,9,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2873,"          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;
",4,3,0,3,6,0,0,0,0,8,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2876,"      if (exponent == 1024) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2878,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2882,"      int exp3 = exponent / 3;
",4,1,0,0,0,0,0,0,0,5,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2885,"      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |
",4,2,0,1,3,0,4,0,0,10,68,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2889,"      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);
",4,2,0,2,4,1,4,0,0,11,98,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2892,"      double est = -0.010714690733195933;
",2,0,0,0,0,0,0,0,0,3,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2893,"      est = est * mant + 0.0875862700108075;
",6,2,0,0,0,0,0,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2894,"      est = est * mant + -0.3058015757857271;
",6,2,0,0,0,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2895,"      est = est * mant + 0.7249995199969751;
",6,2,0,0,0,0,0,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2896,"      est = est * mant + 0.5039018405998233;
",6,2,0,0,0,0,0,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2898,"      est *= CBRTTWO[exponent % 3 + 2];
",4,2,1,1,2,0,0,0,0,9,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2903,"      final double xs = x / (p2*p2*p2);
",10,2,0,1,2,1,0,0,0,13,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2904,"      est += (xs - est*est*est) / (3*est*est);
",14,4,0,2,4,0,0,0,0,19,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2905,"      est += (xs - est*est*est) / (3*est*est);
",14,4,0,2,4,0,0,0,0,19,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2908,"      double temp = est * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2909,"      double ya = est + temp - temp;
",8,2,0,0,0,0,0,0,0,10,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2910,"      double yb = est - ya;
",6,1,0,0,0,0,0,0,0,7,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2912,"      double za = ya * ya;
",6,1,0,0,0,0,0,0,0,7,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2913,"      double zb = ya * yb * 2.0 + yb * yb;
",10,3,0,0,0,0,0,0,0,13,36,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2914,"      temp = za * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2915,"      double temp2 = za + temp - temp;
",8,2,0,0,0,0,0,0,0,10,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2916,"      zb += za - temp2;
",6,1,0,0,0,0,0,0,0,8,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2917,"      za = temp2;
",4,0,0,0,0,0,0,0,0,5,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2919,"      zb = za * yb + ya * zb + zb * yb;
",14,5,0,0,0,0,0,0,0,20,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2920,"      za = za * ya;
",6,1,0,0,0,0,0,0,0,8,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2922,"      double na = xs - za;
",6,1,0,0,0,0,0,0,0,7,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2923,"      double nb = -(na - xs + za);
",8,2,0,1,2,0,0,0,0,11,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2924,"      nb -= zb;
",4,0,0,0,0,0,0,0,0,5,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2926,"      est += (na+nb)/(3*est*est);
",10,3,0,2,4,0,0,0,0,14,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2929,"      est *= p2;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2931,"      if (subnormal) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2932,"          est *= 3.814697265625E-6;  // 2^-18
",2,0,0,0,0,0,0,0,0,3,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2935,"      return est;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2945,"        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign
",2,2,0,2,5,1,6,0,0,10,79,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2946,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2950,"        final double facta = 0.01745329052209854;
",2,0,0,0,0,1,0,0,0,3,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2951,"        final double factb = 1.997844754509471E-9;
",2,0,0,0,0,1,0,0,0,3,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2953,"        double xa = doubleHighPart(x);
",2,0,0,1,2,0,4,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2954,"        double xb = x - xa;
",6,1,0,0,0,0,0,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2956,"        double result = xb * factb + xb * facta + xa * factb + xa * facta;
",18,7,0,0,0,0,0,0,0,25,66,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2957,"        if (result == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2958,"            result = result * x; // ensure correct sign if calculation underflows
",6,1,0,0,0,0,0,0,0,8,69,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2960,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2970,"        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign
",2,2,0,2,5,1,6,0,0,10,79,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2971,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2975,"        final double facta = 57.2957763671875;
",2,0,0,0,0,1,0,0,0,3,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2976,"        final double factb = 3.145894820876798E-6;
",2,0,0,0,0,1,0,0,0,3,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2978,"        double xa = doubleHighPart(x);
",2,0,0,1,2,0,4,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2979,"        double xb = x - xa;
",6,1,0,0,0,0,0,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2981,"        return xb * factb + xb * facta + xa * factb + xa * facta;
",16,7,0,0,0,1,0,0,0,23,57,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2990,"        return (x < 0) ? -x : x;
",6,1,0,1,2,1,0,0,0,8,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3008,"        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0
",8,2,0,2,4,1,0,0,0,11,64,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3026,"        if (Double.isInfinite(x)) {
",0,0,0,2,5,0,6,0,0,6,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3027,"            return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3029,"        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));
",2,2,0,3,6,1,12,0,0,16,72,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3038,"        if (Float.isInfinite(x)) {
",0,0,0,2,5,0,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3039,"            return Float.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3041,"        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));
",2,2,0,3,6,1,12,0,0,16,66,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3053,"        if ((n > -1023) && (n < 1024)) {
",4,3,0,3,7,0,0,0,0,8,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3054,"            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);
",4,3,0,4,8,1,4,0,0,11,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3058,"        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {
",2,2,0,4,9,0,12,0,0,16,58,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3059,"            return d;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3061,"        if (n < -2098) {
",2,1,0,1,3,0,0,0,0,4,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3062,"            return (d > 0) ? 0.0 : -0.0;
",2,1,0,1,2,1,0,0,0,4,28,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3064,"        if (n > 2097) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3065,"            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,69,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3069,"        final long bits = Double.doubleToLongBits(d);
",2,0,0,1,2,1,6,0,0,9,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3070,"        final long sign = bits & 0x8000000000000000L;
",4,1,0,0,0,1,0,0,0,6,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3071,"        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;
",4,2,0,3,6,0,0,0,0,6,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3072,"        long mantissa   = bits & 0x000fffffffffffffL;
",4,1,0,0,0,0,0,0,0,5,45,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3075,"        int scaledExponent = exponent + n;
",6,1,0,0,0,0,0,0,0,7,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3077,"        if (n < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3079,"            if (scaledExponent > 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3081,"                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
",6,2,0,4,8,1,4,0,0,12,82,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3082,"            } else if (scaledExponent > -53) {
",2,1,0,1,4,0,0,0,0,4,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3086,"                mantissa = mantissa | (1L << 52);
",4,2,0,1,2,0,0,0,0,7,33,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3089,"                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));
",6,2,0,2,4,1,0,0,0,10,73,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3090,"                mantissa = mantissa >>> (1 - scaledExponent);
",6,2,0,1,2,0,0,0,0,9,45,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3091,"                if (mostSignificantLostBit != 0) {
",2,1,0,1,3,0,0,0,0,3,34,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3093,"                    mantissa++;
",2,0,0,0,0,0,0,0,0,3,11,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3095,"                return Double.longBitsToDouble(sign | mantissa);
",4,1,0,1,2,1,4,0,0,9,48,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3099,"                return (sign == 0L) ? 0.0 : -0.0;
",2,1,0,1,2,1,0,0,0,4,33,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3103,"            if (exponent == 0) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3106,"                while ((mantissa >>> 52) != 1) {
",2,2,0,2,5,0,0,0,0,4,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3107,"                    mantissa = mantissa << 1;
",4,1,0,0,0,0,0,0,0,6,25,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3108,"                    --scaledExponent;
",2,0,0,0,0,0,0,0,0,3,17,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3110,"                ++scaledExponent;
",2,0,0,0,0,0,0,0,0,3,17,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3111,"                mantissa = mantissa & 0x000fffffffffffffL;
",4,1,0,0,0,0,0,0,0,6,42,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3113,"                if (scaledExponent < 2047) {
",2,1,0,1,3,0,0,0,0,3,28,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3114,"                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
",6,2,0,4,8,1,4,0,0,12,82,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3116,"                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,74,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3119,"            } else if (scaledExponent < 2047) {
",2,1,0,1,4,0,0,0,0,3,35,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3120,"                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
",6,2,0,4,8,1,4,0,0,12,82,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3122,"                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,74,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3137,"        if ((n > -127) && (n < 128)) {
",4,3,0,3,7,0,0,0,0,8,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3138,"            return f * Float.intBitsToFloat((n + 127) << 23);
",4,3,0,2,4,1,4,0,0,11,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3142,"        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {
",2,2,0,4,9,0,12,0,0,16,57,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3143,"            return f;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3145,"        if (n < -277) {
",2,1,0,1,3,0,0,0,0,4,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3146,"            return (f > 0) ? 0.0f : -0.0f;
",2,1,0,1,2,1,0,0,0,4,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3148,"        if (n > 276) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3149,"            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,67,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3153,"        final int bits = Float.floatToIntBits(f);
",2,0,0,1,2,1,6,0,0,9,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3154,"        final int sign = bits & 0x80000000;
",4,1,0,0,0,1,0,0,0,6,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3155,"        int  exponent  = (bits >>> 23) & 0xff;
",4,2,0,1,2,0,0,0,0,6,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3156,"        int mantissa   = bits & 0x007fffff;
",4,1,0,0,0,0,0,0,0,5,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3159,"        int scaledExponent = exponent + n;
",6,1,0,0,0,0,0,0,0,7,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3161,"        if (n < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3163,"            if (scaledExponent > 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3165,"                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
",6,2,0,2,4,1,4,0,0,12,70,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3166,"            } else if (scaledExponent > -24) {
",2,1,0,1,4,0,0,0,0,4,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3170,"                mantissa = mantissa | (1 << 23);
",4,2,0,1,2,0,0,0,0,7,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3173,"                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));
",6,2,0,2,4,1,0,0,0,10,71,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3174,"                mantissa = mantissa >>> (1 - scaledExponent);
",6,2,0,1,2,0,0,0,0,9,45,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3175,"                if (mostSignificantLostBit != 0) {
",2,1,0,1,3,0,0,0,0,3,34,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3177,"                    mantissa++;
",2,0,0,0,0,0,0,0,0,3,11,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3179,"                return Float.intBitsToFloat(sign | mantissa);
",4,1,0,1,2,1,4,0,0,9,45,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3183,"                return (sign == 0) ? 0.0f : -0.0f;
",2,1,0,1,2,1,0,0,0,4,34,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3187,"            if (exponent == 0) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3190,"                while ((mantissa >>> 23) != 1) {
",2,2,0,2,5,0,0,0,0,4,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3191,"                    mantissa = mantissa << 1;
",4,1,0,0,0,0,0,0,0,6,25,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3192,"                    --scaledExponent;
",2,0,0,0,0,0,0,0,0,3,17,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3194,"                ++scaledExponent;
",2,0,0,0,0,0,0,0,0,3,17,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3195,"                mantissa = mantissa & 0x007fffff;
",4,1,0,0,0,0,0,0,0,6,33,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3197,"                if (scaledExponent < 255) {
",2,1,0,1,3,0,0,0,0,3,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3198,"                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
",6,2,0,2,4,1,4,0,0,12,70,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3200,"                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,71,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3203,"            } else if (scaledExponent < 255) {
",2,1,0,1,4,0,0,0,0,3,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3204,"                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
",6,2,0,2,4,1,4,0,0,12,70,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3206,"                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,71,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3246,"        if (Double.isNaN(d) || Double.isNaN(direction)) {
",0,1,0,3,7,0,12,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3247,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3248,"        } else if (d == direction) {
",4,1,0,1,4,0,0,0,0,5,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3249,"            return direction;
",2,0,0,0,0,1,0,0,0,2,17,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3250,"        } else if (Double.isInfinite(d)) {
",0,0,0,2,6,0,6,0,0,6,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3251,"            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;
",10,1,0,1,2,1,0,0,0,12,54,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3252,"        } else if (d == 0) {
",2,1,0,1,4,0,0,0,0,3,20,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3253,"            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;
",10,1,0,1,2,1,0,0,0,12,62,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3258,"        final long bits = Double.doubleToLongBits(d);
",2,0,0,1,2,1,6,0,0,9,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3259,"        final long sign = bits & 0x8000000000000000L;
",4,1,0,0,0,1,0,0,0,6,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3260,"        if ((direction < d) ^ (sign == 0L)) {
",6,3,0,3,7,0,0,0,0,9,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3261,"            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));
",4,3,0,3,6,1,4,0,0,11,74,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3263,"            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));
",4,3,0,3,6,1,4,0,0,11,74,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3302,"        if (Double.isNaN(f) || Double.isNaN(direction)) {
",0,1,0,3,7,0,12,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3303,"            return Float.NaN;
",4,0,0,0,0,1,0,0,0,4,17,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3304,"        } else if (f == direction) {
",4,1,0,1,4,0,0,0,0,5,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3305,"            return (float) direction;
",2,0,0,1,2,1,0,0,0,2,25,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3306,"        } else if (Float.isInfinite(f)) {
",0,0,0,2,6,0,6,0,0,6,33,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3307,"            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;
",10,1,0,1,2,1,0,0,0,12,53,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3308,"        } else if (f == 0f) {
",2,1,0,1,4,0,0,0,0,3,21,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3309,"            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;
",10,1,0,1,2,1,0,0,0,12,60,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3314,"        final int bits = Float.floatToIntBits(f);
",2,0,0,1,2,1,6,0,0,9,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3315,"        final int sign = bits & 0x80000000;
",4,1,0,0,0,1,0,0,0,6,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3316,"        if ((direction < f) ^ (sign == 0)) {
",6,3,0,3,7,0,0,0,0,9,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3317,"            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));
",4,3,0,3,6,1,4,0,0,11,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3319,"            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));
",4,3,0,3,6,1,4,0,0,11,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3331,"        if (x != x) { // NaN
",4,1,0,1,3,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3332,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3335,"        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {
",8,3,0,1,3,0,0,0,0,12,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3336,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3339,"        y = (long) x;
",4,0,0,1,2,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3340,"        if (x < 0 && y != x) {
",6,3,0,1,3,0,0,0,0,9,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3341,"            y--;
",2,0,0,0,0,0,0,0,0,3,4,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3344,"        if (y == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3345,"            return x*y;
",4,1,0,0,0,1,0,0,0,5,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3348,"        return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3358,"        if (x != x) { // NaN
",4,1,0,1,3,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3359,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3362,"        y = floor(x);
",2,0,0,1,2,0,4,0,0,7,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3363,"        if (y == x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3364,"            return y;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3367,"        y += 1.0;
",2,0,0,0,0,0,0,0,0,3,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3369,"        if (y == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3370,"            return x*y;
",4,1,0,0,0,1,0,0,0,5,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3373,"        return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3381,"        double y = floor(x);
",2,0,0,1,2,0,4,0,0,6,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3382,"        double d = x - y;
",6,1,0,0,0,0,0,0,0,7,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3384,"        if (d > 0.5) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3385,"            if (y == -1.0) {
",2,1,0,1,3,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3386,"                return -0.0; // Preserve sign of operand
",0,0,0,0,0,1,0,0,0,1,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3388,"            return y+1.0;
",2,1,0,0,0,1,0,0,0,3,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3390,"        if (d < 0.5) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3391,"            return y;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3395,"        long z = (long) y;
",4,0,0,1,2,0,0,0,0,4,18,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3396,"        return (z & 1) == 0 ? y : y + 1.0;
",6,3,0,1,2,1,0,0,0,9,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3404,"        return (long) floor(x + 0.5);
",2,1,0,2,4,1,2,0,0,5,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3412,"        return (int) floor(x + 0.5f);
",2,1,0,2,4,1,2,0,0,5,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3430,"        return (a <= b) ? a : b;
",8,1,0,1,2,1,0,0,0,9,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3439,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3440,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3442,"        if (a < b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3443,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3446,"        if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3447,"            return Float.NaN;
",4,0,0,0,0,1,0,0,0,4,17,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3451,"        int bits = Float.floatToRawIntBits(a);
",2,0,0,1,2,0,6,0,0,8,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3452,"        if (bits == 0x80000000) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3453,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3455,"        return b;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3464,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3465,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3467,"        if (a < b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3468,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3471,"        if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3472,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3476,"        long bits = Double.doubleToRawLongBits(a);
",2,0,0,1,2,0,6,0,0,8,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3477,"        if (bits == 0x8000000000000000L) {
",2,1,0,1,3,0,0,0,0,3,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3478,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3480,"        return b;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3489,"        return (a <= b) ? b : a;
",8,1,0,1,2,1,0,0,0,9,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3498,"        return (a <= b) ? b : a;
",8,1,0,1,2,1,0,0,0,9,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3507,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3508,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3510,"        if (a < b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3511,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3514,"        if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3515,"            return Float.NaN;
",4,0,0,0,0,1,0,0,0,4,17,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3519,"        int bits = Float.floatToRawIntBits(a);
",2,0,0,1,2,0,6,0,0,8,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3520,"        if (bits == 0x80000000) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3521,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3523,"        return a;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3532,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3533,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3535,"        if (a < b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3536,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3539,"        if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3540,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3544,"        long bits = Double.doubleToRawLongBits(a);
",2,0,0,1,2,0,6,0,0,8,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3545,"        if (bits == 0x8000000000000000L) {
",2,1,0,1,3,0,0,0,0,3,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3546,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3548,"        return a;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3566,"        if (Double.isInfinite(x) || Double.isInfinite(y)) {
",0,1,0,3,7,0,12,0,0,13,51,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3567,"            return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3568,"        } else if (Double.isNaN(x) || Double.isNaN(y)) {
",0,1,0,3,8,0,12,0,0,13,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3569,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3572,"            final int expX = getExponent(x);
",2,0,0,1,2,1,4,0,0,7,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3573,"            final int expY = getExponent(y);
",2,0,0,1,2,1,4,0,0,7,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3574,"            if (expX > expY + 27) {
",4,2,0,1,3,0,0,0,0,6,23,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3576,"                return abs(x);
",0,0,0,1,2,1,4,0,0,4,14,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3577,"            } else if (expY > expX + 27) {
",4,2,0,1,4,0,0,0,0,6,30,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3579,"                return abs(y);
",0,0,0,1,2,1,4,0,0,4,14,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3583,"                final int middleExp = (expX + expY) / 2;
",6,2,0,1,2,1,0,0,0,9,40,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3586,"                final double scaledX = scalb(x, -middleExp);
",4,0,0,1,2,1,4,0,0,10,44,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3587,"                final double scaledY = scalb(y, -middleExp);
",4,0,0,1,2,1,4,0,0,10,44,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3590,"                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);
",10,3,0,1,2,1,2,0,0,16,67,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3593,"                return scalb(scaledH, middleExp);
",0,0,0,1,2,1,6,0,0,6,33,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3621,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation
",0,0,0,1,2,1,8,0,0,8,90,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3633,"        long m = Double.doubleToLongBits(magnitude);
",2,0,0,1,2,0,6,0,0,8,44,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3634,"        long s = Double.doubleToLongBits(sign);
",2,0,0,1,2,0,6,0,0,8,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3635,"        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK
",8,7,0,3,7,0,0,0,0,15,69,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3636,"            return magnitude;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3638,"        return -magnitude; // flip sign
",2,0,0,0,0,1,0,0,0,3,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3650,"        int m = Float.floatToIntBits(magnitude);
",2,0,0,1,2,0,6,0,0,8,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3651,"        int s = Float.floatToIntBits(sign);
",2,0,0,1,2,0,6,0,0,8,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3652,"        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK
",8,7,0,3,7,0,0,0,0,15,69,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3653,"            return magnitude;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3655,"        return -magnitude; // flip sign
",2,0,0,0,0,1,0,0,0,3,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3668,"        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;
",0,3,0,4,8,1,6,0,0,9,66,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3681,"        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;
",0,3,0,3,6,1,6,0,0,9,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3690,"        PrintStream out = System.out;
",6,0,0,0,0,0,0,2,0,8,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3691,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);
",4,0,0,1,2,0,8,0,0,13,96,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3692,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);
",4,0,0,1,2,0,8,0,0,13,96,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3693,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);
",4,0,0,1,2,0,8,0,0,13,100,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3694,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);
",4,0,0,1,2,0,8,0,0,13,100,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3695,"        FastMathCalc.printarray(out, ""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);
",4,0,0,1,2,0,8,0,0,13,68,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3696,"        FastMathCalc.printarray(out, ""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);
",0,0,0,1,2,0,10,0,0,11,75,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3697,"        FastMathCalc.printarray(out, ""SINE_TABLE_B"", SINE_TABLE_LEN, SINE_TABLE_B);
",0,0,0,1,2,0,10,0,0,11,75,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3698,"        FastMathCalc.printarray(out, ""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);
",0,0,0,1,2,0,10,0,0,11,79,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3699,"        FastMathCalc.printarray(out, ""COSINE_TABLE_B"", SINE_TABLE_LEN, COSINE_TABLE_B);
",0,0,0,1,2,0,10,0,0,11,79,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3700,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);
",0,0,0,1,2,0,10,0,0,11,81,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3701,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_B"", SINE_TABLE_LEN, TANGENT_TABLE_B);
",0,0,0,1,2,0,10,0,0,11,81,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3702,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,48,"    private MathArrays() {}
",2,0,0,2,4,1,0,0,0,3,23,2,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,85,"        if (a.length != b.length) {
",8,1,0,1,3,0,0,0,0,9,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,86,"            throw new DimensionMismatchException(a.length, b.length);
",8,0,0,1,2,0,0,2,0,10,57,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,89,"        final double[] result = a.clone();
",2,0,0,2,4,1,4,0,0,7,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,90,"        for (int i = 0; i < a.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,91,"            result[i] += b[i];
",0,0,1,2,4,0,0,0,0,9,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,93,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,107,"        if (a.length != b.length) {
",8,1,0,1,3,0,0,0,0,9,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,108,"            throw new DimensionMismatchException(a.length, b.length);
",8,0,0,1,2,0,0,2,0,10,57,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,111,"        final double[] result = a.clone();
",2,0,0,2,4,1,4,0,0,7,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,112,"        for (int i = 0; i < a.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,113,"            result[i] -= b[i];
",0,0,1,2,4,0,0,0,0,9,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,115,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,129,"        if (a.length != b.length) {
",8,1,0,1,3,0,0,0,0,9,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,130,"            throw new DimensionMismatchException(a.length, b.length);
",8,0,0,1,2,0,0,2,0,10,57,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,133,"        final double[] result = a.clone();
",2,0,0,2,4,1,4,0,0,7,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,134,"        for (int i = 0; i < a.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,135,"            result[i] *= b[i];
",0,0,1,2,4,0,0,0,0,9,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,137,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,151,"        if (a.length != b.length) {
",8,1,0,1,3,0,0,0,0,9,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,152,"            throw new DimensionMismatchException(a.length, b.length);
",8,0,0,1,2,0,0,2,0,10,57,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,155,"        final double[] result = a.clone();
",2,0,0,2,4,1,4,0,0,7,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,156,"        for (int i = 0; i < a.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,157,"            result[i] /= b[i];
",0,0,1,2,4,0,0,0,0,9,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,159,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,170,"        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,171,"        for (int i = 0; i < p1.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,172,"            sum += FastMath.abs(p1[i] - p2[i]);
",2,1,1,3,6,0,4,0,0,16,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,174,"        return sum;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,185,"      int sum = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,186,"      for (int i = 0; i < p1.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,187,"          sum += FastMath.abs(p1[i] - p2[i]);
",2,1,1,3,6,0,4,0,0,16,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,189,"      return sum;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,200,"        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,201,"        for (int i = 0; i < p1.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,202,"            final double dp = p1[i] - p2[i];
",2,1,1,2,4,1,0,0,0,12,32,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,203,"            sum += dp * dp;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,205,"        return FastMath.sqrt(sum);
",0,0,0,1,2,1,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,216,"      double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,217,"      for (int i = 0; i < p1.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,218,"          final double dp = p1[i] - p2[i];
",2,1,1,2,4,1,0,0,0,12,32,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,219,"          sum += dp * dp;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,221,"      return FastMath.sqrt(sum);
",0,0,0,1,2,1,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,232,"        double max = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,233,"        for (int i = 0; i < p1.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,234,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));
",2,1,1,4,8,0,10,0,0,22,53,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,236,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,247,"        int max = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,248,"        for (int i = 0; i < p1.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,249,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));
",2,1,1,4,8,0,10,0,0,22,53,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,251,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,276,"        T previous = val[0];
",2,0,1,1,2,0,0,2,0,6,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,277,"        final int max = val.length;
",6,0,0,0,0,1,0,0,0,7,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,278,"        for (int i = 1; i < max; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,280,"            switch (dir) {
",2,0,0,1,3,0,0,0,0,2,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,282,"                comp = previous.compareTo(val[i]);
",2,0,1,2,4,0,4,0,0,11,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,283,"                if (strict) {
",2,0,0,1,3,0,0,0,0,2,13,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,284,"                    if (comp >= 0) {
",2,1,0,1,3,0,0,0,0,3,16,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,285,"                        return false;
",0,0,0,0,0,1,0,0,0,1,13,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,288,"                    if (comp > 0) {
",2,1,0,1,3,0,0,0,0,3,15,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,289,"                        return false;
",0,0,0,0,0,1,0,0,0,1,13,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,294,"                comp = val[i].compareTo(previous);
",2,0,1,2,4,0,4,0,0,11,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,295,"                if (strict) {
",2,0,0,1,3,0,0,0,0,2,13,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,296,"                    if (comp >= 0) {
",2,1,0,1,3,0,0,0,0,3,16,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,297,"                        return false;
",0,0,0,0,0,1,0,0,0,1,13,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,300,"                    if (comp > 0) {
",2,1,0,1,3,0,0,0,0,3,15,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,301,"                       return false;
",0,0,0,0,0,1,0,0,0,1,13,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,307,"                throw new MathInternalError();
",0,0,0,1,2,0,0,2,0,2,30,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,310,"            previous = val[i];
",2,0,1,1,2,0,0,0,0,7,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,312,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,326,"        return checkOrder(val, dir, strict, false);
",0,0,0,1,2,1,8,0,0,9,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,343,"        double previous = val[0];
",2,0,1,1,2,0,0,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,344,"        final int max = val.length;
",6,0,0,0,0,1,0,0,0,7,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,348,"        for (index = 1; index < max; index++) {
",8,1,0,1,3,0,0,0,0,11,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,349,"            switch (dir) {
",2,0,0,1,3,0,0,0,0,2,14,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,351,"                if (strict) {
",2,0,0,1,3,0,0,0,0,2,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,352,"                    if (val[index] <= previous) {
",2,1,1,2,5,0,0,0,0,7,29,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,353,"                        break ITEM;
",2,0,0,0,0,0,0,0,0,2,11,12,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,356,"                    if (val[index] < previous) {
",2,1,1,2,5,0,0,0,0,7,28,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,357,"                        break ITEM;
",2,0,0,0,0,0,0,0,0,2,11,12,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,362,"                if (strict) {
",2,0,0,1,3,0,0,0,0,2,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,363,"                    if (val[index] >= previous) {
",2,1,1,2,5,0,0,0,0,7,29,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,364,"                        break ITEM;
",2,0,0,0,0,0,0,0,0,2,11,12,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,367,"                    if (val[index] > previous) {
",2,1,1,2,5,0,0,0,0,7,28,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,368,"                        break ITEM;
",2,0,0,0,0,0,0,0,0,2,11,12,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,374,"                throw new MathInternalError();
",0,0,0,1,2,0,0,2,0,2,30,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,377,"            previous = val[index];
",2,0,1,1,2,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,380,"        if (index == max) {
",4,1,0,1,3,0,0,0,0,5,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,382,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,386,"        if (abort) {
",2,0,0,1,3,0,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,387,"            throw new NonMonotonicSequenceException(val[index], previous, index, dir, strict);
",8,0,1,2,4,0,0,2,0,14,82,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,389,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,404,"        checkOrder(val, dir, strict, true);
",0,0,0,1,2,0,8,0,0,9,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,405,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,415,"        checkOrder(val, OrderDirection.INCREASING, true);
",4,0,0,1,2,0,4,0,0,9,49,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,416,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,428,"        MathUtils.checkNotNull(in);
",0,0,0,1,2,0,6,0,0,6,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,429,"        for (int i = 1; i < in.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,430,"            if (in[i].length != in[0].length) {
",4,1,1,3,7,0,0,0,0,11,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,431,"                throw new DimensionMismatchException(
",0,0,0,0,1,0,0,2,0,2,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,436,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,448,"        for (int i = 0; i < in.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,449,"            if (in[i] <= 0) {
",0,1,1,2,5,0,0,0,0,5,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,450,"                throw new NotStrictlyPositiveException(in[i]);
",0,0,1,2,4,0,0,2,0,6,46,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,453,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,464,"        for (int i = 0; i < in.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,465,"            if (in[i] < 0) {
",0,1,1,2,5,0,0,0,0,5,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,466,"                throw new NotPositiveException(in[i]);
",0,0,1,2,4,0,0,2,0,6,38,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,469,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,480,"        for (int i = 0; i < in.length; i ++) {
",10,1,0,1,3,0,0,0,0,12,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,481,"            for (int j = 0; j < in[i].length; j++) {
",8,1,1,2,5,0,0,0,0,14,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,482,"                if (in[i][j] < 0) {
",0,1,1,3,7,0,0,0,0,7,19,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,483,"                    throw new NotPositiveException(in[i][j]);
",0,0,1,3,6,0,0,2,0,8,41,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,487,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,550,"        double rdwarf = 3.834e-20;
",2,0,0,0,0,0,0,0,0,2,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,551,"        double rgiant = 1.304e+19;
",2,0,0,0,0,0,0,0,0,2,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,552,"        double s1 = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,553,"        double s2 = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,554,"        double s3 = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,555,"        double x1max = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,556,"        double x3max = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,557,"        double floatn = v.length;
",6,0,0,0,0,0,0,0,0,6,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,558,"        double agiant = rgiant / floatn;
",6,1,0,0,0,0,0,0,0,7,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,559,"        for (int i = 0; i < v.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,560,"            double xabs = Math.abs(v[i]);
",2,0,1,2,4,0,4,0,0,10,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,561,"            if (xabs < rdwarf || xabs > agiant) {
",8,3,0,1,3,0,0,0,0,11,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,562,"                if (xabs > rdwarf) {
",4,1,0,1,3,0,0,0,0,5,20,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,563,"                    if (xabs > x1max) {
",4,1,0,1,3,0,0,0,0,5,19,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,564,"                        double r = x1max / xabs;
",6,1,0,0,0,0,0,0,0,7,24,13,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,565,"                        s1= 1 + s1 * r * r;
",8,2,0,0,0,0,0,0,0,11,19,12,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,566,"                        x1max = xabs;
",4,0,0,0,0,0,0,0,0,5,13,12,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,567,"                    } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,568,"                        double r = xabs / x1max;
",6,1,0,0,0,0,0,0,0,7,24,13,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,569,"                        s1 += r * r;
",6,1,0,0,0,0,0,0,0,8,12,12,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,570,"                    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,572,"                    if (xabs > x3max) {
",4,1,0,1,3,0,0,0,0,5,19,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,573,"                        double r = x3max / xabs;
",6,1,0,0,0,0,0,0,0,7,24,13,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,574,"                        s3= 1 + s3 * r * r;
",8,2,0,0,0,0,0,0,0,11,19,12,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,575,"                        x3max = xabs;
",4,0,0,0,0,0,0,0,0,5,13,12,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,576,"                    } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,577,"                        if (xabs != 0) {
",2,1,0,1,3,0,0,0,0,3,16,12,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,578,"                            double r = xabs / x3max;
",6,1,0,0,0,0,0,0,0,7,24,15,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,579,"                            s3 += r * r;
",6,1,0,0,0,0,0,0,0,8,12,14,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,580,"                        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,584,"                s2 += xabs * xabs;
",6,1,0,0,0,0,0,0,0,8,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,588,"        if (s1 != 0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,589,"            norm = x1max * Math.sqrt(s1 + (s2 / x1max) / x1max);
",12,4,0,2,4,0,4,0,0,21,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,591,"            if (s2 == 0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,592,"                norm = x3max * Math.sqrt(s3);
",4,1,0,1,2,0,6,0,0,12,29,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,594,"                if (s2 >= x3max) {
",4,1,0,1,3,0,0,0,0,5,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,595,"                    norm = Math.sqrt(s2 * (1 + (x3max / s2) * (x3max * s3)));
",12,5,0,4,8,0,4,0,0,22,57,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,597,"                    norm = Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));
",12,4,0,4,8,0,4,0,0,21,56,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,601,"        return norm;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,622,"        sortInPlace(x, OrderDirection.INCREASING, yList);
",4,0,0,1,2,0,6,0,0,10,49,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,623,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,646,"        if (x == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,647,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,650,"        final int len = x.length;
",6,0,0,0,0,1,0,0,0,7,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,651,"        final List<Pair<Double, double[]>> list
",2,0,0,1,2,1,0,6,0,9,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,654,"        final int yListLen = yList.length;
",6,0,0,0,0,1,0,0,0,7,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,655,"        for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,656,"            final double[] yValues = new double[yListLen];
",2,0,1,2,4,1,0,0,0,5,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,657,"            for (int j = 0; j < yListLen; j++) {
",8,1,0,1,3,0,0,0,0,10,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,658,"                double[] y = yList[j];
",2,0,1,2,4,0,0,0,0,6,22,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,659,"                if (y == null) {
",2,1,0,1,3,0,0,0,0,3,16,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,660,"                    throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,12,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,662,"                if (y.length != len) {
",6,1,0,1,3,0,0,0,0,7,22,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,663,"                    throw new DimensionMismatchException(y.length, len);
",6,0,0,1,2,0,0,2,0,8,52,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,665,"                yValues[j] = y[i];
",0,0,1,2,4,0,0,0,0,9,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,667,"            list.add(new Pair<Double, double[]>(x[i], yValues));
",2,0,1,4,8,0,4,4,0,14,52,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,670,"        final Comparator<Pair<Double, double[]>> comp
",2,0,0,1,2,1,0,6,0,9,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,690,"        Collections.sort(list, comp);
",0,0,0,1,2,0,8,0,0,8,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,692,"        for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,693,"            final Pair<Double, double[]> e = list.get(i);
",2,0,0,2,4,1,6,4,0,13,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,694,"            x[i] = e.getKey();
",0,0,1,2,4,0,4,0,0,9,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,695,"            final double[] yValues = e.getValue();
",2,0,0,2,4,1,4,0,0,7,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,696,"            for (int j = 0; j < yListLen; j++) {
",8,1,0,1,3,0,0,0,0,10,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,697,"                yList[j][i] = yValues[j];
",0,0,1,3,6,0,0,0,0,11,25,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,700,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,709,"         return copyOf(source, source.length);
",4,0,0,1,2,1,4,0,0,8,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,732,"         final int[] output = new int[len];
",2,0,1,2,4,1,0,0,0,5,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,733,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));
",4,0,0,2,4,0,14,0,0,18,73,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,734,"         return output;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,771,"        final int len = a.length;
",6,0,0,0,0,1,0,0,0,7,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,772,"        if (len != b.length) {
",6,1,0,1,3,0,0,0,0,7,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,773,"            throw new DimensionMismatchException(len, b.length);
",6,0,0,1,2,0,0,2,0,8,52,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,776,"        final double[] prodHigh = new double[len];
",2,0,1,2,4,1,0,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,777,"        double prodLowSum = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,779,"        for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,780,"            final double ai = a[i];
",2,0,1,1,2,1,0,0,0,7,23,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,781,"            final double ca = SPLIT_FACTOR * ai;
",6,1,0,0,0,1,0,0,0,8,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,782,"            final double aHigh = ca - (ca - ai);
",8,2,0,1,2,1,0,0,0,11,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,783,"            final double aLow = ai - aHigh;
",6,1,0,0,0,1,0,0,0,8,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,785,"            final double bi = b[i];
",2,0,1,1,2,1,0,0,0,7,23,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,786,"            final double cb = SPLIT_FACTOR * bi;
",6,1,0,0,0,1,0,0,0,8,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,787,"            final double bHigh = cb - (cb - bi);
",8,2,0,1,2,1,0,0,0,11,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,788,"            final double bLow = bi - bHigh;
",6,1,0,0,0,1,0,0,0,8,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,789,"            prodHigh[i] = ai * bi;
",4,1,1,1,2,0,0,0,0,10,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,790,"            final double prodLow = aLow * bLow - (((prodHigh[i] -
",6,5,1,1,5,1,0,0,0,16,53,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,794,"            prodLowSum += prodLow;
",4,0,0,0,0,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,798,"        final double prodHighCur = prodHigh[0];
",2,0,1,1,2,1,0,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,799,"        double prodHighNext = prodHigh[1];
",2,0,1,1,2,0,0,0,0,4,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,800,"        double sHighPrev = prodHighCur + prodHighNext;
",6,1,0,0,0,0,0,0,0,7,46,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,801,"        double sPrime = sHighPrev - prodHighNext;
",6,1,0,0,0,0,0,0,0,7,41,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,802,"        double sLowSum = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);
",12,4,0,3,6,0,0,0,0,16,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,804,"        final int lenMinusOne = len - 1;
",4,1,0,0,0,1,0,0,0,6,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,805,"        for (int i = 1; i < lenMinusOne; i++) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,806,"            prodHighNext = prodHigh[i + 1];
",4,1,1,1,2,0,0,0,0,8,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,807,"            final double sHighCur = sHighPrev + prodHighNext;
",6,1,0,0,0,1,0,0,0,8,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,808,"            sPrime = sHighCur - prodHighNext;
",6,1,0,0,0,0,0,0,0,8,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,809,"            sLowSum += (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);
",12,4,0,3,6,0,0,0,0,17,71,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,810,"            sHighPrev = sHighCur;
",4,0,0,0,0,0,0,0,0,5,21,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,813,"        double result = sHighPrev + (prodLowSum + sLowSum);
",8,2,0,1,2,0,0,0,0,10,51,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,815,"        if (Double.isNaN(result)) {
",0,0,0,2,5,0,6,0,0,6,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,818,"            result = 0;
",2,0,0,0,0,0,0,0,0,3,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,819,"            for (int i = 0; i < len; ++i) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,820,"                result += a[i] * b[i];
",2,1,1,2,4,0,0,0,0,12,22,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,824,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,863,"        final double ca1        = SPLIT_FACTOR * a1;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,864,"        final double a1High     = ca1 - (ca1 - a1);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,865,"        final double a1Low      = a1 - a1High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,866,"        final double cb1        = SPLIT_FACTOR * b1;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,867,"        final double b1High     = cb1 - (cb1 - b1);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,868,"        final double b1Low      = b1 - b1High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,871,"        final double prod1High  = a1 * b1;
",6,1,0,0,0,1,0,0,0,8,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,872,"        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,875,"        final double ca2        = SPLIT_FACTOR * a2;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,876,"        final double a2High     = ca2 - (ca2 - a2);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,877,"        final double a2Low      = a2 - a2High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,878,"        final double cb2        = SPLIT_FACTOR * b2;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,879,"        final double b2High     = cb2 - (cb2 - b2);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,880,"        final double b2Low      = b2 - b2High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,883,"        final double prod2High  = a2 * b2;
",6,1,0,0,0,1,0,0,0,8,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,884,"        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,887,"        final double s12High    = prod1High + prod2High;
",6,1,0,0,0,1,0,0,0,8,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,888,"        final double s12Prime   = s12High - prod2High;
",6,1,0,0,0,1,0,0,0,8,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,889,"        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);
",12,4,0,3,6,1,0,0,0,17,86,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,893,"        double result = s12High + (prod1Low + prod2Low + s12Low);
",10,2,0,1,2,0,0,0,0,12,57,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,895,"        if (Double.isNaN(result)) {
",0,0,0,2,5,0,6,0,0,6,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,898,"            result = a1 * b1 + a2 * b2;
",10,3,0,0,0,0,0,0,0,14,27,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,901,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,943,"        final double ca1        = SPLIT_FACTOR * a1;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,944,"        final double a1High     = ca1 - (ca1 - a1);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,945,"        final double a1Low      = a1 - a1High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,946,"        final double cb1        = SPLIT_FACTOR * b1;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,947,"        final double b1High     = cb1 - (cb1 - b1);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,948,"        final double b1Low      = b1 - b1High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,951,"        final double prod1High  = a1 * b1;
",6,1,0,0,0,1,0,0,0,8,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,952,"        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,955,"        final double ca2        = SPLIT_FACTOR * a2;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,956,"        final double a2High     = ca2 - (ca2 - a2);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,957,"        final double a2Low      = a2 - a2High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,958,"        final double cb2        = SPLIT_FACTOR * b2;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,959,"        final double b2High     = cb2 - (cb2 - b2);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,960,"        final double b2Low      = b2 - b2High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,963,"        final double prod2High  = a2 * b2;
",6,1,0,0,0,1,0,0,0,8,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,964,"        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,967,"        final double ca3        = SPLIT_FACTOR * a3;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,968,"        final double a3High     = ca3 - (ca3 - a3);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,969,"        final double a3Low      = a3 - a3High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,970,"        final double cb3        = SPLIT_FACTOR * b3;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,971,"        final double b3High     = cb3 - (cb3 - b3);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,972,"        final double b3Low      = b3 - b3High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,975,"        final double prod3High  = a3 * b3;
",6,1,0,0,0,1,0,0,0,8,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,976,"        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,979,"        final double s12High    = prod1High + prod2High;
",6,1,0,0,0,1,0,0,0,8,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,980,"        final double s12Prime   = s12High - prod2High;
",6,1,0,0,0,1,0,0,0,8,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,981,"        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);
",12,4,0,3,6,1,0,0,0,17,86,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,984,"        final double s123High   = s12High + prod3High;
",6,1,0,0,0,1,0,0,0,8,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,985,"        final double s123Prime  = s123High - prod3High;
",6,1,0,0,0,1,0,0,0,8,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,986,"        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);
",12,4,0,3,6,1,0,0,0,17,87,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,990,"        double result = s123High + (prod1Low + prod2Low + prod3Low + s12Low + s123Low);
",14,2,0,1,2,0,0,0,0,16,79,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,992,"        if (Double.isNaN(result)) {
",0,0,0,2,5,0,6,0,0,6,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,995,"            result = a1 * b1 + a2 * b2 + a3 * b3;
",14,5,0,0,0,0,0,0,0,20,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,998,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1045,"        final double ca1        = SPLIT_FACTOR * a1;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1046,"        final double a1High     = ca1 - (ca1 - a1);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1047,"        final double a1Low      = a1 - a1High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1048,"        final double cb1        = SPLIT_FACTOR * b1;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1049,"        final double b1High     = cb1 - (cb1 - b1);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1050,"        final double b1Low      = b1 - b1High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1053,"        final double prod1High  = a1 * b1;
",6,1,0,0,0,1,0,0,0,8,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1054,"        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1057,"        final double ca2        = SPLIT_FACTOR * a2;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1058,"        final double a2High     = ca2 - (ca2 - a2);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1059,"        final double a2Low      = a2 - a2High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1060,"        final double cb2        = SPLIT_FACTOR * b2;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1061,"        final double b2High     = cb2 - (cb2 - b2);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1062,"        final double b2Low      = b2 - b2High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1065,"        final double prod2High  = a2 * b2;
",6,1,0,0,0,1,0,0,0,8,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1066,"        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1069,"        final double ca3        = SPLIT_FACTOR * a3;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1070,"        final double a3High     = ca3 - (ca3 - a3);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1071,"        final double a3Low      = a3 - a3High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1072,"        final double cb3        = SPLIT_FACTOR * b3;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1073,"        final double b3High     = cb3 - (cb3 - b3);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1074,"        final double b3Low      = b3 - b3High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1077,"        final double prod3High  = a3 * b3;
",6,1,0,0,0,1,0,0,0,8,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1078,"        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1081,"        final double ca4        = SPLIT_FACTOR * a4;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1082,"        final double a4High     = ca4 - (ca4 - a4);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1083,"        final double a4Low      = a4 - a4High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1084,"        final double cb4        = SPLIT_FACTOR * b4;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1085,"        final double b4High     = cb4 - (cb4 - b4);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1086,"        final double b4Low      = b4 - b4High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1089,"        final double prod4High  = a4 * b4;
",6,1,0,0,0,1,0,0,0,8,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1090,"        final double prod4Low   = a4Low * b4Low - (((prod4High - a4High * b4High) - a4Low * b4High) - a4High * b4Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1093,"        final double s12High    = prod1High + prod2High;
",6,1,0,0,0,1,0,0,0,8,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1094,"        final double s12Prime   = s12High - prod2High;
",6,1,0,0,0,1,0,0,0,8,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1095,"        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);
",12,4,0,3,6,1,0,0,0,17,86,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1098,"        final double s123High   = s12High + prod3High;
",6,1,0,0,0,1,0,0,0,8,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1099,"        final double s123Prime  = s123High - prod3High;
",6,1,0,0,0,1,0,0,0,8,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1100,"        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);
",12,4,0,3,6,1,0,0,0,17,87,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1103,"        final double s1234High  = s123High + prod4High;
",6,1,0,0,0,1,0,0,0,8,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1104,"        final double s1234Prime = s1234High - prod4High;
",6,1,0,0,0,1,0,0,0,8,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1105,"        final double s1234Low   = (prod4High - (s1234High - s1234Prime)) + (s123High - s1234Prime);
",12,4,0,3,6,1,0,0,0,17,91,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1109,"        double result = s1234High + (prod1Low + prod2Low + prod3Low + prod4Low + s12Low + s123Low + s1234Low);
",18,2,0,1,2,0,0,0,0,20,102,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1111,"        if (Double.isNaN(result)) {
",0,0,0,2,5,0,6,0,0,6,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1114,"            result = a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4;
",18,7,0,0,0,0,0,0,0,26,47,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1117,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1131,"        if ((x == null) || (y == null)) {
",4,3,0,3,7,0,0,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1132,"            return !((x == null) ^ (y == null));
",4,3,0,3,6,1,0,0,0,8,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1134,"        if (x.length != y.length) {
",8,1,0,1,3,0,0,0,0,9,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1135,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1137,"        for (int i = 0; i < x.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1138,"            if (!Precision.equals(x[i], y[i])) {
",0,0,1,4,9,0,4,0,0,13,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1139,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1142,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1157,"        if ((x == null) || (y == null)) {
",4,3,0,3,7,0,0,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1158,"            return !((x == null) ^ (y == null));
",4,3,0,3,6,1,0,0,0,8,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1160,"        if (x.length != y.length) {
",8,1,0,1,3,0,0,0,0,9,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1161,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1163,"        for (int i = 0; i < x.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1164,"            if (!Precision.equalsIncludingNaN(x[i], y[i])) {
",0,0,1,4,9,0,4,0,0,13,48,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1165,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1168,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1182,"        if ((x == null) || (y == null)) {
",4,3,0,3,7,0,0,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1183,"            return !((x == null) ^ (y == null));
",4,3,0,3,6,1,0,0,0,8,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1185,"        if (x.length != y.length) {
",8,1,0,1,3,0,0,0,0,9,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1186,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1188,"        for (int i = 0; i < x.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1189,"            if (!Precision.equals(x[i], y[i])) {
",0,0,1,4,9,0,4,0,0,13,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1190,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1193,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1208,"        if ((x == null) || (y == null)) {
",4,3,0,3,7,0,0,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1209,"            return !((x == null) ^ (y == null));
",4,3,0,3,6,1,0,0,0,8,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1211,"        if (x.length != y.length) {
",8,1,0,1,3,0,0,0,0,9,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1212,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1214,"        for (int i = 0; i < x.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1215,"            if (!Precision.equalsIncludingNaN(x[i], y[i])) {
",0,0,1,4,9,0,4,0,0,13,48,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1216,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1219,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1246,"         if (Double.isInfinite(normalizedSum)) {
",0,0,0,2,5,0,6,0,0,6,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1247,"             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);
",4,0,0,1,2,0,0,2,0,6,76,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1249,"         if (Double.isNaN(normalizedSum)) {
",0,0,0,2,5,0,6,0,0,6,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1250,"             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);
",4,0,0,1,2,0,0,2,0,6,71,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1252,"         double sum = 0d;
",2,0,0,0,0,0,0,0,0,2,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1253,"         final int len = values.length;
",6,0,0,0,0,1,0,0,0,7,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1254,"         double[] out = new double[len];
",2,0,1,2,4,0,0,0,0,4,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1255,"         for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1256,"             if (Double.isInfinite(values[i])) {
",0,0,1,3,7,0,4,0,0,8,35,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1257,"                 throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);
",6,0,1,2,4,0,0,2,0,12,94,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1259,"             if (!Double.isNaN(values[i])) {
",0,0,1,3,7,0,4,0,0,9,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1260,"                 sum += values[i];
",2,0,1,1,2,0,0,0,0,7,17,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1263,"         if (sum == 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1264,"             throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);
",4,0,0,1,2,0,0,2,0,6,71,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1266,"         for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1267,"             if (Double.isNaN(values[i])) {
",0,0,1,3,7,0,4,0,0,8,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1268,"                 out[i] = Double.NaN;
",4,0,1,1,2,0,0,0,0,9,20,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1270,"                 out[i] = values[i] * normalizedSum / sum;
",4,2,1,2,4,0,0,0,0,15,41,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,1273,"         return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,11,37,"    public MathInternalError() {
",2,0,0,1,3,1,0,0,0,3,28,2,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,11,38,"        getContext().addMessage(LocalizedFormats.INTERNAL_ERROR, REPORT_URL);
",4,0,0,2,4,0,6,0,0,10,69,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,11,39,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,11,46,"        super(cause, LocalizedFormats.INTERNAL_ERROR, REPORT_URL);
",8,0,0,1,2,0,0,0,0,8,58,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,11,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,11,56,"        super(pattern, args);
",4,0,0,1,2,0,0,0,0,4,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,11,57,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,11,45,"                                     Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,11,46,"        context = new ExceptionContext(this);
",2,0,0,1,2,0,0,2,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,11,47,"        context.addMessage(pattern, args);
",0,0,0,1,2,0,8,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,11,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,11,60,"        super(cause);
",2,0,0,1,2,0,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,11,61,"        context = new ExceptionContext(this);
",2,0,0,1,2,0,0,2,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,11,62,"        context.addMessage(pattern, args);
",0,0,0,1,2,0,8,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,11,63,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,11,69,"        this(LocalizedFormats.ILLEGAL_STATE);
",4,0,0,1,2,0,0,0,0,4,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,11,70,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,11,74,"        return context;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,11,80,"        return context.getMessage();
",0,0,0,1,2,1,4,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,11,86,"        return context.getLocalizedMessage();
",0,0,0,1,2,1,4,0,0,4,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,11,41,"        this(LocalizedFormats.NULL_NOT_ALLOWED);
",4,0,0,1,2,0,0,0,0,4,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,11,42,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,11,50,"        super(pattern, arguments);
",4,0,0,1,2,0,0,0,0,4,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,11,51,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,11,37,"        super(value, 0, true);
",2,0,0,1,2,0,0,0,0,3,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,11,38,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,11,47,"        super(specific, value, 0, true);
",4,0,0,1,2,0,0,0,0,5,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,11,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,11,61,"        this(wrong, previous, index, MathArrays.OrderDirection.INCREASING, true);
",12,0,0,1,2,0,0,0,0,13,73,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,11,62,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,11,80,"        super(direction == MathArrays.OrderDirection.INCREASING ?
",8,1,0,0,1,0,0,0,0,9,57,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,11,89,"        this.direction = direction;
",4,0,0,0,0,0,0,0,0,5,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,11,90,"        this.strict = strict;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,11,91,"        this.index = index;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,11,92,"        this.previous = previous;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,11,93,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,11,99,"        return direction;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,11,105,"        return strict;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,11,113,"        return index;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,11,119,"        return previous;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,11,43,"    public MathArithmeticException() {
",2,0,0,1,3,1,0,0,0,3,34,2,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,11,44,"        context = new ExceptionContext(this);
",2,0,0,1,2,0,0,2,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,11,45,"        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);
",4,0,0,1,2,0,4,0,0,8,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,11,46,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,11,56,"                                   Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,11,57,"        context = new ExceptionContext(this);
",2,0,0,1,2,0,0,2,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,11,58,"        context.addMessage(pattern, args);
",0,0,0,1,2,0,8,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,11,59,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,11,63,"        return context;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,11,69,"        return context.getMessage();
",0,0,0,1,2,1,4,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,11,75,"        return context.getLocalizedMessage();
",0,0,0,1,2,1,4,0,0,4,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,257,"    public static enum OrderDirection {
",2,0,0,0,1,2,0,0,0,4,35,2,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,259,"        INCREASING,
",2,0,0,0,0,0,0,0,0,2,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,261,"        DECREASING
",2,0,0,0,0,0,0,0,0,2,10,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6134,"    private FastMathLiteralArrays() {}
",2,0,0,2,4,1,0,0,0,3,34,2,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,280,"            switch (dir) {
",2,0,0,1,3,0,0,0,0,2,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,83,"    private Precision() {}
",2,0,0,2,4,1,0,0,0,3,22,2,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,96,"        if (equals(x, y, eps)) {
",0,0,0,2,5,0,8,0,0,8,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,97,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,98,"        } else if (x < y) {
",4,1,0,1,4,0,0,0,0,5,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,99,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,101,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,122,"        if (equals(x, y, maxUlps)) {
",0,0,0,2,5,0,8,0,0,8,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,123,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,124,"        } else if (x < y) {
",4,1,0,1,4,0,0,0,0,5,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,125,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,127,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,139,"        return equals(x, y, 1);
",0,0,0,1,2,1,6,0,0,6,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,152,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, 1);
",0,2,0,4,8,1,18,0,0,20,61,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,166,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;
",6,3,0,2,4,1,10,0,0,19,53,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,181,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);
",6,3,0,3,6,1,10,0,0,19,64,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,203,"        int xInt = Float.floatToIntBits(x);
",2,0,0,1,2,0,6,0,0,8,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,204,"        int yInt = Float.floatToIntBits(y);
",2,0,0,1,2,0,6,0,0,8,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,207,"        if (xInt < 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,208,"            xInt = SGN_MASK_FLOAT - xInt;
",6,1,0,0,0,0,0,0,0,8,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,210,"        if (yInt < 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,211,"            yInt = SGN_MASK_FLOAT - yInt;
",6,1,0,0,0,0,0,0,0,8,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,214,"        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;
",8,2,0,1,2,1,4,0,0,15,61,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,216,"        return isEqual && !Float.isNaN(x) && !Float.isNaN(y);
",2,1,0,2,4,1,12,0,0,17,53,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,232,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, maxUlps);
",0,2,0,4,8,1,20,0,0,22,67,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,244,"        return equals(x, y, 1);
",0,0,0,1,2,1,6,0,0,6,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,257,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, 1);
",0,2,0,4,8,1,18,0,0,20,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,288,"        if (equals(x, y, 1)) {
",0,0,0,2,5,0,6,0,0,6,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,289,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,292,"        final double absoluteMax = FastMath.max(FastMath.abs(x), FastMath.abs(y));
",2,0,0,3,6,1,16,0,0,19,74,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,293,"        final double relativeDifference = FastMath.abs((x - y) / absoluteMax);
",8,2,0,2,4,1,4,0,0,15,70,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,295,"        return relativeDifference <= eps;
",4,1,0,0,0,1,0,0,0,5,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,310,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);
",6,3,0,3,6,1,10,0,0,19,64,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,336,"            xInt = SGN_MASK - xInt;
",6,1,0,0,0,0,0,0,0,8,23,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,339,"            yInt = SGN_MASK - yInt;
",6,1,0,0,0,0,0,0,0,8,23,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,360,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, maxUlps);
",0,2,0,4,8,1,20,0,0,22,69,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,373,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);
",4,0,0,1,2,1,6,0,0,10,49,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,395,"            return (new BigDecimal
",0,0,0,0,1,1,0,2,0,2,22,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,399,"        } catch (NumberFormatException ex) {
",2,0,0,1,4,0,0,2,0,4,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,400,"            if (Double.isInfinite(x)) {
",0,0,0,2,5,0,6,0,0,6,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,401,"                return x;
",2,0,0,0,0,1,0,0,0,2,9,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,403,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,418,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);
",4,0,0,1,2,1,6,0,0,10,49,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,436,"        final float sign = FastMath.copySign(1f, x);
",2,0,0,1,2,1,6,0,0,9,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,437,"        final float factor = (float) FastMath.pow(10.0f, scale) * sign;
",4,1,0,2,4,1,6,0,0,12,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,438,"        return (float) roundUnscaled(x * factor, sign, roundingMethod) / factor;
",6,2,0,2,4,1,6,0,0,14,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,458,"        switch (roundingMethod) {
",2,0,0,1,3,0,0,0,0,2,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,460,"            if (sign == -1) {
",2,1,0,1,3,0,0,0,0,4,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,461,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));
",6,0,0,2,4,0,10,0,0,17,82,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,463,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));
",6,0,0,2,4,0,10,0,0,17,81,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,465,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,467,"            unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));
",6,0,0,2,4,0,10,0,0,17,82,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,468,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,470,"            if (sign == -1) {
",2,1,0,1,3,0,0,0,0,4,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,471,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));
",6,0,0,2,4,0,10,0,0,17,81,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,473,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));
",6,0,0,2,4,0,10,0,0,17,82,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,475,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,477,"            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);
",6,0,0,1,2,0,6,0,0,13,66,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,478,"            double fraction = unscaled - FastMath.floor(unscaled);
",4,1,0,1,2,0,6,0,0,11,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,479,"            if (fraction > 0.5) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,480,"                unscaled = FastMath.ceil(unscaled);
",2,0,0,1,2,0,6,0,0,9,35,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,482,"                unscaled = FastMath.floor(unscaled);
",2,0,0,1,2,0,6,0,0,9,36,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,484,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,487,"            double fraction = unscaled - FastMath.floor(unscaled);
",4,1,0,1,2,0,6,0,0,11,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,488,"            if (fraction > 0.5) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,489,"                unscaled = FastMath.ceil(unscaled);
",2,0,0,1,2,0,6,0,0,9,35,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,490,"            } else if (fraction < 0.5) {
",2,1,0,1,4,0,0,0,0,3,28,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,491,"                unscaled = FastMath.floor(unscaled);
",2,0,0,1,2,0,6,0,0,9,36,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,494,"                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math
",0,3,0,1,4,0,12,0,0,15,57,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,496,"                    unscaled = FastMath.floor(unscaled);
",2,0,0,1,2,0,6,0,0,9,36,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,498,"                    unscaled = FastMath.ceil(unscaled);
",2,0,0,1,2,0,6,0,0,9,35,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,501,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,504,"            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);
",6,0,0,1,2,0,6,0,0,13,66,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,505,"            double fraction = unscaled - FastMath.floor(unscaled);
",4,1,0,1,2,0,6,0,0,11,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,506,"            if (fraction >= 0.5) {
",2,1,0,1,3,0,0,0,0,3,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,507,"                unscaled = FastMath.ceil(unscaled);
",2,0,0,1,2,0,6,0,0,9,35,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,509,"                unscaled = FastMath.floor(unscaled);
",2,0,0,1,2,0,6,0,0,9,36,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,511,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,514,"            if (unscaled != FastMath.floor(unscaled)) {
",2,1,0,2,5,0,6,0,0,9,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,515,"                throw new MathArithmeticException();
",0,0,0,1,2,0,0,2,0,2,36,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,519,"            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));
",6,0,0,2,4,0,10,0,0,17,82,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,520,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,522,"            throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,
",4,0,0,0,1,0,0,2,0,6,80,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,533,"        return unscaled;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,11,553,"        return x + originalDelta - x;
",6,2,0,0,0,1,0,0,0,8,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3808,"        CodyWaite(double xa) {
",4,0,0,1,3,0,0,0,0,4,22,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3811,"            int k = (int)(xa * 0.6366197723675814);
",4,1,0,2,4,0,0,0,0,5,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3817,"                double a = -k * 1.570796251296997;
",4,1,0,0,0,0,0,0,0,6,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3818,"                remA = xa + a;
",6,1,0,0,0,0,0,0,0,8,14,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3819,"                remB = -(remA - xa - a);
",8,1,0,1,2,0,0,0,0,11,24,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3821,"                a = -k * 7.549789948768648E-8;
",4,1,0,0,0,0,0,0,0,7,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3822,"                double b = remA;
",4,0,0,0,0,0,0,0,0,4,16,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3823,"                remA = a + b;
",6,1,0,0,0,0,0,0,0,8,13,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3824,"                remB += -(remA - b - a);
",8,1,0,1,2,0,0,0,0,11,24,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3826,"                a = -k * 6.123233995736766E-17;
",4,1,0,0,0,0,0,0,0,7,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3827,"                b = remA;
",4,0,0,0,0,0,0,0,0,5,9,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3828,"                remA = a + b;
",6,1,0,0,0,0,0,0,0,8,13,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3829,"                remB += -(remA - b - a);
",8,1,0,1,2,0,0,0,0,11,24,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3831,"                if (remA > 0) {
",2,1,0,1,3,0,0,0,0,3,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3832,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3838,"                --k;
",2,0,0,0,0,0,0,0,0,3,4,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3839,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3841,"            this.finalK = k;
",4,0,0,0,0,0,0,0,0,5,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3842,"            this.finalRemA = remA;
",4,0,0,0,0,0,0,0,0,5,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3843,"            this.finalRemB = remB;
",4,0,0,0,0,0,0,0,0,5,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3844,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3850,"            return finalK;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3856,"            return finalRemA;
",2,0,0,0,0,1,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3862,"            return finalRemB;
",2,0,0,0,0,1,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,11,47,"    private MathUtils() {}
",2,0,0,2,4,1,0,0,0,3,22,2,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,11,57,"        return new Double(value).hashCode();
",2,0,0,2,4,1,2,2,0,6,36,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,11,68,"        return Arrays.hashCode(value);
",0,0,0,1,2,1,6,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,11,91,"         return a - TWO_PI * FastMath.floor((a + FastMath.PI - center) / TWO_PI);
",14,5,0,2,4,1,4,0,0,23,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,11,113,"        final double p = FastMath.abs(period);
",2,0,0,1,2,1,6,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,11,114,"        return a - p * FastMath.floor((a - offset) / p) - offset;
",12,5,0,2,4,1,4,0,0,21,57,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,11,129,"        if ((magnitude >= 0 && sign >= 0) ||
",4,4,0,1,3,0,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,11,131,"            return magnitude;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,11,132,"        } else if (sign >= 0 &&
",2,2,0,0,2,0,0,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,11,134,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);
",4,0,0,1,2,0,0,2,0,6,61,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,11,136,"            return (byte) -magnitude; // Flip sign.
",2,0,0,1,2,1,0,0,0,3,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,11,152,"        if ((magnitude >= 0 && sign >= 0) ||
",4,4,0,1,3,0,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,11,154,"            return magnitude;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,11,155,"        } else if (sign >= 0 &&
",2,2,0,0,2,0,0,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,11,157,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);
",4,0,0,1,2,0,0,2,0,6,61,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,11,159,"            return (short) -magnitude; // Flip sign.
",2,0,0,1,2,1,0,0,0,3,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,11,175,"        if ((magnitude >= 0 && sign >= 0) ||
",4,4,0,1,3,0,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,11,177,"            return magnitude;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,11,178,"        } else if (sign >= 0 &&
",2,2,0,0,2,0,0,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,11,180,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);
",4,0,0,1,2,0,0,2,0,6,61,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,11,182,"            return -magnitude; // Flip sign.
",2,0,0,0,0,1,0,0,0,3,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,11,198,"        if ((magnitude >= 0 && sign >= 0) ||
",4,4,0,1,3,0,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,11,200,"            return magnitude;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,11,201,"        } else if (sign >= 0 &&
",2,2,0,0,2,0,0,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,11,203,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);
",4,0,0,1,2,0,0,2,0,6,61,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,11,205,"            return -magnitude; // Flip sign.
",2,0,0,0,0,1,0,0,0,3,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,11,217,"        if (Double.isInfinite(x) || Double.isNaN(x)) {
",0,1,0,3,7,0,12,0,0,13,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,11,218,"            throw new NotFiniteNumberException(x);
",2,0,0,1,2,0,0,2,0,4,38,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,11,220,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,11,231,"        for (int i = 0; i < val.length; i++) {
",10,1,0,1,3,0,0,0,0,12,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,11,232,"            final double x = val[i];
",2,0,1,1,2,1,0,0,0,7,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,11,233,"            if (Double.isInfinite(x) || Double.isNaN(x)) {
",0,1,0,3,7,0,12,0,0,13,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,11,234,"                throw new NotFiniteNumberException(LocalizedFormats.ARRAY_ELEMENT, x, i);
",8,0,0,1,2,0,0,2,0,10,73,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,11,237,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,11,251,"        if (o == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,11,252,"            throw new NullArgumentException(pattern, args);
",4,0,0,1,2,0,0,2,0,6,47,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,11,254,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,11,265,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotFiniteNumberException,11,40,"        this(LocalizedFormats.NOT_FINITE_NUMBER, wrong, args);
",8,0,0,1,2,0,0,0,0,8,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotFiniteNumberException,11,41,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotFiniteNumberException,11,53,"        super(specific, wrong, args);
",6,0,0,1,2,0,0,0,0,6,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotFiniteNumberException,11,54,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,34,"    private CompositeFormat() {}
",2,0,0,2,4,1,0,0,0,3,28,2,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,68,"        parseNextCharacter(source, pos);
",0,0,0,1,2,0,6,0,0,6,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,69,"        pos.setIndex(pos.getIndex() - 1);
",0,1,0,2,4,0,8,0,0,9,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,70,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,81,"         int index = pos.getIndex();
",2,0,0,1,2,0,4,0,0,6,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,82,"         final int n = source.length();
",2,0,0,1,2,1,4,0,0,7,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,83,"         char ret = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,85,"         if (index < n) {
",4,1,0,1,3,0,0,0,0,5,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,88,"                 c = source.charAt(index++);
",4,0,0,1,2,0,4,0,0,10,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,89,"             } while (Character.isWhitespace(c) && index < n);
",4,2,0,2,5,0,6,0,0,12,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,90,"             pos.setIndex(index);
",0,0,0,1,2,0,6,0,0,6,20,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,92,"             if (index < n) {
",4,1,0,1,3,0,0,0,0,5,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,93,"                 ret = c;
",4,0,0,0,0,0,0,0,0,5,8,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,97,"         return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,111,"        Number ret = null;
",2,0,0,0,0,0,0,2,0,4,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,113,"        StringBuilder sb = new StringBuilder();
",2,0,0,1,2,0,0,4,0,6,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,114,"        sb.append('(');
",0,0,0,1,3,0,4,0,0,5,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,115,"        sb.append(value);
",0,0,0,1,2,0,6,0,0,6,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,116,"        sb.append(')');
",0,0,0,1,3,0,4,0,0,5,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,118,"        final int n = sb.length();
",2,0,0,1,2,1,4,0,0,7,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,119,"        final int startIndex = pos.getIndex();
",2,0,0,1,2,1,4,0,0,7,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,120,"        final int endIndex = startIndex + n;
",6,1,0,0,0,1,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,121,"        if (endIndex < source.length()) {
",2,1,0,2,5,0,4,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,122,"            if (source.substring(startIndex, endIndex).compareTo(sb.toString()) == 0) {
",0,1,0,4,9,0,14,0,0,15,75,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,123,"                ret = Double.valueOf(value);
",2,0,0,1,2,0,6,0,0,9,28,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,124,"                pos.setIndex(endIndex);
",0,0,0,1,2,0,6,0,0,6,23,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,128,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,143,"        final int startIndex = pos.getIndex();
",2,0,0,1,2,1,4,0,0,7,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,144,"        Number number = format.parse(source, pos);
",2,0,0,1,2,0,8,2,0,12,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,145,"        final int endIndex = pos.getIndex();
",2,0,0,1,2,1,4,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,148,"        if (startIndex == endIndex) {
",4,1,0,1,3,0,0,0,0,5,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,150,"            final double[] special = {
",2,0,0,1,3,1,0,0,0,3,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,153,"            for (int i = 0; i < special.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,154,"                number = parseNumber(source, special[i], pos);
",2,0,1,2,4,0,6,0,0,13,46,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,155,"                if (number != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,156,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,161,"        return number;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,175,"        final int startIndex = pos.getIndex();
",2,0,0,1,2,1,4,0,0,7,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,176,"        final int endIndex = startIndex + expected.length();
",4,1,0,1,2,1,4,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,177,"        if ((startIndex >= source.length()) ||
",2,2,0,2,5,0,4,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,181,"            pos.setIndex(startIndex);
",0,0,0,1,2,0,6,0,0,6,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,182,"            pos.setErrorIndex(startIndex);
",0,0,0,1,2,0,6,0,0,6,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,183,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,187,"        pos.setIndex(endIndex);
",0,0,0,1,2,0,6,0,0,6,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,188,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,211,"        if( Double.isNaN(value) || Double.isInfinite(value) ) {
",0,1,0,3,7,0,12,0,0,13,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,212,"            toAppendTo.append('(');
",0,0,0,1,3,0,4,0,0,5,23,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,213,"            toAppendTo.append(value);
",0,0,0,1,2,0,6,0,0,6,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,214,"            toAppendTo.append(')');
",0,0,0,1,3,0,4,0,0,5,23,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,216,"            format.format(value, toAppendTo, pos);
",0,0,0,1,2,0,10,0,0,10,38,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,218,"        return toAppendTo;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,671,"            = new Comparator<Pair<Double, double[]>>() {
",0,0,0,2,5,0,0,6,0,6,44,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,675,"                switch (dir) {
",2,0,0,1,3,0,0,0,0,2,14,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,677,"                    val = o1.getKey().compareTo(o2.getKey());
",2,0,0,3,6,0,10,0,0,13,41,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,678,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,680,"                    val = o2.getKey().compareTo(o1.getKey());
",2,0,0,3,6,0,10,0,0,13,41,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,681,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,684,"                    throw new MathInternalError();
",0,0,0,1,2,0,0,2,0,2,30,13,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,686,"                return val;
",2,0,0,0,0,1,0,0,0,2,11,10,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,66,"        return next(1) != 0;
",0,1,0,1,2,1,2,0,0,3,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,71,"        int i = 0;
",2,0,0,0,0,0,0,0,0,2,10,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,72,"        final int iEnd = bytes.length - 3;
",6,1,0,0,0,1,0,0,0,8,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,73,"        while (i < iEnd) {
",4,1,0,1,3,0,0,0,0,5,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,74,"            final int random = next(32);
",2,0,0,1,2,1,2,0,0,5,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,75,"            bytes[i]     = (byte) (random & 0xff);
",2,1,1,3,6,0,0,0,0,8,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,76,"            bytes[i + 1] = (byte) ((random >>  8) & 0xff);
",4,3,1,4,8,0,0,0,0,10,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,77,"            bytes[i + 2] = (byte) ((random >> 16) & 0xff);
",4,3,1,4,8,0,0,0,0,10,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,78,"            bytes[i + 3] = (byte) ((random >> 24) & 0xff);
",4,3,1,4,8,0,0,0,0,10,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,79,"            i += 4;
",2,0,0,0,0,0,0,0,0,3,7,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,80,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,81,"        int random = next(32);
",2,0,0,1,2,0,2,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,82,"        while (i < bytes.length) {
",6,1,0,1,3,0,0,0,0,7,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,83,"            bytes[i++] = (byte) (random & 0xff);
",4,1,1,3,6,0,0,0,0,9,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,84,"            random     = random >> 8;
",4,1,0,0,0,0,0,0,0,6,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,86,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,90,"        final long high = ((long) next(26)) << 26;
",2,1,0,3,6,1,2,0,0,6,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,91,"        final int  low  = next(26);
",2,0,0,1,2,1,2,0,0,5,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,92,"        return (high | low) * 0x1.0p-52d;
",4,2,0,1,2,1,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,97,"        return next(23) * 0x1.0p-23f;
",0,1,0,1,2,1,2,0,0,3,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,104,"        if (Double.isNaN(nextGaussian)) {
",0,0,0,2,5,0,6,0,0,6,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,106,"            final double x = nextDouble();
",2,0,0,1,2,1,2,0,0,5,30,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,107,"            final double y = nextDouble();
",2,0,0,1,2,1,2,0,0,5,30,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,108,"            final double alpha = 2 * FastMath.PI * x;
",8,1,0,0,0,1,0,0,0,10,41,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,109,"            final double r      = FastMath.sqrt(-2 * FastMath.log(y));
",2,1,0,2,4,1,10,0,0,15,58,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,110,"            random       = r * FastMath.cos(alpha);
",4,1,0,1,2,0,6,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,111,"            nextGaussian = r * FastMath.sin(alpha);
",4,1,0,1,2,0,6,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,112,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,114,"            random = nextGaussian;
",4,0,0,0,0,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,115,"            nextGaussian = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,118,"        return random;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,124,"        return next(32);
",0,0,0,1,2,1,2,0,0,2,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,143,"        if (n > 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,144,"            if ((n & -n) == n) {
",6,2,0,2,5,0,0,0,0,9,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,145,"                return (int) ((n * (long) next(31)) >> 31);
",2,2,0,5,10,1,2,0,0,6,43,10,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,150,"                bits = next(31);
",2,0,0,1,2,0,2,0,0,5,16,8,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,151,"                val = bits % n;
",6,1,0,0,0,0,0,0,0,8,15,8,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,152,"            } while (bits - val + (n - 1) < 0);
",6,4,0,2,5,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,153,"            return val;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,155,"        throw new NotStrictlyPositiveException(n);
",2,0,0,1,2,0,0,2,0,4,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,160,"        final long high  = ((long) next(32)) << 32;
",2,1,0,3,6,1,2,0,0,6,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,161,"        final long  low  = ((long) next(32)) & 0xffffffffL;
",2,1,0,3,6,1,2,0,0,6,51,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,162,"        return high | low;
",4,1,0,0,0,1,0,0,0,5,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,83,"        this(k, m1, m2, m3, new int[] { seed });
",10,0,0,3,6,0,0,0,0,10,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,84,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,132,"        this(k, m1, m2, m3, new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });
",12,2,0,7,14,0,0,0,0,14,83,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,133,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,142,"        setSeed(new int[] { seed });
",2,0,0,3,6,0,2,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,143,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,11,114,"    public RandomDataImpl() {
",2,0,0,1,3,1,0,0,0,3,25,2,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,11,115,"        delegate = new RandomDataGenerator();
",2,0,0,1,2,0,0,2,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,11,116,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,11,126,"    public RandomDataImpl(RandomGenerator rand) {
",4,0,0,1,3,1,0,2,0,7,45,2,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,11,127,"        delegate = new RandomDataGenerator(rand);
",4,0,0,1,2,0,0,2,0,7,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,11,128,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,11,136,"        return delegate;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,11,156,"        return delegate.nextHexString(len);
",0,0,0,1,2,1,6,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,11,161,"       return delegate.nextInt(lower, upper);
",0,0,0,1,2,1,8,0,0,8,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,11,166,"        return delegate.nextLong(lower, upper);
",0,0,0,1,2,1,8,0,0,8,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,11,186,"        return delegate.nextSecureHexString(len);
",0,0,0,1,2,1,6,0,0,6,41,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,11,191,"        return delegate.nextSecureInt(lower, upper);
",0,0,0,1,2,1,8,0,0,8,44,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,11,196,"        return delegate.nextSecureLong(lower,upper);
",0,0,0,1,2,1,8,0,0,8,44,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,11,213,"        return delegate.nextPoisson(mean);
",0,0,0,1,2,1,6,0,0,6,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,11,218,"        return delegate.nextGaussian(mu,sigma);
",0,0,0,1,2,1,8,0,0,8,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,11,233,"        return delegate.nextExponential(mean);
",0,0,0,1,2,1,6,0,0,6,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,11,248,"        return delegate.nextUniform(lower, upper);
",0,0,0,1,2,1,8,0,0,8,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,11,265,"        return delegate.nextUniform(lower, upper, lowerInclusive);
",0,0,0,1,2,1,10,0,0,10,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,11,279,"        return delegate.nextBeta(alpha, beta);
",0,0,0,1,2,1,8,0,0,8,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,11,293,"        return delegate.nextBinomial(numberOfTrials, probabilityOfSuccess);
",0,0,0,1,2,1,8,0,0,8,67,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,11,307,"        return delegate.nextCauchy(median, scale);
",0,0,0,1,2,1,8,0,0,8,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,11,320,"       return delegate.nextChiSquare(df);
",0,0,0,1,2,1,6,0,0,6,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,11,336,"        return delegate.nextF(numeratorDf, denominatorDf);
",0,0,0,1,2,1,8,0,0,8,50,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,11,363,"        return delegate.nextGamma(shape, scale);
",0,0,0,1,2,1,8,0,0,8,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,11,383,"        return delegate.nextHypergeometric(populationSize, numberOfSuccesses, sampleSize);
",0,0,0,1,2,1,10,0,0,10,82,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,11,401,"        return delegate.nextPascal(r, p);
",0,0,0,1,2,1,8,0,0,8,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,11,415,"        return delegate.nextT(df);
",0,0,0,1,2,1,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,11,431,"        return delegate.nextWeibull(shape, scale);
",0,0,0,1,2,1,8,0,0,8,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,11,447,"        return delegate.nextZipf(numberOfElements, exponent);
",0,0,0,1,2,1,8,0,0,8,53,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,11,461,"        delegate.reSeed(seed);
",0,0,0,1,2,0,6,0,0,6,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,11,462,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,11,472,"        delegate.reSeedSecure();
",0,0,0,1,2,0,4,0,0,4,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,11,473,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,11,485,"        delegate.reSeedSecure(seed);
",0,0,0,1,2,0,6,0,0,6,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,11,486,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,11,493,"        delegate.reSeed();
",0,0,0,1,2,0,4,0,0,4,18,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,11,494,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,11,518,"       delegate.setSecureAlgorithm(algorithm, provider);
",0,0,0,1,2,0,8,0,0,8,49,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,11,519,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,11,532,"        return delegate.nextPermutation(n, k);
",0,0,0,1,2,1,8,0,0,8,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,11,550,"        return delegate.nextSample(c, k);
",0,0,0,1,2,1,8,0,0,8,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,11,565,"        return distribution.inverseCumulativeProbability(nextUniform(0, 1));
",0,0,0,2,4,1,6,0,0,6,68,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,11,581,"        return distribution.inverseCumulativeProbability(nextUniform(0, 1));
",0,0,0,2,4,1,6,0,0,6,68,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotANumberException,11,35,"        super(LocalizedFormats.NAN_NOT_ALLOWED, Double.NaN);
",8,0,0,1,2,0,0,0,0,8,52,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotANumberException,11,36,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,131,"    public RandomDataGenerator() {
",2,0,0,1,3,1,0,0,0,3,30,2,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,118,"    private RandomGenerator rand = null;
",2,0,0,0,0,1,0,2,0,5,36,2,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,121,"    private SecureRandom secRand = null;
",2,0,0,0,0,1,0,2,0,5,36,2,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,132,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,141,"    public RandomDataGenerator(RandomGenerator rand) {
",4,0,0,1,3,1,0,2,0,7,50,2,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,142,"        this.rand = rand;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,143,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,162,"        if (len <= 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,163,"            throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);
",6,0,0,1,2,0,0,2,0,8,69,7,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,167,"        RandomGenerator ran = getRan();
",2,0,0,1,2,0,2,2,0,6,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,170,"        StringBuilder outBuffer = new StringBuilder();
",2,0,0,1,2,0,0,4,0,6,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,173,"        byte[] randomBytes = new byte[(len / 2) + 1];
",4,2,0,3,6,0,0,0,0,6,45,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,174,"        ran.nextBytes(randomBytes);
",0,0,0,1,2,0,6,0,0,6,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,177,"        for (int i = 0; i < randomBytes.length; i++) {
",10,1,0,1,3,0,0,0,0,12,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,178,"            Integer c = Integer.valueOf(randomBytes[i]);
",2,0,1,2,4,0,4,2,0,12,44,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,185,"            String hex = Integer.toHexString(c.intValue() + 128);
",2,1,0,2,4,0,8,2,0,13,53,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,188,"            if (hex.length() == 1) {
",0,1,0,2,5,0,4,0,0,5,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,189,"                hex = ""0"" + hex;
",4,1,0,0,0,0,0,0,0,7,16,8,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,191,"            outBuffer.append(hex);
",0,0,0,1,2,0,6,0,0,6,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,193,"        return outBuffer.toString().substring(0, len);
",0,0,0,2,4,1,8,0,0,8,46,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,198,"        if (lower >= upper) {
",4,1,0,1,3,0,0,0,0,5,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,199,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,
",4,0,0,0,1,0,0,2,0,6,87,7,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,202,"        double r = getRan().nextDouble();
",2,0,0,2,4,0,4,0,0,6,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,203,"        double scaled = r * upper + (1.0 - r) * lower + r;
",12,5,0,1,2,0,0,0,0,17,50,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,204,"        return (int) FastMath.floor(scaled);
",0,0,0,2,4,1,6,0,0,6,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,209,"        if (lower >= upper) {
",4,1,0,1,3,0,0,0,0,5,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,210,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,
",4,0,0,0,1,0,0,2,0,6,87,7,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,213,"        double r = getRan().nextDouble();
",2,0,0,2,4,0,4,0,0,6,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,214,"        double scaled = r * upper + (1.0 - r) * lower + r;
",12,5,0,1,2,0,0,0,0,17,50,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,215,"        return (long)FastMath.floor(scaled);
",0,0,0,2,4,1,6,0,0,6,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,236,"        if (len <= 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,237,"            throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);
",6,0,0,1,2,0,0,2,0,8,69,7,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,241,"        SecureRandom secRan = getSecRan();
",2,0,0,1,2,0,2,2,0,6,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,242,"        MessageDigest alg = null;
",2,0,0,0,0,0,0,2,0,4,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,244,"            alg = MessageDigest.getInstance(""SHA-1"");
",2,0,0,1,2,0,4,0,0,8,41,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,248,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,245,"        } catch (NoSuchAlgorithmException ex) {
",2,0,0,1,4,0,0,2,0,4,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,247,"            throw new MathInternalError(ex);
",2,0,0,1,2,0,0,2,0,4,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,249,"        alg.reset();
",0,0,0,1,2,0,4,0,0,4,12,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,252,"        int numIter = (len / 40) + 1;
",4,2,0,1,2,0,0,0,0,6,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,254,"        StringBuilder outBuffer = new StringBuilder();
",2,0,0,1,2,0,0,4,0,6,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,255,"        for (int iter = 1; iter < numIter + 1; iter++) {
",8,2,0,1,3,0,0,0,0,11,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,256,"            byte[] randomBytes = new byte[40];
",2,0,0,2,4,0,0,0,0,2,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,257,"            secRan.nextBytes(randomBytes);
",0,0,0,1,2,0,6,0,0,6,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,258,"            alg.update(randomBytes);
",0,0,0,1,2,0,6,0,0,6,24,7,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,261,"            byte[] hash = alg.digest();
",2,0,0,2,4,0,4,0,0,6,27,7,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,264,"            for (int i = 0; i < hash.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,265,"                Integer c = Integer.valueOf(hash[i]);
",2,0,1,2,4,0,4,2,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,272,"                String hex = Integer.toHexString(c.intValue() + 128);
",2,1,0,2,4,0,8,2,0,13,53,8,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,275,"                if (hex.length() == 1) {
",0,1,0,2,5,0,4,0,0,5,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,276,"                    hex = ""0"" + hex;
",4,1,0,0,0,0,0,0,0,7,16,10,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,278,"                outBuffer.append(hex);
",0,0,0,1,2,0,6,0,0,6,22,9,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,281,"        return outBuffer.toString().substring(0, len);
",0,0,0,2,4,1,8,0,0,8,46,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,286,"        if (lower >= upper) {
",4,1,0,1,3,0,0,0,0,5,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,287,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,
",4,0,0,0,1,0,0,2,0,6,87,7,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,290,"        SecureRandom sec = getSecRan();
",2,0,0,1,2,0,2,2,0,6,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,291,"        final double r = sec.nextDouble();
",2,0,0,1,2,1,4,0,0,7,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,292,"        final double scaled = r * upper + (1.0 - r) * lower + r;
",12,5,0,1,2,1,0,0,0,18,56,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,293,"        return (int)FastMath.floor(scaled);
",0,0,0,2,4,1,6,0,0,6,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,298,"        if (lower >= upper) {
",4,1,0,1,3,0,0,0,0,5,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,299,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,
",4,0,0,0,1,0,0,2,0,6,87,7,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,302,"        SecureRandom sec = getSecRan();
",2,0,0,1,2,0,2,2,0,6,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,303,"        final double r = sec.nextDouble();
",2,0,0,1,2,1,4,0,0,7,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,304,"        final double scaled = r * upper + (1.0 - r) * lower + r;
",12,5,0,1,2,1,0,0,0,18,56,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,305,"        return (long)FastMath.floor(scaled);
",0,0,0,2,4,1,6,0,0,6,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,323,"        return new PoissonDistribution(getRan(), mean,
",2,0,0,1,3,1,2,2,0,6,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,330,"        if (sigma <= 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,331,"            throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sigma);
",6,0,0,1,2,0,0,2,0,8,83,7,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,333,"        return sigma * getRan().nextGaussian() + mu;
",4,2,0,2,4,1,4,0,0,10,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,348,"        return new ExponentialDistribution(getRan(), mean,
",2,0,0,1,3,1,2,2,0,6,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,375,"        return new GammaDistribution(getRan(),shape, scale,
",4,0,0,1,3,1,2,2,0,8,51,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,392,"        return new HypergeometricDistribution(getRan(),populationSize,
",2,0,0,1,3,1,2,2,0,6,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,407,"        return new PascalDistribution(getRan(), r, p).sample();
",4,0,0,3,6,1,4,2,0,10,55,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,418,"        return new TDistribution(getRan(), df,
",2,0,0,1,3,1,2,2,0,6,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,432,"        return new WeibullDistribution(getRan(), shape, scale,
",4,0,0,1,3,1,2,2,0,8,54,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,446,"        return new ZipfDistribution(getRan(), numberOfElements, exponent).sample();
",4,0,0,3,6,1,4,2,0,10,75,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,457,"        return new BetaDistribution(getRan(), alpha, beta,
",4,0,0,1,3,1,2,2,0,8,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,469,"        return new BinomialDistribution(getRan(), numberOfTrials, probabilityOfSuccess).sample();
",4,0,0,3,6,1,4,2,0,10,89,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,480,"        return new CauchyDistribution(getRan(), median, scale,
",4,0,0,1,3,1,2,2,0,8,54,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,491,"        return new ChiSquaredDistribution(getRan(), df,
",2,0,0,1,3,1,2,2,0,6,47,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,505,"        return new FDistribution(getRan(), numeratorDf, denominatorDf,
",4,0,0,1,3,1,2,2,0,8,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,524,"        return nextUniform(lower, upper, false);
",0,0,0,1,2,1,6,0,0,7,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,545,"        if (lower >= upper) {
",4,1,0,1,3,0,0,0,0,5,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,546,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,
",4,0,0,0,1,0,0,2,0,6,87,7,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,550,"        if (Double.isInfinite(lower)) {
",0,0,0,2,5,0,6,0,0,6,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,551,"            throw new NotFiniteNumberException(LocalizedFormats.INFINITE_BOUND, lower);
",6,0,0,1,2,0,0,2,0,8,75,7,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,553,"        if (Double.isInfinite(upper)) {
",0,0,0,2,5,0,6,0,0,6,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,554,"            throw new NotFiniteNumberException(LocalizedFormats.INFINITE_BOUND, upper);
",6,0,0,1,2,0,0,2,0,8,75,7,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,557,"        if (Double.isNaN(lower) || Double.isNaN(upper)) {
",0,1,0,3,7,0,12,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,558,"            throw new NotANumberException();
",0,0,0,1,2,0,0,2,0,2,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,561,"        final RandomGenerator generator = getRan();
",2,0,0,1,2,1,2,2,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,564,"        double u = generator.nextDouble();
",2,0,0,1,2,0,4,0,0,6,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,565,"        while (!lowerInclusive && u <= 0.0) {
",4,2,0,1,3,0,0,0,0,7,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,566,"            u = generator.nextDouble();
",2,0,0,1,2,0,4,0,0,7,27,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,569,"        return u * upper + (1.0 - u) * lower;
",8,4,0,1,2,1,0,0,0,12,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,585,"        if (k > n) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,586,"            throw new NumberIsTooLargeException(LocalizedFormats.PERMUTATION_EXCEEDS_N,
",4,0,0,0,1,0,0,2,0,6,75,7,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,589,"        if (k <= 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,590,"            throw new NotStrictlyPositiveException(LocalizedFormats.PERMUTATION_SIZE,
",4,0,0,0,1,0,0,2,0,6,73,7,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,594,"        int[] index = getNatural(n);
",2,0,0,2,4,0,4,0,0,6,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,595,"        shuffle(index, n - k);
",4,1,0,1,2,0,4,0,0,9,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,596,"        int[] result = new int[k];
",2,0,1,2,4,0,0,0,0,4,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,597,"        for (int i = 0; i < k; i++) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,598,"            result[i] = index[n - i - 1];
",4,1,1,2,4,0,0,0,0,12,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,601,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,619,"        int len = c.size();
",2,0,0,1,2,0,4,0,0,6,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,620,"        if (k > len) {
",4,1,0,1,3,0,0,0,0,5,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,621,"            throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE,
",4,0,0,0,1,0,0,2,0,6,89,7,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,624,"        if (k <= 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,625,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, k);
",6,0,0,1,2,0,0,2,0,8,78,7,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,628,"        Object[] objects = c.toArray();
",2,0,0,2,4,0,4,2,0,8,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,629,"        int[] index = nextPermutation(len, k);
",2,0,0,2,4,0,6,0,0,8,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,630,"        Object[] result = new Object[k];
",2,0,1,2,4,0,0,4,0,8,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,631,"        for (int i = 0; i < k; i++) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,632,"            result[i] = objects[index[i]];
",0,0,1,3,6,0,0,0,0,11,30,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,634,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,648,"       getRan().setSeed(seed);
",0,0,0,2,4,0,6,0,0,6,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,649,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,659,"        getSecRan().setSeed(System.currentTimeMillis());
",0,0,0,3,6,0,8,0,0,8,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,660,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,671,"        getSecRan().setSeed(seed);
",0,0,0,2,4,0,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,672,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,679,"        getRan().setSeed(System.currentTimeMillis() + System.identityHashCode(this));
",0,1,0,4,8,0,12,0,0,13,77,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,680,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,700,"        secRand = SecureRandom.getInstance(algorithm, provider);
",2,0,0,1,2,0,8,0,0,11,56,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,701,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,714,"        if (rand == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,715,"            initRan();
",0,0,0,1,2,0,2,0,0,2,10,7,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,717,"        return rand;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,725,"        rand = new Well19937c(System.currentTimeMillis() + System.identityHashCode(this));
",2,1,0,3,6,0,8,2,0,14,82,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,726,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,738,"        if (secRand == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,739,"            secRand = new SecureRandom();
",2,0,0,1,2,0,0,2,0,5,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,740,"            secRand.setSeed(System.currentTimeMillis() + System.identityHashCode(this));
",0,1,0,3,6,0,12,0,0,13,76,7,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,742,"        return secRand;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,753,"        int target = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,754,"        for (int i = list.length - 1; i >= end; i--) {
",12,2,0,1,3,0,0,0,0,15,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,755,"            if (i == 0) {
",2,1,0,1,3,0,0,0,0,3,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,756,"                target = 0;
",2,0,0,0,0,0,0,0,0,3,11,8,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,759,"                target = nextInt(0, i);
",2,0,0,1,2,0,4,0,0,7,23,8,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,761,"            int temp = list[target];
",2,0,1,1,2,0,0,0,0,6,24,7,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,762,"            list[target] = list[i];
",0,0,1,2,4,0,0,0,0,9,23,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,763,"            list[i] = temp;
",2,0,1,1,2,0,0,0,0,7,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,765,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,774,"        int[] natural = new int[n];
",2,0,1,2,4,0,0,0,0,4,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,775,"        for (int i = 0; i < n; i++) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,776,"            natural[i] = i;
",2,0,1,1,2,0,0,0,0,7,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,11,778,"        return natural;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,11,64,"        super(K, M1, M2, M3, seed);
",10,0,0,1,2,0,0,0,0,10,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,11,65,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,11,72,"        super(K, M1, M2, M3, seed);
",10,0,0,1,2,0,0,0,0,10,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,11,73,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,11,79,"        super(K, M1, M2, M3, seed);
",10,0,0,1,2,0,0,0,0,10,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,11,80,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,11,86,"        final int indexRm1 = iRm1[index];
",2,0,1,1,2,1,0,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,11,87,"        final int indexRm2 = iRm2[index];
",2,0,1,1,2,1,0,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,11,89,"        final int v0       = v[index];
",2,0,1,1,2,1,0,0,0,7,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,11,90,"        final int vM1      = v[i1[index]];
",2,0,1,2,4,1,0,0,0,9,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,11,91,"        final int vM2      = v[i2[index]];
",2,0,1,2,4,1,0,0,0,9,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,11,92,"        final int vM3      = v[i3[index]];
",2,0,1,2,4,1,0,0,0,9,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,11,94,"        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);
",2,3,1,4,8,1,0,0,0,14,71,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,11,95,"        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));
",10,5,0,4,8,1,0,0,0,16,57,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,11,96,"        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));
",8,4,0,3,6,1,0,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,11,97,"        final int z3 = z1      ^ z2;
",6,1,0,0,0,1,0,0,0,8,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,11,98,"        int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));
",16,7,0,6,12,0,0,0,0,23,72,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,11,100,"        v[index]     = z3;
",2,0,1,1,2,0,0,0,0,7,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,11,101,"        v[indexRm1]  = z4;
",2,0,1,1,2,0,0,0,0,7,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,11,102,"        v[indexRm2] &= 0x80000000;
",0,0,1,1,2,0,0,0,0,5,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,11,103,"        index        = indexRm1;
",4,0,0,0,0,0,0,0,0,5,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,11,108,"        z4 = z4 ^ ((z4 <<  7) & 0xe46e1700);
",6,3,0,2,4,0,0,0,0,10,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,11,109,"        z4 = z4 ^ ((z4 << 15) & 0x9b868000);
",6,3,0,2,4,0,0,0,0,10,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,11,111,"        return z4 >>> (32 - bits);
",4,2,0,1,2,1,0,0,0,6,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,675,"            super(BigFraction.ZERO);
",4,0,0,1,2,0,0,0,0,4,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,676,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,682,"            data = new double[rows][columns];
",2,0,1,2,4,0,0,0,0,7,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,683,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,688,"            data[row][column] = value.doubleValue();
",0,0,1,3,6,0,4,0,0,11,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,689,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,697,"            return new Array2DRowRealMatrix(data, false);
",2,0,0,1,2,1,0,2,0,5,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,670,"    private static class BigFractionMatrixConverter extends DefaultFieldMatrixPreservingVisitor<BigFraction> {
",2,0,0,0,1,2,0,4,0,8,106,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,630,"            super(Fraction.ZERO);
",4,0,0,1,2,0,0,0,0,4,21,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,631,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,637,"            data = new double[rows][columns];
",2,0,1,2,4,0,0,0,0,7,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,638,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,643,"            data[row][column] = value.doubleValue();
",0,0,1,3,6,0,4,0,0,11,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,644,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,652,"            return new Array2DRowRealMatrix(data, false);
",2,0,0,1,2,1,0,2,0,5,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,625,"    private static class FractionMatrixConverter extends DefaultFieldMatrixPreservingVisitor<Fraction> {
",2,0,0,0,1,2,0,4,0,8,100,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,413,"        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {
",0,0,0,2,6,0,6,4,0,10,82,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,426,"                this.startRow    = startRow;
",4,0,0,0,0,0,0,0,0,5,28,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,427,"                this.startColumn = startColumn;
",4,0,0,0,0,0,0,0,0,5,31,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,428,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,433,"                destination[row - startRow][column - startColumn] = value;
",10,2,1,2,4,0,0,0,0,15,58,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,434,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,53,"    protected AbstractFieldMatrix() {
",2,0,0,1,3,1,0,0,0,3,33,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,54,"        field = null;
",2,0,0,0,0,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,55,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,61,"    protected AbstractFieldMatrix(final Field<T> field) {
",4,0,0,1,3,2,0,4,0,10,53,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,62,"        this.field = field;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,63,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,77,"        throws NotStrictlyPositiveException {
",2,0,0,0,1,0,0,0,0,2,37,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,78,"        if (rowDimension <= 0) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,79,"            throw new NotStrictlyPositiveException(LocalizedFormats.DIMENSION,
",4,0,0,0,1,0,0,2,0,6,66,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,82,"        if (columnDimension <= 0) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,83,"            throw new NotStrictlyPositiveException(LocalizedFormats.DIMENSION,
",4,0,0,0,1,0,0,2,0,6,66,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,86,"        this.field = field;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,87,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,100,"        if (d == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,101,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,103,"        if (d.length == 0) {
",4,1,0,1,3,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,104,"            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
",4,0,0,1,2,0,0,2,0,6,61,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,106,"        if (d[0].length == 0) {
",2,1,1,2,5,0,0,0,0,5,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,107,"            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
",4,0,0,1,2,0,0,2,0,6,64,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,109,"        return d[0][0].getField();
",0,0,1,3,6,1,2,0,0,4,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,122,"        if (d.length == 0) {
",4,1,0,1,3,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,123,"            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
",4,0,0,1,2,0,0,2,0,6,61,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,125,"        return d[0].getField();
",0,0,1,2,4,1,2,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,143,"        if (columns < 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,144,"            T[] dummyRow = (T[]) Array.newInstance(field.getRuntimeClass(), 0);
",2,0,0,5,10,0,8,4,0,14,67,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,145,"            return (T[][]) Array.newInstance(dummyRow.getClass(), rows);
",0,0,0,5,10,1,10,2,0,12,60,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,147,"        T[][] array =
",2,0,0,2,4,0,0,2,0,4,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,149,"        for (int i = 0; i < array.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,150,"            Arrays.fill(array[i], field.getZero());
",0,0,1,3,6,0,8,0,0,12,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,152,"        return array;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,167,"        T[] array = (T[]) Array.newInstance(field.getRuntimeClass(), length);
",2,0,0,5,10,0,10,4,0,16,69,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,168,"        Arrays.fill(array, field.getZero());
",0,0,0,2,4,0,10,0,0,10,36,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,169,"        return array;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,174,"        return field;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,189,"        checkAdditionCompatible(m);
",0,0,0,1,2,0,4,0,0,4,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,191,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,192,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,193,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);
",2,0,0,1,2,1,6,4,0,13,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,194,"        for (int row = 0; row < rowCount; ++row) {
",8,1,0,1,3,0,0,0,0,10,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,195,"            for (int col = 0; col < columnCount; ++col) {
",8,1,0,1,3,0,0,0,0,10,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,196,"                out.setEntry(row, col, getEntry(row, col).add(m.getEntry(row, col)));
",0,0,0,4,8,0,24,0,0,24,69,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,200,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,207,"        checkSubtractionCompatible(m);
",0,0,0,1,2,0,4,0,0,4,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,209,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,210,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,211,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);
",2,0,0,1,2,1,6,4,0,13,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,212,"        for (int row = 0; row < rowCount; ++row) {
",8,1,0,1,3,0,0,0,0,10,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,213,"            for (int col = 0; col < columnCount; ++col) {
",8,1,0,1,3,0,0,0,0,10,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,214,"                out.setEntry(row, col, getEntry(row, col).subtract(m.getEntry(row, col)));
",0,0,0,4,8,0,24,0,0,24,74,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,218,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,224,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,225,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,226,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);
",2,0,0,1,2,1,6,4,0,13,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,227,"        for (int row = 0; row < rowCount; ++row) {
",8,1,0,1,3,0,0,0,0,10,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,228,"            for (int col = 0; col < columnCount; ++col) {
",8,1,0,1,3,0,0,0,0,10,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,229,"                out.setEntry(row, col, getEntry(row, col).add(d));
",0,0,0,3,6,0,18,0,0,18,50,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,233,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,238,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,239,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,240,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);
",2,0,0,1,2,1,6,4,0,13,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,241,"        for (int row = 0; row < rowCount; ++row) {
",8,1,0,1,3,0,0,0,0,10,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,242,"            for (int col = 0; col < columnCount; ++col) {
",8,1,0,1,3,0,0,0,0,10,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,243,"                out.setEntry(row, col, getEntry(row, col).multiply(d));
",0,0,0,3,6,0,18,0,0,18,55,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,247,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,254,"        checkMultiplicationCompatible(m);
",0,0,0,1,2,0,4,0,0,4,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,256,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,257,"        final int nCols = m.getColumnDimension();
",2,0,0,1,2,1,4,0,0,7,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,258,"        final int nSum  = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,259,"        final FieldMatrix<T> out = createMatrix(nRows, nCols);
",2,0,0,1,2,1,6,4,0,13,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,260,"        for (int row = 0; row < nRows; ++row) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,261,"            for (int col = 0; col < nCols; ++col) {
",8,1,0,1,3,0,0,0,0,10,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,262,"                T sum = field.getZero();
",2,0,0,1,2,0,4,2,0,8,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,263,"                for (int i = 0; i < nSum; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,264,"                    sum = sum.add(getEntry(row, i).multiply(m.getEntry(i, col)));
",2,0,0,4,8,0,20,0,0,23,61,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,266,"                out.setEntry(row, col, sum);
",0,0,0,1,2,0,10,0,0,10,28,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,270,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,276,"        return m.multiply(this);
",0,0,0,1,2,1,4,0,0,4,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,282,"        if (p < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,283,"            throw new NotPositiveException(p);
",2,0,0,1,2,0,0,2,0,4,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,286,"        if (!isSquare()) {
",0,0,0,2,5,0,2,0,0,3,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,287,"            throw new NonSquareMatrixException(getRowDimension(), getColumnDimension());
",0,0,0,3,6,0,4,2,0,6,76,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,290,"        if (p == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,291,"            return MatrixUtils.createFieldIdentityMatrix(this.getField(), this.getRowDimension());
",0,0,0,3,6,1,8,0,0,8,86,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,294,"        if (p == 1) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,295,"            return this.copy();
",0,0,0,1,2,1,2,0,0,2,19,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,298,"        final int power = p - 1;
",4,1,0,0,0,1,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,307,"        final char[] binaryRepresentation = Integer.toBinaryString(power)
",2,0,0,2,4,1,6,0,0,9,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,309,"        final ArrayList<Integer> nonZeroPositions = new ArrayList<Integer>();
",2,0,0,1,2,1,0,8,0,11,69,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,311,"        for (int i = 0; i < binaryRepresentation.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,312,"            if (binaryRepresentation[i] == '1') {
",0,1,1,2,5,0,0,0,0,6,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,313,"                final int pos = binaryRepresentation.length - i - 1;
",8,1,0,0,0,1,0,0,0,10,52,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,314,"                nonZeroPositions.add(pos);
",0,0,0,1,2,0,6,0,0,6,26,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,318,"        ArrayList<FieldMatrix<T>> results = new ArrayList<FieldMatrix<T>>(
",2,0,0,0,1,0,0,12,0,14,66,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,321,"        results.add(0, this.copy());
",0,0,0,2,4,0,6,0,0,6,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,323,"        for (int i = 1; i < binaryRepresentation.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,324,"            final FieldMatrix<T> s = results.get(i - 1);
",4,1,0,1,2,1,4,4,0,14,44,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,325,"            final FieldMatrix<T> r = s.multiply(s);
",2,0,0,1,2,1,6,4,0,13,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,326,"            results.add(i, r);
",0,0,0,1,2,0,8,0,0,8,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,329,"        FieldMatrix<T> result = this.copy();
",2,0,0,1,2,0,2,4,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,331,"        for (Integer i : nonZeroPositions) {
",4,0,0,1,3,0,0,2,0,6,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,332,"            result = result.multiply(results.get(i));
",2,0,0,2,4,0,10,0,0,13,41,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,333,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,335,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,340,"        final T[][] data = buildArray(field, getRowDimension(), getColumnDimension());
",2,0,0,5,10,1,8,2,0,13,78,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,342,"        for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,343,"            final T[] dataI = data[i];
",2,0,1,2,4,1,0,2,0,9,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,344,"            for (int j = 0; j < dataI.length; ++j) {
",10,1,0,1,3,0,0,0,0,12,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,345,"                dataI[j] = getEntry(i, j);
",0,0,1,2,4,0,6,0,0,11,26,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,349,"        return data;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,356,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,358,"        final FieldMatrix<T> subMatrix =
",2,0,0,0,0,1,0,4,0,7,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,360,"        for (int i = startRow; i <= endRow; ++i) {
",10,1,0,1,3,0,0,0,0,12,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,361,"            for (int j = startColumn; j <= endColumn; ++j) {
",10,1,0,1,3,0,0,0,0,12,48,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,362,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));
",8,2,0,2,4,0,10,0,0,20,66,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,366,"        return subMatrix;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,376,"        checkSubMatrixIndex(selectedRows, selectedColumns);
",0,0,0,1,2,0,6,0,0,6,51,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,379,"        final FieldMatrix<T> subMatrix =
",2,0,0,0,0,1,0,4,0,7,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,381,"        subMatrix.walkInOptimizedOrder(new DefaultFieldMatrixChangingVisitor<T>(field.getZero()) {
",0,0,0,2,6,0,8,4,0,12,90,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,391,"        return subMatrix;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,402,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,403,"        final int rowsCount    = endRow + 1 - startRow;
",6,2,0,0,0,1,0,0,0,9,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,404,"        final int columnsCount = endColumn + 1 - startColumn;
",6,2,0,0,0,1,0,0,0,9,53,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,405,"        if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {
",10,3,1,4,9,0,0,0,0,15,81,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,406,"            throw new MatrixDimensionMismatchException(destination.length,
",4,0,0,0,1,0,0,2,0,6,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,413,"        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {
",0,0,0,2,6,0,6,4,0,10,82,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,438,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,445,"        checkSubMatrixIndex(selectedRows, selectedColumns);
",0,0,0,1,2,0,6,0,0,6,51,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,446,"        if ((destination.length < selectedRows.length) ||
",8,2,0,1,3,0,0,0,0,10,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,448,"            throw new MatrixDimensionMismatchException(destination.length,
",4,0,0,0,1,0,0,2,0,6,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,455,"        for (int i = 0; i < selectedRows.length; i++) {
",10,1,0,1,3,0,0,0,0,12,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,456,"            final T[] destinationI = destination[i];
",2,0,1,2,4,1,0,2,0,9,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,457,"            for (int j = 0; j < selectedColumns.length; j++) {
",10,1,0,1,3,0,0,0,0,12,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,458,"                destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]);
",0,0,1,4,8,0,2,0,0,15,64,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,462,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,469,"        if (subMatrix == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,470,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,472,"        final int nRows = subMatrix.length;
",6,0,0,0,0,1,0,0,0,7,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,473,"        if (nRows == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,474,"            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
",4,0,0,1,2,0,0,2,0,6,61,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,477,"        final int nCols = subMatrix[0].length;
",4,0,1,1,2,1,0,0,0,7,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,478,"        if (nCols == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,479,"            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
",4,0,0,1,2,0,0,2,0,6,64,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,482,"        for (int r = 1; r < nRows; ++r) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,483,"            if (subMatrix[r].length != nCols) {
",4,1,1,2,5,0,0,0,0,9,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,484,"                throw new DimensionMismatchException(nCols, subMatrix[r].length);
",4,0,1,2,4,0,0,2,0,10,65,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,488,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,489,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,490,"        checkRowIndex(nRows + row - 1);
",4,2,0,1,2,0,2,0,0,8,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,491,"        checkColumnIndex(nCols + column - 1);
",4,2,0,1,2,0,2,0,0,8,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,493,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,494,"            for (int j = 0; j < nCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,495,"                setEntry(row + i, column + j, subMatrix[i][j]);
",8,2,1,3,6,0,2,0,0,18,47,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,498,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,502,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,503,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,504,"        final FieldMatrix<T> out = createMatrix(1, nCols);
",2,0,0,1,2,1,4,4,0,11,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,505,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,506,"            out.setEntry(0, i, getEntry(row, i));
",0,0,0,2,4,0,12,0,0,12,37,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,509,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,516,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,517,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,518,"        if ((matrix.getRowDimension() != 1) ||
",0,2,0,2,5,0,4,0,0,6,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,520,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),
",0,0,0,1,3,0,4,2,0,6,68,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,524,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,525,"            setEntry(row, i, matrix.getEntry(0, i));
",0,0,0,2,4,0,12,0,0,12,40,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,528,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,534,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,535,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,536,"        final FieldMatrix<T> out = createMatrix(nRows, 1);
",2,0,0,1,2,1,4,4,0,11,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,537,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,538,"            out.setEntry(i, 0, getEntry(i, column));
",0,0,0,2,4,0,12,0,0,12,40,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,541,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,548,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,549,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,550,"        if ((matrix.getRowDimension() != nRows) ||
",2,2,0,2,5,0,4,0,0,8,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,552,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),
",0,0,0,1,3,0,4,2,0,6,68,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,556,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,557,"            setEntry(i, column, matrix.getEntry(i, 0));
",0,0,0,2,4,0,12,0,0,12,43,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,560,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,565,"        return new ArrayFieldVector<T>(field, getRow(row), false);
",2,0,0,2,4,1,4,4,0,11,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,571,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,572,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,573,"        if (vector.getDimension() != nCols) {
",2,1,0,2,5,0,4,0,0,7,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,574,"            throw new MatrixDimensionMismatchException(1, vector.getDimension(),
",0,0,0,1,3,0,4,2,0,6,68,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,577,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,578,"            setEntry(row, i, vector.getEntry(i));
",0,0,0,2,4,0,12,0,0,12,37,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,581,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,586,"        return new ArrayFieldVector<T>(field, getColumn(column), false);
",2,0,0,2,4,1,4,4,0,11,64,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,593,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,594,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,595,"        if (vector.getDimension() != nRows) {
",2,1,0,2,5,0,4,0,0,7,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,596,"            throw new MatrixDimensionMismatchException(vector.getDimension(), 1,
",0,0,0,1,3,0,4,2,0,6,68,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,599,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,600,"            setEntry(i, column, vector.getEntry(i));
",0,0,0,2,4,0,12,0,0,12,40,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,603,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,607,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,608,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,609,"        final T[] out = buildArray(field, nCols);
",2,0,0,2,4,1,6,2,0,11,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,610,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,611,"            out[i] = getEntry(row, i);
",0,0,1,2,4,0,6,0,0,11,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,614,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,621,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,622,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,623,"        if (array.length != nCols) {
",6,1,0,1,3,0,0,0,0,7,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,624,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);
",6,0,0,1,2,0,0,2,0,8,70,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,626,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,627,"            setEntry(row, i, array[i]);
",0,0,1,2,4,0,6,0,0,10,27,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,630,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,634,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,635,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,636,"        final T[] out = buildArray(field, nRows);
",2,0,0,2,4,1,6,2,0,11,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,637,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,638,"            out[i] = getEntry(i, column);
",0,0,1,2,4,0,6,0,0,11,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,641,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,648,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,649,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,650,"        if (array.length != nRows) {
",6,1,0,1,3,0,0,0,0,7,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,651,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);
",6,0,0,1,2,0,0,2,0,8,70,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,653,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,654,"            setEntry(i, column, array[i]);
",0,0,1,2,4,0,6,0,0,10,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,656,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,672,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,673,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,674,"        final FieldMatrix<T> out = createMatrix(nCols, nRows);
",2,0,0,1,2,1,6,4,0,13,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,675,"        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {
",0,0,0,2,6,0,6,4,0,10,82,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,683,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,688,"        return getColumnDimension() == getRowDimension();
",0,1,0,2,4,1,4,0,0,5,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,699,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,700,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,701,"        if (nRows != nCols) {
",4,1,0,1,3,0,0,0,0,5,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,702,"            throw new NonSquareMatrixException(nRows, nCols);
",4,0,0,1,2,0,0,2,0,6,49,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,704,"        T trace = field.getZero();
",2,0,0,1,2,0,4,2,0,8,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,705,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,706,"            trace = trace.add(getEntry(i, i));
",2,0,0,2,4,0,10,0,0,13,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,708,"        return trace;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,714,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,715,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,716,"        if (v.length != nCols) {
",6,1,0,1,3,0,0,0,0,7,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,717,"            throw new DimensionMismatchException(v.length, nCols);
",6,0,0,1,2,0,0,2,0,8,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,720,"        final T[] out = buildArray(field, nRows);
",2,0,0,2,4,1,6,2,0,11,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,721,"        for (int row = 0; row < nRows; ++row) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,722,"            T sum = field.getZero();
",2,0,0,1,2,0,4,2,0,8,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,723,"            for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,724,"                sum = sum.add(getEntry(row, i).multiply(v[i]));
",2,0,1,4,8,0,12,0,0,19,47,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,726,"            out[row] = sum;
",2,0,1,1,2,0,0,0,0,7,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,729,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,736,"            return new ArrayFieldVector<T>(field, operate(((ArrayFieldVector<T>) v).getDataRef()), false);
",4,0,0,5,10,1,4,8,0,17,94,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,737,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,738,"            final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,739,"            final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,740,"            if (v.getDimension() != nCols) {
",2,1,0,2,5,0,4,0,0,7,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,741,"                throw new DimensionMismatchException(v.getDimension(), nCols);
",2,0,0,2,4,0,4,2,0,8,62,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,744,"            final T[] out = buildArray(field, nRows);
",2,0,0,2,4,1,6,2,0,11,41,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,745,"            for (int row = 0; row < nRows; ++row) {
",8,1,0,1,3,0,0,0,0,10,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,746,"                T sum = field.getZero();
",2,0,0,1,2,0,4,2,0,8,24,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,747,"                for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,748,"                    sum = sum.add(getEntry(row, i).multiply(v.getEntry(i)));
",2,0,0,4,8,0,18,0,0,21,56,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,750,"                out[row] = sum;
",2,0,1,1,2,0,0,0,0,7,15,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,753,"            return new ArrayFieldVector<T>(field, out, false);
",4,0,0,1,2,1,0,4,0,9,50,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,760,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,761,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,762,"        if (v.length != nRows) {
",6,1,0,1,3,0,0,0,0,7,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,763,"            throw new DimensionMismatchException(v.length, nRows);
",6,0,0,1,2,0,0,2,0,8,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,766,"        final T[] out = buildArray(field, nCols);
",2,0,0,2,4,1,6,2,0,11,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,767,"        for (int col = 0; col < nCols; ++col) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,768,"            T sum = field.getZero();
",2,0,0,1,2,0,4,2,0,8,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,769,"            for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,770,"                sum = sum.add(getEntry(i, col).multiply(v[i]));
",2,0,1,4,8,0,12,0,0,19,47,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,772,"            out[col] = sum;
",2,0,1,1,2,0,0,0,0,7,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,775,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,782,"            return new ArrayFieldVector<T>(field, preMultiply(((ArrayFieldVector<T>) v).getDataRef()), false);
",4,0,0,5,10,1,4,8,0,17,98,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,783,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,784,"            final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,785,"            final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,786,"            if (v.getDimension() != nRows) {
",2,1,0,2,5,0,4,0,0,7,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,787,"                throw new DimensionMismatchException(v.getDimension(), nRows);
",2,0,0,2,4,0,4,2,0,8,62,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,790,"            final T[] out = buildArray(field, nCols);
",2,0,0,2,4,1,6,2,0,11,41,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,791,"            for (int col = 0; col < nCols; ++col) {
",8,1,0,1,3,0,0,0,0,10,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,792,"                T sum = field.getZero();
",2,0,0,1,2,0,4,2,0,8,24,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,793,"                for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,794,"                    sum = sum.add(getEntry(i, col).multiply(v.getEntry(i)));
",2,0,0,4,8,0,18,0,0,21,56,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,796,"                out[col] = sum;
",2,0,1,1,2,0,0,0,0,7,15,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,799,"            return new ArrayFieldVector<T>(field, out, false);
",4,0,0,1,2,1,0,4,0,9,50,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,805,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,806,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,807,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,808,"        for (int row = 0; row < rows; ++row) {
",8,1,0,1,3,0,0,0,0,10,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,809,"            for (int column = 0; column < columns; ++column) {
",8,1,0,1,3,0,0,0,0,10,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,810,"                final T oldValue = getEntry(row, column);
",2,0,0,1,2,1,6,2,0,11,41,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,811,"                final T newValue = visitor.visit(row, column, oldValue);
",2,0,0,1,2,1,10,2,0,15,56,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,812,"                setEntry(row, column, newValue);
",0,0,0,1,2,0,8,0,0,8,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,815,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,820,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,821,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,822,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,823,"        for (int row = 0; row < rows; ++row) {
",8,1,0,1,3,0,0,0,0,10,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,824,"            for (int column = 0; column < columns; ++column) {
",8,1,0,1,3,0,0,0,0,10,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,825,"                visitor.visit(row, column, getEntry(row, column));
",0,0,0,2,4,0,14,0,0,14,50,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,828,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,836,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,837,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,839,"        for (int row = startRow; row <= endRow; ++row) {
",10,1,0,1,3,0,0,0,0,12,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,840,"            for (int column = startColumn; column <= endColumn; ++column) {
",10,1,0,1,3,0,0,0,0,12,63,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,841,"                final T oldValue = getEntry(row, column);
",2,0,0,1,2,1,6,2,0,11,41,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,842,"                final T newValue = visitor.visit(row, column, oldValue);
",2,0,0,1,2,1,10,2,0,15,56,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,843,"                setEntry(row, column, newValue);
",0,0,0,1,2,0,8,0,0,8,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,846,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,854,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,855,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,857,"        for (int row = startRow; row <= endRow; ++row) {
",10,1,0,1,3,0,0,0,0,12,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,858,"            for (int column = startColumn; column <= endColumn; ++column) {
",10,1,0,1,3,0,0,0,0,12,63,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,859,"                visitor.visit(row, column, getEntry(row, column));
",0,0,0,2,4,0,14,0,0,14,50,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,862,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,867,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,868,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,869,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,870,"        for (int column = 0; column < columns; ++column) {
",8,1,0,1,3,0,0,0,0,10,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,871,"            for (int row = 0; row < rows; ++row) {
",8,1,0,1,3,0,0,0,0,10,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,872,"                final T oldValue = getEntry(row, column);
",2,0,0,1,2,1,6,2,0,11,41,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,873,"                final T newValue = visitor.visit(row, column, oldValue);
",2,0,0,1,2,1,10,2,0,15,56,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,874,"                setEntry(row, column, newValue);
",0,0,0,1,2,0,8,0,0,8,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,877,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,882,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,883,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,884,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,885,"        for (int column = 0; column < columns; ++column) {
",8,1,0,1,3,0,0,0,0,10,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,886,"            for (int row = 0; row < rows; ++row) {
",8,1,0,1,3,0,0,0,0,10,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,887,"                visitor.visit(row, column, getEntry(row, column));
",0,0,0,2,4,0,14,0,0,14,50,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,890,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,898,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,899,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,901,"        for (int column = startColumn; column <= endColumn; ++column) {
",10,1,0,1,3,0,0,0,0,12,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,902,"            for (int row = startRow; row <= endRow; ++row) {
",10,1,0,1,3,0,0,0,0,12,48,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,903,"                final T oldValue = getEntry(row, column);
",2,0,0,1,2,1,6,2,0,11,41,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,904,"                final T newValue = visitor.visit(row, column, oldValue);
",2,0,0,1,2,1,10,2,0,15,56,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,905,"                setEntry(row, column, newValue);
",0,0,0,1,2,0,8,0,0,8,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,908,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,916,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,917,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,919,"        for (int column = startColumn; column <= endColumn; ++column) {
",10,1,0,1,3,0,0,0,0,12,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,920,"            for (int row = startRow; row <= endRow; ++row) {
",10,1,0,1,3,0,0,0,0,12,48,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,921,"                visitor.visit(row, column, getEntry(row, column));
",0,0,0,2,4,0,14,0,0,14,50,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,924,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,929,"        return walkInRowOrder(visitor);
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,934,"        return walkInRowOrder(visitor);
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,942,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,1,12,0,0,12,73,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,950,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,1,12,0,0,12,73,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,959,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,960,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,961,"        final StringBuffer res = new StringBuffer();
",2,0,0,1,2,1,0,4,0,7,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,962,"        String fullClassName = getClass().getName();
",2,0,0,2,4,0,4,2,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,963,"        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);
",2,1,0,2,4,0,8,2,0,14,84,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,964,"        res.append(shortClassName).append(""{"");
",0,0,0,2,5,0,8,0,0,9,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,966,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,967,"            if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,968,"                res.append("","");
",0,0,0,1,2,0,4,0,0,5,16,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,970,"            res.append(""{"");
",0,0,0,1,3,0,4,0,0,5,16,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,971,"            for (int j = 0; j < nCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,972,"                if (j > 0) {
",2,1,0,1,3,0,0,0,0,3,12,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,973,"                    res.append("","");
",0,0,0,1,2,0,4,0,0,5,16,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,975,"                res.append(getEntry(i, j));
",0,0,0,2,4,0,10,0,0,10,27,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,977,"            res.append(""}"");
",0,0,0,1,3,0,4,0,0,5,16,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,980,"        res.append(""}"");
",0,0,0,1,3,0,4,0,0,5,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,981,"        return res.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,994,"        if (object == this ) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,995,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,997,"        if (object instanceof FieldMatrix<?> == false) {
",2,1,0,1,3,0,0,2,0,6,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,998,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1000,"        FieldMatrix<?> m = (FieldMatrix<?>) object;
",4,0,0,1,2,0,0,4,0,8,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1001,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1002,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1003,"        if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {
",4,3,0,3,7,0,8,0,0,15,70,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1004,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1006,"        for (int row = 0; row < nRows; ++row) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1007,"            for (int col = 0; col < nCols; ++col) {
",8,1,0,1,3,0,0,0,0,10,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1008,"                if (!getEntry(row, col).equals(m.getEntry(row, col))) {
",0,0,0,4,9,0,16,0,0,17,55,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1009,"                    return false;
",0,0,0,0,0,1,0,0,0,1,13,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1013,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1023,"        int ret = 322562;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1024,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1025,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1026,"        ret = ret * 31 + nRows;
",6,2,0,0,0,0,0,0,0,9,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1027,"        ret = ret * 31 + nCols;
",6,2,0,0,0,0,0,0,0,9,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1028,"        for (int row = 0; row < nRows; ++row) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1029,"            for (int col = 0; col < nCols; ++col) {
",8,1,0,1,3,0,0,0,0,10,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1030,"               ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) * getEntry(row, col).hashCode();
",8,8,0,5,10,0,8,0,0,25,79,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1033,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1043,"        if (row < 0 || row >= getRowDimension()) {
",4,3,0,2,5,0,2,0,0,9,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1044,"            throw new OutOfRangeException(LocalizedFormats.ROW_INDEX,
",4,0,0,0,1,0,0,2,0,6,57,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1047,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1057,"        if (column < 0 || column >= getColumnDimension()) {
",4,3,0,2,5,0,2,0,0,9,51,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1058,"            throw new OutOfRangeException(LocalizedFormats.COLUMN_INDEX,
",4,0,0,0,1,0,0,2,0,6,60,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1061,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1078,"        checkRowIndex(startRow);
",0,0,0,1,2,0,4,0,0,4,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1079,"        checkRowIndex(endRow);
",0,0,0,1,2,0,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1080,"        if (endRow < startRow) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1081,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,
",4,0,0,0,1,0,0,2,0,6,81,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1085,"        checkColumnIndex(startColumn);
",0,0,0,1,2,0,4,0,0,4,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1086,"        checkColumnIndex(endColumn);
",0,0,0,1,2,0,4,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1087,"        if (endColumn < startColumn) {
",4,1,0,1,3,0,0,0,0,5,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1088,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_COLUMN_AFTER_FINAL_COLUMN,
",4,0,0,0,1,0,0,2,0,6,87,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1091,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1105,"        if (selectedRows == null ||
",2,2,0,0,1,0,0,0,0,4,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1107,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1109,"        if (selectedRows.length == 0 ||
",4,2,0,0,1,0,0,0,0,6,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1111,"            throw new NoDataException();
",0,0,0,1,2,0,0,2,0,2,28,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1114,"        for (final int row : selectedRows) {
",4,0,0,1,3,1,0,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1115,"            checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1117,"        for (final int column : selectedColumns) {
",4,0,0,1,3,1,0,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1118,"            checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1120,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1131,"        if ((getRowDimension() != m.getRowDimension()) ||
",0,2,0,3,7,0,6,0,0,8,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1133,"            throw new MatrixDimensionMismatchException(m.getRowDimension(), m.getColumnDimension(),
",0,0,0,2,5,0,8,2,0,10,87,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1136,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1147,"        if ((getRowDimension() != m.getRowDimension()) ||
",0,2,0,3,7,0,6,0,0,8,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1149,"            throw new MatrixDimensionMismatchException(m.getRowDimension(), m.getColumnDimension(),
",0,0,0,2,5,0,8,2,0,10,87,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1152,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1163,"        if (getColumnDimension() != m.getRowDimension()) {
",0,1,0,3,7,0,6,0,0,7,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1164,"            throw new DimensionMismatchException(m.getRowDimension(), getColumnDimension());
",0,0,0,3,6,0,6,2,0,8,80,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,1166,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,356,"        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {
",0,0,0,1,4,0,2,2,0,4,63,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,369,"                this.startRow    = startRow;
",4,0,0,0,0,0,0,0,0,5,28,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,370,"                this.startColumn = startColumn;
",4,0,0,0,0,0,0,0,0,5,31,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,371,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,376,"                destination[row - startRow][column - startColumn] = value;
",10,2,1,2,4,0,0,0,0,15,58,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,377,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,11,37,"    public void visit(int row, int column, double value) {}
",8,0,0,2,4,1,0,0,0,9,55,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,69,"            throw new NotStrictlyPositiveException(rowDimension);
",2,0,0,1,2,0,0,2,0,4,53,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,72,"            throw new NotStrictlyPositiveException(columnDimension);
",2,0,0,1,2,0,0,2,0,4,56,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,79,"        MatrixUtils.checkAdditionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,45,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,81,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,82,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,83,"        final RealMatrix out = createMatrix(rowCount, columnCount);
",2,0,0,1,2,1,6,2,0,11,59,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,84,"        for (int row = 0; row < rowCount; ++row) {
",8,1,0,1,3,0,0,0,0,10,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,85,"            for (int col = 0; col < columnCount; ++col) {
",8,1,0,1,3,0,0,0,0,10,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,86,"                out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col));
",0,1,0,3,6,0,22,0,0,23,66,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,90,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,96,"        MatrixUtils.checkSubtractionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,98,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,99,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,100,"        final RealMatrix out = createMatrix(rowCount, columnCount);
",2,0,0,1,2,1,6,2,0,11,59,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,101,"        for (int row = 0; row < rowCount; ++row) {
",8,1,0,1,3,0,0,0,0,10,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,102,"            for (int col = 0; col < columnCount; ++col) {
",8,1,0,1,3,0,0,0,0,10,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,103,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));
",0,1,0,3,6,0,22,0,0,23,66,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,107,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,112,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,113,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,114,"        final RealMatrix out = createMatrix(rowCount, columnCount);
",2,0,0,1,2,1,6,2,0,11,59,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,115,"        for (int row = 0; row < rowCount; ++row) {
",8,1,0,1,3,0,0,0,0,10,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,116,"            for (int col = 0; col < columnCount; ++col) {
",8,1,0,1,3,0,0,0,0,10,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,117,"                out.setEntry(row, col, getEntry(row, col) + d);
",2,1,0,2,4,0,14,0,0,17,47,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,121,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,126,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,127,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,128,"        final RealMatrix out = createMatrix(rowCount, columnCount);
",2,0,0,1,2,1,6,2,0,11,59,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,129,"        for (int row = 0; row < rowCount; ++row) {
",8,1,0,1,3,0,0,0,0,10,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,130,"            for (int col = 0; col < columnCount; ++col) {
",8,1,0,1,3,0,0,0,0,10,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,131,"                out.setEntry(row, col, getEntry(row, col) * d);
",2,1,0,2,4,0,14,0,0,17,47,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,135,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,163,"        return m.multiply(this);
",0,0,0,1,2,1,4,0,0,4,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,169,"        if (p < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,170,"            throw new NotPositiveException(LocalizedFormats.NOT_POSITIVE_EXPONENT, p);
",6,0,0,1,2,0,0,2,0,8,74,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,173,"        if (!isSquare()) {
",0,0,0,2,5,0,2,0,0,3,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,174,"            throw new NonSquareMatrixException(getRowDimension(), getColumnDimension());
",0,0,0,3,6,0,4,2,0,6,76,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,177,"        if (p == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,178,"            return MatrixUtils.createRealIdentityMatrix(this.getRowDimension());
",0,0,0,2,4,1,6,0,0,6,68,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,181,"        if (p == 1) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,182,"            return this.copy();
",0,0,0,1,2,1,2,0,0,2,19,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,185,"        final int power = p - 1;
",4,1,0,0,0,1,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,194,"        final char[] binaryRepresentation = Integer.toBinaryString(power).toCharArray();
",2,0,0,3,6,1,8,0,0,11,80,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,195,"        final ArrayList<Integer> nonZeroPositions = new ArrayList<Integer>();
",2,0,0,1,2,1,0,8,0,11,69,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,196,"        int maxI = -1;
",2,0,0,0,0,0,0,0,0,3,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,198,"        for (int i = 0; i < binaryRepresentation.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,199,"            if (binaryRepresentation[i] == '1') {
",0,1,1,2,5,0,0,0,0,6,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,200,"                final int pos = binaryRepresentation.length - i - 1;
",8,1,0,0,0,1,0,0,0,10,52,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,201,"                nonZeroPositions.add(pos);
",0,0,0,1,2,0,6,0,0,6,26,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,204,"                if (maxI == -1) {
",2,1,0,1,3,0,0,0,0,4,17,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,205,"                    maxI = pos;
",4,0,0,0,0,0,0,0,0,5,11,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,210,"        RealMatrix[] results = new RealMatrix[maxI + 1];
",4,1,0,2,4,0,0,4,0,9,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,211,"        results[0] = this.copy();
",0,0,1,2,4,0,2,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,213,"        for (int i = 1; i <= maxI; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,214,"            results[i] = results[i-1].multiply(results[i-1]);
",4,2,1,4,8,0,2,0,0,17,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,217,"        RealMatrix result = this.copy();
",2,0,0,1,2,0,2,2,0,6,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,219,"        for (Integer i : nonZeroPositions) {
",4,0,0,1,3,0,0,2,0,6,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,220,"            result = result.multiply(results[i]);
",2,0,1,2,4,0,4,0,0,11,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,221,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,223,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,228,"        final double[][] data = new double[getRowDimension()][getColumnDimension()];
",2,0,0,6,12,1,4,0,0,7,76,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,230,"        for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,231,"            final double[] dataI = data[i];
",2,0,1,2,4,1,0,0,0,7,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,232,"            for (int j = 0; j < dataI.length; ++j) {
",10,1,0,1,3,0,0,0,0,12,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,233,"                dataI[j] = getEntry(i, j);
",0,0,1,2,4,0,6,0,0,11,26,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,237,"        return data;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,242,"        return walkInColumnOrder(new RealMatrixPreservingVisitor() {
",0,0,0,1,4,1,2,2,0,4,60,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,280,"        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {
",0,0,0,1,4,1,2,2,0,4,63,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,308,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,310,"        final RealMatrix subMatrix =
",2,0,0,0,0,1,0,2,0,5,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,312,"        for (int i = startRow; i <= endRow; ++i) {
",10,1,0,1,3,0,0,0,0,12,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,313,"            for (int j = startColumn; j <= endColumn; ++j) {
",10,1,0,1,3,0,0,0,0,12,48,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,314,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));
",8,2,0,2,4,0,10,0,0,20,66,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,318,"        return subMatrix;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,325,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);
",0,0,0,1,2,0,8,0,0,8,69,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,327,"        final RealMatrix subMatrix =
",2,0,0,0,0,1,0,2,0,5,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,329,"        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {
",0,0,0,1,4,0,4,2,0,6,71,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,339,"        return subMatrix;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,348,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,349,"        final int rowsCount    = endRow + 1 - startRow;
",6,2,0,0,0,1,0,0,0,9,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,350,"        final int columnsCount = endColumn + 1 - startColumn;
",6,2,0,0,0,1,0,0,0,9,53,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,351,"        if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {
",10,3,1,4,9,0,0,0,0,15,81,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,352,"            throw new MatrixDimensionMismatchException(destination.length, destination[0].length,
",6,0,1,1,3,0,0,2,0,10,85,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,356,"        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {
",0,0,0,1,4,0,2,2,0,4,63,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,380,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,387,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);
",0,0,0,1,2,0,8,0,0,8,69,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,388,"        if ((destination.length < selectedRows.length) ||
",8,2,0,1,3,0,0,0,0,10,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,390,"            throw new MatrixDimensionMismatchException(destination.length, destination[0].length,
",6,0,1,1,3,0,0,2,0,10,85,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,394,"        for (int i = 0; i < selectedRows.length; i++) {
",10,1,0,1,3,0,0,0,0,12,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,395,"            final double[] destinationI = destination[i];
",2,0,1,2,4,1,0,0,0,7,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,396,"            for (int j = 0; j < selectedColumns.length; j++) {
",10,1,0,1,3,0,0,0,0,12,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,397,"                destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]);
",0,0,1,4,8,0,2,0,0,15,64,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,400,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,406,"        MathUtils.checkNotNull(subMatrix);
",0,0,0,1,2,0,6,0,0,6,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,407,"        final int nRows = subMatrix.length;
",6,0,0,0,0,1,0,0,0,7,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,408,"        if (nRows == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,409,"            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
",4,0,0,1,2,0,0,2,0,6,61,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,412,"        final int nCols = subMatrix[0].length;
",4,0,1,1,2,1,0,0,0,7,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,413,"        if (nCols == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,414,"            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
",4,0,0,1,2,0,0,2,0,6,64,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,417,"        for (int r = 1; r < nRows; ++r) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,418,"            if (subMatrix[r].length != nCols) {
",4,1,1,2,5,0,0,0,0,9,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,419,"                throw new DimensionMismatchException(nCols, subMatrix[r].length);
",4,0,1,2,4,0,0,2,0,10,65,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,423,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,424,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,425,"        MatrixUtils.checkRowIndex(this, nRows + row - 1);
",4,2,0,1,2,0,4,0,0,10,49,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,426,"        MatrixUtils.checkColumnIndex(this, nCols + column - 1);
",4,2,0,1,2,0,4,0,0,10,55,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,428,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,429,"            for (int j = 0; j < nCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,430,"                setEntry(row + i, column + j, subMatrix[i][j]);
",8,2,1,3,6,0,2,0,0,18,47,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,433,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,437,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,438,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,439,"        final RealMatrix out = createMatrix(1, nCols);
",2,0,0,1,2,1,4,2,0,9,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,440,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,441,"            out.setEntry(0, i, getEntry(row, i));
",0,0,0,2,4,0,12,0,0,12,37,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,444,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,450,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,451,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,452,"        if ((matrix.getRowDimension() != 1) ||
",0,2,0,2,5,0,4,0,0,6,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,454,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),
",0,0,0,1,3,0,4,2,0,6,68,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,458,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,459,"            setEntry(row, i, matrix.getEntry(0, i));
",0,0,0,2,4,0,12,0,0,12,40,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,461,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,466,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,467,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,468,"        final RealMatrix out = createMatrix(nRows, 1);
",2,0,0,1,2,1,4,2,0,9,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,469,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,470,"            out.setEntry(i, 0, getEntry(i, column));
",0,0,0,2,4,0,12,0,0,12,40,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,473,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,479,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,480,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,481,"        if ((matrix.getRowDimension() != nRows) ||
",2,2,0,2,5,0,4,0,0,8,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,483,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),
",0,0,0,1,3,0,4,2,0,6,68,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,487,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,488,"            setEntry(i, column, matrix.getEntry(i, 0));
",0,0,0,2,4,0,12,0,0,12,43,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,490,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,495,"        return new ArrayRealVector(getRow(row), false);
",0,0,0,2,4,1,4,2,0,7,47,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,501,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,502,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,503,"        if (vector.getDimension() != nCols) {
",2,1,0,2,5,0,4,0,0,7,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,504,"            throw new MatrixDimensionMismatchException(1, vector.getDimension(),
",0,0,0,1,3,0,4,2,0,6,68,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,507,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,508,"            setEntry(row, i, vector.getEntry(i));
",0,0,0,2,4,0,12,0,0,12,37,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,510,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,515,"        return new ArrayRealVector(getColumn(column), false);
",0,0,0,2,4,1,4,2,0,7,53,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,521,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,522,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,523,"        if (vector.getDimension() != nRows) {
",2,1,0,2,5,0,4,0,0,7,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,524,"            throw new MatrixDimensionMismatchException(vector.getDimension(), 1,
",0,0,0,1,3,0,4,2,0,6,68,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,527,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,528,"            setEntry(i, column, vector.getEntry(i));
",0,0,0,2,4,0,12,0,0,12,40,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,530,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,534,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,535,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,536,"        final double[] out = new double[nCols];
",2,0,1,2,4,1,0,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,537,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,538,"            out[i] = getEntry(row, i);
",0,0,1,2,4,0,6,0,0,11,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,541,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,547,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,548,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,549,"        if (array.length != nCols) {
",6,1,0,1,3,0,0,0,0,7,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,550,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);
",6,0,0,1,2,0,0,2,0,8,70,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,552,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,553,"            setEntry(row, i, array[i]);
",0,0,1,2,4,0,6,0,0,10,27,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,555,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,559,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,560,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,561,"        final double[] out = new double[nRows];
",2,0,1,2,4,1,0,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,562,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,563,"            out[i] = getEntry(i, column);
",0,0,1,2,4,0,6,0,0,11,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,566,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,575,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);
",6,0,0,1,2,0,0,2,0,8,70,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,585,"        MatrixUtils.checkMatrixIndex(this, row, column);
",0,0,0,1,2,0,8,0,0,8,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,586,"        setEntry(row, column, getEntry(row, column) + increment);
",2,1,0,2,4,0,12,0,0,15,57,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,587,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,592,"        MatrixUtils.checkMatrixIndex(this, row, column);
",0,0,0,1,2,0,8,0,0,8,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,593,"        setEntry(row, column, getEntry(row, column) * factor);
",2,1,0,2,4,0,12,0,0,15,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,594,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,637,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,638,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,639,"        if (nRows != nCols) {
",4,1,0,1,3,0,0,0,0,5,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,640,"            throw new NonSquareMatrixException(nRows, nCols);
",4,0,0,1,2,0,0,2,0,6,49,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,642,"        double trace = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,643,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,644,"            trace += getEntry(i, i);
",2,0,0,1,2,0,6,0,0,9,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,646,"        return trace;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,652,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,653,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,654,"        if (v.length != nCols) {
",6,1,0,1,3,0,0,0,0,7,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,655,"            throw new DimensionMismatchException(v.length, nCols);
",6,0,0,1,2,0,0,2,0,8,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,658,"        final double[] out = new double[nRows];
",2,0,1,2,4,1,0,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,659,"        for (int row = 0; row < nRows; ++row) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,660,"            double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,661,"            for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,662,"                sum += getEntry(row, i) * v[i];
",2,1,1,2,4,0,6,0,0,14,31,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,664,"            out[row] = sum;
",2,0,1,1,2,0,0,0,0,7,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,667,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,675,"            return new ArrayRealVector(operate(((ArrayRealVector) v).getDataRef()), false);
",2,0,0,5,10,1,4,4,0,11,79,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,676,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,677,"            final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,678,"            final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,679,"            if (v.getDimension() != nCols) {
",2,1,0,2,5,0,4,0,0,7,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,680,"                throw new DimensionMismatchException(v.getDimension(), nCols);
",2,0,0,2,4,0,4,2,0,8,62,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,683,"            final double[] out = new double[nRows];
",2,0,1,2,4,1,0,0,0,5,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,684,"            for (int row = 0; row < nRows; ++row) {
",8,1,0,1,3,0,0,0,0,10,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,685,"                double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,686,"                for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,687,"                    sum += getEntry(row, i) * v.getEntry(i);
",2,1,0,2,4,0,12,0,0,16,40,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,689,"                out[row] = sum;
",2,0,1,1,2,0,0,0,0,7,15,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,692,"            return new ArrayRealVector(out, false);
",2,0,0,1,2,1,0,2,0,5,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,699,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,700,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,701,"        if (v.length != nRows) {
",6,1,0,1,3,0,0,0,0,7,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,702,"            throw new DimensionMismatchException(v.length, nRows);
",6,0,0,1,2,0,0,2,0,8,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,705,"        final double[] out = new double[nCols];
",2,0,1,2,4,1,0,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,706,"        for (int col = 0; col < nCols; ++col) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,707,"            double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,708,"            for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,709,"                sum += getEntry(i, col) * v[i];
",2,1,1,2,4,0,6,0,0,14,31,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,711,"            out[col] = sum;
",2,0,1,1,2,0,0,0,0,7,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,714,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,720,"            return new ArrayRealVector(preMultiply(((ArrayRealVector) v).getDataRef()), false);
",2,0,0,5,10,1,4,4,0,11,83,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,721,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,723,"            final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,724,"            final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,725,"            if (v.getDimension() != nRows) {
",2,1,0,2,5,0,4,0,0,7,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,726,"                throw new DimensionMismatchException(v.getDimension(), nRows);
",2,0,0,2,4,0,4,2,0,8,62,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,729,"            final double[] out = new double[nCols];
",2,0,1,2,4,1,0,0,0,5,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,730,"            for (int col = 0; col < nCols; ++col) {
",8,1,0,1,3,0,0,0,0,10,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,731,"                double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,732,"                for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,733,"                    sum += getEntry(i, col) * v.getEntry(i);
",2,1,0,2,4,0,12,0,0,16,40,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,735,"                out[col] = sum;
",2,0,1,1,2,0,0,0,0,7,15,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,738,"            return new ArrayRealVector(out, false);
",2,0,0,1,2,1,0,2,0,5,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,744,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,745,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,746,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,747,"        for (int row = 0; row < rows; ++row) {
",8,1,0,1,3,0,0,0,0,10,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,748,"            for (int column = 0; column < columns; ++column) {
",8,1,0,1,3,0,0,0,0,10,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,749,"                final double oldValue = getEntry(row, column);
",2,0,0,1,2,1,6,0,0,9,46,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,750,"                final double newValue = visitor.visit(row, column, oldValue);
",2,0,0,1,2,1,10,0,0,13,61,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,751,"                setEntry(row, column, newValue);
",0,0,0,1,2,0,8,0,0,8,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,754,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,759,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,760,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,761,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,762,"        for (int row = 0; row < rows; ++row) {
",8,1,0,1,3,0,0,0,0,10,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,763,"            for (int column = 0; column < columns; ++column) {
",8,1,0,1,3,0,0,0,0,10,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,764,"                visitor.visit(row, column, getEntry(row, column));
",0,0,0,2,4,0,14,0,0,14,50,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,767,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,775,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,776,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,778,"        for (int row = startRow; row <= endRow; ++row) {
",10,1,0,1,3,0,0,0,0,12,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,779,"            for (int column = startColumn; column <= endColumn; ++column) {
",10,1,0,1,3,0,0,0,0,12,63,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,780,"                final double oldValue = getEntry(row, column);
",2,0,0,1,2,1,6,0,0,9,46,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,781,"                final double newValue = visitor.visit(row, column, oldValue);
",2,0,0,1,2,1,10,0,0,13,61,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,782,"                setEntry(row, column, newValue);
",0,0,0,1,2,0,8,0,0,8,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,785,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,793,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,794,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,796,"        for (int row = startRow; row <= endRow; ++row) {
",10,1,0,1,3,0,0,0,0,12,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,797,"            for (int column = startColumn; column <= endColumn; ++column) {
",10,1,0,1,3,0,0,0,0,12,63,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,798,"                visitor.visit(row, column, getEntry(row, column));
",0,0,0,2,4,0,14,0,0,14,50,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,801,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,806,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,807,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,808,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,809,"        for (int column = 0; column < columns; ++column) {
",8,1,0,1,3,0,0,0,0,10,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,810,"            for (int row = 0; row < rows; ++row) {
",8,1,0,1,3,0,0,0,0,10,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,811,"                final double oldValue = getEntry(row, column);
",2,0,0,1,2,1,6,0,0,9,46,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,812,"                final double newValue = visitor.visit(row, column, oldValue);
",2,0,0,1,2,1,10,0,0,13,61,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,813,"                setEntry(row, column, newValue);
",0,0,0,1,2,0,8,0,0,8,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,816,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,821,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,822,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,823,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,824,"        for (int column = 0; column < columns; ++column) {
",8,1,0,1,3,0,0,0,0,10,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,825,"            for (int row = 0; row < rows; ++row) {
",8,1,0,1,3,0,0,0,0,10,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,826,"                visitor.visit(row, column, getEntry(row, column));
",0,0,0,2,4,0,14,0,0,14,50,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,829,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,837,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,838,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,840,"        for (int column = startColumn; column <= endColumn; ++column) {
",10,1,0,1,3,0,0,0,0,12,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,841,"            for (int row = startRow; row <= endRow; ++row) {
",10,1,0,1,3,0,0,0,0,12,48,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,842,"                final double oldValue = getEntry(row, column);
",2,0,0,1,2,1,6,0,0,9,46,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,843,"                final double newValue = visitor.visit(row, column, oldValue);
",2,0,0,1,2,1,10,0,0,13,61,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,844,"                setEntry(row, column, newValue);
",0,0,0,1,2,0,8,0,0,8,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,847,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,855,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,856,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,858,"        for (int column = startColumn; column <= endColumn; ++column) {
",10,1,0,1,3,0,0,0,0,12,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,859,"            for (int row = startRow; row <= endRow; ++row) {
",10,1,0,1,3,0,0,0,0,12,48,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,860,"                visitor.visit(row, column, getEntry(row, column));
",0,0,0,2,4,0,14,0,0,14,50,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,863,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,868,"        return walkInRowOrder(visitor);
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,882,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,1,12,0,0,12,73,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,891,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,1,12,0,0,12,73,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,900,"        final StringBuilder res = new StringBuilder();
",2,0,0,1,2,1,0,4,0,7,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,901,"        String fullClassName = getClass().getName();
",2,0,0,2,4,0,4,2,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,902,"        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);
",2,1,0,2,4,0,8,2,0,14,84,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,903,"        res.append(shortClassName);
",0,0,0,1,2,0,6,0,0,6,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,904,"        res.append(DEFAULT_FORMAT.format(this));
",0,0,0,2,4,0,8,0,0,8,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,905,"        return res.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,918,"        if (object == this ) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,919,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,921,"        if (object instanceof RealMatrix == false) {
",2,1,0,1,3,0,0,2,0,6,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,922,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,924,"        RealMatrix m = (RealMatrix) object;
",4,0,0,1,2,0,0,4,0,8,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,925,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,926,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,927,"        if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {
",4,3,0,3,7,0,8,0,0,15,70,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,928,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,930,"        for (int row = 0; row < nRows; ++row) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,931,"            for (int col = 0; col < nCols; ++col) {
",8,1,0,1,3,0,0,0,0,10,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,932,"                if (getEntry(row, col) != m.getEntry(row, col)) {
",0,1,0,3,7,0,14,0,0,15,49,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,933,"                    return false;
",0,0,0,0,0,1,0,0,0,1,13,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,937,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,947,"        int ret = 7;
",2,0,0,0,0,0,0,0,0,2,12,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,948,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,949,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,950,"        ret = ret * 31 + nRows;
",6,2,0,0,0,0,0,0,0,9,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,951,"        ret = ret * 31 + nCols;
",6,2,0,0,0,0,0,0,0,9,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,952,"        for (int row = 0; row < nRows; ++row) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,953,"            for (int col = 0; col < nCols; ++col) {
",8,1,0,1,3,0,0,0,0,10,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,954,"               ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) *
",8,8,0,3,6,0,0,0,0,17,48,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,958,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealLinearOperator,11,95,"        throw new UnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealLinearOperator,11,108,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,48,"    public Array2DRowRealMatrix() {}
",2,0,0,2,4,1,0,0,0,3,32,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,101,"        NullArgumentException {
",2,0,0,0,1,0,0,0,0,2,23,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,102,"        if (copyArray) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,103,"            copyIn(d);
",0,0,0,1,2,0,4,0,0,4,10,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,105,"            if (d == null) {
",2,1,0,1,3,0,0,0,0,3,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,106,"                throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,108,"            final int nRows = d.length;
",6,0,0,0,0,1,0,0,0,7,27,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,109,"            if (nRows == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,110,"                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
",4,0,0,1,2,0,0,2,0,6,61,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,112,"            final int nCols = d[0].length;
",4,0,1,1,2,1,0,0,0,7,30,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,113,"            if (nCols == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,114,"                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
",4,0,0,1,2,0,0,2,0,6,64,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,116,"            for (int r = 1; r < nRows; r++) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,117,"                if (d[r].length != nCols) {
",4,1,1,2,5,0,0,0,0,9,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,118,"                    throw new DimensionMismatchException(d[r].length, nCols);
",4,0,1,2,4,0,0,2,0,10,57,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,121,"            data = d;
",4,0,0,0,0,0,0,0,0,5,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,123,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,132,"    public Array2DRowRealMatrix(final double[] v) {
",4,0,0,2,5,2,0,0,0,6,47,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,133,"        final int nRows = v.length;
",6,0,0,0,0,1,0,0,0,7,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,134,"        data = new double[nRows][1];
",2,0,1,2,4,0,0,0,0,5,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,135,"        for (int row = 0; row < nRows; row++) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,136,"            data[row][0] = v[row];
",0,0,1,3,6,0,0,0,0,9,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,138,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,151,"        return new Array2DRowRealMatrix(copyOut(), false);
",0,0,0,2,4,1,2,2,0,5,50,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,165,"        MatrixUtils.checkAdditionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,45,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,167,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,168,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,169,"        final double[][] outData = new double[rowCount][columnCount];
",2,0,1,4,8,1,0,0,0,7,61,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,170,"        for (int row = 0; row < rowCount; row++) {
",8,1,0,1,3,0,0,0,0,10,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,171,"            final double[] dataRow    = data[row];
",2,0,1,2,4,1,0,0,0,7,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,172,"            final double[] mRow       = m.data[row];
",6,0,1,2,4,1,0,0,0,9,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,173,"            final double[] outDataRow = outData[row];
",2,0,1,2,4,1,0,0,0,7,41,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,174,"            for (int col = 0; col < columnCount; col++) {
",8,1,0,1,3,0,0,0,0,10,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,175,"                outDataRow[col] = dataRow[col] + mRow[col];
",0,1,1,3,6,0,0,0,0,14,43,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,179,"        return new Array2DRowRealMatrix(outData, false);
",2,0,0,1,2,1,0,2,0,5,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,192,"        MatrixUtils.checkSubtractionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,194,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,195,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,196,"        final double[][] outData = new double[rowCount][columnCount];
",2,0,1,4,8,1,0,0,0,7,61,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,197,"        for (int row = 0; row < rowCount; row++) {
",8,1,0,1,3,0,0,0,0,10,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,198,"            final double[] dataRow    = data[row];
",2,0,1,2,4,1,0,0,0,7,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,199,"            final double[] mRow       = m.data[row];
",6,0,1,2,4,1,0,0,0,9,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,200,"            final double[] outDataRow = outData[row];
",2,0,1,2,4,1,0,0,0,7,41,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,201,"            for (int col = 0; col < columnCount; col++) {
",8,1,0,1,3,0,0,0,0,10,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,202,"                outDataRow[col] = dataRow[col] - mRow[col];
",0,1,1,3,6,0,0,0,0,14,43,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,206,"        return new Array2DRowRealMatrix(outData, false);
",2,0,0,1,2,1,0,2,0,5,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,219,"        MatrixUtils.checkMultiplicationCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,51,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,221,"        final int nRows = this.getRowDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,222,"        final int nCols = m.getColumnDimension();
",2,0,0,1,2,1,4,0,0,7,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,223,"        final int nSum = this.getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,225,"        final double[][] outData = new double[nRows][nCols];
",2,0,1,4,8,1,0,0,0,7,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,227,"        final double[] mCol = new double[nSum];
",2,0,1,2,4,1,0,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,228,"        final double[][] mData = m.data;
",6,0,0,2,4,1,0,0,0,7,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,231,"        for (int col = 0; col < nCols; col++) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,234,"            for (int mRow = 0; mRow < nSum; mRow++) {
",8,1,0,1,3,0,0,0,0,10,41,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,235,"                mCol[mRow] = mData[mRow][col];
",0,0,1,3,6,0,0,0,0,11,30,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,238,"            for (int row = 0; row < nRows; row++) {
",8,1,0,1,3,0,0,0,0,10,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,239,"                final double[] dataRow = data[row];
",2,0,1,2,4,1,0,0,0,7,35,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,240,"                double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,241,"                for (int i = 0; i < nSum; i++) {
",8,1,0,1,3,0,0,0,0,10,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,242,"                    sum += dataRow[i] * mCol[i];
",2,1,1,2,4,0,0,0,0,12,28,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,244,"                outData[row][col] = sum;
",2,0,1,2,4,0,0,0,0,9,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,248,"        return new Array2DRowRealMatrix(outData, false);
",2,0,0,1,2,1,0,2,0,5,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,263,"        return data;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,274,"                throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row);
",6,0,0,1,2,0,0,2,0,8,90,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,277,"                throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column);
",6,0,0,1,2,0,0,2,0,8,96,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,282,"                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
",4,0,0,1,2,0,0,2,0,6,61,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,287,"                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
",4,0,0,1,2,0,0,2,0,6,64,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,292,"                    throw new DimensionMismatchException(subMatrix[i].length, nCols);
",4,0,1,2,4,0,0,2,0,10,65,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,297,"            super.setSubMatrix(subMatrix, row, column);
",8,0,0,1,2,0,0,0,0,8,43,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,323,"        MatrixUtils.checkMatrixIndex(this, row, column);
",0,0,0,1,2,0,8,0,0,8,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,324,"        data[row][column] += increment;
",2,0,1,2,4,0,0,0,0,9,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,325,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,352,"        final int nRows = this.getRowDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,353,"        final int nCols = this.getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,354,"        if (v.length != nCols) {
",6,1,0,1,3,0,0,0,0,7,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,355,"            throw new DimensionMismatchException(v.length, nCols);
",6,0,0,1,2,0,0,2,0,8,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,357,"        final double[] out = new double[nRows];
",2,0,1,2,4,1,0,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,358,"        for (int row = 0; row < nRows; row++) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,359,"            final double[] dataRow = data[row];
",2,0,1,2,4,1,0,0,0,7,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,360,"            double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,361,"            for (int i = 0; i < nCols; i++) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,362,"                sum += dataRow[i] * v[i];
",2,1,1,2,4,0,0,0,0,12,25,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,364,"            out[row] = sum;
",2,0,1,1,2,0,0,0,0,7,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,366,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,376,"            throw new DimensionMismatchException(v.length, nRows);
",6,0,0,1,2,0,0,2,0,8,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,395,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,396,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,397,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,398,"        for (int i = 0; i < rows; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,399,"            final double[] rowI = data[i];
",2,0,1,2,4,1,0,0,0,7,30,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,400,"            for (int j = 0; j < columns; ++j) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,401,"                rowI[j] = visitor.visit(i, j, rowI[j]);
",0,0,1,3,6,0,8,0,0,17,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,404,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,428,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,429,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,431,"        for (int i = startRow; i <= endRow; ++i) {
",10,1,0,1,3,0,0,0,0,12,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,432,"            final double[] rowI = data[i];
",2,0,1,2,4,1,0,0,0,7,30,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,433,"            for (int j = startColumn; j <= endColumn; ++j) {
",10,1,0,1,3,0,0,0,0,12,48,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,434,"                rowI[j] = visitor.visit(i, j, rowI[j]);
",0,0,1,3,6,0,8,0,0,17,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,437,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,446,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,447,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,449,"        for (int i = startRow; i <= endRow; ++i) {
",10,1,0,1,3,0,0,0,0,12,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,450,"            final double[] rowI = data[i];
",2,0,1,2,4,1,0,0,0,7,30,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,451,"            for (int j = startColumn; j <= endColumn; ++j) {
",10,1,0,1,3,0,0,0,0,12,48,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,452,"                visitor.visit(i, j, rowI[j]);
",0,0,1,2,4,0,8,0,0,12,29,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,455,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,461,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,462,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,463,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,464,"        for (int j = 0; j < columns; ++j) {
",8,1,0,1,3,0,0,0,0,10,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,465,"            for (int i = 0; i < rows; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,466,"                final double[] rowI = data[i];
",2,0,1,2,4,1,0,0,0,7,30,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,467,"                rowI[j] = visitor.visit(i, j, rowI[j]);
",0,0,1,3,6,0,8,0,0,17,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,470,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,476,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,477,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,478,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,479,"        for (int j = 0; j < columns; ++j) {
",8,1,0,1,3,0,0,0,0,10,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,480,"            for (int i = 0; i < rows; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,481,"                visitor.visit(i, j, data[i][j]);
",0,0,1,3,6,0,8,0,0,14,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,484,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,493,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,494,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,496,"        for (int j = startColumn; j <= endColumn; ++j) {
",10,1,0,1,3,0,0,0,0,12,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,497,"            for (int i = startRow; i <= endRow; ++i) {
",10,1,0,1,3,0,0,0,0,12,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,498,"                final double[] rowI = data[i];
",2,0,1,2,4,1,0,0,0,7,30,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,499,"                rowI[j] = visitor.visit(i, j, rowI[j]);
",0,0,1,3,6,0,8,0,0,17,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,502,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,511,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,512,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,514,"        for (int j = startColumn; j <= endColumn; ++j) {
",10,1,0,1,3,0,0,0,0,12,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,515,"            for (int i = startRow; i <= endRow; ++i) {
",10,1,0,1,3,0,0,0,0,12,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,516,"                visitor.visit(i, j, data[i][j]);
",0,0,1,3,6,0,8,0,0,14,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,519,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,11,45,"        super(LocalizedFormats.DIMENSIONS_MISMATCH_2x2,
",4,0,0,0,1,0,0,0,0,4,47,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,11,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,11,54,"        return getWrongDimension(0);
",0,0,0,1,2,1,2,0,0,2,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,11,60,"        return getExpectedDimension(0);
",0,0,0,1,2,1,2,0,0,2,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,11,66,"        return getWrongDimension(1);
",0,0,0,1,2,1,2,0,0,2,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,11,72,"        return getExpectedDimension(1);
",0,0,0,1,2,1,2,0,0,2,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,11,45,"        this(LocalizedFormats.DIMENSIONS_MISMATCH, wrong, expected);
",8,0,0,1,2,0,0,0,0,8,60,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,11,46,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,11,59,"        super(specific, wrong, expected);
",6,0,0,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,11,60,"        this.wrong = wrong.clone();
",2,0,0,1,2,0,4,0,0,7,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,11,61,"        this.expected = expected.clone();
",2,0,0,1,2,0,4,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,11,62,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,11,68,"        return wrong.clone();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,11,74,"        return expected.clone();
",0,0,0,1,2,1,4,0,0,4,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,11,82,"        return wrong[index];
",0,0,1,1,2,1,0,0,0,4,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,11,89,"        return expected[index];
",0,0,1,1,2,1,0,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/NonSquareMatrixException,11,40,"        super(LocalizedFormats.NON_SQUARE_MATRIX, wrong, expected);
",8,0,0,1,2,0,0,0,0,8,59,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/NonSquareMatrixException,11,41,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,99,"        setEntry(index, getEntry(index) + increment);
",2,1,0,2,4,0,8,0,0,11,45,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,100,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,165,"        checkVectorDimensions(v.getDimension());
",0,0,0,2,4,0,6,0,0,6,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,166,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,177,"        int d = getDimension();
",2,0,0,1,2,0,2,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,178,"        if (d != n) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,179,"            throw new DimensionMismatchException(d, n);
",4,0,0,1,2,0,0,2,0,6,43,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,181,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,190,"        if (index < 0 ||
",2,2,0,0,1,0,0,0,0,4,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,192,"            throw new OutOfRangeException(LocalizedFormats.INDEX,
",4,0,0,0,1,0,0,2,0,6,53,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,195,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,208,"        final int dim = getDimension();
",2,0,0,1,2,1,2,0,0,5,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,209,"        if ((start < 0) || (start >= dim)) {
",6,3,0,3,7,0,0,0,0,9,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,210,"            throw new OutOfRangeException(LocalizedFormats.INDEX, start, 0,
",6,0,0,0,1,0,0,2,0,8,63,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,213,"        if ((end < 0) || (end >= dim)) {
",6,3,0,3,7,0,0,0,0,9,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,214,"            throw new OutOfRangeException(LocalizedFormats.INDEX, end, 0,
",6,0,0,0,1,0,0,2,0,8,61,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,217,"        if (end < start) {
",4,1,0,1,3,0,0,0,0,5,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,219,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,
",4,0,0,0,1,0,0,2,0,6,81,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,222,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,234,"        checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,235,"        RealVector result = v.copy();
",2,0,0,1,2,0,4,2,0,8,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,236,"        Iterator<Entry> it = iterator();
",2,0,0,1,2,0,2,4,0,8,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,237,"        while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,238,"            final Entry e = it.next();
",2,0,0,1,2,1,4,2,0,9,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,239,"            final int index = e.getIndex();
",2,0,0,1,2,1,4,0,0,7,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,240,"            result.setEntry(index, e.getValue() + result.getEntry(index));
",0,1,0,3,6,0,16,0,0,17,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,241,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,242,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,255,"        checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,256,"        RealVector result = v.mapMultiply(-1d);
",2,0,0,1,2,0,4,2,0,9,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,257,"        Iterator<Entry> it = iterator();
",2,0,0,1,2,0,2,4,0,8,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,258,"        while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,259,"            final Entry e = it.next();
",2,0,0,1,2,1,4,2,0,9,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,260,"            final int index = e.getIndex();
",2,0,0,1,2,1,4,0,0,7,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,261,"            result.setEntry(index, e.getValue() + result.getEntry(index));
",0,1,0,3,6,0,16,0,0,17,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,262,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,263,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,274,"        return copy().mapAddToSelf(d);
",0,0,0,2,4,1,6,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,285,"        if (d != 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,286,"            return mapToSelf(FunctionUtils.fix2ndArgument(new Add(), d));
",0,0,0,3,6,1,8,2,0,10,61,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,288,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,307,"        checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,308,"        double d = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,309,"        final int n = getDimension();
",2,0,0,1,2,1,2,0,0,5,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,310,"        for (int i = 0; i < n; i++) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,311,"            d += getEntry(i) * v.getEntry(i);
",2,1,0,2,4,0,10,0,0,14,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,313,"        return d;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,329,"        final double norm = getNorm();
",2,0,0,1,2,1,2,0,0,5,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,330,"        final double vNorm = v.getNorm();
",2,0,0,1,2,1,4,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,332,"        if (norm == 0 ||
",2,2,0,0,1,0,0,0,0,4,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,334,"            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
",4,0,0,1,2,0,0,2,0,6,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,336,"        return dotProduct(v) / (norm * vNorm);
",4,2,0,2,4,1,4,0,0,10,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,396,"        checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,397,"        double d = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,398,"        Iterator<Entry> it = iterator();
",2,0,0,1,2,0,2,4,0,8,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,399,"        while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,400,"            final Entry e = it.next();
",2,0,0,1,2,1,4,2,0,9,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,401,"            final double diff = e.getValue() - v.getEntry(e.getIndex());
",2,1,0,3,6,1,12,0,0,16,60,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,402,"            d += diff * diff;
",6,1,0,0,0,0,0,0,0,8,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,403,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,404,"        return FastMath.sqrt(d);
",0,0,0,1,2,1,6,0,0,6,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,418,"        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,419,"        Iterator<Entry> it = iterator();
",2,0,0,1,2,0,2,4,0,8,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,420,"        while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,421,"            final Entry e = it.next();
",2,0,0,1,2,1,4,2,0,9,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,422,"            final double value = e.getValue();
",2,0,0,1,2,1,4,0,0,7,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,423,"            sum += value * value;
",6,1,0,0,0,0,0,0,0,8,21,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,424,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,425,"        return FastMath.sqrt(sum);
",0,0,0,1,2,1,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,439,"        double norm = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,440,"        Iterator<Entry> it = iterator();
",2,0,0,1,2,0,2,4,0,8,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,441,"        while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,442,"            final Entry e = it.next();
",2,0,0,1,2,1,4,2,0,9,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,443,"            norm += FastMath.abs(e.getValue());
",2,0,0,2,4,0,8,0,0,11,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,444,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,445,"        return norm;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,459,"        double norm = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,460,"        Iterator<Entry> it = iterator();
",2,0,0,1,2,0,2,4,0,8,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,461,"        while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,462,"            final Entry e = it.next();
",2,0,0,1,2,1,4,2,0,9,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,463,"            norm = FastMath.max(norm, FastMath.abs(e.getValue()));
",2,0,0,3,6,0,14,0,0,17,54,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,464,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,465,"        return norm;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,481,"        checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,482,"        double d = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,483,"        Iterator<Entry> it = iterator();
",2,0,0,1,2,0,2,4,0,8,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,484,"        while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,485,"            final Entry e = it.next();
",2,0,0,1,2,1,4,2,0,9,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,486,"            d += FastMath.abs(e.getValue() - v.getEntry(e.getIndex()));
",2,1,0,4,8,0,16,0,0,20,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,487,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,488,"        return d;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,507,"        checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,508,"        double d = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,509,"        Iterator<Entry> it = iterator();
",2,0,0,1,2,0,2,4,0,8,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,510,"        while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,511,"            final Entry e = it.next();
",2,0,0,1,2,1,4,2,0,9,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,512,"            d = FastMath.max(FastMath.abs(e.getValue() - v.getEntry(e.getIndex())), d);
",2,1,0,5,10,0,22,0,0,26,75,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,513,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,514,"        return d;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,524,"        int minIndex    = -1;
",2,0,0,0,0,0,0,0,0,3,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,525,"        double minValue = Double.POSITIVE_INFINITY;
",6,0,0,0,0,0,0,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,526,"        Iterator<Entry> iterator = iterator();
",2,0,0,1,2,0,2,4,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,527,"        while (iterator.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,528,"            final Entry entry = iterator.next();
",2,0,0,1,2,1,4,2,0,9,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,529,"            if (entry.getValue() <= minValue) {
",2,1,0,2,5,0,4,0,0,7,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,530,"                minIndex = entry.getIndex();
",2,0,0,1,2,0,4,0,0,7,28,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,531,"                minValue = entry.getValue();
",2,0,0,1,2,0,4,0,0,7,28,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,533,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,534,"        return minIndex;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,544,"        final int minIndex = getMinIndex();
",2,0,0,1,2,1,2,0,0,5,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,545,"        return minIndex < 0 ? Double.NaN : getEntry(minIndex);
",6,1,0,1,2,1,4,0,0,11,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,555,"        int maxIndex    = -1;
",2,0,0,0,0,0,0,0,0,3,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,556,"        double maxValue = Double.NEGATIVE_INFINITY;
",6,0,0,0,0,0,0,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,557,"        Iterator<Entry> iterator = iterator();
",2,0,0,1,2,0,2,4,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,558,"        while (iterator.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,559,"            final Entry entry = iterator.next();
",2,0,0,1,2,1,4,2,0,9,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,560,"            if (entry.getValue() >= maxValue) {
",2,1,0,2,5,0,4,0,0,7,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,561,"                maxIndex = entry.getIndex();
",2,0,0,1,2,0,4,0,0,7,28,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,562,"                maxValue = entry.getValue();
",2,0,0,1,2,0,4,0,0,7,28,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,564,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,565,"        return maxIndex;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,575,"        final int maxIndex = getMaxIndex();
",2,0,0,1,2,1,2,0,0,5,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,576,"        return maxIndex < 0 ? Double.NaN : getEntry(maxIndex);
",6,1,0,1,2,1,4,0,0,11,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,588,"        return copy().mapMultiplyToSelf(d);
",0,0,0,2,4,1,6,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,599,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Multiply(), d));
",0,0,0,3,6,1,8,2,0,10,66,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,610,"        return copy().mapSubtractToSelf(d);
",0,0,0,2,4,1,6,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,621,"        return mapAddToSelf(-d);
",2,0,0,1,2,1,2,0,0,5,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,632,"        return copy().mapDivideToSelf(d);
",0,0,0,2,4,1,6,0,0,6,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,643,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Divide(), d));
",0,0,0,3,6,1,8,2,0,10,64,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,653,"        final int m = this.getDimension();
",2,0,0,1,2,1,2,0,0,5,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,654,"        final int n = v.getDimension();
",2,0,0,1,2,1,4,0,0,7,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,656,"        if (v instanceof SparseRealVector || this instanceof SparseRealVector) {
",2,1,0,1,3,0,0,4,0,7,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,657,"            product = new OpenMapRealMatrix(m, n);
",6,0,0,1,2,0,0,2,0,9,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,659,"            product = new Array2DRowRealMatrix(m, n);
",6,0,0,1,2,0,0,2,0,9,41,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,661,"        for (int i = 0; i < m; i++) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,662,"            for (int j = 0; j < n; j++) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,663,"                product.setEntry(i, j, this.getEntry(i) * v.getEntry(j));
",0,1,0,3,6,0,18,0,0,19,57,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,666,"        return product;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,681,"        final double norm2 = v.dotProduct(v);
",2,0,0,1,2,1,6,0,0,9,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,682,"        if (norm2 == 0.0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,683,"            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
",4,0,0,1,2,0,0,2,0,6,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,685,"        return v.mapMultiply(dotProduct(v) / v.dotProduct(v));
",0,1,0,3,6,1,14,0,0,15,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,694,"        Iterator<Entry> it = iterator();
",2,0,0,1,2,0,2,4,0,8,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,695,"        while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,696,"            final Entry e = it.next();
",2,0,0,1,2,1,4,2,0,9,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,697,"            e.setValue(value);
",0,0,0,1,2,0,6,0,0,6,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,698,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,699,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,709,"        int dim = getDimension();
",2,0,0,1,2,0,2,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,710,"        double[] values = new double[dim];
",2,0,1,2,4,0,0,0,0,4,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,711,"        for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,712,"            values[i] = getEntry(i);
",0,0,1,2,4,0,4,0,0,9,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,714,"        return values;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,725,"        final double norm = getNorm();
",2,0,0,1,2,1,2,0,0,5,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,726,"        if (norm == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,727,"            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
",4,0,0,1,2,0,0,2,0,6,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,729,"        return mapDivide(norm);
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,739,"        final double norm = getNorm();
",2,0,0,1,2,1,2,0,0,5,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,740,"        if (norm == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,741,"            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
",4,0,0,1,2,0,0,2,0,6,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,743,"        mapDivideToSelf(getNorm());
",0,0,0,2,4,0,4,0,0,4,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,744,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,767,"        return new SparseEntryIterator();
",0,0,0,1,2,1,0,2,0,2,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,781,"        final int dim = getDimension();
",2,0,0,1,2,1,2,0,0,5,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,782,"        return new Iterator<Entry>() {
",0,0,0,1,3,1,0,4,0,4,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,827,"        return copy().mapToSelf(function);
",0,0,0,2,4,1,6,0,0,6,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,844,"        Iterator<Entry> it = iterator();
",2,0,0,1,2,0,2,4,0,8,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,845,"        while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,846,"            final Entry e = it.next();
",2,0,0,1,2,1,4,2,0,9,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,847,"            e.setValue(function.value(e.getValue()));
",0,0,0,3,6,0,12,0,0,12,41,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,848,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,849,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,867,"        return copy().combineToSelf(a, b, y);
",0,0,0,2,4,1,10,0,0,10,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,884,"        checkVectorDimensions(y);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,885,"        for (int i = 0; i < getDimension(); i++) {
",6,1,0,2,5,0,2,0,0,10,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,886,"            final double xi = getEntry(i);
",2,0,0,1,2,1,4,0,0,7,30,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,887,"            final double yi = y.getEntry(i);
",2,0,0,1,2,1,6,0,0,9,32,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,888,"            setEntry(i, a * xi + b * yi);
",8,3,0,1,2,0,4,0,0,15,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,890,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,904,"        final int dim = getDimension();
",2,0,0,1,2,1,2,0,0,5,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,905,"        visitor.start(dim, 0, dim - 1);
",2,1,0,1,2,0,6,0,0,9,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,906,"        for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,907,"            visitor.visit(i, getEntry(i));
",0,0,0,2,4,0,10,0,0,10,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,909,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,928,"        checkIndices(start, end);
",0,0,0,1,2,0,6,0,0,6,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,929,"        visitor.start(getDimension(), start, end);
",0,0,0,2,4,0,10,0,0,10,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,930,"        for (int i = start; i <= end; i++) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,931,"            visitor.visit(i, getEntry(i));
",0,0,0,2,4,0,10,0,0,10,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,933,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,949,"        return walkInDefaultOrder(visitor);
",0,0,0,1,2,1,4,0,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,970,"        return walkInDefaultOrder(visitor, start, end);
",0,0,0,1,2,1,8,0,0,8,47,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,984,"        final int dim = getDimension();
",2,0,0,1,2,1,2,0,0,5,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,985,"        visitor.start(dim, 0, dim - 1);
",2,1,0,1,2,0,6,0,0,9,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,986,"        for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,987,"            setEntry(i, visitor.visit(i, getEntry(i)));
",0,0,0,3,6,0,14,0,0,14,43,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,989,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1008,"        checkIndices(start, end);
",0,0,0,1,2,0,6,0,0,6,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1009,"        visitor.start(getDimension(), start, end);
",0,0,0,2,4,0,10,0,0,10,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1010,"        for (int i = start; i <= end; i++) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1011,"            setEntry(i, visitor.visit(i, getEntry(i)));
",0,0,0,3,6,0,14,0,0,14,43,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1013,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1029,"        return walkInDefaultOrder(visitor);
",0,0,0,1,2,1,4,0,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1050,"        return walkInDefaultOrder(visitor, start, end);
",0,0,0,1,2,1,8,0,0,8,47,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1125,"        throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1138,"        throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1249,"        return new RealVector() {
",0,0,0,1,3,1,0,2,0,2,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,56,"    public ArrayRealVector() {
",2,0,0,1,3,1,0,0,0,3,26,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,57,"        data = new double[0];
",2,0,0,1,2,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,58,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,65,"    public ArrayRealVector(int size) {
",4,0,0,1,3,1,0,0,0,5,34,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,66,"        data = new double[size];
",2,0,1,1,2,0,0,0,0,5,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,67,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,75,"    public ArrayRealVector(int size, double preset) {
",6,0,0,1,3,1,0,0,0,7,49,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,76,"        data = new double[size];
",2,0,1,1,2,0,0,0,0,5,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,77,"        Arrays.fill(data, preset);
",0,0,0,1,2,0,8,0,0,8,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,78,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,104,"        throws NullArgumentException {
",2,0,0,0,1,0,0,0,0,2,30,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,105,"        if (d == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,106,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,108,"        data = copyArray ? d.clone() :  d;
",6,0,0,1,2,0,4,0,0,11,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,109,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,122,"        throws NullArgumentException, NumberIsTooLargeException {
",4,0,0,0,1,0,0,0,0,4,57,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,123,"        if (d == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,124,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,126,"        if (d.length < pos + size) {
",8,2,0,1,3,0,0,0,0,10,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,127,"            throw new NumberIsTooLargeException(pos + size, d.length, true);
",8,1,0,1,2,0,0,2,0,12,64,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,129,"        data = new double[size];
",2,0,1,1,2,0,0,0,0,5,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,130,"        System.arraycopy(d, pos, data, 0, size);
",0,0,0,1,2,0,12,0,0,12,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,131,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,138,"    public ArrayRealVector(Double[] d) {
",4,0,0,2,5,1,0,2,0,7,36,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,139,"        data = new double[d.length];
",6,0,0,1,2,0,0,0,0,7,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,140,"        for (int i = 0; i < d.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,141,"            data[i] = d[i].doubleValue();
",0,0,1,3,6,0,2,0,0,11,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,143,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,156,"        throws NullArgumentException, NumberIsTooLargeException {
",4,0,0,0,1,0,0,0,0,4,57,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,157,"        if (d == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,158,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,160,"        if (d.length < pos + size) {
",8,2,0,1,3,0,0,0,0,10,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,161,"            throw new NumberIsTooLargeException(pos + size, d.length, true);
",8,1,0,1,2,0,0,2,0,12,64,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,163,"        data = new double[size];
",2,0,1,1,2,0,0,0,0,5,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,164,"        for (int i = pos; i < pos + size; i++) {
",12,2,0,1,3,0,0,0,0,15,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,165,"            data[i - pos] = d[i].doubleValue();
",4,1,1,3,6,0,2,0,0,14,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,167,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,175,"    public ArrayRealVector(RealVector v) throws NullArgumentException {
",6,0,0,1,3,1,0,2,0,9,67,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,176,"        if (v == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,177,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,179,"        data = new double[v.getDimension()];
",2,0,0,2,4,0,4,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,180,"        for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,181,"            data[i] = v.getEntry(i);
",0,0,1,2,4,0,6,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,183,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,192,"        this(v, true);
",2,0,0,1,2,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,193,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,211,"    public ArrayRealVector(ArrayRealVector v1, ArrayRealVector v2) {
",6,0,0,1,3,1,0,4,0,11,64,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,212,"        data = new double[v1.data.length + v2.data.length];
",14,1,0,1,2,0,0,0,0,16,51,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,213,"        System.arraycopy(v1.data, 0, data, 0, v1.data.length);
",10,0,0,1,2,0,6,0,0,16,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,214,"        System.arraycopy(v2.data, 0, data, v1.data.length, v2.data.length);
",16,0,0,1,2,0,6,0,0,22,67,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,215,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,222,"    public ArrayRealVector(ArrayRealVector v1, RealVector v2) {
",6,0,0,1,3,1,0,4,0,11,59,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,223,"        final int l1 = v1.data.length;
",8,0,0,0,0,1,0,0,0,9,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,224,"        final int l2 = v2.getDimension();
",2,0,0,1,2,1,4,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,225,"        data = new double[l1 + l2];
",6,1,0,1,2,0,0,0,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,226,"        System.arraycopy(v1.data, 0, data, 0, l1);
",4,0,0,1,2,0,8,0,0,12,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,227,"        for (int i = 0; i < l2; ++i) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,228,"            data[l1 + i] = v2.getEntry(i);
",4,1,1,2,4,0,6,0,0,14,30,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,230,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,237,"    public ArrayRealVector(RealVector v1, ArrayRealVector v2) {
",6,0,0,1,3,1,0,4,0,11,59,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,238,"        final int l1 = v1.getDimension();
",2,0,0,1,2,1,4,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,239,"        final int l2 = v2.data.length;
",8,0,0,0,0,1,0,0,0,9,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,240,"        data = new double[l1 + l2];
",6,1,0,1,2,0,0,0,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,241,"        for (int i = 0; i < l1; ++i) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,242,"            data[i] = v1.getEntry(i);
",0,0,1,2,4,0,6,0,0,11,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,244,"        System.arraycopy(v2.data, 0, data, l1, l2);
",4,0,0,1,2,0,10,0,0,14,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,245,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,252,"    public ArrayRealVector(ArrayRealVector v1, double[] v2) {
",6,0,0,2,5,1,0,2,0,9,57,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,253,"        final int l1 = v1.getDimension();
",2,0,0,1,2,1,4,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,254,"        final int l2 = v2.length;
",6,0,0,0,0,1,0,0,0,7,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,255,"        data = new double[l1 + l2];
",6,1,0,1,2,0,0,0,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,256,"        System.arraycopy(v1.data, 0, data, 0, l1);
",4,0,0,1,2,0,8,0,0,12,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,257,"        System.arraycopy(v2, 0, data, l1, l2);
",0,0,0,1,2,0,12,0,0,12,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,258,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,265,"    public ArrayRealVector(double[] v1, ArrayRealVector v2) {
",6,0,0,2,5,1,0,2,0,9,57,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,266,"        final int l1 = v1.length;
",6,0,0,0,0,1,0,0,0,7,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,267,"        final int l2 = v2.getDimension();
",2,0,0,1,2,1,4,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,268,"        data = new double[l1 + l2];
",6,1,0,1,2,0,0,0,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,269,"        System.arraycopy(v1, 0, data, 0, l1);
",0,0,0,1,2,0,10,0,0,10,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,270,"        System.arraycopy(v2.data, 0, data, l1, l2);
",4,0,0,1,2,0,10,0,0,14,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,271,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,278,"    public ArrayRealVector(double[] v1, double[] v2) {
",6,0,0,3,7,1,0,0,0,7,50,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,279,"        final int l1 = v1.length;
",6,0,0,0,0,1,0,0,0,7,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,280,"        final int l2 = v2.length;
",6,0,0,0,0,1,0,0,0,7,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,281,"        data = new double[l1 + l2];
",6,1,0,1,2,0,0,0,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,282,"        System.arraycopy(v1, 0, data, 0, l1);
",0,0,0,1,2,0,10,0,0,10,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,283,"        System.arraycopy(v2, 0, data, l1, l2);
",0,0,0,1,2,0,12,0,0,12,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,284,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,296,"        if (v instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,297,"            final double[] vData = ((ArrayRealVector) v).data;
",6,0,0,3,6,1,0,2,0,9,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,298,"            final int dim = vData.length;
",6,0,0,0,0,1,0,0,0,7,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,299,"            checkVectorDimensions(dim);
",0,0,0,1,2,0,4,0,0,4,27,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,300,"            ArrayRealVector result = new ArrayRealVector(dim);
",4,0,0,1,2,0,0,4,0,8,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,301,"            double[] resultData = result.data;
",6,0,0,1,2,0,0,0,0,6,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,302,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,303,"                resultData[i] = data[i] + vData[i];
",0,1,1,3,6,0,0,0,0,14,35,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,305,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,307,"            checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,308,"            double[] out = data.clone();
",2,0,0,2,4,0,4,0,0,6,28,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,309,"            Iterator<Entry> it = v.iterator();
",2,0,0,1,2,0,4,4,0,10,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,310,"            while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,311,"                final Entry e = it.next();
",2,0,0,1,2,1,4,2,0,9,26,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,312,"                out[e.getIndex()] += e.getValue();
",0,0,1,3,6,0,8,0,0,11,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,313,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,314,"            return new ArrayRealVector(out, false);
",2,0,0,1,2,1,0,2,0,5,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,322,"        if (v instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,323,"            final double[] vData = ((ArrayRealVector) v).data;
",6,0,0,3,6,1,0,2,0,9,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,324,"            final int dim = vData.length;
",6,0,0,0,0,1,0,0,0,7,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,325,"            checkVectorDimensions(dim);
",0,0,0,1,2,0,4,0,0,4,27,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,326,"            ArrayRealVector result = new ArrayRealVector(dim);
",4,0,0,1,2,0,0,4,0,8,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,327,"            double[] resultData = result.data;
",6,0,0,1,2,0,0,0,0,6,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,328,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,329,"                resultData[i] = data[i] - vData[i];
",0,1,1,3,6,0,0,0,0,14,35,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,331,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,333,"            checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,334,"            double[] out = data.clone();
",2,0,0,2,4,0,4,0,0,6,28,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,335,"            Iterator<Entry> it = v.iterator();
",2,0,0,1,2,0,4,4,0,10,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,336,"            while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,337,"                final Entry e = it.next();
",2,0,0,1,2,1,4,2,0,9,26,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,338,"                out[e.getIndex()] -= e.getValue();
",0,0,1,3,6,0,8,0,0,11,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,339,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,340,"            return new ArrayRealVector(out, false);
",2,0,0,1,2,1,0,2,0,5,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,347,"        return copy().mapToSelf(function);
",0,0,0,2,4,1,6,0,0,6,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,353,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,354,"            data[i] = function.value(data[i]);
",0,0,1,3,6,0,4,0,0,13,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,356,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,362,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,363,"            data[i] = data[i] + d;
",2,1,1,2,4,0,0,0,0,12,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,365,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,371,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,372,"            data[i] = data[i] - d;
",2,1,1,2,4,0,0,0,0,12,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,374,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,380,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,381,"            data[i] = data[i] * d;
",2,1,1,2,4,0,0,0,0,12,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,383,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,389,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,390,"            data[i] = data[i] / d;
",2,1,1,2,4,0,0,0,0,12,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,392,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,399,"        if (v instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,400,"            final double[] vData = ((ArrayRealVector) v).data;
",6,0,0,3,6,1,0,2,0,9,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,401,"            final int dim = vData.length;
",6,0,0,0,0,1,0,0,0,7,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,402,"            checkVectorDimensions(dim);
",0,0,0,1,2,0,4,0,0,4,27,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,403,"            ArrayRealVector result = new ArrayRealVector(dim);
",4,0,0,1,2,0,0,4,0,8,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,404,"            double[] resultData = result.data;
",6,0,0,1,2,0,0,0,0,6,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,405,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,406,"                resultData[i] = data[i] * vData[i];
",0,1,1,3,6,0,0,0,0,14,35,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,408,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,410,"            checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,411,"            double[] out = data.clone();
",2,0,0,2,4,0,4,0,0,6,28,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,412,"            for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,413,"                out[i] *= v.getEntry(i);
",0,0,1,2,4,0,6,0,0,11,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,415,"            return new ArrayRealVector(out, false);
",2,0,0,1,2,1,0,2,0,5,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,423,"        if (v instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,424,"            final double[] vData = ((ArrayRealVector) v).data;
",6,0,0,3,6,1,0,2,0,9,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,425,"            final int dim = vData.length;
",6,0,0,0,0,1,0,0,0,7,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,426,"            checkVectorDimensions(dim);
",0,0,0,1,2,0,4,0,0,4,27,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,427,"            ArrayRealVector result = new ArrayRealVector(dim);
",4,0,0,1,2,0,0,4,0,8,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,428,"            double[] resultData = result.data;
",6,0,0,1,2,0,0,0,0,6,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,429,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,430,"                resultData[i] = data[i] / vData[i];
",0,1,1,3,6,0,0,0,0,14,35,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,432,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,434,"            checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,435,"            double[] out = data.clone();
",2,0,0,2,4,0,4,0,0,6,28,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,436,"            for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,437,"                out[i] /= v.getEntry(i);
",0,0,1,2,4,0,6,0,0,11,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,439,"            return new ArrayRealVector(out, false);
",2,0,0,1,2,1,0,2,0,5,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,456,"        if (v instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,457,"            final double[] vData = ((ArrayRealVector) v).data;
",6,0,0,3,6,1,0,2,0,9,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,458,"            checkVectorDimensions(vData.length);
",4,0,0,1,2,0,2,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,459,"            double dot = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,460,"            for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,461,"                dot += data[i] * vData[i];
",2,1,1,2,4,0,0,0,0,12,26,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,463,"            return dot;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,465,"        return super.dotProduct(v);
",4,0,0,1,2,1,0,0,0,4,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,471,"        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,472,"        for (double a : data) {
",4,0,0,1,3,0,0,0,0,4,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,473,"            sum += a * a;
",6,1,0,0,0,0,0,0,0,8,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,475,"        return FastMath.sqrt(sum);
",0,0,0,1,2,1,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,481,"        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,482,"        for (double a : data) {
",4,0,0,1,3,0,0,0,0,4,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,483,"            sum += FastMath.abs(a);
",2,0,0,1,2,0,6,0,0,9,23,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,485,"        return sum;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,491,"        double max = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,492,"        for (double a : data) {
",4,0,0,1,3,0,0,0,0,4,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,493,"            max = FastMath.max(max, FastMath.abs(a));
",2,0,0,2,4,0,12,0,0,15,41,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,495,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,501,"        if (v instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,502,"            final double[] vData = ((ArrayRealVector) v).data;
",6,0,0,3,6,1,0,2,0,9,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,503,"            checkVectorDimensions(vData.length);
",4,0,0,1,2,0,2,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,504,"            double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,505,"            for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,506,"                final double delta = data[i] - vData[i];
",2,1,1,2,4,1,0,0,0,12,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,507,"                sum += delta * delta;
",6,1,0,0,0,0,0,0,0,8,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,509,"            return FastMath.sqrt(sum);
",0,0,0,1,2,1,6,0,0,6,26,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,511,"            checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,512,"            double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,513,"            for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,514,"                final double delta = data[i] - v.getEntry(i);
",2,1,1,2,4,1,6,0,0,14,45,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,515,"                sum += delta * delta;
",6,1,0,0,0,0,0,0,0,8,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,517,"            return FastMath.sqrt(sum);
",0,0,0,1,2,1,6,0,0,6,26,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,525,"        if (v instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,526,"            final double[] vData = ((ArrayRealVector) v).data;
",6,0,0,3,6,1,0,2,0,9,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,527,"            checkVectorDimensions(vData.length);
",4,0,0,1,2,0,2,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,528,"            double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,529,"            for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,530,"                final double delta = data[i] - vData[i];
",2,1,1,2,4,1,0,0,0,12,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,531,"                sum += FastMath.abs(delta);
",2,0,0,1,2,0,6,0,0,9,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,533,"            return sum;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,535,"            checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,536,"            double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,537,"            for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,538,"                final double delta = data[i] - v.getEntry(i);
",2,1,1,2,4,1,6,0,0,14,45,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,539,"                sum += FastMath.abs(delta);
",2,0,0,1,2,0,6,0,0,9,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,541,"            return sum;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,549,"        if (v instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,550,"            final double[] vData = ((ArrayRealVector) v).data;
",6,0,0,3,6,1,0,2,0,9,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,551,"            checkVectorDimensions(vData.length);
",4,0,0,1,2,0,2,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,552,"            double max = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,553,"            for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,554,"                final double delta = data[i] - vData[i];
",2,1,1,2,4,1,0,0,0,12,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,555,"                max = FastMath.max(max, FastMath.abs(delta));
",2,0,0,2,4,0,12,0,0,15,45,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,557,"            return max;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,559,"            checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,560,"            double max = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,561,"            for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,562,"                final double delta = data[i] - v.getEntry(i);
",2,1,1,2,4,1,6,0,0,14,45,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,563,"                max = FastMath.max(max, FastMath.abs(delta));
",2,0,0,2,4,0,12,0,0,15,45,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,565,"            return max;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,572,"        if (v instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,573,"            final double[] vData = ((ArrayRealVector) v).data;
",6,0,0,3,6,1,0,2,0,9,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,574,"            final int m = data.length;
",6,0,0,0,0,1,0,0,0,7,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,575,"            final int n = vData.length;
",6,0,0,0,0,1,0,0,0,7,27,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,576,"            final RealMatrix out = MatrixUtils.createRealMatrix(m, n);
",2,0,0,1,2,1,8,2,0,13,58,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,577,"            for (int i = 0; i < m; i++) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,578,"                for (int j = 0; j < n; j++) {
",8,1,0,1,3,0,0,0,0,10,29,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,579,"                    out.setEntry(i, j, data[i] * vData[j]);
",0,1,1,3,6,0,8,0,0,17,39,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,582,"            return out;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,584,"            final int m = data.length;
",6,0,0,0,0,1,0,0,0,7,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,585,"            final int n = v.getDimension();
",2,0,0,1,2,1,4,0,0,7,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,586,"            final RealMatrix out = MatrixUtils.createRealMatrix(m, n);
",2,0,0,1,2,1,8,2,0,13,58,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,587,"            for (int i = 0; i < m; i++) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,588,"                for (int j = 0; j < n; j++) {
",8,1,0,1,3,0,0,0,0,10,29,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,589,"                    out.setEntry(i, j, data[i] * v.getEntry(j));
",0,1,1,3,6,0,14,0,0,19,44,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,592,"            return out;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,600,"            return data[index];
",0,0,1,1,2,1,0,0,0,4,19,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,601,"        } catch (IndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,602,"            throw new OutOfRangeException(LocalizedFormats.INDEX, index, 0,
",6,0,0,0,1,0,0,2,0,8,63,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,610,"        return data.length;
",4,0,0,0,0,1,0,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,617,"            return new ArrayRealVector(this, (ArrayRealVector) v);
",2,0,0,2,4,1,0,4,0,6,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,618,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,619,"            return new ArrayRealVector(this, v);
",2,0,0,1,2,1,0,2,0,4,36,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,630,"        return new ArrayRealVector(this, v);
",2,0,0,1,2,1,0,2,0,4,36,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,636,"        final double[] out = new double[data.length + 1];
",6,1,0,2,4,1,0,0,0,8,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,637,"        System.arraycopy(data, 0, out, 0, data.length);
",4,0,0,1,2,0,8,0,0,12,47,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,638,"        out[data.length] = in;
",6,0,1,1,2,0,0,0,0,9,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,639,"        return new ArrayRealVector(out, false);
",2,0,0,1,2,1,0,2,0,5,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,646,"        if (n < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,647,"            throw new NotPositiveException(LocalizedFormats.NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, n);
",6,0,0,1,2,0,0,2,0,8,90,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,649,"        ArrayRealVector out = new ArrayRealVector(n);
",4,0,0,1,2,0,0,4,0,8,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,651,"            System.arraycopy(data, index, out.data, 0, n);
",4,0,0,1,2,0,10,0,0,14,46,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,655,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,652,"        } catch (IndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,653,"            checkIndex(index);
",0,0,0,1,2,0,4,0,0,4,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,654,"            checkIndex(index + n - 1);
",4,2,0,1,2,0,2,0,0,8,26,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,656,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,663,"            data[index] = value;
",2,0,1,1,2,0,0,0,0,7,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,666,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,664,"        } catch (IndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,665,"            checkIndex(index);
",0,0,0,1,2,0,4,0,0,4,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,667,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,674,"        data[index] += increment;
",2,0,1,1,2,0,0,0,0,7,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,678,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,675,"        } catch(IndexOutOfBoundsException e){
",2,0,0,1,4,0,0,2,0,4,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,676,"            throw new OutOfRangeException(LocalizedFormats.INDEX,
",4,0,0,0,1,0,0,2,0,6,53,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,679,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,685,"        if (v instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,686,"            setSubVector(index, ((ArrayRealVector) v).data);
",4,0,0,3,6,0,4,2,0,10,48,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,689,"                for (int i = index; i < index + v.getDimension(); ++i) {
",10,2,0,2,5,0,4,0,0,17,56,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,690,"                    data[i] = v.getEntry(i - index);
",4,1,1,2,4,0,4,0,0,14,32,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,695,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,692,"            } catch (IndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,693,"                checkIndex(index);
",0,0,0,1,2,0,4,0,0,4,18,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,694,"                checkIndex(index + v.getDimension() - 1);
",2,2,0,2,4,0,6,0,0,10,41,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,697,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,710,"            System.arraycopy(v, 0, data, index, v.length);
",4,0,0,1,2,0,10,0,0,14,46,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,714,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,711,"        } catch (IndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,712,"            checkIndex(index);
",0,0,0,1,2,0,4,0,0,4,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,713,"            checkIndex(index + v.length - 1);
",6,2,0,1,2,0,2,0,0,10,33,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,715,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,720,"        Arrays.fill(data, value);
",0,0,0,1,2,0,8,0,0,8,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,721,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,732,"        return DEFAULT_FORMAT.format(this);
",0,0,0,1,2,1,4,0,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,745,"        checkVectorDimensions(v.getDimension());
",0,0,0,2,4,0,6,0,0,6,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,746,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,758,"        if (data.length != n) {
",6,1,0,1,3,0,0,0,0,7,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,759,"            throw new DimensionMismatchException(data.length, n);
",6,0,0,1,2,0,0,2,0,8,53,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,761,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,771,"        for (double v : data) {
",4,0,0,1,3,0,0,0,0,4,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,772,"            if (Double.isNaN(v)) {
",0,0,0,2,5,0,6,0,0,6,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,773,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,776,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,788,"        if (isNaN()) {
",0,0,0,2,5,0,2,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,789,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,792,"        for (double v : data) {
",4,0,0,1,3,0,0,0,0,4,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,793,"            if (Double.isInfinite(v)) {
",0,0,0,2,5,0,6,0,0,6,27,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,794,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,798,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,804,"        if (this == other) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,805,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,808,"        if (!(other instanceof RealVector)) {
",2,0,0,2,5,0,0,2,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,809,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,812,"        RealVector rhs = (RealVector) other;
",4,0,0,1,2,0,0,4,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,813,"        if (data.length != rhs.getDimension()) {
",4,1,0,2,5,0,4,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,814,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,817,"        if (rhs.isNaN()) {
",0,0,0,2,5,0,4,0,0,4,18,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,818,"            return this.isNaN();
",0,0,0,1,2,1,2,0,0,2,20,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,821,"        for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,822,"            if (data[i] != rhs.getEntry(i)) {
",0,1,1,3,7,0,6,0,0,11,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,823,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,826,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,834,"        if (isNaN()) {
",0,0,0,2,5,0,2,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,835,"            return 9;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,837,"        return MathUtils.hash(data);
",0,0,0,1,2,1,6,0,0,6,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,844,"        return copy().combineToSelf(a, b, y);
",0,0,0,2,4,1,10,0,0,10,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,851,"        if (y instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,852,"            final double[] yData = ((ArrayRealVector) y).data;
",6,0,0,3,6,1,0,2,0,9,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,853,"            checkVectorDimensions(yData.length);
",4,0,0,1,2,0,2,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,854,"            for (int i = 0; i < this.data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,44,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,855,"                data[i] = a * data[i] + b * yData[i];
",4,3,1,3,6,0,0,0,0,20,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,857,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,858,"            checkVectorDimensions(y);
",0,0,0,1,2,0,4,0,0,4,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,859,"            for (int i = 0; i < this.data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,44,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,860,"                data[i] = a * data[i] + b * y.getEntry(i);
",4,3,1,3,6,0,6,0,0,22,42,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,863,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,869,"        visitor.start(data.length, 0, data.length - 1);
",8,1,0,1,2,0,4,0,0,13,47,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,870,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,871,"            visitor.visit(i, data[i]);
",0,0,1,2,4,0,6,0,0,10,26,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,873,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,881,"        checkIndices(start, end);
",0,0,0,1,2,0,6,0,0,6,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,882,"        visitor.start(data.length, start, end);
",4,0,0,1,2,0,8,0,0,12,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,883,"        for (int i = start; i <= end; i++) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,884,"            visitor.visit(i, data[i]);
",0,0,1,2,4,0,6,0,0,10,26,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,886,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,896,"        return walkInDefaultOrder(visitor);
",0,0,0,1,2,1,4,0,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,908,"        return walkInDefaultOrder(visitor, start, end);
",0,0,0,1,2,1,8,0,0,8,47,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,914,"        visitor.start(data.length, 0, data.length - 1);
",8,1,0,1,2,0,4,0,0,13,47,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,915,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,916,"            data[i] = visitor.visit(i, data[i]);
",0,0,1,3,6,0,6,0,0,15,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,918,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,926,"        checkIndices(start, end);
",0,0,0,1,2,0,6,0,0,6,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,927,"        visitor.start(data.length, start, end);
",4,0,0,1,2,0,8,0,0,12,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,928,"        for (int i = start; i <= end; i++) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,929,"            data[i] = visitor.visit(i, data[i]);
",0,0,1,3,6,0,6,0,0,15,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,931,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,941,"        return walkInDefaultOrder(visitor);
",0,0,0,1,2,1,4,0,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,953,"        return walkInDefaultOrder(visitor, start, end);
",0,0,0,1,2,1,8,0,0,8,47,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,39,"public class ArrayRealVector extends RealVector implements Serializable {
",2,0,0,0,1,1,0,4,0,7,73,1,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,11,37,"        this(LocalizedFormats.NO_DATA);
",4,0,0,1,2,0,0,0,0,4,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,11,38,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,11,45,"        super(specific);
",2,0,0,1,2,0,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,11,46,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,242,"        return walkInColumnOrder(new RealMatrixPreservingVisitor() {
",0,0,0,1,4,1,2,2,0,4,60,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,257,"                this.endRow = endRow;
",4,0,0,0,0,0,0,0,0,5,21,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,258,"                columnSum   = 0;
",2,0,0,0,0,0,0,0,0,3,16,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,259,"                maxColSum   = 0;
",2,0,0,0,0,0,0,0,0,3,16,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,260,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,264,"                columnSum += FastMath.abs(value);
",2,0,0,1,2,0,6,0,0,9,33,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,265,"                if (row == endRow) {
",4,1,0,1,3,0,0,0,0,5,20,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,266,"                    maxColSum = FastMath.max(maxColSum, columnSum);
",2,0,0,1,2,0,8,0,0,11,47,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,267,"                    columnSum = 0;
",2,0,0,0,0,0,0,0,0,3,14,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,269,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,273,"                return maxColSum;
",2,0,0,0,0,1,0,0,0,2,17,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1630,"            class UnmodifiableEntry extends Entry {
",2,0,0,0,1,0,0,2,0,4,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1634,"                    return v.getEntry(getIndex());
",0,0,0,2,4,1,6,0,0,6,30,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1646,"                    throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1059,"        public Entry() {
",2,0,0,1,3,1,0,0,0,3,16,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1060,"            setIndex(0);
",0,0,0,1,2,0,2,0,0,2,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1061,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1069,"            return getEntry(getIndex());
",0,0,0,2,4,1,4,0,0,4,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1078,"            setEntry(getIndex(), value);
",0,0,0,2,4,0,6,0,0,6,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1079,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1087,"            return index;
",2,0,0,0,0,1,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1096,"            this.index = index;
",4,0,0,0,0,0,0,0,0,5,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1097,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1249,"        return new RealVector() {
",0,0,0,1,3,1,0,2,0,2,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1630,"            class UnmodifiableEntry extends Entry {
",2,0,0,0,1,0,0,2,0,4,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1258,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1264,"                return v.map(function);
",0,0,0,1,2,1,6,0,0,6,23,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1270,"                final Iterator<Entry> i = v.iterator();
",2,0,0,1,2,1,4,4,0,11,39,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1271,"                return new Iterator<Entry>() {
",0,0,0,1,3,1,0,4,0,4,30,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1301,"                final Iterator<Entry> i = v.sparseIterator();
",2,0,0,1,2,1,4,4,0,11,45,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1303,"                return new Iterator<Entry>() {
",0,0,0,1,3,1,0,4,0,4,30,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1334,"                return v.copy();
",0,0,0,1,2,1,4,0,0,4,16,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1341,"                return v.add(w);
",0,0,0,1,2,1,6,0,0,6,16,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1348,"                return v.subtract(w);
",0,0,0,1,2,1,6,0,0,6,21,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1354,"                return v.mapAdd(d);
",0,0,0,1,2,1,6,0,0,6,19,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1366,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1372,"                return v.mapSubtract(d);
",0,0,0,1,2,1,6,0,0,6,24,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1384,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1390,"                return v.mapMultiply(d);
",0,0,0,1,2,1,6,0,0,6,24,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1402,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1408,"                return v.mapDivide(d);
",0,0,0,1,2,1,6,0,0,6,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1420,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1427,"                return v.ebeMultiply(w);
",0,0,0,1,2,1,6,0,0,6,24,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1434,"                return v.ebeDivide(w);
",0,0,0,1,2,1,6,0,0,6,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1441,"                return v.dotProduct(w);
",0,0,0,1,2,1,6,0,0,6,23,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1448,"                return v.cosine(w);
",0,0,0,1,2,1,6,0,0,6,19,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1454,"                return v.getNorm();
",0,0,0,1,2,1,4,0,0,4,19,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1460,"                return v.getL1Norm();
",0,0,0,1,2,1,4,0,0,4,21,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1466,"                return v.getLInfNorm();
",0,0,0,1,2,1,4,0,0,4,23,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1473,"                return v.getDistance(w);
",0,0,0,1,2,1,6,0,0,6,24,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1480,"                return v.getL1Distance(w);
",0,0,0,1,2,1,6,0,0,6,26,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1487,"                return v.getLInfDistance(w);
",0,0,0,1,2,1,6,0,0,6,28,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1493,"                return v.unitVector();
",0,0,0,1,2,1,4,0,0,4,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1504,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1510,"                return v.outerProduct(w);
",0,0,0,1,2,1,6,0,0,6,25,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1516,"                return v.getEntry(index);
",0,0,0,1,2,1,6,0,0,6,25,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1528,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1540,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1546,"                return v.getDimension();
",0,0,0,1,2,1,4,0,0,4,24,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1552,"                return v.append(w);
",0,0,0,1,2,1,6,0,0,6,19,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1558,"                return v.append(d);
",0,0,0,1,2,1,6,0,0,6,19,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1565,"                return v.getSubVector(index, n);
",0,0,0,1,2,1,8,0,0,8,32,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1577,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1589,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1595,"                return v.toArray();
",0,0,0,1,2,1,4,0,0,4,19,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1601,"                return v.isNaN();
",0,0,0,1,2,1,4,0,0,4,17,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1607,"                return v.isInfinite();
",0,0,0,1,2,1,4,0,0,4,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1614,"                return v.combine(a, b, y);
",0,0,0,1,2,1,10,0,0,10,26,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1626,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,11,44,"        this(LocalizedFormats.UNSUPPORTED_OPERATION);
",4,0,0,1,2,0,0,0,0,4,45,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,11,45,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,11,52,"                                             Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,11,53,"        context = new ExceptionContext(this);
",2,0,0,1,2,0,0,2,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,11,54,"        context.addMessage(pattern, args);
",0,0,0,1,2,0,8,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,11,55,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,11,59,"        return context;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,11,65,"        return context.getMessage();
",0,0,0,1,2,1,4,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,11,71,"        return context.getLocalizedMessage();
",0,0,0,1,2,1,4,0,0,4,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,102,"        super(field, rows, columns);
",6,0,0,1,2,0,0,0,0,6,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,103,"        this.rows    = rows;
",4,0,0,0,0,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,104,"        this.columns = columns;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,107,"        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,0,0,0,0,12,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,108,"        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,0,0,0,0,12,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,111,"        blocks = createBlocksLayout(field, rows, columns);
",2,0,0,1,2,0,8,0,0,11,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,112,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,129,"        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);
",6,0,1,3,6,0,4,0,0,13,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,130,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,152,"        super(extractField(blockData), rows, columns);
",4,0,0,2,4,0,4,0,0,8,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,153,"        this.rows    = rows;
",4,0,0,0,0,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,154,"        this.columns = columns;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,157,"        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,0,0,0,0,12,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,158,"        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,0,0,0,0,12,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,160,"        if (copyArray) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,162,"            blocks = buildArray(getField(), blockRows * blockColumns, -1);
",6,1,0,2,4,0,4,0,0,13,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,165,"            blocks = blockData;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,168,"        int index = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,169,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,170,"            final int iHeight = blockHeight(iBlock);
",2,0,0,1,2,1,4,0,0,7,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,171,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {
",10,1,0,1,3,0,0,0,0,13,64,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,172,"                if (blockData[index].length != iHeight * blockWidth(jBlock)) {
",4,2,1,3,7,0,4,0,0,14,62,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,173,"                    throw new DimensionMismatchException(blockData[index].length,
",2,0,1,1,3,0,0,2,0,8,61,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,176,"                if (copyArray) {
",2,0,0,1,3,0,0,0,0,2,16,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,177,"                    blocks[index] = blockData[index].clone();
",0,0,1,3,6,0,2,0,0,11,41,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,181,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,210,"        final int rows         = rawData.length;
",6,0,0,0,0,1,0,0,0,7,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,211,"        final int columns      = rawData[0].length;
",4,0,1,1,2,1,0,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,212,"        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,1,0,0,0,12,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,213,"        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,1,0,0,0,12,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,216,"        for (int i = 0; i < rawData.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,217,"            final int length = rawData[i].length;
",4,0,1,1,2,1,0,0,0,9,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,218,"            if (length != columns) {
",4,1,0,1,3,0,0,0,0,5,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,219,"                throw new DimensionMismatchException(columns, length);
",4,0,0,1,2,0,0,2,0,6,54,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,224,"        final Field<T> field = extractField(rawData);
",2,0,0,1,2,1,4,4,0,11,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,225,"        final T[][] blocks = buildArray(field, blockRows * blockColumns, -1);
",6,1,0,3,6,1,4,2,0,15,69,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,226,"        int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,227,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,228,"            final int pStart  = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,229,"            final int pEnd    = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,60,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,230,"            final int iHeight = pEnd - pStart;
",6,1,0,0,0,1,0,0,0,8,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,231,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,232,"                final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,233,"                final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,62,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,234,"                final int jWidth = qEnd - qStart;
",6,1,0,0,0,1,0,0,0,8,33,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,237,"                final T[] block = buildArray(field, iHeight * jWidth);
",6,1,0,2,4,1,4,2,0,14,54,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,238,"                blocks[blockIndex] = block;
",2,0,1,1,2,0,0,0,0,7,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,241,"                int index = 0;
",2,0,0,0,0,0,0,0,0,2,14,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,242,"                for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,243,"                    System.arraycopy(rawData[p], qStart, block, index, jWidth);
",0,0,1,2,4,0,12,0,0,16,59,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,244,"                    index += jWidth;
",4,0,0,0,0,0,0,0,0,5,16,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,247,"                ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,251,"        return blocks;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,271,"        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,1,0,0,0,12,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,272,"        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,1,0,0,0,12,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,274,"        final T[][] blocks = buildArray(field, blockRows * blockColumns, -1);
",6,1,0,3,6,1,4,2,0,15,69,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,275,"        int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,276,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,277,"            final int pStart  = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,278,"            final int pEnd    = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,60,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,279,"            final int iHeight = pEnd - pStart;
",6,1,0,0,0,1,0,0,0,8,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,280,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,281,"                final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,282,"                final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,62,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,283,"                final int jWidth = qEnd - qStart;
",6,1,0,0,0,1,0,0,0,8,33,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,284,"                blocks[blockIndex] = buildArray(field, iHeight * jWidth);
",4,1,1,2,4,0,4,0,0,14,57,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,285,"                ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,289,"        return blocks;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,297,"        return new BlockFieldMatrix<T>(getField(), rowDimension,
",2,0,0,1,3,1,2,4,0,8,56,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,306,"        BlockFieldMatrix<T> copied = new BlockFieldMatrix<T>(getField(), rows, columns);
",6,0,0,2,4,0,2,8,0,16,80,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,309,"        for (int i = 0; i < blocks.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,310,"            System.arraycopy(blocks[i], 0, copied.blocks[i], 0, blocks[i].length);
",6,0,1,4,8,0,4,0,0,20,70,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,313,"        return copied;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,321,"            return add((BlockFieldMatrix<T>) m);
",2,0,0,2,4,1,2,4,0,8,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,322,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,325,"            checkAdditionCompatible(m);
",0,0,0,1,2,0,4,0,0,4,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,327,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);
",6,0,0,2,4,1,2,8,0,17,83,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,330,"            int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,331,"            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {
",10,1,0,1,3,0,0,0,0,12,56,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,332,"                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {
",10,1,0,1,3,0,0,0,0,12,59,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,335,"                    final T[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,2,0,11,44,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,336,"                    final T[] tBlock   = blocks[blockIndex];
",2,0,1,2,4,1,0,2,0,9,40,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,337,"                    final int      pStart   = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,338,"                    final int      pEnd     = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,66,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,339,"                    final int      qStart   = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,340,"                    final int      qEnd     = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,69,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,341,"                    int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,342,"                    for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,343,"                        for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,344,"                            outBlock[k] = tBlock[k].add(m.getEntry(p, q));
",0,0,1,4,8,0,10,0,0,19,46,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,345,"                            ++k;
",2,0,0,0,0,0,0,0,0,3,4,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,350,"                    ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,355,"            return out;
",2,0,0,0,0,1,0,0,0,2,11,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,371,"        checkAdditionCompatible(m);
",0,0,0,1,2,0,4,0,0,4,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,373,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);
",6,0,0,2,4,1,2,8,0,17,83,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,376,"        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {
",12,1,0,1,3,0,0,0,0,14,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,377,"            final T[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,2,0,11,44,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,378,"            final T[] tBlock   = blocks[blockIndex];
",2,0,1,2,4,1,0,2,0,9,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,379,"            final T[] mBlock   = m.blocks[blockIndex];
",6,0,1,2,4,1,0,2,0,11,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,380,"            for (int k = 0; k < outBlock.length; ++k) {
",10,1,0,1,3,0,0,0,0,12,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,381,"                outBlock[k] = tBlock[k].add(mBlock[k]);
",0,0,1,4,8,0,2,0,0,15,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,385,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,393,"            return subtract((BlockFieldMatrix<T>) m);
",2,0,0,2,4,1,2,4,0,8,41,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,394,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,397,"            checkSubtractionCompatible(m);
",0,0,0,1,2,0,4,0,0,4,30,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,399,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);
",6,0,0,2,4,1,2,8,0,17,83,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,402,"            int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,403,"            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {
",10,1,0,1,3,0,0,0,0,12,56,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,404,"                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {
",10,1,0,1,3,0,0,0,0,12,59,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,407,"                    final T[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,2,0,11,44,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,408,"                    final T[] tBlock   = blocks[blockIndex];
",2,0,1,2,4,1,0,2,0,9,40,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,409,"                    final int      pStart   = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,410,"                    final int      pEnd     = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,66,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,411,"                    final int      qStart   = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,412,"                    final int      qEnd     = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,69,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,413,"                    int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,414,"                    for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,415,"                        for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,416,"                            outBlock[k] = tBlock[k].subtract(m.getEntry(p, q));
",0,0,1,4,8,0,10,0,0,19,51,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,417,"                            ++k;
",2,0,0,0,0,0,0,0,0,3,4,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,422,"                    ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,427,"            return out;
",2,0,0,0,0,1,0,0,0,2,11,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,441,"        checkSubtractionCompatible(m);
",0,0,0,1,2,0,4,0,0,4,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,443,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);
",6,0,0,2,4,1,2,8,0,17,83,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,446,"        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {
",12,1,0,1,3,0,0,0,0,14,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,447,"            final T[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,2,0,11,44,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,448,"            final T[] tBlock   = blocks[blockIndex];
",2,0,1,2,4,1,0,2,0,9,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,449,"            final T[] mBlock   = m.blocks[blockIndex];
",6,0,1,2,4,1,0,2,0,11,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,450,"            for (int k = 0; k < outBlock.length; ++k) {
",10,1,0,1,3,0,0,0,0,12,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,451,"                outBlock[k] = tBlock[k].subtract(mBlock[k]);
",0,0,1,4,8,0,2,0,0,15,44,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,455,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,461,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);
",6,0,0,2,4,1,2,8,0,17,83,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,464,"        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {
",12,1,0,1,3,0,0,0,0,14,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,465,"            final T[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,2,0,11,44,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,466,"            final T[] tBlock   = blocks[blockIndex];
",2,0,1,2,4,1,0,2,0,9,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,467,"            for (int k = 0; k < outBlock.length; ++k) {
",10,1,0,1,3,0,0,0,0,12,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,468,"                outBlock[k] = tBlock[k].add(d);
",0,0,1,3,6,0,4,0,0,13,31,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,472,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,479,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);
",6,0,0,2,4,1,2,8,0,17,83,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,482,"        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {
",12,1,0,1,3,0,0,0,0,14,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,483,"            final T[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,2,0,11,44,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,484,"            final T[] tBlock   = blocks[blockIndex];
",2,0,1,2,4,1,0,2,0,9,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,485,"            for (int k = 0; k < outBlock.length; ++k) {
",10,1,0,1,3,0,0,0,0,12,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,486,"                outBlock[k] = tBlock[k].multiply(d);
",0,0,1,3,6,0,4,0,0,13,36,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,490,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,498,"            return multiply((BlockFieldMatrix<T>) m);
",2,0,0,2,4,1,2,4,0,8,41,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,499,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,502,"            checkMultiplicationCompatible(m);
",0,0,0,1,2,0,4,0,0,4,33,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,504,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, m.getColumnDimension());
",4,0,0,3,6,1,6,8,0,19,98,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,505,"            final T zero = getField().getZero();
",2,0,0,2,4,1,4,2,0,9,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,508,"            int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,509,"            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {
",10,1,0,1,3,0,0,0,0,12,56,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,511,"                final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,512,"                final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,59,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,514,"                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {
",10,1,0,1,3,0,0,0,0,12,59,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,516,"                    final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,517,"                    final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, m.getColumnDimension());
",6,1,0,2,4,1,8,0,0,16,77,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,520,"                    final T[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,2,0,11,44,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,523,"                    for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {
",8,1,0,1,3,0,0,0,0,10,55,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,524,"                        final int kWidth      = blockWidth(kBlock);
",2,0,0,1,2,1,4,0,0,7,43,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,525,"                        final T[] tBlock = blocks[iBlock * blockColumns + kBlock];
",8,2,1,2,4,1,0,2,0,15,58,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,526,"                        final int rStart      = kBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,44,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,527,"                        int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,528,"                        for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,529,"                            final int lStart = (p - pStart) * kWidth;
",8,2,0,1,2,1,0,0,0,11,41,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,530,"                            final int lEnd   = lStart + kWidth;
",6,1,0,0,0,1,0,0,0,8,35,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,531,"                            for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,532,"                                T sum = zero;
",4,0,0,0,0,0,0,2,0,6,13,17,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,533,"                                int r = rStart;
",4,0,0,0,0,0,0,0,0,4,15,18,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,534,"                                for (int l = lStart; l < lEnd; ++l) {
",10,1,0,1,3,0,0,0,0,12,37,17,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,535,"                                    sum = sum.add(tBlock[l].multiply(m.getEntry(r, q)));
",2,0,1,4,8,0,14,0,0,21,52,19,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,536,"                                    ++r;
",2,0,0,0,0,0,0,0,0,3,4,19,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,538,"                                outBlock[k] = outBlock[k].add(sum);
",0,0,1,3,6,0,4,0,0,13,35,17,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,539,"                                ++k;
",2,0,0,0,0,0,0,0,0,3,4,17,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,545,"                    ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,550,"            return out;
",2,0,0,0,0,1,0,0,0,2,11,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,565,"        checkMultiplicationCompatible(m);
",0,0,0,1,2,0,4,0,0,4,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,567,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, m.columns);
",8,0,0,2,4,1,2,8,0,19,85,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,568,"        final T zero = getField().getZero();
",2,0,0,2,4,1,4,2,0,9,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,571,"        int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,572,"        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {
",10,1,0,1,3,0,0,0,0,12,56,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,574,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,575,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,577,"            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {
",10,1,0,1,3,0,0,0,0,12,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,578,"                final int jWidth = out.blockWidth(jBlock);
",2,0,0,1,2,1,6,0,0,9,42,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,579,"                final int jWidth2 = jWidth  + jWidth;
",6,1,0,0,0,1,0,0,0,8,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,580,"                final int jWidth3 = jWidth2 + jWidth;
",6,1,0,0,0,1,0,0,0,8,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,581,"                final int jWidth4 = jWidth3 + jWidth;
",6,1,0,0,0,1,0,0,0,8,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,584,"                final T[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,2,0,11,44,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,587,"                for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {
",8,1,0,1,3,0,0,0,0,10,55,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,588,"                    final int kWidth = blockWidth(kBlock);
",2,0,0,1,2,1,4,0,0,7,38,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,589,"                    final T[] tBlock = blocks[iBlock * blockColumns + kBlock];
",8,2,1,2,4,1,0,2,0,15,58,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,590,"                    final T[] mBlock = m.blocks[kBlock * m.blockColumns + jBlock];
",14,2,0,2,4,1,0,2,0,19,62,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,591,"                    int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,592,"                    for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,593,"                        final int lStart = (p - pStart) * kWidth;
",8,2,0,1,2,1,0,0,0,11,41,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,594,"                        final int lEnd   = lStart + kWidth;
",6,1,0,0,0,1,0,0,0,8,35,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,595,"                        for (int nStart = 0; nStart < jWidth; ++nStart) {
",8,1,0,1,3,0,0,0,0,10,49,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,596,"                            T sum = zero;
",4,0,0,0,0,0,0,2,0,6,13,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,597,"                            int l = lStart;
",4,0,0,0,0,0,0,0,0,4,15,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,598,"                            int n = nStart;
",4,0,0,0,0,0,0,0,0,4,15,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,599,"                            while (l < lEnd - 3) {
",4,2,0,1,3,0,0,0,0,6,22,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,600,"                                sum = sum.
",2,0,0,0,0,0,2,0,0,5,10,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,605,"                                l += 4;
",2,0,0,0,0,0,0,0,0,3,7,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,606,"                                n += jWidth4;
",4,0,0,0,0,0,0,0,0,5,13,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,608,"                            while (l < lEnd) {
",4,1,0,1,3,0,0,0,0,5,18,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,609,"                                sum = sum.add(tBlock[l++].multiply(mBlock[n]));
",4,0,1,4,8,0,6,0,0,18,47,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,610,"                                n += jWidth;
",4,0,0,0,0,0,0,0,0,5,12,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,612,"                            outBlock[k] = outBlock[k].add(sum);
",0,0,1,3,6,0,4,0,0,13,35,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,613,"                            ++k;
",2,0,0,0,0,0,0,0,0,3,4,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,619,"                ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,623,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,630,"        final T[][] data = buildArray(getField(), getRowDimension(), getColumnDimension());
",2,0,0,6,12,1,8,2,0,13,83,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,631,"        final int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;
",8,3,0,1,2,1,0,0,0,12,66,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,633,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,634,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,635,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,636,"            int regularPos   = 0;
",2,0,0,0,0,0,0,0,0,2,21,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,637,"            int lastPos      = 0;
",2,0,0,0,0,0,0,0,0,2,21,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,638,"            for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,639,"                final T[] dataP = data[p];
",2,0,1,2,4,1,0,2,0,9,26,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,640,"                int blockIndex = iBlock * blockColumns;
",6,1,0,0,0,0,0,0,0,7,39,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,641,"                int dataPos    = 0;
",2,0,0,0,0,0,0,0,0,2,19,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,642,"                for (int jBlock = 0; jBlock < blockColumns - 1; ++jBlock) {
",8,2,0,1,3,0,0,0,0,11,59,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,643,"                    System.arraycopy(blocks[blockIndex++], regularPos, dataP, dataPos, BLOCK_SIZE);
",2,0,1,2,4,0,12,0,0,17,79,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,644,"                    dataPos += BLOCK_SIZE;
",4,0,0,0,0,0,0,0,0,5,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,646,"                System.arraycopy(blocks[blockIndex], lastPos, dataP, dataPos, lastColumns);
",0,0,1,2,4,0,12,0,0,16,75,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,647,"                regularPos += BLOCK_SIZE;
",4,0,0,0,0,0,0,0,0,5,25,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,648,"                lastPos    += lastColumns;
",4,0,0,0,0,0,0,0,0,5,26,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,652,"        return data;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,662,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,665,"        final BlockFieldMatrix<T> out =
",2,0,0,0,0,1,0,4,0,7,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,669,"        final int blockStartRow    = startRow    / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,670,"        final int rowsShift        = startRow    % BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,671,"        final int blockStartColumn = startColumn / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,672,"        final int columnsShift     = startColumn % BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,675,"        int pBlock = blockStartRow;
",4,0,0,0,0,0,0,0,0,4,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,676,"        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {
",10,1,0,1,3,0,0,0,0,12,56,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,677,"            final int iHeight = out.blockHeight(iBlock);
",2,0,0,1,2,1,6,0,0,9,44,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,678,"            int qBlock = blockStartColumn;
",4,0,0,0,0,0,0,0,0,4,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,679,"            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {
",10,1,0,1,3,0,0,0,0,12,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,680,"                final int jWidth = out.blockWidth(jBlock);
",2,0,0,1,2,1,6,0,0,9,42,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,683,"                final int      outIndex = iBlock * out.blockColumns + jBlock;
",10,2,0,0,0,1,0,0,0,13,61,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,684,"                final T[] outBlock = out.blocks[outIndex];
",6,0,1,2,4,1,0,2,0,11,42,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,685,"                final int      index    = pBlock * blockColumns + qBlock;
",8,2,0,0,0,1,0,0,0,11,57,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,686,"                final int      width    = blockWidth(qBlock);
",2,0,0,1,2,1,4,0,0,7,45,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,688,"                final int heightExcess = iHeight + rowsShift - BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,58,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,689,"                final int widthExcess  = jWidth + columnsShift - BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,60,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,690,"                if (heightExcess > 0) {
",2,1,0,1,3,0,0,0,0,3,23,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,692,"                    if (widthExcess > 0) {
",2,1,0,1,3,0,0,0,0,3,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,694,"                        final int width2 = blockWidth(qBlock + 1);
",4,1,0,1,2,1,2,0,0,8,42,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,695,"                        copyBlockPart(blocks[index], width,
",0,0,1,1,3,0,4,0,0,8,35,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,699,"                        copyBlockPart(blocks[index + 1], width2,
",2,1,1,1,3,0,4,0,0,9,40,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,703,"                        copyBlockPart(blocks[index + blockColumns], width,
",4,1,1,1,3,0,4,0,0,11,50,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,707,"                        copyBlockPart(blocks[index + blockColumns + 1], width2,
",4,1,1,1,3,0,4,0,0,11,55,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,711,"                    } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,713,"                        copyBlockPart(blocks[index], width,
",0,0,1,1,3,0,4,0,0,8,35,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,717,"                        copyBlockPart(blocks[index + blockColumns], width,
",4,1,1,1,3,0,4,0,0,11,50,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,724,"                    if (widthExcess > 0) {
",2,1,0,1,3,0,0,0,0,3,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,726,"                        final int width2 = blockWidth(qBlock + 1);
",4,1,0,1,2,1,2,0,0,8,42,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,727,"                        copyBlockPart(blocks[index], width,
",0,0,1,1,3,0,4,0,0,8,35,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,731,"                        copyBlockPart(blocks[index + 1], width2,
",2,1,1,1,3,0,4,0,0,9,40,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,735,"                    } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,737,"                        copyBlockPart(blocks[index], width,
",0,0,1,1,3,0,4,0,0,8,35,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,743,"                ++qBlock;
",2,0,0,0,0,0,0,0,0,3,9,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,745,"            ++pBlock;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,748,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,771,"        final int length = srcEndColumn - srcStartColumn;
",6,1,0,0,0,1,0,0,0,8,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,772,"        int srcPos = srcStartRow * srcWidth + srcStartColumn;
",8,2,0,0,0,0,0,0,0,10,53,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,773,"        int dstPos = dstStartRow * dstWidth + dstStartColumn;
",8,2,0,0,0,0,0,0,0,10,53,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,774,"        for (int srcRow = srcStartRow; srcRow < srcEndRow; ++srcRow) {
",10,1,0,1,3,0,0,0,0,12,62,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,775,"            System.arraycopy(srcBlock, srcPos, dstBlock, dstPos, length);
",0,0,0,1,2,0,14,0,0,14,61,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,776,"            srcPos += srcWidth;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,777,"            dstPos += dstWidth;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,779,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,788,"        MathUtils.checkNotNull(subMatrix);
",0,0,0,1,2,0,6,0,0,6,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,789,"        final int refLength = subMatrix[0].length;
",4,0,1,1,2,1,0,0,0,7,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,790,"        if (refLength == 0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,791,"            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
",4,0,0,1,2,0,0,2,0,6,64,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,793,"        final int endRow    = row + subMatrix.length - 1;
",8,2,0,0,0,1,0,0,0,11,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,794,"        final int endColumn = column + refLength - 1;
",6,2,0,0,0,1,0,0,0,9,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,795,"        checkSubMatrixIndex(row, endRow, column, endColumn);
",0,0,0,1,2,0,10,0,0,10,52,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,796,"        for (final T[] subRow : subMatrix) {
",4,0,0,2,5,1,0,2,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,797,"            if (subRow.length != refLength) {
",6,1,0,1,3,0,0,0,0,7,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,798,"                throw new DimensionMismatchException(refLength, subRow.length);
",6,0,0,1,2,0,0,2,0,8,63,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,803,"        final int blockStartRow    = row / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,804,"        final int blockEndRow      = (endRow + BLOCK_SIZE) / BLOCK_SIZE;
",8,2,0,1,2,1,0,0,0,11,64,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,805,"        final int blockStartColumn = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,806,"        final int blockEndColumn   = (endColumn + BLOCK_SIZE) / BLOCK_SIZE;
",8,2,0,1,2,1,0,0,0,11,67,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,809,"        for (int iBlock = blockStartRow; iBlock < blockEndRow; ++iBlock) {
",10,1,0,1,3,0,0,0,0,12,66,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,810,"            final int iHeight  = blockHeight(iBlock);
",2,0,0,1,2,1,4,0,0,7,41,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,811,"            final int firstRow = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,41,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,812,"            final int iStart   = FastMath.max(row,    firstRow);
",2,0,0,1,2,1,8,0,0,11,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,813,"            final int iEnd     = FastMath.min(endRow + 1, firstRow + iHeight);
",8,2,0,1,2,1,4,0,0,15,66,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,815,"            for (int jBlock = blockStartColumn; jBlock < blockEndColumn; ++jBlock) {
",10,1,0,1,3,0,0,0,0,12,72,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,816,"                final int jWidth      = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,43,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,817,"                final int firstColumn = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,44,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,818,"                final int jStart      = FastMath.max(column,    firstColumn);
",2,0,0,1,2,1,8,0,0,11,61,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,819,"                final int jEnd        = FastMath.min(endColumn + 1, firstColumn + jWidth);
",8,2,0,1,2,1,4,0,0,15,74,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,820,"                final int jLength     = jEnd - jStart;
",6,1,0,0,0,1,0,0,0,8,38,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,823,"                final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,824,"                for (int i = iStart; i < iEnd; ++i) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,825,"                    System.arraycopy(subMatrix[i - row], jStart - column,
",8,2,1,1,3,0,4,0,0,16,53,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,832,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,838,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,839,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), 1, columns);
",4,0,0,2,4,1,2,8,0,15,80,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,842,"        final int iBlock  = row / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,843,"        final int iRow    = row - iBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,844,"        int outBlockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,845,"        int outIndex      = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,846,"        T[] outBlock = out.blocks[outBlockIndex];
",6,0,1,2,4,0,0,2,0,10,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,847,"        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,848,"            final int jWidth     = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,849,"            final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,850,"            final int available  = outBlock.length - outIndex;
",8,1,0,0,0,1,0,0,0,10,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,851,"            if (jWidth > available) {
",4,1,0,1,3,0,0,0,0,5,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,852,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, available);
",4,1,0,1,2,0,12,0,0,17,70,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,853,"                outBlock = out.blocks[++outBlockIndex];
",8,0,0,1,2,0,0,0,0,10,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,854,"                System.arraycopy(block, iRow * jWidth, outBlock, 0, jWidth - available);
",8,2,0,1,2,0,8,0,0,18,72,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,855,"                outIndex = jWidth - available;
",6,1,0,0,0,0,0,0,0,8,30,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,857,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, jWidth);
",4,1,0,1,2,0,12,0,0,17,67,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,858,"                outIndex += jWidth;
",4,0,0,0,0,0,0,0,0,5,19,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,862,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,870,"            setRowMatrix(row, (BlockFieldMatrix<T>) matrix);
",2,0,0,2,4,0,4,4,0,10,48,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,873,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,871,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,872,"            super.setRowMatrix(row, matrix);
",6,0,0,1,2,0,0,0,0,6,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,874,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,889,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,890,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,891,"        if ((matrix.getRowDimension() != 1) ||
",0,2,0,2,5,0,4,0,0,6,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,893,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),
",0,0,0,1,3,0,4,2,0,6,68,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,899,"        final int iBlock = row / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,900,"        final int iRow   = row - iBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,901,"        int mBlockIndex  = 0;
",2,0,0,0,0,0,0,0,0,2,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,902,"        int mIndex       = 0;
",2,0,0,0,0,0,0,0,0,2,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,903,"        T[] mBlock  = matrix.blocks[mBlockIndex];
",6,0,1,2,4,0,0,2,0,10,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,904,"        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,905,"            final int jWidth     = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,906,"            final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,907,"            final int available  = mBlock.length - mIndex;
",8,1,0,0,0,1,0,0,0,10,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,908,"            if (jWidth > available) {
",4,1,0,1,3,0,0,0,0,5,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,909,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, available);
",4,1,0,1,2,0,12,0,0,17,66,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,910,"                mBlock = matrix.blocks[++mBlockIndex];
",8,0,0,1,2,0,0,0,0,10,38,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,911,"                System.arraycopy(mBlock, 0, block, iRow * jWidth, jWidth - available);
",8,2,0,1,2,0,8,0,0,18,70,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,912,"                mIndex = jWidth - available;
",6,1,0,0,0,0,0,0,0,8,28,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,914,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, jWidth);
",4,1,0,1,2,0,12,0,0,17,63,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,915,"                mIndex += jWidth;
",4,0,0,0,0,0,0,0,0,5,17,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,918,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,924,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,925,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, 1);
",4,0,0,2,4,1,2,8,0,15,77,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,928,"        final int jBlock  = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,929,"        final int jColumn = column - jBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,930,"        final int jWidth  = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,931,"        int outBlockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,932,"        int outIndex      = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,933,"        T[] outBlock = out.blocks[outBlockIndex];
",6,0,1,2,4,0,0,2,0,10,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,934,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,935,"            final int iHeight = blockHeight(iBlock);
",2,0,0,1,2,1,4,0,0,7,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,936,"            final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,937,"            for (int i = 0; i < iHeight; ++i) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,938,"                if (outIndex >= outBlock.length) {
",6,1,0,1,3,0,0,0,0,7,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,939,"                    outBlock = out.blocks[++outBlockIndex];
",8,0,0,1,2,0,0,0,0,10,39,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,940,"                    outIndex = 0;
",2,0,0,0,0,0,0,0,0,3,13,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,942,"                outBlock[outIndex++] = block[i * jWidth + jColumn];
",8,2,1,2,4,0,0,0,0,16,51,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,946,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,954,"            setColumnMatrix(column, (BlockFieldMatrix<T>) matrix);
",2,0,0,2,4,0,4,4,0,10,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,957,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,955,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,956,"            super.setColumnMatrix(column, matrix);
",6,0,0,1,2,0,0,0,0,6,38,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,958,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,973,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,974,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,975,"        if ((matrix.getRowDimension() != nRows) ||
",2,2,0,2,5,0,4,0,0,8,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,977,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),
",0,0,0,1,3,0,4,2,0,6,68,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,983,"        final int jBlock  = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,984,"        final int jColumn = column - jBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,985,"        final int jWidth  = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,986,"        int mBlockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,987,"        int mIndex      = 0;
",2,0,0,0,0,0,0,0,0,2,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,988,"        T[] mBlock = matrix.blocks[mBlockIndex];
",6,0,1,2,4,0,0,2,0,10,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,989,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,990,"            final int iHeight = blockHeight(iBlock);
",2,0,0,1,2,1,4,0,0,7,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,991,"            final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,992,"            for (int i = 0; i < iHeight; ++i) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,993,"                if (mIndex >= mBlock.length) {
",6,1,0,1,3,0,0,0,0,7,30,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,994,"                    mBlock = matrix.blocks[++mBlockIndex];
",8,0,0,1,2,0,0,0,0,10,38,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,995,"                    mIndex = 0;
",2,0,0,0,0,0,0,0,0,3,11,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,997,"                block[i * jWidth + jColumn] = mBlock[mIndex++];
",8,2,1,2,4,0,0,0,0,16,47,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1000,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1006,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1007,"        final T[] outData = buildArray(getField(), columns);
",2,0,0,3,6,1,6,2,0,11,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1010,"        final int iBlock  = row / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1011,"        final int iRow    = row - iBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1012,"        int outIndex      = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1013,"        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1014,"            final int jWidth     = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1015,"            final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1016,"            System.arraycopy(block, iRow * jWidth, outData, outIndex, jWidth);
",4,1,0,1,2,0,12,0,0,17,66,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1017,"            outIndex += jWidth;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1020,"        return new ArrayFieldVector<T>(getField(), outData, false);
",2,0,0,2,4,1,2,4,0,9,59,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1028,"            setRow(row, ((ArrayFieldVector<T>) vector).getDataRef());
",2,0,0,4,8,0,6,4,0,12,57,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1031,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1029,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1030,"            super.setRowVector(row, vector);
",6,0,0,1,2,0,0,0,0,6,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1032,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1038,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1039,"        final T[] outData = buildArray(getField(), rows);
",2,0,0,3,6,1,6,2,0,11,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1042,"        final int jBlock  = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1043,"        final int jColumn = column - jBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1044,"        final int jWidth  = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1045,"        int outIndex      = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1046,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1047,"            final int iHeight = blockHeight(iBlock);
",2,0,0,1,2,1,4,0,0,7,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1048,"            final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1049,"            for (int i = 0; i < iHeight; ++i) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1050,"                outData[outIndex++] = block[i * jWidth + jColumn];
",8,2,1,2,4,0,0,0,0,16,50,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1054,"        return new ArrayFieldVector<T>(getField(), outData, false);
",2,0,0,2,4,1,2,4,0,9,59,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1062,"            setColumn(column, ((ArrayFieldVector<T>) vector).getDataRef());
",2,0,0,4,8,0,6,4,0,12,63,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1065,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1063,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1064,"            super.setColumnVector(column, vector);
",6,0,0,1,2,0,0,0,0,6,38,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1066,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1071,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1072,"        final T[] out = buildArray(getField(), columns);
",2,0,0,3,6,1,6,2,0,11,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1075,"        final int iBlock  = row / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1076,"        final int iRow    = row - iBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1077,"        int outIndex      = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1078,"        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1079,"            final int jWidth     = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1080,"            final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1081,"            System.arraycopy(block, iRow * jWidth, out, outIndex, jWidth);
",4,1,0,1,2,0,12,0,0,17,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1082,"            outIndex += jWidth;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1085,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1092,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1093,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1094,"        if (array.length != nCols) {
",6,1,0,1,3,0,0,0,0,7,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1095,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);
",6,0,0,1,2,0,0,2,0,8,70,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1099,"        final int iBlock  = row / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1100,"        final int iRow    = row - iBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1101,"        int outIndex      = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1102,"        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1103,"            final int jWidth     = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1104,"            final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1105,"            System.arraycopy(array, outIndex, block, iRow * jWidth, jWidth);
",4,1,0,1,2,0,12,0,0,17,64,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1106,"            outIndex += jWidth;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1108,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1113,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1114,"        final T[] out = buildArray(getField(), rows);
",2,0,0,3,6,1,6,2,0,11,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1117,"        final int jBlock  = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1118,"        final int jColumn = column - jBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1119,"        final int jWidth  = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1120,"        int outIndex      = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1121,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1122,"            final int iHeight = blockHeight(iBlock);
",2,0,0,1,2,1,4,0,0,7,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1123,"            final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1124,"            for (int i = 0; i < iHeight; ++i) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1125,"                out[outIndex++] = block[i * jWidth + jColumn];
",8,2,1,2,4,0,0,0,0,16,46,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1129,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1136,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1137,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1138,"        if (array.length != nRows) {
",6,1,0,1,3,0,0,0,0,7,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1139,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);
",6,0,0,1,2,0,0,2,0,8,70,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1143,"        final int jBlock  = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1144,"        final int jColumn = column - jBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1145,"        final int jWidth  = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1146,"        int outIndex      = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1147,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1148,"            final int iHeight = blockHeight(iBlock);
",2,0,0,1,2,1,4,0,0,7,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1149,"            final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1150,"            for (int i = 0; i < iHeight; ++i) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1151,"                block[i * jWidth + jColumn] = array[outIndex++];
",8,2,1,2,4,0,0,0,0,16,48,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1154,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1160,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1161,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1163,"        final int iBlock = row    / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1164,"        final int jBlock = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1165,"        final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
",8,4,0,2,4,1,4,0,0,17,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1168,"        return blocks[iBlock * blockColumns + jBlock][k];
",6,2,1,2,4,1,0,0,0,12,49,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1175,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1176,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1178,"        final int iBlock = row    / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1179,"        final int jBlock = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1180,"        final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
",8,4,0,2,4,1,4,0,0,17,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1183,"        blocks[iBlock * blockColumns + jBlock][k] = value;
",8,2,1,2,4,0,0,0,0,15,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1184,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1190,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1191,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1193,"        final int iBlock = row    / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1194,"        final int jBlock = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1195,"        final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
",8,4,0,2,4,1,4,0,0,17,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1197,"        final T[] blockIJ = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,59,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1199,"        blockIJ[k] = blockIJ[k].add(increment);
",0,0,1,3,6,0,4,0,0,13,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1200,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1206,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1207,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1209,"        final int iBlock = row    / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1210,"        final int jBlock = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1211,"        final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
",8,4,0,2,4,1,4,0,0,17,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1213,"        final T[] blockIJ = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,59,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1215,"        blockIJ[k] = blockIJ[k].multiply(factor);
",0,0,1,3,6,0,4,0,0,13,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1216,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1221,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1222,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1223,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), nCols, nRows);
",6,0,0,2,4,1,2,8,0,17,82,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1226,"        int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1227,"        for (int iBlock = 0; iBlock < blockColumns; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1228,"            for (int jBlock = 0; jBlock < blockRows; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1231,"                final T[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,2,0,11,44,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1232,"                final T[] tBlock   = blocks[jBlock * blockColumns + iBlock];
",8,2,1,2,4,1,0,2,0,15,60,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1233,"                final int      pStart   = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,46,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1234,"                final int      pEnd     = FastMath.min(pStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,69,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1235,"                final int      qStart   = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,46,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1236,"                final int      qEnd     = FastMath.min(qStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,66,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1237,"                int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1238,"                for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1239,"                    final int lInc = pEnd - pStart;
",6,1,0,0,0,1,0,0,0,8,31,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1240,"                    int l = p - pStart;
",6,1,0,0,0,0,0,0,0,7,19,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1241,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1242,"                        outBlock[k] = tBlock[l];
",0,0,1,2,4,0,0,0,0,9,24,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1243,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1244,"                        l+= lInc;
",4,0,0,0,0,0,0,0,0,5,9,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1249,"                ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1254,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1260,"        return rows;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1266,"        return columns;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1272,"        if (v.length != columns) {
",6,1,0,1,3,0,0,0,0,7,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1273,"            throw new DimensionMismatchException(v.length, columns);
",6,0,0,1,2,0,0,2,0,8,56,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1275,"        final T[] out = buildArray(getField(), rows);
",2,0,0,3,6,1,6,2,0,11,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1276,"        final T zero = getField().getZero();
",2,0,0,2,4,1,4,2,0,9,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1279,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1280,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1281,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1282,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1283,"                final T[] block  = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,58,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1284,"                final int      qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,44,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1285,"                final int      qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,67,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1286,"                int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1287,"                for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1288,"                    T sum = zero;
",4,0,0,0,0,0,0,2,0,6,13,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1289,"                    int q = qStart;
",4,0,0,0,0,0,0,0,0,4,15,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1290,"                    while (q < qEnd - 3) {
",4,2,0,1,3,0,0,0,0,6,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1291,"                        sum = sum.
",2,0,0,0,0,0,2,0,0,5,10,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1296,"                        k += 4;
",2,0,0,0,0,0,0,0,0,3,7,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1297,"                        q += 4;
",2,0,0,0,0,0,0,0,0,3,7,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1299,"                    while (q < qEnd) {
",4,1,0,1,3,0,0,0,0,5,18,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1300,"                        sum = sum.add(block[k++].multiply(v[q++]));
",6,0,1,4,8,0,6,0,0,19,43,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1302,"                    out[p] = out[p].add(sum);
",0,0,1,3,6,0,4,0,0,13,25,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1307,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1314,"        if (v.length != rows) {
",6,1,0,1,3,0,0,0,0,7,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1315,"            throw new DimensionMismatchException(v.length, rows);
",6,0,0,1,2,0,0,2,0,8,53,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1317,"        final T[] out = buildArray(getField(), columns);
",2,0,0,3,6,1,6,2,0,11,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1318,"        final T zero = getField().getZero();
",2,0,0,2,4,1,4,2,0,9,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1321,"        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1322,"            final int jWidth  = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1323,"            final int jWidth2 = jWidth  + jWidth;
",6,1,0,0,0,1,0,0,0,8,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1324,"            final int jWidth3 = jWidth2 + jWidth;
",6,1,0,0,0,1,0,0,0,8,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1325,"            final int jWidth4 = jWidth3 + jWidth;
",6,1,0,0,0,1,0,0,0,8,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1326,"            final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1327,"            final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1328,"            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1329,"                final T[] block  = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,58,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1330,"                final int      pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,44,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1331,"                final int      pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,64,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1332,"                for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1333,"                    int k = q - qStart;
",6,1,0,0,0,0,0,0,0,7,19,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1334,"                    T sum = zero;
",4,0,0,0,0,0,0,2,0,6,13,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1335,"                    int p = pStart;
",4,0,0,0,0,0,0,0,0,4,15,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1336,"                    while (p < pEnd - 3) {
",4,2,0,1,3,0,0,0,0,6,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1337,"                        sum = sum.
",2,0,0,0,0,0,2,0,0,5,10,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1342,"                        k += jWidth4;
",4,0,0,0,0,0,0,0,0,5,13,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1343,"                        p += 4;
",2,0,0,0,0,0,0,0,0,3,7,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1345,"                    while (p < pEnd) {
",4,1,0,1,3,0,0,0,0,5,18,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1346,"                        sum = sum.add(block[k].multiply(v[p++]));
",4,0,1,4,8,0,6,0,0,18,41,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1347,"                        k += jWidth;
",4,0,0,0,0,0,0,0,0,5,12,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1349,"                    out[q] = out[q].add(sum);
",0,0,1,3,6,0,4,0,0,13,25,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1354,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1360,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1361,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1362,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1363,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1364,"            for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1365,"                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1366,"                    final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1367,"                    final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1368,"                    final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,62,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1369,"                    final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1370,"                    int k = (p - pStart) * jWidth;
",8,2,0,1,2,0,0,0,0,10,30,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1371,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1372,"                        block[k] = visitor.visit(p, q, block[k]);
",0,0,1,3,6,0,8,0,0,17,41,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1373,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1378,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1384,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1385,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1386,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1387,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1388,"            for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1389,"                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1390,"                    final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1391,"                    final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1392,"                    final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,62,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1393,"                    final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1394,"                    int k = (p - pStart) * jWidth;
",8,2,0,1,2,0,0,0,0,10,30,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1395,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1396,"                        visitor.visit(p, q, block[k]);
",0,0,1,2,4,0,8,0,0,12,30,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1397,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1402,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1411,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1412,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,16,0,0,16,71,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1413,"        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {
",14,4,0,1,3,0,0,0,0,19,86,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1414,"            final int p0     = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1415,"            final int pStart = FastMath.max(startRow, p0);
",2,0,0,1,2,1,8,0,0,11,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1416,"            final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);
",8,3,0,2,4,1,4,0,0,16,71,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1417,"            for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1418,"                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {
",14,4,0,1,3,0,0,0,0,19,92,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1419,"                    final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1420,"                    final int q0     = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1421,"                    final int qStart = FastMath.max(startColumn, q0);
",2,0,0,1,2,1,8,0,0,11,49,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1422,"                    final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);
",8,3,0,2,4,1,4,0,0,16,74,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1423,"                    final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1424,"                    int k = (p - p0) * jWidth + qStart - q0;
",12,4,0,1,2,0,0,0,0,16,40,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1425,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1426,"                        block[k] = visitor.visit(p, q, block[k]);
",0,0,1,3,6,0,8,0,0,17,41,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1427,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1432,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1441,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1442,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,16,0,0,16,71,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1443,"        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {
",14,4,0,1,3,0,0,0,0,19,86,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1444,"            final int p0     = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1445,"            final int pStart = FastMath.max(startRow, p0);
",2,0,0,1,2,1,8,0,0,11,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1446,"            final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);
",8,3,0,2,4,1,4,0,0,16,71,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1447,"            for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1448,"                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {
",14,4,0,1,3,0,0,0,0,19,92,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1449,"                    final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1450,"                    final int q0     = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1451,"                    final int qStart = FastMath.max(startColumn, q0);
",2,0,0,1,2,1,8,0,0,11,49,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1452,"                    final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);
",8,3,0,2,4,1,4,0,0,16,74,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1453,"                    final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1454,"                    int k = (p - p0) * jWidth + qStart - q0;
",12,4,0,1,2,0,0,0,0,16,40,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1455,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1456,"                        visitor.visit(p, q, block[k]);
",0,0,1,2,4,0,8,0,0,12,30,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1457,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1462,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1468,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1469,"        int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1470,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1471,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1472,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1473,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1474,"                final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1475,"                final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,62,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1476,"                final T[] block = blocks[blockIndex];
",2,0,1,2,4,1,0,2,0,9,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1477,"                int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1478,"                for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1479,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1480,"                        block[k] = visitor.visit(p, q, block[k]);
",0,0,1,3,6,0,8,0,0,17,41,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1481,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1484,"                ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1487,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1493,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1494,"        int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1495,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1496,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1497,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1498,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1499,"                final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1500,"                final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,62,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1501,"                final T[] block = blocks[blockIndex];
",2,0,1,2,4,1,0,2,0,9,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1502,"                int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1503,"                for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1504,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1505,"                        visitor.visit(p, q, block[k]);
",0,0,1,2,4,0,8,0,0,12,30,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1506,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1509,"                ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1512,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1521,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1522,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,16,0,0,16,71,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1523,"        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {
",14,4,0,1,3,0,0,0,0,19,86,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1524,"            final int p0     = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1525,"            final int pStart = FastMath.max(startRow, p0);
",2,0,0,1,2,1,8,0,0,11,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1526,"            final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);
",8,3,0,2,4,1,4,0,0,16,71,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1527,"            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {
",14,4,0,1,3,0,0,0,0,19,92,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1528,"                final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1529,"                final int q0     = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1530,"                final int qStart = FastMath.max(startColumn, q0);
",2,0,0,1,2,1,8,0,0,11,49,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1531,"                final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);
",8,3,0,2,4,1,4,0,0,16,74,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1532,"                final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1533,"                for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1534,"                    int k = (p - p0) * jWidth + qStart - q0;
",12,4,0,1,2,0,0,0,0,16,40,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1535,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1536,"                        block[k] = visitor.visit(p, q, block[k]);
",0,0,1,3,6,0,8,0,0,17,41,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1537,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1542,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1551,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1552,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,16,0,0,16,71,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1553,"        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {
",14,4,0,1,3,0,0,0,0,19,86,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1554,"            final int p0     = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1555,"            final int pStart = FastMath.max(startRow, p0);
",2,0,0,1,2,1,8,0,0,11,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1556,"            final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);
",8,3,0,2,4,1,4,0,0,16,71,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1557,"            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {
",14,4,0,1,3,0,0,0,0,19,92,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1558,"                final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1559,"                final int q0     = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1560,"                final int qStart = FastMath.max(startColumn, q0);
",2,0,0,1,2,1,8,0,0,11,49,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1561,"                final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);
",8,3,0,2,4,1,4,0,0,16,74,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1562,"                final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1563,"                for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1564,"                    int k = (p - p0) * jWidth + qStart - q0;
",12,4,0,1,2,0,0,0,0,16,40,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1565,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1566,"                        visitor.visit(p, q, block[k]);
",0,0,1,2,4,0,8,0,0,12,30,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1567,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1572,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1581,"        return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;
",12,4,0,1,2,1,0,0,0,16,79,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,11,1590,"        return (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;
",12,4,0,1,2,1,0,0,0,16,91,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,782,"        return new Iterator<Entry>() {
",0,0,0,1,3,1,0,4,0,4,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,785,"            private int i = 0;
",2,0,0,0,0,1,0,0,0,3,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,788,"            private Entry e = new Entry();
",2,0,0,1,2,1,0,4,0,7,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,792,"                return i < dim;
",4,1,0,0,0,1,0,0,0,5,15,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,797,"                if (i < dim) {
",4,1,0,1,3,0,0,0,0,5,14,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,798,"                    e.setIndex(i++);
",2,0,0,1,2,0,4,0,0,7,16,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,799,"                    return e;
",2,0,0,0,0,1,0,0,0,2,9,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,801,"                    throw new NoSuchElementException();
",0,0,0,1,2,0,0,2,0,2,35,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,811,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,280,"        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {
",0,0,0,1,4,1,2,2,0,4,63,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,289,"                sum = 0;
",2,0,0,0,0,0,0,0,0,3,8,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,290,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,294,"                sum += value * value;
",6,1,0,0,0,0,0,0,0,8,21,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,295,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,299,"                return FastMath.sqrt(sum);
",0,0,0,1,2,1,6,0,0,6,26,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,73,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR,
",6,0,0,0,1,0,0,0,0,6,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,75,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,93,"        this(prefix, suffix, separator,
",6,0,0,0,1,0,0,0,0,6,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,95,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,122,"        return NumberFormat.getAvailableLocales();
",0,0,0,1,2,1,4,0,0,4,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,130,"        return prefix;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,138,"        return suffix;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,146,"        return separator;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,154,"        return format;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,181,"        return format(v, new StringBuffer(), new FieldPosition(0)).toString();
",0,0,0,4,8,1,6,4,0,10,70,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,195,"        pos.setBeginIndex(0);
",0,0,0,1,2,0,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,196,"        pos.setEndIndex(0);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,199,"        toAppendTo.append(prefix);
",0,0,0,1,2,0,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,202,"        for (int i = 0; i < vector.getDimension(); ++i) {
",6,1,0,2,5,0,4,0,0,12,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,203,"            if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,204,"                toAppendTo.append(separator);
",0,0,0,1,2,0,6,0,0,6,29,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,206,"            CompositeFormat.formatDouble(vector.getEntry(i), format, toAppendTo, pos);
",0,0,0,2,4,0,16,0,0,16,74,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,210,"        toAppendTo.append(suffix);
",0,0,0,1,2,0,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,212,"        return toAppendTo;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,224,"        final ParsePosition parsePosition = new ParsePosition(0);
",2,0,0,1,2,1,0,4,0,7,57,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,225,"        final ArrayRealVector result = parse(source, parsePosition);
",2,0,0,1,2,1,6,2,0,11,60,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,226,"        if (parsePosition.getIndex() == 0) {
",0,1,0,2,5,0,4,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,227,"            throw new MathParseException(source,
",2,0,0,0,1,0,0,2,0,4,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,231,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,242,"        int initialIndex = pos.getIndex();
",2,0,0,1,2,0,4,0,0,6,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,245,"        CompositeFormat.parseAndIgnoreWhitespace(source, pos);
",0,0,0,1,2,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,246,"        if (!CompositeFormat.parseFixedstring(source, trimmedPrefix, pos)) {
",0,0,0,2,5,0,10,0,0,11,68,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,247,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,251,"        List<Number> components = new ArrayList<Number>();
",2,0,0,1,2,0,0,8,0,10,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,252,"        for (boolean loop = true; loop;){
",4,0,0,1,3,0,0,0,0,5,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,254,"            if (!components.isEmpty()) {
",0,0,0,2,5,0,4,0,0,5,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,255,"                CompositeFormat.parseAndIgnoreWhitespace(source, pos);
",0,0,0,1,2,0,8,0,0,8,54,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,256,"                if (!CompositeFormat.parseFixedstring(source, trimmedSeparator, pos)) {
",0,0,0,2,5,0,10,0,0,11,71,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,257,"                    loop = false;
",2,0,0,0,0,0,0,0,0,4,13,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,261,"            if (loop) {
",2,0,0,1,3,0,0,0,0,2,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,262,"                CompositeFormat.parseAndIgnoreWhitespace(source, pos);
",0,0,0,1,2,0,8,0,0,8,54,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,263,"                Number component = CompositeFormat.parseNumber(source, format, pos);
",2,0,0,1,2,0,10,2,0,14,68,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,264,"                if (component != null) {
",2,1,0,1,3,0,0,0,0,3,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,265,"                    components.add(component);
",0,0,0,1,2,0,6,0,0,6,26,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,269,"                    pos.setIndex(initialIndex);
",0,0,0,1,2,0,6,0,0,6,27,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,270,"                    return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,272,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,277,"        CompositeFormat.parseAndIgnoreWhitespace(source, pos);
",0,0,0,1,2,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,278,"        if (!CompositeFormat.parseFixedstring(source, trimmedSuffix, pos)) {
",0,0,0,2,5,0,10,0,0,11,68,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,279,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,283,"        double[] data = new double[components.size()];
",2,0,0,3,6,0,4,0,0,6,46,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,284,"        for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,285,"            data[i] = components.get(i).doubleValue();
",0,0,1,3,6,0,8,0,0,13,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,287,"        return new ArrayRealVector(data, false);
",2,0,0,1,2,1,0,2,0,5,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathParseException,11,42,"                              Class<?> type) {
",2,0,0,0,2,0,0,2,0,4,16,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathParseException,11,43,"        getContext().addMessage(LocalizedFormats.CANNOT_PARSE_AS_TYPE,
",4,0,0,1,3,0,4,0,0,8,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathParseException,11,45,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathParseException,11,53,"                              int position) {
",2,0,0,0,2,0,0,0,0,2,15,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathParseException,11,54,"        getContext().addMessage(LocalizedFormats.CANNOT_PARSE,
",4,0,0,1,3,0,4,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathParseException,11,56,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,64,"            throw new NonSquareMatrixException(matrix.getRowDimension(),
",0,0,0,1,3,0,4,2,0,6,60,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,104,"                final double[] hK = householderVectors[k - 1];
",4,1,1,2,4,1,0,0,0,8,46,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,105,"                qta[k][k] = 1;
",0,0,1,2,4,0,0,0,0,7,14,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,106,"                if (hK[k] != 0.0) {
",0,1,1,2,5,0,0,0,0,5,19,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,107,"                    final double inv = 1.0 / (secondary[k - 1] * hK[k]);
",4,3,1,3,6,1,0,0,0,14,52,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,108,"                    double beta = 1.0 / secondary[k - 1];
",4,2,1,1,2,0,0,0,0,8,37,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,109,"                    qta[k][k] = 1 + beta * hK[k];
",2,2,1,3,6,0,0,0,0,15,29,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,110,"                    for (int i = k + 1; i < m; ++i) {
",10,2,0,1,3,0,0,0,0,13,33,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,111,"                        qta[k][i] = beta * hK[i];
",2,1,1,3,6,0,0,0,0,14,25,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,113,"                    for (int j = k + 1; j < m; ++j) {
",10,2,0,1,3,0,0,0,0,13,33,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,114,"                        beta = 0;
",2,0,0,0,0,0,0,0,0,3,9,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,115,"                        for (int i = k + 1; i < m; ++i) {
",10,2,0,1,3,0,0,0,0,13,33,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,116,"                            beta += qta[j][i] * hK[i];
",2,1,1,3,6,0,0,0,0,14,26,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,118,"                        beta *= inv;
",4,0,0,0,0,0,0,0,0,5,12,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,119,"                        qta[j][k] = beta * hK[k];
",2,1,1,3,6,0,0,0,0,14,25,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,120,"                        for (int i = k + 1; i < m; ++i) {
",10,2,0,1,3,0,0,0,0,13,33,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,121,"                            qta[j][i] += beta * hK[i];
",2,1,1,3,6,0,0,0,0,14,26,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,139,"        if (cachedT == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,140,"            final int m = main.length;
",6,0,0,0,0,1,0,0,0,7,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,141,"            double[][] ta = new double[m][m];
",2,0,1,4,8,0,0,0,0,6,33,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,142,"            for (int i = 0; i < m; ++i) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,143,"                ta[i][i] = main[i];
",0,0,1,3,6,0,0,0,0,11,19,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,144,"                if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,145,"                    ta[i][i - 1] = secondary[i - 1];
",4,2,1,3,6,0,0,0,0,13,32,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,147,"                if (i < main.length - 1) {
",6,2,0,1,3,0,0,0,0,8,26,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,148,"                    ta[i][i + 1] = secondary[i];
",2,1,1,3,6,0,0,0,0,12,28,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,151,"            cachedT = MatrixUtils.createRealMatrix(ta);
",2,0,0,1,2,0,6,0,0,9,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,155,"        return cachedT;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,165,"        return householderVectors;
",2,0,0,0,0,1,0,0,0,2,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,198,"            final double[] hK = householderVectors[k];
",2,0,1,2,4,1,0,0,0,7,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,199,"            main[k] = hK[k];
",0,0,1,2,4,0,0,0,0,9,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,200,"            double xNormSqr = 0;
",2,0,0,0,0,0,0,0,0,2,20,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,201,"            for (int j = k + 1; j < m; ++j) {
",10,2,0,1,3,0,0,0,0,13,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,202,"                final double c = hK[j];
",2,0,1,1,2,1,0,0,0,7,23,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,203,"                xNormSqr += c * c;
",6,1,0,0,0,0,0,0,0,8,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,205,"            final double a = (hK[k + 1] > 0) ? -FastMath.sqrt(xNormSqr) : FastMath.sqrt(xNormSqr);
",4,2,1,4,8,1,12,0,0,22,86,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,206,"            secondary[k] = a;
",2,0,1,1,2,0,0,0,0,7,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,207,"            if (a != 0.0) {
",2,1,0,1,3,0,0,0,0,3,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,210,"                hK[k + 1] -= a;
",4,1,1,1,2,0,0,0,0,8,15,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,211,"                final double beta = -1 / (a * hK[k + 1]);
",6,3,1,2,4,1,0,0,0,13,41,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,217,"                Arrays.fill(z, k + 1, m, 0);
",2,1,0,1,2,0,8,0,0,11,28,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,218,"                for (int i = k + 1; i < m; ++i) {
",10,2,0,1,3,0,0,0,0,13,33,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,219,"                    final double[] hI = householderVectors[i];
",2,0,1,2,4,1,0,0,0,7,42,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,220,"                    final double hKI = hK[i];
",2,0,1,1,2,1,0,0,0,7,25,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,221,"                    double zI = hI[i] * hKI;
",4,1,1,1,2,0,0,0,0,9,24,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,222,"                    for (int j = i + 1; j < m; ++j) {
",10,2,0,1,3,0,0,0,0,13,33,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,223,"                        final double hIJ = hI[j];
",2,0,1,1,2,1,0,0,0,7,25,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,224,"                        zI   += hIJ * hK[j];
",4,1,1,1,2,0,0,0,0,10,20,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,225,"                        z[j] += hIJ * hKI;
",4,1,1,1,2,0,0,0,0,10,18,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,227,"                    z[i] = beta * (z[i] + zI);
",4,2,1,3,6,0,0,0,0,15,26,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,231,"                double gamma = 0;
",2,0,0,0,0,0,0,0,0,2,17,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,232,"                for (int i = k + 1; i < m; ++i) {
",10,2,0,1,3,0,0,0,0,13,33,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,233,"                    gamma += z[i] * hK[i];
",2,1,1,2,4,0,0,0,0,12,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,235,"                gamma *= beta / 2;
",4,1,0,0,0,0,0,0,0,6,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,238,"                for (int i = k + 1; i < m; ++i) {
",10,2,0,1,3,0,0,0,0,13,33,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,239,"                    z[i] -= gamma * hK[i];
",2,1,1,2,4,0,0,0,0,12,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,244,"                for (int i = k + 1; i < m; ++i) {
",10,2,0,1,3,0,0,0,0,13,33,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,245,"                    final double[] hI = householderVectors[i];
",2,0,1,2,4,1,0,0,0,7,42,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,246,"                    for (int j = i; j < m; ++j) {
",10,1,0,1,3,0,0,0,0,12,29,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,247,"                        hI[j] -= hK[i] * z[j] + z[i] * hK[j];
",0,3,1,5,10,0,0,0,0,24,37,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1169,"        protected SparseEntryIterator() {
",2,0,0,1,3,1,0,0,0,3,33,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1170,"            dim = getDimension();
",2,0,0,1,2,0,2,0,0,5,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1171,"            current = new Entry();
",2,0,0,1,2,0,0,2,0,5,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1172,"            next = new Entry();
",2,0,0,1,2,0,0,2,0,5,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1173,"            if (next.getValue() == 0) {
",0,1,0,2,5,0,4,0,0,5,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1174,"                advance(next);
",0,0,0,1,2,0,4,0,0,4,14,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1176,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1184,"            if (e == null) {
",2,1,0,1,3,0,0,0,0,3,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1185,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1188,"                e.setIndex(e.getIndex() + 1);
",0,1,0,2,4,0,8,0,0,9,29,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1189,"            } while (e.getIndex() < dim && e.getValue() == 0);
",2,3,0,3,7,0,8,0,0,13,50,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1190,"            if (e.getIndex() >= dim) {
",2,1,0,2,5,0,4,0,0,7,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1191,"                e.setIndex(-1);
",0,0,0,1,2,0,4,0,0,5,15,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1193,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1197,"            return next.getIndex() >= 0;
",0,1,0,1,2,1,4,0,0,5,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1202,"            int index = next.getIndex();
",2,0,0,1,2,0,4,0,0,6,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1203,"            if (index < 0) {
",2,1,0,1,3,0,0,0,0,3,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1204,"                throw new NoSuchElementException();
",0,0,0,1,2,0,0,2,0,2,35,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1206,"            current.setIndex(index);
",0,0,0,1,2,0,6,0,0,6,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1207,"            advance(next);
",0,0,0,1,2,0,4,0,0,4,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1208,"            return current;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1217,"            throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1159,"    @Deprecated
",2,0,0,0,0,0,0,0,0,2,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,90,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,
",8,0,0,0,1,0,0,0,0,8,76,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,92,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,151,"        return NumberFormat.getAvailableLocales();
",0,0,0,1,2,1,4,0,0,4,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,159,"        return prefix;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,167,"        return suffix;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,175,"        return rowPrefix;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,183,"        return rowSuffix;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,191,"        return rowSeparator;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,199,"        return columnSeparator;
",2,0,0,0,0,1,0,0,0,2,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,234,"        return format(m, new StringBuffer(), new FieldPosition(0)).toString();
",0,0,0,4,8,1,6,4,0,10,70,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,248,"        pos.setBeginIndex(0);
",0,0,0,1,2,0,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,249,"        pos.setEndIndex(0);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,252,"        toAppendTo.append(prefix);
",0,0,0,1,2,0,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,255,"        final int rows = matrix.getRowDimension();
",2,0,0,1,2,1,4,0,0,7,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,256,"        for (int i = 0; i < rows; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,257,"            toAppendTo.append(rowPrefix);
",0,0,0,1,2,0,6,0,0,6,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,258,"            for (int j = 0; j < matrix.getColumnDimension(); ++j) {
",6,1,0,2,5,0,4,0,0,12,55,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,259,"                if (j > 0) {
",2,1,0,1,3,0,0,0,0,3,12,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,260,"                    toAppendTo.append(columnSeparator);
",0,0,0,1,2,0,6,0,0,6,35,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,262,"                CompositeFormat.formatDouble(matrix.getEntry(i, j), format, toAppendTo, pos);
",0,0,0,2,4,0,18,0,0,18,77,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,264,"            toAppendTo.append(rowSuffix);
",0,0,0,1,2,0,6,0,0,6,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,265,"            if (i < rows - 1) {
",4,2,0,1,3,0,0,0,0,6,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,266,"                toAppendTo.append(rowSeparator);
",0,0,0,1,2,0,6,0,0,6,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,271,"        toAppendTo.append(suffix);
",0,0,0,1,2,0,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,273,"        return toAppendTo;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,285,"        final ParsePosition parsePosition = new ParsePosition(0);
",2,0,0,1,2,1,0,4,0,7,57,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,286,"        final RealMatrix result = parse(source, parsePosition);
",2,0,0,1,2,1,6,2,0,11,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,287,"        if (parsePosition.getIndex() == 0) {
",0,1,0,2,5,0,4,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,288,"            throw new MathParseException(source,
",2,0,0,0,1,0,0,2,0,4,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,292,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,303,"        int initialIndex = pos.getIndex();
",2,0,0,1,2,0,4,0,0,6,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,305,"        final String trimmedPrefix = prefix.trim();
",2,0,0,1,2,1,4,2,0,9,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,306,"        final String trimmedSuffix = suffix.trim();
",2,0,0,1,2,1,4,2,0,9,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,307,"        final String trimmedRowPrefix = rowPrefix.trim();
",2,0,0,1,2,1,4,2,0,9,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,308,"        final String trimmedRowSuffix = rowSuffix.trim();
",2,0,0,1,2,1,4,2,0,9,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,309,"        final String trimmedColumnSeparator = columnSeparator.trim();
",2,0,0,1,2,1,4,2,0,9,61,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,310,"        final String trimmedRowSeparator = rowSeparator.trim();
",2,0,0,1,2,1,4,2,0,9,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,313,"        CompositeFormat.parseAndIgnoreWhitespace(source, pos);
",0,0,0,1,2,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,314,"        if (!CompositeFormat.parseFixedstring(source, trimmedPrefix, pos)) {
",0,0,0,2,5,0,10,0,0,11,68,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,315,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,319,"        List<List<Number>> matrix = new ArrayList<List<Number>>();
",2,0,0,1,2,0,0,12,0,14,58,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,320,"        List<Number> rowComponents = new ArrayList<Number>();
",2,0,0,1,2,0,0,8,0,10,53,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,321,"        for (boolean loop = true; loop;){
",4,0,0,1,3,0,0,0,0,5,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,323,"            if (!rowComponents.isEmpty()) {
",0,0,0,2,5,0,4,0,0,5,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,324,"                CompositeFormat.parseAndIgnoreWhitespace(source, pos);
",0,0,0,1,2,0,8,0,0,8,54,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,325,"                if (!CompositeFormat.parseFixedstring(source, trimmedColumnSeparator, pos)) {
",0,0,0,2,5,0,10,0,0,11,77,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,326,"                    if (trimmedRowSuffix.length() != 0 &&
",0,2,0,1,3,0,4,0,0,6,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,328,"                        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,330,"                        CompositeFormat.parseAndIgnoreWhitespace(source, pos);
",0,0,0,1,2,0,8,0,0,8,54,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,331,"                        if (CompositeFormat.parseFixedstring(source, trimmedRowSeparator, pos)) {
",0,0,0,2,5,0,10,0,0,10,73,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,332,"                            matrix.add(rowComponents);
",0,0,0,1,2,0,6,0,0,6,26,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,333,"                            rowComponents = new ArrayList<Number>();
",2,0,0,1,2,0,0,4,0,7,40,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,334,"                            continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,336,"                            loop = false;
",2,0,0,0,0,0,0,0,0,4,13,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,341,"                CompositeFormat.parseAndIgnoreWhitespace(source, pos);
",0,0,0,1,2,0,8,0,0,8,54,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,342,"                if (trimmedRowPrefix.length() != 0 &&
",0,2,0,1,3,0,4,0,0,6,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,344,"                    return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,348,"            if (loop) {
",2,0,0,1,3,0,0,0,0,2,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,349,"                CompositeFormat.parseAndIgnoreWhitespace(source, pos);
",0,0,0,1,2,0,8,0,0,8,54,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,350,"                Number component = CompositeFormat.parseNumber(source, format, pos);
",2,0,0,1,2,0,10,2,0,14,68,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,351,"                if (component != null) {
",2,1,0,1,3,0,0,0,0,3,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,352,"                    rowComponents.add(component);
",0,0,0,1,2,0,6,0,0,6,29,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,354,"                    if (rowComponents.isEmpty()) {
",0,0,0,2,5,0,4,0,0,4,30,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,355,"                        loop = false;
",2,0,0,0,0,0,0,0,0,4,13,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,359,"                        pos.setIndex(initialIndex);
",0,0,0,1,2,0,6,0,0,6,27,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,360,"                        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,363,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,367,"        if (!rowComponents.isEmpty()) {
",0,0,0,2,5,0,4,0,0,5,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,368,"            matrix.add(rowComponents);
",0,0,0,1,2,0,6,0,0,6,26,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,372,"        CompositeFormat.parseAndIgnoreWhitespace(source, pos);
",0,0,0,1,2,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,373,"        if (!CompositeFormat.parseFixedstring(source, trimmedSuffix, pos)) {
",0,0,0,2,5,0,10,0,0,11,68,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,374,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,378,"        if (matrix.isEmpty()) {
",0,0,0,2,5,0,4,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,379,"            pos.setIndex(initialIndex);
",0,0,0,1,2,0,6,0,0,6,27,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,380,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,384,"        double[][] data = new double[matrix.size()][];
",2,0,0,5,10,0,4,0,0,6,46,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,385,"        int row = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,386,"        for (List<Number> rowList : matrix) {
",4,0,0,1,3,0,0,4,0,8,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,387,"            data[row] = new double[rowList.size()];
",0,0,1,3,6,0,4,0,0,9,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,388,"            for (int i = 0; i < rowList.size(); i++) {
",6,1,0,2,5,0,4,0,0,12,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,389,"                data[row][i] = rowList.get(i).doubleValue();
",0,0,1,4,8,0,8,0,0,15,44,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,391,"            row++;
",2,0,0,0,0,0,0,0,0,3,6,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,392,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,393,"        return MatrixUtils.createRealMatrix(data);
",0,0,0,1,2,1,6,0,0,6,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1271,"                return new Iterator<Entry>() {
",0,0,0,1,3,1,0,4,0,4,30,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1273,"                    private final UnmodifiableEntry e = new UnmodifiableEntry();
",2,0,0,1,2,2,0,4,0,8,60,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1277,"                        return i.hasNext();
",0,0,0,1,2,1,4,0,0,4,19,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1282,"                        e.setIndex(i.next().getIndex());
",0,0,0,3,6,0,10,0,0,10,32,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1283,"                        return e;
",2,0,0,0,0,1,0,0,0,2,9,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1293,"                        throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1303,"                return new Iterator<Entry>() {
",0,0,0,1,3,1,0,4,0,4,30,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1305,"                    private final UnmodifiableEntry e = new UnmodifiableEntry();
",2,0,0,1,2,2,0,4,0,8,60,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1309,"                        return i.hasNext();
",0,0,0,1,2,1,4,0,0,4,19,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1314,"                        e.setIndex(i.next().getIndex());
",0,0,0,3,6,0,10,0,0,10,32,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1315,"                        return e;
",2,0,0,0,0,1,0,0,0,2,9,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1326,"                        throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,675,"        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {
",0,0,0,2,6,0,6,4,0,10,82,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,679,"                out.setEntry(column, row, value);
",0,0,0,1,2,0,10,0,0,10,33,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,680,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,450,"            if (!isNonSingular()) {
",0,0,0,2,5,0,2,0,0,3,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,451,"                throw new SingularMatrixException();
",0,0,0,1,2,0,0,2,0,2,36,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,454,"            final int m = realEigenvalues.length;
",6,0,0,0,0,1,0,0,0,7,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,455,"            if (b.getDimension() != m) {
",2,1,0,2,5,0,4,0,0,7,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,456,"                throw new DimensionMismatchException(b.getDimension(), m);
",2,0,0,2,4,0,4,2,0,8,58,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,459,"            final double[] bp = new double[m];
",2,0,1,2,4,1,0,0,0,5,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,460,"            for (int i = 0; i < m; ++i) {
",8,1,0,1,3,0,0,0,0,10,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,461,"                final ArrayRealVector v = eigenvectors[i];
",2,0,1,1,2,1,0,2,0,9,42,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,462,"                final double[] vData = v.getDataRef();
",2,0,0,2,4,1,4,0,0,7,38,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,463,"                final double s = v.dotProduct(b) / realEigenvalues[i];
",2,1,1,2,4,1,6,0,0,14,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,464,"                for (int j = 0; j < m; ++j) {
",8,1,0,1,3,0,0,0,0,10,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,465,"                    bp[j] += s * vData[j];
",2,1,1,2,4,0,0,0,0,12,22,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,469,"            return new ArrayRealVector(bp, false);
",2,0,0,1,2,1,0,2,0,5,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,475,"            if (!isNonSingular()) {
",0,0,0,2,5,0,2,0,0,3,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,476,"                throw new SingularMatrixException();
",0,0,0,1,2,0,0,2,0,2,36,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,479,"            final int m = realEigenvalues.length;
",6,0,0,0,0,1,0,0,0,7,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,480,"            if (b.getRowDimension() != m) {
",2,1,0,2,5,0,4,0,0,7,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,481,"                throw new DimensionMismatchException(b.getRowDimension(), m);
",2,0,0,2,4,0,4,2,0,8,61,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,484,"            final int nColB = b.getColumnDimension();
",2,0,0,1,2,1,4,0,0,7,41,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,485,"            final double[][] bp = new double[m][nColB];
",2,0,1,4,8,1,0,0,0,7,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,486,"            final double[] tmpCol = new double[m];
",2,0,1,2,4,1,0,0,0,5,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,487,"            for (int k = 0; k < nColB; ++k) {
",8,1,0,1,3,0,0,0,0,10,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,488,"                for (int i = 0; i < m; ++i) {
",8,1,0,1,3,0,0,0,0,10,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,489,"                    tmpCol[i] = b.getEntry(i, k);
",0,0,1,2,4,0,8,0,0,13,29,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,490,"                    bp[i][k]  = 0;
",0,0,1,2,4,0,0,0,0,7,14,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,492,"                for (int i = 0; i < m; ++i) {
",8,1,0,1,3,0,0,0,0,10,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,493,"                    final ArrayRealVector v = eigenvectors[i];
",2,0,1,1,2,1,0,2,0,9,42,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,494,"                    final double[] vData = v.getDataRef();
",2,0,0,2,4,1,4,0,0,7,38,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,495,"                    double s = 0;
",2,0,0,0,0,0,0,0,0,2,13,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,496,"                    for (int j = 0; j < m; ++j) {
",8,1,0,1,3,0,0,0,0,10,29,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,497,"                        s += v.getEntry(j) * tmpCol[j];
",2,1,1,2,4,0,6,0,0,14,31,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,499,"                    s /= realEigenvalues[i];
",2,0,1,1,2,0,0,0,0,7,24,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,500,"                    for (int j = 0; j < m; ++j) {
",8,1,0,1,3,0,0,0,0,10,29,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,501,"                        bp[j][k] += s * vData[j];
",2,1,1,3,6,0,0,0,0,14,25,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,506,"            return new Array2DRowRealMatrix(bp, false);
",2,0,0,1,2,1,0,2,0,5,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,519,"                    return false;
",0,0,0,0,0,1,0,0,0,1,13,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,533,"                throw new SingularMatrixException();
",0,0,0,1,2,0,0,2,0,2,36,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,329,"        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {
",0,0,0,1,4,0,4,2,0,6,71,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,334,"                return getEntry(selectedRows[row], selectedColumns[column]);
",0,0,1,3,6,1,2,0,0,10,60,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,64,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,65,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,81,"        return (rows * columns <= 4096) ?
",4,2,0,1,2,1,0,0,0,6,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,103,"        return (rows * columns <= 4096) ?
",4,2,0,1,2,1,0,0,0,6,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,132,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,159,"        if (data == null ||
",2,2,0,0,1,0,0,0,0,4,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,161,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,163,"        return (data.length * data[0].length <= 4096) ?
",6,2,1,2,4,1,0,0,0,10,47,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,176,"        final RealMatrix m = createRealMatrix(dimension, dimension);
",2,0,0,1,2,1,6,2,0,11,60,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,177,"        for (int i = 0; i < dimension; ++i) {
",8,1,0,1,3,0,0,0,0,10,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,178,"            m.setEntry(i, i, 1.0);
",0,0,0,1,2,0,8,0,0,8,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,180,"        return m;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,195,"        final T zero = field.getZero();
",2,0,0,1,2,1,4,2,0,9,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,196,"        final T one  = field.getOne();
",2,0,0,1,2,1,4,2,0,9,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,198,"        final T[][] d = (T[][]) Array.newInstance(field.getRuntimeClass(), new int[] { dimension, dimension });
",6,0,0,9,18,1,8,4,0,19,103,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,199,"        for (int row = 0; row < dimension; row++) {
",8,1,0,1,3,0,0,0,0,10,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,200,"            final T[] dRow = d[row];
",2,0,1,2,4,1,0,2,0,9,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,201,"            Arrays.fill(dRow, zero);
",0,0,0,1,2,0,8,0,0,8,24,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,202,"            dRow[row] = one;
",2,0,1,1,2,0,0,0,0,7,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,204,"        return new Array2DRowFieldMatrix<T>(field, d, false);
",4,0,0,1,2,1,0,4,0,9,53,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,216,"        final RealMatrix m = createRealMatrix(diagonal.length, diagonal.length);
",10,0,0,1,2,1,2,2,0,15,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,217,"        for (int i = 0; i < diagonal.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,218,"            m.setEntry(i, i, diagonal[i]);
",0,0,1,2,4,0,8,0,0,12,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,220,"        return m;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,234,"        final FieldMatrix<T> m =
",2,0,0,0,0,1,0,4,0,7,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,236,"        for (int i = 0; i < diagonal.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,237,"            m.setEntry(i, i, diagonal[i]);
",0,0,1,2,4,0,8,0,0,12,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,239,"        return m;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,252,"        if (data == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,253,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,255,"        return new ArrayRealVector(data, true);
",2,0,0,1,2,1,0,2,0,5,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,270,"        if (data == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,271,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,273,"        if (data.length == 0) {
",4,1,0,1,3,0,0,0,0,5,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,274,"            throw new ZeroException(LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT);
",4,0,0,1,2,0,0,2,0,6,80,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,276,"        return new ArrayFieldVector<T>(data[0].getField(), data, true);
",2,0,1,3,6,1,2,4,0,11,63,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,290,"        if (rowData == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,291,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,293,"        final int nCols = rowData.length;
",6,0,0,0,0,1,0,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,294,"        final RealMatrix m = createRealMatrix(1, nCols);
",2,0,0,1,2,1,4,2,0,9,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,295,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,296,"            m.setEntry(0, i, rowData[i]);
",0,0,1,2,4,0,6,0,0,10,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,298,"        return m;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,314,"        if (rowData == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,315,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,317,"        final int nCols = rowData.length;
",6,0,0,0,0,1,0,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,318,"        if (nCols == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,319,"            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
",4,0,0,1,2,0,0,2,0,6,64,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,321,"        final FieldMatrix<T> m = createFieldMatrix(rowData[0].getField(), 1, nCols);
",2,0,1,3,6,1,6,4,0,15,76,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,322,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,323,"            m.setEntry(0, i, rowData[i]);
",0,0,1,2,4,0,6,0,0,10,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,325,"        return m;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,339,"        if (columnData == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,340,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,342,"        final int nRows = columnData.length;
",6,0,0,0,0,1,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,343,"        final RealMatrix m = createRealMatrix(nRows, 1);
",2,0,0,1,2,1,4,2,0,9,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,344,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,345,"            m.setEntry(i, 0, columnData[i]);
",0,0,1,2,4,0,6,0,0,10,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,347,"        return m;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,363,"        if (columnData == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,364,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,366,"        final int nRows = columnData.length;
",6,0,0,0,0,1,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,367,"        if (nRows == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,368,"            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
",4,0,0,1,2,0,0,2,0,6,61,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,370,"        final FieldMatrix<T> m = createFieldMatrix(columnData[0].getField(), nRows, 1);
",2,0,1,3,6,1,6,4,0,15,79,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,371,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,372,"            m.setEntry(i, 0, columnData[i]);
",0,0,1,2,4,0,6,0,0,10,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,374,"        return m;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,393,"            if (raiseException) {
",2,0,0,1,3,0,0,0,0,2,21,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,394,"                throw new NonSquareMatrixException(rows, matrix.getColumnDimension());
",2,0,0,2,4,0,4,2,0,8,70,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,396,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,401,"                final double mij = matrix.getEntry(i, j);
",2,0,0,1,2,1,8,0,0,11,41,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,402,"                final double mji = matrix.getEntry(j, i);
",2,0,0,1,2,1,8,0,0,11,41,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,403,"                if (FastMath.abs(mij - mji) >
",4,2,0,1,3,0,4,0,0,10,29,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,405,"                    if (raiseException) {
",2,0,0,1,3,0,0,0,0,2,21,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,406,"                        throw new NonSymmetricMatrixException(i, j, relativeTolerance);
",6,0,0,1,2,0,0,2,0,8,63,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,408,"                        return false;
",0,0,0,0,0,1,0,0,0,1,13,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,427,"        isSymmetricInternal(matrix, eps, true);
",0,0,0,1,2,0,6,0,0,7,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,428,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,470,"            throw new OutOfRangeException(LocalizedFormats.ROW_INDEX,
",4,0,0,0,1,0,0,2,0,6,57,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,485,"            throw new OutOfRangeException(LocalizedFormats.COLUMN_INDEX,
",4,0,0,0,1,0,0,2,0,6,60,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,507,"        checkRowIndex(m, startRow);
",0,0,0,1,2,0,6,0,0,6,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,508,"        checkRowIndex(m, endRow);
",0,0,0,1,2,0,6,0,0,6,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,509,"        if (endRow < startRow) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,510,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,
",4,0,0,0,1,0,0,2,0,6,81,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,514,"        checkColumnIndex(m, startColumn);
",0,0,0,1,2,0,6,0,0,6,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,515,"        checkColumnIndex(m, endColumn);
",0,0,0,1,2,0,6,0,0,6,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,516,"        if (endColumn < startColumn) {
",4,1,0,1,3,0,0,0,0,5,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,517,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_COLUMN_AFTER_FINAL_COLUMN,
",4,0,0,0,1,0,0,2,0,6,87,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,522,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,541,"        if (selectedRows == null) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,542,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,544,"        if (selectedColumns == null) {
",2,1,0,1,3,0,0,0,0,3,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,545,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,547,"        if (selectedRows.length == 0) {
",4,1,0,1,3,0,0,0,0,5,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,548,"            throw new NoDataException(LocalizedFormats.EMPTY_SELECTED_ROW_INDEX_ARRAY);
",4,0,0,1,2,0,0,2,0,6,75,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,550,"        if (selectedColumns.length == 0) {
",4,1,0,1,3,0,0,0,0,5,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,551,"            throw new NoDataException(LocalizedFormats.EMPTY_SELECTED_COLUMN_INDEX_ARRAY);
",4,0,0,1,2,0,0,2,0,6,78,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,554,"        for (final int row : selectedRows) {
",4,0,0,1,3,1,0,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,555,"            checkRowIndex(m, row);
",0,0,0,1,2,0,6,0,0,6,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,557,"        for (final int column : selectedColumns) {
",4,0,0,1,3,1,0,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,558,"            checkColumnIndex(m, column);
",0,0,0,1,2,0,6,0,0,6,28,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,560,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,572,"        if ((left.getRowDimension()    != right.getRowDimension()) ||
",0,2,0,3,7,0,8,0,0,10,61,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,574,"            throw new MatrixDimensionMismatchException(left.getRowDimension(), left.getColumnDimension(),
",0,0,0,2,5,0,8,2,0,10,93,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,577,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,589,"        if ((left.getRowDimension()    != right.getRowDimension()) ||
",0,2,0,3,7,0,8,0,0,10,61,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,591,"            throw new MatrixDimensionMismatchException(left.getRowDimension(), left.getColumnDimension(),
",0,0,0,2,5,0,8,2,0,10,93,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,594,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,608,"            throw new DimensionMismatchException(left.getColumnDimension(),
",0,0,0,1,3,0,4,2,0,6,63,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,619,"        final FractionMatrixConverter converter = new FractionMatrixConverter();
",2,0,0,1,2,1,0,4,0,7,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,620,"        m.walkInOptimizedOrder(converter);
",0,0,0,1,2,0,6,0,0,6,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,621,"        return converter.getConvertedMatrix();
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,664,"        final BigFractionMatrixConverter converter = new BigFractionMatrixConverter();
",2,0,0,1,2,1,0,4,0,7,78,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,665,"        m.walkInOptimizedOrder(converter);
",0,0,0,1,2,0,6,0,0,6,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,666,"        return converter.getConvertedMatrix();
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,744,"        final int n = vector.getDimension();
",2,0,0,1,2,1,4,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,745,"        oos.writeInt(n);
",0,0,0,1,2,0,6,0,0,6,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,746,"        for (int i = 0; i < n; ++i) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,747,"            oos.writeDouble(vector.getEntry(i));
",0,0,0,2,4,0,10,0,0,10,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,749,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,775,"            final int n = ois.readInt();
",2,0,0,1,2,1,4,0,0,7,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,776,"            final double[] data = new double[n];
",2,0,1,2,4,1,0,0,0,5,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,777,"            for (int i = 0; i < n; ++i) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,778,"                data[i] = ois.readDouble();
",0,0,1,2,4,0,4,0,0,9,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,782,"            final RealVector vector = new ArrayRealVector(data, false);
",4,0,0,1,2,1,0,4,0,10,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,785,"            final java.lang.reflect.Field f =
",10,0,0,0,0,1,0,0,0,11,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,787,"            f.setAccessible(true);
",0,0,0,1,2,0,4,0,0,5,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,788,"            f.set(instance, vector);
",0,0,0,1,2,0,8,0,0,8,24,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,798,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,790,"        } catch (NoSuchFieldException nsfe) {
",2,0,0,1,4,0,0,2,0,4,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,791,"            IOException ioe = new IOException();
",2,0,0,1,2,0,0,4,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,792,"            ioe.initCause(nsfe);
",0,0,0,1,2,0,6,0,0,6,20,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,793,"            throw ioe;
",2,0,0,0,0,0,0,0,0,2,10,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,794,"        } catch (IllegalAccessException iae) {
",2,0,0,1,4,0,0,2,0,4,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,795,"            IOException ioe = new IOException();
",2,0,0,1,2,0,0,4,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,796,"            ioe.initCause(iae);
",0,0,0,1,2,0,6,0,0,6,19,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,797,"            throw ioe;
",2,0,0,0,0,0,0,0,0,2,10,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,800,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,845,"        final int n = matrix.getRowDimension();
",2,0,0,1,2,1,4,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,846,"        final int m = matrix.getColumnDimension();
",2,0,0,1,2,1,4,0,0,7,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,847,"        oos.writeInt(n);
",0,0,0,1,2,0,6,0,0,6,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,848,"        oos.writeInt(m);
",0,0,0,1,2,0,6,0,0,6,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,849,"        for (int i = 0; i < n; ++i) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,850,"            for (int j = 0; j < m; ++j) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,851,"                oos.writeDouble(matrix.getEntry(i, j));
",0,0,0,2,4,0,12,0,0,12,39,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,854,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,880,"            final int n = ois.readInt();
",2,0,0,1,2,1,4,0,0,7,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,881,"            final int m = ois.readInt();
",2,0,0,1,2,1,4,0,0,7,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,882,"            final double[][] data = new double[n][m];
",2,0,1,4,8,1,0,0,0,7,41,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,883,"            for (int i = 0; i < n; ++i) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,884,"                final double[] dataI = data[i];
",2,0,1,2,4,1,0,0,0,7,31,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,885,"                for (int j = 0; j < m; ++j) {
",8,1,0,1,3,0,0,0,0,10,29,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,886,"                    dataI[j] = ois.readDouble();
",0,0,1,2,4,0,4,0,0,9,28,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,891,"            final RealMatrix matrix = new Array2DRowRealMatrix(data, false);
",4,0,0,1,2,1,0,4,0,10,64,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,894,"            final java.lang.reflect.Field f =
",10,0,0,0,0,1,0,0,0,11,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,896,"            f.setAccessible(true);
",0,0,0,1,2,0,4,0,0,5,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,897,"            f.set(instance, matrix);
",0,0,0,1,2,0,8,0,0,8,24,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,907,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,899,"        } catch (NoSuchFieldException nsfe) {
",2,0,0,1,4,0,0,2,0,4,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,900,"            IOException ioe = new IOException();
",2,0,0,1,2,0,0,4,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,901,"            ioe.initCause(nsfe);
",0,0,0,1,2,0,6,0,0,6,20,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,902,"            throw ioe;
",2,0,0,0,0,0,0,0,0,2,10,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,903,"        } catch (IllegalAccessException iae) {
",2,0,0,1,4,0,0,2,0,4,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,904,"            IOException ioe = new IOException();
",2,0,0,1,2,0,0,4,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,905,"            ioe.initCause(iae);
",0,0,0,1,2,0,6,0,0,6,19,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,906,"            throw ioe;
",2,0,0,0,0,0,0,0,0,2,10,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,908,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,931,"        if ((rm == null) || (b == null) || ( rm.getRowDimension() != b.getDimension())) {
",4,4,0,6,13,0,8,0,0,16,81,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,932,"            throw new DimensionMismatchException(
",0,0,0,0,1,0,0,2,0,2,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,936,"        if( rm.getColumnDimension() != rm.getRowDimension() ){
",0,1,0,3,7,0,8,0,0,9,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,937,"            throw new NonSquareMatrixException(rm.getRowDimension(),
",0,0,0,1,3,0,4,2,0,6,56,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,940,"        int rows = rm.getRowDimension();
",2,0,0,1,2,0,4,0,0,6,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,941,"        for( int i = 0 ; i < rows ; i++ ){
",8,1,0,1,3,0,0,0,0,10,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,942,"            double diag = rm.getEntry(i, i);
",2,0,0,1,2,0,8,0,0,10,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,943,"            if( FastMath.abs(diag) < Precision.SAFE_MIN ){
",4,1,0,2,5,0,6,0,0,11,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,944,"                throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);
",4,0,0,1,2,0,0,2,0,6,69,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,946,"            double bi = b.getEntry(i)/diag;
",4,1,0,1,2,0,6,0,0,11,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,947,"            b.setEntry(i,  bi );
",0,0,0,1,2,0,8,0,0,8,20,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,948,"            for( int j = i+1; j< rows; j++ ){
",10,2,0,1,3,0,0,0,0,13,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,949,"                b.setEntry(j, b.getEntry(j)-bi*rm.getEntry(j,i)  );
",2,2,0,3,6,0,20,0,0,24,51,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,952,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,976,"        if ((rm == null) || (b == null) || ( rm.getRowDimension() != b.getDimension())) {
",4,4,0,6,13,0,8,0,0,16,81,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,977,"            throw new DimensionMismatchException(
",0,0,0,0,1,0,0,2,0,2,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,981,"        if( rm.getColumnDimension() != rm.getRowDimension() ){
",0,1,0,3,7,0,8,0,0,9,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,982,"            throw new NonSquareMatrixException(rm.getRowDimension(),
",0,0,0,1,3,0,4,2,0,6,56,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,985,"        int rows = rm.getRowDimension();
",2,0,0,1,2,0,4,0,0,6,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,986,"        for( int i = rows-1 ; i >-1 ; i-- ){
",8,2,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,987,"            double diag = rm.getEntry(i, i);
",2,0,0,1,2,0,8,0,0,10,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,988,"            if( FastMath.abs(diag) < Precision.SAFE_MIN ){
",4,1,0,2,5,0,6,0,0,11,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,989,"                throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);
",4,0,0,1,2,0,0,2,0,6,69,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,991,"            double bi = b.getEntry(i)/diag;
",4,1,0,1,2,0,6,0,0,11,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,992,"            b.setEntry(i,  bi );
",0,0,0,1,2,0,8,0,0,8,20,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,993,"            for( int j = i-1; j>-1; j-- ){
",8,2,0,1,3,0,0,0,0,12,30,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,994,"                b.setEntry(j, b.getEntry(j)-bi*rm.getEntry(j,i)  );
",2,2,0,3,6,0,20,0,0,24,51,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,997,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,1013,"        final int n = m.getRowDimension();
",2,0,0,1,2,1,4,0,0,7,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,1014,"        if (m.getColumnDimension() != n) {
",2,1,0,2,5,0,4,0,0,7,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,1015,"            throw new NonSquareMatrixException(m.getRowDimension(),
",0,0,0,1,3,0,4,2,0,6,55,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,1019,"        final int splitIndex1 = splitIndex + 1;
",4,1,0,0,0,1,0,0,0,6,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,1021,"        final RealMatrix a = m.getSubMatrix(0, splitIndex, 0, splitIndex);
",2,0,0,1,2,1,8,2,0,13,66,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,1022,"        final RealMatrix b = m.getSubMatrix(0, splitIndex, splitIndex1, n - 1);
",4,1,0,1,2,1,8,2,0,16,71,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,1023,"        final RealMatrix c = m.getSubMatrix(splitIndex1, n - 1, 0, splitIndex);
",4,1,0,1,2,1,8,2,0,16,71,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,1024,"        final RealMatrix d = m.getSubMatrix(splitIndex1, n - 1, splitIndex1, n - 1);
",6,2,0,1,2,1,8,2,0,19,76,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,1026,"        final SingularValueDecomposition aDec = new SingularValueDecomposition(a);
",4,0,0,1,2,1,0,4,0,9,74,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,1027,"        final RealMatrix aInv = aDec.getSolver().getInverse();
",2,0,0,2,4,1,6,2,0,11,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,1029,"        final SingularValueDecomposition dDec = new SingularValueDecomposition(d);
",4,0,0,1,2,1,0,4,0,9,74,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,1030,"        final RealMatrix dInv = dDec.getSolver().getInverse();
",2,0,0,2,4,1,6,2,0,11,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,1032,"        final RealMatrix tmp1 = a.subtract(b.multiply(dInv).multiply(c));
",2,0,0,3,6,1,14,2,0,19,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,1033,"        final SingularValueDecomposition tmp1Dec = new SingularValueDecomposition(tmp1);
",4,0,0,1,2,1,0,4,0,9,80,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,1034,"        final RealMatrix result00 = tmp1Dec.getSolver().getInverse();
",2,0,0,2,4,1,6,2,0,11,61,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,1036,"        final RealMatrix tmp2 = d.subtract(c.multiply(aInv).multiply(b));
",2,0,0,3,6,1,14,2,0,19,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,1037,"        final SingularValueDecomposition tmp2Dec = new SingularValueDecomposition(tmp2);
",4,0,0,1,2,1,0,4,0,9,80,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,1038,"        final RealMatrix result11 = tmp2Dec.getSolver().getInverse();
",2,0,0,2,4,1,6,2,0,11,61,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,1040,"        final RealMatrix result01 = aInv.multiply(b).multiply(result11).scalarMultiply(-1);
",2,0,0,3,6,1,12,2,0,18,83,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,1041,"        final RealMatrix result10 = dInv.multiply(c).multiply(result00).scalarMultiply(-1);
",2,0,0,3,6,1,12,2,0,18,83,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,1043,"        final RealMatrix result = new Array2DRowRealMatrix(n, n);
",6,0,0,1,2,1,0,4,0,11,57,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,1044,"        result.setSubMatrix(result00.getData(), 0, 0);
",0,0,0,2,4,0,8,0,0,8,46,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,1045,"        result.setSubMatrix(result01.getData(), 0, splitIndex1);
",0,0,0,2,4,0,10,0,0,10,56,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,1046,"        result.setSubMatrix(result10.getData(), splitIndex1, 0);
",0,0,0,2,4,0,10,0,0,10,56,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,1047,"        result.setSubMatrix(result11.getData(), splitIndex1, splitIndex1);
",0,0,0,2,4,0,12,0,0,12,66,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,1049,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/ZeroException,11,37,"        this(LocalizedFormats.ZERO_NOT_ALLOWED);
",4,0,0,1,2,0,0,0,0,4,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/ZeroException,11,38,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/ZeroException,11,47,"        super(specific, 0, arguments);
",4,0,0,1,2,0,0,0,0,4,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/ZeroException,11,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/NonSymmetricMatrixException,11,48,"        super(LocalizedFormats.NON_SYMMETRIC_MATRIX, row, column, threshold);
",10,0,0,1,2,0,0,0,0,10,69,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/NonSymmetricMatrixException,11,49,"        this.row = row;
",4,0,0,0,0,0,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/NonSymmetricMatrixException,11,50,"        this.column = column;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/NonSymmetricMatrixException,11,51,"        this.threshold = threshold;
",4,0,0,0,0,0,0,0,0,5,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/NonSymmetricMatrixException,11,52,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/NonSymmetricMatrixException,11,58,"        return row;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/NonSymmetricMatrixException,11,64,"        return column;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/NonSymmetricMatrixException,11,70,"        return threshold;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,98,"        super(rows, columns);
",4,0,0,1,2,0,0,0,0,4,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,99,"        this.rows = rows;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,100,"        this.columns = columns;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,103,"        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,0,0,0,0,12,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,104,"        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,0,0,0,0,12,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,107,"        blocks = createBlocksLayout(rows, columns);
",2,0,0,1,2,0,6,0,0,9,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,108,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,127,"        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);
",6,0,1,3,6,0,4,0,0,13,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,128,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,149,"        super(rows, columns);
",4,0,0,1,2,0,0,0,0,4,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,150,"        this.rows = rows;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,151,"        this.columns = columns;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,154,"        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,0,0,0,0,12,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,155,"        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,0,0,0,0,12,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,157,"        if (copyArray) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,159,"            blocks = new double[blockRows * blockColumns][];
",6,1,0,2,4,0,0,0,0,8,48,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,162,"            blocks = blockData;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,165,"        int index = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,166,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,167,"            final int iHeight = blockHeight(iBlock);
",2,0,0,1,2,1,4,0,0,7,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,168,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {
",10,1,0,1,3,0,0,0,0,13,64,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,169,"                if (blockData[index].length != iHeight * blockWidth(jBlock)) {
",4,2,1,3,7,0,4,0,0,14,62,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,170,"                    throw new DimensionMismatchException(blockData[index].length,
",2,0,1,1,3,0,0,2,0,8,61,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,173,"                if (copyArray) {
",2,0,0,1,3,0,0,0,0,2,16,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,174,"                    blocks[index] = blockData[index].clone();
",0,0,1,3,6,0,2,0,0,11,41,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,178,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,203,"        final int rows = rawData.length;
",6,0,0,0,0,1,0,0,0,7,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,204,"        final int columns = rawData[0].length;
",4,0,1,1,2,1,0,0,0,7,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,205,"        final int blockRows = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,1,0,0,0,12,62,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,206,"        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,1,0,0,0,12,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,209,"        for (int i = 0; i < rawData.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,210,"            final int length = rawData[i].length;
",4,0,1,1,2,1,0,0,0,9,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,211,"            if (length != columns) {
",4,1,0,1,3,0,0,0,0,5,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,212,"                throw new DimensionMismatchException(columns, length);
",4,0,0,1,2,0,0,2,0,6,54,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,217,"        final double[][] blocks = new double[blockRows * blockColumns][];
",6,1,0,4,8,1,0,0,0,8,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,218,"        int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,219,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,220,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,221,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,222,"            final int iHeight = pEnd - pStart;
",6,1,0,0,0,1,0,0,0,8,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,223,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,224,"                final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,225,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,60,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,226,"                final int jWidth = qEnd - qStart;
",6,1,0,0,0,1,0,0,0,8,33,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,229,"                final double[] block = new double[iHeight * jWidth];
",6,1,0,2,4,1,0,0,0,8,52,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,230,"                blocks[blockIndex] = block;
",2,0,1,1,2,0,0,0,0,7,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,233,"                int index = 0;
",2,0,0,0,0,0,0,0,0,2,14,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,234,"                for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,235,"                    System.arraycopy(rawData[p], qStart, block, index, jWidth);
",0,0,1,2,4,0,12,0,0,16,59,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,236,"                    index += jWidth;
",4,0,0,0,0,0,0,0,0,5,16,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,238,"                ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,242,"        return blocks;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,258,"        final int blockRows = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,1,0,0,0,12,62,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,259,"        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,1,0,0,0,12,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,261,"        final double[][] blocks = new double[blockRows * blockColumns][];
",6,1,0,4,8,1,0,0,0,8,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,262,"        int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,263,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,264,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,265,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,266,"            final int iHeight = pEnd - pStart;
",6,1,0,0,0,1,0,0,0,8,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,267,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,268,"                final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,269,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,60,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,270,"                final int jWidth = qEnd - qStart;
",6,1,0,0,0,1,0,0,0,8,33,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,271,"                blocks[blockIndex] = new double[iHeight * jWidth];
",4,1,1,2,4,0,0,0,0,10,50,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,272,"                ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,276,"        return blocks;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,284,"        return new BlockRealMatrix(rowDimension, columnDimension);
",4,0,0,1,2,1,0,2,0,6,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,291,"        BlockRealMatrix copied = new BlockRealMatrix(rows, columns);
",6,0,0,1,2,0,0,4,0,10,60,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,294,"        for (int i = 0; i < blocks.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,295,"            System.arraycopy(blocks[i], 0, copied.blocks[i], 0, blocks[i].length);
",6,0,1,4,8,0,4,0,0,20,70,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,298,"        return copied;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,306,"            return add((BlockRealMatrix) m);
",2,0,0,2,4,1,2,2,0,6,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,307,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,309,"            MatrixUtils.checkAdditionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,45,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,311,"            final BlockRealMatrix out = new BlockRealMatrix(rows, columns);
",6,0,0,1,2,1,0,4,0,11,63,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,314,"            int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,315,"            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {
",10,1,0,1,3,0,0,0,0,12,56,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,316,"                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {
",10,1,0,1,3,0,0,0,0,12,59,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,319,"                    final double[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,0,0,9,49,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,320,"                    final double[] tBlock   = blocks[blockIndex];
",2,0,1,2,4,1,0,0,0,7,45,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,321,"                    final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,322,"                    final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,57,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,323,"                    final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,324,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,60,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,325,"                    int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,326,"                    for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,327,"                        for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,328,"                            outBlock[k] = tBlock[k] + m.getEntry(p, q);
",0,1,1,3,6,0,8,0,0,18,43,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,329,"                            ++k;
",2,0,0,0,0,0,0,0,0,3,4,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,333,"                    ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,337,"            return out;
",2,0,0,0,0,1,0,0,0,2,11,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,352,"        MatrixUtils.checkAdditionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,45,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,354,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);
",6,0,0,1,2,1,0,4,0,11,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,357,"        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {
",12,1,0,1,3,0,0,0,0,14,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,358,"            final double[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,0,0,9,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,359,"            final double[] tBlock = blocks[blockIndex];
",2,0,1,2,4,1,0,0,0,7,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,360,"            final double[] mBlock = m.blocks[blockIndex];
",6,0,1,2,4,1,0,0,0,9,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,361,"            for (int k = 0; k < outBlock.length; ++k) {
",10,1,0,1,3,0,0,0,0,12,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,362,"                outBlock[k] = tBlock[k] + mBlock[k];
",0,1,1,3,6,0,0,0,0,14,36,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,366,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,374,"            return subtract((BlockRealMatrix) m);
",2,0,0,2,4,1,2,2,0,6,37,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,375,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,377,"            MatrixUtils.checkSubtractionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,48,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,379,"            final BlockRealMatrix out = new BlockRealMatrix(rows, columns);
",6,0,0,1,2,1,0,4,0,11,63,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,382,"            int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,383,"            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {
",10,1,0,1,3,0,0,0,0,12,56,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,384,"                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {
",10,1,0,1,3,0,0,0,0,12,59,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,387,"                    final double[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,0,0,9,49,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,388,"                    final double[] tBlock = blocks[blockIndex];
",2,0,1,2,4,1,0,0,0,7,43,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,389,"                    final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,390,"                    final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,57,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,391,"                    final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,392,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,60,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,393,"                    int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,394,"                    for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,395,"                        for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,396,"                            outBlock[k] = tBlock[k] - m.getEntry(p, q);
",0,1,1,3,6,0,8,0,0,18,43,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,397,"                            ++k;
",2,0,0,0,0,0,0,0,0,3,4,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,401,"                    ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,405,"            return out;
",2,0,0,0,0,1,0,0,0,2,11,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,420,"        MatrixUtils.checkSubtractionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,422,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);
",6,0,0,1,2,1,0,4,0,11,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,425,"        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {
",12,1,0,1,3,0,0,0,0,14,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,426,"            final double[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,0,0,9,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,427,"            final double[] tBlock = blocks[blockIndex];
",2,0,1,2,4,1,0,0,0,7,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,428,"            final double[] mBlock = m.blocks[blockIndex];
",6,0,1,2,4,1,0,0,0,9,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,429,"            for (int k = 0; k < outBlock.length; ++k) {
",10,1,0,1,3,0,0,0,0,12,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,430,"                outBlock[k] = tBlock[k] - mBlock[k];
",0,1,1,3,6,0,0,0,0,14,36,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,434,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,441,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);
",6,0,0,1,2,1,0,4,0,11,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,444,"        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {
",12,1,0,1,3,0,0,0,0,14,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,445,"            final double[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,0,0,9,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,446,"            final double[] tBlock = blocks[blockIndex];
",2,0,1,2,4,1,0,0,0,7,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,447,"            for (int k = 0; k < outBlock.length; ++k) {
",10,1,0,1,3,0,0,0,0,12,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,448,"                outBlock[k] = tBlock[k] + d;
",2,1,1,2,4,0,0,0,0,12,28,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,452,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,458,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);
",6,0,0,1,2,1,0,4,0,11,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,461,"        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {
",12,1,0,1,3,0,0,0,0,14,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,462,"            final double[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,0,0,9,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,463,"            final double[] tBlock = blocks[blockIndex];
",2,0,1,2,4,1,0,0,0,7,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,464,"            for (int k = 0; k < outBlock.length; ++k) {
",10,1,0,1,3,0,0,0,0,12,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,465,"                outBlock[k] = tBlock[k] * d;
",2,1,1,2,4,0,0,0,0,12,28,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,469,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,477,"            return multiply((BlockRealMatrix) m);
",2,0,0,2,4,1,2,2,0,6,37,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,478,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,480,"            MatrixUtils.checkMultiplicationCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,51,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,482,"            final BlockRealMatrix out = new BlockRealMatrix(rows, m.getColumnDimension());
",4,0,0,2,4,1,4,4,0,13,78,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,485,"            int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,486,"            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {
",10,1,0,1,3,0,0,0,0,12,56,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,487,"                final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,488,"                final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,57,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,490,"                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {
",10,1,0,1,3,0,0,0,0,12,59,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,491,"                    final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,492,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, m.getColumnDimension());
",6,1,0,2,4,1,8,0,0,16,75,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,495,"                    final double[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,0,0,9,49,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,498,"                    for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {
",8,1,0,1,3,0,0,0,0,10,55,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,499,"                        final int kWidth = blockWidth(kBlock);
",2,0,0,1,2,1,4,0,0,7,38,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,500,"                        final double[] tBlock = blocks[iBlock * blockColumns + kBlock];
",8,2,1,2,4,1,0,0,0,13,63,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,501,"                        final int rStart = kBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,502,"                        int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,503,"                        for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,504,"                            final int lStart = (p - pStart) * kWidth;
",8,2,0,1,2,1,0,0,0,11,41,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,505,"                            final int lEnd = lStart + kWidth;
",6,1,0,0,0,1,0,0,0,8,33,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,506,"                            for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,507,"                                double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,18,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,508,"                                int r = rStart;
",4,0,0,0,0,0,0,0,0,4,15,18,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,509,"                                for (int l = lStart; l < lEnd; ++l) {
",10,1,0,1,3,0,0,0,0,12,37,17,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,510,"                                    sum += tBlock[l] * m.getEntry(r, q);
",2,1,1,2,4,0,8,0,0,16,36,19,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,511,"                                    ++r;
",2,0,0,0,0,0,0,0,0,3,4,19,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,513,"                                outBlock[k] += sum;
",2,0,1,1,2,0,0,0,0,7,19,17,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,514,"                                ++k;
",2,0,0,0,0,0,0,0,0,3,4,17,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,519,"                    ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,523,"            return out;
",2,0,0,0,0,1,0,0,0,2,11,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,537,"        MatrixUtils.checkMultiplicationCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,51,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,539,"        final BlockRealMatrix out = new BlockRealMatrix(rows, m.columns);
",8,0,0,1,2,1,0,4,0,13,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,542,"        int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,543,"        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {
",10,1,0,1,3,0,0,0,0,12,56,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,545,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,546,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,548,"            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {
",10,1,0,1,3,0,0,0,0,12,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,549,"                final int jWidth = out.blockWidth(jBlock);
",2,0,0,1,2,1,6,0,0,9,42,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,550,"                final int jWidth2 = jWidth  + jWidth;
",6,1,0,0,0,1,0,0,0,8,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,551,"                final int jWidth3 = jWidth2 + jWidth;
",6,1,0,0,0,1,0,0,0,8,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,552,"                final int jWidth4 = jWidth3 + jWidth;
",6,1,0,0,0,1,0,0,0,8,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,555,"                final double[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,0,0,9,49,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,558,"                for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {
",8,1,0,1,3,0,0,0,0,10,55,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,559,"                    final int kWidth = blockWidth(kBlock);
",2,0,0,1,2,1,4,0,0,7,38,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,560,"                    final double[] tBlock = blocks[iBlock * blockColumns + kBlock];
",8,2,1,2,4,1,0,0,0,13,63,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,561,"                    final double[] mBlock = m.blocks[kBlock * m.blockColumns + jBlock];
",14,2,0,2,4,1,0,0,0,17,67,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,562,"                    int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,563,"                    for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,564,"                        final int lStart = (p - pStart) * kWidth;
",8,2,0,1,2,1,0,0,0,11,41,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,565,"                        final int lEnd = lStart + kWidth;
",6,1,0,0,0,1,0,0,0,8,33,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,566,"                        for (int nStart = 0; nStart < jWidth; ++nStart) {
",8,1,0,1,3,0,0,0,0,10,49,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,567,"                            double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,568,"                            int l = lStart;
",4,0,0,0,0,0,0,0,0,4,15,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,569,"                            int n = nStart;
",4,0,0,0,0,0,0,0,0,4,15,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,570,"                            while (l < lEnd - 3) {
",4,2,0,1,3,0,0,0,0,6,22,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,571,"                                sum += tBlock[l] * mBlock[n] +
",2,4,1,2,4,0,0,0,0,15,30,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,575,"                                l += 4;
",2,0,0,0,0,0,0,0,0,3,7,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,576,"                                n += jWidth4;
",4,0,0,0,0,0,0,0,0,5,13,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,578,"                            while (l < lEnd) {
",4,1,0,1,3,0,0,0,0,5,18,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,579,"                                sum += tBlock[l++] * mBlock[n];
",4,1,1,2,4,0,0,0,0,13,31,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,580,"                                n += jWidth;
",4,0,0,0,0,0,0,0,0,5,12,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,582,"                            outBlock[k] += sum;
",2,0,1,1,2,0,0,0,0,7,19,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,583,"                            ++k;
",2,0,0,0,0,0,0,0,0,3,4,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,588,"                ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,592,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,598,"        final double[][] data = new double[getRowDimension()][getColumnDimension()];
",2,0,0,6,12,1,4,0,0,7,76,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,599,"        final int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;
",8,3,0,1,2,1,0,0,0,12,66,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,601,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,602,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,603,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,604,"            int regularPos = 0;
",2,0,0,0,0,0,0,0,0,2,19,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,605,"            int lastPos = 0;
",2,0,0,0,0,0,0,0,0,2,16,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,606,"            for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,607,"                final double[] dataP = data[p];
",2,0,1,2,4,1,0,0,0,7,31,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,608,"                int blockIndex = iBlock * blockColumns;
",6,1,0,0,0,0,0,0,0,7,39,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,609,"                int dataPos = 0;
",2,0,0,0,0,0,0,0,0,2,16,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,610,"                for (int jBlock = 0; jBlock < blockColumns - 1; ++jBlock) {
",8,2,0,1,3,0,0,0,0,11,59,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,611,"                    System.arraycopy(blocks[blockIndex++], regularPos, dataP, dataPos, BLOCK_SIZE);
",2,0,1,2,4,0,12,0,0,17,79,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,612,"                    dataPos += BLOCK_SIZE;
",4,0,0,0,0,0,0,0,0,5,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,614,"                System.arraycopy(blocks[blockIndex], lastPos, dataP, dataPos, lastColumns);
",0,0,1,2,4,0,12,0,0,16,75,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,615,"                regularPos += BLOCK_SIZE;
",4,0,0,0,0,0,0,0,0,5,25,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,616,"                lastPos    += lastColumns;
",4,0,0,0,0,0,0,0,0,5,26,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,620,"        return data;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,626,"        final double[] colSums = new double[BLOCK_SIZE];
",2,0,1,2,4,1,0,0,0,5,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,627,"        double maxColSum = 0;
",2,0,0,0,0,0,0,0,0,2,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,628,"        for (int jBlock = 0; jBlock < blockColumns; jBlock++) {
",8,1,0,1,3,0,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,629,"            final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,630,"            Arrays.fill(colSums, 0, jWidth, 0.0);
",0,0,0,1,2,0,8,0,0,8,37,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,631,"            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,632,"                final int iHeight = blockHeight(iBlock);
",2,0,0,1,2,1,4,0,0,7,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,633,"                final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,634,"                for (int j = 0; j < jWidth; ++j) {
",8,1,0,1,3,0,0,0,0,10,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,635,"                    double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,636,"                    for (int i = 0; i < iHeight; ++i) {
",8,1,0,1,3,0,0,0,0,10,35,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,637,"                        sum += FastMath.abs(block[i * jWidth + j]);
",8,2,1,2,4,0,4,0,0,17,43,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,639,"                    colSums[j] += sum;
",2,0,1,1,2,0,0,0,0,7,18,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,642,"            for (int j = 0; j < jWidth; ++j) {
",8,1,0,1,3,0,0,0,0,10,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,643,"                maxColSum = FastMath.max(maxColSum, colSums[j]);
",2,0,1,2,4,0,6,0,0,13,48,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,646,"        return maxColSum;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,652,"        double sum2 = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,653,"        for (int blockIndex = 0; blockIndex < blocks.length; ++blockIndex) {
",10,1,0,1,3,0,0,0,0,12,68,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,654,"            for (final double entry : blocks[blockIndex]) {
",2,0,1,2,5,1,0,0,0,7,47,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,655,"                sum2 += entry * entry;
",6,1,0,0,0,0,0,0,0,8,22,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,658,"        return FastMath.sqrt(sum2);
",0,0,0,1,2,1,6,0,0,6,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,668,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,671,"        final BlockRealMatrix out =
",2,0,0,0,0,1,0,2,0,5,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,675,"        final int blockStartRow = startRow / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,676,"        final int rowsShift = startRow % BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,677,"        final int blockStartColumn = startColumn / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,678,"        final int columnsShift = startColumn % BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,681,"        int pBlock = blockStartRow;
",4,0,0,0,0,0,0,0,0,4,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,682,"        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {
",10,1,0,1,3,0,0,0,0,12,56,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,683,"            final int iHeight = out.blockHeight(iBlock);
",2,0,0,1,2,1,6,0,0,9,44,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,684,"            int qBlock = blockStartColumn;
",4,0,0,0,0,0,0,0,0,4,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,685,"            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {
",10,1,0,1,3,0,0,0,0,12,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,686,"                final int jWidth = out.blockWidth(jBlock);
",2,0,0,1,2,1,6,0,0,9,42,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,689,"                final int outIndex = iBlock * out.blockColumns + jBlock;
",10,2,0,0,0,1,0,0,0,13,56,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,690,"                final double[] outBlock = out.blocks[outIndex];
",6,0,1,2,4,1,0,0,0,9,47,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,691,"                final int index = pBlock * blockColumns + qBlock;
",8,2,0,0,0,1,0,0,0,11,49,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,692,"                final int width = blockWidth(qBlock);
",2,0,0,1,2,1,4,0,0,7,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,694,"                final int heightExcess = iHeight + rowsShift - BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,58,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,695,"                final int widthExcess = jWidth + columnsShift - BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,59,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,696,"                if (heightExcess > 0) {
",2,1,0,1,3,0,0,0,0,3,23,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,698,"                    if (widthExcess > 0) {
",2,1,0,1,3,0,0,0,0,3,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,700,"                        final int width2 = blockWidth(qBlock + 1);
",4,1,0,1,2,1,2,0,0,8,42,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,701,"                        copyBlockPart(blocks[index], width,
",0,0,1,1,3,0,4,0,0,8,35,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,705,"                        copyBlockPart(blocks[index + 1], width2,
",2,1,1,1,3,0,4,0,0,9,40,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,709,"                        copyBlockPart(blocks[index + blockColumns], width,
",4,1,1,1,3,0,4,0,0,11,50,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,713,"                        copyBlockPart(blocks[index + blockColumns + 1], width2,
",4,1,1,1,3,0,4,0,0,11,55,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,717,"                    } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,719,"                        copyBlockPart(blocks[index], width,
",0,0,1,1,3,0,4,0,0,8,35,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,723,"                        copyBlockPart(blocks[index + blockColumns], width,
",4,1,1,1,3,0,4,0,0,11,50,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,730,"                    if (widthExcess > 0) {
",2,1,0,1,3,0,0,0,0,3,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,732,"                        final int width2 = blockWidth(qBlock + 1);
",4,1,0,1,2,1,2,0,0,8,42,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,733,"                        copyBlockPart(blocks[index], width,
",0,0,1,1,3,0,4,0,0,8,35,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,737,"                        copyBlockPart(blocks[index + 1], width2,
",2,1,1,1,3,0,4,0,0,9,40,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,741,"                    } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,743,"                        copyBlockPart(blocks[index], width,
",0,0,1,1,3,0,4,0,0,8,35,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,749,"                ++qBlock;
",2,0,0,0,0,0,0,0,0,3,9,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,751,"            ++pBlock;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,754,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,777,"        final int length = srcEndColumn - srcStartColumn;
",6,1,0,0,0,1,0,0,0,8,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,778,"        int srcPos = srcStartRow * srcWidth + srcStartColumn;
",8,2,0,0,0,0,0,0,0,10,53,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,779,"        int dstPos = dstStartRow * dstWidth + dstStartColumn;
",8,2,0,0,0,0,0,0,0,10,53,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,780,"        for (int srcRow = srcStartRow; srcRow < srcEndRow; ++srcRow) {
",10,1,0,1,3,0,0,0,0,12,62,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,781,"            System.arraycopy(srcBlock, srcPos, dstBlock, dstPos, length);
",0,0,0,1,2,0,14,0,0,14,61,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,782,"            srcPos += srcWidth;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,783,"            dstPos += dstWidth;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,785,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,794,"        MathUtils.checkNotNull(subMatrix);
",0,0,0,1,2,0,6,0,0,6,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,795,"        final int refLength = subMatrix[0].length;
",4,0,1,1,2,1,0,0,0,7,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,796,"        if (refLength == 0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,797,"            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
",4,0,0,1,2,0,0,2,0,6,64,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,799,"        final int endRow = row + subMatrix.length - 1;
",8,2,0,0,0,1,0,0,0,11,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,800,"        final int endColumn = column + refLength - 1;
",6,2,0,0,0,1,0,0,0,9,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,801,"        MatrixUtils.checkSubMatrixIndex(this, row, endRow, column, endColumn);
",0,0,0,1,2,0,12,0,0,12,70,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,802,"        for (final double[] subRow : subMatrix) {
",4,0,0,2,5,1,0,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,803,"            if (subRow.length != refLength) {
",6,1,0,1,3,0,0,0,0,7,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,804,"                throw new DimensionMismatchException(refLength, subRow.length);
",6,0,0,1,2,0,0,2,0,8,63,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,809,"        final int blockStartRow = row / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,810,"        final int blockEndRow = (endRow + BLOCK_SIZE) / BLOCK_SIZE;
",8,2,0,1,2,1,0,0,0,11,59,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,811,"        final int blockStartColumn = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,812,"        final int blockEndColumn = (endColumn + BLOCK_SIZE) / BLOCK_SIZE;
",8,2,0,1,2,1,0,0,0,11,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,815,"        for (int iBlock = blockStartRow; iBlock < blockEndRow; ++iBlock) {
",10,1,0,1,3,0,0,0,0,12,66,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,816,"            final int iHeight = blockHeight(iBlock);
",2,0,0,1,2,1,4,0,0,7,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,817,"            final int firstRow = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,41,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,818,"            final int iStart = FastMath.max(row,    firstRow);
",2,0,0,1,2,1,8,0,0,11,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,819,"            final int iEnd = FastMath.min(endRow + 1, firstRow + iHeight);
",8,2,0,1,2,1,4,0,0,15,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,821,"            for (int jBlock = blockStartColumn; jBlock < blockEndColumn; ++jBlock) {
",10,1,0,1,3,0,0,0,0,12,72,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,822,"                final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,823,"                final int firstColumn = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,44,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,824,"                final int jStart = FastMath.max(column,    firstColumn);
",2,0,0,1,2,1,8,0,0,11,56,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,825,"                final int jEnd = FastMath.min(endColumn + 1, firstColumn + jWidth);
",8,2,0,1,2,1,4,0,0,15,67,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,826,"                final int jLength = jEnd - jStart;
",6,1,0,0,0,1,0,0,0,8,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,829,"                final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,830,"                for (int i = iStart; i < iEnd; ++i) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,831,"                    System.arraycopy(subMatrix[i - row], jStart - column,
",8,2,1,1,3,0,4,0,0,16,53,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,838,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,844,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,845,"        final BlockRealMatrix out = new BlockRealMatrix(1, columns);
",4,0,0,1,2,1,0,4,0,9,60,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,848,"        final int iBlock = row / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,849,"        final int iRow = row - iBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,850,"        int outBlockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,851,"        int outIndex = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,852,"        double[] outBlock = out.blocks[outBlockIndex];
",6,0,1,2,4,0,0,0,0,8,46,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,853,"        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,854,"            final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,855,"            final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,856,"            final int available = outBlock.length - outIndex;
",8,1,0,0,0,1,0,0,0,10,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,857,"            if (jWidth > available) {
",4,1,0,1,3,0,0,0,0,5,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,858,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, available);
",4,1,0,1,2,0,12,0,0,17,70,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,859,"                outBlock = out.blocks[++outBlockIndex];
",8,0,0,1,2,0,0,0,0,10,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,860,"                System.arraycopy(block, iRow * jWidth, outBlock, 0, jWidth - available);
",8,2,0,1,2,0,8,0,0,18,72,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,861,"                outIndex = jWidth - available;
",6,1,0,0,0,0,0,0,0,8,30,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,863,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, jWidth);
",4,1,0,1,2,0,12,0,0,17,67,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,864,"                outIndex += jWidth;
",4,0,0,0,0,0,0,0,0,5,19,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,868,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,876,"            setRowMatrix(row, (BlockRealMatrix) matrix);
",2,0,0,2,4,0,4,2,0,8,44,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,879,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,877,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,878,"            super.setRowMatrix(row, matrix);
",6,0,0,1,2,0,0,0,0,6,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,880,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,895,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,896,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,897,"        if ((matrix.getRowDimension() != 1) ||
",0,2,0,2,5,0,4,0,0,6,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,899,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),
",0,0,0,1,3,0,4,2,0,6,68,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,905,"        final int iBlock = row / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,906,"        final int iRow = row - iBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,907,"        int mBlockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,908,"        int mIndex = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,909,"        double[] mBlock = matrix.blocks[mBlockIndex];
",6,0,1,2,4,0,0,0,0,8,45,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,910,"        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,911,"            final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,912,"            final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,913,"            final int available  = mBlock.length - mIndex;
",8,1,0,0,0,1,0,0,0,10,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,914,"            if (jWidth > available) {
",4,1,0,1,3,0,0,0,0,5,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,915,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, available);
",4,1,0,1,2,0,12,0,0,17,66,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,916,"                mBlock = matrix.blocks[++mBlockIndex];
",8,0,0,1,2,0,0,0,0,10,38,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,917,"                System.arraycopy(mBlock, 0, block, iRow * jWidth, jWidth - available);
",8,2,0,1,2,0,8,0,0,18,70,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,918,"                mIndex = jWidth - available;
",6,1,0,0,0,0,0,0,0,8,28,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,920,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, jWidth);
",4,1,0,1,2,0,12,0,0,17,63,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,921,"                mIndex += jWidth;
",4,0,0,0,0,0,0,0,0,5,17,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,924,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,930,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,931,"        final BlockRealMatrix out = new BlockRealMatrix(rows, 1);
",4,0,0,1,2,1,0,4,0,9,57,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,934,"        final int jBlock = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,935,"        final int jColumn = column - jBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,936,"        final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,937,"        int outBlockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,938,"        int outIndex = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,939,"        double[] outBlock = out.blocks[outBlockIndex];
",6,0,1,2,4,0,0,0,0,8,46,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,940,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,941,"            final int iHeight = blockHeight(iBlock);
",2,0,0,1,2,1,4,0,0,7,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,942,"            final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,943,"            for (int i = 0; i < iHeight; ++i) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,944,"                if (outIndex >= outBlock.length) {
",6,1,0,1,3,0,0,0,0,7,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,945,"                    outBlock = out.blocks[++outBlockIndex];
",8,0,0,1,2,0,0,0,0,10,39,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,946,"                    outIndex = 0;
",2,0,0,0,0,0,0,0,0,3,13,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,948,"                outBlock[outIndex++] = block[i * jWidth + jColumn];
",8,2,1,2,4,0,0,0,0,16,51,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,952,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,960,"            setColumnMatrix(column, (BlockRealMatrix) matrix);
",2,0,0,2,4,0,4,2,0,8,50,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,963,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,961,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,962,"            super.setColumnMatrix(column, matrix);
",6,0,0,1,2,0,0,0,0,6,38,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,964,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,979,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,980,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,981,"        if ((matrix.getRowDimension() != nRows) ||
",2,2,0,2,5,0,4,0,0,8,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,983,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),
",0,0,0,1,3,0,4,2,0,6,68,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,989,"        final int jBlock = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,990,"        final int jColumn = column - jBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,991,"        final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,992,"        int mBlockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,993,"        int mIndex = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,994,"        double[] mBlock = matrix.blocks[mBlockIndex];
",6,0,1,2,4,0,0,0,0,8,45,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,995,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,996,"            final int iHeight = blockHeight(iBlock);
",2,0,0,1,2,1,4,0,0,7,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,997,"            final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,998,"            for (int i = 0; i < iHeight; ++i) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,999,"                if (mIndex >= mBlock.length) {
",6,1,0,1,3,0,0,0,0,7,30,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1000,"                    mBlock = matrix.blocks[++mBlockIndex];
",8,0,0,1,2,0,0,0,0,10,38,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1001,"                    mIndex = 0;
",2,0,0,0,0,0,0,0,0,3,11,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1003,"                block[i * jWidth + jColumn] = mBlock[mIndex++];
",8,2,1,2,4,0,0,0,0,16,47,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1006,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1012,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1013,"        final double[] outData = new double[columns];
",2,0,1,2,4,1,0,0,0,5,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1016,"        final int iBlock = row / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1017,"        final int iRow = row - iBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1018,"        int outIndex = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1019,"        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1020,"            final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1021,"            final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1022,"            System.arraycopy(block, iRow * jWidth, outData, outIndex, jWidth);
",4,1,0,1,2,0,12,0,0,17,66,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1023,"            outIndex += jWidth;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1026,"        return new ArrayRealVector(outData, false);
",2,0,0,1,2,1,0,2,0,5,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1034,"            setRow(row, ((ArrayRealVector) vector).getDataRef());
",2,0,0,4,8,0,6,2,0,10,53,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1037,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1035,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1036,"            super.setRowVector(row, vector);
",6,0,0,1,2,0,0,0,0,6,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1038,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1044,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1045,"        final double[] outData = new double[rows];
",2,0,1,2,4,1,0,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1048,"        final int jBlock = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1049,"        final int jColumn = column - jBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1050,"        final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1051,"        int outIndex = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1052,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1053,"            final int iHeight = blockHeight(iBlock);
",2,0,0,1,2,1,4,0,0,7,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1054,"            final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1055,"            for (int i = 0; i < iHeight; ++i) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1056,"                outData[outIndex++] = block[i * jWidth + jColumn];
",8,2,1,2,4,0,0,0,0,16,50,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1060,"        return new ArrayRealVector(outData, false);
",2,0,0,1,2,1,0,2,0,5,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1068,"            setColumn(column, ((ArrayRealVector) vector).getDataRef());
",2,0,0,4,8,0,6,2,0,10,59,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1071,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1069,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1070,"            super.setColumnVector(column, vector);
",6,0,0,1,2,0,0,0,0,6,38,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1072,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1077,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1078,"        final double[] out = new double[columns];
",2,0,1,2,4,1,0,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1081,"        final int iBlock = row / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1082,"        final int iRow = row - iBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1083,"        int outIndex = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1084,"        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1085,"            final int jWidth     = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1086,"            final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1087,"            System.arraycopy(block, iRow * jWidth, out, outIndex, jWidth);
",4,1,0,1,2,0,12,0,0,17,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1088,"            outIndex += jWidth;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1091,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1098,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1099,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1100,"        if (array.length != nCols) {
",6,1,0,1,3,0,0,0,0,7,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1101,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);
",6,0,0,1,2,0,0,2,0,8,70,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1105,"        final int iBlock = row / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1106,"        final int iRow = row - iBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1107,"        int outIndex = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1108,"        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1109,"            final int jWidth     = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1110,"            final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1111,"            System.arraycopy(array, outIndex, block, iRow * jWidth, jWidth);
",4,1,0,1,2,0,12,0,0,17,64,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1112,"            outIndex += jWidth;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1114,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1119,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1120,"        final double[] out = new double[rows];
",2,0,1,2,4,1,0,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1123,"        final int jBlock  = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1124,"        final int jColumn = column - jBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1125,"        final int jWidth  = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1126,"        int outIndex = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1127,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1128,"            final int iHeight = blockHeight(iBlock);
",2,0,0,1,2,1,4,0,0,7,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1129,"            final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1130,"            for (int i = 0; i < iHeight; ++i) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1131,"                out[outIndex++] = block[i * jWidth + jColumn];
",8,2,1,2,4,0,0,0,0,16,46,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1135,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1142,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1143,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1144,"        if (array.length != nRows) {
",6,1,0,1,3,0,0,0,0,7,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1145,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);
",6,0,0,1,2,0,0,2,0,8,70,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1149,"        final int jBlock  = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1150,"        final int jColumn = column - jBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1151,"        final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1152,"        int outIndex = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1153,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1154,"            final int iHeight = blockHeight(iBlock);
",2,0,0,1,2,1,4,0,0,7,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1155,"            final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1156,"            for (int i = 0; i < iHeight; ++i) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1157,"                block[i * jWidth + jColumn] = array[outIndex++];
",8,2,1,2,4,0,0,0,0,16,48,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1160,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1166,"        MatrixUtils.checkMatrixIndex(this, row, column);
",0,0,0,1,2,0,8,0,0,8,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1167,"        final int iBlock = row / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1168,"        final int jBlock = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1169,"        final int k = (row - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
",8,4,0,2,4,1,4,0,0,17,64,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1171,"        return blocks[iBlock * blockColumns + jBlock][k];
",6,2,1,2,4,1,0,0,0,12,49,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1178,"        MatrixUtils.checkMatrixIndex(this, row, column);
",0,0,0,1,2,0,8,0,0,8,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1179,"        final int iBlock = row / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1180,"        final int jBlock = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1181,"        final int k = (row - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
",8,4,0,2,4,1,4,0,0,17,64,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1183,"        blocks[iBlock * blockColumns + jBlock][k] = value;
",8,2,1,2,4,0,0,0,0,15,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1184,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1191,"        MatrixUtils.checkMatrixIndex(this, row, column);
",0,0,0,1,2,0,8,0,0,8,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1192,"        final int iBlock = row    / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1193,"        final int jBlock = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1194,"        final int k = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
",8,4,0,2,4,1,4,0,0,17,67,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1196,"        blocks[iBlock * blockColumns + jBlock][k] += increment;
",8,2,1,2,4,0,0,0,0,15,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1197,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1204,"        MatrixUtils.checkMatrixIndex(this, row, column);
",0,0,0,1,2,0,8,0,0,8,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1205,"        final int iBlock = row / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1206,"        final int jBlock = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1207,"        final int k = (row - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
",8,4,0,2,4,1,4,0,0,17,64,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1209,"        blocks[iBlock * blockColumns + jBlock][k] *= factor;
",8,2,1,2,4,0,0,0,0,15,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1210,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1215,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1216,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1217,"        final BlockRealMatrix out = new BlockRealMatrix(nCols, nRows);
",6,0,0,1,2,1,0,4,0,11,62,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1220,"        int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1221,"        for (int iBlock = 0; iBlock < blockColumns; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1222,"            for (int jBlock = 0; jBlock < blockRows; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1224,"                final double[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,0,0,9,49,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1225,"                final double[] tBlock = blocks[jBlock * blockColumns + iBlock];
",8,2,1,2,4,1,0,0,0,13,63,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1226,"                final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1227,"                final int pEnd = FastMath.min(pStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,60,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1228,"                final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1229,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,57,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1230,"                int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1231,"                for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1232,"                    final int lInc = pEnd - pStart;
",6,1,0,0,0,1,0,0,0,8,31,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1233,"                    int l = p - pStart;
",6,1,0,0,0,0,0,0,0,7,19,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1234,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1235,"                        outBlock[k] = tBlock[l];
",0,0,1,2,4,0,0,0,0,9,24,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1236,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1237,"                        l+= lInc;
",4,0,0,0,0,0,0,0,0,5,9,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1241,"                ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1245,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1251,"        return rows;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1257,"        return columns;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1264,"        if (v.length != columns) {
",6,1,0,1,3,0,0,0,0,7,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1265,"            throw new DimensionMismatchException(v.length, columns);
",6,0,0,1,2,0,0,2,0,8,56,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1267,"        final double[] out = new double[rows];
",2,0,1,2,4,1,0,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1270,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1271,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1272,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1273,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1274,"                final double[] block  = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,63,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1275,"                final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1276,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,60,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1277,"                int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1278,"                for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1279,"                    double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1280,"                    int q = qStart;
",4,0,0,0,0,0,0,0,0,4,15,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1281,"                    while (q < qEnd - 3) {
",4,2,0,1,3,0,0,0,0,6,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1282,"                        sum += block[k]     * v[q]     +
",2,4,1,2,4,0,0,0,0,15,32,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1286,"                        k += 4;
",2,0,0,0,0,0,0,0,0,3,7,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1287,"                        q += 4;
",2,0,0,0,0,0,0,0,0,3,7,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1289,"                    while (q < qEnd) {
",4,1,0,1,3,0,0,0,0,5,18,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1290,"                        sum += block[k++] * v[q++];
",6,1,1,2,4,0,0,0,0,14,27,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1292,"                    out[p] += sum;
",2,0,1,1,2,0,0,0,0,7,14,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1297,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1304,"        if (v.length != rows) {
",6,1,0,1,3,0,0,0,0,7,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1305,"            throw new DimensionMismatchException(v.length, rows);
",6,0,0,1,2,0,0,2,0,8,53,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1307,"        final double[] out = new double[columns];
",2,0,1,2,4,1,0,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1310,"        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1311,"            final int jWidth  = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1312,"            final int jWidth2 = jWidth  + jWidth;
",6,1,0,0,0,1,0,0,0,8,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1313,"            final int jWidth3 = jWidth2 + jWidth;
",6,1,0,0,0,1,0,0,0,8,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1314,"            final int jWidth4 = jWidth3 + jWidth;
",6,1,0,0,0,1,0,0,0,8,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1315,"            final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1316,"            final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,60,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1317,"            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1318,"                final double[] block  = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,63,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1319,"                final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1320,"                final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,57,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1321,"                for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1322,"                    int k = q - qStart;
",6,1,0,0,0,0,0,0,0,7,19,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1323,"                    double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1324,"                    int p = pStart;
",4,0,0,0,0,0,0,0,0,4,15,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1325,"                    while (p < pEnd - 3) {
",4,2,0,1,3,0,0,0,0,6,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1326,"                        sum += block[k]           * v[p]     +
",2,4,1,2,4,0,0,0,0,15,38,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1330,"                        k += jWidth4;
",4,0,0,0,0,0,0,0,0,5,13,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1331,"                        p += 4;
",2,0,0,0,0,0,0,0,0,3,7,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1333,"                    while (p < pEnd) {
",4,1,0,1,3,0,0,0,0,5,18,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1334,"                        sum += block[k] * v[p++];
",4,1,1,2,4,0,0,0,0,13,25,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1335,"                        k += jWidth;
",4,0,0,0,0,0,0,0,0,5,12,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1337,"                    out[q] += sum;
",2,0,1,1,2,0,0,0,0,7,14,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1342,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1348,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1349,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1350,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1351,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1352,"            for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1353,"                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1354,"                    final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1355,"                    final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1356,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,60,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1357,"                    final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1358,"                    int k = (p - pStart) * jWidth;
",8,2,0,1,2,0,0,0,0,10,30,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1359,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1360,"                        block[k] = visitor.visit(p, q, block[k]);
",0,0,1,3,6,0,8,0,0,17,41,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1361,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1366,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1372,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1373,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1374,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1375,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1376,"            for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1377,"                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1378,"                    final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1379,"                    final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1380,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,60,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1381,"                    final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1382,"                    int k = (p - pStart) * jWidth;
",8,2,0,1,2,0,0,0,0,10,30,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1383,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1384,"                        visitor.visit(p, q, block[k]);
",0,0,1,2,4,0,8,0,0,12,30,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1385,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1390,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1399,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1400,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,16,0,0,16,71,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1401,"        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {
",14,4,0,1,3,0,0,0,0,19,86,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1402,"            final int p0 = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1403,"            final int pStart = FastMath.max(startRow, p0);
",2,0,0,1,2,1,8,0,0,11,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1404,"            final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);
",8,3,0,2,4,1,4,0,0,16,69,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1405,"            for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1406,"                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {
",14,4,0,1,3,0,0,0,0,19,92,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1407,"                    final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1408,"                    final int q0 = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,35,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1409,"                    final int qStart = FastMath.max(startColumn, q0);
",2,0,0,1,2,1,8,0,0,11,49,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1410,"                    final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);
",8,3,0,2,4,1,4,0,0,16,72,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1411,"                    final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1412,"                    int k = (p - p0) * jWidth + qStart - q0;
",12,4,0,1,2,0,0,0,0,16,40,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1413,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1414,"                        block[k] = visitor.visit(p, q, block[k]);
",0,0,1,3,6,0,8,0,0,17,41,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1415,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1420,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1429,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1430,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,16,0,0,16,71,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1431,"        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {
",14,4,0,1,3,0,0,0,0,19,86,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1432,"            final int p0 = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1433,"            final int pStart = FastMath.max(startRow, p0);
",2,0,0,1,2,1,8,0,0,11,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1434,"            final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);
",8,3,0,2,4,1,4,0,0,16,69,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1435,"            for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1436,"                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {
",14,4,0,1,3,0,0,0,0,19,92,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1437,"                    final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1438,"                    final int q0 = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,35,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1439,"                    final int qStart = FastMath.max(startColumn, q0);
",2,0,0,1,2,1,8,0,0,11,49,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1440,"                    final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);
",8,3,0,2,4,1,4,0,0,16,72,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1441,"                    final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1442,"                    int k = (p - p0) * jWidth + qStart - q0;
",12,4,0,1,2,0,0,0,0,16,40,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1443,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1444,"                        visitor.visit(p, q, block[k]);
",0,0,1,2,4,0,8,0,0,12,30,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1445,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1450,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1456,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1457,"        int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1458,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1459,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1460,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1461,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1462,"                final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1463,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,60,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1464,"                final double[] block = blocks[blockIndex];
",2,0,1,2,4,1,0,0,0,7,42,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1465,"                int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1466,"                for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1467,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1468,"                        block[k] = visitor.visit(p, q, block[k]);
",0,0,1,3,6,0,8,0,0,17,41,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1469,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1472,"                ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1475,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1481,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1482,"        int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1483,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1484,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1485,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1486,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1487,"                final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1488,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,60,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1489,"                final double[] block = blocks[blockIndex];
",2,0,1,2,4,1,0,0,0,7,42,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1490,"                int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1491,"                for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1492,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1493,"                        visitor.visit(p, q, block[k]);
",0,0,1,2,4,0,8,0,0,12,30,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1494,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1497,"                ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1500,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1510,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1511,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,16,0,0,16,71,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1512,"        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {
",14,4,0,1,3,0,0,0,0,19,86,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1513,"            final int p0 = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1514,"            final int pStart = FastMath.max(startRow, p0);
",2,0,0,1,2,1,8,0,0,11,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1515,"            final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);
",8,3,0,2,4,1,4,0,0,16,69,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1516,"            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {
",14,4,0,1,3,0,0,0,0,19,92,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1517,"                final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1518,"                final int q0 = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,35,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1519,"                final int qStart = FastMath.max(startColumn, q0);
",2,0,0,1,2,1,8,0,0,11,49,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1520,"                final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);
",8,3,0,2,4,1,4,0,0,16,72,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1521,"                final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1522,"                for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1523,"                    int k = (p - p0) * jWidth + qStart - q0;
",12,4,0,1,2,0,0,0,0,16,40,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1524,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1525,"                        block[k] = visitor.visit(p, q, block[k]);
",0,0,1,3,6,0,8,0,0,17,41,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1526,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1531,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1541,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1542,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,16,0,0,16,71,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1543,"        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {
",14,4,0,1,3,0,0,0,0,19,86,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1544,"            final int p0 = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1545,"            final int pStart = FastMath.max(startRow, p0);
",2,0,0,1,2,1,8,0,0,11,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1546,"            final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);
",8,3,0,2,4,1,4,0,0,16,69,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1547,"            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {
",14,4,0,1,3,0,0,0,0,19,92,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1548,"                final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1549,"                final int q0 = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,35,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1550,"                final int qStart = FastMath.max(startColumn, q0);
",2,0,0,1,2,1,8,0,0,11,49,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1551,"                final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);
",8,3,0,2,4,1,4,0,0,16,72,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1552,"                final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1553,"                for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1554,"                    int k = (p - p0) * jWidth + qStart - q0;
",12,4,0,1,2,0,0,0,0,16,40,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1555,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1556,"                        visitor.visit(p, q, block[k]);
",0,0,1,2,4,0,8,0,0,12,30,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1557,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1562,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1571,"        return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;
",12,4,0,1,2,1,0,0,0,16,79,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,1580,"        return (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;
",12,4,0,1,2,1,0,0,0,16,91,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,11,72,"public class BlockRealMatrix extends AbstractRealMatrix implements Serializable {
",2,0,0,0,1,1,0,4,0,7,81,1,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,58,"        super(field);
",2,0,0,1,2,0,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,59,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,72,"        super(field, rowDimension, columnDimension);
",6,0,0,1,2,0,0,0,0,6,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,73,"        data = buildArray(field, rowDimension, columnDimension);
",2,0,0,1,2,0,8,0,0,11,56,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,74,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,92,"        this(extractField(d), d);
",2,0,0,2,4,0,4,0,0,6,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,93,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,112,"        super(field);
",2,0,0,1,2,0,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,113,"        copyIn(d);
",0,0,0,1,2,0,4,0,0,4,10,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,114,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,134,"        this(extractField(d), d, copyArray);
",4,0,0,2,4,0,4,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,135,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,155,"        super(field);
",2,0,0,1,2,0,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,156,"        if (copyArray) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,157,"            copyIn(d);
",0,0,0,1,2,0,4,0,0,4,10,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,159,"            MathUtils.checkNotNull(d);
",0,0,0,1,2,0,6,0,0,6,26,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,160,"            final int nRows = d.length;
",6,0,0,0,0,1,0,0,0,7,27,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,161,"            if (nRows == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,162,"                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
",4,0,0,1,2,0,0,2,0,6,61,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,164,"            final int nCols = d[0].length;
",4,0,1,1,2,1,0,0,0,7,30,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,165,"            if (nCols == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,166,"                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
",4,0,0,1,2,0,0,2,0,6,64,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,168,"            for (int r = 1; r < nRows; r++) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,169,"                if (d[r].length != nCols) {
",4,1,1,2,5,0,0,0,0,9,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,170,"                    throw new DimensionMismatchException(nCols, d[r].length);
",4,0,1,2,4,0,0,2,0,10,57,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,173,"            data = d;
",4,0,0,0,0,0,0,0,0,5,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,175,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,186,"        this(extractField(v), v);
",2,0,0,2,4,0,4,0,0,6,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,187,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,198,"        super(field);
",2,0,0,1,2,0,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,199,"        final int nRows = v.length;
",6,0,0,0,0,1,0,0,0,7,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,200,"        data = buildArray(getField(), nRows, 1);
",2,0,0,2,4,0,6,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,201,"        for (int row = 0; row < nRows; row++) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,202,"            data[row][0] = v[row];
",0,0,1,3,6,0,0,0,0,9,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,204,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,211,"        return new Array2DRowFieldMatrix<T>(getField(), rowDimension, columnDimension);
",4,0,0,2,4,1,2,4,0,10,79,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,217,"        return new Array2DRowFieldMatrix<T>(getField(), copyOut(), false);
",0,0,0,3,6,1,4,4,0,9,66,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,231,"        checkAdditionCompatible(m);
",0,0,0,1,2,0,4,0,0,4,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,233,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,234,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,235,"        final T[][] outData = buildArray(getField(), rowCount, columnCount);
",2,0,0,4,8,1,8,2,0,13,68,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,236,"        for (int row = 0; row < rowCount; row++) {
",8,1,0,1,3,0,0,0,0,10,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,237,"            final T[] dataRow    = data[row];
",2,0,1,2,4,1,0,2,0,9,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,238,"            final T[] mRow       = m.data[row];
",6,0,1,2,4,1,0,2,0,11,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,239,"            final T[] outDataRow = outData[row];
",2,0,1,2,4,1,0,2,0,9,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,240,"            for (int col = 0; col < columnCount; col++) {
",8,1,0,1,3,0,0,0,0,10,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,241,"                outDataRow[col] = dataRow[col].add(mRow[col]);
",0,0,1,4,8,0,2,0,0,15,46,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,245,"        return new Array2DRowFieldMatrix<T>(getField(), outData, false);
",2,0,0,2,4,1,2,4,0,9,64,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,259,"        checkSubtractionCompatible(m);
",0,0,0,1,2,0,4,0,0,4,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,261,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,262,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,263,"        final T[][] outData = buildArray(getField(), rowCount, columnCount);
",2,0,0,4,8,1,8,2,0,13,68,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,264,"        for (int row = 0; row < rowCount; row++) {
",8,1,0,1,3,0,0,0,0,10,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,265,"            final T[] dataRow    = data[row];
",2,0,1,2,4,1,0,2,0,9,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,266,"            final T[] mRow       = m.data[row];
",6,0,1,2,4,1,0,2,0,11,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,267,"            final T[] outDataRow = outData[row];
",2,0,1,2,4,1,0,2,0,9,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,268,"            for (int col = 0; col < columnCount; col++) {
",8,1,0,1,3,0,0,0,0,10,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,269,"                outDataRow[col] = dataRow[col].subtract(mRow[col]);
",0,0,1,4,8,0,2,0,0,15,51,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,273,"        return new Array2DRowFieldMatrix<T>(getField(), outData, false);
",2,0,0,2,4,1,2,4,0,9,64,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,288,"        checkMultiplicationCompatible(m);
",0,0,0,1,2,0,4,0,0,4,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,290,"        final int nRows = this.getRowDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,291,"        final int nCols = m.getColumnDimension();
",2,0,0,1,2,1,4,0,0,7,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,292,"        final int nSum = this.getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,293,"        final T[][] outData = buildArray(getField(), nRows, nCols);
",2,0,0,4,8,1,8,2,0,13,59,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,294,"        for (int row = 0; row < nRows; row++) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,295,"            final T[] dataRow    = data[row];
",2,0,1,2,4,1,0,2,0,9,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,296,"            final T[] outDataRow = outData[row];
",2,0,1,2,4,1,0,2,0,9,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,297,"            for (int col = 0; col < nCols; col++) {
",8,1,0,1,3,0,0,0,0,10,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,298,"                T sum = getField().getZero();
",2,0,0,2,4,0,4,2,0,8,29,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,299,"                for (int i = 0; i < nSum; i++) {
",8,1,0,1,3,0,0,0,0,10,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,300,"                    sum = sum.add(dataRow[i].multiply(m.data[i][col]));
",6,0,1,5,10,0,6,0,0,21,51,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,302,"                outDataRow[col] = sum;
",2,0,1,1,2,0,0,0,0,7,22,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,306,"        return new Array2DRowFieldMatrix<T>(getField(), outData, false);
",2,0,0,2,4,1,2,4,0,9,64,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,313,"        return copyOut();
",0,0,0,1,2,1,2,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,323,"        return data;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,332,"        if (data == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,333,"            if (row > 0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,334,"                throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row);
",6,0,0,1,2,0,0,2,0,8,90,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,336,"            if (column > 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,337,"                throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column);
",6,0,0,1,2,0,0,2,0,8,96,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,339,"            final int nRows = subMatrix.length;
",6,0,0,0,0,1,0,0,0,7,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,340,"            if (nRows == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,341,"                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
",4,0,0,1,2,0,0,2,0,6,61,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,344,"            final int nCols = subMatrix[0].length;
",4,0,1,1,2,1,0,0,0,7,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,345,"            if (nCols == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,346,"                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
",4,0,0,1,2,0,0,2,0,6,64,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,348,"            data = buildArray(getField(), subMatrix.length, nCols);
",6,0,0,2,4,0,6,0,0,13,55,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,349,"            for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,350,"                if (subMatrix[i].length != nCols) {
",4,1,1,2,5,0,0,0,0,9,35,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,351,"                    throw new DimensionMismatchException(nCols, subMatrix[i].length);
",4,0,1,2,4,0,0,2,0,10,65,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,353,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);
",4,1,1,3,6,0,8,0,0,19,64,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,355,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,356,"            super.setSubMatrix(subMatrix, row, column);
",8,0,0,1,2,0,0,0,0,8,43,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,359,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,365,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,366,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,368,"        return data[row][column];
",0,0,1,2,4,1,0,0,0,6,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,375,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,376,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,378,"        data[row][column] = value;
",2,0,1,2,4,0,0,0,0,9,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,379,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,385,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,386,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,388,"        data[row][column] = data[row][column].add(increment);
",0,0,1,5,10,0,4,0,0,17,53,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,389,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,395,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,396,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,398,"        data[row][column] = data[row][column].multiply(factor);
",0,0,1,5,10,0,4,0,0,17,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,399,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,404,"        return (data == null) ? 0 : data.length;
",6,1,0,1,2,1,0,0,0,7,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,410,"        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;
",4,3,1,5,10,1,0,0,0,11,66,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,416,"        final int nRows = this.getRowDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,417,"        final int nCols = this.getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,418,"        if (v.length != nCols) {
",6,1,0,1,3,0,0,0,0,7,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,419,"            throw new DimensionMismatchException(v.length, nCols);
",6,0,0,1,2,0,0,2,0,8,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,421,"        final T[] out = buildArray(getField(), nRows);
",2,0,0,3,6,1,6,2,0,11,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,422,"        for (int row = 0; row < nRows; row++) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,423,"            final T[] dataRow = data[row];
",2,0,1,2,4,1,0,2,0,9,30,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,424,"            T sum = getField().getZero();
",2,0,0,2,4,0,4,2,0,8,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,425,"            for (int i = 0; i < nCols; i++) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,426,"                sum = sum.add(dataRow[i].multiply(v[i]));
",2,0,1,4,8,0,6,0,0,17,41,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,428,"            out[row] = sum;
",2,0,1,1,2,0,0,0,0,7,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,430,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,436,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,437,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,438,"        if (v.length != nRows) {
",6,1,0,1,3,0,0,0,0,7,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,439,"            throw new DimensionMismatchException(v.length, nRows);
",6,0,0,1,2,0,0,2,0,8,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,442,"        final T[] out = buildArray(getField(), nCols);
",2,0,0,3,6,1,6,2,0,11,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,443,"        for (int col = 0; col < nCols; ++col) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,444,"            T sum = getField().getZero();
",2,0,0,2,4,0,4,2,0,8,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,445,"            for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,446,"                sum = sum.add(data[i][col].multiply(v[i]));
",2,0,1,5,10,0,6,0,0,19,43,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,448,"            out[col] = sum;
",2,0,1,1,2,0,0,0,0,7,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,451,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,457,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,458,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,459,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,460,"        for (int i = 0; i < rows; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,461,"            final T[] rowI = data[i];
",2,0,1,2,4,1,0,2,0,9,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,462,"            for (int j = 0; j < columns; ++j) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,463,"                rowI[j] = visitor.visit(i, j, rowI[j]);
",0,0,1,3,6,0,8,0,0,17,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,466,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,472,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,473,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,474,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,475,"        for (int i = 0; i < rows; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,476,"            final T[] rowI = data[i];
",2,0,1,2,4,1,0,2,0,9,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,477,"            for (int j = 0; j < columns; ++j) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,478,"                visitor.visit(i, j, rowI[j]);
",0,0,1,2,4,0,8,0,0,12,29,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,481,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,490,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,491,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,493,"        for (int i = startRow; i <= endRow; ++i) {
",10,1,0,1,3,0,0,0,0,12,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,494,"            final T[] rowI = data[i];
",2,0,1,2,4,1,0,2,0,9,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,495,"            for (int j = startColumn; j <= endColumn; ++j) {
",10,1,0,1,3,0,0,0,0,12,48,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,496,"                rowI[j] = visitor.visit(i, j, rowI[j]);
",0,0,1,3,6,0,8,0,0,17,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,499,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,508,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,509,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,511,"        for (int i = startRow; i <= endRow; ++i) {
",10,1,0,1,3,0,0,0,0,12,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,512,"            final T[] rowI = data[i];
",2,0,1,2,4,1,0,2,0,9,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,513,"            for (int j = startColumn; j <= endColumn; ++j) {
",10,1,0,1,3,0,0,0,0,12,48,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,514,"                visitor.visit(i, j, rowI[j]);
",0,0,1,2,4,0,8,0,0,12,29,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,517,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,523,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,524,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,525,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,526,"        for (int j = 0; j < columns; ++j) {
",8,1,0,1,3,0,0,0,0,10,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,527,"            for (int i = 0; i < rows; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,528,"                final T[] rowI = data[i];
",2,0,1,2,4,1,0,2,0,9,25,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,529,"                rowI[j] = visitor.visit(i, j, rowI[j]);
",0,0,1,3,6,0,8,0,0,17,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,532,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,538,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,539,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,540,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,541,"        for (int j = 0; j < columns; ++j) {
",8,1,0,1,3,0,0,0,0,10,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,542,"            for (int i = 0; i < rows; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,543,"                visitor.visit(i, j, data[i][j]);
",0,0,1,3,6,0,8,0,0,14,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,546,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,555,"    checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,556,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,558,"        for (int j = startColumn; j <= endColumn; ++j) {
",10,1,0,1,3,0,0,0,0,12,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,559,"            for (int i = startRow; i <= endRow; ++i) {
",10,1,0,1,3,0,0,0,0,12,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,560,"                final T[] rowI = data[i];
",2,0,1,2,4,1,0,2,0,9,25,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,561,"                rowI[j] = visitor.visit(i, j, rowI[j]);
",0,0,1,3,6,0,8,0,0,17,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,564,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,573,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,574,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,576,"        for (int j = startColumn; j <= endColumn; ++j) {
",10,1,0,1,3,0,0,0,0,12,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,577,"            for (int i = startRow; i <= endRow; ++i) {
",10,1,0,1,3,0,0,0,0,12,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,578,"                visitor.visit(i, j, data[i][j]);
",0,0,1,3,6,0,8,0,0,14,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,581,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,590,"        final int nRows = this.getRowDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,591,"        final T[][] out = buildArray(getField(), nRows, getColumnDimension());
",2,0,0,5,10,1,8,2,0,13,70,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,593,"        for (int i = 0; i < nRows; i++) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,594,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);
",2,0,1,4,8,0,4,0,0,18,56,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,596,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,610,"        setSubMatrix(in, 0, 0);
",0,0,0,1,2,0,4,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,611,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,125,"            final SchurTransformer t = transformToSchur(matrix);
",2,0,0,1,2,1,4,2,0,9,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,126,"            findEigenVectorsFromSchur(t);
",0,0,0,1,2,0,4,0,0,4,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,145,"        this(matrix);
",2,0,0,1,2,0,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,146,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,157,"    public EigenDecomposition(final double[] main, final double[] secondary) {
",6,0,0,3,7,3,0,0,0,9,74,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,158,"        isSymmetric = true;
",2,0,0,0,0,0,0,0,0,4,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,159,"        this.main      = main.clone();
",2,0,0,1,2,0,4,0,0,7,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,160,"        this.secondary = secondary.clone();
",2,0,0,1,2,0,4,0,0,7,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,161,"        transformer    = null;
",2,0,0,0,0,0,0,0,0,3,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,162,"        final int size = main.length;
",6,0,0,0,0,1,0,0,0,7,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,163,"        final double[][] z = new double[size][size];
",2,0,1,4,8,1,0,0,0,7,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,164,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,165,"            z[i][i] = 1.0;
",0,0,1,2,4,0,0,0,0,7,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,167,"        findEigenVectors(z);
",0,0,0,1,2,0,4,0,0,4,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,168,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,184,"        this(main, secondary);
",4,0,0,1,2,0,0,0,0,4,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,185,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,199,"        if (cachedV == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,200,"            final int m = eigenvectors.length;
",6,0,0,0,0,1,0,0,0,7,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,201,"            cachedV = MatrixUtils.createRealMatrix(m, m);
",2,0,0,1,2,0,8,0,0,11,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,202,"            for (int k = 0; k < m; ++k) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,203,"                cachedV.setColumnVector(k, eigenvectors[k]);
",0,0,1,2,4,0,6,0,0,10,44,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,207,"        return cachedV;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,223,"        if (cachedD == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,225,"            cachedD = MatrixUtils.createRealDiagonalMatrix(realEigenvalues);
",2,0,0,1,2,0,6,0,0,9,64,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,227,"            for (int i = 0; i < imagEigenvalues.length; i++) {
",10,1,0,1,3,0,0,0,0,12,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,228,"                if (Precision.compareTo(imagEigenvalues[i], 0.0, EPSILON) > 0) {
",0,1,1,3,7,0,6,0,0,11,64,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,229,"                    cachedD.setEntry(i, i+1, imagEigenvalues[i]);
",2,1,1,2,4,0,6,0,0,13,45,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,230,"                } else if (Precision.compareTo(imagEigenvalues[i], 0.0, EPSILON) < 0) {
",0,1,1,3,8,0,6,0,0,11,71,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,231,"                    cachedD.setEntry(i, i-1, imagEigenvalues[i]);
",2,1,1,2,4,0,6,0,0,13,45,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,235,"        return cachedD;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,250,"        if (cachedVt == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,251,"            final int m = eigenvectors.length;
",6,0,0,0,0,1,0,0,0,7,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,252,"            cachedVt = MatrixUtils.createRealMatrix(m, m);
",2,0,0,1,2,0,8,0,0,11,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,253,"            for (int k = 0; k < m; ++k) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,254,"                cachedVt.setRowVector(k, eigenvectors[k]);
",0,0,1,2,4,0,6,0,0,10,42,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,259,"        return cachedVt;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,274,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,306,"        return realEigenvalues[i];
",0,0,1,1,2,1,0,0,0,4,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,321,"        return imagEigenvalues.clone();
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,337,"        return imagEigenvalues[i];
",0,0,1,1,2,1,0,0,0,4,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,375,"        if (!isSymmetric) {
",2,0,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,376,"            throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,379,"        final double[] sqrtEigenValues = new double[realEigenvalues.length];
",6,0,0,2,4,1,0,0,0,7,68,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,380,"        for (int i = 0; i < realEigenvalues.length; i++) {
",10,1,0,1,3,0,0,0,0,12,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,381,"            final double eigen = realEigenvalues[i];
",2,0,1,1,2,1,0,0,0,7,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,382,"            if (eigen <= 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,383,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,385,"            sqrtEigenValues[i] = FastMath.sqrt(eigen);
",0,0,1,2,4,0,6,0,0,11,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,387,"        final RealMatrix sqrtEigen = MatrixUtils.createRealDiagonalMatrix(sqrtEigenValues);
",2,0,0,1,2,1,6,2,0,11,83,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,388,"        final RealMatrix v = getV();
",2,0,0,1,2,1,2,2,0,7,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,389,"        final RealMatrix vT = getVT();
",2,0,0,1,2,1,2,2,0,7,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,391,"        return v.multiply(sqrtEigen).multiply(vT);
",0,0,0,2,4,1,10,0,0,10,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,407,"            throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,579,"            realEigenvalues[i] = main[i];
",0,0,1,2,4,0,0,0,0,9,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,580,"            e[i] = secondary[i];
",0,0,1,2,4,0,0,0,0,9,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,592,"                maxAbsoluteValue = FastMath.abs(e[i]);
",2,0,1,2,4,0,4,0,0,11,38,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,599,"                    realEigenvalues[i] = 0;
",0,0,1,1,2,0,0,0,0,5,23,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,612,"                    double delta = FastMath.abs(realEigenvalues[m]) +
",2,1,1,2,4,0,4,0,0,11,49,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,614,"                    if (FastMath.abs(e[m]) + delta == delta) {
",4,2,1,3,7,0,4,0,0,14,42,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,615,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,619,"                    if (its == maxIter) {
",4,1,0,1,3,0,0,0,0,5,21,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,620,"                        throw new MaxCountExceededException(LocalizedFormats.CONVERGENCE_FAILED,
",4,0,0,0,1,0,0,2,0,6,72,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,623,"                    its++;
",2,0,0,0,0,0,0,0,0,3,6,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,624,"                    double q = (realEigenvalues[j + 1] - realEigenvalues[j]) / (2 * e[j]);
",4,4,1,5,10,0,0,0,0,18,70,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,625,"                    double t = FastMath.sqrt(1 + q * q);
",6,2,0,1,2,0,4,0,0,12,36,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,626,"                    if (q < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,627,"                        q = realEigenvalues[m] - realEigenvalues[j] + e[j] / (q - t);
",6,4,1,4,8,0,0,0,0,23,61,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,629,"                        q = realEigenvalues[m] - realEigenvalues[j] + e[j] / (q + t);
",6,4,1,4,8,0,0,0,0,23,61,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,631,"                    double u = 0.0;
",2,0,0,0,0,0,0,0,0,2,15,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,632,"                    double s = 1.0;
",2,0,0,0,0,0,0,0,0,2,15,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,633,"                    double c = 1.0;
",2,0,0,0,0,0,0,0,0,2,15,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,635,"                    for (i = m - 1; i >= j; i--) {
",10,2,0,1,3,0,0,0,0,14,30,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,636,"                        double p = s * e[i];
",4,1,1,1,2,0,0,0,0,9,20,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,637,"                        double h = c * e[i];
",4,1,1,1,2,0,0,0,0,9,20,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,638,"                        if (FastMath.abs(p) >= FastMath.abs(q)) {
",0,1,0,3,7,0,12,0,0,13,41,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,639,"                            c = q / p;
",6,1,0,0,0,0,0,0,0,8,10,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,640,"                            t = FastMath.sqrt(c * c + 1.0);
",6,2,0,1,2,0,4,0,0,13,31,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,641,"                            e[i + 1] = p * t;
",6,2,1,1,2,0,0,0,0,11,17,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,642,"                            s = 1.0 / t;
",4,1,0,0,0,0,0,0,0,6,12,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,643,"                            c = c * s;
",6,1,0,0,0,0,0,0,0,8,10,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,645,"                            s = p / q;
",6,1,0,0,0,0,0,0,0,8,10,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,646,"                            t = FastMath.sqrt(s * s + 1.0);
",6,2,0,1,2,0,4,0,0,13,31,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,647,"                            e[i + 1] = q * t;
",6,2,1,1,2,0,0,0,0,11,17,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,648,"                            c = 1.0 / t;
",4,1,0,0,0,0,0,0,0,6,12,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,649,"                            s = s * c;
",6,1,0,0,0,0,0,0,0,8,10,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,651,"                        if (e[i + 1] == 0.0) {
",2,2,1,2,5,0,0,0,0,6,22,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,652,"                            realEigenvalues[i + 1] -= u;
",4,1,1,1,2,0,0,0,0,8,28,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,653,"                            e[m] = 0.0;
",0,0,1,1,2,0,0,0,0,5,11,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,654,"                            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,656,"                        q = realEigenvalues[i + 1] - u;
",6,2,1,1,2,0,0,0,0,11,31,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,657,"                        t = (realEigenvalues[i] - q) * s + 2.0 * c * h;
",10,4,1,2,4,0,0,0,0,19,47,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,658,"                        u = s * t;
",6,1,0,0,0,0,0,0,0,8,10,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,659,"                        realEigenvalues[i + 1] = q + u;
",6,2,1,1,2,0,0,0,0,11,31,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,660,"                        q = c * t - h;
",8,2,0,0,0,0,0,0,0,11,14,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,661,"                        for (int ia = 0; ia < n; ia++) {
",8,1,0,1,3,0,0,0,0,10,32,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,662,"                            p = z[ia][i + 1];
",4,1,1,2,4,0,0,0,0,10,17,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,663,"                            z[ia][i + 1] = s * z[ia][i] + c * p;
",8,4,1,4,8,0,0,0,0,23,36,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,664,"                            z[ia][i] = c * z[ia][i] - s * p;
",6,3,1,4,8,0,0,0,0,22,32,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,667,"                    if (t == 0.0 && i >= j) {
",6,3,0,1,3,0,0,0,0,9,25,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,668,"                        continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,670,"                    realEigenvalues[j] -= u;
",2,0,1,1,2,0,0,0,0,7,24,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,671,"                    e[j] = q;
",2,0,1,1,2,0,0,0,0,7,9,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,672,"                    e[m] = 0.0;
",0,0,1,1,2,0,0,0,0,5,11,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,682,"                if (realEigenvalues[j] > p) {
",2,1,1,2,5,0,0,0,0,7,29,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,683,"                    k = j;
",4,0,0,0,0,0,0,0,0,5,6,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,684,"                    p = realEigenvalues[j];
",2,0,1,1,2,0,0,0,0,7,23,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,688,"                realEigenvalues[k] = realEigenvalues[i];
",0,0,1,2,4,0,0,0,0,9,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,689,"                realEigenvalues[i] = p;
",2,0,1,1,2,0,0,0,0,7,23,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,690,"                for (int j = 0; j < n; j++) {
",8,1,0,1,3,0,0,0,0,10,29,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,691,"                    p = z[j][i];
",2,0,1,2,4,0,0,0,0,9,12,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,692,"                    z[j][i] = z[j][k];
",0,0,1,4,8,0,0,0,0,13,18,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,693,"                    z[j][k] = p;
",2,0,1,2,4,0,0,0,0,9,12,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,709,"                    realEigenvalues[i] = 0;
",0,0,1,1,2,0,0,0,0,5,23,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,730,"        final SchurTransformer schurTransform = new SchurTransformer(matrix);
",4,0,0,1,2,1,0,4,0,9,69,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,731,"        final double[][] matT = schurTransform.getT().getData();
",2,0,0,4,8,1,6,0,0,9,56,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,733,"        realEigenvalues = new double[matT.length];
",6,0,0,1,2,0,0,0,0,7,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,734,"        imagEigenvalues = new double[matT.length];
",6,0,0,1,2,0,0,0,0,7,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,736,"        for (int i = 0; i < realEigenvalues.length; i++) {
",10,1,0,1,3,0,0,0,0,12,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,737,"            if (i == (realEigenvalues.length - 1) ||
",6,3,0,1,3,0,0,0,0,9,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,739,"                realEigenvalues[i] = matT[i][i];
",0,0,1,3,6,0,0,0,0,11,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,741,"                final double x = matT[i + 1][i + 1];
",6,2,1,2,4,1,0,0,0,11,36,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,742,"                final double p = 0.5 * (matT[i][i] - x);
",4,2,1,3,6,1,0,0,0,13,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,743,"                final double z = FastMath.sqrt(FastMath.abs(p * p + matT[i + 1][i] * matT[i][i + 1]));
",10,5,1,6,12,1,8,0,0,32,86,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,744,"                realEigenvalues[i] = x + p;
",4,1,1,1,2,0,0,0,0,10,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,745,"                imagEigenvalues[i] = z;
",2,0,1,1,2,0,0,0,0,7,23,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,746,"                realEigenvalues[i + 1] = x + p;
",6,2,1,1,2,0,0,0,0,11,31,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,747,"                imagEigenvalues[i + 1] = -z;
",4,1,1,1,2,0,0,0,0,9,28,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,748,"                i++;
",2,0,0,0,0,0,0,0,0,3,4,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,751,"        return schurTransform;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,765,"        return new Complex(xr, xi).divide(new Complex(yr, yi));
",8,0,0,3,6,1,2,4,0,14,55,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,776,"        final double[][] matrixT = schur.getT().getData();
",2,0,0,4,8,1,6,0,0,9,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,777,"        final double[][] matrixP = schur.getP().getData();
",2,0,0,4,8,1,6,0,0,9,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,779,"        final int n = matrixT.length;
",6,0,0,0,0,1,0,0,0,7,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,782,"        double norm = 0.0;
",2,0,0,0,0,0,0,0,0,2,18,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,783,"        for (int i = 0; i < n; i++) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,784,"           for (int j = FastMath.max(i - 1, 0); j < n; j++) {
",10,2,0,2,5,0,4,0,0,17,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,785,"              norm = norm + FastMath.abs(matrixT[i][j]);
",4,1,1,3,6,0,4,0,0,16,42,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,790,"        if (Precision.equals(norm, 0.0, EPSILON)) {
",0,0,0,2,5,0,8,0,0,8,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,791,"           throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
",4,0,0,1,2,0,0,2,0,6,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,796,"        double r = 0.0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,797,"        double s = 0.0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,798,"        double z = 0.0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,800,"        for (int idx = n - 1; idx >= 0; idx--) {
",8,2,0,1,3,0,0,0,0,11,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,801,"            double p = realEigenvalues[idx];
",2,0,1,1,2,0,0,0,0,6,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,802,"            double q = imagEigenvalues[idx];
",2,0,1,1,2,0,0,0,0,6,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,804,"            if (Precision.equals(q, 0.0)) {
",0,0,0,2,5,0,6,0,0,6,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,806,"                int l = idx;
",4,0,0,0,0,0,0,0,0,4,12,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,807,"                matrixT[idx][idx] = 1.0;
",0,0,1,2,4,0,0,0,0,7,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,808,"                for (int i = idx - 1; i >= 0; i--) {
",8,2,0,1,3,0,0,0,0,11,36,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,809,"                    double w = matrixT[i][i] - p;
",4,1,1,2,4,0,0,0,0,11,29,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,810,"                    r = 0.0;
",2,0,0,0,0,0,0,0,0,3,8,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,811,"                    for (int j = l; j <= idx; j++) {
",10,1,0,1,3,0,0,0,0,12,32,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,812,"                        r = r + matrixT[i][j] * matrixT[j][idx];
",4,2,1,4,8,0,0,0,0,19,40,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,814,"                    if (Precision.compareTo(imagEigenvalues[i], 0.0, EPSILON) < 0.0) {
",0,1,1,3,7,0,6,0,0,11,66,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,815,"                        z = w;
",4,0,0,0,0,0,0,0,0,5,6,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,816,"                        s = r;
",4,0,0,0,0,0,0,0,0,5,6,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,818,"                        l = i;
",4,0,0,0,0,0,0,0,0,5,6,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,819,"                        if (Precision.equals(imagEigenvalues[i], 0.0)) {
",0,0,1,3,7,0,4,0,0,8,48,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,820,"                            if (w != 0.0) {
",2,1,0,1,3,0,0,0,0,3,15,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,821,"                                matrixT[i][idx] = -r / w;
",4,1,1,2,4,0,0,0,0,13,25,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,823,"                                matrixT[i][idx] = -r / (Precision.EPSILON * norm);
",8,2,1,3,6,0,0,0,0,18,50,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,827,"                            double x = matrixT[i][i + 1];
",4,1,1,2,4,0,0,0,0,9,29,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,828,"                            double y = matrixT[i + 1][i];
",4,1,1,2,4,0,0,0,0,9,29,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,829,"                            q = (realEigenvalues[i] - p) * (realEigenvalues[i] - p) +
",6,4,1,4,8,0,0,0,0,19,57,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,831,"                            double t = (x * s - z * r) / q;
",12,4,0,1,2,0,0,0,0,16,31,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,832,"                            matrixT[i][idx] = t;
",2,0,1,2,4,0,0,0,0,9,20,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,833,"                            if (FastMath.abs(x) > FastMath.abs(z)) {
",0,1,0,3,7,0,12,0,0,13,40,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,834,"                                matrixT[i + 1][idx] = (-r - w * t) / x;
",10,4,1,3,6,0,0,0,0,20,39,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,836,"                                matrixT[i + 1][idx] = (-s - y * t) / z;
",10,4,1,3,6,0,0,0,0,20,39,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,841,"                        double t = FastMath.abs(matrixT[i][idx]);
",2,0,1,3,6,0,4,0,0,12,41,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,842,"                        if ((Precision.EPSILON * t) * t > 1) {
",8,3,0,2,5,0,0,0,0,11,38,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,843,"                            for (int j = i; j <= idx; j++) {
",10,1,0,1,3,0,0,0,0,12,32,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,844,"                                matrixT[j][idx] = matrixT[j][idx] / t;
",2,1,1,4,8,0,0,0,0,16,38,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,849,"            } else if (q < 0.0) {
",2,1,0,1,4,0,0,0,0,3,21,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,851,"                int l = idx - 1;
",4,1,0,0,0,0,0,0,0,5,16,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,854,"                if (FastMath.abs(matrixT[idx][idx - 1]) > FastMath.abs(matrixT[idx - 1][idx])) {
",4,3,1,7,15,0,8,0,0,23,80,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,855,"                    matrixT[idx - 1][idx - 1] = q / matrixT[idx][idx - 1];
",8,4,1,4,8,0,0,0,0,19,54,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,856,"                    matrixT[idx - 1][idx]     = -(matrixT[idx][idx] - p) / matrixT[idx][idx - 1];
",6,4,1,7,14,0,0,0,0,26,77,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,858,"                    final Complex result = cdiv(0.0, -matrixT[idx - 1][idx],
",4,1,1,2,5,1,2,2,0,15,56,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,860,"                    matrixT[idx - 1][idx - 1] = result.getReal();
",4,2,1,3,6,0,4,0,0,13,45,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,861,"                    matrixT[idx - 1][idx]     = result.getImaginary();
",2,1,1,3,6,0,4,0,0,12,50,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,864,"                matrixT[idx][idx - 1] = 0.0;
",2,1,1,2,4,0,0,0,0,8,28,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,865,"                matrixT[idx][idx]     = 1.0;
",0,0,1,2,4,0,0,0,0,7,28,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,867,"                for (int i = idx - 2; i >= 0; i--) {
",8,2,0,1,3,0,0,0,0,11,36,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,868,"                    double ra = 0.0;
",2,0,0,0,0,0,0,0,0,2,16,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,869,"                    double sa = 0.0;
",2,0,0,0,0,0,0,0,0,2,16,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,870,"                    for (int j = l; j <= idx; j++) {
",10,1,0,1,3,0,0,0,0,12,32,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,871,"                        ra = ra + matrixT[i][j] * matrixT[j][idx - 1];
",6,3,1,4,8,0,0,0,0,20,46,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,872,"                        sa = sa + matrixT[i][j] * matrixT[j][idx];
",4,2,1,4,8,0,0,0,0,19,42,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,874,"                    double w = matrixT[i][i] - p;
",4,1,1,2,4,0,0,0,0,11,29,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,876,"                    if (Precision.compareTo(imagEigenvalues[i], 0.0, EPSILON) < 0.0) {
",0,1,1,3,7,0,6,0,0,11,66,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,877,"                        z = w;
",4,0,0,0,0,0,0,0,0,5,6,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,878,"                        r = ra;
",4,0,0,0,0,0,0,0,0,5,7,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,879,"                        s = sa;
",4,0,0,0,0,0,0,0,0,5,7,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,881,"                        l = i;
",4,0,0,0,0,0,0,0,0,5,6,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,882,"                        if (Precision.equals(imagEigenvalues[i], 0.0)) {
",0,0,1,3,7,0,4,0,0,8,48,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,883,"                            final Complex c = cdiv(-ra, -sa, w, q);
",6,0,0,1,2,1,6,2,0,17,39,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,884,"                            matrixT[i][idx - 1] = c.getReal();
",2,1,1,3,6,0,4,0,0,12,34,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,885,"                            matrixT[i][idx] = c.getImaginary();
",0,0,1,3,6,0,4,0,0,11,35,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,886,"                        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,888,"                            double x = matrixT[i][i + 1];
",4,1,1,2,4,0,0,0,0,9,29,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,889,"                            double y = matrixT[i + 1][i];
",4,1,1,2,4,0,0,0,0,9,29,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,890,"                            double vr = (realEigenvalues[i] - p) * (realEigenvalues[i] - p) +
",6,5,1,4,8,0,0,0,0,19,65,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,892,"                            final double vi = (realEigenvalues[i] - p) * 2.0 * q;
",6,2,1,2,4,1,0,0,0,13,53,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,893,"                            if (Precision.equals(vr, 0.0) && Precision.equals(vi, 0.0)) {
",0,1,0,3,7,0,12,0,0,13,61,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,894,"                                vr = Precision.EPSILON * norm *
",8,1,0,0,0,0,0,0,0,10,31,17,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,898,"                            final Complex c     = cdiv(x * r - z * ra + q * sa,
",14,5,0,0,1,1,2,2,0,24,51,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,900,"                            matrixT[i][idx - 1] = c.getReal();
",2,1,1,3,6,0,4,0,0,12,34,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,901,"                            matrixT[i][idx]     = c.getImaginary();
",0,0,1,3,6,0,4,0,0,11,39,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,903,"                            if (FastMath.abs(x) > (FastMath.abs(z) + FastMath.abs(q))) {
",0,2,0,5,11,0,18,0,0,20,60,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,904,"                                matrixT[i + 1][idx - 1] = (-ra - w * matrixT[i][idx - 1] +
",10,6,1,4,9,0,0,0,0,24,58,17,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,906,"                                matrixT[i + 1][idx]     = (-sa - w * matrixT[i][idx] -
",6,4,1,4,9,0,0,0,0,22,54,17,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,909,"                                final Complex c2        = cdiv(-r - y * matrixT[i][idx - 1],
",8,3,1,2,5,1,2,2,0,21,60,17,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,911,"                                matrixT[i + 1][idx - 1] = c2.getReal();
",4,2,1,3,6,0,4,0,0,13,39,17,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,912,"                                matrixT[i + 1][idx]     = c2.getImaginary();
",2,1,1,3,6,0,4,0,0,12,44,17,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,917,"                        double t = FastMath.max(FastMath.abs(matrixT[i][idx - 1]),
",4,1,1,3,7,0,8,0,0,17,58,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,919,"                        if ((Precision.EPSILON * t) * t > 1) {
",8,3,0,2,5,0,0,0,0,11,38,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,920,"                            for (int j = i; j <= idx; j++) {
",10,1,0,1,3,0,0,0,0,12,32,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,921,"                                matrixT[j][idx - 1] = matrixT[j][idx - 1] / t;
",6,3,1,4,8,0,0,0,0,18,46,17,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,922,"                                matrixT[j][idx]     = matrixT[j][idx] / t;
",2,1,1,4,8,0,0,0,0,16,42,17,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,931,"        for (int i = 0; i < n; i++) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,932,"            if (i < 0 | i > n - 1) {
",6,4,0,1,3,0,0,0,0,10,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,933,"                for (int j = i; j < n; j++) {
",10,1,0,1,3,0,0,0,0,12,29,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,934,"                    matrixP[i][j] = matrixT[i][j];
",0,0,1,4,8,0,0,0,0,13,30,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,940,"        for (int j = n - 1; j >= 0; j--) {
",8,2,0,1,3,0,0,0,0,11,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,941,"            for (int i = 0; i <= n - 1; i++) {
",8,2,0,1,3,0,0,0,0,11,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,942,"                z = 0.0;
",2,0,0,0,0,0,0,0,0,3,8,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,943,"                for (int k = 0; k <= FastMath.min(j, n - 1); k++) {
",8,2,0,2,5,0,6,0,0,17,51,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,944,"                    z = z + matrixP[i][k] * matrixT[k][j];
",4,2,1,4,8,0,0,0,0,19,38,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,946,"                matrixP[i][j] = z;
",2,0,1,2,4,0,0,0,0,9,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,950,"        eigenvectors = new ArrayRealVector[n];
",2,0,1,1,2,0,0,2,0,7,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,951,"        final double[] tmp = new double[n];
",2,0,1,2,4,1,0,0,0,5,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,952,"        for (int i = 0; i < n; i++) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,953,"            for (int j = 0; j < n; j++) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,954,"                tmp[j] = matrixP[j][i];
",0,0,1,3,6,0,0,0,0,11,23,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,956,"            eigenvectors[i] = new ArrayRealVector(tmp);
",2,0,1,2,4,0,0,2,0,9,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,958,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,11,42,"        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);
",6,0,0,1,2,0,0,0,0,6,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,11,43,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,11,53,"                                     Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,11,54,"        getContext().addMessage(specific, max, args);
",0,0,0,2,4,0,10,0,0,10,45,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,11,55,"        this.max = max;
",4,0,0,0,0,0,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,11,56,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,11,62,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,381,"        subMatrix.walkInOptimizedOrder(new DefaultFieldMatrixChangingVisitor<T>(field.getZero()) {
",0,0,0,2,6,0,8,4,0,12,90,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,11,386,"                return getEntry(selectedRows[row], selectedColumns[column]);
",0,0,1,3,6,1,2,0,0,10,60,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,63,"        super(rowDimension, columnDimension);
",4,0,0,1,2,0,0,0,0,4,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,64,"        long lRow = rowDimension;
",4,0,0,0,0,0,0,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,65,"        long lCol = columnDimension;
",4,0,0,0,0,0,0,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,66,"        if (lRow * lCol >= Integer.MAX_VALUE) {
",8,2,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,67,"            throw new NumberIsTooLargeException(lRow * lCol, Integer.MAX_VALUE, false);
",8,1,0,1,2,0,0,2,0,12,75,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,69,"        this.rows = rowDimension;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,70,"        this.columns = columnDimension;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,71,"        this.entries = new OpenIntToDoubleHashMap(0.0);
",2,0,0,1,2,0,0,2,0,5,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,72,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,79,"    public OpenMapRealMatrix(OpenMapRealMatrix matrix) {
",4,0,0,1,3,1,0,2,0,7,52,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,80,"        this.rows = matrix.rows;
",6,0,0,0,0,0,0,0,0,7,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,81,"        this.columns = matrix.columns;
",6,0,0,0,0,0,0,0,0,7,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,82,"        this.entries = new OpenIntToDoubleHashMap(matrix.entries);
",6,0,0,1,2,0,0,2,0,9,58,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,83,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,88,"        return new OpenMapRealMatrix(this);
",0,0,0,1,2,1,0,2,0,2,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,100,"        return new OpenMapRealMatrix(rowDimension, columnDimension);
",4,0,0,1,2,1,0,2,0,6,60,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,106,"        return columns;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,120,"        MatrixUtils.checkAdditionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,45,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,122,"        final OpenMapRealMatrix out = new OpenMapRealMatrix(this);
",2,0,0,1,2,1,0,4,0,7,58,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,123,"        for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext();) {
",10,0,0,3,7,0,6,0,0,16,92,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,124,"            iterator.advance();
",0,0,0,1,2,0,4,0,0,4,19,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,125,"            final int row = iterator.key() / columns;
",4,1,0,1,2,1,4,0,0,10,41,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,126,"            final int col = iterator.key() - row * columns;
",6,2,0,1,2,1,4,0,0,13,47,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,127,"            out.setEntry(row, col, getEntry(row, col) + iterator.value());
",0,1,0,3,6,0,18,0,0,19,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,128,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,130,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,139,"            return subtract((OpenMapRealMatrix) m);
",2,0,0,2,4,1,2,2,0,6,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,140,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,141,"            return (OpenMapRealMatrix) super.subtract(m);
",4,0,0,2,4,1,0,2,0,6,45,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,155,"        MatrixUtils.checkAdditionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,45,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,157,"        final OpenMapRealMatrix out = new OpenMapRealMatrix(this);
",2,0,0,1,2,1,0,4,0,7,58,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,158,"        for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext();) {
",10,0,0,3,7,0,6,0,0,16,92,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,159,"            iterator.advance();
",0,0,0,1,2,0,4,0,0,4,19,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,160,"            final int row = iterator.key() / columns;
",4,1,0,1,2,1,4,0,0,10,41,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,161,"            final int col = iterator.key() - row * columns;
",6,2,0,1,2,1,4,0,0,13,47,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,162,"            out.setEntry(row, col, getEntry(row, col) - iterator.value());
",0,1,0,3,6,0,18,0,0,19,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,163,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,165,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,179,"            return multiply((OpenMapRealMatrix) m);
",2,0,0,2,4,1,2,2,0,6,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,180,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,182,"            MatrixUtils.checkMultiplicationCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,51,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,184,"            final int outCols = m.getColumnDimension();
",2,0,0,1,2,1,4,0,0,7,43,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,185,"            final BlockRealMatrix out = new BlockRealMatrix(rows, outCols);
",6,0,0,1,2,1,0,4,0,11,63,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,186,"            for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext();) {
",6,0,0,3,7,0,8,0,0,14,90,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,187,"                iterator.advance();
",0,0,0,1,2,0,4,0,0,4,19,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,188,"                final double value = iterator.value();
",2,0,0,1,2,1,4,0,0,7,38,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,189,"                final int key      = iterator.key();
",2,0,0,1,2,1,4,0,0,7,36,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,190,"                final int i        = key / columns;
",6,1,0,0,0,1,0,0,0,8,35,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,191,"                final int k        = key % columns;
",6,1,0,0,0,1,0,0,0,8,35,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,192,"                for (int j = 0; j < outCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,35,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,193,"                    out.addToEntry(i, j, value * m.getEntry(k, j));
",2,1,0,2,4,0,16,0,0,19,47,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,195,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,197,"            return out;
",2,0,0,0,0,1,0,0,0,2,11,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,214,"        MatrixUtils.checkMultiplicationCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,51,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,216,"        final int outCols = m.getColumnDimension();
",2,0,0,1,2,1,4,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,217,"        OpenMapRealMatrix out = new OpenMapRealMatrix(rows, outCols);
",6,0,0,1,2,0,0,4,0,10,61,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,218,"        for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext();) {
",6,0,0,3,7,0,8,0,0,14,90,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,219,"            iterator.advance();
",0,0,0,1,2,0,4,0,0,4,19,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,220,"            final double value = iterator.value();
",2,0,0,1,2,1,4,0,0,7,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,221,"            final int key      = iterator.key();
",2,0,0,1,2,1,4,0,0,7,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,222,"            final int i        = key / columns;
",6,1,0,0,0,1,0,0,0,8,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,223,"            final int k        = key % columns;
",6,1,0,0,0,1,0,0,0,8,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,224,"            for (int j = 0; j < outCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,225,"                final int rightKey = m.computeKey(k, j);
",2,0,0,1,2,1,8,0,0,11,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,226,"                if (m.entries.containsKey(rightKey)) {
",4,0,0,2,5,0,4,0,0,8,38,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,227,"                    final int outKey = out.computeKey(i, j);
",2,0,0,1,2,1,8,0,0,11,40,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,228,"                    final double outValue =
",2,0,0,0,0,1,0,0,0,3,23,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,230,"                    if (outValue == 0.0) {
",2,1,0,1,3,0,0,0,0,3,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,231,"                        out.entries.remove(outKey);
",4,0,0,1,2,0,4,0,0,8,27,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,233,"                        out.entries.put(outKey, outValue);
",4,0,0,1,2,0,6,0,0,10,34,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,237,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,239,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,245,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,246,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,247,"        return entries.get(computeKey(row, column));
",0,0,0,2,4,1,10,0,0,10,44,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,253,"        return rows;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,260,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,261,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,262,"        if (value == 0.0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,263,"            entries.remove(computeKey(row, column));
",0,0,0,2,4,0,10,0,0,10,40,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,265,"            entries.put(computeKey(row, column), value);
",0,0,0,2,4,0,12,0,0,12,44,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,267,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,273,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,274,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,275,"        final int key = computeKey(row, column);
",2,0,0,1,2,1,6,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,276,"        final double value = entries.get(key) + increment;
",4,1,0,1,2,1,6,0,0,12,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,277,"        if (value == 0.0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,278,"            entries.remove(key);
",0,0,0,1,2,0,6,0,0,6,20,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,280,"            entries.put(key, value);
",0,0,0,1,2,0,8,0,0,8,24,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,282,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,288,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,289,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,290,"        final int key = computeKey(row, column);
",2,0,0,1,2,1,6,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,291,"        final double value = entries.get(key) * factor;
",4,1,0,1,2,1,6,0,0,12,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,292,"        if (value == 0.0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,293,"            entries.remove(key);
",0,0,0,1,2,0,6,0,0,6,20,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,295,"            entries.put(key, value);
",0,0,0,1,2,0,8,0,0,8,24,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,297,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,306,"        return row * columns + column;
",6,2,0,0,0,1,0,0,0,8,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,11,39,"@Deprecated
",2,0,0,0,0,0,0,0,0,2,11,2,0.00000,0
