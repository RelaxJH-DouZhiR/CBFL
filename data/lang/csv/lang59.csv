dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,879,"        if (width > 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.50000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,880,"            ensureCapacity(size + width);
",4,1,0,1,2,0,2,0,0,7,29,7,0.50000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,881,"            String str = (obj == null ? getNullText() : obj.toString());
",4,1,0,3,6,0,6,2,0,14,60,6,0.50000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,882,"            int strLen = str.length();
",2,0,0,1,2,0,4,0,0,6,26,7,0.50000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,883,"            if (strLen >= width) {
",4,1,0,1,3,0,0,0,0,5,22,6,0.50000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,884,"                str.getChars(0, strLen, buffer, size);
",0,0,0,1,2,0,10,0,0,10,38,9,0.50000,1
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,107,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00800,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,108,"        if (initialCapacity <= 0) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.00800,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,111,"        buffer = new char[initialCapacity];
",2,0,1,1,2,0,0,0,0,5,35,4,0.00800,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,112,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00800,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,228,"        if (capacity > buffer.length) {
",6,1,0,1,3,0,0,0,0,7,31,4,0.00581,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,233,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00581,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,241,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,118,"    private StrMatcher delimMatcher = StrMatcher.splitMatcher();
",2,0,0,1,2,1,4,2,0,9,60,2,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,120,"    private StrMatcher quoteMatcher = StrMatcher.noneMatcher();
",2,0,0,1,2,1,4,2,0,9,59,2,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,122,"    private StrMatcher ignoredMatcher = StrMatcher.noneMatcher();
",2,0,0,1,2,1,4,2,0,9,61,2,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,124,"    private StrMatcher trimmerMatcher = StrMatcher.noneMatcher();
",2,0,0,1,2,1,4,2,0,9,61,2,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,127,"    private boolean emptyAsNull = false;
",2,0,0,0,0,1,0,0,0,4,36,2,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,129,"    private boolean ignoreEmptyTokens = true;
",2,0,0,0,0,1,0,0,0,4,41,2,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,242,"        this.chars = null;
",2,0,0,0,0,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,243,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,252,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,253,"        if (input != null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,254,"            chars = input.toCharArray();
",2,0,0,1,2,0,4,0,0,7,28,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,256,"            chars = null;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,258,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,267,"        this(input);
",2,0,0,1,2,0,0,0,0,2,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,268,"        setDelimiterChar(delim);
",0,0,0,1,2,0,4,0,0,4,24,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,269,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,278,"        this(input);
",2,0,0,1,2,0,0,0,0,2,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,279,"        setDelimiterString(delim);
",0,0,0,1,2,0,4,0,0,4,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,280,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,289,"        this(input);
",2,0,0,1,2,0,0,0,0,2,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,290,"        setDelimiterMatcher(delim);
",0,0,0,1,2,0,4,0,0,4,27,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,291,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,302,"        this(input, delim);
",4,0,0,1,2,0,0,0,0,4,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,303,"        setQuoteChar(quote);
",0,0,0,1,2,0,4,0,0,4,20,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,304,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,315,"        this(input, delim);
",4,0,0,1,2,0,0,0,0,4,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,316,"        setQuoteMatcher(quote);
",0,0,0,1,2,0,4,0,0,4,23,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,317,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,329,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,330,"        this.chars = input;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,331,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,343,"        this(input);
",2,0,0,1,2,0,0,0,0,2,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,344,"        setDelimiterChar(delim);
",0,0,0,1,2,0,4,0,0,4,24,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,345,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,357,"        this(input);
",2,0,0,1,2,0,0,0,0,2,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,358,"        setDelimiterString(delim);
",0,0,0,1,2,0,4,0,0,4,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,359,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,371,"        this(input);
",2,0,0,1,2,0,0,0,0,2,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,372,"        setDelimiterMatcher(delim);
",0,0,0,1,2,0,4,0,0,4,27,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,373,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,387,"        this(input, delim);
",4,0,0,1,2,0,0,0,0,4,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,388,"        setQuoteChar(quote);
",0,0,0,1,2,0,4,0,0,4,20,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,389,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,403,"        this(input, delim);
",4,0,0,1,2,0,0,0,0,4,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,404,"        setQuoteMatcher(quote);
",0,0,0,1,2,0,4,0,0,4,23,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,405,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,93,"        CSV_TOKENIZER_PROTOTYPE = new StrTokenizer();
",2,0,0,1,2,0,0,2,0,5,45,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,94,"        CSV_TOKENIZER_PROTOTYPE.setDelimiterMatcher(StrMatcher.commaMatcher());
",0,0,0,2,4,0,8,0,0,8,71,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,95,"        CSV_TOKENIZER_PROTOTYPE.setQuoteMatcher(StrMatcher.doubleQuoteMatcher());
",0,0,0,2,4,0,8,0,0,8,73,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,96,"        CSV_TOKENIZER_PROTOTYPE.setIgnoredMatcher(StrMatcher.noneMatcher());
",0,0,0,2,4,0,8,0,0,8,68,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,97,"        CSV_TOKENIZER_PROTOTYPE.setTrimmerMatcher(StrMatcher.trimMatcher());
",0,0,0,2,4,0,8,0,0,8,68,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,98,"        CSV_TOKENIZER_PROTOTYPE.setEmptyTokenAsNull(false);
",0,0,0,1,2,0,4,0,0,5,51,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,99,"        CSV_TOKENIZER_PROTOTYPE.setIgnoreEmptyTokens(false);
",0,0,0,1,2,0,4,0,0,5,52,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,101,"        TSV_TOKENIZER_PROTOTYPE = new StrTokenizer();
",2,0,0,1,2,0,0,2,0,5,45,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,102,"        TSV_TOKENIZER_PROTOTYPE.setDelimiterMatcher(StrMatcher.tabMatcher());
",0,0,0,2,4,0,8,0,0,8,69,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,103,"        TSV_TOKENIZER_PROTOTYPE.setQuoteMatcher(StrMatcher.doubleQuoteMatcher());
",0,0,0,2,4,0,8,0,0,8,73,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,104,"        TSV_TOKENIZER_PROTOTYPE.setIgnoredMatcher(StrMatcher.noneMatcher());
",0,0,0,2,4,0,8,0,0,8,68,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,105,"        TSV_TOKENIZER_PROTOTYPE.setTrimmerMatcher(StrMatcher.trimMatcher());
",0,0,0,2,4,0,8,0,0,8,68,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,106,"        TSV_TOKENIZER_PROTOTYPE.setEmptyTokenAsNull(false);
",0,0,0,1,2,0,4,0,0,5,51,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,107,"        TSV_TOKENIZER_PROTOTYPE.setIgnoreEmptyTokens(false);
",0,0,0,1,2,0,4,0,0,5,52,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,108,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,139,"        return (StrTokenizer) CSV_TOKENIZER_PROTOTYPE.clone();
",0,0,0,2,4,1,4,2,0,6,54,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,152,"        return getCSVClone();
",0,0,0,1,2,1,2,0,0,2,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,165,"        StrTokenizer tok = getCSVClone();
",2,0,0,1,2,0,2,2,0,6,33,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,166,"        tok.reset(input);
",0,0,0,1,2,0,6,0,0,6,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,167,"        return tok;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,180,"        StrTokenizer tok = getCSVClone();
",2,0,0,1,2,0,2,2,0,6,33,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,181,"        tok.reset(input);
",0,0,0,1,2,0,6,0,0,6,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,182,"        return tok;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,191,"        return (StrTokenizer) TSV_TOKENIZER_PROTOTYPE.clone();
",0,0,0,2,4,1,4,2,0,6,54,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,204,"        return getTSVClone();
",0,0,0,1,2,1,2,0,0,2,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,215,"        StrTokenizer tok = getTSVClone();
",2,0,0,1,2,0,2,2,0,6,33,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,216,"        tok.reset(input);
",0,0,0,1,2,0,6,0,0,6,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,217,"        return tok;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,228,"        StrTokenizer tok = getTSVClone();
",2,0,0,1,2,0,2,2,0,6,33,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,229,"        tok.reset(input);
",0,0,0,1,2,0,6,0,0,6,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,230,"        return tok;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,415,"        checkTokenized();
",0,0,0,1,2,0,2,0,0,2,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,416,"        return tokens.length;
",4,0,0,0,0,1,0,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,425,"        if (hasNext()) {
",0,0,0,2,5,0,2,0,0,2,16,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,426,"            return tokens[tokenPos++];
",2,0,1,1,2,1,0,0,0,5,26,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,428,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,437,"        if (hasPrevious()) {
",0,0,0,2,5,0,2,0,0,2,20,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,438,"            return tokens[--tokenPos];
",2,0,1,1,2,1,0,0,0,5,26,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,440,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,449,"        checkTokenized();
",0,0,0,1,2,0,2,0,0,2,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,450,"        return (String[]) tokens.clone();
",0,0,0,3,6,1,4,2,0,6,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,459,"        checkTokenized();
",0,0,0,1,2,0,2,0,0,2,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,460,"        List list = new ArrayList(tokens.length);
",6,0,0,1,2,0,0,4,0,10,41,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,461,"        for (int i = 0; i < tokens.length; i++) {
",10,1,0,1,3,0,0,0,0,12,41,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,462,"            list.add(tokens[i]);
",0,0,1,2,4,0,4,0,0,8,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,464,"        return list;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,475,"        tokenPos = 0;
",2,0,0,0,0,0,0,0,0,3,13,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,476,"        tokens = null;
",2,0,0,0,0,0,0,0,0,3,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,477,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,489,"        reset();
",0,0,0,1,2,0,2,0,0,2,8,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,490,"        if (input != null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,491,"            this.chars = input.toCharArray();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,493,"            this.chars = null;
",2,0,0,0,0,0,0,0,0,3,18,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,495,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,510,"        reset();
",0,0,0,1,2,0,2,0,0,2,8,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,511,"        this.chars = input;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,512,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,523,"        checkTokenized();
",0,0,0,1,2,0,2,0,0,2,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,524,"        return tokenPos < tokens.length;
",6,1,0,0,0,1,0,0,0,7,32,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,533,"        if (hasNext()) {
",0,0,0,2,5,0,2,0,0,2,16,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,534,"            return tokens[tokenPos++];
",2,0,1,1,2,1,0,0,0,5,26,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,536,"        throw new NoSuchElementException();
",0,0,0,1,2,0,0,2,0,2,35,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,545,"        return tokenPos;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,554,"        checkTokenized();
",0,0,0,1,2,0,2,0,0,2,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,555,"        return tokenPos > 0;
",2,1,0,0,0,1,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,564,"        if (hasPrevious()) {
",0,0,0,2,5,0,2,0,0,2,20,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,565,"            return tokens[--tokenPos];
",2,0,1,1,2,1,0,0,0,5,26,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,567,"        throw new NoSuchElementException();
",0,0,0,1,2,0,0,2,0,2,35,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,576,"        return tokenPos - 1;
",2,1,0,0,0,1,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,585,"        throw new UnsupportedOperationException(""remove() is unsupported"");
",0,0,0,2,4,0,0,2,0,3,67,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,594,"        throw new UnsupportedOperationException(""set() is unsupported"");
",0,0,0,2,4,0,0,2,0,3,64,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,603,"        throw new UnsupportedOperationException(""add() is unsupported"");
",0,0,0,2,4,0,0,2,0,3,64,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,612,"        if (tokens == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,613,"            if (chars == null) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,615,"                List split = tokenize(null, 0, 0);
",2,0,0,1,2,0,2,2,0,7,34,8,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,616,"                tokens = (String[]) split.toArray(new String[split.size()]);
",2,0,0,5,10,0,8,4,0,15,60,8,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,617,"            } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,618,"                List split = tokenize(chars, 0, chars.length);
",6,0,0,1,2,0,4,2,0,12,46,8,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,619,"                tokens = (String[]) split.toArray(new String[split.size()]);
",2,0,0,5,10,0,8,4,0,15,60,8,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,622,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,645,"        if (chars == null || count == 0) {
",4,3,0,1,3,0,0,0,0,7,34,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,646,"            return Collections.EMPTY_LIST;
",4,0,0,0,0,1,0,0,0,4,30,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,648,"        StrBuilder buf = new StrBuilder();
",2,0,0,1,2,0,0,4,0,6,34,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,649,"        List tokens = new ArrayList();
",2,0,0,1,2,0,0,4,0,6,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,650,"        int pos = offset;
",4,0,0,0,0,0,0,0,0,4,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,653,"        while (pos >= 0 && pos < count) {
",6,3,0,1,3,0,0,0,0,9,33,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,655,"            pos = readNextToken(chars, pos, count, buf, tokens);
",2,0,0,1,2,0,12,0,0,15,52,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,658,"            if (pos >= count) {
",4,1,0,1,3,0,0,0,0,5,19,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,659,"                addToken(tokens, """");
",0,0,0,1,2,0,4,0,0,5,21,9,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,662,"        return tokens;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,672,"        if (tok == null || tok.length() == 0) {
",2,3,0,2,5,0,4,0,0,9,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,673,"            if (isIgnoreEmptyTokens()) {
",0,0,0,2,5,0,2,0,0,2,28,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,674,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,676,"            if (isEmptyTokenAsNull()) {
",0,0,0,2,5,0,2,0,0,2,27,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,677,"                tok = null;
",2,0,0,0,0,0,0,0,0,3,11,8,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,680,"        list.add(tok);
",0,0,0,1,2,0,6,0,0,6,14,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,681,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,697,"        while (start < len) {
",4,1,0,1,3,0,0,0,0,5,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,698,"            int removeLen = Math.max(
",2,0,0,0,1,0,4,0,0,6,25,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,701,"            if (removeLen == 0 ||
",2,3,0,0,1,0,0,0,0,5,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,704,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,706,"            start += removeLen;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,707,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,710,"        if (start >= len) {
",4,1,0,1,3,0,0,0,0,5,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,711,"            addToken(tokens, """");
",0,0,0,1,2,0,4,0,0,5,21,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,712,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,716,"        int delimLen = getDelimiterMatcher().isMatch(chars, start, start, len);
",2,0,0,2,4,0,12,0,0,14,71,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,717,"        if (delimLen > 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,718,"            addToken(tokens, """");
",0,0,0,1,2,0,4,0,0,5,21,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,719,"            return start + delimLen;
",4,1,0,0,0,1,0,0,0,5,24,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,723,"        int quoteLen = getQuoteMatcher().isMatch(chars, start, start, len);
",2,0,0,2,4,0,12,0,0,14,67,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,724,"        if (quoteLen > 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,725,"            return readWithQuotes(chars, start + quoteLen, len, workArea, tokens, start, quoteLen);
",4,1,0,1,2,1,14,0,0,19,87,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,727,"        return readWithQuotes(chars, start, len, workArea, tokens, 0, 0);
",0,0,0,1,2,1,12,0,0,12,65,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,749,"        workArea.clear();
",0,0,0,1,2,0,4,0,0,4,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,750,"        int pos = start;
",4,0,0,0,0,0,0,0,0,4,16,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,751,"        boolean quoting = (quoteLen > 0);
",4,1,0,1,2,0,0,0,0,5,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,752,"        int trimStart = 0;
",2,0,0,0,0,0,0,0,0,2,18,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,754,"        while (pos < len) {
",4,1,0,1,3,0,0,0,0,5,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,758,"            if (quoting) {
",2,0,0,1,3,0,0,0,0,2,14,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,765,"                if (isQuote(chars, pos, len, quoteStart, quoteLen)) {
",0,0,0,2,5,0,12,0,0,12,53,9,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,766,"                    if (isQuote(chars, pos + quoteLen, len, quoteStart, quoteLen)) {
",4,1,0,2,5,0,10,0,0,15,64,11,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,768,"                        workArea.append(chars, pos, quoteLen);
",0,0,0,1,2,0,10,0,0,10,38,13,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,769,"                        pos += (quoteLen * 2);
",4,1,0,1,2,0,0,0,0,6,22,12,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,770,"                        trimStart = workArea.size();
",2,0,0,1,2,0,4,0,0,7,28,12,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,771,"                        continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,775,"                    quoting = false;
",2,0,0,0,0,0,0,0,0,4,16,10,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,776,"                    pos += quoteLen;
",4,0,0,0,0,0,0,0,0,5,16,10,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,777,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,781,"                workArea.append(chars[pos++]);
",2,0,1,2,4,0,4,0,0,9,30,9,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,782,"                trimStart = workArea.size();
",2,0,0,1,2,0,4,0,0,7,28,8,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,788,"                int delimLen = getDelimiterMatcher().isMatch(chars, pos, start, len);
",2,0,0,2,4,0,12,0,0,14,69,9,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,789,"                if (delimLen > 0) {
",2,1,0,1,3,0,0,0,0,3,19,8,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,791,"                    addToken(tokens, workArea.substring(0, trimStart));
",0,0,0,2,4,0,10,0,0,10,51,11,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,792,"                    return pos + delimLen;
",4,1,0,0,0,1,0,0,0,5,22,10,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,796,"                if (quoteLen > 0) {
",2,1,0,1,3,0,0,0,0,3,19,8,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,797,"                    if (isQuote(chars, pos, len, quoteStart, quoteLen)) {
",0,0,0,2,5,0,12,0,0,12,53,11,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,798,"                        quoting = true;
",2,0,0,0,0,0,0,0,0,4,15,12,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,799,"                        pos += quoteLen;
",4,0,0,0,0,0,0,0,0,5,16,12,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,800,"                        continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,805,"                int ignoredLen = getIgnoredMatcher().isMatch(chars, pos, start, len);
",2,0,0,2,4,0,12,0,0,14,69,9,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,806,"                if (ignoredLen > 0) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,807,"                    pos += ignoredLen;
",4,0,0,0,0,0,0,0,0,5,18,10,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,808,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,814,"                int trimmedLen = getTrimmerMatcher().isMatch(chars, pos, start, len);
",2,0,0,2,4,0,12,0,0,14,69,9,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,815,"                if (trimmedLen > 0) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,816,"                    workArea.append(chars, pos, trimmedLen);
",0,0,0,1,2,0,10,0,0,10,40,11,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,817,"                    pos += trimmedLen;
",4,0,0,0,0,0,0,0,0,5,18,10,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,818,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,822,"                workArea.append(chars[pos++]);
",2,0,1,2,4,0,4,0,0,9,30,9,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,823,"                trimStart = workArea.size();
",2,0,0,1,2,0,4,0,0,7,28,8,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,824,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,828,"        addToken(tokens, workArea.substring(0, trimStart));
",0,0,0,2,4,0,10,0,0,10,51,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,829,"        return -1;
",0,0,0,0,0,1,0,0,0,1,10,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,844,"        for (int i = 0; i < quoteLen; i++) {
",8,1,0,1,3,0,0,0,0,10,36,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,845,"            if ((pos + i) >= len || chars[pos + i] != chars[quoteStart + i]) {
",14,6,1,4,9,0,0,0,0,24,66,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,846,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,849,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,860,"        return this.delimMatcher;
",2,0,0,0,0,1,0,0,0,2,25,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,872,"        if (delim == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,873,"            this.delimMatcher = StrMatcher.noneMatcher();
",2,0,0,1,2,0,4,0,0,7,45,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,875,"            this.delimMatcher = delim;
",4,0,0,0,0,0,0,0,0,5,26,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,877,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,887,"        return setDelimiterMatcher(StrMatcher.charMatcher(delim));
",0,0,0,2,4,1,8,0,0,8,58,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,897,"        return setDelimiterMatcher(StrMatcher.stringMatcher(delim));
",0,0,0,2,4,1,8,0,0,8,60,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,912,"        return quoteMatcher;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,925,"        if (quote != null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,926,"            this.quoteMatcher = quote;
",4,0,0,0,0,0,0,0,0,5,26,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,928,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,941,"        return setQuoteMatcher(StrMatcher.charMatcher(quote));
",0,0,0,2,4,1,8,0,0,8,54,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,956,"        return ignoredMatcher;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,969,"        if (ignored != null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,970,"            this.ignoredMatcher = ignored;
",4,0,0,0,0,0,0,0,0,5,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,972,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,985,"        return setIgnoredMatcher(StrMatcher.charMatcher(ignored));
",0,0,0,2,4,1,8,0,0,8,58,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1000,"        return trimmerMatcher;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1013,"        if (trimmer != null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1014,"            this.trimmerMatcher = trimmer;
",4,0,0,0,0,0,0,0,0,5,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1016,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1027,"        return this.emptyAsNull;
",2,0,0,0,0,1,0,0,0,2,24,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1038,"        this.emptyAsNull = emptyAsNull;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1039,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1050,"        return ignoreEmptyTokens;
",2,0,0,0,0,1,0,0,0,2,25,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1061,"        this.ignoreEmptyTokens = ignoreEmptyTokens;
",4,0,0,0,0,0,0,0,0,5,43,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1062,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1072,"        if (chars == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1073,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1075,"        return new String(chars);
",2,0,0,1,2,1,0,2,0,4,25,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1088,"            return cloneReset();
",0,0,0,1,2,1,2,0,0,2,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1089,"        } catch (CloneNotSupportedException ex) {
",2,0,0,1,4,0,0,2,0,4,41,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1090,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1102,"        StrTokenizer cloned = (StrTokenizer) super.clone();
",4,0,0,2,4,0,0,4,0,8,51,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1103,"        if (cloned.chars != null) {
",4,1,0,1,3,0,0,0,0,5,27,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1104,"            cloned.chars = (char[]) cloned.chars.clone();
",8,0,0,3,6,0,2,0,0,11,45,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1106,"        cloned.reset();
",0,0,0,1,2,0,4,0,0,4,15,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1107,"        return cloned;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1117,"        if (tokens == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1118,"            return ""StrTokenizer[not tokenized yet]"";
",0,0,0,1,2,1,0,0,0,1,41,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrTokenizer,59,1120,"            return ""StrTokenizer"" + getTokenList();
",0,1,0,1,2,1,2,0,0,4,39,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2213,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2212,"        StrBuilderTokenizer() {
",2,0,0,1,3,0,0,0,0,2,23,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2214,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2218,"            if (chars == null) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2219,"                return super.tokenize(StrBuilder.this.buffer, 0, StrBuilder.this.size());
",8,0,0,2,4,1,2,0,0,10,73,8,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2221,"                return super.tokenize(chars, offset, count);
",8,0,0,1,2,1,0,0,0,8,44,8,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2227,"            String str = super.getContent();
",4,0,0,1,2,0,0,2,0,6,32,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2228,"            if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2229,"                return StrBuilder.this.toString();
",2,0,0,1,2,1,2,0,0,4,34,8,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2231,"                return str;
",2,0,0,0,0,1,0,0,0,2,11,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,98,"        this(CAPACITY);
",2,0,0,1,2,0,0,0,0,2,15,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,99,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,109,"            initialCapacity = CAPACITY;
",4,0,0,0,0,0,0,0,0,5,27,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,121,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,122,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,123,"            buffer = new char[CAPACITY];
",2,0,1,1,2,0,0,0,0,5,28,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,125,"            buffer = new char[str.length() + CAPACITY];
",4,1,0,2,4,0,4,0,0,10,43,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,126,"            append(str);
",0,0,0,1,2,0,4,0,0,4,12,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,128,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,137,"        return newLine;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,147,"        this.newLine = newLine;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,148,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,158,"        return nullText;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,168,"        if (nullText != null && nullText.length() == 0) {
",2,3,0,2,5,0,4,0,0,9,49,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,169,"            nullText = null;
",2,0,0,0,0,0,0,0,0,3,16,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,171,"        this.nullText = nullText;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,172,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,182,"        return size;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,194,"        if (length < 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,195,"            throw new StringIndexOutOfBoundsException(length);
",2,0,0,1,2,0,0,2,0,4,50,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,197,"        if (length < size) {
",4,1,0,1,3,0,0,0,0,5,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,198,"            size = length;
",4,0,0,0,0,0,0,0,0,5,14,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,199,"        } else if (length > size) {
",4,1,0,1,4,0,0,0,0,5,27,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,200,"            ensureCapacity(length);
",0,0,0,1,2,0,4,0,0,4,23,8,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,201,"            int oldEnd = size;
",4,0,0,0,0,0,0,0,0,4,18,8,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,202,"            int newEnd = length;
",4,0,0,0,0,0,0,0,0,4,20,8,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,203,"            size = length;
",4,0,0,0,0,0,0,0,0,5,14,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,204,"            for (int i = oldEnd; i < newEnd; i++) {
",10,1,0,1,3,0,0,0,0,12,39,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,205,"                buffer[i] = '\0';
",0,0,1,1,2,0,0,0,0,6,17,9,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,208,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,218,"        return buffer.length;
",4,0,0,0,0,1,0,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,229,"            char[] old = buffer;
",4,0,0,1,2,0,0,0,0,4,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,230,"            buffer = new char[capacity];
",2,0,1,1,2,0,0,0,0,5,28,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,231,"            System.arraycopy(old, 0, buffer, 0, size);
",0,0,0,1,2,0,10,0,0,10,42,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,242,"        if (buffer.length > length()) {
",4,1,0,2,5,0,2,0,0,7,31,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,243,"            char[] old = buffer;
",4,0,0,1,2,0,0,0,0,4,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,244,"            buffer = new char[length()];
",2,0,0,2,4,0,2,0,0,5,28,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,245,"            System.arraycopy(old, 0, buffer, 0, size);
",0,0,0,1,2,0,10,0,0,10,42,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,247,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,260,"        return size;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,272,"        return size == 0;
",2,1,0,0,0,1,0,0,0,3,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,287,"        size = 0;
",2,0,0,0,0,0,0,0,0,3,9,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,288,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,302,"        if (index < 0 || index >= length()) {
",4,3,0,2,5,0,2,0,0,9,37,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,303,"            throw new StringIndexOutOfBoundsException(index);
",2,0,0,1,2,0,0,2,0,4,49,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,305,"        return buffer[index];
",0,0,1,1,2,1,0,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,319,"        if (index < 0 || index >= length()) {
",4,3,0,2,5,0,2,0,0,9,37,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,320,"            throw new StringIndexOutOfBoundsException(index);
",2,0,0,1,2,0,0,2,0,4,49,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,322,"        buffer[index] = ch;
",2,0,1,1,2,0,0,0,0,7,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,323,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,336,"        if (index < 0 || index >= size) {
",6,3,0,1,3,0,0,0,0,9,33,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,337,"            throw new StringIndexOutOfBoundsException(index);
",2,0,0,1,2,0,0,2,0,4,49,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,339,"        deleteImpl(index, index + 1, 1);
",2,1,0,1,2,0,4,0,0,7,32,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,340,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,350,"        if (size == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,351,"            return ArrayUtils.EMPTY_CHAR_ARRAY;
",4,0,0,0,0,1,0,0,0,4,35,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,353,"        char chars[] = new char[size];
",2,0,1,2,4,0,0,0,0,4,30,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,354,"        System.arraycopy(buffer, 0, chars, 0, size);
",0,0,0,1,2,0,10,0,0,10,44,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,355,"        return chars;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,369,"        endIndex = validateRange(startIndex, endIndex);
",2,0,0,1,2,0,6,0,0,9,47,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,370,"        int len = endIndex - startIndex;
",6,1,0,0,0,0,0,0,0,7,32,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,371,"        if (len == 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,372,"            return ArrayUtils.EMPTY_CHAR_ARRAY;
",4,0,0,0,0,1,0,0,0,4,35,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,374,"        char chars[] = new char[len];
",2,0,1,2,4,0,0,0,0,4,29,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,375,"        System.arraycopy(buffer, startIndex, chars, 0, len);
",0,0,0,1,2,0,12,0,0,12,52,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,376,"        return chars;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,386,"        int len = length();
",2,0,0,1,2,0,2,0,0,4,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,387,"        if (destination == null || destination.length < len) {
",8,3,0,1,3,0,0,0,0,11,54,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,388,"            destination = new char[len];
",2,0,1,1,2,0,0,0,0,5,28,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,390,"        System.arraycopy(buffer, 0, destination, 0, len);
",0,0,0,1,2,0,10,0,0,10,49,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,391,"        return destination;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,405,"        if (startIndex < 0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,406,"            throw new StringIndexOutOfBoundsException(startIndex);
",2,0,0,1,2,0,0,2,0,4,54,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,408,"        if (endIndex < 0 || endIndex > length()) {
",4,3,0,2,5,0,2,0,0,9,42,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,409,"            throw new StringIndexOutOfBoundsException(endIndex);
",2,0,0,1,2,0,0,2,0,4,52,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,411,"        if (startIndex > endIndex) {
",4,1,0,1,3,0,0,0,0,5,28,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,412,"            throw new StringIndexOutOfBoundsException(""end < start"");
",0,0,0,1,2,0,0,2,0,3,57,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,414,"        System.arraycopy(buffer, startIndex, destination, destinationIndex, endIndex - startIndex);
",4,1,0,1,2,0,12,0,0,17,91,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,415,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,428,"        if (newLine == null)  {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,429,"            append(SystemUtils.LINE_SEPARATOR);
",4,0,0,1,2,0,2,0,0,6,35,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,430,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,432,"        return append(newLine);
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,441,"        if (nullText == null)  {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,442,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,444,"        return append(nullText);
",0,0,0,1,2,1,4,0,0,5,24,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,455,"        if (obj == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,456,"            return appendNull();
",0,0,0,1,2,1,2,0,0,2,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,458,"        return append(obj.toString());        
",0,0,0,2,4,1,6,0,0,6,30,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,469,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,470,"            return appendNull();
",0,0,0,1,2,1,2,0,0,2,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,472,"        int strLen = str.length();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,473,"        if (strLen > 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,474,"            int len = length();
",2,0,0,1,2,0,2,0,0,4,19,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,475,"            ensureCapacity(len + strLen);
",4,1,0,1,2,0,2,0,0,7,29,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,476,"            str.getChars(0, strLen, buffer, len);
",0,0,0,1,2,0,10,0,0,10,37,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,477,"            size += strLen;
",4,0,0,0,0,0,0,0,0,5,15,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,479,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,492,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,493,"            return appendNull();
",0,0,0,1,2,1,2,0,0,2,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,495,"        if (startIndex < 0 || startIndex > str.length()) {
",4,3,0,2,5,0,4,0,0,11,50,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,496,"            throw new StringIndexOutOfBoundsException(""startIndex must be valid"");
",0,0,0,1,2,0,0,2,0,3,70,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,498,"        if (length < 0 || (startIndex + length) > str.length()) {
",6,4,0,3,7,0,4,0,0,14,57,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,499,"            throw new StringIndexOutOfBoundsException(""length must be valid"");
",0,0,0,1,2,0,0,2,0,3,66,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,501,"        if (length > 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,502,"            int len = length();
",2,0,0,1,2,0,2,0,0,4,19,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,503,"            ensureCapacity(len + length);
",4,1,0,1,2,0,2,0,0,7,29,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,504,"            str.getChars(startIndex, startIndex + length, buffer, len);
",4,1,0,1,2,0,10,0,0,15,59,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,505,"            size += length;
",4,0,0,0,0,0,0,0,0,5,15,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,507,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,518,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,519,"            return appendNull();
",0,0,0,1,2,1,2,0,0,2,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,521,"        int strLen = str.length();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,522,"        if (strLen > 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,523,"            int len = length();
",2,0,0,1,2,0,2,0,0,4,19,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,524,"            ensureCapacity(len + strLen);
",4,1,0,1,2,0,2,0,0,7,29,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,525,"            str.getChars(0, strLen, buffer, len);
",0,0,0,1,2,0,10,0,0,10,37,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,526,"            size += strLen;
",4,0,0,0,0,0,0,0,0,5,15,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,528,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,541,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,542,"            return appendNull();
",0,0,0,1,2,1,2,0,0,2,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,544,"        if (startIndex < 0 || startIndex > str.length()) {
",4,3,0,2,5,0,4,0,0,11,50,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,545,"            throw new StringIndexOutOfBoundsException(""startIndex must be valid"");
",0,0,0,1,2,0,0,2,0,3,70,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,547,"        if (length < 0 || (startIndex + length) > str.length()) {
",6,4,0,3,7,0,4,0,0,14,57,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,548,"            throw new StringIndexOutOfBoundsException(""length must be valid"");
",0,0,0,1,2,0,0,2,0,3,66,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,550,"        if (length > 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,551,"            int len = length();
",2,0,0,1,2,0,2,0,0,4,19,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,552,"            ensureCapacity(len + length);
",4,1,0,1,2,0,2,0,0,7,29,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,553,"            str.getChars(startIndex, startIndex + length, buffer, len);
",4,1,0,1,2,0,10,0,0,15,59,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,554,"            size += length;
",4,0,0,0,0,0,0,0,0,5,15,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,556,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,567,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,568,"            return appendNull();
",0,0,0,1,2,1,2,0,0,2,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,570,"        int strLen = str.length();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,571,"        if (strLen > 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,572,"            int len = length();
",2,0,0,1,2,0,2,0,0,4,19,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,573,"            ensureCapacity(len + strLen);
",4,1,0,1,2,0,2,0,0,7,29,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,574,"            System.arraycopy(str.buffer, 0, buffer, len, strLen);
",4,0,0,1,2,0,10,0,0,14,53,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,575,"            size += strLen;
",4,0,0,0,0,0,0,0,0,5,15,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,577,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,590,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,591,"            return appendNull();
",0,0,0,1,2,1,2,0,0,2,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,593,"        if (startIndex < 0 || startIndex > str.length()) {
",4,3,0,2,5,0,4,0,0,11,50,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,594,"            throw new StringIndexOutOfBoundsException(""startIndex must be valid"");
",0,0,0,1,2,0,0,2,0,3,70,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,596,"        if (length < 0 || (startIndex + length) > str.length()) {
",6,4,0,3,7,0,4,0,0,14,57,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,597,"            throw new StringIndexOutOfBoundsException(""length must be valid"");
",0,0,0,1,2,0,0,2,0,3,66,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,599,"        if (length > 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,600,"            int len = length();
",2,0,0,1,2,0,2,0,0,4,19,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,601,"            ensureCapacity(len + length);
",4,1,0,1,2,0,2,0,0,7,29,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,602,"            str.getChars(startIndex, startIndex + length, buffer, len);
",4,1,0,1,2,0,10,0,0,15,59,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,603,"            size += length;
",4,0,0,0,0,0,0,0,0,5,15,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,605,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,616,"        if (chars == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,617,"            return appendNull();
",0,0,0,1,2,1,2,0,0,2,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,619,"        int strLen = chars.length;
",6,0,0,0,0,0,0,0,0,6,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,620,"        if (strLen > 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,621,"            int len = length();
",2,0,0,1,2,0,2,0,0,4,19,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,622,"            ensureCapacity(len + strLen);
",4,1,0,1,2,0,2,0,0,7,29,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,623,"            System.arraycopy(chars, 0, buffer, len, strLen);
",0,0,0,1,2,0,12,0,0,12,48,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,624,"            size += strLen;
",4,0,0,0,0,0,0,0,0,5,15,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,626,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,639,"        if (chars == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,640,"            return appendNull();
",0,0,0,1,2,1,2,0,0,2,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,642,"        if (startIndex < 0 || startIndex > chars.length) {
",8,3,0,1,3,0,0,0,0,11,50,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,643,"            throw new StringIndexOutOfBoundsException(""Invalid startIndex: "" + length);
",2,1,0,1,2,0,0,2,0,6,75,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,645,"        if (length < 0 || (startIndex + length) > chars.length) {
",10,4,0,2,5,0,0,0,0,14,57,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,646,"            throw new StringIndexOutOfBoundsException(""Invalid length: "" + length);
",2,1,0,1,2,0,0,2,0,6,71,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,648,"        if (length > 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,649,"            int len = length();
",2,0,0,1,2,0,2,0,0,4,19,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,650,"            ensureCapacity(len + length);
",4,1,0,1,2,0,2,0,0,7,29,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,651,"            System.arraycopy(chars, startIndex, buffer, len, length);
",0,0,0,1,2,0,14,0,0,14,57,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,652,"            size += length;
",4,0,0,0,0,0,0,0,0,5,15,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,654,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,664,"        if (value) {
",2,0,0,1,3,0,0,0,0,2,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,665,"            ensureCapacity(size + 4);
",2,1,0,1,2,0,2,0,0,5,25,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,666,"            buffer[size++] = 't';
",2,0,1,1,2,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,667,"            buffer[size++] = 'r';
",2,0,1,1,2,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,668,"            buffer[size++] = 'u';
",2,0,1,1,2,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,669,"            buffer[size++] = 'e';
",2,0,1,1,2,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,671,"            ensureCapacity(size + 5);
",2,1,0,1,2,0,2,0,0,5,25,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,672,"            buffer[size++] = 'f';
",2,0,1,1,2,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,673,"            buffer[size++] = 'a';
",2,0,1,1,2,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,674,"            buffer[size++] = 'l';
",2,0,1,1,2,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,675,"            buffer[size++] = 's';
",2,0,1,1,2,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,676,"            buffer[size++] = 'e';
",2,0,1,1,2,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,678,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,688,"        int len = length();
",2,0,0,1,2,0,2,0,0,4,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,689,"        ensureCapacity(len + 1);
",2,1,0,1,2,0,2,0,0,5,24,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,690,"        buffer[size++] = ch;
",4,0,1,1,2,0,0,0,0,8,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,691,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,701,"        return append(String.valueOf(value));
",0,0,0,2,4,1,8,0,0,8,37,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,711,"        return append(String.valueOf(value));
",0,0,0,2,4,1,8,0,0,8,37,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,721,"        return append(String.valueOf(value));
",0,0,0,2,4,1,8,0,0,8,37,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,731,"        return append(String.valueOf(value));
",0,0,0,2,4,1,8,0,0,8,37,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,746,"        if (array != null && array.length > 0) {
",6,3,0,1,3,0,0,0,0,9,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,747,"            separator = (separator == null ? """" : separator);
",6,1,0,1,2,0,0,0,0,9,49,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,748,"            append(array[0]);
",0,0,1,2,4,0,2,0,0,4,17,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,749,"            for (int i = 1; i < array.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,750,"                append(separator);
",0,0,0,1,2,0,4,0,0,4,18,9,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,751,"                append(array[i]);
",0,0,1,2,4,0,2,0,0,6,17,9,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,754,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,768,"        if (coll != null && coll.size() > 0) {
",2,3,0,2,5,0,4,0,0,9,38,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,769,"            separator = (separator == null ? """" : separator);
",6,1,0,1,2,0,0,0,0,9,49,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,770,"            Iterator it = coll.iterator();
",2,0,0,1,2,0,4,2,0,8,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,771,"            while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,772,"                append(it.next());
",0,0,0,2,4,0,6,0,0,6,18,9,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,773,"                if (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,19,9,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,774,"                    append(separator);
",0,0,0,1,2,0,4,0,0,4,18,11,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,778,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,792,"        if (it != null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,793,"            separator = (separator == null ? """" : separator);
",6,1,0,1,2,0,0,0,0,9,49,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,794,"            while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,795,"                append(it.next());
",0,0,0,2,4,0,6,0,0,6,18,9,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,796,"                if (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,19,9,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,797,"                    append(separator);
",0,0,0,1,2,0,4,0,0,4,18,11,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,801,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,813,"        if (length >= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,814,"            ensureCapacity(size + length);
",4,1,0,1,2,0,2,0,0,7,30,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,815,"            for (int i = 0; i < length; i++) {
",8,1,0,1,3,0,0,0,0,10,34,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,816,"                buffer[size++] = padChar;
",4,0,1,1,2,0,0,0,0,8,25,8,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,819,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,835,"        if (width > 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,836,"            ensureCapacity(size + width);
",4,1,0,1,2,0,2,0,0,7,29,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,837,"            String str = (obj == null ? getNullText() : obj.toString());
",4,1,0,3,6,0,6,2,0,14,60,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,838,"            int strLen = str.length();
",2,0,0,1,2,0,4,0,0,6,26,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,839,"            if (strLen >= width) {
",4,1,0,1,3,0,0,0,0,5,22,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,840,"                str.getChars(strLen - width, strLen, buffer, size);
",4,1,0,1,2,0,10,0,0,15,51,9,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,842,"                int padLen = width - strLen;
",6,1,0,0,0,0,0,0,0,7,28,9,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,843,"                for (int i = 0; i < padLen; i++) {
",8,1,0,1,3,0,0,0,0,10,34,8,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,844,"                    buffer[size + i] = padChar;
",6,1,1,1,2,0,0,0,0,10,27,10,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,846,"                str.getChars(0, strLen, buffer, size + padLen);
",4,1,0,1,2,0,8,0,0,13,47,9,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,848,"            size += width;
",4,0,0,0,0,0,0,0,0,5,14,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,850,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,864,"        return appendFixedWidthPadLeft(String.valueOf(value), width, padChar);
",0,0,0,2,4,1,12,0,0,12,70,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,886,"                int padLen = width - strLen;
",6,1,0,0,0,0,0,0,0,7,28,9,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,887,"                str.getChars(0, strLen, buffer, size);
",0,0,0,1,2,0,10,0,0,10,38,9,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,888,"                for (int i = 0; i < padLen; i++) {
",8,1,0,1,3,0,0,0,0,10,34,8,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,889,"                    buffer[size + strLen + i] = padChar;
",8,1,1,1,2,0,0,0,0,12,36,10,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,892,"            size += width;
",4,0,0,0,0,0,0,0,0,5,14,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,894,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,908,"        return appendFixedWidthPadRight(String.valueOf(value), width, padChar);
",0,0,0,2,4,1,12,0,0,12,71,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,922,"        if (obj == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,923,"            return insert(index, nullText);
",0,0,0,1,2,1,6,0,0,7,31,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,925,"        return insert(index, obj.toString());
",0,0,0,2,4,1,8,0,0,8,37,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,938,"        validateIndex(index);
",0,0,0,1,2,0,4,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,939,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,940,"            str = nullText;
",4,0,0,0,0,0,0,0,0,5,15,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,942,"        int strLen = (str == null ? 0 : str.length());
",4,1,0,2,4,0,4,0,0,9,46,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,943,"        if (strLen > 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,944,"            int newSize = size + strLen;
",6,1,0,0,0,0,0,0,0,7,28,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,945,"            ensureCapacity(newSize);
",0,0,0,1,2,0,4,0,0,4,24,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,946,"            System.arraycopy(buffer, index, buffer, index + strLen, size - index);
",8,2,0,1,2,0,10,0,0,20,70,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,947,"            size = newSize;
",4,0,0,0,0,0,0,0,0,5,15,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,948,"            str.getChars(0, strLen, buffer, index);
",0,0,0,1,2,0,10,0,0,10,39,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,950,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,963,"        validateIndex(index);
",0,0,0,1,2,0,4,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,964,"        if (chars == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,965,"            return insert(index, nullText);
",0,0,0,1,2,1,6,0,0,7,31,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,967,"        int len = chars.length;
",6,0,0,0,0,0,0,0,0,6,23,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,968,"        if (len > 0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,969,"            ensureCapacity(size + len);
",4,1,0,1,2,0,2,0,0,7,27,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,970,"            System.arraycopy(buffer, index, buffer, index + len, size - index);
",8,2,0,1,2,0,10,0,0,20,67,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,971,"            System.arraycopy(chars, 0, buffer, index, len);
",0,0,0,1,2,0,12,0,0,12,47,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,972,"            size += len;
",4,0,0,0,0,0,0,0,0,5,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,974,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,989,"        validateIndex(index);
",0,0,0,1,2,0,4,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,990,"        if (chars == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,991,"            return insert(index, nullText);
",0,0,0,1,2,1,6,0,0,7,31,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,993,"        if (offset < 0 || offset > chars.length) {
",8,3,0,1,3,0,0,0,0,11,42,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,994,"            throw new StringIndexOutOfBoundsException(""Invalid offset: "" + offset);
",2,1,0,1,2,0,0,2,0,6,71,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,996,"        if (length < 0 || offset + length > chars.length) {
",10,4,0,1,3,0,0,0,0,14,51,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,997,"            throw new StringIndexOutOfBoundsException(""Invalid length: "" + length);
",2,1,0,1,2,0,0,2,0,6,71,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,999,"        if (length > 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1000,"            ensureCapacity(size + length);
",4,1,0,1,2,0,2,0,0,7,30,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1001,"            System.arraycopy(buffer, index, buffer, index + length, size - index);
",8,2,0,1,2,0,10,0,0,20,70,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1002,"            System.arraycopy(chars, offset, buffer, index, length);
",0,0,0,1,2,0,14,0,0,14,55,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1003,"            size += length;
",4,0,0,0,0,0,0,0,0,5,15,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1005,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1017,"        validateIndex(index);
",0,0,0,1,2,0,4,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1018,"        if (value) {
",2,0,0,1,3,0,0,0,0,2,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1019,"            ensureCapacity(size + 4);
",2,1,0,1,2,0,2,0,0,5,25,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1020,"            System.arraycopy(buffer, index, buffer, index + 4, size - index);
",6,2,0,1,2,0,10,0,0,18,65,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1021,"            buffer[index++] = 't';
",2,0,1,1,2,0,0,0,0,7,22,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1022,"            buffer[index++] = 'r';
",2,0,1,1,2,0,0,0,0,7,22,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1023,"            buffer[index++] = 'u';
",2,0,1,1,2,0,0,0,0,7,22,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1024,"            buffer[index] = 'e';
",0,0,1,1,2,0,0,0,0,6,20,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1025,"            size += 4;
",2,0,0,0,0,0,0,0,0,3,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1027,"            ensureCapacity(size + 5);
",2,1,0,1,2,0,2,0,0,5,25,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1028,"            System.arraycopy(buffer, index, buffer, index + 5, size - index);
",6,2,0,1,2,0,10,0,0,18,65,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1029,"            buffer[index++] = 'f';
",2,0,1,1,2,0,0,0,0,7,22,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1030,"            buffer[index++] = 'a';
",2,0,1,1,2,0,0,0,0,7,22,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1031,"            buffer[index++] = 'l';
",2,0,1,1,2,0,0,0,0,7,22,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1032,"            buffer[index++] = 's';
",2,0,1,1,2,0,0,0,0,7,22,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1033,"            buffer[index] = 'e';
",0,0,1,1,2,0,0,0,0,6,20,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1034,"            size += 5;
",2,0,0,0,0,0,0,0,0,3,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1036,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1048,"        validateIndex(index);
",0,0,0,1,2,0,4,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1049,"        ensureCapacity(size + 1);
",2,1,0,1,2,0,2,0,0,5,25,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1050,"        System.arraycopy(buffer, index, buffer, index + 1, size - index);
",6,2,0,1,2,0,10,0,0,18,65,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1051,"        buffer[index] = value;
",2,0,1,1,2,0,0,0,0,7,22,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1052,"        size++;
",2,0,0,0,0,0,0,0,0,3,7,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1053,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1065,"        return insert(index, String.valueOf(value));
",0,0,0,2,4,1,10,0,0,10,44,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1077,"        return insert(index, String.valueOf(value));
",0,0,0,2,4,1,10,0,0,10,44,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1089,"        return insert(index, String.valueOf(value));
",0,0,0,2,4,1,10,0,0,10,44,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1101,"        return insert(index, String.valueOf(value));
",0,0,0,2,4,1,10,0,0,10,44,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1114,"        System.arraycopy(buffer, endIndex, buffer, startIndex, size - endIndex);
",4,1,0,1,2,0,12,0,0,17,72,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1115,"        size -= len;
",4,0,0,0,0,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1116,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1128,"        endIndex = validateRange(startIndex, endIndex);
",2,0,0,1,2,0,6,0,0,9,47,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1129,"        int len = endIndex - startIndex;
",6,1,0,0,0,0,0,0,0,7,32,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1130,"        if (len > 0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1131,"            deleteImpl(startIndex, endIndex, len);
",0,0,0,1,2,0,8,0,0,8,38,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1133,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1144,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1145,"            if (buffer[i] == ch) {
",2,1,1,2,5,0,0,0,0,7,22,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1146,"                int start = i;
",4,0,0,0,0,0,0,0,0,4,14,9,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1147,"                while (++i < size) {
",4,1,0,1,3,0,0,0,0,6,20,8,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1148,"                    if (buffer[i] != ch) {
",2,1,1,2,5,0,0,0,0,7,22,10,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1149,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1152,"                int len = i - start;
",6,1,0,0,0,0,0,0,0,7,20,9,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1153,"                deleteImpl(start, i, len);
",0,0,0,1,2,0,8,0,0,8,26,9,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1154,"                i -= len;
",4,0,0,0,0,0,0,0,0,5,9,8,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1157,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1167,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1168,"            if (buffer[i] == ch) {
",2,1,1,2,5,0,0,0,0,7,22,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1169,"                deleteImpl(i, i + 1, 1);
",2,1,0,1,2,0,4,0,0,7,24,9,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1170,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1173,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1184,"        int len = (str == null ? 0 : str.length());
",4,1,0,2,4,0,4,0,0,9,43,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1185,"        if (len > 0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1186,"            int index = indexOf(str, 0);
",2,0,0,1,2,0,4,0,0,6,28,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1187,"            while (index >= 0) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1188,"                deleteImpl(index, index + len, len);
",4,1,0,1,2,0,6,0,0,11,36,9,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1189,"                index = indexOf(str, index);
",2,0,0,1,2,0,6,0,0,9,28,8,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1192,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1202,"        int len = (str == null ? 0 : str.length());
",4,1,0,2,4,0,4,0,0,9,43,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1203,"        if (len > 0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1204,"            int index = indexOf(str, 0);
",2,0,0,1,2,0,4,0,0,6,28,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1205,"            if (index >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1206,"                deleteImpl(index, index + len, len);
",4,1,0,1,2,0,6,0,0,11,36,9,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1209,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1224,"        return replace(matcher, null, 0, size, -1);
",0,0,0,1,2,1,6,0,0,8,43,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1238,"        return replace(matcher, null, 0, size, 1);
",0,0,0,1,2,1,6,0,0,7,42,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1253,"        int newSize = size - removeLen + insertLen;
",8,2,0,0,0,0,0,0,0,10,43,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1254,"        if (insertLen != removeLen) {
",4,1,0,1,3,0,0,0,0,5,29,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1255,"            ensureCapacity(newSize);
",0,0,0,1,2,0,4,0,0,4,24,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1256,"            System.arraycopy(buffer, endIndex, buffer, startIndex + insertLen, size - endIndex);
",8,2,0,1,2,0,10,0,0,20,84,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1257,"            size = newSize;
",4,0,0,0,0,0,0,0,0,5,15,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1259,"        if (insertLen > 0) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1260,"            insertStr.getChars(0, insertLen, buffer, startIndex);
",0,0,0,1,2,0,10,0,0,10,53,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1262,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1276,"        endIndex = validateRange(startIndex, endIndex);
",2,0,0,1,2,0,6,0,0,9,47,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1277,"        int insertLen = (replaceStr == null ? 0 : replaceStr.length());
",4,1,0,2,4,0,4,0,0,9,63,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1278,"        replaceImpl(startIndex, endIndex, endIndex - startIndex, replaceStr, insertLen);
",4,1,0,1,2,0,10,0,0,15,80,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1279,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1292,"        if (search != replace) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1293,"            for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1294,"                if (buffer[i] == search) {
",2,1,1,2,5,0,0,0,0,7,26,8,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1295,"                    buffer[i] = replace;
",2,0,1,1,2,0,0,0,0,7,20,10,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1299,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1311,"        if (search != replace) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1312,"            for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1313,"                if (buffer[i] == search) {
",2,1,1,2,5,0,0,0,0,7,26,8,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1314,"                    buffer[i] = replace;
",2,0,1,1,2,0,0,0,0,7,20,10,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1315,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1319,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1331,"        int searchLen = (searchStr == null ? 0 : searchStr.length());
",4,1,0,2,4,0,4,0,0,9,61,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1332,"        if (searchLen > 0) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1333,"            int replaceLen = (replaceStr == null ? 0 : replaceStr.length());
",4,1,0,2,4,0,4,0,0,9,64,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1334,"            int index = indexOf(searchStr, 0);
",2,0,0,1,2,0,4,0,0,6,34,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1335,"            while (index >= 0) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1336,"                replaceImpl(index, index + searchLen, searchLen, replaceStr, replaceLen);
",4,1,0,1,2,0,10,0,0,15,73,9,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1337,"                index = indexOf(searchStr, index + replaceLen);
",6,1,0,1,2,0,4,0,0,12,47,8,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1340,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1351,"        int searchLen = (searchStr == null ? 0 : searchStr.length());
",4,1,0,2,4,0,4,0,0,9,61,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1352,"        if (searchLen > 0) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1353,"            int index = indexOf(searchStr, 0);
",2,0,0,1,2,0,4,0,0,6,34,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1354,"            if (index >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1355,"                int replaceLen = (replaceStr == null ? 0 : replaceStr.length());
",4,1,0,2,4,0,4,0,0,9,64,9,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1356,"                replaceImpl(index, index + searchLen, searchLen, replaceStr, replaceLen);
",4,1,0,1,2,0,10,0,0,15,73,9,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1359,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1375,"        return replace(matcher, replaceStr, 0, size, -1);
",0,0,0,1,2,1,8,0,0,9,49,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1390,"        return replace(matcher, replaceStr, 0, size, 1);
",0,0,0,1,2,1,8,0,0,8,48,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1413,"        endIndex = validateRange(startIndex, endIndex);
",2,0,0,1,2,0,6,0,0,9,47,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1414,"        return replaceImpl(matcher, replaceStr, startIndex, endIndex, replaceCount);
",0,0,0,1,2,1,12,0,0,12,76,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1435,"        if (matcher == null || size == 0) {
",4,3,0,1,3,0,0,0,0,7,35,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1436,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1438,"        int replaceLen = (replaceStr == null ? 0 : replaceStr.length());
",4,1,0,2,4,0,4,0,0,9,64,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1439,"        char[] buf = buffer;
",4,0,0,1,2,0,0,0,0,4,20,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1440,"        for (int i = from; i < to && replaceCount != 0; i++) {
",12,3,0,1,3,0,0,0,0,16,54,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1441,"            int removeLen = matcher.isMatch(buf, i, from, to);
",2,0,0,1,2,0,12,0,0,14,50,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1442,"            if (removeLen > 0) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1443,"                replaceImpl(i, i + removeLen, removeLen, replaceStr, replaceLen);
",4,1,0,1,2,0,10,0,0,15,65,9,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1444,"                to = to - removeLen + replaceLen;
",8,2,0,0,0,0,0,0,0,11,33,8,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1445,"                i = i + replaceLen - 1;
",6,2,0,0,0,0,0,0,0,9,23,8,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1446,"                if (replaceCount > 0) {
",2,1,0,1,3,0,0,0,0,3,23,8,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1447,"                    replaceCount--;
",2,0,0,0,0,0,0,0,0,3,15,10,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1451,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1461,"        if (size == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1462,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1465,"        int half = size / 2;
",4,1,0,0,0,0,0,0,0,5,20,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1466,"        char[] buf = buffer;
",4,0,0,1,2,0,0,0,0,4,20,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1467,"        for (int leftIdx = 0, rightIdx = size - 1; leftIdx < half; leftIdx++,rightIdx--) {
",14,2,0,1,3,0,0,0,0,18,82,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1468,"            char swap = buf[leftIdx];
",2,0,1,1,2,0,0,0,0,6,25,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1469,"            buf[leftIdx] = buf[rightIdx];
",0,0,1,2,4,0,0,0,0,9,29,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1470,"            buf[rightIdx] = swap;
",2,0,1,1,2,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1472,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1483,"        if (size == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1484,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1486,"        int len = size;
",4,0,0,0,0,0,0,0,0,4,15,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1487,"        char[] buf = buffer;
",4,0,0,1,2,0,0,0,0,4,20,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1488,"        int pos = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1489,"        while (pos < len && buf[pos] <= ' ') {
",4,3,1,2,5,0,0,0,0,12,38,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1490,"            pos++;
",2,0,0,0,0,0,0,0,0,3,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1492,"        while (pos < len && buf[len - 1] <= ' ') {
",6,4,1,2,5,0,0,0,0,13,42,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1493,"            len--;
",2,0,0,0,0,0,0,0,0,3,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1495,"        if (len < size) {
",4,1,0,1,3,0,0,0,0,5,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1496,"            delete(len, size);
",0,0,0,1,2,0,6,0,0,6,18,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1498,"        if (pos > 0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1499,"            delete(0, pos);
",0,0,0,1,2,0,4,0,0,4,15,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1501,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1514,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1515,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1517,"        int len = str.length();
",2,0,0,1,2,0,4,0,0,6,23,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1518,"        if (len == 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1519,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1521,"        if (len > size) {
",4,1,0,1,3,0,0,0,0,5,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1522,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1524,"        for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1525,"            if (buffer[i] != str.charAt(i)) {
",0,1,1,3,7,0,6,0,0,11,33,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1526,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1529,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1541,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1542,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1544,"        int len = str.length();
",2,0,0,1,2,0,4,0,0,6,23,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1545,"        if (len == 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1546,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1548,"        if (len > size) {
",4,1,0,1,3,0,0,0,0,5,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1549,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1551,"        int pos = size - len;
",6,1,0,0,0,0,0,0,0,7,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1552,"        for (int i = 0; i < len; i++,pos++) {
",10,1,0,1,3,0,0,0,0,13,37,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1553,"            if (buffer[pos] != str.charAt(i)) {
",0,1,1,3,7,0,6,0,0,11,35,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1554,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1557,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1569,"        return substring(start, size);
",0,0,0,1,2,1,6,0,0,6,30,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1586,"        endIndex = validateRange(startIndex, endIndex);
",2,0,0,1,2,0,6,0,0,9,47,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1587,"        return new String(buffer, startIndex, endIndex - startIndex);
",8,1,0,1,2,1,0,2,0,11,61,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1603,"        if (length <= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1604,"            return """";
",0,0,0,0,0,1,0,0,0,1,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1605,"        } else if (length >= size) {
",4,1,0,1,4,0,0,0,0,5,28,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1606,"            return new String(buffer, 0, size);
",4,0,0,1,2,1,0,2,0,6,35,8,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1608,"            return new String(buffer, 0, length);
",4,0,0,1,2,1,0,2,0,6,37,8,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1625,"        if (length <= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1626,"            return """";
",0,0,0,0,0,1,0,0,0,1,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1627,"        } else if (length >= size) {
",4,1,0,1,4,0,0,0,0,5,28,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1628,"            return new String(buffer, 0, size);
",4,0,0,1,2,1,0,2,0,6,35,8,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1630,"            return new String(buffer, size - length, length);
",8,1,0,1,2,1,0,2,0,11,49,8,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1651,"        if (index < 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1652,"            index = 0;
",2,0,0,0,0,0,0,0,0,3,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1654,"        if (length <= 0 || index >= size) {
",6,3,0,1,3,0,0,0,0,9,35,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1655,"            return """";
",0,0,0,0,0,1,0,0,0,1,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1657,"        if (size <= index + length) {
",6,2,0,1,3,0,0,0,0,8,29,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1658,"            return new String(buffer, index, size - index);
",8,1,0,1,2,1,0,2,0,11,47,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1660,"            return new String(buffer, index, length);
",6,0,0,1,2,1,0,2,0,8,41,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1672,"        char[] thisBuf = buffer;
",4,0,0,1,2,0,0,0,0,4,24,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1673,"        for (int i = 0; i < this.size; i++) {
",8,1,0,1,3,0,0,0,0,10,37,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1674,"            if (thisBuf[i] == ch) {
",2,1,1,2,5,0,0,0,0,7,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1675,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,8,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1678,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1688,"        return indexOf(str, 0) >= 0;
",0,1,0,1,2,1,4,0,0,5,28,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1703,"        return indexOf(matcher, 0) >= 0;
",0,1,0,1,2,1,4,0,0,5,32,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1714,"        return indexOf(ch, 0);
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1725,"        startIndex = (startIndex < 0 ? 0 : startIndex);
",6,1,0,1,2,0,0,0,0,8,47,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1726,"        if (startIndex >= size) {
",4,1,0,1,3,0,0,0,0,5,25,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1727,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1729,"        char[] thisBuf = buffer;
",4,0,0,1,2,0,0,0,0,4,24,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1730,"        for (int i = startIndex; i < size; i++) {
",10,1,0,1,3,0,0,0,0,12,41,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1731,"            if (thisBuf[i] == ch) {
",2,1,1,2,5,0,0,0,0,7,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1732,"                return i;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1735,"        return -1;
",0,0,0,0,0,1,0,0,0,1,10,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1747,"        return indexOf(str, 0);
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1761,"        startIndex = (startIndex < 0 ? 0 : startIndex);
",6,1,0,1,2,0,0,0,0,8,47,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1762,"        if (str == null || startIndex >= size) {
",6,3,0,1,3,0,0,0,0,9,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1763,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1765,"        int strLen = str.length();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1766,"        if (strLen == 1) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1767,"            return indexOf(str.charAt(0), startIndex);
",0,0,0,2,4,1,8,0,0,8,42,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1769,"        if (strLen == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1770,"            return startIndex;
",2,0,0,0,0,1,0,0,0,2,18,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1772,"        if (strLen > size) {
",4,1,0,1,3,0,0,0,0,5,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1773,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1775,"        char[] thisBuf = buffer;
",4,0,0,1,2,0,0,0,0,4,24,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1776,"        int len = size - strLen + 1;
",6,2,0,0,0,0,0,0,0,8,28,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1778,"        for (int i = startIndex; i < len; i++) {
",10,1,0,1,3,0,0,0,0,12,40,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1779,"            for (int j = 0; j < strLen; j++) {
",8,1,0,1,3,0,0,0,0,10,34,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1780,"                if (str.charAt(j) != thisBuf[i + j]) {
",4,2,1,3,7,0,6,0,0,14,38,9,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1781,"                    continue outer;
",2,0,0,0,0,0,0,0,0,2,15,11,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1784,"            return i;
",2,0,0,0,0,1,0,0,0,2,9,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1786,"        return -1;
",0,0,0,0,0,1,0,0,0,1,10,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1800,"        return indexOf(matcher, 0);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1816,"        startIndex = (startIndex < 0 ? 0 : startIndex);
",6,1,0,1,2,0,0,0,0,8,47,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1817,"        if (matcher == null || startIndex >= size) {
",6,3,0,1,3,0,0,0,0,9,44,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1818,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1820,"        int len = size;
",4,0,0,0,0,0,0,0,0,4,15,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1821,"        char[] buf = buffer;
",4,0,0,1,2,0,0,0,0,4,20,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1822,"        for (int i = startIndex; i < len; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1823,"            if (matcher.isMatch(buf, i, startIndex, len) > 0) {
",0,1,0,2,5,0,12,0,0,13,51,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1824,"                return i;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1827,"        return -1;
",0,0,0,0,0,1,0,0,0,1,10,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1838,"        return lastIndexOf(ch, size - 1);
",2,1,0,1,2,1,4,0,0,7,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1849,"        startIndex = (startIndex >= size ? size - 1 : startIndex);
",10,2,0,1,2,0,0,0,0,13,58,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1850,"        if (startIndex < 0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1851,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1853,"        for (int i = startIndex; i >= 0; i--) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1854,"            if (buffer[i] == ch) {
",2,1,1,2,5,0,0,0,0,7,22,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1855,"                return i;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1858,"        return -1;
",0,0,0,0,0,1,0,0,0,1,10,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1870,"        return lastIndexOf(str, size - 1);
",2,1,0,1,2,1,4,0,0,7,34,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1884,"        startIndex = (startIndex >= size ? size - 1 : startIndex);
",10,2,0,1,2,0,0,0,0,13,58,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1885,"        if (str == null || startIndex < 0) {
",4,3,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1886,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1888,"        int strLen = str.length();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1889,"        if (strLen > 0 && strLen <= size) {
",6,3,0,1,3,0,0,0,0,9,35,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1890,"            if (strLen == 1) {
",2,1,0,1,3,0,0,0,0,3,18,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1891,"                return lastIndexOf(str.charAt(0), startIndex);
",0,0,0,2,4,1,8,0,0,8,46,9,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1895,"            for (int i = startIndex - strLen + 1; i >= 0; i--) {
",10,3,0,1,3,0,0,0,0,14,52,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1896,"                for (int j = 0; j < strLen; j++) {
",8,1,0,1,3,0,0,0,0,10,34,9,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1897,"                    if (str.charAt(j) != buffer[i + j]) {
",4,2,1,3,7,0,6,0,0,14,37,11,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1898,"                        continue outer;
",2,0,0,0,0,0,0,0,0,2,15,13,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1901,"                return i;
",2,0,0,0,0,1,0,0,0,2,9,9,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1904,"        } else if (strLen == 0) {
",2,1,0,1,4,0,0,0,0,3,25,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1905,"            return startIndex;
",2,0,0,0,0,1,0,0,0,2,18,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1907,"        return -1;
",0,0,0,0,0,1,0,0,0,1,10,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1921,"        return lastIndexOf(matcher, size);
",0,0,0,1,2,1,6,0,0,6,34,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1937,"        startIndex = (startIndex >= size ? size - 1 : startIndex);
",10,2,0,1,2,0,0,0,0,13,58,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1938,"        if (matcher == null || startIndex < 0) {
",4,3,0,1,3,0,0,0,0,7,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1939,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1941,"        char[] buf = buffer;
",4,0,0,1,2,0,0,0,0,4,20,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1942,"        int endIndex = startIndex + 1;
",4,1,0,0,0,0,0,0,0,5,30,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1943,"        for (int i = startIndex; i >= 0; i--) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1944,"            if (matcher.isMatch(buf, i, 0, endIndex) > 0) {
",0,1,0,2,5,0,10,0,0,11,47,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1945,"                return i;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1948,"        return -1;
",0,0,0,0,0,1,0,0,0,1,10,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,1985,"        return new StrBuilderTokenizer();
",0,0,0,1,2,1,0,2,0,2,33,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2009,"        return new StrBuilderReader();
",0,0,0,1,2,1,0,2,0,2,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2034,"        return new StrBuilderWriter();
",0,0,0,1,2,1,0,2,0,2,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2076,"        if (this == other) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2077,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2079,"        if (this.size != other.size) {
",6,1,0,1,3,0,0,0,0,7,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2080,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2082,"        char thisBuf[] = this.buffer;
",4,0,0,1,2,0,0,0,0,4,29,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2083,"        char otherBuf[] = other.buffer;
",6,0,0,1,2,0,0,0,0,6,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2084,"        for (int i = size - 1; i >= 0; i--) {
",8,2,0,1,3,0,0,0,0,11,37,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2085,"            char c1 = thisBuf[i];
",2,0,1,1,2,0,0,0,0,6,21,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2086,"            char c2 = otherBuf[i];
",2,0,1,1,2,0,0,0,0,6,22,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2087,"            if (c1 != c2 && Character.toUpperCase(c1) != Character.toUpperCase(c2)) {
",4,3,0,3,7,0,12,0,0,19,73,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2088,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2091,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2102,"        if (this == other) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2103,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2105,"        if (this.size != other.size) {
",6,1,0,1,3,0,0,0,0,7,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2106,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2108,"        char thisBuf[] = this.buffer;
",4,0,0,1,2,0,0,0,0,4,29,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2109,"        char otherBuf[] = other.buffer;
",6,0,0,1,2,0,0,0,0,6,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2110,"        for (int i = size - 1; i >= 0; i--) {
",8,2,0,1,3,0,0,0,0,11,37,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2111,"            if (thisBuf[i] != otherBuf[i]) {
",0,1,1,3,7,0,0,0,0,9,32,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2112,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2115,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2126,"        if (obj instanceof StrBuilder) {
",2,0,0,1,3,0,0,2,0,4,32,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2127,"            return equals((StrBuilder) obj);
",2,0,0,2,4,1,2,2,0,6,32,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2129,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2138,"        char buf[] = buffer;
",4,0,0,1,2,0,0,0,0,4,20,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2139,"        int hash = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2140,"        for (int i = size - 1; i >= 0; i--) {
",8,2,0,1,3,0,0,0,0,11,37,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2141,"            hash = 31 * hash + buf[i];
",4,2,1,1,2,0,0,0,0,11,26,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2143,"        return hash;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2157,"        return new String(buffer, 0, size);
",4,0,0,1,2,1,0,2,0,6,35,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2167,"        return new StringBuffer(size).append(buffer, 0, size);
",2,0,0,2,4,1,6,2,0,10,54,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2181,"        if (startIndex < 0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2182,"            throw new StringIndexOutOfBoundsException(startIndex);
",2,0,0,1,2,0,0,2,0,4,54,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2184,"        if (endIndex > size) {
",4,1,0,1,3,0,0,0,0,5,22,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2185,"            endIndex = size;
",4,0,0,0,0,0,0,0,0,5,16,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2187,"        if (startIndex > endIndex) {
",4,1,0,1,3,0,0,0,0,5,28,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2188,"            throw new StringIndexOutOfBoundsException(""end < start"");
",0,0,0,1,2,0,0,2,0,3,57,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2190,"        return endIndex;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2200,"        if (index < 0 || index > size) {
",6,3,0,1,3,0,0,0,0,9,32,4,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2201,"            throw new StringIndexOutOfBoundsException(index);
",2,0,0,1,2,0,0,2,0,4,49,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2203,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2325,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2324,"        StrBuilderWriter() {
",2,0,0,1,3,0,0,0,0,2,20,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2326,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2331,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2336,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2340,"            StrBuilder.this.append((char) c);
",4,0,0,2,4,0,2,0,0,6,33,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2341,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2345,"            StrBuilder.this.append(cbuf);
",2,0,0,1,2,0,4,0,0,6,29,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2346,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2350,"            StrBuilder.this.append(cbuf, off, len);
",2,0,0,1,2,0,8,0,0,10,39,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2351,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2355,"            StrBuilder.this.append(str);
",2,0,0,1,2,0,4,0,0,6,28,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2356,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2360,"            StrBuilder.this.append(str, off, len);
",2,0,0,1,2,0,8,0,0,10,38,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2361,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2248,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2247,"        StrBuilderReader() {
",2,0,0,1,3,0,0,0,0,2,20,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2249,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2254,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2258,"            if (ready() == false) {
",0,1,0,2,5,0,2,0,0,4,23,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2259,"                return -1;
",0,0,0,0,0,1,0,0,0,1,10,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2261,"            return StrBuilder.this.charAt(pos++);
",4,0,0,1,2,1,2,0,0,7,37,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2266,"            if (off < 0 || len < 0 || off > b.length ||
",10,7,0,0,1,0,0,0,0,17,43,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2268,"                throw new IndexOutOfBoundsException();
",0,0,0,1,2,0,0,2,0,2,38,9,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2270,"            if (len == 0) {
",2,1,0,1,3,0,0,0,0,3,15,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2271,"                return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2273,"            if (pos >= StrBuilder.this.size()) {
",4,1,0,2,5,0,2,0,0,7,36,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2274,"                return -1;
",0,0,0,0,0,1,0,0,0,1,10,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2276,"            if (pos + len > size()) {
",4,2,0,2,5,0,2,0,0,8,25,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2277,"                len = StrBuilder.this.size() - pos;
",6,1,0,1,2,0,2,0,0,10,35,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2279,"            StrBuilder.this.getChars(pos, pos + len, b, off);
",6,1,0,1,2,0,8,0,0,15,49,6,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2280,"            pos += len;
",4,0,0,0,0,0,0,0,0,5,11,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2281,"            return len;
",2,0,0,0,0,1,0,0,0,2,11,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2286,"            if (pos + n > StrBuilder.this.size()) {
",6,2,0,2,5,0,2,0,0,10,39,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2287,"                n = StrBuilder.this.size() - pos;
",6,1,0,1,2,0,2,0,0,10,33,7,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2289,"            if (n < 0) {
",2,1,0,1,3,0,0,0,0,3,12,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2290,"                return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2292,"            pos += n;
",4,0,0,0,0,0,0,0,0,5,9,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2293,"            return n;
",2,0,0,0,0,1,0,0,0,2,9,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2298,"            return pos < StrBuilder.this.size();
",4,1,0,1,2,1,2,0,0,7,36,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2303,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2308,"            mark = pos;
",4,0,0,0,0,0,0,0,0,5,11,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2309,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2313,"            pos = mark;
",4,0,0,0,0,0,0,0,0,5,11,5,0.00000,0
defect4j,lang,org/apache/commons/lang/text/StrBuilder,59,2314,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
