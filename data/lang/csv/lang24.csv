dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,454,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,467,"            return createInteger(str);
",0,0,0,1,2,0,4,0,0,4,26,7,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,478,"            if (expPos > -1) {
",2,1,0,1,3,0,0,0,0,4,18,6,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,479,"                if (expPos < decPos || expPos > str.length()) {
",6,3,0,2,5,0,4,0,0,13,47,8,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,482,"                dec = str.substring(decPos + 1, expPos);
",4,1,0,1,2,0,6,0,0,12,40,8,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,484,"                dec = str.substring(decPos + 1);
",4,1,0,1,2,0,4,0,0,10,32,8,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,486,"            mant = str.substring(0, decPos);
",2,0,0,1,2,0,6,0,0,9,32,6,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,489,"                if (expPos > str.length()) {
",2,1,0,2,5,0,4,0,0,7,28,8,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,500,"                exp = str.substring(expPos + 1, str.length() - 1);
",4,2,0,2,4,0,8,0,0,15,50,8,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,525,"                        Float f = NumberUtils.createFloat(numeric);
",2,0,0,1,2,0,6,2,0,10,43,9,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,526,"                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
",2,3,0,5,11,0,8,0,0,15,65,9,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,529,"                            return f;
",2,0,0,0,0,0,0,0,0,2,9,11,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,539,"                        Double d = NumberUtils.createDouble(numeric);
",2,0,0,1,2,0,6,2,0,10,45,9,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,540,"                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
",2,3,0,5,11,0,8,0,0,15,65,9,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,541,"                            return d;
",2,0,0,0,0,0,0,0,0,2,9,11,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,547,"                        return createBigDecimal(numeric);
",0,0,0,1,2,0,4,0,0,4,33,10,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,559,"            if (expPos > -1 && expPos < str.length() - 1) {
",4,4,0,2,5,0,4,0,0,13,47,6,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,560,"                exp = str.substring(expPos + 1, str.length());
",4,1,0,2,4,0,8,0,0,14,46,8,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,562,"                exp = null;
",2,0,0,0,0,0,0,0,0,3,11,8,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,564,"            if (dec == null && exp == null) {
",4,3,0,1,3,0,0,0,0,7,33,6,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,567,"                    return createInteger(str);
",0,0,0,1,2,0,4,0,0,4,26,11,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,568,"                } catch (NumberFormatException nfe) {
",2,0,0,1,4,0,0,2,0,4,37,10,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,572,"                    return createLong(str);
",0,0,0,1,2,0,4,0,0,4,23,11,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,573,"                } catch (NumberFormatException nfe) {
",2,0,0,1,4,0,0,2,0,4,37,10,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,576,"                return createBigInteger(str);
",0,0,0,1,2,0,4,0,0,4,29,9,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,580,"                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
",2,1,0,2,4,0,8,0,0,11,55,9,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,582,"                    Float f = createFloat(str);
",2,0,0,1,2,0,4,2,0,8,27,10,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,583,"                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
",2,3,0,5,11,0,8,0,0,15,65,10,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,584,"                        return f;
",2,0,0,0,0,0,0,0,0,2,9,12,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,590,"                    Double d = createDouble(str);
",2,0,0,1,2,0,4,2,0,8,29,10,1.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,240,"            return true;
",0,0,0,0,0,0,0,0,0,1,12,6,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,453,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.50000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,456,"        if (StringUtils.isBlank(str)) {
",0,0,0,2,5,0,6,0,0,6,31,5,0.50000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,459,"        if (str.startsWith(""--"")) {
",0,0,0,2,5,0,4,0,0,5,27,5,0.50000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,466,"        if (str.startsWith(""0x"") || str.startsWith(""-0x"")) {
",0,1,0,3,7,0,8,0,0,11,52,4,0.50000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,469,"        char lastChar = str.charAt(str.length() - 1);
",2,1,0,2,4,0,8,0,0,11,45,5,0.50000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,473,"        int decPos = str.indexOf('.');
",2,0,0,1,2,0,4,0,0,7,30,5,0.50000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,474,"        int expPos = str.indexOf('e') + str.indexOf('E') + 1;
",2,1,0,2,4,0,8,0,0,13,53,5,0.50000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,476,"        if (decPos > -1) {
",2,1,0,1,3,0,0,0,0,4,18,4,0.50000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,488,"            if (expPos > -1) {
",2,1,0,1,3,0,0,0,0,4,18,6,0.50000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,494,"                mant = str;
",4,0,0,0,0,0,0,0,0,5,11,8,0.50000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,496,"            dec = null;
",2,0,0,0,0,0,0,0,0,3,11,6,0.50000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,498,"        if (!Character.isDigit(lastChar) && lastChar != '.') {
",2,2,0,2,5,0,6,0,0,12,54,4,0.50000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,499,"            if (expPos > -1 && expPos < str.length() - 1) {
",4,4,0,2,5,0,4,0,0,13,47,6,0.50000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,502,"                exp = null;
",2,0,0,0,0,0,0,0,0,3,11,8,0.50000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,505,"            String numeric = str.substring(0, str.length() - 1);
",2,1,0,2,4,0,8,2,0,13,52,6,0.50000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,506,"            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
",2,1,0,2,4,0,8,0,0,11,55,7,0.50000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,507,"            switch (lastChar) {
",2,0,0,1,3,0,0,0,0,2,19,6,0.50000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,510,"                    if (dec == null
",2,1,0,0,1,0,0,0,0,3,15,9,0.50000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,514,"                            return createLong(numeric);
",0,0,0,1,2,0,4,0,0,4,27,12,0.50000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,613,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.50000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,616,"        for (int i = str.length() - 1; i >= 0; i--) {
",6,2,0,2,5,0,4,0,0,13,45,4,0.50000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,617,"            if (str.charAt(i) != '0') {
",0,1,0,2,5,0,6,0,0,8,27,6,0.50000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,618,"                return false;
",0,0,0,0,0,0,0,0,0,1,13,8,0.50000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,635,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.50000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,638,"        return Float.valueOf(str);
",0,0,0,1,2,0,6,0,0,6,26,5,0.50000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,651,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.50000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,654,"        return Double.valueOf(str);
",0,0,0,1,2,0,6,0,0,6,27,5,0.50000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,668,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.50000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,672,"        return Integer.decode(str);
",0,0,0,1,2,0,6,0,0,6,27,5,0.50000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,701,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.50000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,704,"        return new BigInteger(str);
",2,0,0,1,2,0,0,2,0,4,27,5,0.50000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,717,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.50000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,721,"        if (StringUtils.isBlank(str)) {
",0,0,0,2,5,0,6,0,0,6,31,5,0.50000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,724,"        return new BigDecimal(str);
",2,0,0,1,2,0,0,2,0,4,27,5,0.50000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,685,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.33333,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,688,"        return Long.valueOf(str);
",0,0,0,1,2,0,6,0,0,6,25,5,0.33333,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1295,"        if (StringUtils.isEmpty(str)) {
",0,0,0,2,5,0,6,0,0,6,31,5,0.33333,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1298,"        for (int i = 0; i < str.length(); i++) {
",6,1,0,2,5,0,4,0,0,12,40,4,0.33333,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1299,"            if (!Character.isDigit(str.charAt(i))) {
",0,0,0,3,7,0,10,0,0,11,40,6,0.33333,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1303,"        return true;
",0,0,0,0,0,0,0,0,0,1,12,4,0.33333,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,199,"        return cs == null || cs.length() == 0;
",2,3,0,1,2,0,4,0,0,9,38,4,0.33333,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,239,"        if (cs == null || (strLen = cs.length()) == 0) {
",4,3,0,3,7,0,4,0,0,12,48,4,0.33333,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,242,"        for (int i = 0; i < strLen; i++) {
",8,1,0,1,3,0,0,0,0,10,34,4,0.33333,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,243,"            if ((Character.isWhitespace(cs.charAt(i)) == false)) {
",0,1,0,4,9,0,10,0,0,12,54,7,0.33333,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,244,"                return false;
",0,0,0,0,0,0,0,0,0,1,13,8,0.33333,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,163,"    private static final Pattern WHITESPACE_BLOCK = Pattern.compile(""\\s+"");
",2,0,0,1,2,3,4,2,0,12,72,2,0.25000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,41,"    public static final Long LONG_ZERO = new Long(0L);
",2,0,0,1,2,3,0,4,0,9,50,2,0.01786,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,43,"    public static final Long LONG_ONE = new Long(1L);
",2,0,0,1,2,3,0,4,0,9,49,2,0.01786,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,45,"    public static final Long LONG_MINUS_ONE = new Long(-1L);
",2,0,0,1,2,3,0,4,0,10,56,2,0.01786,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,47,"    public static final Integer INTEGER_ZERO = new Integer(0);
",2,0,0,1,2,3,0,4,0,9,58,2,0.01786,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,49,"    public static final Integer INTEGER_ONE = new Integer(1);
",2,0,0,1,2,3,0,4,0,9,57,2,0.01786,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,51,"    public static final Integer INTEGER_MINUS_ONE = new Integer(-1);
",2,0,0,1,2,3,0,4,0,10,64,2,0.01786,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,53,"    public static final Short SHORT_ZERO = new Short((short) 0);
",2,0,0,2,4,3,0,4,0,9,60,2,0.01786,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,55,"    public static final Short SHORT_ONE = new Short((short) 1);
",2,0,0,2,4,3,0,4,0,9,59,2,0.01786,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,57,"    public static final Short SHORT_MINUS_ONE = new Short((short) -1);
",2,0,0,2,4,3,0,4,0,10,66,2,0.01786,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,59,"    public static final Byte BYTE_ZERO = Byte.valueOf((byte) 0);
",2,0,0,2,4,3,4,2,0,11,60,2,0.01786,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,61,"    public static final Byte BYTE_ONE = Byte.valueOf((byte) 1);
",2,0,0,2,4,3,4,2,0,11,59,2,0.01786,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,63,"    public static final Byte BYTE_MINUS_ONE = Byte.valueOf((byte) -1);
",2,0,0,2,4,3,4,2,0,12,66,2,0.01786,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,65,"    public static final Double DOUBLE_ZERO = new Double(0.0d);
",2,0,0,1,2,3,0,4,0,9,58,2,0.01786,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,67,"    public static final Double DOUBLE_ONE = new Double(1.0d);
",2,0,0,1,2,3,0,4,0,9,57,2,0.01786,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,69,"    public static final Double DOUBLE_MINUS_ONE = new Double(-1.0d);
",2,0,0,1,2,3,0,4,0,10,64,2,0.01786,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,71,"    public static final Float FLOAT_ZERO = new Float(0.0f);
",2,0,0,1,2,3,0,4,0,9,55,2,0.01786,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,73,"    public static final Float FLOAT_ONE = new Float(1.0f);
",2,0,0,1,2,3,0,4,0,9,54,2,0.01786,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,75,"    public static final Float FLOAT_MINUS_ONE = new Float(-1.0f);
",2,0,0,1,2,3,0,4,0,10,61,2,0.01786,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,85,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,86,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,107,"        return toInt(str, 0);
",0,0,0,1,2,0,4,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,128,"        if(str == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,129,"            return defaultValue;
",2,0,0,0,0,0,0,0,0,2,20,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,132,"            return Integer.parseInt(str);
",0,0,0,1,2,0,6,0,0,6,29,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,133,"        } catch (NumberFormatException nfe) {
",2,0,0,1,4,0,0,2,0,4,37,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,134,"            return defaultValue;
",2,0,0,0,0,0,0,0,0,2,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,156,"        return toLong(str, 0L);
",0,0,0,1,2,0,4,0,0,4,23,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,177,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,178,"            return defaultValue;
",2,0,0,0,0,0,0,0,0,2,20,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,181,"            return Long.parseLong(str);
",0,0,0,1,2,0,6,0,0,6,27,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,182,"        } catch (NumberFormatException nfe) {
",2,0,0,1,4,0,0,2,0,4,37,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,183,"            return defaultValue;
",2,0,0,0,0,0,0,0,0,2,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,206,"        return toFloat(str, 0.0f);
",0,0,0,1,2,0,4,0,0,4,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,229,"      if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,230,"          return defaultValue;
",2,0,0,0,0,0,0,0,0,2,20,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,233,"          return Float.parseFloat(str);
",0,0,0,1,2,0,6,0,0,6,29,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,234,"      } catch (NumberFormatException nfe) {
",2,0,0,1,4,0,0,2,0,4,37,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,235,"          return defaultValue;
",2,0,0,0,0,0,0,0,0,2,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,258,"        return toDouble(str, 0.0d);
",0,0,0,1,2,0,4,0,0,4,27,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,281,"      if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,282,"          return defaultValue;
",2,0,0,0,0,0,0,0,0,2,20,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,285,"          return Double.parseDouble(str);
",0,0,0,1,2,0,6,0,0,6,31,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,286,"      } catch (NumberFormatException nfe) {
",2,0,0,1,4,0,0,2,0,4,37,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,287,"          return defaultValue;
",2,0,0,0,0,0,0,0,0,2,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,310,"        return toByte(str, (byte) 0);
",0,0,0,2,4,0,4,0,0,4,29,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,331,"        if(str == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,332,"            return defaultValue;
",2,0,0,0,0,0,0,0,0,2,20,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,335,"            return Byte.parseByte(str);
",0,0,0,1,2,0,6,0,0,6,27,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,336,"        } catch (NumberFormatException nfe) {
",2,0,0,1,4,0,0,2,0,4,37,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,337,"            return defaultValue;
",2,0,0,0,0,0,0,0,0,2,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,359,"        return toShort(str, (short) 0);
",0,0,0,2,4,0,4,0,0,4,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,380,"        if(str == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,381,"            return defaultValue;
",2,0,0,0,0,0,0,0,0,2,20,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,384,"            return Short.parseShort(str);
",0,0,0,1,2,0,6,0,0,6,29,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,385,"        } catch (NumberFormatException nfe) {
",2,0,0,1,4,0,0,2,0,4,37,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,386,"            return defaultValue;
",2,0,0,0,0,0,0,0,0,2,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,457,"            throw new NumberFormatException(""A blank string is not a valid number"");
",0,0,0,1,2,0,0,2,0,3,72,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,464,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,480,"                    throw new NumberFormatException(str + "" is not a valid number."");
",2,1,0,1,2,0,0,2,0,6,65,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,490,"                    throw new NumberFormatException(str + "" is not a valid number."");
",2,1,0,1,2,0,0,2,0,6,65,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,492,"                mant = str.substring(0, expPos);
",2,0,0,1,2,0,6,0,0,9,32,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,515,"                        } catch (NumberFormatException nfe) {
",2,0,0,1,4,0,0,2,0,4,37,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,518,"                        return createBigInteger(numeric);
",0,0,0,1,2,0,4,0,0,4,33,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,521,"                    throw new NumberFormatException(str + "" is not a valid number."");
",2,1,0,1,2,0,0,2,0,6,65,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,534,"                    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,532,"                    } catch (NumberFormatException nfe) {
",2,0,0,1,4,0,0,2,0,4,37,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,545,"                    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,543,"                    } catch (NumberFormatException nfe) {
",2,0,0,1,4,0,0,2,0,4,37,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,548,"                    } catch (NumberFormatException e) {
",2,0,0,1,4,0,0,2,0,4,35,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,553,"                    throw new NumberFormatException(str + "" is not a valid number."");
",2,1,0,1,2,0,0,2,0,6,65,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,588,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,586,"                } catch (NumberFormatException nfe) {
",2,0,0,1,4,0,0,2,0,4,37,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,591,"                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
",2,3,0,5,11,0,8,0,0,15,66,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,592,"                        return d;
",2,0,0,0,0,0,0,0,0,2,9,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,596,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,594,"                } catch (NumberFormatException nfe) {
",2,0,0,1,4,0,0,2,0,4,37,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,598,"                return createBigDecimal(str);
",0,0,0,1,2,0,4,0,0,4,29,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,614,"            return true;
",0,0,0,0,0,0,0,0,0,1,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,621,"        return str.length() > 0;
",0,1,0,1,2,0,4,0,0,5,24,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,636,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,652,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,669,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,686,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,702,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,718,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,722,"            throw new NumberFormatException(""A blank string is not a valid number"");
",0,0,0,1,2,0,0,2,0,3,72,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,739,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,740,"            throw new IllegalArgumentException(""The Array must not be null"");
",0,0,0,1,2,0,0,2,0,4,65,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,741,"        } else if (array.length == 0) {
",4,1,0,1,4,0,0,0,0,5,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,742,"            throw new IllegalArgumentException(""Array cannot be empty."");
",0,0,0,1,2,0,0,2,0,3,61,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,746,"        long min = array[0];
",2,0,1,1,2,0,0,0,0,4,20,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,747,"        for (int i = 1; i < array.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,748,"            if (array[i] < min) {
",2,1,1,2,5,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,749,"                min = array[i];
",2,0,1,1,2,0,0,0,0,7,15,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,753,"        return min;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,766,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,767,"            throw new IllegalArgumentException(""The Array must not be null"");
",0,0,0,1,2,0,0,2,0,4,65,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,768,"        } else if (array.length == 0) {
",4,1,0,1,4,0,0,0,0,5,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,769,"            throw new IllegalArgumentException(""Array cannot be empty."");
",0,0,0,1,2,0,0,2,0,3,61,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,773,"        int min = array[0];
",2,0,1,1,2,0,0,0,0,4,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,774,"        for (int j = 1; j < array.length; j++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,775,"            if (array[j] < min) {
",2,1,1,2,5,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,776,"                min = array[j];
",2,0,1,1,2,0,0,0,0,7,15,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,780,"        return min;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,793,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,794,"            throw new IllegalArgumentException(""The Array must not be null"");
",0,0,0,1,2,0,0,2,0,4,65,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,795,"        } else if (array.length == 0) {
",4,1,0,1,4,0,0,0,0,5,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,796,"            throw new IllegalArgumentException(""Array cannot be empty."");
",0,0,0,1,2,0,0,2,0,3,61,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,800,"        short min = array[0];
",2,0,1,1,2,0,0,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,801,"        for (int i = 1; i < array.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,802,"            if (array[i] < min) {
",2,1,1,2,5,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,803,"                min = array[i];
",2,0,1,1,2,0,0,0,0,7,15,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,807,"        return min;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,820,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,821,"            throw new IllegalArgumentException(""The Array must not be null"");
",0,0,0,1,2,0,0,2,0,4,65,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,822,"        } else if (array.length == 0) {
",4,1,0,1,4,0,0,0,0,5,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,823,"            throw new IllegalArgumentException(""Array cannot be empty."");
",0,0,0,1,2,0,0,2,0,3,61,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,827,"        byte min = array[0];
",2,0,1,1,2,0,0,0,0,4,20,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,828,"        for (int i = 1; i < array.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,829,"            if (array[i] < min) {
",2,1,1,2,5,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,830,"                min = array[i];
",2,0,1,1,2,0,0,0,0,7,15,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,834,"        return min;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,848,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,849,"            throw new IllegalArgumentException(""The Array must not be null"");
",0,0,0,1,2,0,0,2,0,4,65,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,850,"        } else if (array.length == 0) {
",4,1,0,1,4,0,0,0,0,5,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,851,"            throw new IllegalArgumentException(""Array cannot be empty."");
",0,0,0,1,2,0,0,2,0,3,61,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,855,"        double min = array[0];
",2,0,1,1,2,0,0,0,0,4,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,856,"        for (int i = 1; i < array.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,857,"            if (Double.isNaN(array[i])) {
",0,0,1,3,7,0,4,0,0,8,29,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,858,"                return Double.NaN;
",4,0,0,0,0,0,0,0,0,4,18,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,860,"            if (array[i] < min) {
",2,1,1,2,5,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,861,"                min = array[i];
",2,0,1,1,2,0,0,0,0,7,15,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,865,"        return min;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,879,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,880,"            throw new IllegalArgumentException(""The Array must not be null"");
",0,0,0,1,2,0,0,2,0,4,65,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,881,"        } else if (array.length == 0) {
",4,1,0,1,4,0,0,0,0,5,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,882,"            throw new IllegalArgumentException(""Array cannot be empty."");
",0,0,0,1,2,0,0,2,0,3,61,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,886,"        float min = array[0];
",2,0,1,1,2,0,0,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,887,"        for (int i = 1; i < array.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,888,"            if (Float.isNaN(array[i])) {
",0,0,1,3,7,0,4,0,0,8,28,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,889,"                return Float.NaN;
",4,0,0,0,0,0,0,0,0,4,17,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,891,"            if (array[i] < min) {
",2,1,1,2,5,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,892,"                min = array[i];
",2,0,1,1,2,0,0,0,0,7,15,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,896,"        return min;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,911,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,912,"            throw new IllegalArgumentException(""The Array must not be null"");
",0,0,0,1,2,0,0,2,0,4,65,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,913,"        } else if (array.length == 0) {
",4,1,0,1,4,0,0,0,0,5,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,914,"            throw new IllegalArgumentException(""Array cannot be empty."");
",0,0,0,1,2,0,0,2,0,3,61,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,918,"        long max = array[0];
",2,0,1,1,2,0,0,0,0,4,20,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,919,"        for (int j = 1; j < array.length; j++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,920,"            if (array[j] > max) {
",2,1,1,2,5,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,921,"                max = array[j];
",2,0,1,1,2,0,0,0,0,7,15,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,925,"        return max;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,938,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,939,"            throw new IllegalArgumentException(""The Array must not be null"");
",0,0,0,1,2,0,0,2,0,4,65,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,940,"        } else if (array.length == 0) {
",4,1,0,1,4,0,0,0,0,5,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,941,"            throw new IllegalArgumentException(""Array cannot be empty."");
",0,0,0,1,2,0,0,2,0,3,61,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,945,"        int max = array[0];
",2,0,1,1,2,0,0,0,0,4,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,946,"        for (int j = 1; j < array.length; j++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,947,"            if (array[j] > max) {
",2,1,1,2,5,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,948,"                max = array[j];
",2,0,1,1,2,0,0,0,0,7,15,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,952,"        return max;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,965,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,966,"            throw new IllegalArgumentException(""The Array must not be null"");
",0,0,0,1,2,0,0,2,0,4,65,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,967,"        } else if (array.length == 0) {
",4,1,0,1,4,0,0,0,0,5,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,968,"            throw new IllegalArgumentException(""Array cannot be empty."");
",0,0,0,1,2,0,0,2,0,3,61,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,972,"        short max = array[0];
",2,0,1,1,2,0,0,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,973,"        for (int i = 1; i < array.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,974,"            if (array[i] > max) {
",2,1,1,2,5,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,975,"                max = array[i];
",2,0,1,1,2,0,0,0,0,7,15,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,979,"        return max;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,992,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,993,"            throw new IllegalArgumentException(""The Array must not be null"");
",0,0,0,1,2,0,0,2,0,4,65,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,994,"        } else if (array.length == 0) {
",4,1,0,1,4,0,0,0,0,5,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,995,"            throw new IllegalArgumentException(""Array cannot be empty."");
",0,0,0,1,2,0,0,2,0,3,61,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,999,"        byte max = array[0];
",2,0,1,1,2,0,0,0,0,4,20,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1000,"        for (int i = 1; i < array.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1001,"            if (array[i] > max) {
",2,1,1,2,5,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1002,"                max = array[i];
",2,0,1,1,2,0,0,0,0,7,15,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1006,"        return max;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1020,"        if (array== null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1021,"            throw new IllegalArgumentException(""The Array must not be null"");
",0,0,0,1,2,0,0,2,0,4,65,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1022,"        } else if (array.length == 0) {
",4,1,0,1,4,0,0,0,0,5,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1023,"            throw new IllegalArgumentException(""Array cannot be empty."");
",0,0,0,1,2,0,0,2,0,3,61,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1027,"        double max = array[0];
",2,0,1,1,2,0,0,0,0,4,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1028,"        for (int j = 1; j < array.length; j++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1029,"            if (Double.isNaN(array[j])) {
",0,0,1,3,7,0,4,0,0,8,29,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1030,"                return Double.NaN;
",4,0,0,0,0,0,0,0,0,4,18,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1032,"            if (array[j] > max) {
",2,1,1,2,5,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1033,"                max = array[j];
",2,0,1,1,2,0,0,0,0,7,15,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1037,"        return max;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1051,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1052,"            throw new IllegalArgumentException(""The Array must not be null"");
",0,0,0,1,2,0,0,2,0,4,65,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1053,"        } else if (array.length == 0) {
",4,1,0,1,4,0,0,0,0,5,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1054,"            throw new IllegalArgumentException(""Array cannot be empty."");
",0,0,0,1,2,0,0,2,0,3,61,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1058,"        float max = array[0];
",2,0,1,1,2,0,0,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1059,"        for (int j = 1; j < array.length; j++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1060,"            if (Float.isNaN(array[j])) {
",0,0,1,3,7,0,4,0,0,8,28,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1061,"                return Float.NaN;
",4,0,0,0,0,0,0,0,0,4,17,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1063,"            if (array[j] > max) {
",2,1,1,2,5,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1064,"                max = array[j];
",2,0,1,1,2,0,0,0,0,7,15,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1068,"        return max;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1082,"        if (b < a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1083,"            a = b;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1085,"        if (c < a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1086,"            a = c;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1088,"        return a;
",2,0,0,0,0,0,0,0,0,2,9,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1100,"        if (b < a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1101,"            a = b;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1103,"        if (c < a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1104,"            a = c;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1106,"        return a;
",2,0,0,0,0,0,0,0,0,2,9,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1118,"        if (b < a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1119,"            a = b;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1121,"        if (c < a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1122,"            a = c;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1124,"        return a;
",2,0,0,0,0,0,0,0,0,2,9,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1136,"        if (b < a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1137,"            a = b;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1139,"        if (c < a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1140,"            a = c;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1142,"        return a;
",2,0,0,0,0,0,0,0,0,2,9,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1158,"        return Math.min(Math.min(a, b), c);
",0,0,0,2,4,0,14,0,0,14,35,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1174,"        return Math.min(Math.min(a, b), c);
",0,0,0,2,4,0,14,0,0,14,35,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1188,"        if (b > a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1189,"            a = b;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1191,"        if (c > a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1192,"            a = c;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1194,"        return a;
",2,0,0,0,0,0,0,0,0,2,9,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1206,"        if (b > a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1207,"            a = b;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1209,"        if (c > a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1210,"            a = c;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1212,"        return a;
",2,0,0,0,0,0,0,0,0,2,9,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1224,"        if (b > a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1225,"            a = b;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1227,"        if (c > a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1228,"            a = c;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1230,"        return a;
",2,0,0,0,0,0,0,0,0,2,9,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1242,"        if (b > a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1243,"            a = b;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1245,"        if (c > a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1246,"            a = c;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1248,"        return a;
",2,0,0,0,0,0,0,0,0,2,9,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1264,"        return Math.max(Math.max(a, b), c);
",0,0,0,2,4,0,14,0,0,14,35,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1280,"        return Math.max(Math.max(a, b), c);
",0,0,0,2,4,0,14,0,0,14,35,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1296,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1300,"                return false;
",0,0,0,0,0,0,0,0,0,1,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1320,"        if (StringUtils.isEmpty(str)) {
",0,0,0,2,5,0,6,0,0,6,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1321,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1323,"        char[] chars = str.toCharArray();
",2,0,0,2,4,0,4,0,0,6,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1324,"        int sz = chars.length;
",6,0,0,0,0,0,0,0,0,6,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1325,"        boolean hasExp = false;
",2,0,0,0,0,0,0,0,0,3,23,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1326,"        boolean hasDecPoint = false;
",2,0,0,0,0,0,0,0,0,3,28,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1327,"        boolean allowSigns = false;
",2,0,0,0,0,0,0,0,0,3,27,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1328,"        boolean foundDigit = false;
",2,0,0,0,0,0,0,0,0,3,27,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1330,"        int start = (chars[0] == '-') ? 1 : 0;
",2,1,1,2,4,0,0,0,0,6,38,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1331,"        if (sz > start + 1) {
",4,2,0,1,3,0,0,0,0,6,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1332,"            if (chars[start] == '0' && chars[start + 1] == 'x') {
",2,4,1,3,7,0,0,0,0,14,53,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1333,"                int i = start + 2;
",4,1,0,0,0,0,0,0,0,5,18,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1334,"                if (i == sz) {
",4,1,0,1,3,0,0,0,0,5,14,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1335,"                    return false; // str == ""0x""
",0,0,0,0,0,0,0,0,0,1,28,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1338,"                for (; i < chars.length; i++) {
",8,1,0,1,3,0,0,0,0,10,31,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1339,"                    if ((chars[i] < '0' || chars[i] > '9')
",0,3,1,3,7,0,0,0,0,13,38,13,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1342,"                        return false;
",0,0,0,0,0,0,0,0,0,1,13,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1345,"                return true;
",0,0,0,0,0,0,0,0,0,1,12,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1348,"        sz--; // don't want to loop to the last char, check it afterwords
",2,0,0,0,0,0,0,0,0,3,65,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1350,"        int i = start;
",4,0,0,0,0,0,0,0,0,4,14,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1353,"        while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {
",12,6,0,2,5,0,0,0,0,19,61,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1354,"            if (chars[i] >= '0' && chars[i] <= '9') {
",0,3,1,3,7,0,0,0,0,13,41,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1355,"                foundDigit = true;
",2,0,0,0,0,0,0,0,0,4,18,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1356,"                allowSigns = false;
",2,0,0,0,0,0,0,0,0,4,19,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1358,"            } else if (chars[i] == '.') {
",0,1,1,2,6,0,0,0,0,6,29,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1359,"                if (hasDecPoint || hasExp) {
",4,1,0,1,3,0,0,0,0,5,28,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1361,"                    return false;
",0,0,0,0,0,0,0,0,0,1,13,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1363,"                hasDecPoint = true;
",2,0,0,0,0,0,0,0,0,4,19,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1364,"            } else if (chars[i] == 'e' || chars[i] == 'E') {
",0,3,1,3,8,0,0,0,0,13,48,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1366,"                if (hasExp) {
",2,0,0,1,3,0,0,0,0,2,13,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1368,"                    return false;
",0,0,0,0,0,0,0,0,0,1,13,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1370,"                if (!foundDigit) {
",2,0,0,1,3,0,0,0,0,3,18,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1371,"                    return false;
",0,0,0,0,0,0,0,0,0,1,13,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1373,"                hasExp = true;
",2,0,0,0,0,0,0,0,0,4,14,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1374,"                allowSigns = true;
",2,0,0,0,0,0,0,0,0,4,18,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1375,"            } else if (chars[i] == '+' || chars[i] == '-') {
",0,3,1,3,8,0,0,0,0,13,48,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1376,"                if (!allowSigns) {
",2,0,0,1,3,0,0,0,0,3,18,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1377,"                    return false;
",0,0,0,0,0,0,0,0,0,1,13,13,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1379,"                allowSigns = false;
",2,0,0,0,0,0,0,0,0,4,19,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1380,"                foundDigit = false; // we need a digit after the E
",2,0,0,0,0,0,0,0,0,4,50,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1382,"                return false;
",0,0,0,0,0,0,0,0,0,1,13,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1384,"            i++;
",2,0,0,0,0,0,0,0,0,3,4,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1386,"        if (i < chars.length) {
",6,1,0,1,3,0,0,0,0,7,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1387,"            if (chars[i] >= '0' && chars[i] <= '9') {
",0,3,1,3,7,0,0,0,0,13,41,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1389,"                return true;
",0,0,0,0,0,0,0,0,0,1,12,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1391,"            if (chars[i] == 'e' || chars[i] == 'E') {
",0,3,1,3,7,0,0,0,0,13,41,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1393,"                return false;
",0,0,0,0,0,0,0,0,0,1,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1395,"            if (chars[i] == '.') {
",0,1,1,2,5,0,0,0,0,6,22,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1396,"                if (hasDecPoint || hasExp) {
",4,1,0,1,3,0,0,0,0,5,28,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1398,"                    return false;
",0,0,0,0,0,0,0,0,0,1,13,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1401,"                return foundDigit;
",2,0,0,0,0,0,0,0,0,2,18,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1403,"            if (!allowSigns
",2,0,0,0,1,0,0,0,0,3,15,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1408,"                return foundDigit;
",2,0,0,0,0,0,0,0,0,2,18,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1410,"            if (chars[i] == 'l'
",0,1,1,1,3,0,0,0,0,6,19,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1413,"                return foundDigit && !hasExp;
",4,1,0,0,0,0,0,0,0,6,29,8,0.00000,1
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1416,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,24,1420,"        return !allowSigns && foundDigit;
",4,1,0,0,0,0,0,0,0,6,33,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,174,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,175,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,218,"        return !StringUtils.isEmpty(cs);
",0,0,0,1,2,0,6,0,0,7,32,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,247,"        return true;
",0,0,0,0,0,0,0,0,0,1,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,268,"        return !StringUtils.isBlank(cs);
",0,0,0,1,2,0,6,0,0,7,32,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,297,"        return str == null ? null : str.trim();
",2,1,0,1,2,0,4,0,0,7,39,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,323,"        String ts = trim(str);
",2,0,0,1,2,0,4,2,0,8,22,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,324,"        return isEmpty(ts) ? null : ts;
",2,0,0,1,2,0,4,0,0,7,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,349,"        return str == null ? EMPTY : str.trim();
",4,1,0,1,2,0,4,0,0,9,40,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,377,"        return strip(str, null);
",0,0,0,1,2,0,4,0,0,5,24,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,404,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,405,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,407,"        str = strip(str, null);
",2,0,0,1,2,0,4,0,0,8,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,408,"        return str.length() == 0 ? null : str;
",2,1,0,1,2,0,4,0,0,7,38,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,434,"        return str == null ? EMPTY : strip(str, null);
",4,1,0,1,2,0,4,0,0,10,46,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,464,"        if (isEmpty(str)) {
",0,0,0,2,5,0,4,0,0,4,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,465,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,467,"        str = stripStart(str, stripChars);
",2,0,0,1,2,0,6,0,0,9,34,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,468,"        return stripEnd(str, stripChars);
",0,0,0,1,2,0,6,0,0,6,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,497,"        if (str == null || (strLen = str.length()) == 0) {
",4,3,0,3,7,0,4,0,0,12,50,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,498,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,500,"        int start = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,501,"        if (stripChars == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,502,"            while ((start != strLen) && Character.isWhitespace(str.charAt(start))) {
",4,2,0,4,9,0,10,0,0,16,72,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,503,"                start++;
",2,0,0,0,0,0,0,0,0,3,8,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,505,"        } else if (stripChars.length() == 0) {
",0,1,0,2,6,0,4,0,0,5,38,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,506,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,508,"            while ((start != strLen) && (stripChars.indexOf(str.charAt(start)) != INDEX_NOT_FOUND)) {
",6,3,0,5,11,0,10,0,0,19,89,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,509,"                start++;
",2,0,0,0,0,0,0,0,0,3,8,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,512,"        return str.substring(start);
",0,0,0,1,2,0,6,0,0,6,28,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,542,"        if (str == null || (end = str.length()) == 0) {
",4,3,0,3,7,0,4,0,0,12,47,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,543,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,546,"        if (stripChars == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,547,"            while ((end != 0) && Character.isWhitespace(str.charAt(end - 1))) {
",4,3,0,4,9,0,8,0,0,15,67,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,548,"                end--;
",2,0,0,0,0,0,0,0,0,3,6,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,550,"        } else if (stripChars.length() == 0) {
",0,1,0,2,6,0,4,0,0,5,38,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,551,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,553,"            while ((end != 0) && (stripChars.indexOf(str.charAt(end - 1)) != INDEX_NOT_FOUND)) {
",6,4,0,5,11,0,8,0,0,18,84,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,554,"                end--;
",2,0,0,0,0,0,0,0,0,3,6,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,557,"        return str.substring(0, end);
",0,0,0,1,2,0,6,0,0,6,29,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,582,"        return stripAll(strs, null);
",0,0,0,1,2,0,4,0,0,5,28,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,612,"        if (strs == null || (strsLen = strs.length) == 0) {
",8,3,0,2,5,0,0,0,0,12,51,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,613,"            return strs;
",2,0,0,0,0,0,0,0,0,2,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,615,"        String[] newArr = new String[strsLen];
",2,0,1,2,4,0,0,4,0,8,38,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,616,"        for (int i = 0; i < strsLen; i++) {
",8,1,0,1,3,0,0,0,0,10,35,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,617,"            newArr[i] = strip(strs[i], stripChars);
",0,0,1,3,6,0,4,0,0,13,39,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,619,"        return newArr;
",2,0,0,0,0,0,0,0,0,2,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,639,"        if(input == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,640,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,642,"        if(SystemUtils.isJavaVersionAtLeast(1.6f)) {
",0,0,0,2,5,0,4,0,0,4,44,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,649,"                Class<?> normalizerFormClass = ClassUtils.getClass(""java.text.Normalizer$Form"", false);
",2,0,0,1,2,0,4,2,0,10,87,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,652,"                Class<?> normalizerClass = ClassUtils.getClass(""java.text.Normalizer"", false);
",2,0,0,1,2,0,4,2,0,10,78,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,655,"                java.lang.reflect.Method method = normalizerClass.getMethod(""normalize"", CharSequence.class, normalizerFormClass );
",10,0,0,1,2,0,6,2,0,19,115,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,658,"                java.lang.reflect.Field nfd = normalizerFormClass.getField(""NFD"");
",10,0,0,1,2,0,4,0,0,15,66,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,661,"                String decomposed = (String) method.invoke( null, input, nfd.get(null) );
",2,0,0,3,6,0,10,4,0,16,73,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,664,"                java.util.regex.Pattern accentPattern = java.util.regex.Pattern.compile(""\\p{InCombiningDiacriticalMarks}+"");
",18,0,0,2,4,0,2,0,0,21,109,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,665,"                return accentPattern.matcher(decomposed).replaceAll("""");
",0,0,0,2,4,0,8,0,0,9,56,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,666,"            } catch(ClassNotFoundException cnfe) {
",2,0,0,1,4,0,0,2,0,4,38,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,667,"                throw new RuntimeException(""ClassNotFoundException occurred during 1.6 backcompat code"", cnfe);
",2,0,0,1,2,0,0,2,0,5,95,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,668,"            } catch(NoSuchMethodException nsme) {
",2,0,0,1,4,0,0,2,0,4,37,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,669,"                throw new RuntimeException(""NoSuchMethodException occurred during 1.6 backcompat code"", nsme);
",2,0,0,1,2,0,0,2,0,5,94,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,670,"            } catch(NoSuchFieldException nsfe) {
",2,0,0,1,4,0,0,2,0,4,36,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,671,"                throw new RuntimeException(""NoSuchFieldException occurred during 1.6 backcompat code"", nsfe);
",2,0,0,1,2,0,0,2,0,5,93,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,672,"            } catch(IllegalAccessException iae) {
",2,0,0,1,4,0,0,2,0,4,37,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,673,"                throw new RuntimeException(""IllegalAccessException occurred during 1.6 backcompat code"", iae);
",2,0,0,1,2,0,0,2,0,5,94,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,674,"            } catch(IllegalArgumentException iae) {
",2,0,0,1,4,0,0,2,0,4,39,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,675,"                throw new RuntimeException(""IllegalArgumentException occurred during 1.6 backcompat code"", iae);
",2,0,0,1,2,0,0,2,0,5,96,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,676,"            } catch(java.lang.reflect.InvocationTargetException ite) {
",10,0,0,1,4,0,0,0,0,10,58,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,677,"                throw new RuntimeException(""InvocationTargetException occurred during 1.6 backcompat code"", ite);
",2,0,0,1,2,0,0,2,0,5,97,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,678,"            } catch(SecurityException se) {
",2,0,0,1,4,0,0,2,0,4,31,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,679,"                throw new RuntimeException(""SecurityException occurred during 1.6 backcompat code"", se);
",2,0,0,1,2,0,0,2,0,5,88,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,682,"            throw new UnsupportedOperationException(""The stripAccents(String) method is not supported until Java 1.6"");
",0,0,0,2,4,0,0,2,0,3,107,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,710,"        return cs1 == null ? cs2 == null : cs1.equals(cs2);
",4,2,0,1,2,0,6,0,0,12,51,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,735,"        return str1 == null ? str2 == null : str1.equalsIgnoreCase(str2);
",4,2,0,1,2,0,6,0,0,12,65,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,760,"        if (isEmpty(str)) {
",0,0,0,2,5,0,4,0,0,4,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,761,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,0,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,763,"        return str.indexOf(searchChar);
",0,0,0,1,2,0,6,0,0,6,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,792,"        if (isEmpty(str)) {
",0,0,0,2,5,0,4,0,0,4,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,793,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,0,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,795,"        return str.indexOf(searchChar, startPos);
",0,0,0,1,2,0,8,0,0,8,41,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,822,"        if (str == null || searchStr == null) {
",4,3,0,1,3,0,0,0,0,7,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,823,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,0,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,825,"        return str.indexOf(searchStr);
",0,0,0,1,2,0,6,0,0,6,30,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,861,"        if (str == null || searchStr == null) {
",4,3,0,1,3,0,0,0,0,7,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,862,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,0,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,864,"        return str.indexOf(searchStr, startPos);
",0,0,0,1,2,0,8,0,0,8,40,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,901,"        return ordinalIndexOf(str, searchStr, ordinal, false);
",0,0,0,1,2,0,8,0,0,9,54,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,919,"        if (str == null || searchStr == null || ordinal <= 0) {
",6,5,0,1,3,0,0,0,0,11,55,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,920,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,0,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,922,"        if (searchStr.length() == 0) {
",0,1,0,2,5,0,4,0,0,5,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,923,"            return lastIndex ? str.length() : 0;
",2,0,0,1,2,0,4,0,0,6,36,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,925,"        int found = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,926,"        int index = lastIndex ? str.length() : INDEX_NOT_FOUND;
",6,0,0,1,2,0,4,0,0,10,55,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,928,"            if(lastIndex) {
",2,0,0,1,3,0,0,0,0,2,15,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,929,"                index = str.lastIndexOf(searchStr, index - 1);
",4,1,0,1,2,0,6,0,0,12,46,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,931,"                index = str.indexOf(searchStr, index + 1);
",4,1,0,1,2,0,6,0,0,12,42,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,933,"            if (index < 0) {
",2,1,0,1,3,0,0,0,0,3,16,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,934,"                return index;
",2,0,0,0,0,0,0,0,0,2,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,936,"            found++;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,937,"        } while (found < ordinal);
",4,1,0,1,3,0,0,0,0,5,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,938,"        return index;
",2,0,0,0,0,0,0,0,0,2,13,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,966,"        return indexOfIgnoreCase(str, searchStr, 0);
",0,0,0,1,2,0,6,0,0,6,44,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1001,"        if (str == null || searchStr == null) {
",4,3,0,1,3,0,0,0,0,7,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1002,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,0,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1004,"        if (startPos < 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1005,"            startPos = 0;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1007,"        int endLimit = (str.length() - searchStr.length()) + 1;
",2,2,0,3,6,0,8,0,0,12,55,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1008,"        if (startPos > endLimit) {
",4,1,0,1,3,0,0,0,0,5,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1009,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,0,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1011,"        if (searchStr.length() == 0) {
",0,1,0,2,5,0,4,0,0,5,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1012,"            return startPos;
",2,0,0,0,0,0,0,0,0,2,16,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1014,"        for (int i = startPos; i < endLimit; i++) {
",10,1,0,1,3,0,0,0,0,12,43,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1015,"            if (str.regionMatches(true, i, searchStr, 0, searchStr.length())) {
",0,0,0,3,7,0,12,0,0,13,67,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1016,"                return i;
",2,0,0,0,0,0,0,0,0,2,9,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1019,"        return INDEX_NOT_FOUND;
",2,0,0,0,0,0,0,0,0,2,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1044,"        if (isEmpty(str)) {
",0,0,0,2,5,0,4,0,0,4,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1045,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,0,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1047,"        return str.lastIndexOf(searchChar);
",0,0,0,1,2,0,6,0,0,6,35,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1078,"        if (isEmpty(str)) {
",0,0,0,2,5,0,4,0,0,4,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1079,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,0,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1081,"        return str.lastIndexOf(searchChar, startPos);
",0,0,0,1,2,0,8,0,0,8,45,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1107,"        if (str == null || searchStr == null) {
",4,3,0,1,3,0,0,0,0,7,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1108,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,0,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1110,"        return str.lastIndexOf(searchStr);
",0,0,0,1,2,0,6,0,0,6,34,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1147,"        return ordinalIndexOf(str, searchStr, ordinal, true);
",0,0,0,1,2,0,8,0,0,9,53,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1179,"        if (str == null || searchStr == null) {
",4,3,0,1,3,0,0,0,0,7,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1180,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,0,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1182,"        return str.lastIndexOf(searchStr, startPos);
",0,0,0,1,2,0,8,0,0,8,44,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1208,"        if (str == null || searchStr == null) {
",4,3,0,1,3,0,0,0,0,7,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1209,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,0,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1211,"        return lastIndexOfIgnoreCase(str, searchStr, str.length());
",0,0,0,2,4,0,10,0,0,10,59,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1243,"        if (str == null || searchStr == null) {
",4,3,0,1,3,0,0,0,0,7,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1244,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,0,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1246,"        if (startPos > (str.length() - searchStr.length())) {
",2,2,0,4,9,0,8,0,0,12,53,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1247,"            startPos = str.length() - searchStr.length();
",2,1,0,2,4,0,8,0,0,12,45,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1249,"        if (startPos < 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1250,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,0,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1252,"        if (searchStr.length() == 0) {
",0,1,0,2,5,0,4,0,0,5,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1253,"            return startPos;
",2,0,0,0,0,0,0,0,0,2,16,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1256,"        for (int i = startPos; i >= 0; i--) {
",8,1,0,1,3,0,0,0,0,10,37,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1257,"            if (str.regionMatches(true, i, searchStr, 0, searchStr.length())) {
",0,0,0,3,7,0,12,0,0,13,67,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1258,"                return i;
",2,0,0,0,0,0,0,0,0,2,9,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1261,"        return INDEX_NOT_FOUND;
",2,0,0,0,0,0,0,0,0,2,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1286,"        if (isEmpty(str)) {
",0,0,0,2,5,0,4,0,0,4,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1287,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1289,"        return str.indexOf(searchChar) >= 0;
",0,1,0,1,2,0,6,0,0,7,36,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1314,"        if (str == null || searchStr == null) {
",4,3,0,1,3,0,0,0,0,7,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1315,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1317,"        return str.indexOf(searchStr) >= 0;
",0,1,0,1,2,0,6,0,0,7,35,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1344,"        if (str == null || searchStr == null) {
",4,3,0,1,3,0,0,0,0,7,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1345,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1347,"        int len = searchStr.length();
",2,0,0,1,2,0,4,0,0,6,29,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1348,"        int max = str.length() - len;
",4,1,0,1,2,0,4,0,0,9,29,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1349,"        for (int i = 0; i <= max; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1350,"            if (str.regionMatches(true, i, searchStr, 0, len)) {
",0,0,0,2,5,0,10,0,0,11,52,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1351,"                return true;
",0,0,0,0,0,0,0,0,0,1,12,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1354,"        return false;
",0,0,0,0,0,0,0,0,0,1,13,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1367,"        if (isEmpty(str)) {
",0,0,0,2,5,0,4,0,0,4,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1368,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1370,"        int strLen = str.length();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1371,"        for (int i = 0; i < strLen; i++) {
",8,1,0,1,3,0,0,0,0,10,34,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1372,"            if (Character.isWhitespace(str.charAt(i))) {
",0,0,0,3,7,0,10,0,0,10,44,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1373,"                return true;
",0,0,0,0,0,0,0,0,0,1,12,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1376,"        return false;
",0,0,0,0,0,0,0,0,0,1,13,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1405,"        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
",0,1,0,3,7,0,10,0,0,11,53,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1406,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,0,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1408,"        int csLen = cs.length();
",2,0,0,1,2,0,4,0,0,6,24,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1409,"        int csLast = csLen - 1;
",4,1,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1410,"        int searchLen = searchChars.length;
",6,0,0,0,0,0,0,0,0,6,35,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1411,"        int searchLast = searchLen - 1;
",4,1,0,0,0,0,0,0,0,5,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1412,"        for (int i = 0; i < csLen; i++) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1413,"            char ch = cs.charAt(i);
",2,0,0,1,2,0,6,0,0,8,23,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1414,"            for (int j = 0; j < searchLen; j++) {
",8,1,0,1,3,0,0,0,0,10,37,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1415,"                if (searchChars[j] == ch) {
",2,1,1,2,5,0,0,0,0,7,27,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1416,"                    if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {
",8,4,0,2,5,0,6,0,0,18,68,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1418,"                        if (searchChars[j + 1] == cs.charAt(i + 1)) {
",4,3,1,3,7,0,4,0,0,13,45,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1419,"                            return i;
",2,0,0,0,0,0,0,0,0,2,9,14,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1422,"                        return i;
",2,0,0,0,0,0,0,0,0,2,9,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1427,"        return INDEX_NOT_FOUND;
",2,0,0,0,0,0,0,0,0,2,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1454,"        if (isEmpty(cs) || isEmpty(searchChars)) {
",0,1,0,3,7,0,8,0,0,9,42,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1455,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,0,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1457,"        return indexOfAny(cs, searchChars.toCharArray());
",0,0,0,2,4,0,8,0,0,8,49,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1486,"        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
",0,1,0,3,7,0,10,0,0,11,53,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1487,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1489,"        int csLength = cs.length();
",2,0,0,1,2,0,4,0,0,6,27,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1490,"        int searchLength = searchChars.length;
",6,0,0,0,0,0,0,0,0,6,38,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1491,"        int csLast = csLength - 1;
",4,1,0,0,0,0,0,0,0,5,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1492,"        int searchLast = searchLength - 1;
",4,1,0,0,0,0,0,0,0,5,34,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1493,"        for (int i = 0; i < csLength; i++) {
",8,1,0,1,3,0,0,0,0,10,36,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1494,"            char ch = cs.charAt(i);
",2,0,0,1,2,0,6,0,0,8,23,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1495,"            for (int j = 0; j < searchLength; j++) {
",8,1,0,1,3,0,0,0,0,10,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1496,"                if (searchChars[j] == ch) {
",2,1,1,2,5,0,0,0,0,7,27,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1497,"                    if (Character.isHighSurrogate(ch)) {
",0,0,0,2,5,0,6,0,0,6,36,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1498,"                        if (j == searchLast) {
",4,1,0,1,3,0,0,0,0,5,22,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1500,"                            return true;
",0,0,0,0,0,0,0,0,0,1,12,14,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1502,"                        if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
",8,5,1,3,7,0,4,0,0,19,59,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1503,"                            return true;
",0,0,0,0,0,0,0,0,0,1,12,14,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1507,"                        return true;
",0,0,0,0,0,0,0,0,0,1,12,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1512,"        return false;
",0,0,0,0,0,0,0,0,0,1,13,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1543,"        if (searchChars == null) {
",2,1,0,1,3,0,0,0,0,3,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1544,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1546,"        return containsAny(cs, searchChars.toCharArray());
",0,0,0,2,4,0,8,0,0,8,50,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1576,"        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
",0,1,0,3,7,0,10,0,0,11,53,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1577,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,0,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1579,"        int csLen = cs.length();
",2,0,0,1,2,0,4,0,0,6,24,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1580,"        int csLast = csLen - 1;
",4,1,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1581,"        int searchLen = searchChars.length;
",6,0,0,0,0,0,0,0,0,6,35,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1582,"        int searchLast = searchLen - 1;
",4,1,0,0,0,0,0,0,0,5,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1584,"        for (int i = 0; i < csLen; i++) {
",8,1,0,1,3,0,0,0,0,10,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1585,"            char ch = cs.charAt(i);
",2,0,0,1,2,0,6,0,0,8,23,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1586,"            for (int j = 0; j < searchLen; j++) {
",8,1,0,1,3,0,0,0,0,10,37,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1587,"                if (searchChars[j] == ch) {
",2,1,1,2,5,0,0,0,0,7,27,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1588,"                    if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {
",8,4,0,2,5,0,6,0,0,18,68,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1589,"                        if (searchChars[j + 1] == cs.charAt(i + 1)) {
",4,3,1,3,7,0,4,0,0,13,45,13,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1590,"                            continue outer;
",2,0,0,0,0,0,0,0,0,2,15,15,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1597,"            return i;
",2,0,0,0,0,0,0,0,0,2,9,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1599,"        return INDEX_NOT_FOUND;
",2,0,0,0,0,0,0,0,0,2,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1625,"        if (isEmpty(str) || isEmpty(searchChars)) {
",0,1,0,3,7,0,8,0,0,9,43,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1626,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,0,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1628,"        int strLen = str.length();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1629,"        for (int i = 0; i < strLen; i++) {
",8,1,0,1,3,0,0,0,0,10,34,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1630,"            char ch = str.charAt(i);
",2,0,0,1,2,0,6,0,0,8,24,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1631,"            boolean chFound = searchChars.indexOf(ch) >= 0;
",2,1,0,1,2,0,6,0,0,9,47,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1632,"            if (i + 1 < strLen && Character.isHighSurrogate(ch)) {
",4,3,0,2,5,0,6,0,0,13,54,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1633,"                char ch2 = str.charAt(i + 1);
",4,1,0,1,2,0,4,0,0,9,29,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1634,"                if (chFound && searchChars.indexOf(ch2) < 0) {
",2,2,0,2,5,0,6,0,0,10,46,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1635,"                    return i;
",2,0,0,0,0,0,0,0,0,2,9,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1637,"            } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1638,"                if (!chFound) {
",2,0,0,1,3,0,0,0,0,3,15,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1639,"                    return i;
",2,0,0,0,0,0,0,0,0,2,9,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1643,"        return INDEX_NOT_FOUND;
",2,0,0,0,0,0,0,0,0,2,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1672,"        if (valid == null || cs == null) {
",4,3,0,1,3,0,0,0,0,7,34,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1673,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1675,"        if (cs.length() == 0) {
",0,1,0,2,5,0,4,0,0,5,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1676,"            return true;
",0,0,0,0,0,0,0,0,0,1,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1678,"        if (valid.length == 0) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1679,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1681,"        return indexOfAnyBut(cs, valid) == INDEX_NOT_FOUND;
",2,1,0,1,2,0,6,0,0,9,51,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1708,"        if (cs == null || validChars == null) {
",4,3,0,1,3,0,0,0,0,7,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1709,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1711,"        return containsOnly(cs, validChars.toCharArray());
",0,0,0,2,4,0,8,0,0,8,50,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1740,"        if (cs == null || searchChars == null) {
",4,3,0,1,3,0,0,0,0,7,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1741,"            return true;
",0,0,0,0,0,0,0,0,0,1,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1743,"        int csLen = cs.length();
",2,0,0,1,2,0,4,0,0,6,24,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1744,"        int csLast = csLen - 1;
",4,1,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1745,"        int searchLen = searchChars.length;
",6,0,0,0,0,0,0,0,0,6,35,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1746,"        int searchLast = searchLen - 1;
",4,1,0,0,0,0,0,0,0,5,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1747,"        for (int i = 0; i < csLen; i++) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1748,"            char ch = cs.charAt(i);
",2,0,0,1,2,0,6,0,0,8,23,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1749,"            for (int j = 0; j < searchLen; j++) {
",8,1,0,1,3,0,0,0,0,10,37,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1750,"                if (searchChars[j] == ch) {
",2,1,1,2,5,0,0,0,0,7,27,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1751,"                    if (Character.isHighSurrogate(ch)) {
",0,0,0,2,5,0,6,0,0,6,36,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1752,"                        if (j == searchLast) {
",4,1,0,1,3,0,0,0,0,5,22,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1754,"                            return false;
",0,0,0,0,0,0,0,0,0,1,13,14,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1756,"                        if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
",8,5,1,3,7,0,4,0,0,19,59,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1757,"                            return false;
",0,0,0,0,0,0,0,0,0,1,13,14,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1761,"                        return false;
",0,0,0,0,0,0,0,0,0,1,13,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1766,"        return true;
",0,0,0,0,0,0,0,0,0,1,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1793,"        if (cs == null || invalidChars == null) {
",4,3,0,1,3,0,0,0,0,7,41,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1794,"            return true;
",0,0,0,0,0,0,0,0,0,1,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1796,"        return containsNone(cs, invalidChars.toCharArray());
",0,0,0,2,4,0,8,0,0,8,52,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1828,"        if (str == null || searchStrs == null) {
",4,3,0,1,3,0,0,0,0,7,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1829,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,0,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1831,"        int sz = searchStrs.length;
",6,0,0,0,0,0,0,0,0,6,27,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1834,"        int ret = Integer.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,6,28,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1836,"        int tmp = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1837,"        for (int i = 0; i < sz; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1838,"            String search = searchStrs[i];
",2,0,1,1,2,0,0,2,0,8,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1839,"            if (search == null) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1840,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1842,"            tmp = str.indexOf(search);
",2,0,0,1,2,0,6,0,0,9,26,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1843,"            if (tmp == INDEX_NOT_FOUND) {
",4,1,0,1,3,0,0,0,0,5,29,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1844,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1847,"            if (tmp < ret) {
",4,1,0,1,3,0,0,0,0,5,16,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1848,"                ret = tmp;
",4,0,0,0,0,0,0,0,0,5,10,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1852,"        return (ret == Integer.MAX_VALUE) ? INDEX_NOT_FOUND : ret;
",10,1,0,1,2,0,0,0,0,11,58,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1881,"        if (str == null || searchStrs == null) {
",4,3,0,1,3,0,0,0,0,7,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1882,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,0,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1884,"        int sz = searchStrs.length;
",6,0,0,0,0,0,0,0,0,6,27,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1885,"        int ret = INDEX_NOT_FOUND;
",4,0,0,0,0,0,0,0,0,4,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1886,"        int tmp = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1887,"        for (int i = 0; i < sz; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1888,"            String search = searchStrs[i];
",2,0,1,1,2,0,0,2,0,8,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1889,"            if (search == null) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1890,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1892,"            tmp = str.lastIndexOf(search);
",2,0,0,1,2,0,6,0,0,9,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1893,"            if (tmp > ret) {
",4,1,0,1,3,0,0,0,0,5,16,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1894,"                ret = tmp;
",4,0,0,0,0,0,0,0,0,5,10,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1897,"        return ret;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1927,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1928,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1932,"        if (start < 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1933,"            start = str.length() + start; // remember start is negative
",4,1,0,1,2,0,4,0,0,10,59,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1936,"        if (start < 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1937,"            start = 0;
",2,0,0,0,0,0,0,0,0,3,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1939,"        if (start > str.length()) {
",2,1,0,2,5,0,4,0,0,7,27,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1940,"            return EMPTY;
",2,0,0,0,0,0,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1943,"        return str.substring(start);
",0,0,0,1,2,0,6,0,0,6,28,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1982,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1983,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1987,"        if (end < 0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1988,"            end = str.length() + end; // remember end is negative
",4,1,0,1,2,0,4,0,0,10,53,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1990,"        if (start < 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1991,"            start = str.length() + start; // remember start is negative
",4,1,0,1,2,0,4,0,0,10,59,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1995,"        if (end > str.length()) {
",2,1,0,2,5,0,4,0,0,7,25,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,1996,"            end = str.length();
",2,0,0,1,2,0,4,0,0,7,19,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2000,"        if (start > end) {
",4,1,0,1,3,0,0,0,0,5,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2001,"            return EMPTY;
",2,0,0,0,0,0,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2004,"        if (start < 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2005,"            start = 0;
",2,0,0,0,0,0,0,0,0,3,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2007,"        if (end < 0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2008,"            end = 0;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2011,"        return str.substring(start, end);
",0,0,0,1,2,0,8,0,0,8,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2037,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2038,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2040,"        if (len < 0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2041,"            return EMPTY;
",2,0,0,0,0,0,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2043,"        if (str.length() <= len) {
",2,1,0,2,5,0,4,0,0,7,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2044,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2046,"        return str.substring(0, len);
",0,0,0,1,2,0,6,0,0,6,29,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2070,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2071,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2073,"        if (len < 0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2074,"            return EMPTY;
",2,0,0,0,0,0,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2076,"        if (str.length() <= len) {
",2,1,0,2,5,0,4,0,0,7,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2077,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2079,"        return str.substring(str.length() - len);
",2,1,0,2,4,0,8,0,0,11,41,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2108,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2109,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2111,"        if (len < 0 || pos > str.length()) {
",4,3,0,2,5,0,4,0,0,11,36,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2112,"            return EMPTY;
",2,0,0,0,0,0,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2114,"        if (pos < 0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2115,"            pos = 0;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2117,"        if (str.length() <= (pos + len)) {
",4,2,0,3,7,0,4,0,0,10,34,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2118,"            return str.substring(pos);
",0,0,0,1,2,0,6,0,0,6,26,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2120,"        return str.substring(pos, pos + len);
",4,1,0,1,2,0,6,0,0,11,37,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2153,"        if (isEmpty(str) || separator == null) {
",2,2,0,2,5,0,4,0,0,9,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2154,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2156,"        if (separator.length() == 0) {
",0,1,0,2,5,0,4,0,0,5,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2157,"            return EMPTY;
",2,0,0,0,0,0,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2159,"        int pos = str.indexOf(separator);
",2,0,0,1,2,0,6,0,0,8,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2160,"        if (pos == INDEX_NOT_FOUND) {
",4,1,0,1,3,0,0,0,0,5,29,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2161,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2163,"        return str.substring(0, pos);
",0,0,0,1,2,0,6,0,0,6,29,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2195,"        if (isEmpty(str)) {
",0,0,0,2,5,0,4,0,0,4,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2196,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2198,"        if (separator == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2199,"            return EMPTY;
",2,0,0,0,0,0,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2201,"        int pos = str.indexOf(separator);
",2,0,0,1,2,0,6,0,0,8,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2202,"        if (pos == INDEX_NOT_FOUND) {
",4,1,0,1,3,0,0,0,0,5,29,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2203,"            return EMPTY;
",2,0,0,0,0,0,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2205,"        return str.substring(pos + separator.length());
",2,1,0,2,4,0,8,0,0,11,47,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2236,"        if (isEmpty(str) || isEmpty(separator)) {
",0,1,0,3,7,0,8,0,0,9,41,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2237,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2239,"        int pos = str.lastIndexOf(separator);
",2,0,0,1,2,0,6,0,0,8,37,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2240,"        if (pos == INDEX_NOT_FOUND) {
",4,1,0,1,3,0,0,0,0,5,29,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2241,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2243,"        return str.substring(0, pos);
",0,0,0,1,2,0,6,0,0,6,29,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2276,"        if (isEmpty(str)) {
",0,0,0,2,5,0,4,0,0,4,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2277,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2279,"        if (isEmpty(separator)) {
",0,0,0,2,5,0,4,0,0,4,25,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2280,"            return EMPTY;
",2,0,0,0,0,0,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2282,"        int pos = str.lastIndexOf(separator);
",2,0,0,1,2,0,6,0,0,8,37,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2283,"        if (pos == INDEX_NOT_FOUND || pos == (str.length() - separator.length())) {
",6,4,0,4,9,0,8,0,0,18,75,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2284,"            return EMPTY;
",2,0,0,0,0,0,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2286,"        return str.substring(pos + separator.length());
",2,1,0,2,4,0,8,0,0,11,47,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2313,"        return substringBetween(str, tag, tag);
",0,0,0,1,2,0,8,0,0,8,39,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2344,"        if (str == null || open == null || close == null) {
",6,5,0,1,3,0,0,0,0,11,51,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2345,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2347,"        int start = str.indexOf(open);
",2,0,0,1,2,0,6,0,0,8,30,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2348,"        if (start != INDEX_NOT_FOUND) {
",4,1,0,1,3,0,0,0,0,5,31,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2349,"            int end = str.indexOf(close, start + open.length());
",4,1,0,2,4,0,10,0,0,15,52,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2350,"            if (end != INDEX_NOT_FOUND) {
",4,1,0,1,3,0,0,0,0,5,29,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2351,"                return str.substring(start + open.length(), end);
",2,1,0,2,4,0,10,0,0,13,49,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2354,"        return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2380,"        if (str == null || isEmpty(open) || isEmpty(close)) {
",2,3,0,3,7,0,8,0,0,15,53,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2381,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2383,"        int strLen = str.length();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2384,"        if (strLen == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2385,"            return ArrayUtils.EMPTY_STRING_ARRAY;
",4,0,0,0,0,0,0,0,0,4,37,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2387,"        int closeLen = close.length();
",2,0,0,1,2,0,4,0,0,6,30,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2388,"        int openLen = open.length();
",2,0,0,1,2,0,4,0,0,6,28,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2389,"        List<String> list = new ArrayList<String>();
",2,0,0,1,2,0,0,8,0,10,44,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2390,"        int pos = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2391,"        while (pos < (strLen - closeLen)) {
",6,2,0,2,5,0,0,0,0,8,35,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2392,"            int start = str.indexOf(open, pos);
",2,0,0,1,2,0,8,0,0,10,35,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2393,"            if (start < 0) {
",2,1,0,1,3,0,0,0,0,3,16,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2394,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2396,"            start += openLen;
",4,0,0,0,0,0,0,0,0,5,17,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2397,"            int end = str.indexOf(close, start);
",2,0,0,1,2,0,8,0,0,10,36,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2398,"            if (end < 0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2399,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2401,"            list.add(str.substring(start, end));
",0,0,0,2,4,0,12,0,0,12,36,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2402,"            pos = end + closeLen;
",6,1,0,0,0,0,0,0,0,8,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2403,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2404,"        if (list.isEmpty()) {
",0,0,0,2,5,0,4,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2405,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2407,"        return list.toArray(new String [list.size()]);
",0,0,0,3,6,0,8,2,0,10,46,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2438,"        return split(str, null, -1);
",0,0,0,1,2,0,4,0,0,6,28,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2466,"        return splitWorker(str, separatorChar, false);
",0,0,0,1,2,0,6,0,0,7,46,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2495,"        return splitWorker(str, separatorChars, -1, false);
",0,0,0,1,2,0,6,0,0,8,51,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2529,"        return splitWorker(str, separatorChars, max, false);
",0,0,0,1,2,0,8,0,0,9,52,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2556,"        return splitByWholeSeparatorWorker( str, separator, -1, false ) ;
",0,0,0,1,2,0,6,0,0,8,65,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2587,"        return splitByWholeSeparatorWorker(str, separator, max, false);
",0,0,0,1,2,0,8,0,0,9,63,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2616,"        return splitByWholeSeparatorWorker(str, separator, -1, true);
",0,0,0,1,2,0,6,0,0,8,61,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2649,"        return splitByWholeSeparatorWorker(str, separator, max, true);
",0,0,0,1,2,0,8,0,0,9,62,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2669,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2670,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2673,"        int len = str.length();
",2,0,0,1,2,0,4,0,0,6,23,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2675,"        if (len == 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2676,"            return ArrayUtils.EMPTY_STRING_ARRAY;
",4,0,0,0,0,0,0,0,0,4,37,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2679,"        if ((separator == null) || (EMPTY.equals(separator))) {
",2,2,0,4,9,0,6,0,0,10,55,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2681,"            return splitWorker(str, null, max, preserveAllTokens);
",0,0,0,1,2,0,8,0,0,9,54,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2684,"        int separatorLength = separator.length();
",2,0,0,1,2,0,4,0,0,6,41,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2686,"        ArrayList<String> substrings = new ArrayList<String>();
",2,0,0,1,2,0,0,8,0,10,55,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2687,"        int numberOfSubstrings = 0;
",2,0,0,0,0,0,0,0,0,2,27,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2688,"        int beg = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2689,"        int end = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2690,"        while (end < len) {
",4,1,0,1,3,0,0,0,0,5,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2691,"            end = str.indexOf(separator, beg);
",2,0,0,1,2,0,8,0,0,11,34,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2693,"            if (end > -1) {
",2,1,0,1,3,0,0,0,0,4,15,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2694,"                if (end > beg) {
",4,1,0,1,3,0,0,0,0,5,16,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2695,"                    numberOfSubstrings += 1;
",2,0,0,0,0,0,0,0,0,3,24,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2697,"                    if (numberOfSubstrings == max) {
",4,1,0,1,3,0,0,0,0,5,32,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2698,"                        end = len;
",4,0,0,0,0,0,0,0,0,5,10,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2699,"                        substrings.add(str.substring(beg));
",0,0,0,2,4,0,10,0,0,10,35,13,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2703,"                        substrings.add(str.substring(beg, end));
",0,0,0,2,4,0,12,0,0,12,40,13,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2708,"                        beg = end + separatorLength;
",6,1,0,0,0,0,0,0,0,8,28,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2712,"                    if (preserveAllTokens) {
",2,0,0,1,3,0,0,0,0,2,24,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2713,"                        numberOfSubstrings += 1;
",2,0,0,0,0,0,0,0,0,3,24,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2714,"                        if (numberOfSubstrings == max) {
",4,1,0,1,3,0,0,0,0,5,32,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2715,"                            end = len;
",4,0,0,0,0,0,0,0,0,5,10,14,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2716,"                            substrings.add(str.substring(beg));
",0,0,0,2,4,0,10,0,0,10,35,15,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2718,"                            substrings.add(EMPTY);
",0,0,0,1,2,0,6,0,0,6,22,15,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2721,"                    beg = end + separatorLength;
",6,1,0,0,0,0,0,0,0,8,28,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2725,"                substrings.add(str.substring(beg));
",0,0,0,2,4,0,10,0,0,10,35,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2726,"                end = len;
",4,0,0,0,0,0,0,0,0,5,10,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2730,"        return substrings.toArray(new String[substrings.size()]);
",0,0,0,3,6,0,8,2,0,10,57,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2759,"        return splitWorker(str, null, -1, true);
",0,0,0,1,2,0,4,0,0,7,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2795,"        return splitWorker(str, separatorChar, true);
",0,0,0,1,2,0,6,0,0,7,45,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2813,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2814,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2816,"        int len = str.length();
",2,0,0,1,2,0,4,0,0,6,23,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2817,"        if (len == 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2818,"            return ArrayUtils.EMPTY_STRING_ARRAY;
",4,0,0,0,0,0,0,0,0,4,37,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2820,"        List<String> list = new ArrayList<String>();
",2,0,0,1,2,0,0,8,0,10,44,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2821,"        int i = 0, start = 0;
",4,0,0,0,0,0,0,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2822,"        boolean match = false;
",2,0,0,0,0,0,0,0,0,3,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2823,"        boolean lastMatch = false;
",2,0,0,0,0,0,0,0,0,3,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2824,"        while (i < len) {
",4,1,0,1,3,0,0,0,0,5,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2825,"            if (str.charAt(i) == separatorChar) {
",2,1,0,2,5,0,6,0,0,9,37,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2826,"                if (match || preserveAllTokens) {
",4,1,0,1,3,0,0,0,0,5,33,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2827,"                    list.add(str.substring(start, i));
",0,0,0,2,4,0,12,0,0,12,34,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2828,"                    match = false;
",2,0,0,0,0,0,0,0,0,4,14,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2829,"                    lastMatch = true;
",2,0,0,0,0,0,0,0,0,4,17,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2831,"                start = ++i;
",4,0,0,0,0,0,0,0,0,6,12,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2832,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2834,"            lastMatch = false;
",2,0,0,0,0,0,0,0,0,4,18,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2835,"            match = true;
",2,0,0,0,0,0,0,0,0,4,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2836,"            i++;
",2,0,0,0,0,0,0,0,0,3,4,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2838,"        if (match || (preserveAllTokens && lastMatch)) {
",6,2,0,2,5,0,0,0,0,8,48,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2839,"            list.add(str.substring(start, i));
",0,0,0,2,4,0,12,0,0,12,34,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2841,"        return list.toArray(new String[list.size()]);
",0,0,0,3,6,0,8,2,0,10,45,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2878,"        return splitWorker(str, separatorChars, -1, true);
",0,0,0,1,2,0,6,0,0,8,50,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2918,"        return splitWorker(str, separatorChars, max, true);
",0,0,0,1,2,0,8,0,0,9,51,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2940,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2941,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2943,"        int len = str.length();
",2,0,0,1,2,0,4,0,0,6,23,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2944,"        if (len == 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2945,"            return ArrayUtils.EMPTY_STRING_ARRAY;
",4,0,0,0,0,0,0,0,0,4,37,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2947,"        List<String> list = new ArrayList<String>();
",2,0,0,1,2,0,0,8,0,10,44,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2948,"        int sizePlus1 = 1;
",2,0,0,0,0,0,0,0,0,2,18,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2949,"        int i = 0, start = 0;
",4,0,0,0,0,0,0,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2950,"        boolean match = false;
",2,0,0,0,0,0,0,0,0,3,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2951,"        boolean lastMatch = false;
",2,0,0,0,0,0,0,0,0,3,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2952,"        if (separatorChars == null) {
",2,1,0,1,3,0,0,0,0,3,29,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2954,"            while (i < len) {
",4,1,0,1,3,0,0,0,0,5,17,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2955,"                if (Character.isWhitespace(str.charAt(i))) {
",0,0,0,3,7,0,10,0,0,10,44,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2956,"                    if (match || preserveAllTokens) {
",4,1,0,1,3,0,0,0,0,5,33,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2957,"                        lastMatch = true;
",2,0,0,0,0,0,0,0,0,4,17,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2958,"                        if (sizePlus1++ == max) {
",4,1,0,1,3,0,0,0,0,6,25,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2959,"                            i = len;
",4,0,0,0,0,0,0,0,0,5,8,14,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2960,"                            lastMatch = false;
",2,0,0,0,0,0,0,0,0,4,18,14,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2962,"                        list.add(str.substring(start, i));
",0,0,0,2,4,0,12,0,0,12,34,13,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2963,"                        match = false;
",2,0,0,0,0,0,0,0,0,4,14,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2965,"                    start = ++i;
",4,0,0,0,0,0,0,0,0,6,12,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2966,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2968,"                lastMatch = false;
",2,0,0,0,0,0,0,0,0,4,18,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2969,"                match = true;
",2,0,0,0,0,0,0,0,0,4,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2970,"                i++;
",2,0,0,0,0,0,0,0,0,3,4,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2972,"        } else if (separatorChars.length() == 1) {
",0,1,0,2,6,0,4,0,0,5,42,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2974,"            char sep = separatorChars.charAt(0);
",2,0,0,1,2,0,4,0,0,6,36,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2975,"            while (i < len) {
",4,1,0,1,3,0,0,0,0,5,17,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2976,"                if (str.charAt(i) == sep) {
",2,1,0,2,5,0,6,0,0,9,27,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2977,"                    if (match || preserveAllTokens) {
",4,1,0,1,3,0,0,0,0,5,33,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2978,"                        lastMatch = true;
",2,0,0,0,0,0,0,0,0,4,17,13,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2979,"                        if (sizePlus1++ == max) {
",4,1,0,1,3,0,0,0,0,6,25,13,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2980,"                            i = len;
",4,0,0,0,0,0,0,0,0,5,8,15,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2981,"                            lastMatch = false;
",2,0,0,0,0,0,0,0,0,4,18,15,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2983,"                        list.add(str.substring(start, i));
",0,0,0,2,4,0,12,0,0,12,34,14,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2984,"                        match = false;
",2,0,0,0,0,0,0,0,0,4,14,13,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2986,"                    start = ++i;
",4,0,0,0,0,0,0,0,0,6,12,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2987,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2989,"                lastMatch = false;
",2,0,0,0,0,0,0,0,0,4,18,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2990,"                match = true;
",2,0,0,0,0,0,0,0,0,4,13,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2991,"                i++;
",2,0,0,0,0,0,0,0,0,3,4,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2993,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2995,"            while (i < len) {
",4,1,0,1,3,0,0,0,0,5,17,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2996,"                if (separatorChars.indexOf(str.charAt(i)) >= 0) {
",0,1,0,3,7,0,10,0,0,11,49,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2997,"                    if (match || preserveAllTokens) {
",4,1,0,1,3,0,0,0,0,5,33,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2998,"                        lastMatch = true;
",2,0,0,0,0,0,0,0,0,4,17,13,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,2999,"                        if (sizePlus1++ == max) {
",4,1,0,1,3,0,0,0,0,6,25,13,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3000,"                            i = len;
",4,0,0,0,0,0,0,0,0,5,8,15,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3001,"                            lastMatch = false;
",2,0,0,0,0,0,0,0,0,4,18,15,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3003,"                        list.add(str.substring(start, i));
",0,0,0,2,4,0,12,0,0,12,34,14,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3004,"                        match = false;
",2,0,0,0,0,0,0,0,0,4,14,13,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3006,"                    start = ++i;
",4,0,0,0,0,0,0,0,0,6,12,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3007,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3009,"                lastMatch = false;
",2,0,0,0,0,0,0,0,0,4,18,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3010,"                match = true;
",2,0,0,0,0,0,0,0,0,4,13,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3011,"                i++;
",2,0,0,0,0,0,0,0,0,3,4,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3014,"        if (match || (preserveAllTokens && lastMatch)) {
",6,2,0,2,5,0,0,0,0,8,48,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3015,"            list.add(str.substring(start, i));
",0,0,0,2,4,0,12,0,0,12,34,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3017,"        return list.toArray(new String[list.size()]);
",0,0,0,3,6,0,8,2,0,10,45,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3040,"        return splitByCharacterType(str, false);
",0,0,0,1,2,0,4,0,0,5,40,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3068,"        return splitByCharacterType(str, true);
",0,0,0,1,2,0,4,0,0,5,39,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3086,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3087,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3089,"        if (str.length() == 0) {
",0,1,0,2,5,0,4,0,0,5,24,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3090,"            return ArrayUtils.EMPTY_STRING_ARRAY;
",4,0,0,0,0,0,0,0,0,4,37,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3092,"        char[] c = str.toCharArray();
",2,0,0,2,4,0,4,0,0,6,29,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3093,"        List<String> list = new ArrayList<String>();
",2,0,0,1,2,0,0,8,0,10,44,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3094,"        int tokenStart = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3095,"        int currentType = Character.getType(c[tokenStart]);
",2,0,1,2,4,0,4,0,0,10,51,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3096,"        for (int pos = tokenStart + 1; pos < c.length; pos++) {
",12,2,0,1,3,0,0,0,0,15,55,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3097,"            int type = Character.getType(c[pos]);
",2,0,1,2,4,0,4,0,0,10,37,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3098,"            if (type == currentType) {
",4,1,0,1,3,0,0,0,0,5,26,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3099,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3101,"            if (camelCase && type == Character.LOWERCASE_LETTER && currentType == Character.UPPERCASE_LETTER) {
",14,4,0,1,3,0,0,0,0,18,99,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3102,"                int newTokenStart = pos - 1;
",4,1,0,0,0,0,0,0,0,5,28,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3103,"                if (newTokenStart != tokenStart) {
",4,1,0,1,3,0,0,0,0,5,34,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3104,"                    list.add(new String(c, tokenStart, newTokenStart - tokenStart));
",8,1,0,2,4,0,4,2,0,15,64,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3105,"                    tokenStart = newTokenStart;
",4,0,0,0,0,0,0,0,0,5,27,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3107,"            } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3108,"                list.add(new String(c, tokenStart, pos - tokenStart));
",8,1,0,2,4,0,4,2,0,15,54,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3109,"                tokenStart = pos;
",4,0,0,0,0,0,0,0,0,5,17,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3111,"            currentType = type;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3113,"        list.add(new String(c, tokenStart, c.length - tokenStart));
",10,1,0,2,4,0,4,2,0,17,59,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3114,"        return list.toArray(new String[list.size()]);
",0,0,0,3,6,0,8,2,0,10,45,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3136,"        return join(elements, null);
",0,0,0,1,2,0,4,0,0,5,28,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3158,"        return join(elements, separator);
",0,0,0,1,2,0,6,0,0,6,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3182,"        return join(array, null);
",0,0,0,1,2,0,4,0,0,5,25,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3208,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3209,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3212,"        return join(array, separator, 0, array.length);
",4,0,0,1,2,0,6,0,0,10,47,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3242,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3243,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3245,"        int bufSize = (endIndex - startIndex);
",6,1,0,1,2,0,0,0,0,7,38,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3246,"        if (bufSize <= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3247,"            return EMPTY;
",2,0,0,0,0,0,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3250,"        bufSize *= ((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + 1);
",2,2,1,6,12,0,4,0,0,17,90,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3251,"        StringBuilder buf = new StringBuilder(bufSize);
",4,0,0,1,2,0,0,4,0,8,47,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3253,"        for (int i = startIndex; i < endIndex; i++) {
",10,1,0,1,3,0,0,0,0,12,45,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3254,"            if (i > startIndex) {
",4,1,0,1,3,0,0,0,0,5,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3255,"                buf.append(separator);
",0,0,0,1,2,0,6,0,0,6,22,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3257,"            if (array[i] != null) {
",0,1,1,2,5,0,0,0,0,5,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3258,"                buf.append(array[i]);
",0,0,1,2,4,0,4,0,0,8,21,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3261,"        return buf.toString();
",0,0,0,1,2,0,4,0,0,4,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3289,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3290,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3292,"        return join(array, separator, 0, array.length);
",4,0,0,1,2,0,6,0,0,10,47,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3323,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3324,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3326,"        if (separator == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3327,"            separator = EMPTY;
",4,0,0,0,0,0,0,0,0,5,18,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3332,"        int bufSize = (endIndex - startIndex);
",6,1,0,1,2,0,0,0,0,7,38,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3333,"        if (bufSize <= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3334,"            return EMPTY;
",2,0,0,0,0,0,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3337,"        bufSize *= ((array[startIndex] == null ? 16 : array[startIndex].toString().length())
",2,1,1,5,11,0,4,0,0,16,84,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3340,"        StringBuilder buf = new StringBuilder(bufSize);
",4,0,0,1,2,0,0,4,0,8,47,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3342,"        for (int i = startIndex; i < endIndex; i++) {
",10,1,0,1,3,0,0,0,0,12,45,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3343,"            if (i > startIndex) {
",4,1,0,1,3,0,0,0,0,5,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3344,"                buf.append(separator);
",0,0,0,1,2,0,6,0,0,6,22,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3346,"            if (array[i] != null) {
",0,1,1,2,5,0,0,0,0,5,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3347,"                buf.append(array[i]);
",0,0,1,2,4,0,4,0,0,8,21,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3350,"        return buf.toString();
",0,0,0,1,2,0,4,0,0,4,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3370,"        if (iterator == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3371,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3373,"        if (!iterator.hasNext()) {
",0,0,0,2,5,0,4,0,0,5,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3374,"            return EMPTY;
",2,0,0,0,0,0,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3376,"        Object first = iterator.next();
",2,0,0,1,2,0,4,2,0,8,31,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3377,"        if (!iterator.hasNext()) {
",0,0,0,2,5,0,4,0,0,5,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3378,"            return ObjectUtils.toString(first);
",0,0,0,1,2,0,6,0,0,6,35,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3382,"        StringBuilder buf = new StringBuilder(256); // Java default is 16, probably too small
",2,0,0,1,2,0,0,4,0,6,85,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3383,"        if (first != null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3384,"            buf.append(first);
",0,0,0,1,2,0,6,0,0,6,18,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3387,"        while (iterator.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,28,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3388,"            buf.append(separator);
",0,0,0,1,2,0,6,0,0,6,22,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3389,"            Object obj = iterator.next();
",2,0,0,1,2,0,4,2,0,8,29,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3390,"            if (obj != null) {
",2,1,0,1,3,0,0,0,0,3,18,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3391,"                buf.append(obj);
",0,0,0,1,2,0,6,0,0,6,16,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3393,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3395,"        return buf.toString();
",0,0,0,1,2,0,4,0,0,4,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3414,"        if (iterator == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3415,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3417,"        if (!iterator.hasNext()) {
",0,0,0,2,5,0,4,0,0,5,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3418,"            return EMPTY;
",2,0,0,0,0,0,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3420,"        Object first = iterator.next();
",2,0,0,1,2,0,4,2,0,8,31,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3421,"        if (!iterator.hasNext()) {
",0,0,0,2,5,0,4,0,0,5,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3422,"            return ObjectUtils.toString(first);
",0,0,0,1,2,0,6,0,0,6,35,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3426,"        StringBuilder buf = new StringBuilder(256); // Java default is 16, probably too small
",2,0,0,1,2,0,0,4,0,6,85,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3427,"        if (first != null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3428,"            buf.append(first);
",0,0,0,1,2,0,6,0,0,6,18,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3431,"        while (iterator.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,28,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3432,"            if (separator != null) {
",2,1,0,1,3,0,0,0,0,3,24,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3433,"                buf.append(separator);
",0,0,0,1,2,0,6,0,0,6,22,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3435,"            Object obj = iterator.next();
",2,0,0,1,2,0,4,2,0,8,29,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3436,"            if (obj != null) {
",2,1,0,1,3,0,0,0,0,3,18,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3437,"                buf.append(obj);
",0,0,0,1,2,0,6,0,0,6,16,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3439,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3440,"        return buf.toString();
",0,0,0,1,2,0,4,0,0,4,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3458,"        if (iterable == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3459,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3461,"        return join(iterable.iterator(), separator);
",0,0,0,2,4,0,8,0,0,8,44,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3479,"        if (iterable == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3480,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3482,"        return join(iterable.iterator(), separator);
",0,0,0,2,4,0,8,0,0,8,44,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3502,"        if (isEmpty(str)) {
",0,0,0,2,5,0,4,0,0,4,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3503,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3505,"        int sz = str.length();
",2,0,0,1,2,0,4,0,0,6,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3506,"        char[] chs = new char[sz];
",2,0,1,2,4,0,0,0,0,4,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3507,"        int count = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3508,"        for (int i = 0; i < sz; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3509,"            if (!Character.isWhitespace(str.charAt(i))) {
",0,0,0,3,7,0,10,0,0,11,45,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3510,"                chs[count++] = str.charAt(i);
",2,0,1,2,4,0,6,0,0,12,29,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3513,"        if (count == sz) {
",4,1,0,1,3,0,0,0,0,5,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3514,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3516,"        return new String(chs, 0, count);
",4,0,0,1,2,0,0,2,0,6,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3546,"        if (isEmpty(str) || isEmpty(remove)) {
",0,1,0,3,7,0,8,0,0,9,38,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3547,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3549,"        if (str.startsWith(remove)){
",0,0,0,2,5,0,6,0,0,6,28,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3550,"            return str.substring(remove.length());
",0,0,0,2,4,0,8,0,0,8,38,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3552,"        return str;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3581,"        if (isEmpty(str) || isEmpty(remove)) {
",0,1,0,3,7,0,8,0,0,9,38,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3582,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3584,"        if (startsWithIgnoreCase(str, remove)) {
",0,0,0,2,5,0,6,0,0,6,40,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3585,"            return str.substring(remove.length());
",0,0,0,2,4,0,8,0,0,8,38,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3587,"        return str;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3615,"        if (isEmpty(str) || isEmpty(remove)) {
",0,1,0,3,7,0,8,0,0,9,38,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3616,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3618,"        if (str.endsWith(remove)) {
",0,0,0,2,5,0,6,0,0,6,27,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3619,"            return str.substring(0, str.length() - remove.length());
",0,1,0,3,6,0,12,0,0,13,56,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3621,"        return str;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3651,"        if (isEmpty(str) || isEmpty(remove)) {
",0,1,0,3,7,0,8,0,0,9,38,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3652,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3654,"        if (endsWithIgnoreCase(str, remove)) {
",0,0,0,2,5,0,6,0,0,6,38,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3655,"            return str.substring(0, str.length() - remove.length());
",0,1,0,3,6,0,12,0,0,13,56,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3657,"        return str;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3684,"        if (isEmpty(str) || isEmpty(remove)) {
",0,1,0,3,7,0,8,0,0,9,38,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3685,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3687,"        return replace(str, remove, EMPTY, -1);
",0,0,0,1,2,0,8,0,0,9,39,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3710,"        if (isEmpty(str) || str.indexOf(remove) == INDEX_NOT_FOUND) {
",2,2,0,3,7,0,10,0,0,14,61,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3711,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3713,"        char[] chars = str.toCharArray();
",2,0,0,2,4,0,4,0,0,6,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3714,"        int pos = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3715,"        for (int i = 0; i < chars.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3716,"            if (chars[i] != remove) {
",2,1,1,2,5,0,0,0,0,7,25,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3717,"                chars[pos++] = chars[i];
",2,0,1,2,4,0,0,0,0,10,24,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3720,"        return new String(chars, 0, pos);
",4,0,0,1,2,0,0,2,0,6,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3749,"        return replace(text, searchString, replacement, 1);
",0,0,0,1,2,0,8,0,0,8,51,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3776,"        return replace(text, searchString, replacement, -1);
",0,0,0,1,2,0,8,0,0,9,52,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3808,"        if (isEmpty(text) || isEmpty(searchString) || replacement == null || max == 0) {
",4,4,0,3,7,0,8,0,0,18,80,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3809,"            return text;
",2,0,0,0,0,0,0,0,0,2,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3811,"        int start = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3812,"        int end = text.indexOf(searchString, start);
",2,0,0,1,2,0,8,0,0,10,44,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3813,"        if (end == INDEX_NOT_FOUND) {
",4,1,0,1,3,0,0,0,0,5,29,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3814,"            return text;
",2,0,0,0,0,0,0,0,0,2,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3816,"        int replLength = searchString.length();
",2,0,0,1,2,0,4,0,0,6,39,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3817,"        int increase = replacement.length() - replLength;
",4,1,0,1,2,0,4,0,0,9,49,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3818,"        increase = (increase < 0 ? 0 : increase);
",6,1,0,1,2,0,0,0,0,8,41,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3819,"        increase *= (max < 0 ? 16 : (max > 64 ? 64 : max));
",8,2,0,2,4,0,0,0,0,11,51,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3820,"        StringBuilder buf = new StringBuilder(text.length() + increase);
",4,1,0,2,4,0,4,4,0,13,64,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3821,"        while (end != INDEX_NOT_FOUND) {
",4,1,0,1,3,0,0,0,0,5,32,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3822,"            buf.append(text.substring(start, end)).append(replacement);
",0,0,0,3,6,0,16,0,0,16,59,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3823,"            start = end + replLength;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3824,"            if (--max == 0) {
",2,1,0,1,3,0,0,0,0,4,17,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3825,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3827,"            end = text.indexOf(searchString, start);
",2,0,0,1,2,0,8,0,0,11,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3829,"        buf.append(text.substring(start));
",0,0,0,2,4,0,10,0,0,10,34,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3830,"        return buf.toString();
",0,0,0,1,2,0,4,0,0,4,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3873,"        return replaceEach(text, searchList, replacementList, false, 0);
",0,0,0,1,2,0,8,0,0,9,64,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3924,"        int timeToLive = searchList == null ? 0 : searchList.length;
",8,1,0,0,0,0,0,0,0,9,60,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3925,"        return replaceEach(text, searchList, replacementList, true, timeToLive);
",0,0,0,1,2,0,10,0,0,11,72,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3983,"        if (text == null || text.length() == 0 || searchList == null ||
",4,8,0,1,3,0,4,0,0,16,63,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3986,"            return text;
",2,0,0,0,0,0,0,0,0,2,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3990,"        if (timeToLive < 0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3991,"            throw new IllegalStateException(""TimeToLive of "" + timeToLive + "" is less than 0: "" + text);
",4,1,0,1,2,0,0,2,0,9,92,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3994,"        int searchLength = searchList.length;
",6,0,0,0,0,0,0,0,0,6,37,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3995,"        int replacementLength = replacementList.length;
",6,0,0,0,0,0,0,0,0,6,47,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3998,"        if (searchLength != replacementLength) {
",4,1,0,1,3,0,0,0,0,5,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,3999,"            throw new IllegalArgumentException(""Search and Replace array lengths don't match: ""
",0,0,0,0,1,0,0,2,0,3,83,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4006,"        boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];
",2,0,1,2,4,0,0,0,0,4,64,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4009,"        int textIndex = -1;
",2,0,0,0,0,0,0,0,0,3,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4010,"        int replaceIndex = -1;
",2,0,0,0,0,0,0,0,0,3,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4011,"        int tempIndex = -1;
",2,0,0,0,0,0,0,0,0,3,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4015,"        for (int i = 0; i < searchLength; i++) {
",8,1,0,1,3,0,0,0,0,10,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4016,"            if (noMoreMatchesForReplIndex[i] || searchList[i] == null ||
",0,4,1,2,5,0,0,0,0,12,60,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4019,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4021,"            tempIndex = text.indexOf(searchList[i]);
",2,0,1,2,4,0,4,0,0,11,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4024,"            if (tempIndex == -1) {
",2,1,0,1,3,0,0,0,0,4,22,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4025,"                noMoreMatchesForReplIndex[i] = true;
",0,0,1,1,2,0,0,0,0,6,36,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4027,"                if (textIndex == -1 || tempIndex < textIndex) {
",6,3,0,1,3,0,0,0,0,10,47,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4028,"                    textIndex = tempIndex;
",4,0,0,0,0,0,0,0,0,5,22,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4029,"                    replaceIndex = i;
",4,0,0,0,0,0,0,0,0,5,17,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4036,"        if (textIndex == -1) {
",2,1,0,1,3,0,0,0,0,4,22,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4037,"            return text;
",2,0,0,0,0,0,0,0,0,2,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4040,"        int start = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4043,"        int increase = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4046,"        for (int i = 0; i < searchList.length; i++) {
",10,1,0,1,3,0,0,0,0,12,45,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4047,"            if (searchList[i] == null || replacementList[i] == null) {
",0,3,1,3,7,0,0,0,0,11,58,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4048,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4050,"            int greater = replacementList[i].length() - searchList[i].length();
",2,1,1,4,8,0,4,0,0,15,67,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4051,"            if (greater > 0) {
",2,1,0,1,3,0,0,0,0,3,18,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4052,"                increase += 3 * greater; // assume 3 matches
",4,1,0,0,0,0,0,0,0,6,44,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4056,"        increase = Math.min(increase, text.length() / 5);
",2,1,0,2,4,0,10,0,0,14,49,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4058,"        StringBuilder buf = new StringBuilder(text.length() + increase);
",4,1,0,2,4,0,4,4,0,13,64,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4060,"        while (textIndex != -1) {
",2,1,0,1,3,0,0,0,0,4,25,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4062,"            for (int i = start; i < textIndex; i++) {
",10,1,0,1,3,0,0,0,0,12,41,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4063,"                buf.append(text.charAt(i));
",0,0,0,2,4,0,10,0,0,10,27,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4065,"            buf.append(replacementList[replaceIndex]);
",0,0,1,2,4,0,4,0,0,8,42,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4067,"            start = textIndex + searchList[replaceIndex].length();
",4,1,1,2,4,0,2,0,0,12,54,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4069,"            textIndex = -1;
",2,0,0,0,0,0,0,0,0,4,15,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4070,"            replaceIndex = -1;
",2,0,0,0,0,0,0,0,0,4,18,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4071,"            tempIndex = -1;
",2,0,0,0,0,0,0,0,0,4,15,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4074,"            for (int i = 0; i < searchLength; i++) {
",8,1,0,1,3,0,0,0,0,10,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4075,"                if (noMoreMatchesForReplIndex[i] || searchList[i] == null ||
",0,4,1,2,5,0,0,0,0,12,60,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4078,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4080,"                tempIndex = text.indexOf(searchList[i], start);
",2,0,1,2,4,0,6,0,0,13,47,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4083,"                if (tempIndex == -1) {
",2,1,0,1,3,0,0,0,0,4,22,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4084,"                    noMoreMatchesForReplIndex[i] = true;
",0,0,1,1,2,0,0,0,0,6,36,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4086,"                    if (textIndex == -1 || tempIndex < textIndex) {
",6,3,0,1,3,0,0,0,0,10,47,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4087,"                        textIndex = tempIndex;
",4,0,0,0,0,0,0,0,0,5,22,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4088,"                        replaceIndex = i;
",4,0,0,0,0,0,0,0,0,5,17,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4095,"        int textLength = text.length();
",2,0,0,1,2,0,4,0,0,6,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4096,"        for (int i = start; i < textLength; i++) {
",10,1,0,1,3,0,0,0,0,12,42,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4097,"            buf.append(text.charAt(i));
",0,0,0,2,4,0,10,0,0,10,27,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4099,"        String result = buf.toString();
",2,0,0,1,2,0,4,2,0,8,31,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4100,"        if (!repeat) {
",2,0,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4101,"            return result;
",2,0,0,0,0,0,0,0,0,2,14,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4104,"        return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);
",2,1,0,1,2,0,10,0,0,13,80,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4130,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4131,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4133,"        return str.replace(searchChar, replaceChar);
",0,0,0,1,2,0,8,0,0,8,44,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4173,"        if (isEmpty(str) || isEmpty(searchChars)) {
",0,1,0,3,7,0,8,0,0,9,43,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4174,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4176,"        if (replaceChars == null) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4177,"            replaceChars = EMPTY;
",4,0,0,0,0,0,0,0,0,5,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4179,"        boolean modified = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4180,"        int replaceCharsLength = replaceChars.length();
",2,0,0,1,2,0,4,0,0,6,47,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4181,"        int strLength = str.length();
",2,0,0,1,2,0,4,0,0,6,29,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4182,"        StringBuilder buf = new StringBuilder(strLength);
",4,0,0,1,2,0,0,4,0,8,49,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4183,"        for (int i = 0; i < strLength; i++) {
",8,1,0,1,3,0,0,0,0,10,37,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4184,"            char ch = str.charAt(i);
",2,0,0,1,2,0,6,0,0,8,24,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4185,"            int index = searchChars.indexOf(ch);
",2,0,0,1,2,0,6,0,0,8,36,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4186,"            if (index >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4187,"                modified = true;
",2,0,0,0,0,0,0,0,0,4,16,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4188,"                if (index < replaceCharsLength) {
",4,1,0,1,3,0,0,0,0,5,33,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4189,"                    buf.append(replaceChars.charAt(index));
",0,0,0,2,4,0,10,0,0,10,39,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4192,"                buf.append(ch);
",0,0,0,1,2,0,6,0,0,6,15,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4195,"        if (modified) {
",2,0,0,1,3,0,0,0,0,2,15,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4196,"            return buf.toString();
",0,0,0,1,2,0,4,0,0,4,22,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4198,"        return str;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4233,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4234,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4236,"        if (overlay == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4237,"            overlay = EMPTY;
",4,0,0,0,0,0,0,0,0,5,16,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4239,"        int len = str.length();
",2,0,0,1,2,0,4,0,0,6,23,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4240,"        if (start < 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4241,"            start = 0;
",2,0,0,0,0,0,0,0,0,3,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4243,"        if (start > len) {
",4,1,0,1,3,0,0,0,0,5,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4244,"            start = len;
",4,0,0,0,0,0,0,0,0,5,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4246,"        if (end < 0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4247,"            end = 0;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4249,"        if (end > len) {
",4,1,0,1,3,0,0,0,0,5,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4250,"            end = len;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4252,"        if (start > end) {
",4,1,0,1,3,0,0,0,0,5,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4253,"            int temp = start;
",4,0,0,0,0,0,0,0,0,4,17,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4254,"            start = end;
",4,0,0,0,0,0,0,0,0,5,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4255,"            end = temp;
",4,0,0,0,0,0,0,0,0,5,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4257,"        return new StringBuilder(len + start - end + overlay.length() + 1)
",6,4,0,2,4,0,4,2,0,16,66,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4292,"        if (isEmpty(str)) {
",0,0,0,2,5,0,4,0,0,4,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4293,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4296,"        if (str.length() == 1) {
",0,1,0,2,5,0,4,0,0,5,24,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4297,"            char ch = str.charAt(0);
",2,0,0,1,2,0,4,0,0,6,24,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4298,"            if (ch == CharUtils.CR || ch == CharUtils.LF) {
",12,3,0,1,3,0,0,0,0,15,47,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4299,"                return EMPTY;
",2,0,0,0,0,0,0,0,0,2,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4301,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4304,"        int lastIdx = str.length() - 1;
",2,1,0,1,2,0,4,0,0,7,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4305,"        char last = str.charAt(lastIdx);
",2,0,0,1,2,0,6,0,0,8,32,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4307,"        if (last == CharUtils.LF) {
",6,1,0,1,3,0,0,0,0,7,27,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4308,"            if (str.charAt(lastIdx - 1) == CharUtils.CR) {
",6,2,0,2,5,0,4,0,0,12,46,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4309,"                lastIdx--;
",2,0,0,0,0,0,0,0,0,3,10,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4311,"        } else if (last != CharUtils.CR) {
",6,1,0,1,4,0,0,0,0,7,34,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4312,"            lastIdx++;
",2,0,0,0,0,0,0,0,0,3,10,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4314,"        return str.substring(0, lastIdx);
",0,0,0,1,2,0,6,0,0,6,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4344,"        if (isEmpty(str) || separator == null) {
",2,2,0,2,5,0,4,0,0,9,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4345,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4347,"        if (str.endsWith(separator)) {
",0,0,0,2,5,0,6,0,0,6,30,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4348,"            return str.substring(0, str.length() - separator.length());
",0,1,0,3,6,0,12,0,0,13,59,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4350,"        return str;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4379,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4380,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4382,"        int strLen = str.length();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4383,"        if (strLen < 2) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4384,"            return EMPTY;
",2,0,0,0,0,0,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4386,"        int lastIdx = strLen - 1;
",4,1,0,0,0,0,0,0,0,5,25,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4387,"        String ret = str.substring(0, lastIdx);
",2,0,0,1,2,0,6,2,0,10,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4388,"        char last = str.charAt(lastIdx);
",2,0,0,1,2,0,6,0,0,8,32,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4389,"        if (last == CharUtils.LF) {
",6,1,0,1,3,0,0,0,0,7,27,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4390,"            if (ret.charAt(lastIdx - 1) == CharUtils.CR) {
",6,2,0,2,5,0,4,0,0,12,46,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4391,"                return ret.substring(0, lastIdx - 1);
",2,1,0,1,2,0,4,0,0,7,37,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4394,"        return ret;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4423,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4424,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4426,"        if (repeat <= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4427,"            return EMPTY;
",2,0,0,0,0,0,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4429,"        int inputLength = str.length();
",2,0,0,1,2,0,4,0,0,6,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4430,"        if (repeat == 1 || inputLength == 0) {
",4,3,0,1,3,0,0,0,0,7,38,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4431,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4433,"        if (inputLength == 1 && repeat <= PAD_LIMIT) {
",6,3,0,1,3,0,0,0,0,9,46,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4434,"            return padding(repeat, str.charAt(0));
",0,0,0,2,4,0,8,0,0,8,38,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4437,"        int outputLength = inputLength * repeat;
",6,1,0,0,0,0,0,0,0,7,40,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4438,"        switch (inputLength) {
",2,0,0,1,3,0,0,0,0,2,22,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4440,"                char ch = str.charAt(0);
",2,0,0,1,2,0,4,0,0,6,24,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4441,"                char[] output1 = new char[outputLength];
",2,0,1,2,4,0,0,0,0,4,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4442,"                for (int i = repeat - 1; i >= 0; i--) {
",8,2,0,1,3,0,0,0,0,11,39,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4443,"                    output1[i] = ch;
",2,0,1,1,2,0,0,0,0,7,16,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4445,"                return new String(output1);
",2,0,0,1,2,0,0,2,0,4,27,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4447,"                char ch0 = str.charAt(0);
",2,0,0,1,2,0,4,0,0,6,25,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4448,"                char ch1 = str.charAt(1);
",2,0,0,1,2,0,4,0,0,6,25,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4449,"                char[] output2 = new char[outputLength];
",2,0,1,2,4,0,0,0,0,4,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4450,"                for (int i = repeat * 2 - 2; i >= 0; i--, i--) {
",10,3,0,1,3,0,0,0,0,15,48,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4451,"                    output2[i] = ch0;
",2,0,1,1,2,0,0,0,0,7,17,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4452,"                    output2[i + 1] = ch1;
",4,1,1,1,2,0,0,0,0,8,21,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4454,"                return new String(output2);
",2,0,0,1,2,0,0,2,0,4,27,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4456,"                StringBuilder buf = new StringBuilder(outputLength);
",4,0,0,1,2,0,0,4,0,8,52,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4457,"                for (int i = 0; i < repeat; i++) {
",8,1,0,1,3,0,0,0,0,10,34,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4458,"                    buf.append(str);
",0,0,0,1,2,0,6,0,0,6,16,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4460,"                return buf.toString();
",0,0,0,1,2,0,4,0,0,4,22,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4485,"        if(str == null || separator == null) {
",4,3,0,1,3,0,0,0,0,7,38,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4486,"            return repeat(str, repeat);
",0,0,0,1,2,0,6,0,0,6,27,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4489,"            String result = repeat(str + separator, repeat);
",6,1,0,1,2,0,4,2,0,13,48,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4490,"            return removeEnd(result, separator);
",0,0,0,1,2,0,6,0,0,6,36,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4518,"        if (repeat < 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4519,"            throw new IndexOutOfBoundsException(""Cannot pad a negative amount: "" + repeat);
",2,1,0,1,2,0,0,2,0,6,79,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4521,"        final char[] buf = new char[repeat];
",2,0,1,2,4,1,0,0,0,5,36,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4522,"        for (int i = 0; i < buf.length; i++) {
",10,1,0,1,3,0,0,0,0,12,38,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4523,"            buf[i] = padChar;
",2,0,1,1,2,0,0,0,0,7,17,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4525,"        return new String(buf);
",2,0,0,1,2,0,0,2,0,4,23,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4548,"        return rightPad(str, size, ' ');
",0,0,0,1,2,0,6,0,0,7,32,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4573,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4574,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4576,"        int pads = size - str.length();
",4,1,0,1,2,0,4,0,0,9,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4577,"        if (pads <= 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4578,"            return str; // returns original String when possible
",2,0,0,0,0,0,0,0,0,2,52,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4580,"        if (pads > PAD_LIMIT) {
",4,1,0,1,3,0,0,0,0,5,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4581,"            return rightPad(str, size, String.valueOf(padChar));
",0,0,0,2,4,0,12,0,0,12,52,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4583,"        return str.concat(padding(pads, padChar));
",0,0,0,2,4,0,10,0,0,10,42,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4610,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4611,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4613,"        if (isEmpty(padStr)) {
",0,0,0,2,5,0,4,0,0,4,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4614,"            padStr = "" "";
",2,0,0,0,0,0,0,0,0,4,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4616,"        int padLen = padStr.length();
",2,0,0,1,2,0,4,0,0,6,29,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4617,"        int strLen = str.length();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4618,"        int pads = size - strLen;
",6,1,0,0,0,0,0,0,0,7,25,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4619,"        if (pads <= 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4620,"            return str; // returns original String when possible
",2,0,0,0,0,0,0,0,0,2,52,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4622,"        if (padLen == 1 && pads <= PAD_LIMIT) {
",6,3,0,1,3,0,0,0,0,9,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4623,"            return rightPad(str, size, padStr.charAt(0));
",0,0,0,2,4,0,10,0,0,10,45,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4626,"        if (pads == padLen) {
",4,1,0,1,3,0,0,0,0,5,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4627,"            return str.concat(padStr);
",0,0,0,1,2,0,6,0,0,6,26,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4628,"        } else if (pads < padLen) {
",4,1,0,1,4,0,0,0,0,5,27,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4629,"            return str.concat(padStr.substring(0, pads));
",0,0,0,2,4,0,10,0,0,10,45,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4631,"            char[] padding = new char[pads];
",2,0,1,2,4,0,0,0,0,4,32,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4632,"            char[] padChars = padStr.toCharArray();
",2,0,0,2,4,0,4,0,0,6,39,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4633,"            for (int i = 0; i < pads; i++) {
",8,1,0,1,3,0,0,0,0,10,32,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4634,"                padding[i] = padChars[i % padLen];
",4,1,1,2,4,0,0,0,0,12,34,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4636,"            return str.concat(new String(padding));
",2,0,0,2,4,0,4,2,0,8,39,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4660,"        return leftPad(str, size, ' ');
",0,0,0,1,2,0,6,0,0,7,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4685,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4686,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4688,"        int pads = size - str.length();
",4,1,0,1,2,0,4,0,0,9,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4689,"        if (pads <= 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4690,"            return str; // returns original String when possible
",2,0,0,0,0,0,0,0,0,2,52,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4692,"        if (pads > PAD_LIMIT) {
",4,1,0,1,3,0,0,0,0,5,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4693,"            return leftPad(str, size, String.valueOf(padChar));
",0,0,0,2,4,0,12,0,0,12,51,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4695,"        return padding(pads, padChar).concat(str);
",0,0,0,2,4,0,10,0,0,10,42,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4722,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4723,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4725,"        if (isEmpty(padStr)) {
",0,0,0,2,5,0,4,0,0,4,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4726,"            padStr = "" "";
",2,0,0,0,0,0,0,0,0,4,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4728,"        int padLen = padStr.length();
",2,0,0,1,2,0,4,0,0,6,29,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4729,"        int strLen = str.length();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4730,"        int pads = size - strLen;
",6,1,0,0,0,0,0,0,0,7,25,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4731,"        if (pads <= 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4732,"            return str; // returns original String when possible
",2,0,0,0,0,0,0,0,0,2,52,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4734,"        if (padLen == 1 && pads <= PAD_LIMIT) {
",6,3,0,1,3,0,0,0,0,9,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4735,"            return leftPad(str, size, padStr.charAt(0));
",0,0,0,2,4,0,10,0,0,10,44,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4738,"        if (pads == padLen) {
",4,1,0,1,3,0,0,0,0,5,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4739,"            return padStr.concat(str);
",0,0,0,1,2,0,6,0,0,6,26,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4740,"        } else if (pads < padLen) {
",4,1,0,1,4,0,0,0,0,5,27,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4741,"            return padStr.substring(0, pads).concat(str);
",0,0,0,2,4,0,10,0,0,10,45,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4743,"            char[] padding = new char[pads];
",2,0,1,2,4,0,0,0,0,4,32,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4744,"            char[] padChars = padStr.toCharArray();
",2,0,0,2,4,0,4,0,0,6,39,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4745,"            for (int i = 0; i < pads; i++) {
",8,1,0,1,3,0,0,0,0,10,32,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4746,"                padding[i] = padChars[i % padLen];
",4,1,1,2,4,0,0,0,0,12,34,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4748,"            return new String(padding).concat(str);
",2,0,0,2,4,0,4,2,0,8,39,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4764,"        return cs == null ? 0 : cs.length();
",2,1,0,1,2,0,4,0,0,7,36,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4793,"        return center(str, size, ' ');
",0,0,0,1,2,0,6,0,0,7,30,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4821,"        if (str == null || size <= 0) {
",4,3,0,1,3,0,0,0,0,7,31,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4822,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4824,"        int strLen = str.length();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4825,"        int pads = size - strLen;
",6,1,0,0,0,0,0,0,0,7,25,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4826,"        if (pads <= 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4827,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4829,"        str = leftPad(str, strLen + pads / 2, padChar);
",6,2,0,1,2,0,6,0,0,15,47,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4830,"        str = rightPad(str, size, padChar);
",2,0,0,1,2,0,8,0,0,11,35,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4831,"        return str;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4861,"        if (str == null || size <= 0) {
",4,3,0,1,3,0,0,0,0,7,31,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4862,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4864,"        if (isEmpty(padStr)) {
",0,0,0,2,5,0,4,0,0,4,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4865,"            padStr = "" "";
",2,0,0,0,0,0,0,0,0,4,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4867,"        int strLen = str.length();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4868,"        int pads = size - strLen;
",6,1,0,0,0,0,0,0,0,7,25,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4869,"        if (pads <= 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4870,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4872,"        str = leftPad(str, strLen + pads / 2, padStr);
",6,2,0,1,2,0,6,0,0,15,46,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4873,"        str = rightPad(str, size, padStr);
",2,0,0,1,2,0,8,0,0,11,34,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4874,"        return str;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4899,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4900,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4902,"        return str.toUpperCase();
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4922,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4923,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4925,"        return str.toUpperCase(locale);
",0,0,0,1,2,0,6,0,0,6,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4948,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4949,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4951,"        return str.toLowerCase();
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4971,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4972,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4974,"        return str.toLowerCase(locale);
",0,0,0,1,2,0,6,0,0,6,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,4999,"        if (cs == null ) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5000,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5003,"        if ((strLen = cs.length()) == 0) {
",2,1,0,3,7,0,4,0,0,8,34,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5004,"            return cs.toString();
",0,0,0,1,2,0,4,0,0,4,21,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5006,"        return new StringBuilder(strLen)
",2,0,0,1,2,0,0,2,0,4,32,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5034,"        if (cs == null ) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5035,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5038,"        if ((strLen = cs.length()) == 0) {
",2,1,0,3,7,0,4,0,0,8,34,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5039,"            return cs.toString();
",0,0,0,1,2,0,4,0,0,4,21,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5041,"        return new StringBuilder(strLen)
",2,0,0,1,2,0,0,2,0,4,32,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5076,"        if (str == null || (strLen = str.length()) == 0) {
",4,3,0,3,7,0,4,0,0,12,50,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5077,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5079,"        StringBuilder buffer = new StringBuilder(strLen);
",4,0,0,1,2,0,0,4,0,8,49,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5081,"        char ch = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5082,"        for (int i = 0; i < strLen; i++) {
",8,1,0,1,3,0,0,0,0,10,34,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5083,"            ch = str.charAt(i);
",2,0,0,1,2,0,6,0,0,9,19,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5084,"            if (Character.isUpperCase(ch)) {
",0,0,0,2,5,0,6,0,0,6,32,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5085,"                ch = Character.toLowerCase(ch);
",2,0,0,1,2,0,6,0,0,9,31,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5086,"            } else if (Character.isTitleCase(ch)) {
",0,0,0,2,6,0,6,0,0,6,39,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5087,"                ch = Character.toLowerCase(ch);
",2,0,0,1,2,0,6,0,0,9,31,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5088,"            } else if (Character.isLowerCase(ch)) {
",0,0,0,2,6,0,6,0,0,6,39,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5089,"                ch = Character.toUpperCase(ch);
",2,0,0,1,2,0,6,0,0,9,31,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5091,"            buffer.append(ch);
",0,0,0,1,2,0,6,0,0,6,18,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5093,"        return buffer.toString();
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5118,"        if (isEmpty(str) || isEmpty(sub)) {
",0,1,0,3,7,0,8,0,0,9,35,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5119,"            return 0;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5121,"        int count = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5122,"        int idx = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5123,"        while ((idx = str.indexOf(sub, idx)) != INDEX_NOT_FOUND) {
",4,1,0,3,7,0,8,0,0,14,58,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5124,"            count++;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5125,"            idx += sub.length();
",2,0,0,1,2,0,4,0,0,7,20,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5127,"        return count;
",2,0,0,0,0,0,0,0,0,2,13,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5152,"        if (cs == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5153,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5155,"        int sz = cs.length();
",2,0,0,1,2,0,4,0,0,6,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5156,"        for (int i = 0; i < sz; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5157,"            if (Character.isLetter(cs.charAt(i)) == false) {
",0,1,0,3,7,0,10,0,0,12,48,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5158,"                return false;
",0,0,0,0,0,0,0,0,0,1,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5161,"        return true;
",0,0,0,0,0,0,0,0,0,1,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5187,"        if (cs == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5188,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5190,"        int sz = cs.length();
",2,0,0,1,2,0,4,0,0,6,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5191,"        for (int i = 0; i < sz; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5192,"            if ((Character.isLetter(cs.charAt(i)) == false) && (cs.charAt(i) != ' ')) {
",0,3,0,6,13,0,16,0,0,21,75,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5193,"                return false;
",0,0,0,0,0,0,0,0,0,1,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5196,"        return true;
",0,0,0,0,0,0,0,0,0,1,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5221,"        if (cs == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5222,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5224,"        int sz = cs.length();
",2,0,0,1,2,0,4,0,0,6,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5225,"        for (int i = 0; i < sz; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5226,"            if (Character.isLetterOrDigit(cs.charAt(i)) == false) {
",0,1,0,3,7,0,10,0,0,12,55,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5227,"                return false;
",0,0,0,0,0,0,0,0,0,1,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5230,"        return true;
",0,0,0,0,0,0,0,0,0,1,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5256,"        if (cs == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5257,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5259,"        int sz = cs.length();
",2,0,0,1,2,0,4,0,0,6,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5260,"        for (int i = 0; i < sz; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5261,"            if ((Character.isLetterOrDigit(cs.charAt(i)) == false) && (cs.charAt(i) != ' ')) {
",0,3,0,6,13,0,16,0,0,21,82,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5262,"                return false;
",0,0,0,0,0,0,0,0,0,1,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5265,"        return true;
",0,0,0,0,0,0,0,0,0,1,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5295,"        if (cs == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5296,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5298,"        int sz = cs.length();
",2,0,0,1,2,0,4,0,0,6,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5299,"        for (int i = 0; i < sz; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5300,"            if (CharUtils.isAsciiPrintable(cs.charAt(i)) == false) {
",0,1,0,3,7,0,10,0,0,12,56,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5301,"                return false;
",0,0,0,0,0,0,0,0,0,1,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5304,"        return true;
",0,0,0,0,0,0,0,0,0,1,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5330,"        if (cs == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5331,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5333,"        int sz = cs.length();
",2,0,0,1,2,0,4,0,0,6,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5334,"        for (int i = 0; i < sz; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5335,"            if (Character.isDigit(cs.charAt(i)) == false) {
",0,1,0,3,7,0,10,0,0,12,47,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5336,"                return false;
",0,0,0,0,0,0,0,0,0,1,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5339,"        return true;
",0,0,0,0,0,0,0,0,0,1,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5367,"        if (cs == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5368,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5370,"        int sz = cs.length();
",2,0,0,1,2,0,4,0,0,6,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5371,"        for (int i = 0; i < sz; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5372,"            if ((Character.isDigit(cs.charAt(i)) == false) && (cs.charAt(i) != ' ')) {
",0,3,0,6,13,0,16,0,0,21,74,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5373,"                return false;
",0,0,0,0,0,0,0,0,0,1,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5376,"        return true;
",0,0,0,0,0,0,0,0,0,1,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5400,"        if (cs == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5401,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5403,"        int sz = cs.length();
",2,0,0,1,2,0,4,0,0,6,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5404,"        for (int i = 0; i < sz; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5405,"            if ((Character.isWhitespace(cs.charAt(i)) == false)) {
",0,1,0,4,9,0,10,0,0,12,54,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5406,"                return false;
",0,0,0,0,0,0,0,0,0,1,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5409,"        return true;
",0,0,0,0,0,0,0,0,0,1,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5432,"        if (cs == null || isEmpty(cs)) {
",2,2,0,2,5,0,4,0,0,9,32,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5433,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5435,"        int sz = cs.length();
",2,0,0,1,2,0,4,0,0,6,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5436,"        for (int i = 0; i < sz; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5437,"            if (Character.isLowerCase(cs.charAt(i)) == false) {
",0,1,0,3,7,0,10,0,0,12,51,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5438,"                return false;
",0,0,0,0,0,0,0,0,0,1,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5441,"        return true;
",0,0,0,0,0,0,0,0,0,1,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5464,"        if (cs == null || isEmpty(cs)) {
",2,2,0,2,5,0,4,0,0,9,32,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5465,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5467,"        int sz = cs.length();
",2,0,0,1,2,0,4,0,0,6,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5468,"        for (int i = 0; i < sz; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5469,"            if (Character.isUpperCase(cs.charAt(i)) == false) {
",0,1,0,3,7,0,10,0,0,12,51,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5470,"                return false;
",0,0,0,0,0,0,0,0,0,1,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5473,"        return true;
",0,0,0,0,0,0,0,0,0,1,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5495,"        return str == null ? EMPTY : str;
",6,1,0,0,0,0,0,0,0,7,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5516,"        return str == null ? defaultStr : str;
",6,1,0,0,0,0,0,0,0,7,38,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5538,"        return StringUtils.isBlank(str) ? defaultStr : str;
",4,0,0,1,2,0,6,0,0,10,51,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5559,"        return StringUtils.isEmpty(str) ? defaultStr : str;
",4,0,0,1,2,0,6,0,0,10,51,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5579,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5580,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5582,"        return new StringBuilder(str).reverse().toString();
",2,0,0,3,6,0,4,2,0,8,51,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5605,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5606,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5610,"        String[] strs = split(str, separatorChar);
",2,0,0,2,4,0,6,2,0,10,42,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5611,"        ArrayUtils.reverse(strs);
",0,0,0,1,2,0,6,0,0,6,25,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5612,"        return join(strs, separatorChar);
",0,0,0,1,2,0,6,0,0,6,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5650,"        return abbreviate(str, 0, maxWidth);
",0,0,0,1,2,0,6,0,0,6,36,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5689,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5690,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5692,"        if (maxWidth < 4) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5693,"            throw new IllegalArgumentException(""Minimum abbreviation width is 4"");
",0,0,0,1,2,0,0,2,0,3,70,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5695,"        if (str.length() <= maxWidth) {
",2,1,0,2,5,0,4,0,0,7,31,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5696,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5698,"        if (offset > str.length()) {
",2,1,0,2,5,0,4,0,0,7,28,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5699,"            offset = str.length();
",2,0,0,1,2,0,4,0,0,7,22,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5701,"        if ((str.length() - offset) < (maxWidth - 3)) {
",4,3,0,4,9,0,4,0,0,11,47,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5702,"            offset = str.length() - (maxWidth - 3);
",4,2,0,2,4,0,4,0,0,11,39,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5704,"        final String abrevMarker = ""..."";
",2,0,0,0,0,1,0,2,0,6,33,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5705,"        if (offset <= 4) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5706,"            return str.substring(0, maxWidth - 3) + abrevMarker;
",4,2,0,1,2,0,4,0,0,10,52,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5708,"        if (maxWidth < 7) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5709,"            throw new IllegalArgumentException(""Minimum abbreviation width with offset is 7"");
",0,0,0,1,2,0,0,2,0,3,82,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5711,"        if ((offset + (maxWidth - 3)) < str.length()) {
",4,3,0,4,9,0,4,0,0,11,47,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5712,"            return abrevMarker + abbreviate(str.substring(offset), maxWidth - 3);
",4,2,0,2,4,0,8,0,0,14,69,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5714,"        return abrevMarker + str.substring(str.length() - (maxWidth - 3));
",4,3,0,3,6,0,8,0,0,15,66,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5747,"        if (isEmpty(str) || isEmpty(middle)) {
",0,1,0,3,7,0,8,0,0,9,38,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5748,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5751,"        if (length >= str.length() || length < (middle.length()+2)) {
",4,4,0,4,9,0,8,0,0,16,61,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5752,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5755,"        int targetSting = length-middle.length();
",4,1,0,1,2,0,4,0,0,9,41,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5756,"        int startOffset = targetSting/2+targetSting%2;
",6,3,0,0,0,0,0,0,0,9,46,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5757,"        int endOffset = str.length()-targetSting/2;
",4,2,0,1,2,0,4,0,0,10,43,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5759,"        StringBuilder builder = new StringBuilder(length);
",4,0,0,1,2,0,0,4,0,8,50,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5760,"        builder.append(str.substring(0,startOffset));
",0,0,0,2,4,0,10,0,0,10,45,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5761,"        builder.append(middle);
",0,0,0,1,2,0,6,0,0,6,23,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5762,"        builder.append(str.substring(endOffset));
",0,0,0,2,4,0,10,0,0,10,41,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5764,"        return builder.toString();
",0,0,0,1,2,0,4,0,0,4,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5795,"        if (str1 == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5796,"            return str2;
",2,0,0,0,0,0,0,0,0,2,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5798,"        if (str2 == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5799,"            return str1;
",2,0,0,0,0,0,0,0,0,2,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5801,"        int at = indexOfDifference(str1, str2);
",2,0,0,1,2,0,6,0,0,8,39,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5802,"        if (at == INDEX_NOT_FOUND) {
",4,1,0,1,3,0,0,0,0,5,28,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5803,"            return EMPTY;
",2,0,0,0,0,0,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5805,"        return str2.substring(at);
",0,0,0,1,2,0,6,0,0,6,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5833,"        if (cs1 == cs2) {
",4,1,0,1,3,0,0,0,0,5,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5834,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,0,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5836,"        if (cs1 == null || cs2 == null) {
",4,3,0,1,3,0,0,0,0,7,33,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5837,"            return 0;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5840,"        for (i = 0; i < cs1.length() && i < cs2.length(); ++i) {
",8,3,0,3,7,0,8,0,0,21,56,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5841,"            if (cs1.charAt(i) != cs2.charAt(i)) {
",0,1,0,3,7,0,12,0,0,13,37,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5842,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5845,"        if (i < cs2.length() || i < cs1.length()) {
",4,3,0,3,7,0,8,0,0,15,43,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5846,"            return i;
",2,0,0,0,0,0,0,0,0,2,9,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5848,"        return INDEX_NOT_FOUND;
",2,0,0,0,0,0,0,0,0,2,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5884,"        if (css == null || css.length <= 1) {
",6,3,0,1,3,0,0,0,0,9,37,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5885,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,0,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5887,"        boolean anyStringNull = false;
",2,0,0,0,0,0,0,0,0,3,30,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5888,"        boolean allStringsNull = true;
",2,0,0,0,0,0,0,0,0,3,30,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5889,"        int arrayLen = css.length;
",6,0,0,0,0,0,0,0,0,6,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5890,"        int shortestStrLen = Integer.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,6,39,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5891,"        int longestStrLen = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5896,"        for (int i = 0; i < arrayLen; i++) {
",8,1,0,1,3,0,0,0,0,10,36,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5897,"            if (css[i] == null) {
",0,1,1,2,5,0,0,0,0,5,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5898,"                anyStringNull = true;
",2,0,0,0,0,0,0,0,0,4,21,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5899,"                shortestStrLen = 0;
",2,0,0,0,0,0,0,0,0,3,19,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5901,"                allStringsNull = false;
",2,0,0,0,0,0,0,0,0,4,23,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5902,"                shortestStrLen = Math.min(css[i].length(), shortestStrLen);
",2,0,1,3,6,0,8,0,0,15,59,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5903,"                longestStrLen = Math.max(css[i].length(), longestStrLen);
",2,0,1,3,6,0,8,0,0,15,57,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5908,"        if (allStringsNull || (longestStrLen == 0 && !anyStringNull)) {
",6,3,0,2,5,0,0,0,0,10,63,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5909,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,0,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5913,"        if (shortestStrLen == 0) {
",2,1,0,1,3,0,0,0,0,3,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5914,"            return 0;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5918,"        int firstDiff = -1;
",2,0,0,0,0,0,0,0,0,3,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5919,"        for (int stringPos = 0; stringPos < shortestStrLen; stringPos++) {
",8,1,0,1,3,0,0,0,0,10,66,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5920,"            char comparisonChar = css[0].charAt(stringPos);
",2,0,1,2,4,0,4,0,0,8,47,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5921,"            for (int arrayPos = 1; arrayPos < arrayLen; arrayPos++) {
",8,1,0,1,3,0,0,0,0,10,57,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5922,"                if (css[arrayPos].charAt(stringPos) != comparisonChar) {
",2,1,1,3,7,0,4,0,0,11,56,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5923,"                    firstDiff = stringPos;
",4,0,0,0,0,0,0,0,0,5,22,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5924,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5927,"            if (firstDiff != -1) {
",2,1,0,1,3,0,0,0,0,4,22,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5928,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5932,"        if (firstDiff == -1 && shortestStrLen != longestStrLen) {
",6,3,0,1,3,0,0,0,0,10,57,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5936,"            return shortestStrLen;
",2,0,0,0,0,0,0,0,0,2,22,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5938,"        return firstDiff;
",2,0,0,0,0,0,0,0,0,2,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5975,"        if (strs == null || strs.length == 0) {
",6,3,0,1,3,0,0,0,0,9,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5976,"            return EMPTY;
",2,0,0,0,0,0,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5978,"        int smallestIndexOfDiff = indexOfDifference(strs);
",2,0,0,1,2,0,4,0,0,6,50,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5979,"        if (smallestIndexOfDiff == INDEX_NOT_FOUND) {
",4,1,0,1,3,0,0,0,0,5,45,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5981,"            if (strs[0] == null) {
",0,1,1,2,5,0,0,0,0,3,22,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5982,"                return EMPTY;
",2,0,0,0,0,0,0,0,0,2,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5984,"            return strs[0];
",0,0,1,1,2,0,0,0,0,2,15,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5985,"        } else if (smallestIndexOfDiff == 0) {
",2,1,0,1,4,0,0,0,0,3,38,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5987,"            return EMPTY;
",2,0,0,0,0,0,0,0,0,2,13,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,5990,"            return strs[0].substring(0, smallestIndexOfDiff);
",0,0,1,2,4,0,4,0,0,6,49,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6032,"        if (s == null || t == null) {
",4,3,0,1,3,0,0,0,0,7,29,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6033,"            throw new IllegalArgumentException(""Strings must not be null"");
",0,0,0,1,2,0,0,2,0,4,63,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6053,"        int n = s.length(); // length of s
",2,0,0,1,2,0,4,0,0,6,34,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6054,"        int m = t.length(); // length of t
",2,0,0,1,2,0,4,0,0,6,34,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6056,"        if (n == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6057,"            return m;
",2,0,0,0,0,0,0,0,0,2,9,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6058,"        } else if (m == 0) {
",2,1,0,1,4,0,0,0,0,3,20,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6059,"            return n;
",2,0,0,0,0,0,0,0,0,2,9,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6062,"        if (n > m) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6064,"            CharSequence tmp = s;
",4,0,0,0,0,0,0,2,0,6,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6065,"            s = t;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6066,"            t = tmp;
",4,0,0,0,0,0,0,0,0,5,8,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6067,"            n = m;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6068,"            m = t.length();
",2,0,0,1,2,0,4,0,0,7,15,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6071,"        int p[] = new int[n+1]; //'previous' cost array, horizontally
",4,1,0,2,4,0,0,0,0,5,61,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6072,"        int d[] = new int[n+1]; // cost array, horizontally
",4,1,0,2,4,0,0,0,0,5,51,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6083,"        for (i = 0; i<=n; i++) {
",8,1,0,1,3,0,0,0,0,11,24,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6084,"            p[i] = i;
",2,0,1,1,2,0,0,0,0,7,9,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6087,"        for (j = 1; j<=m; j++) {
",8,1,0,1,3,0,0,0,0,11,24,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6088,"            t_j = t.charAt(j-1);
",4,1,0,1,2,0,4,0,0,10,20,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6089,"            d[0] = j;
",2,0,1,1,2,0,0,0,0,5,9,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6091,"            for (i=1; i<=n; i++) {
",8,1,0,1,3,0,0,0,0,11,22,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6092,"                cost = s.charAt(i-1)==t_j ? 0 : 1;
",6,2,0,1,2,0,4,0,0,13,34,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6094,"                d[i] = Math.min(Math.min(d[i-1]+1, p[i]+1),  p[i-1]+cost);
",6,5,1,6,12,0,8,0,0,32,58,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6098,"            _d = p;
",4,0,0,0,0,0,0,0,0,5,7,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6099,"            p = d;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6100,"            d = _d;
",4,0,0,0,0,0,0,0,0,5,7,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6105,"        return p[n];
",0,0,1,1,2,0,0,0,0,4,12,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6133,"        return startsWith(str, prefix, false);
",0,0,0,1,2,0,6,0,0,7,38,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6158,"        return startsWith(str, prefix, true);
",0,0,0,1,2,0,6,0,0,7,37,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6173,"        if (str == null || prefix == null) {
",4,3,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6174,"            return (str == null && prefix == null);
",4,3,0,1,2,0,0,0,0,7,39,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6176,"        if (prefix.length() > str.length()) {
",0,1,0,3,7,0,8,0,0,9,37,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6177,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6179,"        return str.regionMatches(ignoreCase, 0, prefix, 0, prefix.length());
",0,0,0,2,4,0,12,0,0,12,68,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6201,"        if (isEmpty(string) || ArrayUtils.isEmpty(searchStrings)) {
",0,1,0,3,7,0,10,0,0,11,59,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6202,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6204,"        for (int i = 0; i < searchStrings.length; i++) {
",10,1,0,1,3,0,0,0,0,12,48,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6205,"            String searchString = searchStrings[i];
",2,0,1,1,2,0,0,2,0,8,39,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6206,"            if (StringUtils.startsWith(string, searchString)) {
",0,0,0,2,5,0,8,0,0,8,51,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6207,"                return true;
",0,0,0,0,0,0,0,0,0,1,12,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6210,"        return false;
",0,0,0,0,0,0,0,0,0,1,13,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6239,"        return endsWith(str, suffix, false);
",0,0,0,1,2,0,6,0,0,7,36,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6265,"        return endsWith(str, suffix, true);
",0,0,0,1,2,0,6,0,0,7,35,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6280,"        if (str == null || suffix == null) {
",4,3,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6281,"            return str == null && suffix == null;
",4,3,0,0,0,0,0,0,0,7,37,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6283,"        if (suffix.length() > str.length()) {
",0,1,0,3,7,0,8,0,0,9,37,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6284,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6286,"        int strOffset = str.length() - suffix.length();
",2,1,0,2,4,0,8,0,0,11,47,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6287,"        return str.regionMatches(ignoreCase, strOffset, suffix, 0, suffix.length());
",0,0,0,2,4,0,14,0,0,14,76,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6332,"        if(str == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6333,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6335,"        return WHITESPACE_BLOCK.matcher(trim(str)).replaceAll("" "");         
",0,0,0,3,6,0,10,0,0,11,59,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6357,"        if (isEmpty(string) || ArrayUtils.isEmpty(searchStrings)) {
",0,1,0,3,7,0,10,0,0,11,59,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6358,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6360,"        for (int i = 0; i < searchStrings.length; i++) {
",10,1,0,1,3,0,0,0,0,12,48,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6361,"            String searchString = searchStrings[i];
",2,0,1,1,2,0,0,2,0,8,39,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6362,"            if (StringUtils.endsWith(string, searchString)) {
",0,0,0,2,5,0,8,0,0,8,49,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6363,"                return true;
",0,0,0,0,0,0,0,0,0,1,12,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,24,6366,"        return false;
",0,0,0,0,0,0,0,0,0,1,13,4,0.00000,0
