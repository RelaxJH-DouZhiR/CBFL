dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,180,"        return parsePattern;
",2,0,0,0,0,0,0,0,0,2,20,4,1.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,260,"        return date;
",2,0,0,0,0,0,0,0,0,2,12,4,0.10526,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,732,"            cal.set(field, modify(Integer.parseInt(value)));
",0,0,0,3,6,0,14,0,0,14,48,6,0.10256,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,733,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.10256,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,741,"            return iValue;
",2,0,0,0,0,0,0,0,0,2,14,5,0.10256,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,282,"        Calendar cal= Calendar.getInstance(timeZone, locale);
",2,0,0,1,2,0,8,2,0,12,53,4,0.10256,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,283,"        cal.clear();
",0,0,0,1,2,0,4,0,0,4,12,5,0.10256,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,285,"        for(int i=0; i<strategies.length;) {
",8,1,0,1,3,0,0,0,0,9,36,4,0.10256,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,286,"            Strategy strategy= strategies[i++];
",4,0,1,1,2,0,0,2,0,9,35,6,0.10256,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,287,"            strategy.setCalendar(this, cal, matcher.group(i));
",0,0,0,2,4,0,12,0,0,12,50,7,0.10256,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,288,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.10256,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,289,"        pos.setIndex(offset+matcher.end());
",2,1,0,2,4,0,8,0,0,11,35,5,0.10256,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,290,"        return cal.getTime();
",0,0,0,1,2,0,4,0,0,4,21,5,0.10256,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,250,"        Date date= parse(source, new ParsePosition(0));
",2,0,0,2,4,0,4,4,0,10,47,4,0.10000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,251,"        if(date==null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.10000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,276,"        int offset= pos.getIndex();
",2,0,0,1,2,0,4,0,0,6,27,5,0.09756,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,277,"        Matcher matcher= parsePattern.matcher(source.substring(offset));
",2,0,0,2,4,0,10,2,0,14,64,4,0.09756,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,278,"        if(!matcher.lookingAt()) {
",0,0,0,2,5,0,4,0,0,5,26,4,0.09756,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,537,"            if(formatField.length()>2) {
",0,1,0,2,5,0,4,0,0,5,28,5,0.07692,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,538,"                formatField= formatField.substring(1, formatField.length()-1);
",2,1,0,2,4,0,8,0,0,12,62,7,0.07692,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,359,"            return new UnpaddedNumberField(field);
",2,0,0,1,2,0,0,2,0,4,38,6,0.05000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,707,"        UnpaddedNumberField(int field) {
",4,0,0,1,3,0,0,0,0,4,32,3,0.05000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,708,"            mField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.05000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,709,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,716,"            return 4;
",0,0,0,0,0,0,0,0,0,0,9,3,0.05000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,9,472,"        return parser.parse(source);
",0,0,0,1,2,0,6,0,0,6,28,5,0.04762,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,566,"            return DAY_OF_MONTH_STRATEGY;
",2,0,0,0,0,0,0,0,0,2,29,5,0.03960,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,145,"            collector.add(currentStrategy);
",0,0,0,1,2,0,6,0,0,6,31,7,0.03774,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,304,"        for(int i= 0; i<value.length(); ++i) {
",6,1,0,2,5,0,4,0,0,12,38,4,0.03670,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,305,"            char c= value.charAt(i);
",2,0,0,1,2,0,6,0,0,8,24,7,0.03670,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,306,"            switch(c) {
",2,0,0,1,3,0,0,0,0,2,11,6,0.03670,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,331,"            regex.append(c);
",0,0,0,1,2,0,6,0,0,6,16,7,0.03670,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,333,"        return regex;
",2,0,0,0,0,0,0,0,0,2,13,4,0.03670,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,542,"            return new CopyQuotedStrategy(formatField);
",2,0,0,1,2,0,0,2,0,4,43,6,0.03670,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,68,"public class FastDateParser implements DateParser, Serializable {
",2,0,0,0,1,1,0,4,0,7,65,1,0.03670,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,603,"        CopyQuotedStrategy(String formatField) {
",4,0,0,1,3,0,0,2,0,6,40,3,0.03670,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,604,"            this.formatField= formatField;
",4,0,0,0,0,0,0,0,0,5,30,5,0.03670,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,605,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03670,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,624,"            escapeRegex(regex, formatField, true);
",0,0,0,1,2,0,6,0,0,7,38,6,0.03670,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,625,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,5,0.03670,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,718,"            if(parser.isNextNumber()) {
",0,0,0,2,5,0,4,0,0,4,27,6,0.03604,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,722,"                regex.append(""(\\p{IsNd}++)"");
",0,0,0,3,6,0,4,0,0,5,30,8,0.03604,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,724,"            return true;
",0,0,0,0,0,0,0,0,0,1,12,5,0.03604,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,104,"    protected FastDateParser(String pattern, TimeZone timeZone, Locale locale) {
",8,0,0,1,3,1,0,6,0,15,76,2,0.03604,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,105,"        this.pattern = pattern;
",4,0,0,0,0,0,0,0,0,5,23,4,0.03604,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,106,"        this.timeZone = timeZone;
",4,0,0,0,0,0,0,0,0,5,25,4,0.03604,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,107,"        this.locale = locale;
",4,0,0,0,0,0,0,0,0,5,21,4,0.03604,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,108,"        init();
",0,0,0,1,2,0,2,0,0,2,7,5,0.03604,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,109,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03604,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,116,"        thisYear= Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);
",6,0,0,2,4,0,10,0,0,17,68,4,0.03604,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,118,"        nameValues= new ConcurrentHashMap<Integer, KeyValue[]>();
",2,0,0,2,4,0,0,6,0,9,57,4,0.03604,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,120,"        StringBuilder regex= new StringBuilder();
",2,0,0,1,2,0,0,4,0,6,41,4,0.03604,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,121,"        List<Strategy> collector = new ArrayList<Strategy>();
",2,0,0,1,2,0,0,8,0,10,53,4,0.03604,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,123,"        Matcher patternMatcher= formatPattern.matcher(pattern);
",2,0,0,1,2,0,6,2,0,10,55,4,0.03604,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,124,"        if(!patternMatcher.lookingAt()) {
",0,0,0,2,5,0,4,0,0,5,33,4,0.03604,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,128,"        currentFormatField= patternMatcher.group();
",2,0,0,1,2,0,4,0,0,7,43,4,0.03604,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,129,"        Strategy currentStrategy= getStrategy(currentFormatField);
",2,0,0,1,2,0,4,2,0,8,58,4,0.03604,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,131,"            patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());
",0,0,0,3,6,0,12,0,0,12,72,7,0.03604,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,132,"            if(!patternMatcher.lookingAt()) {
",0,0,0,2,5,0,4,0,0,5,33,6,0.03604,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,133,"                nextStrategy = null;
",2,0,0,0,0,0,0,0,0,3,20,8,0.03604,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,134,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.03604,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,136,"            String nextFormatField= patternMatcher.group();
",2,0,0,1,2,0,4,2,0,8,47,6,0.03604,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,137,"            nextStrategy = getStrategy(nextFormatField);
",2,0,0,1,2,0,4,0,0,7,44,6,0.03604,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,138,"            if(currentStrategy.addRegex(this, regex)) {
",0,0,0,2,5,0,6,0,0,6,43,7,0.03604,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,141,"            currentFormatField= nextFormatField;
",4,0,0,0,0,0,0,0,0,5,36,6,0.03604,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,142,"            currentStrategy= nextStrategy;
",4,0,0,0,0,0,0,0,0,5,30,6,0.03604,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,143,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03604,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,144,"        if(currentStrategy.addRegex(this, regex)) {
",0,0,0,2,5,0,6,0,0,6,43,5,0.03604,1
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,147,"        currentFormatField= null;
",2,0,0,0,0,0,0,0,0,3,25,4,0.03604,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,148,"        strategies= collector.toArray(new Strategy[collector.size()]);
",2,0,0,3,6,0,8,2,0,13,62,4,0.03604,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,149,"        parsePattern= Pattern.compile(regex.toString());
",2,0,0,2,4,0,8,0,0,11,48,4,0.03604,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,150,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03604,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,485,"        return nextStrategy!=null && nextStrategy.isNumber();
",2,2,0,1,2,0,4,0,0,8,53,4,0.03604,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,535,"        switch(formatField.charAt(0)) {
",0,0,0,2,5,0,4,0,0,4,31,5,0.03604,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,745,"    private static final Strategy ABBREVIATED_YEAR_STRATEGY = new NumberStrategy(Calendar.YEAR) {
",6,0,0,1,3,3,0,4,0,13,93,2,0.03540,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,701,"        NumberStrategy(int field) {
",4,0,0,1,3,0,0,0,0,4,27,3,0.03540,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,702,"             this.field= field;
",4,0,0,0,0,0,0,0,0,5,18,5,0.03540,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,703,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03540,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,76,"    private static final ConcurrentMap<Locale,TimeZoneStrategy> tzsCache=
",2,0,0,0,0,3,0,6,0,11,69,2,0.03540,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,79,"    static final Locale JAPANESE_IMPERIAL = new Locale(""ja"",""JP"",""JP"");
",2,0,0,1,2,2,0,4,0,11,67,2,0.03540,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,357,"    private static final Comparator<KeyValue> IGNORE_CASE_COMPARATOR = new Comparator<KeyValue> () {
",2,0,0,1,3,3,0,8,0,13,96,2,0.03540,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,526,"    private static final Pattern formatPattern= Pattern.compile(
",2,0,0,0,1,3,4,2,0,11,60,2,0.03540,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,745,"    private static final Strategy ABBREVIATED_YEAR_STRATEGY = new NumberStrategy(Calendar.YEAR) {
",6,0,0,1,3,3,0,4,0,13,93,2,0.03540,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,833,"    private static final Strategy ERA_STRATEGY = new TextStrategy(Calendar.ERA);
",6,0,0,1,2,3,0,4,0,13,76,2,0.03540,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,834,"    private static final Strategy DAY_OF_WEEK_STRATEGY = new TextStrategy(Calendar.DAY_OF_WEEK);
",6,0,0,1,2,3,0,4,0,13,92,2,0.03540,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,835,"    private static final Strategy AM_PM_STRATEGY = new TextStrategy(Calendar.AM_PM);
",6,0,0,1,2,3,0,4,0,13,80,2,0.03540,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,836,"    private static final Strategy TEXT_MONTH_STRATEGY = new TextStrategy(Calendar.MONTH);
",6,0,0,1,2,3,0,4,0,13,85,2,0.03540,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,838,"    private static final Strategy NUMBER_MONTH_STRATEGY = new NumberStrategy(Calendar.MONTH) {
",6,0,0,1,3,3,0,4,0,13,90,2,0.03540,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,844,"    private static final Strategy LITERAL_YEAR_STRATEGY = new NumberStrategy(Calendar.YEAR);
",6,0,0,1,2,3,0,4,0,13,88,2,0.03540,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,845,"    private static final Strategy WEEK_OF_YEAR_STRATEGY = new NumberStrategy(Calendar.WEEK_OF_YEAR);
",6,0,0,1,2,3,0,4,0,13,96,2,0.03540,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,846,"    private static final Strategy WEEK_OF_MONTH_STRATEGY = new NumberStrategy(Calendar.WEEK_OF_MONTH);
",6,0,0,1,2,3,0,4,0,13,98,2,0.03540,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,847,"    private static final Strategy DAY_OF_YEAR_STRATEGY = new NumberStrategy(Calendar.DAY_OF_YEAR);
",6,0,0,1,2,3,0,4,0,13,94,2,0.03540,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,848,"    private static final Strategy DAY_OF_MONTH_STRATEGY = new NumberStrategy(Calendar.DAY_OF_MONTH);
",6,0,0,1,2,3,0,4,0,13,96,2,0.03540,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,849,"    private static final Strategy DAY_OF_WEEK_IN_MONTH_STRATEGY = new NumberStrategy(Calendar.DAY_OF_WEEK_IN_MONTH);
",6,0,0,1,2,3,0,4,0,13,112,2,0.03540,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,850,"    private static final Strategy HOUR_OF_DAY_STRATEGY = new NumberStrategy(Calendar.HOUR_OF_DAY);
",6,0,0,1,2,3,0,4,0,13,94,2,0.03540,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,851,"    private static final Strategy MODULO_HOUR_OF_DAY_STRATEGY = new NumberStrategy(Calendar.HOUR_OF_DAY) {
",6,0,0,1,3,3,0,4,0,13,102,2,0.03540,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,857,"    private static final Strategy MODULO_HOUR_STRATEGY = new NumberStrategy(Calendar.HOUR) {
",6,0,0,1,3,3,0,4,0,13,88,2,0.03540,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,863,"    private static final Strategy HOUR_STRATEGY = new NumberStrategy(Calendar.HOUR);
",6,0,0,1,2,3,0,4,0,13,80,2,0.03540,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,864,"    private static final Strategy MINUTE_STRATEGY = new NumberStrategy(Calendar.MINUTE);
",6,0,0,1,2,3,0,4,0,13,84,2,0.03540,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,865,"    private static final Strategy SECOND_STRATEGY = new NumberStrategy(Calendar.SECOND);
",6,0,0,1,2,3,0,4,0,13,84,2,0.03540,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,866,"    private static final Strategy MILLISECOND_STRATEGY = new NumberStrategy(Calendar.MILLISECOND);
",6,0,0,1,2,3,0,4,0,13,94,2,0.03540,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,646,"        TextStrategy(int field) {
",4,0,0,1,3,0,0,0,0,4,25,3,0.03540,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,647,"            this.field= field;
",4,0,0,0,0,0,0,0,0,5,18,5,0.03540,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,648,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03540,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,357,"    private static final Comparator<KeyValue> IGNORE_CASE_COMPARATOR = new Comparator<KeyValue> () {
",2,0,0,1,3,3,0,8,0,13,96,2,0.03540,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,857,"    private static final Strategy MODULO_HOUR_STRATEGY = new NumberStrategy(Calendar.HOUR) {
",6,0,0,1,3,3,0,4,0,13,88,2,0.03540,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,838,"    private static final Strategy NUMBER_MONTH_STRATEGY = new NumberStrategy(Calendar.MONTH) {
",6,0,0,1,3,3,0,4,0,13,90,2,0.03540,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,851,"    private static final Strategy MODULO_HOUR_OF_DAY_STRATEGY = new NumberStrategy(Calendar.HOUR_OF_DAY) {
",6,0,0,1,3,3,0,4,0,13,102,2,0.03540,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,277,"                    rule = new StringLiteral(sub);
",4,0,0,1,2,0,0,2,0,7,30,9,0.02439,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,279,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.02439,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,632,"        StringLiteral(String value) {
",4,0,0,1,3,0,0,2,0,6,29,3,0.02439,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,633,"            mValue = value;
",4,0,0,0,0,0,0,0,0,5,15,5,0.02439,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,634,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02439,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,641,"            return mValue.length();
",0,0,0,1,2,0,4,0,0,4,23,6,0.02439,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,328,"                    if (i + 1 < length && pattern.charAt(i + 1) == '\'') {
",6,5,0,2,5,0,4,0,0,16,54,10,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,333,"                        inLiteral = !inLiteral;
",4,0,0,0,0,0,0,0,0,6,23,12,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,9,165,"        return cache.getInstance(pattern, timeZone, locale);
",0,0,0,1,2,0,10,0,0,10,52,5,0.02041,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,217,"                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);
",6,0,0,1,2,0,4,0,0,11,57,7,0.01282,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,218,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.01282,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,599,"        CharacterLiteral(char value) {
",4,0,0,1,3,0,0,0,0,4,30,3,0.01190,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,600,"            mValue = value;
",4,0,0,0,0,0,0,0,0,5,15,5,0.01190,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,601,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01190,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,608,"            return 1;
",0,0,0,0,0,0,0,0,0,0,9,3,0.01190,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,275,"                    rule = new CharacterLiteral(sub.charAt(0));
",2,0,0,2,4,0,4,2,0,9,43,9,0.01190,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,273,"                String sub = token.substring(1);
",2,0,0,1,2,0,4,2,0,8,32,7,0.01176,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,274,"                if (sub.length() == 1) {
",0,1,0,2,5,0,4,0,0,5,24,7,0.01176,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,320,"            buf.append('\'');
",0,0,0,1,2,0,4,0,0,5,17,7,0.01176,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,322,"            boolean inLiteral = false;
",2,0,0,0,0,0,0,0,0,3,26,7,0.01176,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,324,"            for (; i < length; i++) {
",6,1,0,1,3,0,0,0,0,8,25,6,0.01176,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,325,"                c = pattern.charAt(i);
",2,0,0,1,2,0,6,0,0,9,22,8,0.01176,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,327,"                if (c == '\'') {
",2,1,0,1,3,0,0,0,0,4,16,8,0.01176,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,335,"                } else if (!inLiteral &&
",2,1,0,0,2,0,0,0,0,4,24,9,0.01176,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,337,"                    i--;
",2,0,0,0,0,0,0,0,0,3,4,11,0.01176,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,338,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.01176,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,340,"                    buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,12,0.01176,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,357,"        switch (padding) {
",2,0,0,1,3,0,0,0,0,2,18,4,0.01176,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,35,"abstract class FormatCache<F extends Format> {
",4,0,0,0,1,1,0,2,0,7,46,1,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,41,"    private final ConcurrentMap<MultipartKey, F> cInstanceCache 
",2,0,0,0,0,2,0,6,0,10,59,2,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,171,"    private static class MultipartKey {
",2,0,0,0,1,2,0,0,0,4,35,2,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,70,"        if (pattern == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,73,"        if (timeZone == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,76,"        if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,79,"        MultipartKey key = new MultipartKey(pattern, timeZone, locale);
",8,0,0,1,2,0,0,4,0,12,63,4,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,80,"        F format = cInstanceCache.get(key);
",2,0,0,1,2,0,6,2,0,10,35,4,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,81,"        if (format == null) {           
",2,1,0,1,3,0,0,0,0,3,21,4,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,82,"            format = createInstance(pattern, timeZone, locale);
",2,0,0,1,2,0,8,0,0,11,51,6,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,83,"            F previousValue= cInstanceCache.putIfAbsent(key, format);
",2,0,0,1,2,0,8,2,0,12,57,6,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,84,"            if (previousValue != null) {
",2,1,0,1,3,0,0,0,0,3,28,6,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,90,"        return format;
",2,0,0,0,0,0,0,0,0,2,14,4,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,136,"    protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
",8,0,0,1,3,1,0,6,0,15,77,2,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,137,"        mPattern = pattern;
",4,0,0,0,0,0,0,0,0,5,19,4,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,138,"        mTimeZone = timeZone;
",4,0,0,0,0,0,0,0,0,5,21,4,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,139,"        mLocale = locale;
",4,0,0,0,0,0,0,0,0,5,17,4,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,141,"        init();
",0,0,0,1,2,0,2,0,0,2,7,5,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,142,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1067,"    private static ConcurrentMap<TimeZoneDisplayKey, String> cTimeZoneDisplayCache =
",2,0,0,0,0,2,0,6,0,10,80,2,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,148,"        List<Rule> rulesList = parsePattern();
",2,0,0,1,2,0,2,4,0,8,38,4,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,149,"        mRules = rulesList.toArray(new Rule[rulesList.size()]);
",2,0,0,3,6,0,8,2,0,13,55,4,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,151,"        int len = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,152,"        for (int i=mRules.length; --i >= 0; ) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,153,"            len += mRules[i].estimateLength();
",2,0,1,2,4,0,2,0,0,9,34,6,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,156,"        mMaxLengthEstimate = len;
",4,0,0,0,0,0,0,0,0,5,25,4,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,157,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,168,"        DateFormatSymbols symbols = new DateFormatSymbols(mLocale);
",4,0,0,1,2,0,0,4,0,8,59,4,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,169,"        List<Rule> rules = new ArrayList<Rule>();
",2,0,0,1,2,0,0,8,0,10,41,4,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,171,"        String[] ERAs = symbols.getEras();
",2,0,0,2,4,0,4,2,0,8,34,4,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,172,"        String[] months = symbols.getMonths();
",2,0,0,2,4,0,4,2,0,8,38,4,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,173,"        String[] shortMonths = symbols.getShortMonths();
",2,0,0,2,4,0,4,2,0,8,48,4,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,174,"        String[] weekdays = symbols.getWeekdays();
",2,0,0,2,4,0,4,2,0,8,42,4,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,175,"        String[] shortWeekdays = symbols.getShortWeekdays();
",2,0,0,2,4,0,4,2,0,8,52,4,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,176,"        String[] AmPmStrings = symbols.getAmPmStrings();
",2,0,0,2,4,0,4,2,0,8,48,4,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,178,"        int length = mPattern.length();
",2,0,0,1,2,0,4,0,0,6,31,5,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,179,"        int[] indexRef = new int[1];
",2,0,0,2,4,0,0,0,0,2,28,5,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,181,"        for (int i = 0; i < length; i++) {
",8,1,0,1,3,0,0,0,0,10,34,4,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,182,"            indexRef[0] = i;
",2,0,1,1,2,0,0,0,0,5,16,6,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,183,"            String token = parseToken(mPattern, indexRef);
",2,0,0,1,2,0,6,2,0,10,46,6,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,184,"            i = indexRef[0];
",2,0,1,1,2,0,0,0,0,5,16,6,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,186,"            int tokenLen = token.length();
",2,0,0,1,2,0,4,0,0,6,30,7,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,187,"            if (tokenLen == 0) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,192,"            char c = token.charAt(0);
",2,0,0,1,2,0,4,0,0,6,25,7,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,194,"            switch (c) {
",2,0,0,1,3,0,0,0,0,2,12,6,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,284,"            rules.add(rule);
",0,0,0,1,2,0,6,0,0,6,16,7,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,287,"        return rules;
",2,0,0,0,0,0,0,0,0,2,13,4,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,298,"        StringBuilder buf = new StringBuilder();
",2,0,0,1,2,0,0,4,0,6,40,4,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,300,"        int i = indexRef[0];
",2,0,1,1,2,0,0,0,0,4,20,5,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,301,"        int length = pattern.length();
",2,0,0,1,2,0,4,0,0,6,30,5,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,303,"        char c = pattern.charAt(i);
",2,0,0,1,2,0,6,0,0,8,27,5,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,304,"        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {
",8,7,0,1,3,0,0,0,0,19,51,4,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,307,"            buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,7,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,309,"            while (i + 1 < length) {
",4,2,0,1,3,0,0,0,0,6,24,6,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,310,"                char peek = pattern.charAt(i + 1);
",4,1,0,1,2,0,4,0,0,9,34,9,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,311,"                if (peek == c) {
",4,1,0,1,3,0,0,0,0,5,16,8,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,345,"        indexRef[0] = i;
",2,0,1,1,2,0,0,0,0,5,16,4,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,346,"        return buf.toString();
",0,0,0,1,2,0,4,0,0,4,22,5,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,9,88,"    private static final FormatCache<FastDateFormat> cache= new FormatCache<FastDateFormat>() {
",2,0,0,1,3,3,0,8,0,13,91,2,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,9,91,"            return new FastDateFormat(pattern, timeZone, locale);
",6,0,0,1,2,0,0,2,0,8,53,9,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,9,368,"    protected FastDateFormat(String pattern, TimeZone timeZone, Locale locale) {
",8,0,0,1,3,1,0,6,0,15,76,2,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,9,369,"        printer= new FastDatePrinter(pattern, timeZone, locale);
",8,0,0,1,2,0,0,2,0,11,56,4,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,9,370,"        parser= new FastDateParser(pattern, timeZone, locale);
",8,0,0,1,2,0,0,2,0,11,54,4,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,9,371,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,9,88,"    private static final FormatCache<FastDateFormat> cache= new FormatCache<FastDateFormat>() {
",2,0,0,1,3,3,0,8,0,13,91,2,0.01163,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,44,"    private static final ConcurrentMap<MultipartKey, String> cDateTimeInstanceCache 
",2,0,0,0,0,3,0,6,0,11,79,2,0.01149,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,179,"        public MultipartKey(Object... keys) {
",4,0,0,1,3,1,0,2,0,7,37,3,0.01149,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,180,"            this.keys = keys;
",4,0,0,0,0,0,0,0,0,5,17,5,0.01149,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,181,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01149,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,199,"            if(hashCode==0) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.01149,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,200,"                int rc= 0;
",2,0,0,0,0,0,0,0,0,2,10,8,0.01149,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,201,"                for(Object key : keys) {
",4,0,0,1,3,0,0,2,0,6,24,7,0.01149,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,202,"                    if(key!=null) {
",2,1,0,1,3,0,0,0,0,3,15,9,0.01149,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,203,"                        rc= rc*7 + key.hashCode();
",4,2,0,1,2,0,4,0,0,11,26,11,0.01149,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,206,"                hashCode= rc;
",4,0,0,0,0,0,0,0,0,5,13,7,0.01149,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,208,"            return hashCode;
",2,0,0,0,0,0,0,0,0,2,16,5,0.01149,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,54,"        return getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, TimeZone.getDefault(), Locale.getDefault());
",8,0,0,3,6,0,10,0,0,18,107,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,71,"            throw new NullPointerException(""pattern must not be null"");
",0,0,0,1,2,0,0,2,0,4,59,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,74,"            timeZone = TimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,77,"            locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,87,"                format= previousValue;              
",4,0,0,0,0,0,0,0,0,5,22,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,120,"        if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,121,"            locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,123,"        String pattern = getPatternForStyle(dateStyle, timeStyle, locale);
",2,0,0,1,2,0,8,2,0,12,66,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,124,"        return getInstance(pattern, timeZone, locale);
",0,0,0,1,2,0,8,0,0,8,46,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,137,"        MultipartKey key = new MultipartKey(dateStyle, timeStyle, locale);
",8,0,0,1,2,0,0,4,0,12,66,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,139,"        String pattern = cDateTimeInstanceCache.get(key);
",2,0,0,1,2,0,6,2,0,10,49,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,140,"        if (pattern == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,143,"                if (dateStyle == null) {
",2,1,0,1,3,0,0,0,0,3,24,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,144,"                    formatter = DateFormat.getTimeInstance(timeStyle, locale);                    
",2,0,0,1,2,0,8,0,0,11,58,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,146,"                else if (timeStyle == null) {
",2,1,0,1,3,0,0,0,0,3,29,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,147,"                    formatter = DateFormat.getDateInstance(dateStyle, locale);                    
",2,0,0,1,2,0,8,0,0,11,58,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,150,"                    formatter = DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
",2,0,0,1,2,0,10,0,0,13,73,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,152,"                pattern = ((SimpleDateFormat)formatter).toPattern();
",4,0,0,3,6,0,2,2,0,9,52,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,153,"                String previous = cDateTimeInstanceCache.putIfAbsent(key, pattern);
",2,0,0,1,2,0,8,2,0,12,67,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,154,"                if (previous != null) {
",2,1,0,1,3,0,0,0,0,3,23,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,158,"                    pattern= previous;
",4,0,0,0,0,0,0,0,0,5,18,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,162,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,160,"            } catch (ClassCastException ex) {
",2,0,0,1,4,0,0,2,0,4,33,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,161,"                throw new IllegalArgumentException(""No date time pattern for locale: "" + locale);
",2,1,0,1,2,0,0,2,0,6,81,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,164,"        return pattern;
",2,0,0,0,0,0,0,0,0,2,15,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,754,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,755,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,747,"        static final UnpaddedMonthField INSTANCE = new UnpaddedMonthField();
",2,0,0,1,2,2,0,4,0,8,68,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,762,"            return 2;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,770,"            appendTo(buffer, calendar.get(Calendar.MONTH) + 1);
",4,1,0,2,4,0,8,0,0,13,51,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,771,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,778,"            if (value < 10) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,779,"                buffer.append((char)(value + '0'));
",2,1,0,3,6,0,4,0,0,8,35,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,781,"                buffer.append((char)(value / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,782,"                buffer.append((char)(value % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,784,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,800,"        PaddedNumberField(int field, int size) {
",6,0,0,1,3,0,0,0,0,6,40,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,801,"            if (size < 3) {
",2,1,0,1,3,0,0,0,0,3,15,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,803,"                throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,805,"            mField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,806,"            mSize = size;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,807,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,814,"            return 4;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,822,"            appendTo(buffer, calendar.get(mField));
",0,0,0,2,4,0,10,0,0,10,39,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,823,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,830,"            if (value < 100) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,831,"                for (int i = mSize; --i >= 2; ) {
",6,1,0,1,3,0,0,0,0,8,33,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,832,"                    buffer.append('0');
",0,0,0,1,2,0,4,0,0,5,19,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,834,"                buffer.append((char)(value / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,835,"                buffer.append((char)(value % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,838,"                if (value < 1000) {
",2,1,0,1,3,0,0,0,0,3,19,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,839,"                    digits = 3;
",2,0,0,0,0,0,0,0,0,3,11,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,841,"                    Validate.isTrue(value > -1, ""Negative values should not be possible"", value);
",2,1,0,1,2,0,6,0,0,11,77,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,842,"                    digits = Integer.toString(value).length();
",2,0,0,2,4,0,8,0,0,11,42,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,844,"                for (int i = mSize; --i >= digits; ) {
",8,1,0,1,3,0,0,0,0,10,38,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,845,"                    buffer.append('0');
",0,0,0,1,2,0,4,0,0,5,19,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,847,"                buffer.append(Integer.toString(value));
",0,0,0,2,4,0,10,0,0,10,39,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,849,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,751,"            int iValue= Integer.parseInt(value);
",2,0,0,1,2,0,6,0,0,8,36,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,752,"            if(iValue<100) {
",2,1,0,1,3,0,0,0,0,3,16,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,753,"                iValue= parser.adjustYear(iValue);
",2,0,0,1,2,0,6,0,0,9,34,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,755,"            cal.set(Calendar.YEAR, iValue);
",4,0,0,1,2,0,6,0,0,10,31,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,756,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,710,"            return true;
",0,0,0,0,0,0,0,0,0,1,12,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,719,"                regex.append(""(\\p{IsNd}{"").append(parser.getFieldWidth()).append(""}+)"");
",0,0,0,7,14,0,12,0,0,14,73,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,125,"            throw new IllegalArgumentException(""Invalid pattern"");
",0,0,0,1,2,0,0,2,0,3,54,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,139,"                collector.add(currentStrategy);
",0,0,0,1,2,0,6,0,0,6,31,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,159,"        return pattern;
",2,0,0,0,0,0,0,0,0,2,15,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,167,"        return timeZone;
",2,0,0,0,0,0,0,0,0,2,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,175,"        return locale;
",2,0,0,0,0,0,0,0,0,2,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,193,"        if (! (obj instanceof FastDateParser) ) {
",2,0,0,2,5,0,0,2,0,5,41,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,194,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,196,"        FastDateParser other = (FastDateParser) obj;
",4,0,0,1,2,0,0,4,0,8,44,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,197,"        return pattern.equals(other.pattern)
",4,0,0,1,2,0,4,0,0,8,36,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,209,"        return pattern.hashCode() + 13 * (timeZone.hashCode() + 13 * locale.hashCode());
",0,4,0,4,8,0,12,0,0,16,80,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,219,"        return ""FastDateParser["" + pattern + "","" + locale + "","" + timeZone.getID() + ""]"";
",4,1,0,2,4,0,4,0,0,13,81,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,233,"        in.defaultReadObject();
",0,0,0,1,2,0,4,0,0,4,23,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,234,"        init();
",0,0,0,1,2,0,2,0,0,2,7,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,235,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,242,"        return parse(source);
",0,0,0,1,2,0,4,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,253,"            if (locale.equals(JAPANESE_IMPERIAL)) {
",0,0,0,2,5,0,6,0,0,6,39,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,254,"                throw new ParseException(
",0,0,0,0,1,0,0,2,0,2,25,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,258,"            throw new ParseException(""Unparseable date: \""""+source+""\"" does not match ""+parsePattern.pattern(), 0);
",2,1,0,2,4,0,4,2,0,11,103,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,268,"        return parse(source, pos);
",0,0,0,1,2,0,6,0,0,6,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,279,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,308,"                if(unquote) {
",2,0,0,1,3,0,0,0,0,2,13,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,309,"                    if(++i==value.length()) {
",2,1,0,2,5,0,4,0,0,8,25,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,310,"                        return regex;
",2,0,0,0,0,0,0,0,0,2,13,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,312,"                    c= value.charAt(i);
",2,0,0,1,2,0,6,0,0,9,19,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,329,"                regex.append('\\');
",0,0,0,1,2,0,4,0,0,5,19,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,370,"        Integer fieldInt = Integer.valueOf(field);
",2,0,0,1,2,0,6,2,0,10,42,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,371,"        KeyValue[] fieldKeyValues= nameValues.get(fieldInt);
",2,0,0,2,4,0,6,2,0,10,52,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,372,"        if(fieldKeyValues==null) {
",2,1,0,1,3,0,0,0,0,3,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,373,"            DateFormatSymbols symbols= DateFormatSymbols.getInstance(locale);
",2,0,0,1,2,0,6,2,0,10,65,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,374,"            switch(field) {
",2,0,0,1,3,0,0,0,0,2,15,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,379,"                Calendar c = Calendar.getInstance(locale);
",2,0,0,1,2,0,6,2,0,10,42,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,381,"                String[] shortEras = toArray(c.getDisplayNames(Calendar.ERA, Calendar.SHORT, locale));
",10,0,0,3,6,0,8,2,0,20,86,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,382,"                String[] longEras = toArray(c.getDisplayNames(Calendar.ERA, Calendar.LONG, locale));
",10,0,0,3,6,0,8,2,0,20,84,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,383,"                fieldKeyValues= createKeyValues(longEras, shortEras);
",2,0,0,1,2,0,6,0,0,9,53,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,384,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,386,"                fieldKeyValues= createKeyValues(symbols.getWeekdays(), symbols.getShortWeekdays());
",2,0,0,3,6,0,10,0,0,13,83,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,387,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,389,"                fieldKeyValues= createKeyValues(symbols.getAmPmStrings(), null);
",2,0,0,2,4,0,6,0,0,10,64,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,390,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,392,"                fieldKeyValues= createKeyValues(symbols.getMonths(), symbols.getShortMonths());
",2,0,0,3,6,0,10,0,0,13,79,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,393,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,395,"                throw new IllegalArgumentException(""Invalid field value ""+field);
",2,1,0,1,2,0,0,2,0,6,65,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,397,"            KeyValue[] prior = nameValues.putIfAbsent(fieldInt, fieldKeyValues);
",2,0,0,2,4,0,8,2,0,12,68,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,398,"            if(prior!=null) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,399,"                fieldKeyValues= prior;
",4,0,0,0,0,0,0,0,0,5,22,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,402,"        return fieldKeyValues;
",2,0,0,0,0,0,0,0,0,2,22,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,406,"        String[] eras = new String[era.size()]; // assume no gaps in entry values
",2,0,0,3,6,0,4,4,0,10,73,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,407,"        for(Map.Entry<String, Integer> me : era.entrySet()) {
",6,0,0,2,5,0,4,4,0,14,53,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,408,"            int idx = me.getValue().intValue();
",2,0,0,2,4,0,6,0,0,8,35,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,409,"            final String key = me.getKey();
",2,0,0,1,2,1,4,2,0,9,31,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,410,"            if (key == null) {
",2,1,0,1,3,0,0,0,0,3,18,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,411,"                throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,413,"            eras[idx] = key;
",2,0,1,1,2,0,0,0,0,7,16,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,414,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,415,"        return eras;
",2,0,0,0,0,0,0,0,0,2,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,425,"        KeyValue[] fieldKeyValues= new KeyValue[count(longValues)+count(shortValues)];
",2,1,0,4,8,0,8,4,0,15,78,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,426,"        copy(fieldKeyValues, copy(fieldKeyValues, 0, longValues), shortValues);
",0,0,0,2,4,0,12,0,0,12,71,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,427,"        Arrays.sort(fieldKeyValues, IGNORE_CASE_COMPARATOR);
",0,0,0,1,2,0,8,0,0,8,52,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,428,"        return fieldKeyValues;
",2,0,0,0,0,0,0,0,0,2,22,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,437,"        int count= 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,438,"        if(values!=null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,439,"            for(String value : values) {
",4,0,0,1,3,0,0,2,0,6,28,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,440,"                if(value.length()>0) {
",0,1,0,2,5,0,4,0,0,5,22,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,441,"                    ++count;
",2,0,0,0,0,0,0,0,0,3,8,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,445,"        return count;
",2,0,0,0,0,0,0,0,0,2,13,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,456,"        if(values!=null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,457,"            for(int i= 0; i<values.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,37,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,458,"                String value= values[i];
",2,0,1,1,2,0,0,2,0,8,24,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,459,"                if(value.length()>0) {
",0,1,0,2,5,0,4,0,0,5,22,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,460,"                    fieldKeyValues[offset++]= new KeyValue(value, i);
",6,0,1,2,4,0,0,2,0,12,49,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,464,"        return offset;
",2,0,0,0,0,0,0,0,0,2,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,473,"        int trial= twoDigitYear + thisYear - thisYear%100;
",8,3,0,0,0,0,0,0,0,11,50,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,474,"        if(trial < thisYear+20) {
",4,2,0,1,3,0,0,0,0,6,25,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,475,"            return trial;
",2,0,0,0,0,0,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,477,"        return trial-100;
",2,1,0,0,0,0,0,0,0,3,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,493,"        return currentFormatField.length();
",0,0,0,1,2,0,4,0,0,4,35,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,544,"            return DAY_OF_YEAR_STRATEGY;
",2,0,0,0,0,0,0,0,0,2,28,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,546,"            return DAY_OF_WEEK_STRATEGY;
",2,0,0,0,0,0,0,0,0,2,28,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,548,"            return DAY_OF_WEEK_IN_MONTH_STRATEGY;
",2,0,0,0,0,0,0,0,0,2,37,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,550,"            return ERA_STRATEGY;
",2,0,0,0,0,0,0,0,0,2,20,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,552,"            return MODULO_HOUR_OF_DAY_STRATEGY;
",2,0,0,0,0,0,0,0,0,2,35,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,554,"            return HOUR_STRATEGY;
",2,0,0,0,0,0,0,0,0,2,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,556,"            return formatField.length()>=3 ?TEXT_MONTH_STRATEGY :NUMBER_MONTH_STRATEGY;
",4,1,0,1,2,0,4,0,0,9,75,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,558,"            return MILLISECOND_STRATEGY;
",2,0,0,0,0,0,0,0,0,2,28,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,560,"            return WEEK_OF_MONTH_STRATEGY;
",2,0,0,0,0,0,0,0,0,2,30,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,562,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,564,"            return AM_PM_STRATEGY;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,568,"            return MODULO_HOUR_STRATEGY;
",2,0,0,0,0,0,0,0,0,2,28,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,570,"            return HOUR_OF_DAY_STRATEGY;
",2,0,0,0,0,0,0,0,0,2,28,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,572,"            return MINUTE_STRATEGY;
",2,0,0,0,0,0,0,0,0,2,23,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,574,"            return SECOND_STRATEGY;
",2,0,0,0,0,0,0,0,0,2,23,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,576,"            return WEEK_OF_YEAR_STRATEGY;
",2,0,0,0,0,0,0,0,0,2,29,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,578,"            return formatField.length()>2 ?LITERAL_YEAR_STRATEGY :ABBREVIATED_YEAR_STRATEGY;
",4,1,0,1,2,0,4,0,0,9,80,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,582,"        TimeZoneStrategy tzs= tzsCache.get(locale);
",2,0,0,1,2,0,6,2,0,10,43,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,583,"        if(tzs==null) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,584,"            tzs= new TimeZoneStrategy(locale);
",4,0,0,1,2,0,0,2,0,7,34,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,585,"            TimeZoneStrategy inCache= tzsCache.putIfAbsent(locale, tzs);
",2,0,0,1,2,0,8,2,0,12,60,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,586,"            if(inCache!=null) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,587,"                return inCache;
",2,0,0,0,0,0,0,0,0,2,15,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,590,"        return tzs;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,616,"            buffer.append(mValue);
",0,0,0,1,2,0,6,0,0,6,22,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,617,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1032,"        TwentyFourHourField(NumberRule rule) {
",4,0,0,1,3,0,0,2,0,6,38,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1033,"            mRule = rule;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1034,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1041,"            return mRule.estimateLength();
",0,0,0,1,2,0,4,0,0,4,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1049,"            int value = calendar.get(Calendar.HOUR_OF_DAY);
",6,0,0,1,2,0,4,0,0,10,47,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1050,"            if (value == 0) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1051,"                value = calendar.getMaximum(Calendar.HOUR_OF_DAY) + 1;
",6,1,0,1,2,0,4,0,0,12,54,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1053,"            mRule.appendTo(buffer, value);
",0,0,0,1,2,0,8,0,0,8,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1054,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1061,"            mRule.appendTo(buffer, value);
",0,0,0,1,2,0,8,0,0,8,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1062,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,907,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,908,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,901,"        static final TwoDigitYearField INSTANCE = new TwoDigitYearField();
",2,0,0,1,2,2,0,4,0,8,66,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,915,"            return 2;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,923,"            appendTo(buffer, calendar.get(Calendar.YEAR) % 100);
",4,1,0,2,4,0,8,0,0,13,52,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,924,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,931,"            buffer.append((char)(value / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,932,"            buffer.append((char)(value % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,933,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,655,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,663,"            regex.append('(');
",0,0,0,1,3,0,4,0,0,5,18,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,664,"            for(KeyValue textKeyValue : parser.getDisplayNames(field)) {
",2,0,0,2,5,0,6,2,0,10,60,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,665,"                escapeRegex(regex, textKeyValue.key, false).append('|');
",4,0,0,2,4,0,6,0,0,12,56,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,667,"            regex.setCharAt(regex.length()-1, ')');
",0,1,0,2,5,0,8,0,0,10,39,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,668,"            return true;
",0,0,0,0,0,0,0,0,0,1,12,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,676,"            KeyValue[] textKeyValues= parser.getDisplayNames(field);
",2,0,0,2,4,0,6,2,0,10,56,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,677,"            int idx= Arrays.binarySearch(textKeyValues, new KeyValue(value, -1), IGNORE_CASE_COMPARATOR);
",4,0,0,2,4,0,8,2,0,15,93,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,678,"            if(idx<0) {
",2,1,0,1,3,0,0,0,0,3,11,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,679,"                StringBuilder sb= new StringBuilder(value);
",4,0,0,1,2,0,0,4,0,8,43,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,680,"                sb.append("" not in ("");
",0,0,0,1,3,0,4,0,0,5,23,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,681,"                for(KeyValue textKeyValue : textKeyValues) {
",4,0,0,1,3,0,0,2,0,6,44,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,682,"                    sb.append(textKeyValue.key).append(' ');
",4,0,0,2,4,0,6,0,0,11,40,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,684,"                sb.setCharAt(sb.length()-1, ')');
",0,1,0,2,5,0,8,0,0,10,33,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,685,"                throw new IllegalArgumentException(sb.toString());
",0,0,0,2,4,0,4,2,0,6,50,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,687,"            cal.set(field, textKeyValues[idx].value);
",2,0,1,2,4,0,6,0,0,12,41,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,688,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,9,191,"            return Arrays.equals(keys, ((MultipartKey)obj).keys);
",4,0,0,3,6,0,6,2,0,12,53,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,863,"        TwoDigitNumberField(int field) {
",4,0,0,1,3,0,0,0,0,4,32,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,864,"            mField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,865,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,872,"            return 2;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,880,"            appendTo(buffer, calendar.get(mField));
",0,0,0,2,4,0,10,0,0,10,39,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,881,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,888,"            if (value < 100) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,889,"                buffer.append((char)(value / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,890,"                buffer.append((char)(value % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,892,"                buffer.append(Integer.toString(value));
",0,0,0,2,4,0,10,0,0,10,39,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,894,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,987,"        TwelveHourField(NumberRule rule) {
",4,0,0,1,3,0,0,2,0,6,34,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,988,"            mRule = rule;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,989,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,996,"            return mRule.estimateLength();
",0,0,0,1,2,0,4,0,0,4,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1004,"            int value = calendar.get(Calendar.HOUR);
",6,0,0,1,2,0,4,0,0,10,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1005,"            if (value == 0) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1006,"                value = calendar.getLeastMaximum(Calendar.HOUR) + 1;
",6,1,0,1,2,0,4,0,0,12,52,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1008,"            mRule.appendTo(buffer, value);
",0,0,0,1,2,0,8,0,0,8,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1009,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1016,"            mRule.appendTo(buffer, value);
",0,0,0,1,2,0,8,0,0,8,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1017,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1150,"        TimeZoneNumberRule(boolean colon) {
",4,0,0,1,3,0,0,0,0,4,35,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1151,"            mColon = colon;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1152,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1140,"        static final TimeZoneNumberRule INSTANCE_COLON = new TimeZoneNumberRule(true);
",2,0,0,1,2,2,0,4,0,9,78,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1141,"        static final TimeZoneNumberRule INSTANCE_NO_COLON = new TimeZoneNumberRule(false);
",2,0,0,1,2,2,0,4,0,9,82,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1159,"            return 5;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1167,"            int offset = calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET);
",10,1,0,2,4,0,8,0,0,19,84,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1169,"            if (offset < 0) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1170,"                buffer.append('-');
",0,0,0,1,2,0,4,0,0,5,19,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1171,"                offset = -offset;
",4,0,0,0,0,0,0,0,0,6,17,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1173,"                buffer.append('+');
",0,0,0,1,2,0,4,0,0,5,19,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1176,"            int hours = offset / (60 * 60 * 1000);
",4,2,0,1,2,0,0,0,0,6,38,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1177,"            buffer.append((char)(hours / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1178,"            buffer.append((char)(hours % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1180,"            if (mColon) {
",2,0,0,1,3,0,0,0,0,2,13,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1181,"                buffer.append(':');
",0,0,0,1,2,0,4,0,0,5,19,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1184,"            int minutes = offset / (60 * 1000) - 60 * hours;
",6,4,0,1,2,0,0,0,0,10,48,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1185,"            buffer.append((char)(minutes / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,42,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1186,"            buffer.append((char)(minutes % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,42,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1187,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,771,"        TimeZoneStrategy(Locale locale) {
",4,0,0,1,3,0,0,2,0,6,33,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,765,"        final SortedMap<String, TimeZone> tzNames= new TreeMap<String, TimeZone>(String.CASE_INSENSITIVE_ORDER);
",6,0,0,1,2,1,0,12,0,19,104,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,772,"            for(String id : TimeZone.getAvailableIDs()) {
",2,0,0,2,5,0,4,2,0,8,45,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,773,"                if(id.startsWith(""GMT"")) {
",0,0,0,2,5,0,4,0,0,5,26,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,774,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,776,"                TimeZone tz= TimeZone.getTimeZone(id);
",2,0,0,1,2,0,6,2,0,10,38,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,777,"                tzNames.put(tz.getDisplayName(false, TimeZone.SHORT, locale), tz);
",4,0,0,2,4,0,12,0,0,17,66,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,778,"                tzNames.put(tz.getDisplayName(false, TimeZone.LONG, locale), tz);
",4,0,0,2,4,0,12,0,0,17,65,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,779,"                if(tz.useDaylightTime()) {
",0,0,0,2,5,0,4,0,0,4,26,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,780,"                    tzNames.put(tz.getDisplayName(true, TimeZone.SHORT, locale), tz);
",4,0,0,2,4,0,12,0,0,17,65,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,781,"                    tzNames.put(tz.getDisplayName(true, TimeZone.LONG, locale), tz);
",4,0,0,2,4,0,12,0,0,17,64,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,784,"            StringBuilder sb= new StringBuilder();
",2,0,0,1,2,0,0,4,0,6,38,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,785,"            sb.append(""(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|"");
",0,0,0,7,15,0,4,0,0,5,60,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,786,"            for(String id : tzNames.keySet()) {
",2,0,0,2,5,0,4,2,0,8,35,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,787,"                escapeRegex(sb, id, false).append('|');
",0,0,0,2,4,0,8,0,0,10,39,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,788,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,789,"            sb.setCharAt(sb.length()-1, ')');
",0,1,0,2,5,0,8,0,0,10,33,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,790,"            validTimeZoneChars= sb.toString();
",2,0,0,1,2,0,4,0,0,7,34,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,791,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,798,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,806,"            regex.append(validTimeZoneChars);
",0,0,0,1,2,0,6,0,0,6,33,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,807,"            return true;
",0,0,0,0,0,0,0,0,0,1,12,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,816,"            if(value.charAt(0)=='+' || value.charAt(0)=='-') {
",0,3,0,3,7,0,8,0,0,13,50,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,817,"                tz= TimeZone.getTimeZone(""GMT""+value);
",4,1,0,1,2,0,4,0,0,11,38,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,819,"            else if(value.startsWith(""GMT"")) {
",0,0,0,2,5,0,4,0,0,5,34,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,820,"                tz= TimeZone.getTimeZone(value);
",2,0,0,1,2,0,6,0,0,9,32,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,823,"                tz= tzNames.get(value);
",2,0,0,1,2,0,6,0,0,9,23,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,824,"                if(tz==null) {
",2,1,0,1,3,0,0,0,0,3,14,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,825,"                    throw new IllegalArgumentException(value + "" is not a supported timezone name"");
",2,1,0,1,2,0,0,2,0,6,80,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,828,"            cal.setTimeZone(tz);
",0,0,0,1,2,0,6,0,0,6,20,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,829,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1208,"                           boolean daylight, int style, Locale locale) {
",6,0,0,0,2,0,0,2,0,8,45,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1209,"            mTimeZone = timeZone;
",4,0,0,0,0,0,0,0,0,5,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1210,"            if (daylight) {
",2,0,0,1,3,0,0,0,0,2,15,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1211,"                style |= 0x80000000;
",2,0,0,0,0,0,0,0,0,3,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1213,"            mStyle = style;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1214,"            mLocale = locale;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1215,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1222,"            return (mStyle * 31 + mLocale.hashCode() ) * 31 + mTimeZone.hashCode();
",2,4,0,3,6,0,8,0,0,14,71,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1230,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1231,"                return true;
",0,0,0,0,0,0,0,0,0,1,12,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1233,"            if (obj instanceof TimeZoneDisplayKey) {
",2,0,0,1,3,0,0,2,0,4,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1234,"                TimeZoneDisplayKey other = (TimeZoneDisplayKey)obj;
",4,0,0,1,2,0,0,4,0,8,51,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1235,"                return
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1240,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,188,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,196,"                rule = new TextField(Calendar.ERA, ERAs);
",8,0,0,1,2,0,0,2,0,11,41,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,197,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,199,"                if (tokenLen == 2) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,200,"                    rule = TwoDigitYearField.INSTANCE;
",6,0,0,0,0,0,0,0,0,7,34,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,202,"                    rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen);
",10,1,0,1,2,0,2,0,0,14,68,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,204,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,206,"                if (tokenLen >= 4) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,207,"                    rule = new TextField(Calendar.MONTH, months);
",8,0,0,1,2,0,0,2,0,11,45,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,208,"                } else if (tokenLen == 3) {
",2,1,0,1,4,0,0,0,0,3,27,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,209,"                    rule = new TextField(Calendar.MONTH, shortMonths);
",8,0,0,1,2,0,0,2,0,11,50,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,210,"                } else if (tokenLen == 2) {
",2,1,0,1,4,0,0,0,0,3,27,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,211,"                    rule = TwoDigitMonthField.INSTANCE;
",6,0,0,0,0,0,0,0,0,7,35,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,213,"                    rule = UnpaddedMonthField.INSTANCE;
",6,0,0,0,0,0,0,0,0,7,35,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,215,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,220,"                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));
",6,0,0,2,4,0,4,2,0,13,70,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,221,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,223,"                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);
",6,0,0,1,2,0,4,0,0,11,56,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,224,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,226,"                rule = selectNumberRule(Calendar.MINUTE, tokenLen);
",6,0,0,1,2,0,4,0,0,11,51,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,227,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,229,"                rule = selectNumberRule(Calendar.SECOND, tokenLen);
",6,0,0,1,2,0,4,0,0,11,51,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,230,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,232,"                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);
",6,0,0,1,2,0,4,0,0,11,56,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,233,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,235,"                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);
",12,1,0,1,2,0,0,2,0,16,84,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,236,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,238,"                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);
",6,0,0,1,2,0,4,0,0,11,56,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,239,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,241,"                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);
",6,0,0,1,2,0,4,0,0,11,65,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,242,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,244,"                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);
",6,0,0,1,2,0,4,0,0,11,57,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,245,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,247,"                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);
",6,0,0,1,2,0,4,0,0,11,58,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,248,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,250,"                rule = new TextField(Calendar.AM_PM, AmPmStrings);
",8,0,0,1,2,0,0,2,0,11,50,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,251,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,253,"                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));
",6,0,0,2,4,0,4,2,0,13,81,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,254,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,256,"                rule = selectNumberRule(Calendar.HOUR, tokenLen);
",6,0,0,1,2,0,4,0,0,11,49,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,257,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,259,"                if (tokenLen >= 4) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,260,"                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);
",10,0,0,1,2,0,0,2,0,13,63,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,262,"                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);
",10,0,0,1,2,0,0,2,0,13,64,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,264,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,266,"                if (tokenLen == 1) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,267,"                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;
",6,0,0,0,0,0,0,0,0,7,44,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,269,"                    rule = TimeZoneNumberRule.INSTANCE_COLON;
",6,0,0,0,0,0,0,0,0,7,41,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,271,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,281,"                throw new IllegalArgumentException(""Illegal pattern component: "" + token);
",2,1,0,1,2,0,0,2,0,6,74,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,312,"                    buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,313,"                    i++;
",2,0,0,0,0,0,0,0,0,3,4,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,317,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,330,"                        i++;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,331,"                        buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,13,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,361,"            return new TwoDigitNumberField(field);
",2,0,0,1,2,0,0,2,0,4,38,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,363,"            return new PaddedNumberField(field, padding);
",4,0,0,1,2,0,0,2,0,6,45,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,380,"        if (obj instanceof Date) {
",2,0,0,1,3,0,0,2,0,4,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,381,"            return format((Date) obj, toAppendTo);
",2,0,0,2,4,0,4,2,0,8,38,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,382,"        } else if (obj instanceof Calendar) {
",2,0,0,1,4,0,0,2,0,4,37,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,383,"            return format((Calendar) obj, toAppendTo);
",2,0,0,2,4,0,4,2,0,8,42,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,384,"        } else if (obj instanceof Long) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,385,"            return format(((Long) obj).longValue(), toAppendTo);
",2,0,0,4,8,0,6,2,0,10,52,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,387,"            throw new IllegalArgumentException(""Unknown class: "" +
",0,1,0,0,1,0,0,2,0,4,54,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,397,"        return format(new Date(millis));
",2,0,0,2,4,0,2,2,0,6,32,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,405,"        Calendar c = new GregorianCalendar(mTimeZone, mLocale);  // hard code GregorianCalendar
",6,0,0,1,2,0,0,4,0,10,87,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,406,"        c.setTime(date);
",0,0,0,1,2,0,6,0,0,6,16,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,407,"        return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();
",2,0,0,3,6,0,6,2,0,10,70,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,415,"        return format(calendar, new StringBuffer(mMaxLengthEstimate)).toString();
",2,0,0,3,6,0,6,2,0,10,73,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,423,"        return format(new Date(millis), buf);
",2,0,0,2,4,0,4,2,0,8,37,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,431,"        Calendar c = new GregorianCalendar(mTimeZone, mLocale);  // hard code GregorianCalendar
",6,0,0,1,2,0,0,4,0,10,87,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,432,"        c.setTime(date);
",0,0,0,1,2,0,6,0,0,6,16,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,433,"        return applyRules(c, buf);
",0,0,0,1,2,0,6,0,0,6,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,441,"        return applyRules(calendar, buf);
",0,0,0,1,2,0,6,0,0,6,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,453,"        for (Rule rule : mRules) {
",4,0,0,1,3,0,0,2,0,6,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,454,"            rule.appendTo(buf, calendar);
",0,0,0,1,2,0,8,0,0,8,29,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,456,"        return buf;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,466,"        return mPattern;
",2,0,0,0,0,0,0,0,0,2,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,474,"        return mTimeZone;
",2,0,0,0,0,0,0,0,0,2,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,482,"        return mLocale;
",2,0,0,0,0,0,0,0,0,2,15,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,495,"        return mMaxLengthEstimate;
",2,0,0,0,0,0,0,0,0,2,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,508,"        if (obj instanceof FastDatePrinter == false) {
",2,1,0,1,3,0,0,2,0,6,46,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,509,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,511,"        FastDatePrinter other = (FastDatePrinter) obj;
",4,0,0,1,2,0,0,4,0,8,46,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,512,"        return mPattern.equals(other.mPattern)
",4,0,0,1,2,0,4,0,0,8,38,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,524,"        return mPattern.hashCode() + 13 * (mTimeZone.hashCode() + 13 * mLocale.hashCode());
",0,4,0,4,8,0,12,0,0,16,83,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,534,"        return ""FastDatePrinter["" + mPattern + "","" + mLocale + "","" + mTimeZone.getID() + ""]"";
",4,1,0,2,4,0,4,0,0,13,85,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,548,"        in.defaultReadObject();
",0,0,0,1,2,0,4,0,0,4,23,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,549,"        init();
",0,0,0,1,2,0,2,0,0,2,7,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,550,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1079,"        TimeZoneDisplayKey key = new TimeZoneDisplayKey(tz, daylight, style, locale);
",10,0,0,1,2,0,0,4,0,14,77,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1080,"        String value = cTimeZoneDisplayCache.get(key);
",2,0,0,1,2,0,6,2,0,10,46,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1081,"        if (value == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1083,"            value = tz.getDisplayName(daylight, style, locale);
",2,0,0,1,2,0,10,0,0,13,51,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1084,"            String prior = cTimeZoneDisplayCache.putIfAbsent(key, value);
",2,0,0,1,2,0,8,2,0,12,61,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1085,"            if (prior != null) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1086,"                value= prior;
",4,0,0,0,0,0,0,0,0,5,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1089,"        return value;
",2,0,0,0,0,0,0,0,0,2,13,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,667,"        TextField(int field, String[] values) {
",6,0,0,2,5,0,0,2,0,8,39,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,668,"            mField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,669,"            mValues = values;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,670,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,677,"            int max = 0;
",2,0,0,0,0,0,0,0,0,2,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,678,"            for (int i=mValues.length; --i >= 0; ) {
",8,1,0,1,3,0,0,0,0,10,40,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,679,"                int len = mValues[i].length();
",2,0,1,2,4,0,2,0,0,8,30,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,680,"                if (len > max) {
",4,1,0,1,3,0,0,0,0,5,16,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,681,"                    max = len;
",4,0,0,0,0,0,0,0,0,5,10,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,683,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,684,"            return max;
",2,0,0,0,0,0,0,0,0,2,11,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,692,"            buffer.append(mValues[calendar.get(mField)]);
",0,0,1,3,6,0,10,0,0,12,45,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,693,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,360,"            return left.key.compareToIgnoreCase(right.key);
",8,0,0,1,2,0,2,0,0,10,47,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,348,"        public KeyValue(String key, int value) {
",6,0,0,1,3,1,0,2,0,9,40,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,349,"            this.key= key;
",4,0,0,0,0,0,0,0,0,5,14,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,350,"            this.value= value;
",4,0,0,0,0,0,0,0,0,5,18,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,351,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,860,"            return iValue%12;
",2,1,0,0,0,0,0,0,0,3,17,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,724,"            appendTo(buffer, calendar.get(mField));
",0,0,0,2,4,0,10,0,0,10,39,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,725,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,732,"            if (value < 10) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,733,"                buffer.append((char)(value + '0'));
",2,1,0,3,6,0,4,0,0,8,35,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,734,"            } else if (value < 100) {
",2,1,0,1,4,0,0,0,0,3,25,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,735,"                buffer.append((char)(value / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,736,"                buffer.append((char)(value % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,738,"                buffer.append(Integer.toString(value));
",0,0,0,2,4,0,10,0,0,10,39,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,740,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,612,"            char c= formatField.charAt(0);
",2,0,0,1,2,0,4,0,0,6,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,613,"            if(c=='\'') {
",2,1,0,1,3,0,0,0,0,4,13,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,614,"                c= formatField.charAt(1);
",2,0,0,1,2,0,4,0,0,7,25,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,616,"            return Character.isDigit(c);
",0,0,0,1,2,0,6,0,0,6,28,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,633,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,9,106,"        return cache.getInstance();
",0,0,0,1,2,0,4,0,0,4,27,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,9,119,"        return cache.getInstance(pattern, null, null);
",0,0,0,1,2,0,6,0,0,6,46,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,9,134,"        return cache.getInstance(pattern, timeZone, null);
",0,0,0,1,2,0,8,0,0,8,50,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,9,148,"        return cache.getInstance(pattern, null, locale);
",0,0,0,1,2,0,8,0,0,8,48,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,9,180,"        return cache.getDateTimeInstance(style, null, null, null);
",0,0,0,1,2,0,6,0,0,6,58,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,9,195,"        return cache.getDateTimeInstance(style, null, null, locale);
",0,0,0,1,2,0,8,0,0,8,60,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,9,211,"        return cache.getDateTimeInstance(style, null, timeZone, null);
",0,0,0,1,2,0,8,0,0,8,62,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,9,227,"        return cache.getDateTimeInstance(style, null, timeZone, locale);
",0,0,0,1,2,0,10,0,0,10,64,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,9,242,"        return cache.getDateTimeInstance(null, style, null, null);
",0,0,0,1,2,0,6,0,0,6,58,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,9,257,"        return cache.getDateTimeInstance(null, style, null, locale);
",0,0,0,1,2,0,8,0,0,8,60,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,9,273,"        return cache.getDateTimeInstance(null, style, timeZone, null);
",0,0,0,1,2,0,8,0,0,8,62,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,9,289,"        return cache.getDateTimeInstance(null, style, timeZone, locale);
",0,0,0,1,2,0,10,0,0,10,64,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,9,305,"        return cache.getDateTimeInstance(dateStyle, timeStyle, null, null);
",0,0,0,1,2,0,8,0,0,8,67,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,9,321,"        return cache.getDateTimeInstance(dateStyle, timeStyle, null, locale);
",0,0,0,1,2,0,10,0,0,10,69,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,9,338,"        return getDateTimeInstance(dateStyle, timeStyle, timeZone, null);
",0,0,0,1,2,0,8,0,0,9,65,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,9,355,"        return cache.getDateTimeInstance(dateStyle, timeStyle, timeZone, locale);
",0,0,0,1,2,0,12,0,0,12,73,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,9,386,"        return printer.format(obj, toAppendTo, pos);
",0,0,0,1,2,0,10,0,0,10,44,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,9,398,"        return format(new Date(millis));
",2,0,0,2,4,0,2,2,0,6,32,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,9,409,"        return printer.format(date);
",0,0,0,1,2,0,6,0,0,6,28,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,9,420,"        return printer.format(calendar);
",0,0,0,1,2,0,6,0,0,6,32,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,9,434,"        return printer.format(millis, buf);
",0,0,0,1,2,0,8,0,0,8,35,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,9,447,"        return printer.format(date, buf);
",0,0,0,1,2,0,8,0,0,8,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,9,460,"        return printer.format(calendar, buf);
",0,0,0,1,2,0,8,0,0,8,37,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,9,480,"            return parser.parse(source, pos);
",0,0,0,1,2,0,8,0,0,8,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,9,488,"        return parser.parseObject(source, pos);
",0,0,0,1,2,0,8,0,0,8,39,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,9,500,"        return printer.getPattern();
",0,0,0,1,2,0,4,0,0,4,28,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,9,512,"        return printer.getTimeZone();
",0,0,0,1,2,0,4,0,0,4,29,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,9,522,"        return printer.getLocale();
",0,0,0,1,2,0,4,0,0,4,27,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,9,535,"        return printer.getMaxLengthEstimate();
",0,0,0,1,2,0,4,0,0,4,38,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,9,548,"        if (obj instanceof FastDateFormat == false) {
",2,1,0,1,3,0,0,2,0,6,45,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,9,549,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,9,551,"        FastDateFormat other = (FastDateFormat) obj;
",4,0,0,1,2,0,0,4,0,8,44,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,9,553,"        return printer.equals(other.printer);
",4,0,0,1,2,0,4,0,0,8,37,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,9,563,"        return printer.hashCode();
",0,0,0,1,2,0,4,0,0,4,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,9,573,"        return ""FastDateFormat["" + printer.getPattern() + "","" + printer.getLocale() + "","" + printer.getTimeZone().getID() + ""]"";
",0,1,0,5,10,0,14,0,0,19,120,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,9,586,"        return printer.applyRules(calendar, buf);
",0,0,0,1,2,0,8,0,0,8,41,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,841,"            return iValue-1;
",2,1,0,0,0,0,0,0,0,3,16,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,649,"            buffer.append(mValue);
",0,0,0,1,2,0,6,0,0,6,22,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,650,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1107,"        TimeZoneNameRule(TimeZone timeZone, Locale locale, int style) {
",8,0,0,1,3,0,0,4,0,12,63,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1108,"            mTimeZone = timeZone;
",4,0,0,0,0,0,0,0,0,5,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1110,"            mStandard = getTimeZoneDisplay(timeZone, false, style, locale);
",2,0,0,1,2,0,8,0,0,12,63,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1111,"            mDaylight = getTimeZoneDisplay(timeZone, true, style, locale);
",2,0,0,1,2,0,8,0,0,12,62,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1112,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1119,"            return Math.max(mStandard.length(), mDaylight.length());
",0,0,0,3,6,0,12,0,0,12,56,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1127,"            if (mTimeZone.useDaylightTime() && calendar.get(Calendar.DST_OFFSET) != 0) {
",4,2,0,3,7,0,8,0,0,14,76,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1128,"                buffer.append(mDaylight);
",0,0,0,1,2,0,6,0,0,6,25,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1130,"                buffer.append(mStandard);
",0,0,0,1,2,0,6,0,0,6,25,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,1132,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,9,854,"            return iValue%24;
",2,1,0,0,0,0,0,0,0,3,17,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,946,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,947,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,940,"        static final TwoDigitMonthField INSTANCE = new TwoDigitMonthField();
",2,0,0,1,2,2,0,4,0,8,68,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,954,"            return 2;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,962,"            appendTo(buffer, calendar.get(Calendar.MONTH) + 1);
",4,1,0,2,4,0,8,0,0,13,51,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,963,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,970,"            buffer.append((char)(value / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,971,"            buffer.append((char)(value % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,9,972,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
