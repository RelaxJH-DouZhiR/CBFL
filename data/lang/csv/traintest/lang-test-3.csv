dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,predict
defect4j,lang,org/apache/commons/lang3/reflect/TypeUtils,15,675,"        if (cls.getTypeParameters().length > 0 || toClass.equals(cls)) {
",2,2,0,3,7,0,10,0,0,14,64,4,1,1,0
defect4j,lang,org/apache/commons/lang3/text/translate/EntityArrays,15,420,"            newarray[i][1] = array[i][0];
",0,0,1,4,8,0,0,0,0,9,29,6,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/text/translate/EntityArrays,15,422,"        return newarray;
",2,0,0,0,0,0,0,0,0,2,16,4,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/text/translate/UnicodeUnescaper,15,30,"public class UnicodeUnescaper extends CharSequenceTranslator {
",2,0,0,0,1,1,0,2,0,5,62,1,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,16,459,"            return createInteger(str);
",0,0,0,1,2,0,4,0,0,4,26,7,1.00000,0,1
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,16,470,"            if (expPos > -1) {
",2,1,0,1,3,0,0,0,0,4,18,6,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,16,476,"                dec = str.substring(decPos + 1);
",4,1,0,1,2,0,4,0,0,10,32,8,1.00000,0,1
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,16,478,"            mant = str.substring(0, decPos);
",2,0,0,1,2,0,6,0,0,9,32,6,1.00000,0,1
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,16,481,"                if (expPos > str.length()) {
",2,1,0,2,5,0,4,0,0,7,28,8,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,16,484,"                mant = str.substring(0, expPos);
",2,0,0,1,2,0,6,0,0,9,32,8,1.00000,0,1
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,16,517,"                        Float f = NumberUtils.createFloat(numeric);
",2,0,0,1,2,0,6,2,0,10,43,9,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,16,518,"                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
",2,3,0,5,11,0,8,0,0,15,65,9,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,16,521,"                            return f;
",2,0,0,0,0,0,0,0,0,2,9,11,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,16,531,"                        Double d = NumberUtils.createDouble(numeric);
",2,0,0,1,2,0,6,2,0,10,45,9,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,16,532,"                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
",2,3,0,5,11,0,8,0,0,15,65,9,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,16,533,"                            return d;
",2,0,0,0,0,0,0,0,0,2,9,11,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,16,545,"                    throw new NumberFormatException(str + "" is not a valid number."");
",2,1,0,1,2,0,0,2,0,6,65,8,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,16,551,"            if (expPos > -1 && expPos < str.length() - 1) {
",4,4,0,2,5,0,4,0,0,13,47,6,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,16,554,"                exp = null;
",2,0,0,0,0,0,0,0,0,3,11,8,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,16,556,"            if (dec == null && exp == null) {
",4,3,0,1,3,0,0,0,0,7,33,6,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,16,559,"                    return createInteger(str);
",0,0,0,1,2,0,4,0,0,4,26,11,1.00000,0,1
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,16,560,"                } catch (NumberFormatException nfe) { // NOPMD
",2,0,0,1,4,0,0,2,0,4,46,10,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,16,564,"                    return createLong(str);
",0,0,0,1,2,0,4,0,0,4,23,11,1.00000,0,1
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,16,572,"                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
",2,1,0,2,4,0,8,0,0,11,55,9,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,16,574,"                    Float f = createFloat(str);
",2,0,0,1,2,0,4,2,0,8,27,10,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,16,575,"                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
",2,3,0,5,11,0,8,0,0,15,65,10,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,16,576,"                        return f;
",2,0,0,0,0,0,0,0,0,2,9,12,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/StringEscapeUtils,17,506,"        return ESCAPE_XML.translate(input);
",0,0,0,1,2,0,6,0,0,6,35,5,1.00000,0,1
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,18,409,"        TimeZoneDisplayKey key = new TimeZoneDisplayKey(tz, daylight, style, locale);
",10,0,0,1,2,0,0,4,0,14,77,4,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,18,410,"        String value = cTimeZoneDisplayCache.get(key);
",2,0,0,1,2,0,6,2,0,10,46,4,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,18,411,"        if (value == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,18,413,"            value = tz.getDisplayName(daylight, style, locale);
",2,0,0,1,2,0,10,0,0,13,51,6,1.00000,0,1
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,18,414,"            String prior = cTimeZoneDisplayCache.putIfAbsent(key, value);
",2,0,0,1,2,0,8,2,0,12,61,6,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,18,415,"            if (prior != null) {
",2,1,0,1,3,0,0,0,0,3,20,6,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,18,419,"        return value;
",2,0,0,0,0,0,0,0,0,2,13,4,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,18,555,"                if (tokenLen >= 4) {
",2,1,0,1,3,0,0,0,0,3,20,7,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,18,558,"                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);
",10,0,0,1,2,0,0,2,0,13,64,9,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,18,560,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,18,1240,"            appendTo(buffer, calendar.get(Calendar.YEAR) % 100);
",4,1,0,2,4,0,8,0,0,13,52,6,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,18,1241,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,18,1247,"            buffer.append((char)(value / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,6,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,18,1248,"            buffer.append((char)(value % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,6,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,18,1249,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,18,1484,"                           boolean daylight, int style, Locale locale) {
",6,0,0,0,2,0,0,2,0,8,45,4,1.00000,0,1
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,18,1485,"            mTimeZone = timeZone;
",4,0,0,0,0,0,0,0,0,5,21,5,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,18,1486,"            if (daylight) {
",2,0,0,1,3,0,0,0,0,2,15,5,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,18,1487,"                style |= 0x80000000;
",2,0,0,0,0,0,0,0,0,3,20,7,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,18,1489,"            mStyle = style;
",4,0,0,0,0,0,0,0,0,5,15,5,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,18,1490,"            mLocale = locale;
",4,0,0,0,0,0,0,0,0,5,17,5,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,18,1491,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,18,1498,"            return (mStyle * 31 + mLocale.hashCode() ) * 31 + mTimeZone.hashCode();
",2,4,0,3,6,0,8,0,0,14,71,5,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,18,1387,"        TimeZoneNameRule(TimeZone timeZone, Locale locale, int style) {
",8,0,0,1,3,0,0,4,0,12,63,3,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,18,1388,"            mTimeZone = timeZone;
",4,0,0,0,0,0,0,0,0,5,21,5,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,18,1390,"            mStandard = getTimeZoneDisplay(timeZone, false, style, locale);
",2,0,0,1,2,0,8,0,0,12,63,5,1.00000,0,1
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,18,1391,"            mDaylight = getTimeZoneDisplay(timeZone, true, style, locale);
",2,0,0,1,2,0,8,0,0,12,62,5,1.00000,0,1
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,18,1392,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,18,1398,"            return Math.max(mStandard.length(), mDaylight.length());
",0,0,0,3,6,0,12,0,0,12,56,6,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/text/translate/NumericEntityUnescaper,19,41,"            int start = index + 2;
",4,1,0,0,0,0,0,0,0,5,22,7,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/text/translate/NumericEntityUnescaper,19,42,"            boolean isHex = false;
",2,0,0,0,0,0,0,0,0,3,22,7,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/text/translate/NumericEntityUnescaper,19,44,"            char firstChar = input.charAt(start);
",2,0,0,1,2,0,6,0,0,8,37,7,1.00000,0,1
defect4j,lang,org/apache/commons/lang3/StringUtils,20,3257,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/time/DateUtils,21,60,"    public static final TimeZone UTC_TIME_ZONE = TimeZone.getTimeZone(""GMT"");
",2,0,0,1,2,3,4,2,0,12,73,2,0.00926,0,0
defect4j,lang,org/apache/commons/lang3/time/DateUtils,21,88,"    private static final int[][] fields = {
",2,0,0,2,5,3,0,0,0,5,39,2,0.00926,0,0
defect4j,lang,org/apache/commons/lang3/math/Fraction,22,216,"            throw new ArithmeticException(""The denominator must not be zero"");
",0,0,0,1,2,0,0,2,0,3,66,7,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/math/Fraction,22,223,"            numerator/=2; denominator/=2;
",4,0,0,0,0,0,0,0,0,6,29,6,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/math/Fraction,22,226,"            if (numerator==Integer.MIN_VALUE ||
",6,2,0,0,1,0,0,0,0,8,35,6,1.00000,0,1
defect4j,lang,org/apache/commons/lang3/math/Fraction,22,228,"                throw new ArithmeticException(""overflow: can't negate"");
",0,0,0,1,2,0,0,2,0,3,56,9,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/math/Fraction,22,230,"            numerator = -numerator;
",4,0,0,0,0,0,0,0,0,6,23,6,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/math/Fraction,22,231,"            denominator = -denominator;
",4,0,0,0,0,0,0,0,0,6,27,6,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/math/Fraction,22,475,"        if (numerator == 0) {
",2,1,0,1,3,0,0,0,0,3,21,4,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/math/Fraction,22,476,"            return equals(ZERO) ? this : ZERO;
",2,0,0,1,2,0,4,0,0,6,34,7,1.00000,0,1
defect4j,lang,org/apache/commons/lang3/math/Fraction,22,478,"        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);
",2,0,0,2,4,0,10,0,0,12,66,5,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/math/Fraction,22,479,"        if (gcd == 1) {
",2,1,0,1,3,0,0,0,0,3,15,4,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/math/Fraction,22,480,"            return this;
",0,0,0,0,0,0,0,0,0,0,12,3,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/math/Fraction,22,482,"        return Fraction.getFraction(numerator / gcd, denominator / gcd);
",8,2,0,1,2,0,4,0,0,14,64,5,1.00000,0,1
defect4j,lang,org/apache/commons/lang3/text/StrMatcher,23,216,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/StrMatcher,23,217,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/StrMatcher,23,37,"    private static final StrMatcher COMMA_MATCHER = new CharMatcher(',');
",2,0,0,1,2,3,0,4,0,10,69,2,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/StrMatcher,23,41,"    private static final StrMatcher TAB_MATCHER = new CharMatcher('\t');
",2,0,0,1,2,3,0,4,0,10,68,2,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/StrMatcher,23,45,"    private static final StrMatcher SPACE_MATCHER = new CharMatcher(' ');
",2,0,0,1,2,3,0,4,0,10,69,2,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/StrMatcher,23,50,"    private static final StrMatcher SPLIT_MATCHER = new CharSetMatcher("" \t\n\r\f"".toCharArray());
",2,0,0,2,4,3,2,4,0,12,94,2,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/StrMatcher,23,54,"    private static final StrMatcher TRIM_MATCHER = new TrimMatcher();
",2,0,0,1,2,3,0,4,0,9,65,2,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/StrMatcher,23,58,"    private static final StrMatcher SINGLE_QUOTE_MATCHER = new CharMatcher('\'');
",2,0,0,1,2,3,0,4,0,10,77,2,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/StrMatcher,23,62,"    private static final StrMatcher DOUBLE_QUOTE_MATCHER = new CharMatcher('""');
",2,0,0,1,2,3,0,4,0,10,76,2,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/StrMatcher,23,66,"    private static final StrMatcher QUOTE_MATCHER = new CharSetMatcher(""'\"""".toCharArray());
",2,0,0,2,4,3,2,4,0,12,88,2,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/StrMatcher,23,70,"    private static final StrMatcher NONE_MATCHER = new NoMatcher();
",2,0,0,1,2,3,0,4,0,9,63,2,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/StrMatcher,23,108,"        return SPLIT_MATCHER;
",2,0,0,0,0,0,0,0,0,2,21,4,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/StrMatcher,23,267,"        return isMatch(buffer, pos, 0, buffer.length);
",4,0,0,1,2,0,6,0,0,10,46,5,0.25000,0,1
defect4j,lang,org/apache/commons/lang3/text/StrMatcher,23,417,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/StrMatcher,23,418,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/StrMatcher,23,389,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/StrMatcher,23,390,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/StrMatcher,23,318,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/StrMatcher,23,319,"            this.ch = ch;
",4,0,0,0,0,0,0,0,0,5,13,5,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/StrMatcher,23,320,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/StrMatcher,23,284,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/StrMatcher,23,285,"            this.chars = chars.clone();
",2,0,0,1,2,0,4,0,0,7,27,5,0.25000,0,1
defect4j,lang,org/apache/commons/lang3/text/StrMatcher,23,286,"            Arrays.sort(this.chars);
",2,0,0,1,2,0,4,0,0,6,24,6,0.25000,0,1
defect4j,lang,org/apache/commons/lang3/text/StrMatcher,23,287,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/StrMatcher,23,300,"            return Arrays.binarySearch(chars, buffer[pos]) >= 0 ? 1 : 0;
",0,1,1,2,4,0,6,0,0,11,60,6,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,151,"        ArrayList<Format> foundFormats = new ArrayList<Format>();
",2,0,0,1,2,0,0,8,0,10,57,4,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,152,"        ArrayList<String> foundDescriptions = new ArrayList<String>();
",2,0,0,1,2,0,0,8,0,10,62,4,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,153,"        StringBuilder stripCustom = new StringBuilder(pattern.length());
",2,0,0,2,4,0,4,4,0,10,64,4,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,155,"        ParsePosition pos = new ParsePosition(0);
",2,0,0,1,2,0,0,4,0,6,41,4,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,156,"        char[] c = pattern.toCharArray();
",2,0,0,2,4,0,4,0,0,6,33,5,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,157,"        int fmtCount = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,158,"        while (pos.getIndex() < pattern.length()) {
",0,1,0,3,7,0,8,0,0,9,43,4,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,159,"            switch (c[pos.getIndex()]) {
",0,0,1,3,7,0,4,0,0,6,28,7,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,164,"                fmtCount++;
",2,0,0,0,0,0,0,0,0,3,11,7,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,165,"                seekNonWs(pattern, pos);
",0,0,0,1,2,0,6,0,0,6,24,8,0.25000,0,1
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,166,"                int start = pos.getIndex();
",2,0,0,1,2,0,4,0,0,6,27,8,0.25000,0,1
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,167,"                int index = readArgumentIndex(pattern, next(pos));
",2,0,0,2,4,0,8,0,0,10,50,8,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,168,"                stripCustom.append(START_FE).append(index);
",0,0,0,2,4,0,10,0,0,10,43,8,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,169,"                seekNonWs(pattern, pos);
",0,0,0,1,2,0,6,0,0,6,24,8,0.25000,0,1
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,170,"                Format format = null;
",2,0,0,0,0,0,0,2,0,4,21,7,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,171,"                String formatDescription = null;
",2,0,0,0,0,0,0,2,0,4,32,7,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,172,"                if (c[pos.getIndex()] == START_FMT) {
",2,1,1,3,7,0,4,0,0,9,37,7,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,173,"                    formatDescription = parseFormatDescription(pattern,
",2,0,0,0,1,0,4,0,0,7,51,9,0.25000,0,1
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,175,"                    format = getFormat(formatDescription);
",2,0,0,1,2,0,4,0,0,7,38,9,0.25000,0,1
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,176,"                    if (format == null) {
",2,1,0,1,3,0,0,0,0,3,21,9,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,180,"                foundFormats.add(format);
",0,0,0,1,2,0,6,0,0,6,25,8,0.25000,0,1
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,181,"                foundDescriptions.add(format == null ? null : formatDescription);
",4,1,0,1,2,0,4,0,0,9,65,8,0.25000,0,1
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,182,"                Validate.isTrue(foundFormats.size() == fmtCount);
",2,1,0,2,4,0,8,0,0,11,49,8,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,183,"                Validate.isTrue(foundDescriptions.size() == fmtCount);
",2,1,0,2,4,0,8,0,0,11,54,8,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,184,"                if (c[pos.getIndex()] != END_FE) {
",2,1,1,3,7,0,4,0,0,9,34,7,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,190,"                stripCustom.append(c[pos.getIndex()]);
",0,0,1,3,6,0,8,0,0,10,38,8,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,191,"                next(pos);
",0,0,0,1,2,0,4,0,0,4,10,8,0.25000,0,1
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,194,"        super.applyPattern(stripCustom.toString());
",2,0,0,2,4,0,4,0,0,6,43,5,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,195,"        toPattern = insertFormats(super.toPattern(), foundDescriptions);
",4,0,0,2,4,0,4,0,0,9,64,4,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,196,"        if (containsElements(foundFormats)) {
",0,0,0,2,5,0,4,0,0,4,37,5,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,197,"            Format[] origFormats = getFormats();
",2,0,0,2,4,0,2,2,0,6,36,6,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,200,"            int i = 0;
",2,0,0,0,0,0,0,0,0,2,10,7,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,201,"            for (Iterator<Format> it = foundFormats.iterator(); it.hasNext(); i++) {
",4,0,0,3,7,0,8,4,0,17,72,6,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,202,"                Format f = it.next();
",2,0,0,1,2,0,4,2,0,8,21,8,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,203,"                if (f != null) {
",2,1,0,1,3,0,0,0,0,3,16,8,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,204,"                    origFormats[i] = f;
",2,0,1,1,2,0,0,0,0,7,19,10,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,207,"            super.setFormats(origFormats);
",4,0,0,1,2,0,0,0,0,4,30,7,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,209,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,277,"        if (registry != null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,278,"            String name = desc;
",4,0,0,0,0,0,0,2,0,6,19,6,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,279,"            String args = null;
",2,0,0,0,0,0,0,2,0,4,19,6,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,280,"            int i = desc.indexOf(START_FMT);
",2,0,0,1,2,0,6,0,0,8,32,7,0.25000,0,1
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,281,"            if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,285,"            FormatFactory factory = registry.get(name);
",2,0,0,1,2,0,6,2,0,10,43,6,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,286,"            if (factory != null) {
",2,1,0,1,3,0,0,0,0,3,22,6,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,287,"                return factory.getFormat(name, args, getLocale());
",0,0,0,2,4,0,10,0,0,10,50,9,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,301,"        int start = pos.getIndex();
",2,0,0,1,2,0,4,0,0,6,27,5,0.25000,0,1
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,302,"        seekNonWs(pattern, pos);
",0,0,0,1,2,0,6,0,0,6,24,5,0.25000,0,1
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,303,"        StringBuffer result = new StringBuffer();
",2,0,0,1,2,0,0,4,0,6,41,4,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,304,"        boolean error = false;
",2,0,0,0,0,0,0,0,0,3,22,5,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,305,"        for (; !error && pos.getIndex() < pattern.length(); next(pos)) {
",2,2,0,4,9,0,12,0,0,17,64,4,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,306,"            char c = pattern.charAt(pos.getIndex());
",2,0,0,2,4,0,8,0,0,10,40,7,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,307,"            if (Character.isWhitespace(c)) {
",0,0,0,2,5,0,6,0,0,6,32,7,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,315,"            if ((c == START_FMT || c == END_FE) && result.length() > 0) {
",8,5,0,3,7,0,4,0,0,17,61,6,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,317,"                    return Integer.parseInt(result.toString());
",0,0,0,2,4,0,8,0,0,8,43,11,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,323,"            error = !Character.isDigit(c);
",2,0,0,1,2,0,6,0,0,10,30,6,0.25000,0,1
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,324,"            result.append(c);
",0,0,0,1,2,0,6,0,0,6,17,7,0.25000,0,1
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,343,"        int start = pos.getIndex();
",2,0,0,1,2,0,4,0,0,6,27,5,0.25000,0,1
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,344,"        seekNonWs(pattern, pos);
",0,0,0,1,2,0,6,0,0,6,24,5,0.25000,0,1
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,345,"        int text = pos.getIndex();
",2,0,0,1,2,0,4,0,0,6,26,5,0.25000,0,1
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,346,"        int depth = 1;
",2,0,0,0,0,0,0,0,0,2,14,5,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,347,"        for (; pos.getIndex() < pattern.length(); next(pos)) {
",0,1,0,4,9,0,12,0,0,13,54,4,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,348,"            switch (pattern.charAt(pos.getIndex())) {
",0,0,0,3,7,0,8,0,0,8,41,7,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,353,"                depth--;
",2,0,0,0,0,0,0,0,0,3,8,7,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,354,"                if (depth == 0) {
",2,1,0,1,3,0,0,0,0,3,17,7,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,355,"                    return pattern.substring(text, pos.getIndex());
",0,0,0,2,4,0,10,0,0,10,47,10,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,375,"        if (!containsElements(customPatterns)) {
",0,0,0,2,5,0,4,0,0,5,40,4,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,378,"        StringBuilder sb = new StringBuilder(pattern.length() * 2);
",2,1,0,2,4,0,4,4,0,11,59,4,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,379,"        ParsePosition pos = new ParsePosition(0);
",2,0,0,1,2,0,0,4,0,6,41,4,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,380,"        int fe = -1;
",2,0,0,0,0,0,0,0,0,3,12,5,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,381,"        int depth = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,382,"        while (pos.getIndex() < pattern.length()) {
",0,1,0,3,7,0,8,0,0,9,43,4,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,383,"            char c = pattern.charAt(pos.getIndex());
",2,0,0,2,4,0,8,0,0,10,40,7,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,384,"            switch (c) {
",2,0,0,1,3,0,0,0,0,2,12,6,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,389,"                depth++;
",2,0,0,0,0,0,0,0,0,3,8,7,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,390,"                if (depth == 1) {
",2,1,0,1,3,0,0,0,0,3,17,7,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,391,"                    fe++;
",2,0,0,0,0,0,0,0,0,3,5,9,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,392,"                    sb.append(START_FE).append(
",0,0,0,1,3,0,8,0,0,8,27,10,0.25000,0,1
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,394,"                    String customPattern = customPatterns.get(fe);
",2,0,0,1,2,0,6,2,0,10,46,9,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,395,"                    if (customPattern != null) {
",2,1,0,1,3,0,0,0,0,3,28,9,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,396,"                        sb.append(START_FMT).append(customPattern);
",0,0,0,2,4,0,10,0,0,10,43,12,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,398,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,401,"                depth--;
",2,0,0,0,0,0,0,0,0,3,8,7,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,404,"                sb.append(c);
",0,0,0,1,2,0,6,0,0,6,13,8,0.25000,0,1
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,405,"                next(pos);
",0,0,0,1,2,0,4,0,0,4,10,8,0.25000,0,1
defect4j,lang,org/apache/commons/lang3/text/ExtendedMessageFormat,23,407,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.25000,0,0
