dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,predict
defect4j,lang,org/apache/commons/lang/Entities,42,831,"                if (c > 0x7F) {
",2,1,0,1,3,0,0,0,0,3,15,8,0.33333,1,-1
defect4j,lang,org/apache/commons/lang/text/ExtendedMessageFormat,43,422,"            return appendTo == null ? null : appendTo.append(QUOTE);
",2,1,0,1,2,1,6,0,0,9,56,7,0.00000,1,-1
defect4j,lang,org/apache/commons/lang/NumberUtils,44,145,"        if (val.startsWith(""--"")) {
",0,0,0,2,5,0,4,0,0,5,27,5,0.50000,1,-1
defect4j,lang,org/apache/commons/lang/StringUtils,45,282,"        return str == null ? EMPTY : str.trim();
",4,1,0,1,2,1,4,0,0,9,40,5,0.00000,0,-1
defect4j,lang,org/apache/commons/lang/StringUtils,45,309,"        return str == null ? null : str.trim();
",2,1,0,1,2,1,4,0,0,7,39,5,0.00000,0,-1
defect4j,lang,org/apache/commons/lang/StringUtils,45,335,"        String ts = trim(str);
",2,0,0,1,2,0,4,2,0,8,22,4,0.00000,0,-1
defect4j,lang,org/apache/commons/lang/StringUtils,45,336,"        return isEmpty(ts) ? null : ts;
",2,0,0,1,2,1,4,0,0,7,31,5,0.00000,0,-1
defect4j,lang,org/apache/commons/lang/StringUtils,45,361,"        return str == null ? EMPTY : str.trim();
",4,1,0,1,2,1,4,0,0,9,40,5,0.00000,0,-1
defect4j,lang,org/apache/commons/lang/StringUtils,45,389,"        return strip(str, null);
",0,0,0,1,2,1,4,0,0,5,24,4,0.00000,0,-1
defect4j,lang,org/apache/commons/lang/StringEscapeUtils,46,244,"                            out.write('\\');
",0,0,0,1,2,0,4,0,0,5,16,13,1.00000,0,-1
defect4j,lang,org/apache/commons/lang/StringEscapeUtils,46,246,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,1.00000,0,-1
defect4j,lang,org/apache/commons/lang/text/StrBuilder,47,158,"        return nullText;
",2,0,0,0,0,1,0,0,0,2,16,4,1,0,-1
defect4j,lang,org/apache/commons/lang/text/StrBuilder,47,1183,"        if (width > 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.33333,0,-1
defect4j,lang,org/apache/commons/lang/text/StrBuilder,47,1184,"            ensureCapacity(size + width);
",4,1,0,1,2,0,2,0,0,7,29,7,0.33333,0,-1
defect4j,lang,org/apache/commons/lang/text/StrBuilder,47,1185,"            String str = (obj == null ? getNullText() : obj.toString());
",4,1,0,3,6,0,6,2,0,14,60,6,0.33333,0,-1
defect4j,lang,org/apache/commons/lang/text/StrBuilder,47,1186,"            int strLen = str.length();
",2,0,0,1,2,0,4,0,0,6,26,7,0.33333,0,-1
defect4j,lang,org/apache/commons/lang/text/StrBuilder,47,1227,"        if (width > 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.25000,0,-1
defect4j,lang,org/apache/commons/lang/text/StrBuilder,47,1228,"            ensureCapacity(size + width);
",4,1,0,1,2,0,2,0,0,7,29,7,0.25000,0,-1
defect4j,lang,org/apache/commons/lang/text/StrBuilder,47,1229,"            String str = (obj == null ? getNullText() : obj.toString());
",4,1,0,3,6,0,6,2,0,14,60,6,0.25000,0,-1
defect4j,lang,org/apache/commons/lang/text/StrBuilder,47,98,"        this(CAPACITY);
",2,0,0,1,2,0,0,0,0,2,15,4,0.02837,0,-1
defect4j,lang,org/apache/commons/lang/text/StrBuilder,47,99,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02837,0,-1
defect4j,lang,org/apache/commons/lang/text/StrBuilder,47,107,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.02778,0,-1
defect4j,lang,org/apache/commons/lang/text/StrBuilder,47,108,"        if (initialCapacity <= 0) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.02778,0,-1
defect4j,lang,org/apache/commons/lang/text/StrBuilder,47,111,"        buffer = new char[initialCapacity];
",2,0,1,1,2,0,0,0,0,5,35,4,0.02778,0,-1
defect4j,lang,org/apache/commons/lang/text/StrBuilder,47,112,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02778,0,-1
defect4j,lang,org/apache/commons/lang/builder/EqualsBuilder,48,372,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.06667,0,-1
defect4j,lang,org/apache/commons/lang/builder/EqualsBuilder,48,381,"                isEquals = lhs.equals(rhs);
",2,0,0,1,2,0,6,0,0,9,27,6,0.05263,0,-1
defect4j,lang,org/apache/commons/lang/builder/EqualsBuilder,48,368,"        if (isEquals == false) {
",2,1,0,1,3,0,0,0,0,4,24,4,0.02222,0,-1
defect4j,lang,org/apache/commons/lang/math/Fraction,49,146,"            if (numerator==Integer.MIN_VALUE ||
",6,2,0,0,1,0,0,0,0,8,35,6,0.25000,0,-1
defect4j,lang,org/apache/commons/lang/math/Fraction,49,150,"            numerator = -numerator;
",4,0,0,0,0,0,0,0,0,6,23,6,0.25000,0,-1
defect4j,lang,org/apache/commons/lang/math/Fraction,49,151,"            denominator = -denominator;
",4,0,0,0,0,0,0,0,0,6,27,6,0.25000,0,-1
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1708,"        public Pair(Object obj1, Object obj2) {
",6,0,0,1,3,1,0,4,0,11,39,3,1,0,-1
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1709,"            mObj1 = obj1;
",4,0,0,0,0,0,0,0,0,5,13,5,1,0,-1
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1710,"            mObj2 = obj2;
",4,0,0,0,0,0,0,0,0,5,13,5,1,0,-1
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1711,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0,-1
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1738,"            return
",0,0,0,0,0,1,0,0,0,0,6,3,1,0,-1
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,772,"            return new UnpaddedNumberField(field);
",2,0,0,1,2,1,0,2,0,4,38,6,1,0,-1
defect4j,lang,org/apache/commons/lang/BooleanUtils,51,44,"      super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0,-1
defect4j,lang,org/apache/commons/lang/BooleanUtils,51,45,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0,-1
defect4j,lang,org/apache/commons/lang/StringEscapeUtils,52,150,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,1.00000,0,-1
defect4j,lang,org/apache/commons/lang/StringEscapeUtils,52,173,"            throw new IllegalArgumentException(""The Writer must not be null"");
",0,0,0,1,2,0,0,2,0,4,66,6,1.00000,0,-1
defect4j,lang,org/apache/commons/lang/StringEscapeUtils,52,229,"                        out.write('\\');
",0,0,0,1,2,0,4,0,0,5,16,13,1.00000,0,-1
defect4j,lang,org/apache/commons/lang/time/DateUtils,53,676,"                        if (field == DateUtils.SEMI_MONTH) {
",6,1,0,1,3,0,0,0,0,7,36,12,1.00000,0,-1
defect4j,lang,org/apache/commons/lang/time/DateUtils,53,689,"                            val.add(fields[i][0], 1);
",0,0,1,3,6,0,4,0,0,8,25,15,1.00000,0,-1
defect4j,lang,org/apache/commons/lang/time/DateUtils,53,437,"        if (date == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.50000,0,-1
defect4j,lang,org/apache/commons/lang/LocaleUtils,54,116,"                throw new IllegalArgumentException(""Invalid locale format: "" + str);
",2,1,0,1,2,0,0,2,0,6,68,9,1.00000,0,-1
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,631,"                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);
",6,0,0,1,2,0,4,0,0,11,57,7,0.07692,0,-1
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,632,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.07692,0,-1
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,167,"        return getInstance(pattern, null, null);
",0,0,0,1,2,1,4,0,0,5,40,4,0.06667,0,-1
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,553,"            locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,6,0.06250,0,-1
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,614,"                    rule = selectNumberRule(Calendar.YEAR, tokenLen);
",6,0,0,1,2,0,4,0,0,11,49,9,0.05882,0,-1
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,625,"                    rule = TwoDigitMonthField.INSTANCE;
",6,0,0,0,0,0,0,0,0,7,35,11,0.05882,0,-1
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,777,"            return new PaddedNumberField(field, padding);
",4,0,0,1,2,1,0,2,0,6,45,6,0.05882,0,-1
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1261,"        PaddedNumberField(int field, int size) {
",6,0,0,1,3,0,0,0,0,6,40,3,0.05882,0,-1
defect4j,lang,org/apache/commons/lang/SystemUtils,57,1083,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0,-1
defect4j,lang,org/apache/commons/lang/SystemUtils,57,1084,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0,-1
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,464,"                    throw new NumberFormatException(str + "" is not a valid number."");
",2,1,0,1,2,0,0,2,0,6,65,8,1.00000,0,-1
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,1508,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,1.00000,0,-1
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,398,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.50000,0,-1
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,401,"        if (StringUtils.isBlank(str)) {
",0,0,0,2,5,0,6,0,0,6,31,5,0.50000,0,-1
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,404,"        if (str.startsWith(""--"")) {
",0,0,0,2,5,0,4,0,0,5,27,5,0.50000,0,-1
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,411,"        if (str.startsWith(""0x"") || str.startsWith(""-0x"")) {
",0,1,0,3,7,0,8,0,0,11,52,4,0.50000,0,-1
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,414,"        char lastChar = str.charAt(str.length() - 1);
",2,1,0,2,4,0,8,0,0,11,45,5,0.50000,0,-1
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,418,"        int decPos = str.indexOf('.');
",2,0,0,1,2,0,4,0,0,7,30,5,0.50000,0,-1
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,419,"        int expPos = str.indexOf('e') + str.indexOf('E') + 1;
",2,1,0,2,4,0,8,0,0,13,53,5,0.50000,0,-1
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,421,"        if (decPos > -1) {
",2,1,0,1,3,0,0,0,0,4,18,4,0.50000,0,-1
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,433,"            if (expPos > -1) {
",2,1,0,1,3,0,0,0,0,4,18,6,0.50000,0,-1
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,436,"                mant = str;
",4,0,0,0,0,0,0,0,0,5,11,8,0.50000,0,-1
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,438,"            dec = null;
",2,0,0,0,0,0,0,0,0,3,11,6,0.50000,0,-1
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,440,"        if (!Character.isDigit(lastChar)) {
",0,0,0,2,5,0,6,0,0,7,35,4,0.50000,0,-1
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,441,"            if (expPos > -1 && expPos < str.length() - 1) {
",4,4,0,2,5,0,4,0,0,13,47,6,0.50000,0,-1
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,444,"                exp = null;
",2,0,0,0,0,0,0,0,0,3,11,8,0.50000,0,-1
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,447,"            String numeric = str.substring(0, str.length() - 1);
",2,1,0,2,4,0,8,2,0,13,52,6,0.50000,0,-1
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,448,"            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
",2,1,0,2,4,0,8,0,0,11,55,7,0.50000,0,-1
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,449,"            switch (lastChar) {
",2,0,0,1,3,0,0,0,0,2,19,6,0.50000,0,-1
defect4j,lang,org/apache/commons/lang/math/NumberUtils,58,452,"                    if (dec == null
",2,1,0,0,1,0,0,0,0,3,15,10,0.50000,0,-1
