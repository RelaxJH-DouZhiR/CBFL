dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,predict
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,467,"            final int hexDigits = str.length() - pfxLen;
",4,1,0,1,2,1,4,0,0,10,44,6,0.33333,1,-1
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,3,605,"        } catch (final NumberFormatException nfe) { // NOPMD
",2,0,0,1,4,1,0,2,0,5,52,6,0.00000,1,-1
defect4j,lang,org/apache/commons/lang3/text/translate/LookupTranslator,4,77,"            final CharSequence result = lookupMap.get(subSeq);
",2,0,0,1,2,1,6,2,0,11,50,6,0.04167,1,-1
defect4j,lang,org/apache/commons/lang3/text/translate/CharSequenceTranslator,6,95,"                pos += Character.charCount(Character.codePointAt(input, pos));
",2,0,0,2,4,0,12,0,0,15,62,8,0.03333,1,-1
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,462,"                pfxLen += pfx.length();
",2,0,0,1,2,0,4,0,0,7,23,8,0.33333,0,-1
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,463,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.33333,0,-1
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,468,"            if (hexDigits > 16) { // too many for Long
",2,1,0,1,3,0,0,0,0,3,42,6,0.33333,0,-1
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,471,"            if (hexDigits > 8) { // too many for an int
",2,1,0,1,3,0,0,0,0,3,43,6,0.33333,0,-1
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,474,"            return createInteger(str);
",0,0,0,1,2,1,4,0,0,4,26,7,0.33333,0,-1
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,680,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.25000,0,-1
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,684,"        return Integer.decode(str);
",0,0,0,1,2,1,6,0,0,6,27,5,0.25000,0,-1
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,3,494,"                dec = str.substring(decPos + 1);
",4,1,0,1,2,0,4,0,0,10,32,8,0.50000,0,-1
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,3,573,"            exp = null;
",2,0,0,0,0,0,0,0,0,3,11,6,0.33333,0,-1
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,3,594,"                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
",2,3,0,5,11,0,8,0,0,15,65,6,0.33333,0,-1
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,3,595,"                    return f;
",2,0,0,0,0,1,0,0,0,2,9,8,0.33333,0,-1
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,3,492,"                dec = str.substring(decPos + 1, expPos);
",4,1,0,1,2,0,6,0,0,12,40,8,0.25000,0,-1
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,3,496,"            mant = str.substring(0, decPos);
",2,0,0,1,2,0,6,0,0,9,32,6,0.25000,0,-1
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,3,497,"            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
",2,0,0,1,2,0,4,0,0,7,128,6,0.25000,0,-1
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,3,570,"        if (expPos > -1 && expPos < str.length() - 1) {
",4,4,0,2,5,0,4,0,0,13,47,4,0.25000,0,-1
defect4j,lang,org/apache/commons/lang3/StringEscapeUtils,6,556,"        return ESCAPE_CSV.translate(input);
",0,0,0,1,2,1,6,0,0,6,35,5,1.00000,0,-1
defect4j,lang,org/apache/commons/lang3/StringEscapeUtils,6,156,"            if(index != 0) {
",2,1,0,1,3,0,0,0,0,3,16,5,0.50000,0,-1
defect4j,lang,org/apache/commons/lang3/StringEscapeUtils,6,160,"            if (StringUtils.containsNone(input.toString(), CSV_SEARCH_CHARS)) {
",0,0,0,3,7,0,10,0,0,10,67,6,0.50000,0,-1
defect4j,lang,org/apache/commons/lang3/StringEscapeUtils,6,161,"                out.write(input.toString());
",0,0,0,2,4,0,8,0,0,8,28,8,0.50000,0,-1
defect4j,lang,org/apache/commons/lang3/StringEscapeUtils,6,167,"            return input.length();
",0,0,0,1,2,1,4,0,0,4,22,6,0.50000,0,-1
defect4j,lang,org/apache/commons/lang3/StringUtils,6,1737,"        if (cs == null || searchChars == null) {
",4,3,0,1,3,0,0,0,0,7,40,4,0.50000,0,-1
defect4j,lang,org/apache/commons/lang3/StringUtils,6,1740,"        int csLen = cs.length();
",2,0,0,1,2,0,4,0,0,6,24,5,0.50000,0,-1
defect4j,lang,org/apache/commons/lang3/StringUtils,6,1741,"        int csLast = csLen - 1;
",4,1,0,0,0,0,0,0,0,5,23,5,0.50000,0,-1
defect4j,lang,org/apache/commons/lang3/StringUtils,6,1742,"        int searchLen = searchChars.length;
",6,0,0,0,0,0,0,0,0,6,35,5,0.50000,0,-1
defect4j,lang,org/apache/commons/lang3/StringUtils,6,1743,"        int searchLast = searchLen - 1;
",4,1,0,0,0,0,0,0,0,5,31,5,0.50000,0,-1
defect4j,lang,org/apache/commons/lang3/StringUtils,6,1744,"        for (int i = 0; i < csLen; i++) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.50000,0,-1
defect4j,lang,org/apache/commons/lang3/StringUtils,6,1745,"            char ch = cs.charAt(i);
",2,0,0,1,2,0,6,0,0,8,23,7,0.50000,0,-1
defect4j,lang,org/apache/commons/lang3/StringUtils,6,1746,"            for (int j = 0; j < searchLen; j++) {
",8,1,0,1,3,0,0,0,0,10,37,6,0.50000,0,-1
