dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,predict
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,467,"            final int hexDigits = str.length() - pfxLen;
",4,1,0,1,2,1,4,0,0,10,44,6,0.33333,1,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,3,605,"        } catch (final NumberFormatException nfe) { // NOPMD
",2,0,0,1,4,1,0,2,0,5,52,6,0.00000,1,0
defect4j,lang,org/apache/commons/lang3/text/translate/LookupTranslator,4,77,"            final CharSequence result = lookupMap.get(subSeq);
",2,0,0,1,2,1,6,2,0,11,50,6,0.04167,1,0
defect4j,lang,org/apache/commons/lang3/text/translate/CharSequenceTranslator,6,95,"                pos += Character.charCount(Character.codePointAt(input, pos));
",2,0,0,2,4,0,12,0,0,15,62,8,0.03333,1,1
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,7,725,"        return new BigDecimal(str);
",2,0,0,1,2,1,0,2,0,4,27,5,0.50000,1,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,462,"                pfxLen += pfx.length();
",2,0,0,1,2,0,4,0,0,7,23,8,0.33333,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,463,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.33333,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,468,"            if (hexDigits > 16) { // too many for Long
",2,1,0,1,3,0,0,0,0,3,42,6,0.33333,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,471,"            if (hexDigits > 8) { // too many for an int
",2,1,0,1,3,0,0,0,0,3,43,6,0.33333,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,474,"            return createInteger(str);
",0,0,0,1,2,1,4,0,0,4,26,7,0.33333,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,680,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,684,"        return Integer.decode(str);
",0,0,0,1,2,1,6,0,0,6,27,5,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,451,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.11111,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,454,"        if (StringUtils.isBlank(str)) {
",0,0,0,2,5,0,6,0,0,6,31,5,0.11111,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,458,"        final String[] hex_prefixes = {""0x"", ""0X"", ""-0x"", ""-0X"", ""#"", ""-#""};
",2,0,0,2,4,1,0,2,0,11,68,4,0.11111,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,459,"        int pfxLen = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.11111,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,460,"        for(final String pfx : hex_prefixes) {
",4,0,0,1,3,1,0,2,0,7,38,4,0.11111,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,461,"            if (str.startsWith(pfx)) {
",0,0,0,2,5,0,6,0,0,6,26,7,0.11111,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,466,"        if (pfxLen > 0) { // we have a hex number
",2,1,0,1,3,0,0,0,0,3,41,4,0.11111,0,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,257,"        if (cs == null || (strLen = cs.length()) == 0) {
",4,3,0,3,7,0,4,0,0,12,48,4,0.10000,0,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,260,"        for (int i = 0; i < strLen; i++) {
",8,1,0,1,3,0,0,0,0,10,34,4,0.10000,0,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,261,"            if (Character.isWhitespace(cs.charAt(i)) == false) {
",0,1,0,3,7,0,10,0,0,12,52,6,0.10000,0,1
defect4j,lang,org/apache/commons/lang3/StringUtils,1,262,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.10000,0,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,181,"    private static final Pattern WHITESPACE_PATTERN = Pattern.compile(""(?: \\s|[\\s&&[^ ]])\\s*"");
",2,0,0,4,8,3,4,2,0,12,94,2,0.09091,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,34,"    public static final Long LONG_ZERO = Long.valueOf(0L);
",2,0,0,1,2,3,4,2,0,11,54,2,0.01149,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,36,"    public static final Long LONG_ONE = Long.valueOf(1L);
",2,0,0,1,2,3,4,2,0,11,53,2,0.01149,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,38,"    public static final Long LONG_MINUS_ONE = Long.valueOf(-1L);
",2,0,0,1,2,3,4,2,0,12,60,2,0.01149,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,40,"    public static final Integer INTEGER_ZERO = Integer.valueOf(0);
",2,0,0,1,2,3,4,2,0,11,62,2,0.01149,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,42,"    public static final Integer INTEGER_ONE = Integer.valueOf(1);
",2,0,0,1,2,3,4,2,0,11,61,2,0.01149,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,3,494,"                dec = str.substring(decPos + 1);
",4,1,0,1,2,0,4,0,0,10,32,8,0.50000,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,3,573,"            exp = null;
",2,0,0,0,0,0,0,0,0,3,11,6,0.33333,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,3,594,"                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
",2,3,0,5,11,0,8,0,0,15,65,6,0.33333,0,1
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,3,595,"                    return f;
",2,0,0,0,0,1,0,0,0,2,9,8,0.33333,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,3,492,"                dec = str.substring(decPos + 1, expPos);
",4,1,0,1,2,0,6,0,0,12,40,8,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,3,496,"            mant = str.substring(0, decPos);
",2,0,0,1,2,0,6,0,0,9,32,6,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,3,497,"            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
",2,0,0,1,2,0,4,0,0,7,128,6,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,3,570,"        if (expPos > -1 && expPos < str.length() - 1) {
",4,4,0,2,5,0,4,0,0,13,47,4,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,3,571,"            exp = str.substring(expPos + 1, str.length());
",4,1,0,2,4,0,8,0,0,14,46,6,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,3,575,"        if (dec == null && exp == null) { // no decimal point and no exponent
",4,3,0,1,3,0,0,0,0,7,69,4,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,3,591,"        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
",2,1,0,2,4,1,8,0,0,12,61,4,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,3,593,"                final Float f = createFloat(str);
",2,0,0,1,2,1,4,2,0,9,33,6,0.25000,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,3,488,"            if (expPos > -1) { // there is an exponent
",2,1,0,1,3,0,0,0,0,4,42,6,0.20000,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,3,489,"                if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE
",6,3,0,2,5,0,4,0,0,13,89,8,0.20000,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,3,509,"        if (!Character.isDigit(lastChar) && lastChar != '.') {
",2,2,0,2,5,0,6,0,0,12,54,4,0.16667,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,3,621,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.16667,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,3,624,"        for (int i = str.length() - 1; i >= 0; i--) {
",6,2,0,2,5,0,4,0,0,13,45,4,0.16667,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,3,625,"            if (str.charAt(i) != '0') {
",0,1,0,2,5,0,6,0,0,8,27,6,0.16667,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,3,626,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.16667,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,3,643,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.16667,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,3,646,"        return Float.valueOf(str);
",0,0,0,1,2,1,6,0,0,6,26,5,0.16667,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,3,451,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.12500,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,3,454,"        if (StringUtils.isBlank(str)) {
",0,0,0,2,5,0,6,0,0,6,31,5,0.12500,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,3,458,"        final String[] hex_prefixes = {""0x"", ""0X"", ""-0x"", ""-0X"", ""#"", ""-#""};
",2,0,0,2,4,1,0,2,0,11,68,4,0.12500,0,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,3,459,"        int pfxLen = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.12500,0,0
defect4j,lang,org/apache/commons/lang3/LocaleUtils,5,99,"                throw new IllegalArgumentException(""Invalid locale format: "" + str);
",2,1,0,1,2,0,0,2,0,6,68,7,0.50000,0,0
defect4j,lang,org/apache/commons/lang3/StringEscapeUtils,6,556,"        return ESCAPE_CSV.translate(input);
",0,0,0,1,2,1,6,0,0,6,35,5,1.00000,0,0
defect4j,lang,org/apache/commons/lang3/StringEscapeUtils,6,156,"            if(index != 0) {
",2,1,0,1,3,0,0,0,0,3,16,5,0.50000,0,0
defect4j,lang,org/apache/commons/lang3/StringEscapeUtils,6,160,"            if (StringUtils.containsNone(input.toString(), CSV_SEARCH_CHARS)) {
",0,0,0,3,7,0,10,0,0,10,67,6,0.50000,0,1
defect4j,lang,org/apache/commons/lang3/StringEscapeUtils,6,161,"                out.write(input.toString());
",0,0,0,2,4,0,8,0,0,8,28,8,0.50000,0,0
defect4j,lang,org/apache/commons/lang3/StringEscapeUtils,6,167,"            return input.length();
",0,0,0,1,2,1,4,0,0,4,22,6,0.50000,0,0
defect4j,lang,org/apache/commons/lang3/StringUtils,6,1737,"        if (cs == null || searchChars == null) {
",4,3,0,1,3,0,0,0,0,7,40,4,0.50000,0,0
defect4j,lang,org/apache/commons/lang3/StringUtils,6,1740,"        int csLen = cs.length();
",2,0,0,1,2,0,4,0,0,6,24,5,0.50000,0,0
defect4j,lang,org/apache/commons/lang3/StringUtils,6,1741,"        int csLast = csLen - 1;
",4,1,0,0,0,0,0,0,0,5,23,5,0.50000,0,0
defect4j,lang,org/apache/commons/lang3/StringUtils,6,1742,"        int searchLen = searchChars.length;
",6,0,0,0,0,0,0,0,0,6,35,5,0.50000,0,0
defect4j,lang,org/apache/commons/lang3/StringUtils,6,1743,"        int searchLast = searchLen - 1;
",4,1,0,0,0,0,0,0,0,5,31,5,0.50000,0,0
defect4j,lang,org/apache/commons/lang3/StringUtils,6,1744,"        for (int i = 0; i < csLen; i++) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.50000,0,0
defect4j,lang,org/apache/commons/lang3/StringUtils,6,1745,"            char ch = cs.charAt(i);
",2,0,0,1,2,0,6,0,0,8,23,7,0.50000,0,0
defect4j,lang,org/apache/commons/lang3/StringUtils,6,1746,"            for (int j = 0; j < searchLen; j++) {
",8,1,0,1,3,0,0,0,0,10,37,6,0.50000,0,0
defect4j,lang,org/apache/commons/lang3/StringUtils,6,1747,"                if (searchChars[j] == ch) {
",2,1,1,2,5,0,0,0,0,7,27,8,0.50000,0,1
defect4j,lang,org/apache/commons/lang3/StringUtils,6,1763,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.50000,0,0
defect4j,lang,org/apache/commons/lang3/StringEscapeUtils,6,268,"    static class CsvUnescaper extends CharSequenceTranslator {
",2,0,0,0,1,1,0,2,0,5,58,2,0.04167,0,0
defect4j,lang,org/apache/commons/lang3/StringEscapeUtils,6,272,"        private static final String CSV_QUOTE_STR = String.valueOf(CSV_QUOTE);
",2,0,0,1,2,3,6,2,0,13,70,3,0.04167,0,0
defect4j,lang,org/apache/commons/lang3/StringEscapeUtils,6,273,"        private static final char[] CSV_SEARCH_CHARS = 
",2,0,0,1,2,3,0,0,0,5,46,3,0.04167,0,0
defect4j,lang,org/apache/commons/lang3/text/translate/CharSequenceTranslator,6,108,"        CharSequenceTranslator[] newArray = new CharSequenceTranslator[translators.length + 1];
",6,1,0,2,4,0,0,4,0,11,87,4,0.04167,0,0
defect4j,lang,org/apache/commons/lang3/text/translate/CharSequenceTranslator,6,109,"        newArray[0] = this;
",0,0,1,1,2,0,0,0,0,3,19,4,0.04167,0,1
defect4j,lang,org/apache/commons/lang3/text/translate/CharSequenceTranslator,6,110,"        System.arraycopy(translators, 0, newArray, 1, translators.length);
",4,0,0,1,2,0,8,0,0,12,66,5,0.04167,0,0
defect4j,lang,org/apache/commons/lang3/text/translate/CharSequenceTranslator,6,111,"        return new AggregateTranslator(newArray);
",2,0,0,1,2,1,0,2,0,4,41,5,0.04167,0,0
defect4j,lang,org/apache/commons/lang3/StringEscapeUtils,6,52,"    public static final CharSequenceTranslator ESCAPE_JAVA = 
",2,0,0,0,0,3,0,2,0,7,56,2,0.04167,0,0
defect4j,lang,org/apache/commons/lang3/StringEscapeUtils,6,72,"    public static final CharSequenceTranslator ESCAPE_ECMASCRIPT = 
",2,0,0,0,0,3,0,2,0,7,62,2,0.04167,0,0
defect4j,lang,org/apache/commons/lang3/StringEscapeUtils,6,94,"    public static final CharSequenceTranslator ESCAPE_XML = 
",2,0,0,0,0,3,0,2,0,7,55,2,0.04167,0,0
defect4j,lang,org/apache/commons/lang3/StringEscapeUtils,6,109,"    public static final CharSequenceTranslator ESCAPE_HTML3 = 
",2,0,0,0,0,3,0,2,0,7,57,2,0.04167,0,0
defect4j,lang,org/apache/commons/lang3/StringEscapeUtils,6,124,"    public static final CharSequenceTranslator ESCAPE_HTML4 = 
",2,0,0,0,0,3,0,2,0,7,57,2,0.04167,0,0
defect4j,lang,org/apache/commons/lang3/StringEscapeUtils,6,140,"    public static final CharSequenceTranslator ESCAPE_CSV = new CsvEscaper();
",2,0,0,1,2,3,0,4,0,9,73,2,0.04167,0,0
defect4j,lang,org/apache/commons/lang3/StringEscapeUtils,6,183,"    public static final CharSequenceTranslator UNESCAPE_JAVA = 
",2,0,0,0,0,3,0,2,0,7,58,2,0.04167,0,0
defect4j,lang,org/apache/commons/lang3/StringEscapeUtils,6,206,"    public static final CharSequenceTranslator UNESCAPE_ECMASCRIPT = UNESCAPE_JAVA;
",4,0,0,0,0,3,0,2,0,9,79,2,0.04167,0,0
defect4j,lang,org/apache/commons/lang3/StringEscapeUtils,6,217,"    public static final CharSequenceTranslator UNESCAPE_HTML3 = 
",2,0,0,0,0,3,0,2,0,7,59,2,0.04167,0,0
defect4j,lang,org/apache/commons/lang3/StringEscapeUtils,6,233,"    public static final CharSequenceTranslator UNESCAPE_HTML4 = 
",2,0,0,0,0,3,0,2,0,7,59,2,0.04167,0,0
defect4j,lang,org/apache/commons/lang3/StringEscapeUtils,6,250,"    public static final CharSequenceTranslator UNESCAPE_XML = 
",2,0,0,0,0,3,0,2,0,7,57,2,0.04167,0,0
defect4j,lang,org/apache/commons/lang3/StringEscapeUtils,6,266,"    public static final CharSequenceTranslator UNESCAPE_CSV = new CsvUnescaper();
",2,0,0,1,2,3,0,4,0,9,77,2,0.04167,0,0
defect4j,lang,org/apache/commons/lang3/text/translate/AggregateTranslator,6,40,"    public AggregateTranslator(CharSequenceTranslator... translators) {
",4,0,0,1,3,1,0,2,0,7,67,2,0.04167,0,0
defect4j,lang,org/apache/commons/lang3/text/translate/AggregateTranslator,6,41,"        this.translators = ArrayUtils.clone(translators);
",2,0,0,1,2,0,6,0,0,9,49,4,0.04167,0,0
defect4j,lang,org/apache/commons/lang3/text/translate/AggregateTranslator,6,42,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04167,0,0
defect4j,lang,org/apache/commons/lang3/StringEscapeUtils,6,145,"    static class CsvEscaper extends CharSequenceTranslator {
",2,0,0,0,1,1,0,2,0,5,56,2,0.04167,0,0
defect4j,lang,org/apache/commons/lang3/StringEscapeUtils,6,149,"        private static final String CSV_QUOTE_STR = String.valueOf(CSV_QUOTE);
",2,0,0,1,2,3,6,2,0,13,70,3,0.04167,0,0
defect4j,lang,org/apache/commons/lang3/StringEscapeUtils,6,150,"        private static final char[] CSV_SEARCH_CHARS = 
",2,0,0,1,2,3,0,0,0,5,46,3,0.04167,0,0
defect4j,lang,org/apache/commons/lang3/ArrayUtils,6,320,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.04167,0,0
defect4j,lang,org/apache/commons/lang3/ArrayUtils,6,323,"        return array.clone();
",0,0,0,1,2,1,4,0,0,4,21,5,0.04167,0,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,7,89,"    public static final String AWT_TOOLKIT = getSystemProperty(""awt.toolkit"");
",2,0,0,1,2,3,2,2,0,10,74,2,1.00000,0,0
