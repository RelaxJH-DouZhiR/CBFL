dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1708,"        public Pair(Object obj1, Object obj2) {
",6,0,0,1,3,1,0,4,0,11,39,3,1,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1709,"            mObj1 = obj1;
",4,0,0,0,0,0,0,0,0,5,13,5,1,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1710,"            mObj2 = obj2;
",4,0,0,0,0,0,0,0,0,5,13,5,1,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1711,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1738,"            return
",0,0,0,0,0,0,0,0,0,0,6,3,1,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,772,"            return new UnpaddedNumberField(field);
",2,0,0,1,2,0,0,2,0,4,38,6,1,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,954,"        return mLocale;
",2,0,0,0,0,0,0,0,0,2,15,4,1,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1185,"        UnpaddedNumberField(int field) {
",4,0,0,1,3,0,0,0,0,4,32,3,1,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1186,"            mField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,1,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1187,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1176,"        static final UnpaddedNumberField INSTANCE_YEAR = new UnpaddedNumberField(Calendar.YEAR);
",6,0,0,1,2,2,0,4,0,12,88,3,1,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1193,"            return 4;
",0,0,0,0,0,0,0,0,0,0,9,3,1,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,234,"        return getDateInstance(style, null, null);
",0,0,0,1,2,0,4,0,0,5,42,4,1.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,293,"                locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,8,1.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,408,"        return getDateTimeInstance(dateStyle, timeStyle, null, null);
",0,0,0,1,2,0,6,0,0,7,61,4,1.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,425,"        return getDateTimeInstance(dateStyle, timeStyle, null, locale);
",0,0,0,1,2,0,8,0,0,9,63,4,1.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,461,"        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));
",6,0,0,3,6,0,0,8,0,14,70,4,1.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,462,"        if (timeZone != null) {
",2,1,0,1,3,0,0,0,0,3,23,4,1.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,465,"        if (locale != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,1.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,466,"            key = new Pair(key, locale);
",6,0,0,1,2,0,0,2,0,9,28,6,1.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,469,"        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);
",2,0,0,2,4,0,6,4,0,12,73,4,1.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,470,"        if (format == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,1.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,471,"            if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,6,1.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,472,"                locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,8,1.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,475,"                SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,
",2,0,0,1,3,0,8,4,0,14,100,8,1.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,477,"                String pattern = formatter.toPattern();
",2,0,0,1,2,0,4,2,0,8,39,8,1.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,478,"                format = getInstance(pattern, timeZone, locale);
",2,0,0,1,2,0,8,0,0,11,48,8,1.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,479,"                cDateTimeInstanceCache.put(key, format);
",0,0,0,1,2,0,8,0,0,8,40,9,1.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,483,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,485,"        return format;
",2,0,0,0,0,0,0,0,0,2,14,4,1.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,672,"                if (tokenLen >= 4) {
",2,1,0,1,3,0,0,0,0,3,20,7,1.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,675,"                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);
",12,0,0,1,2,0,0,2,0,15,81,9,1.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,677,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,1.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1717,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,1.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1721,"            if (!(obj instanceof Pair)) {
",2,0,0,2,5,0,0,2,0,5,29,5,1.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1725,"            Pair key = (Pair)obj;
",4,0,0,1,2,0,0,4,0,8,21,5,1.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1727,"            return
",0,0,0,0,0,0,0,0,0,0,6,3,1.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1538,"        TimeZoneNameRule(TimeZone timeZone, boolean timeZoneForced, Locale locale, int style) {
",10,0,0,1,3,0,0,4,0,14,87,3,1.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1539,"            mTimeZone = timeZone;
",4,0,0,0,0,0,0,0,0,5,21,5,1.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1540,"            mTimeZoneForced = timeZoneForced;
",4,0,0,0,0,0,0,0,0,5,33,5,1.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1541,"            mLocale = locale;
",4,0,0,0,0,0,0,0,0,5,17,5,1.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1542,"            mStyle = style;
",4,0,0,0,0,0,0,0,0,5,15,5,1.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1544,"            if (timeZoneForced) {
",2,0,0,1,3,0,0,0,0,2,21,5,1.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1548,"                mStandard = null;
",2,0,0,0,0,0,0,0,0,3,17,7,1.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1549,"                mDaylight = null;
",2,0,0,0,0,0,0,0,0,3,17,7,1.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1551,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1557,"            if (mTimeZoneForced) {
",2,0,0,1,3,0,0,0,0,2,22,5,1.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1559,"            } else if (mStyle == TimeZone.SHORT) {
",6,1,0,1,4,0,0,0,0,7,38,6,1.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1560,"                return 4;
",0,0,0,0,0,0,0,0,0,0,9,3,1.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1447,"        TwelveHourField(NumberRule rule) {
",4,0,0,1,3,0,0,2,0,6,34,3,0.50000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1448,"            mRule = rule;
",4,0,0,0,0,0,0,0,0,5,13,5,0.50000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1449,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1455,"            return mRule.estimateLength();
",0,0,0,1,2,0,4,0,0,4,30,6,0.50000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,249,"        return getDateInstance(style, null, locale);
",0,0,0,1,2,0,6,0,0,7,44,4,0.50000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,280,"        Object key = new Integer(style);
",4,0,0,1,2,0,0,4,0,8,32,4,0.50000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,281,"        if (timeZone != null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.50000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,285,"        if (locale != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.50000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,286,"            key = new Pair(key, locale);
",6,0,0,1,2,0,0,2,0,9,28,6,0.50000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,290,"        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);
",2,0,0,2,4,0,6,4,0,12,69,4,0.50000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,291,"        if (format == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.50000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,292,"            if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.50000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,296,"                SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateInstance(style, locale);
",2,0,0,2,4,0,8,4,0,14,90,8,0.50000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,297,"                String pattern = formatter.toPattern();
",2,0,0,1,2,0,4,2,0,8,39,8,0.50000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,298,"                format = getInstance(pattern, timeZone, locale);
",2,0,0,1,2,0,8,0,0,11,48,8,0.50000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,299,"                cDateInstanceCache.put(key, format);
",0,0,0,1,2,0,8,0,0,8,36,9,0.50000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,303,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,305,"        return format;
",2,0,0,0,0,0,0,0,0,2,14,4,0.50000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,633,"                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));
",6,0,0,2,4,0,4,2,0,13,70,7,0.50000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,634,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.50000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,663,"                rule = new TextField(Calendar.AM_PM, AmPmStrings);
",8,0,0,1,2,0,0,2,0,11,50,7,0.50000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,664,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.50000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,648,"                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);
",12,1,0,1,2,0,0,2,0,16,84,7,0.44444,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,649,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.44444,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,690,"                    rule = new StringLiteral(sub);
",4,0,0,1,2,0,0,2,0,7,30,9,0.44444,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,692,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.44444,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1112,"        StringLiteral(String value) {
",4,0,0,1,3,0,0,2,0,6,29,3,0.44444,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1113,"            mValue = value;
",4,0,0,0,0,0,0,0,0,5,15,5,0.44444,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1114,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.44444,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1120,"            return mValue.length();
",0,0,0,1,2,0,4,0,0,4,23,6,0.44444,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1145,"        TextField(int field, String[] values) {
",6,0,0,2,5,0,0,2,0,8,39,3,0.40000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1146,"            mField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.40000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1147,"            mValues = values;
",4,0,0,0,0,0,0,0,0,5,17,5,0.40000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1148,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.40000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1154,"            int max = 0;
",2,0,0,0,0,0,0,0,0,2,12,6,0.40000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1155,"            for (int i=mValues.length; --i >= 0; ) {
",8,1,0,1,3,0,0,0,0,10,40,5,0.40000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1156,"                int len = mValues[i].length();
",2,0,1,2,4,0,2,0,0,8,30,8,0.40000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1157,"                if (len > max) {
",4,1,0,1,3,0,0,0,0,5,16,7,0.40000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1158,"                    max = len;
",4,0,0,0,0,0,0,0,0,5,10,9,0.40000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1160,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.40000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1161,"            return max;
",2,0,0,0,0,0,0,0,0,2,11,5,0.40000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,630,"                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);
",6,0,0,1,2,0,4,0,0,11,57,7,0.28571,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,631,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.28571,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,613,"                    rule = selectNumberRule(Calendar.YEAR, tokenLen);
",6,0,0,1,2,0,4,0,0,11,49,9,0.22222,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,776,"            return new PaddedNumberField(field, padding);
",4,0,0,1,2,0,0,2,0,6,45,6,0.22222,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1272,"        PaddedNumberField(int field, int size) {
",6,0,0,1,3,0,0,0,0,6,40,3,0.22222,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1273,"            if (size < 3) {
",2,1,0,1,3,0,0,0,0,3,15,5,0.22222,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1277,"            mField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.22222,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1278,"            mSize = size;
",4,0,0,0,0,0,0,0,0,5,13,5,0.22222,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1279,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.22222,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1285,"            return 4;
",0,0,0,0,0,0,0,0,0,0,9,3,0.22222,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,538,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,539,"        if (pattern == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,542,"        mPattern = pattern;
",4,0,0,0,0,0,0,0,0,5,19,4,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,544,"        mTimeZoneForced = (timeZone != null);
",4,1,0,1,2,0,0,0,0,6,37,4,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,545,"        if (timeZone == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,546,"            timeZone = TimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,548,"        mTimeZone = timeZone;
",4,0,0,0,0,0,0,0,0,5,21,4,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,550,"        mLocaleForced = (locale != null);
",4,1,0,1,2,0,0,0,0,6,33,4,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,551,"        if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,554,"        mLocale = locale;
",4,0,0,0,0,0,0,0,0,5,17,4,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,555,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,110,"    private static Map cInstanceCache = new HashMap(7);
",2,0,0,1,2,2,0,4,0,8,51,2,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,111,"    private static Map cDateInstanceCache = new HashMap(7);
",2,0,0,1,2,2,0,4,0,8,55,2,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,112,"    private static Map cTimeInstanceCache = new HashMap(7);
",2,0,0,1,2,2,0,4,0,8,55,2,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,113,"    private static Map cDateTimeInstanceCache = new HashMap(7);
",2,0,0,1,2,2,0,4,0,8,59,2,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,114,"    private static Map cTimeZoneDisplayCache = new HashMap(7);
",2,0,0,1,2,2,0,4,0,8,58,2,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,212,"        FastDateFormat emptyFormat = new FastDateFormat(pattern, timeZone, locale);
",8,0,0,1,2,0,0,4,0,12,75,4,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,213,"        FastDateFormat format = (FastDateFormat) cInstanceCache.get(emptyFormat);
",2,0,0,2,4,0,6,4,0,12,73,4,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,214,"        if (format == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,215,"            format = emptyFormat;
",4,0,0,0,0,0,0,0,0,5,21,6,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,216,"            format.init();  // convert shell format into usable one
",0,0,0,1,2,0,4,0,0,4,55,7,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,217,"            cInstanceCache.put(format, format);  // this is OK!
",0,0,0,1,2,0,8,0,0,8,51,7,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,219,"        return format;
",2,0,0,0,0,0,0,0,0,2,14,4,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,561,"        List rulesList = parsePattern();
",2,0,0,1,2,0,2,2,0,6,32,4,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,562,"        mRules = (Rule[]) rulesList.toArray(new Rule[rulesList.size()]);
",2,0,0,5,10,0,8,4,0,15,64,4,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,564,"        int len = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,565,"        for (int i=mRules.length; --i >= 0; ) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,566,"            len += mRules[i].estimateLength();
",2,0,1,2,4,0,2,0,0,9,34,6,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,569,"        mMaxLengthEstimate = len;
",4,0,0,0,0,0,0,0,0,5,25,4,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,570,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,581,"        DateFormatSymbols symbols = new DateFormatSymbols(mLocale);
",4,0,0,1,2,0,0,4,0,8,59,4,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,582,"        List rules = new ArrayList();
",2,0,0,1,2,0,0,4,0,6,29,4,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,584,"        String[] ERAs = symbols.getEras();
",2,0,0,2,4,0,4,2,0,8,34,4,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,585,"        String[] months = symbols.getMonths();
",2,0,0,2,4,0,4,2,0,8,38,4,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,586,"        String[] shortMonths = symbols.getShortMonths();
",2,0,0,2,4,0,4,2,0,8,48,4,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,587,"        String[] weekdays = symbols.getWeekdays();
",2,0,0,2,4,0,4,2,0,8,42,4,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,588,"        String[] shortWeekdays = symbols.getShortWeekdays();
",2,0,0,2,4,0,4,2,0,8,52,4,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,589,"        String[] AmPmStrings = symbols.getAmPmStrings();
",2,0,0,2,4,0,4,2,0,8,48,4,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,591,"        int length = mPattern.length();
",2,0,0,1,2,0,4,0,0,6,31,5,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,592,"        int[] indexRef = new int[1];
",2,0,0,2,4,0,0,0,0,2,28,5,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,594,"        for (int i = 0; i < length; i++) {
",8,1,0,1,3,0,0,0,0,10,34,4,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,595,"            indexRef[0] = i;
",2,0,1,1,2,0,0,0,0,5,16,6,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,596,"            String token = parseToken(mPattern, indexRef);
",2,0,0,1,2,0,6,2,0,10,46,6,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,597,"            i = indexRef[0];
",2,0,1,1,2,0,0,0,0,5,16,6,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,599,"            int tokenLen = token.length();
",2,0,0,1,2,0,4,0,0,6,30,7,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,600,"            if (tokenLen == 0) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,605,"            char c = token.charAt(0);
",2,0,0,1,2,0,4,0,0,6,25,7,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,607,"            switch (c) {
",2,0,0,1,3,0,0,0,0,2,12,6,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,612,"                if (tokenLen >= 4) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,619,"                if (tokenLen >= 4) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,686,"                String sub = token.substring(1);
",2,0,0,1,2,0,4,2,0,8,32,7,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,687,"                if (sub.length() == 1) {
",0,1,0,2,5,0,4,0,0,5,24,7,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,688,"                    rule = new CharacterLiteral(sub.charAt(0));
",2,0,0,2,4,0,4,2,0,9,43,9,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,697,"            rules.add(rule);
",0,0,0,1,2,0,6,0,0,6,16,7,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,700,"        return rules;
",2,0,0,0,0,0,0,0,0,2,13,4,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,711,"        StringBuffer buf = new StringBuffer();
",2,0,0,1,2,0,0,4,0,6,38,4,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,713,"        int i = indexRef[0];
",2,0,1,1,2,0,0,0,0,4,20,5,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,714,"        int length = pattern.length();
",2,0,0,1,2,0,4,0,0,6,30,5,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,716,"        char c = pattern.charAt(i);
",2,0,0,1,2,0,6,0,0,8,27,5,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,717,"        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {
",8,7,0,1,3,0,0,0,0,19,51,4,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,720,"            buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,7,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,722,"            while (i + 1 < length) {
",4,2,0,1,3,0,0,0,0,6,24,6,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,723,"                char peek = pattern.charAt(i + 1);
",4,1,0,1,2,0,4,0,0,9,34,9,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,724,"                if (peek == c) {
",4,1,0,1,3,0,0,0,0,5,16,8,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,725,"                    buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,11,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,726,"                    i++;
",2,0,0,0,0,0,0,0,0,3,4,10,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,730,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,733,"            buf.append('\'');
",0,0,0,1,2,0,4,0,0,5,17,7,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,735,"            boolean inLiteral = false;
",2,0,0,0,0,0,0,0,0,3,26,7,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,737,"            for (; i < length; i++) {
",6,1,0,1,3,0,0,0,0,8,25,6,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,738,"                c = pattern.charAt(i);
",2,0,0,1,2,0,6,0,0,9,22,8,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,740,"                if (c == '\'') {
",2,1,0,1,3,0,0,0,0,4,16,8,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,748,"                } else if (!inLiteral &&
",2,1,0,0,2,0,0,0,0,4,24,9,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,750,"                    i--;
",2,0,0,0,0,0,0,0,0,3,4,11,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,751,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,753,"                    buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,12,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,758,"        indexRef[0] = i;
",2,0,1,1,2,0,0,0,0,5,16,4,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,759,"        return buf.toString();
",0,0,0,1,2,0,4,0,0,4,22,5,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,770,"        switch (padding) {
",2,0,0,1,3,0,0,0,0,2,18,4,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1001,"        int total = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1002,"        total += mPattern.hashCode();
",2,0,0,1,2,0,4,0,0,7,29,4,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1003,"        total += mTimeZone.hashCode();
",2,0,0,1,2,0,4,0,0,7,30,4,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1004,"        total += (mTimeZoneForced ? 1 : 0);
",4,0,0,1,2,0,0,0,0,5,35,4,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1005,"        total += mLocale.hashCode();
",2,0,0,1,2,0,4,0,0,7,28,4,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1006,"        total += (mLocaleForced ? 1 : 0);
",4,0,0,1,2,0,0,0,0,5,33,4,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1007,"        return total;
",2,0,0,0,0,0,0,0,0,2,13,4,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1081,"        CharacterLiteral(char value) {
",4,0,0,1,3,0,0,0,0,4,30,3,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1082,"            mValue = value;
",4,0,0,0,0,0,0,0,0,5,15,5,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1083,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1089,"            return 1;
",0,0,0,0,0,0,0,0,0,0,9,3,0.21053,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,636,"                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);
",6,0,0,1,2,0,4,0,0,11,56,7,0.10000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,637,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.10000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,642,"                rule = selectNumberRule(Calendar.SECOND, tokenLen);
",6,0,0,1,2,0,4,0,0,11,51,7,0.10000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,643,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.10000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,741,"                    if (i + 1 < length && pattern.charAt(i + 1) == '\'') {
",6,5,0,2,5,0,4,0,0,16,54,10,0.10000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,746,"                        inLiteral = !inLiteral;
",4,0,0,0,0,0,0,0,0,6,23,12,0.10000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,639,"                rule = selectNumberRule(Calendar.MINUTE, tokenLen);
",6,0,0,1,2,0,4,0,0,11,51,7,0.09091,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,640,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.09091,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,774,"            return new TwoDigitNumberField(field);
",2,0,0,1,2,0,0,2,0,4,38,6,0.05000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1332,"        TwoDigitNumberField(int field) {
",4,0,0,1,3,0,0,0,0,4,32,3,0.05000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1333,"            mField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.05000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1334,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1340,"            return 2;
",0,0,0,0,0,0,0,0,0,0,9,3,0.05000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1462,"            int value = calendar.get(Calendar.HOUR);
",6,0,0,1,2,0,4,0,0,10,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1463,"            if (value == 0) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1464,"                value = calendar.getLeastMaximum(Calendar.HOUR) + 1;
",6,1,0,1,2,0,4,0,0,12,52,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1466,"            mRule.appendTo(buffer, value);
",0,0,0,1,2,0,8,0,0,8,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1467,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1473,"            mRule.appendTo(buffer, value);
",0,0,0,1,2,0,8,0,0,8,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1474,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1602,"        TimeZoneNumberRule(boolean colon) {
",4,0,0,1,3,0,0,0,0,4,35,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1603,"            mColon = colon;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1604,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1592,"        static final TimeZoneNumberRule INSTANCE_COLON = new TimeZoneNumberRule(true);
",2,0,0,1,2,2,0,4,0,9,78,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1593,"        static final TimeZoneNumberRule INSTANCE_NO_COLON = new TimeZoneNumberRule(false);
",2,0,0,1,2,2,0,4,0,9,82,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1610,"            return 5;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1617,"            int offset = calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET);
",10,1,0,2,4,0,8,0,0,19,84,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1619,"            if (offset < 0) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1620,"                buffer.append('-');
",0,0,0,1,2,0,4,0,0,5,19,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1621,"                offset = -offset;
",4,0,0,0,0,0,0,0,0,6,17,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1623,"                buffer.append('+');
",0,0,0,1,2,0,4,0,0,5,19,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1626,"            int hours = offset / (60 * 60 * 1000);
",4,2,0,1,2,0,0,0,0,6,38,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1627,"            buffer.append((char)(hours / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1628,"            buffer.append((char)(hours % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1630,"            if (mColon) {
",2,0,0,1,3,0,0,0,0,2,13,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1631,"                buffer.append(':');
",0,0,0,1,2,0,4,0,0,5,19,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1634,"            int minutes = offset / (60 * 1000) - 60 * hours;
",6,4,0,1,2,0,0,0,0,10,48,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1635,"            buffer.append((char)(minutes / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,42,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1636,"            buffer.append((char)(minutes % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,42,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1637,"        }            
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1409,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1410,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1403,"        static final TwoDigitMonthField INSTANCE = new TwoDigitMonthField();
",2,0,0,1,2,2,0,4,0,8,68,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1416,"            return 2;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1423,"            appendTo(buffer, calendar.get(Calendar.MONTH) + 1);
",4,1,0,2,4,0,8,0,0,13,51,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1424,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1430,"            buffer.append((char)(value / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1431,"            buffer.append((char)(value % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1432,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1229,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1230,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1222,"        static final UnpaddedMonthField INSTANCE = new UnpaddedMonthField();
",2,0,0,1,2,2,0,4,0,8,68,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1236,"            return 2;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1243,"            appendTo(buffer, calendar.get(Calendar.MONTH) + 1);
",4,1,0,2,4,0,8,0,0,13,51,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1244,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1250,"            if (value < 10) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1251,"                buffer.append((char)(value + '0'));
",2,1,0,3,6,0,4,0,0,8,35,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1253,"                buffer.append((char)(value / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1254,"                buffer.append((char)(value % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1256,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,540,"            throw new IllegalArgumentException(""The pattern must not be null"");
",0,0,0,1,2,0,0,2,0,4,67,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,552,"            locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,153,"        return getInstance(getDefaultPattern(), null, null);
",0,0,0,2,4,0,4,0,0,6,52,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,166,"        return getInstance(pattern, null, null);
",0,0,0,1,2,0,4,0,0,5,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,181,"        return getInstance(pattern, timeZone, null);
",0,0,0,1,2,0,6,0,0,7,44,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,195,"        return getInstance(pattern, null, locale);
",0,0,0,1,2,0,6,0,0,7,42,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,265,"        return getDateInstance(style, timeZone, null);
",0,0,0,1,2,0,6,0,0,7,46,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,282,"            key = new Pair(key, timeZone);
",6,0,0,1,2,0,0,2,0,9,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,301,"            } catch (ClassCastException ex) {
",2,0,0,1,4,0,0,2,0,4,33,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,302,"                throw new IllegalArgumentException(""No date pattern for locale: "" + locale);
",2,1,0,1,2,0,0,2,0,6,76,10,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,320,"        return getTimeInstance(style, null, null);
",0,0,0,1,2,0,4,0,0,5,42,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,335,"        return getTimeInstance(style, null, locale);
",0,0,0,1,2,0,6,0,0,7,44,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,351,"        return getTimeInstance(style, timeZone, null);
",0,0,0,1,2,0,6,0,0,7,46,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,367,"        Object key = new Integer(style);
",4,0,0,1,2,0,0,4,0,8,32,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,368,"        if (timeZone != null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,369,"            key = new Pair(key, timeZone);
",6,0,0,1,2,0,0,2,0,9,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,371,"        if (locale != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,372,"            key = new Pair(key, locale);
",6,0,0,1,2,0,0,2,0,9,28,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,375,"        FastDateFormat format = (FastDateFormat) cTimeInstanceCache.get(key);
",2,0,0,2,4,0,6,4,0,12,69,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,376,"        if (format == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,377,"            if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,378,"                locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,382,"                SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getTimeInstance(style, locale);
",2,0,0,2,4,0,8,4,0,14,90,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,383,"                String pattern = formatter.toPattern();
",2,0,0,1,2,0,4,2,0,8,39,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,384,"                format = getInstance(pattern, timeZone, locale);
",2,0,0,1,2,0,8,0,0,11,48,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,385,"                cTimeInstanceCache.put(key, format);
",0,0,0,1,2,0,8,0,0,8,36,9,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,389,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,387,"            } catch (ClassCastException ex) {
",2,0,0,1,4,0,0,2,0,4,33,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,388,"                throw new IllegalArgumentException(""No date pattern for locale: "" + locale);
",2,1,0,1,2,0,0,2,0,6,76,10,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,391,"        return format;
",2,0,0,0,0,0,0,0,0,2,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,443,"        return getDateTimeInstance(dateStyle, timeStyle, timeZone, null);
",0,0,0,1,2,0,8,0,0,9,65,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,463,"            key = new Pair(key, timeZone);
",6,0,0,1,2,0,0,2,0,9,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,481,"            } catch (ClassCastException ex) {
",2,0,0,1,4,0,0,2,0,4,33,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,482,"                throw new IllegalArgumentException(""No date time pattern for locale: "" + locale);
",2,1,0,1,2,0,0,2,0,6,81,10,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,500,"        Object key = new TimeZoneDisplayKey(tz, daylight, style, locale);
",10,0,0,1,2,0,0,4,0,14,65,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,501,"        String value = (String) cTimeZoneDisplayCache.get(key);
",2,0,0,2,4,0,6,4,0,12,55,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,502,"        if (value == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,504,"            value = tz.getDisplayName(daylight, style, locale);
",2,0,0,1,2,0,10,0,0,13,51,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,505,"            cTimeZoneDisplayCache.put(key, value);
",0,0,0,1,2,0,8,0,0,8,38,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,507,"        return value;
",2,0,0,0,0,0,0,0,0,2,13,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,516,"        if (cDefaultPattern == null) {
",2,1,0,1,3,0,0,0,0,3,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,517,"            cDefaultPattern = new SimpleDateFormat().toPattern();
",2,0,0,2,4,0,2,2,0,7,53,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,519,"        return cDefaultPattern;
",2,0,0,0,0,0,0,0,0,2,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,601,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,609,"                rule = new TextField(Calendar.ERA, ERAs);
",8,0,0,1,2,0,0,2,0,11,41,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,610,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,615,"                    rule = TwoDigitYearField.INSTANCE;
",6,0,0,0,0,0,0,0,0,7,34,9,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,617,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,620,"                    rule = new TextField(Calendar.MONTH, months);
",8,0,0,1,2,0,0,2,0,11,45,9,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,621,"                } else if (tokenLen == 3) {
",2,1,0,1,4,0,0,0,0,3,27,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,622,"                    rule = new TextField(Calendar.MONTH, shortMonths);
",8,0,0,1,2,0,0,2,0,11,50,10,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,623,"                } else if (tokenLen == 2) {
",2,1,0,1,4,0,0,0,0,3,27,9,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,624,"                    rule = TwoDigitMonthField.INSTANCE;
",6,0,0,0,0,0,0,0,0,7,35,11,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,626,"                    rule = UnpaddedMonthField.INSTANCE;
",6,0,0,0,0,0,0,0,0,7,35,11,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,628,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,645,"                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);
",6,0,0,1,2,0,4,0,0,11,56,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,646,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,651,"                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);
",6,0,0,1,2,0,4,0,0,11,56,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,652,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,654,"                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);
",6,0,0,1,2,0,4,0,0,11,65,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,655,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,657,"                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);
",6,0,0,1,2,0,4,0,0,11,57,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,658,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,660,"                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);
",6,0,0,1,2,0,4,0,0,11,58,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,661,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,666,"                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));
",6,0,0,2,4,0,4,2,0,13,81,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,667,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,669,"                rule = selectNumberRule(Calendar.HOUR, tokenLen);
",6,0,0,1,2,0,4,0,0,11,49,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,670,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,673,"                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);
",12,0,0,1,2,0,0,2,0,15,80,9,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,679,"                if (tokenLen == 1) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,680,"                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;
",6,0,0,0,0,0,0,0,0,7,44,9,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,682,"                    rule = TimeZoneNumberRule.INSTANCE_COLON;
",6,0,0,0,0,0,0,0,0,7,41,9,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,684,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,694,"                throw new IllegalArgumentException(""Illegal pattern component: "" + token);
",2,1,0,1,2,0,0,2,0,6,74,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,743,"                        i++;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,744,"                        buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,13,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,792,"        if (obj instanceof Date) {
",2,0,0,1,3,0,0,2,0,4,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,793,"            return format((Date) obj, toAppendTo);
",2,0,0,2,4,0,4,2,0,8,38,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,794,"        } else if (obj instanceof Calendar) {
",2,0,0,1,4,0,0,2,0,4,37,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,795,"            return format((Calendar) obj, toAppendTo);
",2,0,0,2,4,0,4,2,0,8,42,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,796,"        } else if (obj instanceof Long) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,797,"            return format(((Long) obj).longValue(), toAppendTo);
",2,0,0,4,8,0,6,2,0,10,52,9,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,799,"            throw new IllegalArgumentException(""Unknown class: "" +
",0,1,0,0,1,0,0,2,0,4,54,9,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,812,"        return format(new Date(millis));
",2,0,0,2,4,0,2,2,0,6,32,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,822,"        Calendar c = new GregorianCalendar(mTimeZone);
",4,0,0,1,2,0,0,4,0,8,46,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,823,"        c.setTime(date);
",0,0,0,1,2,0,6,0,0,6,16,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,824,"        return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();
",2,0,0,3,6,0,6,2,0,10,70,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,834,"        return format(calendar, new StringBuffer(mMaxLengthEstimate)).toString();
",2,0,0,3,6,0,6,2,0,10,73,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,847,"        return format(new Date(millis), buf);
",2,0,0,2,4,0,4,2,0,8,37,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,859,"        Calendar c = new GregorianCalendar(mTimeZone);
",4,0,0,1,2,0,0,4,0,8,46,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,860,"        c.setTime(date);
",0,0,0,1,2,0,6,0,0,6,16,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,861,"        return applyRules(c, buf);
",0,0,0,1,2,0,6,0,0,6,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,873,"        if (mTimeZoneForced) {
",2,0,0,1,3,0,0,0,0,2,22,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,874,"            calendar = (Calendar) calendar.clone();
",2,0,0,2,4,0,4,2,0,9,39,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,875,"            calendar.setTimeZone(mTimeZone);
",0,0,0,1,2,0,6,0,0,6,32,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,877,"        return applyRules(calendar, buf);
",0,0,0,1,2,0,6,0,0,6,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,889,"        Rule[] rules = mRules;
",4,0,0,1,2,0,0,2,0,6,22,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,890,"        int len = mRules.length;
",6,0,0,0,0,0,0,0,0,6,24,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,891,"        for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,892,"            rules[i].appendTo(buf, calendar);
",0,0,1,2,4,0,6,0,0,10,33,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,894,"        return buf;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,907,"        pos.setIndex(0);
",0,0,0,1,2,0,4,0,0,4,16,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,908,"        pos.setErrorIndex(0);
",0,0,0,1,2,0,4,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,909,"        return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,920,"        return mPattern;
",2,0,0,0,0,0,0,0,0,2,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,934,"        return mTimeZone;
",2,0,0,0,0,0,0,0,0,2,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,945,"        return mTimeZoneForced;
",2,0,0,0,0,0,0,0,0,2,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,967,"        return mMaxLengthEstimate;
",2,0,0,0,0,0,0,0,0,2,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,979,"        if (obj instanceof FastDateFormat == false) {
",2,1,0,1,3,0,0,2,0,6,45,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,980,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,982,"        FastDateFormat other = (FastDateFormat) obj;
",4,0,0,1,2,0,0,4,0,8,44,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,983,"        if (
",0,0,0,0,1,0,0,0,0,0,4,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,990,"            return true;
",0,0,0,0,0,0,0,0,0,1,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,992,"        return false;
",0,0,0,0,0,0,0,0,0,1,13,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1016,"        return ""FastDateFormat["" + mPattern + ""]"";
",2,1,0,1,2,0,0,0,0,5,42,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1030,"        in.defaultReadObject();
",0,0,0,1,2,0,4,0,0,4,23,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1031,"        init();
",0,0,0,1,2,0,2,0,0,2,7,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1032,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1718,"                return true;
",0,0,0,0,0,0,0,0,0,1,12,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1722,"                return false;
",0,0,0,0,0,0,0,0,0,1,13,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1747,"            return ""["" + mObj1 + ':' + mObj2 + ']';
",4,1,0,1,2,0,0,0,0,8,39,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1168,"            buffer.append(mValues[calendar.get(mField)]);
",0,0,1,3,6,0,10,0,0,12,45,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1169,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1545,"                mStandard = getTimeZoneDisplay(timeZone, false, style, locale);
",2,0,0,1,2,0,8,0,0,12,63,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1546,"                mDaylight = getTimeZoneDisplay(timeZone, true, style, locale);
",2,0,0,1,2,0,8,0,0,12,62,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1558,"                return Math.max(mStandard.length(), mDaylight.length());
",0,0,0,3,6,0,12,0,0,12,56,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1562,"                return 40;
",0,0,0,0,0,0,0,0,0,0,10,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1570,"            if (mTimeZoneForced) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1571,"                if (mTimeZone.useDaylightTime() && calendar.get(Calendar.DST_OFFSET) != 0) {
",4,2,0,3,7,0,8,0,0,14,76,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1572,"                    buffer.append(mDaylight);
",0,0,0,1,2,0,6,0,0,6,25,10,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1574,"                    buffer.append(mStandard);
",0,0,0,1,2,0,6,0,0,6,25,10,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1577,"                TimeZone timeZone = calendar.getTimeZone();
",2,0,0,1,2,0,4,2,0,8,43,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1578,"                if (timeZone.useDaylightTime() && calendar.get(Calendar.DST_OFFSET) != 0) {
",4,2,0,3,7,0,8,0,0,14,75,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1579,"                    buffer.append(getTimeZoneDisplay(timeZone, true, mStyle, mLocale));
",0,0,0,2,4,0,12,0,0,13,67,10,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1581,"                    buffer.append(getTimeZoneDisplay(timeZone, false, mStyle, mLocale));
",0,0,0,2,4,0,12,0,0,13,68,10,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1584,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1096,"            buffer.append(mValue);
",0,0,0,1,2,0,6,0,0,6,22,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1097,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1347,"            appendTo(buffer, calendar.get(mField));
",0,0,0,2,4,0,10,0,0,10,39,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1348,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1354,"            if (value < 100) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1355,"                buffer.append((char)(value / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1356,"                buffer.append((char)(value % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1358,"                buffer.append(Integer.toString(value));
",0,0,0,2,4,0,10,0,0,10,39,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1360,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1658,"                           boolean daylight, int style, Locale locale) {
",6,0,0,0,2,0,0,2,0,8,45,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1659,"            mTimeZone = timeZone;
",4,0,0,0,0,0,0,0,0,5,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1660,"            if (daylight) {
",2,0,0,1,3,0,0,0,0,2,15,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1661,"                style |= 0x80000000;
",2,0,0,0,0,0,0,0,0,3,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1663,"            mStyle = style;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1664,"            mLocale = locale;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1665,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1671,"            return mStyle * 31 + mLocale.hashCode();
",2,2,0,1,2,0,4,0,0,8,40,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1678,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1679,"                return true;
",0,0,0,0,0,0,0,0,0,1,12,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1681,"            if (obj instanceof TimeZoneDisplayKey) {
",2,0,0,1,3,0,0,2,0,4,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1682,"                TimeZoneDisplayKey other = (TimeZoneDisplayKey)obj;
",4,0,0,1,2,0,0,4,0,8,51,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1683,"                return
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1688,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1373,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1374,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1367,"        static final TwoDigitYearField INSTANCE = new TwoDigitYearField();
",2,0,0,1,2,2,0,4,0,8,66,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1380,"            return 2;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1387,"            appendTo(buffer, calendar.get(Calendar.YEAR) % 100);
",4,1,0,2,4,0,8,0,0,13,52,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1388,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1394,"            buffer.append((char)(value / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1395,"            buffer.append((char)(value % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1396,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1275,"                throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,9,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1292,"            appendTo(buffer, calendar.get(mField));
",0,0,0,2,4,0,10,0,0,10,39,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1293,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1299,"            if (value < 100) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1300,"                for (int i = mSize; --i >= 2; ) {
",6,1,0,1,3,0,0,0,0,8,33,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1301,"                    buffer.append('0');
",0,0,0,1,2,0,4,0,0,5,19,10,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1303,"                buffer.append((char)(value / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1304,"                buffer.append((char)(value % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1307,"                if (value < 1000) {
",2,1,0,1,3,0,0,0,0,3,19,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1308,"                    digits = 3;
",2,0,0,0,0,0,0,0,0,3,11,9,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1310,"                    Validate.isTrue(value > -1, ""Negative values should not be possible"", value);
",2,1,0,1,2,0,6,0,0,11,77,10,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1311,"                    digits = Integer.toString(value).length();
",2,0,0,2,4,0,8,0,0,11,42,9,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1313,"                for (int i = mSize; --i >= digits; ) {
",8,1,0,1,3,0,0,0,0,10,38,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1314,"                    buffer.append('0');
",0,0,0,1,2,0,4,0,0,5,19,10,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1316,"                buffer.append(Integer.toString(value));
",0,0,0,2,4,0,10,0,0,10,39,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1318,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1127,"            buffer.append(mValue);
",0,0,0,1,2,0,6,0,0,6,22,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1128,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1200,"            appendTo(buffer, calendar.get(mField));
",0,0,0,2,4,0,10,0,0,10,39,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1201,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1207,"            if (value < 10) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1208,"                buffer.append((char)(value + '0'));
",2,1,0,3,6,0,4,0,0,8,35,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1209,"            } else if (value < 100) {
",2,1,0,1,4,0,0,0,0,3,25,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1210,"                buffer.append((char)(value / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,9,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1211,"                buffer.append((char)(value % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,9,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1213,"                buffer.append(Integer.toString(value));
",0,0,0,2,4,0,10,0,0,10,39,9,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1215,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1489,"        TwentyFourHourField(NumberRule rule) {
",4,0,0,1,3,0,0,2,0,6,38,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1490,"            mRule = rule;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1491,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1497,"            return mRule.estimateLength();
",0,0,0,1,2,0,4,0,0,4,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1504,"            int value = calendar.get(Calendar.HOUR_OF_DAY);
",6,0,0,1,2,0,4,0,0,10,47,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1505,"            if (value == 0) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1506,"                value = calendar.getMaximum(Calendar.HOUR_OF_DAY) + 1;
",6,1,0,1,2,0,4,0,0,12,54,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1508,"            mRule.appendTo(buffer, value);
",0,0,0,1,2,0,8,0,0,8,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1509,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1515,"            mRule.appendTo(buffer, value);
",0,0,0,1,2,0,8,0,0,8,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,50,1516,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
