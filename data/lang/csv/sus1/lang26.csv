dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1171,"            buffer.append(mValues[calendar.get(mField)]);
",0,0,1,3,6,0,10,0,0,12,45,6,1.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1172,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1130,"            buffer.append(mValue);
",0,0,0,1,2,0,6,0,0,6,22,6,1.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1131,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,820,"        Calendar c = new GregorianCalendar(mTimeZone);
",4,0,0,1,2,0,0,4,0,8,46,4,0.03333,1
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,821,"        c.setTime(date);
",0,0,0,1,2,0,6,0,0,6,16,5,0.03333,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,822,"        return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();
",2,0,0,3,6,1,6,2,0,10,70,5,0.03333,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1115,"        StringLiteral(String value) {
",4,0,0,1,3,0,0,2,0,6,29,3,0.02857,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1116,"            mValue = value;
",4,0,0,0,0,0,0,0,0,5,15,5,0.02857,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1117,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02857,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1123,"            return mValue.length();
",0,0,0,1,2,1,4,0,0,4,23,6,0.02857,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1348,"            appendTo(buffer, calendar.get(mField));
",0,0,0,2,4,0,10,0,0,10,39,6,0.02857,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1349,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02857,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1355,"            if (value < 100) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.02857,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1356,"                buffer.append((char)(value / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,8,0.02857,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1357,"                buffer.append((char)(value % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,8,0.02857,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1361,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02857,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,196,"        return getInstance(pattern, null, locale);
",0,0,0,1,2,1,6,0,0,7,42,4,0.02857,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,645,"                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);
",12,1,0,1,2,0,0,2,0,16,84,7,0.02857,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,646,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.02857,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,687,"                    rule = new StringLiteral(sub);
",4,0,0,1,2,0,0,2,0,7,30,9,0.02857,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,689,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.02857,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,738,"                    if (i + 1 < length && pattern.charAt(i + 1) == '\'') {
",6,5,0,2,5,0,4,0,0,16,54,10,0.02857,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,743,"                        inLiteral = !inLiteral;
",4,0,0,0,0,0,0,0,0,6,23,12,0.02857,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1148,"        TextField(int field, String[] values) {
",6,0,0,2,5,0,0,2,0,8,39,3,0.02778,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1149,"            mField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.02778,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1150,"            mValues = values;
",4,0,0,0,0,0,0,0,0,5,17,5,0.02778,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1151,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02778,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1157,"            int max = 0;
",2,0,0,0,0,0,0,0,0,2,12,6,0.02778,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1158,"            for (int i=mValues.length; --i >= 0; ) {
",8,1,0,1,3,0,0,0,0,10,40,5,0.02778,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1159,"                int len = mValues[i].length();
",2,0,1,2,4,0,2,0,0,8,30,8,0.02778,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1160,"                if (len > max) {
",4,1,0,1,3,0,0,0,0,5,16,7,0.02778,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1161,"                    max = len;
",4,0,0,0,0,0,0,0,0,5,10,9,0.02778,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1163,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02778,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1164,"            return max;
",2,0,0,0,0,1,0,0,0,2,11,5,0.02778,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,888,"        Rule[] rules = mRules;
",4,0,0,1,2,0,0,2,0,6,22,4,0.02703,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,889,"        int len = mRules.length;
",6,0,0,0,0,0,0,0,0,6,24,5,0.02703,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,890,"        for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.02703,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,891,"            rules[i].appendTo(buf, calendar);
",0,0,1,2,4,0,6,0,0,10,33,7,0.02703,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,893,"        return buf;
",2,0,0,0,0,1,0,0,0,2,11,4,0.02703,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1333,"        TwoDigitNumberField(int field) {
",4,0,0,1,3,0,0,0,0,4,32,3,0.02222,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1334,"            mField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.02222,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1335,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02222,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1341,"            return 2;
",0,0,0,0,0,1,0,0,0,0,9,3,0.02222,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,543,"            timeZone = TimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.02222,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,771,"            return new TwoDigitNumberField(field);
",2,0,0,1,2,1,0,2,0,4,38,6,0.02222,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,535,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,536,"        if (pattern == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,539,"        mPattern = pattern;
",4,0,0,0,0,0,0,0,0,5,19,4,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,541,"        mTimeZoneForced = (timeZone != null);
",4,1,0,1,2,0,0,0,0,6,37,4,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,542,"        if (timeZone == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,545,"        mTimeZone = timeZone;
",4,0,0,0,0,0,0,0,0,5,21,4,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,547,"        mLocaleForced = (locale != null);
",4,1,0,1,2,0,0,0,0,6,33,4,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,548,"        if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,551,"        mLocale = locale;
",4,0,0,0,0,0,0,0,0,5,17,4,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,552,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,111,"    private static final Map<FastDateFormat, FastDateFormat> cInstanceCache = new HashMap<FastDateFormat, FastDateFormat>(7);
",2,0,0,1,2,3,0,12,0,17,121,2,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,112,"    private static final Map<Object, FastDateFormat> cDateInstanceCache = new HashMap<Object, FastDateFormat>(7);
",2,0,0,1,2,3,0,12,0,17,109,2,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,113,"    private static final Map<Object, FastDateFormat> cTimeInstanceCache = new HashMap<Object, FastDateFormat>(7);
",2,0,0,1,2,3,0,12,0,17,109,2,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,114,"    private static final Map<Object, FastDateFormat> cDateTimeInstanceCache = new HashMap<Object, FastDateFormat>(7);
",2,0,0,1,2,3,0,12,0,17,113,2,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,115,"    private static final Map<Object, String> cTimeZoneDisplayCache = new HashMap<Object, String>(7);
",2,0,0,1,2,3,0,12,0,17,96,2,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,213,"        FastDateFormat emptyFormat = new FastDateFormat(pattern, timeZone, locale);
",8,0,0,1,2,0,0,4,0,12,75,4,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,214,"        FastDateFormat format = cInstanceCache.get(emptyFormat);
",2,0,0,1,2,0,6,2,0,10,56,4,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,215,"        if (format == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,216,"            format = emptyFormat;
",4,0,0,0,0,0,0,0,0,5,21,6,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,217,"            format.init();  // convert shell format into usable one
",0,0,0,1,2,0,4,0,0,4,55,7,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,218,"            cInstanceCache.put(format, format);  // this is OK!
",0,0,0,1,2,0,8,0,0,8,51,7,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,220,"        return format;
",2,0,0,0,0,1,0,0,0,2,14,4,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,558,"        List<Rule> rulesList = parsePattern();
",2,0,0,1,2,0,2,4,0,8,38,4,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,559,"        mRules = rulesList.toArray(new Rule[rulesList.size()]);
",2,0,0,3,6,0,8,2,0,13,55,4,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,561,"        int len = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,562,"        for (int i=mRules.length; --i >= 0; ) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,563,"            len += mRules[i].estimateLength();
",2,0,1,2,4,0,2,0,0,9,34,6,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,566,"        mMaxLengthEstimate = len;
",4,0,0,0,0,0,0,0,0,5,25,4,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,567,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,578,"        DateFormatSymbols symbols = new DateFormatSymbols(mLocale);
",4,0,0,1,2,0,0,4,0,8,59,4,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,579,"        List<Rule> rules = new ArrayList<Rule>();
",2,0,0,1,2,0,0,8,0,10,41,4,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,581,"        String[] ERAs = symbols.getEras();
",2,0,0,2,4,0,4,2,0,8,34,4,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,582,"        String[] months = symbols.getMonths();
",2,0,0,2,4,0,4,2,0,8,38,4,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,583,"        String[] shortMonths = symbols.getShortMonths();
",2,0,0,2,4,0,4,2,0,8,48,4,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,584,"        String[] weekdays = symbols.getWeekdays();
",2,0,0,2,4,0,4,2,0,8,42,4,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,585,"        String[] shortWeekdays = symbols.getShortWeekdays();
",2,0,0,2,4,0,4,2,0,8,52,4,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,586,"        String[] AmPmStrings = symbols.getAmPmStrings();
",2,0,0,2,4,0,4,2,0,8,48,4,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,588,"        int length = mPattern.length();
",2,0,0,1,2,0,4,0,0,6,31,5,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,589,"        int[] indexRef = new int[1];
",2,0,0,2,4,0,0,0,0,2,28,5,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,591,"        for (int i = 0; i < length; i++) {
",8,1,0,1,3,0,0,0,0,10,34,4,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,592,"            indexRef[0] = i;
",2,0,1,1,2,0,0,0,0,5,16,6,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,593,"            String token = parseToken(mPattern, indexRef);
",2,0,0,1,2,0,6,2,0,10,46,6,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,594,"            i = indexRef[0];
",2,0,1,1,2,0,0,0,0,5,16,6,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,596,"            int tokenLen = token.length();
",2,0,0,1,2,0,4,0,0,6,30,7,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,597,"            if (tokenLen == 0) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,602,"            char c = token.charAt(0);
",2,0,0,1,2,0,4,0,0,6,25,7,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,604,"            switch (c) {
",2,0,0,1,3,0,0,0,0,2,12,6,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,683,"                String sub = token.substring(1);
",2,0,0,1,2,0,4,2,0,8,32,7,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,684,"                if (sub.length() == 1) {
",0,1,0,2,5,0,4,0,0,5,24,7,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,694,"            rules.add(rule);
",0,0,0,1,2,0,6,0,0,6,16,7,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,697,"        return rules;
",2,0,0,0,0,1,0,0,0,2,13,4,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,708,"        StringBuilder buf = new StringBuilder();
",2,0,0,1,2,0,0,4,0,6,40,4,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,710,"        int i = indexRef[0];
",2,0,1,1,2,0,0,0,0,4,20,5,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,711,"        int length = pattern.length();
",2,0,0,1,2,0,4,0,0,6,30,5,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,713,"        char c = pattern.charAt(i);
",2,0,0,1,2,0,6,0,0,8,27,5,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,714,"        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {
",8,7,0,1,3,0,0,0,0,19,51,4,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,717,"            buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,7,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,719,"            while (i + 1 < length) {
",4,2,0,1,3,0,0,0,0,6,24,6,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,720,"                char peek = pattern.charAt(i + 1);
",4,1,0,1,2,0,4,0,0,9,34,9,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,721,"                if (peek == c) {
",4,1,0,1,3,0,0,0,0,5,16,8,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,722,"                    buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,11,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,723,"                    i++;
",2,0,0,0,0,0,0,0,0,3,4,10,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,727,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,730,"            buf.append('\'');
",0,0,0,1,2,0,4,0,0,5,17,7,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,732,"            boolean inLiteral = false;
",2,0,0,0,0,0,0,0,0,3,26,7,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,734,"            for (; i < length; i++) {
",6,1,0,1,3,0,0,0,0,8,25,6,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,735,"                c = pattern.charAt(i);
",2,0,0,1,2,0,6,0,0,9,22,8,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,737,"                if (c == '\'') {
",2,1,0,1,3,0,0,0,0,4,16,8,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,745,"                } else if (!inLiteral &&
",2,1,0,0,2,0,0,0,0,4,24,9,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,747,"                    i--;
",2,0,0,0,0,0,0,0,0,3,4,11,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,748,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,750,"                    buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,12,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,755,"        indexRef[0] = i;
",2,0,1,1,2,0,0,0,0,5,16,4,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,756,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,767,"        switch (padding) {
",2,0,0,1,3,0,0,0,0,2,18,4,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1003,"        int total = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1004,"        total += mPattern.hashCode();
",2,0,0,1,2,0,4,0,0,7,29,4,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1005,"        total += mTimeZone.hashCode();
",2,0,0,1,2,0,4,0,0,7,30,4,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1006,"        total += (mTimeZoneForced ? 1 : 0);
",4,0,0,1,2,0,0,0,0,5,35,4,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1007,"        total += mLocale.hashCode();
",2,0,0,1,2,0,4,0,0,7,28,4,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1008,"        total += (mLocaleForced ? 1 : 0);
",4,0,0,1,2,0,0,0,0,5,33,4,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1009,"        return total;
",2,0,0,0,0,1,0,0,0,2,13,4,0.02174,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1230,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1231,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1223,"        static final UnpaddedMonthField INSTANCE = new UnpaddedMonthField();
",2,0,0,1,2,2,0,4,0,8,68,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1237,"            return 2;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1244,"            appendTo(buffer, calendar.get(Calendar.MONTH) + 1);
",4,1,0,2,4,0,8,0,0,13,51,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1245,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1251,"            if (value < 10) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1252,"                buffer.append((char)(value + '0'));
",2,1,0,3,6,0,4,0,0,8,35,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1254,"                buffer.append((char)(value / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1255,"                buffer.append((char)(value % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1257,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1659,"                           boolean daylight, int style, Locale locale) {
",6,0,0,0,2,0,0,2,0,8,45,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1660,"            mTimeZone = timeZone;
",4,0,0,0,0,0,0,0,0,5,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1661,"            if (daylight) {
",2,0,0,1,3,0,0,0,0,2,15,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1662,"                style |= 0x80000000;
",2,0,0,0,0,0,0,0,0,3,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1664,"            mStyle = style;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1665,"            mLocale = locale;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1666,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1673,"            return mStyle * 31 + mLocale.hashCode();
",2,2,0,1,2,1,4,0,0,8,40,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1681,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1682,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1684,"            if (obj instanceof TimeZoneDisplayKey) {
",2,0,0,1,3,0,0,2,0,4,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1685,"                TimeZoneDisplayKey other = (TimeZoneDisplayKey)obj;
",4,0,0,1,2,0,0,4,0,8,51,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1686,"                return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1691,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1374,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1375,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1368,"        static final TwoDigitYearField INSTANCE = new TwoDigitYearField();
",2,0,0,1,2,2,0,4,0,8,66,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1381,"            return 2;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1388,"            appendTo(buffer, calendar.get(Calendar.YEAR) % 100);
",4,1,0,2,4,0,8,0,0,13,52,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1389,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1395,"            buffer.append((char)(value / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1396,"            buffer.append((char)(value % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1397,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1539,"        TimeZoneNameRule(TimeZone timeZone, boolean timeZoneForced, Locale locale, int style) {
",10,0,0,1,3,0,0,4,0,14,87,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1540,"            mTimeZone = timeZone;
",4,0,0,0,0,0,0,0,0,5,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1541,"            mTimeZoneForced = timeZoneForced;
",4,0,0,0,0,0,0,0,0,5,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1542,"            mLocale = locale;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1543,"            mStyle = style;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1545,"            if (timeZoneForced) {
",2,0,0,1,3,0,0,0,0,2,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1546,"                mStandard = getTimeZoneDisplay(timeZone, false, style, locale);
",2,0,0,1,2,0,8,0,0,12,63,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1547,"                mDaylight = getTimeZoneDisplay(timeZone, true, style, locale);
",2,0,0,1,2,0,8,0,0,12,62,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1549,"                mStandard = null;
",2,0,0,0,0,0,0,0,0,3,17,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1550,"                mDaylight = null;
",2,0,0,0,0,0,0,0,0,3,17,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1552,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1558,"            if (mTimeZoneForced) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1559,"                return Math.max(mStandard.length(), mDaylight.length());
",0,0,0,3,6,1,12,0,0,12,56,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1560,"            } else if (mStyle == TimeZone.SHORT) {
",6,1,0,1,4,0,0,0,0,7,38,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1561,"                return 4;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1563,"                return 40;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1571,"            if (mTimeZoneForced) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1572,"                if (mTimeZone.useDaylightTime() && calendar.get(Calendar.DST_OFFSET) != 0) {
",4,2,0,3,7,0,8,0,0,14,76,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1573,"                    buffer.append(mDaylight);
",0,0,0,1,2,0,6,0,0,6,25,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1575,"                    buffer.append(mStandard);
",0,0,0,1,2,0,6,0,0,6,25,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1578,"                TimeZone timeZone = calendar.getTimeZone();
",2,0,0,1,2,0,4,2,0,8,43,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1579,"                if (timeZone.useDaylightTime() && calendar.get(Calendar.DST_OFFSET) != 0) {
",4,2,0,3,7,0,8,0,0,14,75,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1580,"                    buffer.append(getTimeZoneDisplay(timeZone, true, mStyle, mLocale));
",0,0,0,2,4,0,12,0,0,13,67,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1582,"                    buffer.append(getTimeZoneDisplay(timeZone, false, mStyle, mLocale));
",0,0,0,2,4,0,12,0,0,13,68,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1585,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1186,"        UnpaddedNumberField(int field) {
",4,0,0,1,3,0,0,0,0,4,32,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1187,"            mField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1188,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1194,"            return 4;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1201,"            appendTo(buffer, calendar.get(mField));
",0,0,0,2,4,0,10,0,0,10,39,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1202,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1208,"            if (value < 10) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1209,"                buffer.append((char)(value + '0'));
",2,1,0,3,6,0,4,0,0,8,35,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1210,"            } else if (value < 100) {
",2,1,0,1,4,0,0,0,0,3,25,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1211,"                buffer.append((char)(value / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1212,"                buffer.append((char)(value % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1214,"                buffer.append(Integer.toString(value));
",0,0,0,2,4,0,10,0,0,10,39,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1216,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1490,"        TwentyFourHourField(NumberRule rule) {
",4,0,0,1,3,0,0,2,0,6,38,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1491,"            mRule = rule;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1492,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1498,"            return mRule.estimateLength();
",0,0,0,1,2,1,4,0,0,4,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1505,"            int value = calendar.get(Calendar.HOUR_OF_DAY);
",6,0,0,1,2,0,4,0,0,10,47,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1506,"            if (value == 0) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1507,"                value = calendar.getMaximum(Calendar.HOUR_OF_DAY) + 1;
",6,1,0,1,2,0,4,0,0,12,54,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1509,"            mRule.appendTo(buffer, value);
",0,0,0,1,2,0,8,0,0,8,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1510,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1516,"            mRule.appendTo(buffer, value);
",0,0,0,1,2,0,8,0,0,8,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1517,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1084,"        CharacterLiteral(char value) {
",4,0,0,1,3,0,0,0,0,4,30,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1085,"            mValue = value;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1086,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1092,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1099,"            buffer.append(mValue);
",0,0,0,1,2,0,6,0,0,6,22,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1100,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1410,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1411,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1404,"        static final TwoDigitMonthField INSTANCE = new TwoDigitMonthField();
",2,0,0,1,2,2,0,4,0,8,68,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1417,"            return 2;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1424,"            appendTo(buffer, calendar.get(Calendar.MONTH) + 1);
",4,1,0,2,4,0,8,0,0,13,51,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1425,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1431,"            buffer.append((char)(value / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1432,"            buffer.append((char)(value % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1433,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1711,"        public Pair(Object obj1, Object obj2) {
",6,0,0,1,3,1,0,4,0,11,39,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1712,"            mObj1 = obj1;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1713,"            mObj2 = obj2;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1714,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1721,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1722,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1725,"            if (!(obj instanceof Pair)) {
",2,0,0,2,5,0,0,2,0,5,29,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1726,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1729,"            Pair key = (Pair)obj;
",4,0,0,1,2,0,0,4,0,8,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1731,"            return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1743,"            return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1753,"            return ""["" + mObj1 + ':' + mObj2 + ']';
",4,1,0,1,2,1,0,0,0,8,39,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1359,"                buffer.append(Integer.toString(value));
",0,0,0,2,4,0,10,0,0,10,39,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1273,"        PaddedNumberField(int field, int size) {
",6,0,0,1,3,0,0,0,0,6,40,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1274,"            if (size < 3) {
",2,1,0,1,3,0,0,0,0,3,15,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1276,"                throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1278,"            mField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1279,"            mSize = size;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1280,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1286,"            return 4;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1293,"            appendTo(buffer, calendar.get(mField));
",0,0,0,2,4,0,10,0,0,10,39,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1294,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1300,"            if (value < 100) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1301,"                for (int i = mSize; --i >= 2; ) {
",6,1,0,1,3,0,0,0,0,8,33,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1302,"                    buffer.append('0');
",0,0,0,1,2,0,4,0,0,5,19,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1304,"                buffer.append((char)(value / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1305,"                buffer.append((char)(value % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1308,"                if (value < 1000) {
",2,1,0,1,3,0,0,0,0,3,19,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1309,"                    digits = 3;
",2,0,0,0,0,0,0,0,0,3,11,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1311,"                    Validate.isTrue(value > -1, ""Negative values should not be possible"", value);
",2,1,0,1,2,0,6,0,0,11,77,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1312,"                    digits = Integer.toString(value).length();
",2,0,0,2,4,0,8,0,0,11,42,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1314,"                for (int i = mSize; --i >= digits; ) {
",8,1,0,1,3,0,0,0,0,10,38,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1315,"                    buffer.append('0');
",0,0,0,1,2,0,4,0,0,5,19,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1317,"                buffer.append(Integer.toString(value));
",0,0,0,2,4,0,10,0,0,10,39,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1319,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,537,"            throw new IllegalArgumentException(""The pattern must not be null"");
",0,0,0,1,2,0,0,2,0,4,67,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,549,"            locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,154,"        return getInstance(getDefaultPattern(), null, null);
",0,0,0,2,4,1,4,0,0,6,52,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,167,"        return getInstance(pattern, null, null);
",0,0,0,1,2,1,4,0,0,5,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,182,"        return getInstance(pattern, timeZone, null);
",0,0,0,1,2,1,6,0,0,7,44,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,235,"        return getDateInstance(style, null, null);
",0,0,0,1,2,1,4,0,0,5,42,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,250,"        return getDateInstance(style, null, locale);
",0,0,0,1,2,1,6,0,0,7,44,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,266,"        return getDateInstance(style, timeZone, null);
",0,0,0,1,2,1,6,0,0,7,46,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,281,"        Object key = Integer.valueOf(style);
",2,0,0,1,2,0,6,2,0,10,36,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,282,"        if (timeZone != null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,283,"            key = new Pair(key, timeZone);
",6,0,0,1,2,0,0,2,0,9,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,286,"        if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,287,"            locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,290,"        key = new Pair(key, locale);
",6,0,0,1,2,0,0,2,0,9,28,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,292,"        FastDateFormat format = cDateInstanceCache.get(key);
",2,0,0,1,2,0,6,2,0,10,52,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,293,"        if (format == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,295,"                SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateInstance(style, locale);
",2,0,0,2,4,0,8,4,0,14,90,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,296,"                String pattern = formatter.toPattern();
",2,0,0,1,2,0,4,2,0,8,39,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,297,"                format = getInstance(pattern, timeZone, locale);
",2,0,0,1,2,0,8,0,0,11,48,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,298,"                cDateInstanceCache.put(key, format);
",0,0,0,1,2,0,8,0,0,8,36,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,302,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,300,"            } catch (ClassCastException ex) {
",2,0,0,1,4,0,0,2,0,4,33,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,301,"                throw new IllegalArgumentException(""No date pattern for locale: "" + locale);
",2,1,0,1,2,0,0,2,0,6,76,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,304,"        return format;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,319,"        return getTimeInstance(style, null, null);
",0,0,0,1,2,1,4,0,0,5,42,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,334,"        return getTimeInstance(style, null, locale);
",0,0,0,1,2,1,6,0,0,7,44,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,350,"        return getTimeInstance(style, timeZone, null);
",0,0,0,1,2,1,6,0,0,7,46,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,366,"        Object key = Integer.valueOf(style);
",2,0,0,1,2,0,6,2,0,10,36,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,367,"        if (timeZone != null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,368,"            key = new Pair(key, timeZone);
",6,0,0,1,2,0,0,2,0,9,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,370,"        if (locale != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,371,"            key = new Pair(key, locale);
",6,0,0,1,2,0,0,2,0,9,28,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,374,"        FastDateFormat format = cTimeInstanceCache.get(key);
",2,0,0,1,2,0,6,2,0,10,52,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,375,"        if (format == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,376,"            if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,377,"                locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,381,"                SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getTimeInstance(style, locale);
",2,0,0,2,4,0,8,4,0,14,90,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,382,"                String pattern = formatter.toPattern();
",2,0,0,1,2,0,4,2,0,8,39,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,383,"                format = getInstance(pattern, timeZone, locale);
",2,0,0,1,2,0,8,0,0,11,48,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,384,"                cTimeInstanceCache.put(key, format);
",0,0,0,1,2,0,8,0,0,8,36,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,388,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,386,"            } catch (ClassCastException ex) {
",2,0,0,1,4,0,0,2,0,4,33,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,387,"                throw new IllegalArgumentException(""No date pattern for locale: "" + locale);
",2,1,0,1,2,0,0,2,0,6,76,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,390,"        return format;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,407,"        return getDateTimeInstance(dateStyle, timeStyle, null, null);
",0,0,0,1,2,1,6,0,0,7,61,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,424,"        return getDateTimeInstance(dateStyle, timeStyle, null, locale);
",0,0,0,1,2,1,8,0,0,9,63,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,442,"        return getDateTimeInstance(dateStyle, timeStyle, timeZone, null);
",0,0,0,1,2,1,8,0,0,9,65,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,460,"        Object key = new Pair(Integer.valueOf(dateStyle), Integer.valueOf(timeStyle));
",2,0,0,3,6,0,12,4,0,18,78,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,461,"        if (timeZone != null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,462,"            key = new Pair(key, timeZone);
",6,0,0,1,2,0,0,2,0,9,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,464,"        if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,465,"            locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,467,"        key = new Pair(key, locale);
",6,0,0,1,2,0,0,2,0,9,28,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,469,"        FastDateFormat format = cDateTimeInstanceCache.get(key);
",2,0,0,1,2,0,6,2,0,10,56,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,470,"        if (format == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,472,"                SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,
",2,0,0,1,3,0,8,4,0,14,100,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,474,"                String pattern = formatter.toPattern();
",2,0,0,1,2,0,4,2,0,8,39,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,475,"                format = getInstance(pattern, timeZone, locale);
",2,0,0,1,2,0,8,0,0,11,48,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,476,"                cDateTimeInstanceCache.put(key, format);
",0,0,0,1,2,0,8,0,0,8,40,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,480,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,478,"            } catch (ClassCastException ex) {
",2,0,0,1,4,0,0,2,0,4,33,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,479,"                throw new IllegalArgumentException(""No date time pattern for locale: "" + locale);
",2,1,0,1,2,0,0,2,0,6,81,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,482,"        return format;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,497,"        Object key = new TimeZoneDisplayKey(tz, daylight, style, locale);
",10,0,0,1,2,0,0,4,0,14,65,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,498,"        String value = cTimeZoneDisplayCache.get(key);
",2,0,0,1,2,0,6,2,0,10,46,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,499,"        if (value == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,501,"            value = tz.getDisplayName(daylight, style, locale);
",2,0,0,1,2,0,10,0,0,13,51,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,502,"            cTimeZoneDisplayCache.put(key, value);
",0,0,0,1,2,0,8,0,0,8,38,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,504,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,513,"        if (cDefaultPattern == null) {
",2,1,0,1,3,0,0,0,0,3,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,514,"            cDefaultPattern = new SimpleDateFormat().toPattern();
",2,0,0,2,4,0,2,2,0,7,53,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,516,"        return cDefaultPattern;
",2,0,0,0,0,1,0,0,0,2,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,598,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,606,"                rule = new TextField(Calendar.ERA, ERAs);
",8,0,0,1,2,0,0,2,0,11,41,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,607,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,609,"                if (tokenLen >= 4) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,610,"                    rule = selectNumberRule(Calendar.YEAR, tokenLen);
",6,0,0,1,2,0,4,0,0,11,49,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,612,"                    rule = TwoDigitYearField.INSTANCE;
",6,0,0,0,0,0,0,0,0,7,34,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,614,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,616,"                if (tokenLen >= 4) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,617,"                    rule = new TextField(Calendar.MONTH, months);
",8,0,0,1,2,0,0,2,0,11,45,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,618,"                } else if (tokenLen == 3) {
",2,1,0,1,4,0,0,0,0,3,27,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,619,"                    rule = new TextField(Calendar.MONTH, shortMonths);
",8,0,0,1,2,0,0,2,0,11,50,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,620,"                } else if (tokenLen == 2) {
",2,1,0,1,4,0,0,0,0,3,27,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,621,"                    rule = TwoDigitMonthField.INSTANCE;
",6,0,0,0,0,0,0,0,0,7,35,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,623,"                    rule = UnpaddedMonthField.INSTANCE;
",6,0,0,0,0,0,0,0,0,7,35,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,625,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,627,"                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);
",6,0,0,1,2,0,4,0,0,11,57,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,628,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,630,"                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));
",6,0,0,2,4,0,4,2,0,13,70,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,631,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,633,"                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);
",6,0,0,1,2,0,4,0,0,11,56,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,634,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,636,"                rule = selectNumberRule(Calendar.MINUTE, tokenLen);
",6,0,0,1,2,0,4,0,0,11,51,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,637,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,639,"                rule = selectNumberRule(Calendar.SECOND, tokenLen);
",6,0,0,1,2,0,4,0,0,11,51,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,640,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,642,"                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);
",6,0,0,1,2,0,4,0,0,11,56,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,643,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,648,"                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);
",6,0,0,1,2,0,4,0,0,11,56,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,649,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,651,"                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);
",6,0,0,1,2,0,4,0,0,11,65,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,652,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,654,"                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);
",6,0,0,1,2,0,4,0,0,11,57,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,655,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,657,"                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);
",6,0,0,1,2,0,4,0,0,11,58,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,658,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,660,"                rule = new TextField(Calendar.AM_PM, AmPmStrings);
",8,0,0,1,2,0,0,2,0,11,50,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,661,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,663,"                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));
",6,0,0,2,4,0,4,2,0,13,81,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,664,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,666,"                rule = selectNumberRule(Calendar.HOUR, tokenLen);
",6,0,0,1,2,0,4,0,0,11,49,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,667,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,669,"                if (tokenLen >= 4) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,670,"                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);
",12,0,0,1,2,0,0,2,0,15,80,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,672,"                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);
",12,0,0,1,2,0,0,2,0,15,81,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,674,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,676,"                if (tokenLen == 1) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,677,"                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;
",6,0,0,0,0,0,0,0,0,7,44,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,679,"                    rule = TimeZoneNumberRule.INSTANCE_COLON;
",6,0,0,0,0,0,0,0,0,7,41,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,681,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,685,"                    rule = new CharacterLiteral(sub.charAt(0));
",2,0,0,2,4,0,4,2,0,9,43,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,691,"                throw new IllegalArgumentException(""Illegal pattern component: "" + token);
",2,1,0,1,2,0,0,2,0,6,74,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,740,"                        i++;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,741,"                        buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,13,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,769,"            return new UnpaddedNumberField(field);
",2,0,0,1,2,1,0,2,0,4,38,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,773,"            return new PaddedNumberField(field, padding);
",4,0,0,1,2,1,0,2,0,6,45,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,790,"        if (obj instanceof Date) {
",2,0,0,1,3,0,0,2,0,4,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,791,"            return format((Date) obj, toAppendTo);
",2,0,0,2,4,1,4,2,0,8,38,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,792,"        } else if (obj instanceof Calendar) {
",2,0,0,1,4,0,0,2,0,4,37,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,793,"            return format((Calendar) obj, toAppendTo);
",2,0,0,2,4,1,4,2,0,8,42,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,794,"        } else if (obj instanceof Long) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,795,"            return format(((Long) obj).longValue(), toAppendTo);
",2,0,0,4,8,1,6,2,0,10,52,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,797,"            throw new IllegalArgumentException(""Unknown class: "" +
",0,1,0,0,1,0,0,2,0,4,54,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,810,"        return format(new Date(millis));
",2,0,0,2,4,1,2,2,0,6,32,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,832,"        return format(calendar, new StringBuffer(mMaxLengthEstimate)).toString();
",2,0,0,3,6,1,6,2,0,10,73,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,845,"        return format(new Date(millis), buf);
",2,0,0,2,4,1,4,2,0,8,37,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,857,"        Calendar c = new GregorianCalendar(mTimeZone);
",4,0,0,1,2,0,0,4,0,8,46,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,858,"        c.setTime(date);
",0,0,0,1,2,0,6,0,0,6,16,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,859,"        return applyRules(c, buf);
",0,0,0,1,2,1,6,0,0,6,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,871,"        if (mTimeZoneForced) {
",2,0,0,1,3,0,0,0,0,2,22,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,872,"            calendar.getTimeInMillis(); /// LANG-538
",0,0,0,1,2,0,4,0,0,4,40,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,873,"            calendar = (Calendar) calendar.clone();
",2,0,0,2,4,0,4,2,0,9,39,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,874,"            calendar.setTimeZone(mTimeZone);
",0,0,0,1,2,0,6,0,0,6,32,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,876,"        return applyRules(calendar, buf);
",0,0,0,1,2,1,6,0,0,6,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,907,"        pos.setIndex(0);
",0,0,0,1,2,0,4,0,0,4,16,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,908,"        pos.setErrorIndex(0);
",0,0,0,1,2,0,4,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,909,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,920,"        return mPattern;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,934,"        return mTimeZone;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,945,"        return mTimeZoneForced;
",2,0,0,0,0,1,0,0,0,2,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,954,"        return mLocale;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,967,"        return mMaxLengthEstimate;
",2,0,0,0,0,1,0,0,0,2,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,980,"        if (obj instanceof FastDateFormat == false) {
",2,1,0,1,3,0,0,2,0,6,45,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,981,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,983,"        FastDateFormat other = (FastDateFormat) obj;
",4,0,0,1,2,0,0,4,0,8,44,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,984,"        if (
",0,0,0,0,1,0,0,0,0,0,4,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,991,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,993,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1019,"        return ""FastDateFormat["" + mPattern + ""]"";
",2,1,0,1,2,1,0,0,0,5,42,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1033,"        in.defaultReadObject();
",0,0,0,1,2,0,4,0,0,4,23,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1034,"        init();
",0,0,0,1,2,0,2,0,0,2,7,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1035,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1603,"        TimeZoneNumberRule(boolean colon) {
",4,0,0,1,3,0,0,0,0,4,35,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1604,"            mColon = colon;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1605,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1593,"        static final TimeZoneNumberRule INSTANCE_COLON = new TimeZoneNumberRule(true);
",2,0,0,1,2,2,0,4,0,9,78,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1594,"        static final TimeZoneNumberRule INSTANCE_NO_COLON = new TimeZoneNumberRule(false);
",2,0,0,1,2,2,0,4,0,9,82,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1611,"            return 5;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1618,"            int offset = calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET);
",10,1,0,2,4,0,8,0,0,19,84,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1620,"            if (offset < 0) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1621,"                buffer.append('-');
",0,0,0,1,2,0,4,0,0,5,19,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1622,"                offset = -offset;
",4,0,0,0,0,0,0,0,0,6,17,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1624,"                buffer.append('+');
",0,0,0,1,2,0,4,0,0,5,19,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1627,"            int hours = offset / (60 * 60 * 1000);
",4,2,0,1,2,0,0,0,0,6,38,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1628,"            buffer.append((char)(hours / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1629,"            buffer.append((char)(hours % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1631,"            if (mColon) {
",2,0,0,1,3,0,0,0,0,2,13,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1632,"                buffer.append(':');
",0,0,0,1,2,0,4,0,0,5,19,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1635,"            int minutes = offset / (60 * 1000) - 60 * hours;
",6,4,0,1,2,0,0,0,0,10,48,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1636,"            buffer.append((char)(minutes / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,42,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1637,"            buffer.append((char)(minutes % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,42,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1638,"        }            
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1448,"        TwelveHourField(NumberRule rule) {
",4,0,0,1,3,0,0,2,0,6,34,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1449,"            mRule = rule;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1450,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1456,"            return mRule.estimateLength();
",0,0,0,1,2,1,4,0,0,4,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1463,"            int value = calendar.get(Calendar.HOUR);
",6,0,0,1,2,0,4,0,0,10,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1464,"            if (value == 0) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1465,"                value = calendar.getLeastMaximum(Calendar.HOUR) + 1;
",6,1,0,1,2,0,4,0,0,12,52,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1467,"            mRule.appendTo(buffer, value);
",0,0,0,1,2,0,8,0,0,8,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1468,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1474,"            mRule.appendTo(buffer, value);
",0,0,0,1,2,0,8,0,0,8,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,26,1475,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
