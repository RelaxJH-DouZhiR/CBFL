dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,631,"                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);
",6,0,0,1,2,0,4,0,0,11,57,7,0.07692,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,632,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.07692,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,167,"        return getInstance(pattern, null, null);
",0,0,0,1,2,1,4,0,0,5,40,4,0.06667,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,553,"            locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,6,0.06250,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,614,"                    rule = selectNumberRule(Calendar.YEAR, tokenLen);
",6,0,0,1,2,0,4,0,0,11,49,9,0.05882,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,625,"                    rule = TwoDigitMonthField.INSTANCE;
",6,0,0,0,0,0,0,0,0,7,35,11,0.05882,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,777,"            return new PaddedNumberField(field, padding);
",4,0,0,1,2,1,0,2,0,6,45,6,0.05882,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1261,"        PaddedNumberField(int field, int size) {
",6,0,0,1,3,0,0,0,0,6,40,3,0.05882,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1262,"            if (size < 3) {
",2,1,0,1,3,0,0,0,0,3,15,5,0.05882,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1266,"            mField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.05882,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1267,"            mSize = size;
",4,0,0,0,0,0,0,0,0,5,13,5,0.05882,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1268,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05882,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1274,"            return 4;
",0,0,0,0,0,1,0,0,0,0,9,3,0.05882,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1398,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.05882,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1399,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05882,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1392,"        static final TwoDigitMonthField INSTANCE = new TwoDigitMonthField();
",2,0,0,1,2,2,0,4,0,8,68,3,0.05882,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1405,"            return 2;
",0,0,0,0,0,1,0,0,0,0,9,3,0.05882,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,539,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,540,"        if (pattern == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,543,"        mPattern = pattern;
",4,0,0,0,0,0,0,0,0,5,19,4,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,545,"        mTimeZoneForced = (timeZone != null);
",4,1,0,1,2,0,0,0,0,6,37,4,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,546,"        if (timeZone == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,547,"            timeZone = TimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,549,"        mTimeZone = timeZone;
",4,0,0,0,0,0,0,0,0,5,21,4,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,551,"        mLocaleForced = (locale != null);
",4,1,0,1,2,0,0,0,0,6,33,4,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,552,"        if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,555,"        mLocale = locale;
",4,0,0,0,0,0,0,0,0,5,17,4,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,556,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,111,"    private static Map cInstanceCache = new HashMap(7);
",2,0,0,1,2,2,0,4,0,8,51,2,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,112,"    private static Map cDateInstanceCache = new HashMap(7);
",2,0,0,1,2,2,0,4,0,8,55,2,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,113,"    private static Map cTimeInstanceCache = new HashMap(7);
",2,0,0,1,2,2,0,4,0,8,55,2,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,114,"    private static Map cDateTimeInstanceCache = new HashMap(7);
",2,0,0,1,2,2,0,4,0,8,59,2,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,115,"    private static Map cTimeZoneDisplayCache = new HashMap(7);
",2,0,0,1,2,2,0,4,0,8,58,2,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,213,"        FastDateFormat emptyFormat = new FastDateFormat(pattern, timeZone, locale);
",8,0,0,1,2,0,0,4,0,12,75,4,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,214,"        FastDateFormat format = (FastDateFormat) cInstanceCache.get(emptyFormat);
",2,0,0,2,4,0,6,4,0,12,73,4,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,215,"        if (format == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,216,"            format = emptyFormat;
",4,0,0,0,0,0,0,0,0,5,21,6,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,217,"            format.init();  // convert shell format into usable one
",0,0,0,1,2,0,4,0,0,4,55,7,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,218,"            cInstanceCache.put(format, format);  // this is OK!
",0,0,0,1,2,0,8,0,0,8,51,7,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,220,"        return format;
",2,0,0,0,0,1,0,0,0,2,14,4,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,562,"        List rulesList = parsePattern();
",2,0,0,1,2,0,2,2,0,6,32,4,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,563,"        mRules = (Rule[]) rulesList.toArray(new Rule[rulesList.size()]);
",2,0,0,5,10,0,8,4,0,15,64,4,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,565,"        int len = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,566,"        for (int i=mRules.length; --i >= 0; ) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,567,"            len += mRules[i].estimateLength();
",2,0,1,2,4,0,2,0,0,9,34,6,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,570,"        mMaxLengthEstimate = len;
",4,0,0,0,0,0,0,0,0,5,25,4,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,571,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,582,"        DateFormatSymbols symbols = new DateFormatSymbols(mLocale);
",4,0,0,1,2,0,0,4,0,8,59,4,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,583,"        List rules = new ArrayList();
",2,0,0,1,2,0,0,4,0,6,29,4,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,585,"        String[] ERAs = symbols.getEras();
",2,0,0,2,4,0,4,2,0,8,34,4,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,586,"        String[] months = symbols.getMonths();
",2,0,0,2,4,0,4,2,0,8,38,4,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,587,"        String[] shortMonths = symbols.getShortMonths();
",2,0,0,2,4,0,4,2,0,8,48,4,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,588,"        String[] weekdays = symbols.getWeekdays();
",2,0,0,2,4,0,4,2,0,8,42,4,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,589,"        String[] shortWeekdays = symbols.getShortWeekdays();
",2,0,0,2,4,0,4,2,0,8,52,4,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,590,"        String[] AmPmStrings = symbols.getAmPmStrings();
",2,0,0,2,4,0,4,2,0,8,48,4,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,592,"        int length = mPattern.length();
",2,0,0,1,2,0,4,0,0,6,31,5,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,593,"        int[] indexRef = new int[1];
",2,0,0,2,4,0,0,0,0,2,28,5,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,595,"        for (int i = 0; i < length; i++) {
",8,1,0,1,3,0,0,0,0,10,34,4,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,596,"            indexRef[0] = i;
",2,0,1,1,2,0,0,0,0,5,16,6,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,597,"            String token = parseToken(mPattern, indexRef);
",2,0,0,1,2,0,6,2,0,10,46,6,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,598,"            i = indexRef[0];
",2,0,1,1,2,0,0,0,0,5,16,6,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,600,"            int tokenLen = token.length();
",2,0,0,1,2,0,4,0,0,6,30,7,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,601,"            if (tokenLen == 0) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,606,"            char c = token.charAt(0);
",2,0,0,1,2,0,4,0,0,6,25,7,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,608,"            switch (c) {
",2,0,0,1,3,0,0,0,0,2,12,6,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,613,"                if (tokenLen >= 4) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,620,"                if (tokenLen >= 4) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,622,"                } else if (tokenLen == 3) {
",2,1,0,1,4,0,0,0,0,3,27,8,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,624,"                } else if (tokenLen == 2) {
",2,1,0,1,4,0,0,0,0,3,27,9,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,687,"                String sub = token.substring(1);
",2,0,0,1,2,0,4,2,0,8,32,7,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,688,"                if (sub.length() == 1) {
",0,1,0,2,5,0,4,0,0,5,24,7,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,689,"                    rule = new CharacterLiteral(sub.charAt(0));
",2,0,0,2,4,0,4,2,0,9,43,9,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,698,"            rules.add(rule);
",0,0,0,1,2,0,6,0,0,6,16,7,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,701,"        return rules;
",2,0,0,0,0,1,0,0,0,2,13,4,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,712,"        StringBuffer buf = new StringBuffer();
",2,0,0,1,2,0,0,4,0,6,38,4,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,714,"        int i = indexRef[0];
",2,0,1,1,2,0,0,0,0,4,20,5,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,715,"        int length = pattern.length();
",2,0,0,1,2,0,4,0,0,6,30,5,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,717,"        char c = pattern.charAt(i);
",2,0,0,1,2,0,6,0,0,8,27,5,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,718,"        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {
",8,7,0,1,3,0,0,0,0,19,51,4,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,721,"            buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,7,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,723,"            while (i + 1 < length) {
",4,2,0,1,3,0,0,0,0,6,24,6,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,724,"                char peek = pattern.charAt(i + 1);
",4,1,0,1,2,0,4,0,0,9,34,9,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,725,"                if (peek == c) {
",4,1,0,1,3,0,0,0,0,5,16,8,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,726,"                    buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,11,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,727,"                    i++;
",2,0,0,0,0,0,0,0,0,3,4,10,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,731,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,734,"            buf.append('\'');
",0,0,0,1,2,0,4,0,0,5,17,7,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,736,"            boolean inLiteral = false;
",2,0,0,0,0,0,0,0,0,3,26,7,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,738,"            for (; i < length; i++) {
",6,1,0,1,3,0,0,0,0,8,25,6,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,739,"                c = pattern.charAt(i);
",2,0,0,1,2,0,6,0,0,9,22,8,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,741,"                if (c == '\'') {
",2,1,0,1,3,0,0,0,0,4,16,8,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,749,"                } else if (!inLiteral &&
",2,1,0,0,2,0,0,0,0,4,24,9,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,751,"                    i--;
",2,0,0,0,0,0,0,0,0,3,4,11,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,752,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,754,"                    buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,12,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,759,"        indexRef[0] = i;
",2,0,1,1,2,0,0,0,0,5,16,4,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,760,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,771,"        switch (padding) {
",2,0,0,1,3,0,0,0,0,2,18,4,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,775,"            return new TwoDigitNumberField(field);
",2,0,0,1,2,1,0,2,0,4,38,6,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1002,"        int total = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1003,"        total += mPattern.hashCode();
",2,0,0,1,2,0,4,0,0,7,29,4,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1004,"        total += mTimeZone.hashCode();
",2,0,0,1,2,0,4,0,0,7,30,4,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1005,"        total += (mTimeZoneForced ? 1 : 0);
",4,0,0,1,2,0,0,0,0,5,35,4,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1006,"        total += mLocale.hashCode();
",2,0,0,1,2,0,4,0,0,7,28,4,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1007,"        total += (mLocaleForced ? 1 : 0);
",4,0,0,1,2,0,0,0,0,5,33,4,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1008,"        return total;
",2,0,0,0,0,1,0,0,0,2,13,4,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1070,"        CharacterLiteral(char value) {
",4,0,0,1,3,0,0,0,0,4,30,3,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1071,"            mValue = value;
",4,0,0,0,0,0,0,0,0,5,15,5,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1072,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1078,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1321,"        TwoDigitNumberField(int field) {
",4,0,0,1,3,0,0,0,0,4,32,3,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1322,"            mField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1323,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05556,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1329,"            return 2;
",0,0,0,0,0,1,0,0,0,0,9,3,0.05556,0
defect4j,lang,org/apache/commons/lang/SerializationException,56,44,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,lang,org/apache/commons/lang/SerializationException,56,45,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/SerializationException,56,54,"        super(msg);
",2,0,0,1,2,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang/SerializationException,56,55,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/SerializationException,56,65,"        super(cause);
",2,0,0,1,2,0,0,0,0,2,13,4,0.00000,0
defect4j,lang,org/apache/commons/lang/SerializationException,56,66,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/SerializationException,56,77,"        super(msg, cause);
",4,0,0,1,2,0,0,0,0,4,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang/SerializationException,56,78,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/exception/NestableRuntimeException,56,60,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,lang,org/apache/commons/lang/exception/NestableRuntimeException,56,47,"    protected NestableDelegate delegate = new NestableDelegate(this);
",2,0,0,1,2,1,0,4,0,7,65,2,0.00000,0
defect4j,lang,org/apache/commons/lang/exception/NestableRuntimeException,56,53,"    private Throwable cause = null;
",2,0,0,0,0,1,0,2,0,5,31,2,0.00000,0
defect4j,lang,org/apache/commons/lang/exception/NestableRuntimeException,56,61,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/exception/NestableRuntimeException,56,70,"        super(msg);
",2,0,0,1,2,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang/exception/NestableRuntimeException,56,71,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/exception/NestableRuntimeException,56,81,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,lang,org/apache/commons/lang/exception/NestableRuntimeException,56,82,"        this.cause = cause;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang/exception/NestableRuntimeException,56,83,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/exception/NestableRuntimeException,56,94,"        super(msg);
",2,0,0,1,2,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang/exception/NestableRuntimeException,56,95,"        this.cause = cause;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang/exception/NestableRuntimeException,56,96,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/exception/NestableRuntimeException,56,102,"        return cause;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,lang,org/apache/commons/lang/exception/NestableRuntimeException,56,113,"        if (super.getMessage() != null) {
",2,1,0,2,5,0,0,0,0,3,33,4,0.00000,0
defect4j,lang,org/apache/commons/lang/exception/NestableRuntimeException,56,114,"            return super.getMessage();
",2,0,0,1,2,1,0,0,0,2,26,7,0.00000,0
defect4j,lang,org/apache/commons/lang/exception/NestableRuntimeException,56,115,"        } else if (cause != null) {
",2,1,0,1,4,0,0,0,0,3,27,5,0.00000,0
defect4j,lang,org/apache/commons/lang/exception/NestableRuntimeException,56,116,"            return cause.toString();
",0,0,0,1,2,1,4,0,0,4,24,8,0.00000,0
defect4j,lang,org/apache/commons/lang/exception/NestableRuntimeException,56,118,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/exception/NestableRuntimeException,56,126,"        if (index == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang/exception/NestableRuntimeException,56,127,"            return super.getMessage();
",2,0,0,1,2,1,0,0,0,2,26,7,0.00000,0
defect4j,lang,org/apache/commons/lang/exception/NestableRuntimeException,56,129,"            return delegate.getMessage(index);
",0,0,0,1,2,1,6,0,0,6,34,7,0.00000,0
defect4j,lang,org/apache/commons/lang/exception/NestableRuntimeException,56,137,"        return delegate.getMessages();
",0,0,0,1,2,1,4,0,0,4,30,5,0.00000,0
defect4j,lang,org/apache/commons/lang/exception/NestableRuntimeException,56,144,"        return delegate.getThrowable(index);
",0,0,0,1,2,1,6,0,0,6,36,5,0.00000,0
defect4j,lang,org/apache/commons/lang/exception/NestableRuntimeException,56,151,"        return delegate.getThrowableCount();
",0,0,0,1,2,1,4,0,0,4,36,5,0.00000,0
defect4j,lang,org/apache/commons/lang/exception/NestableRuntimeException,56,158,"        return delegate.getThrowables();
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,lang,org/apache/commons/lang/exception/NestableRuntimeException,56,165,"        return delegate.indexOfThrowable(type, 0);
",0,0,0,1,2,1,6,0,0,6,42,5,0.00000,0
defect4j,lang,org/apache/commons/lang/exception/NestableRuntimeException,56,172,"        return delegate.indexOfThrowable(type, fromIndex);
",0,0,0,1,2,1,8,0,0,8,50,5,0.00000,0
defect4j,lang,org/apache/commons/lang/exception/NestableRuntimeException,56,179,"        delegate.printStackTrace();
",0,0,0,1,2,0,4,0,0,4,27,5,0.00000,0
defect4j,lang,org/apache/commons/lang/exception/NestableRuntimeException,56,180,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/exception/NestableRuntimeException,56,186,"        delegate.printStackTrace(out);
",0,0,0,1,2,0,6,0,0,6,30,5,0.00000,0
defect4j,lang,org/apache/commons/lang/exception/NestableRuntimeException,56,187,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/exception/NestableRuntimeException,56,193,"        delegate.printStackTrace(out);
",0,0,0,1,2,0,6,0,0,6,30,5,0.00000,0
defect4j,lang,org/apache/commons/lang/exception/NestableRuntimeException,56,194,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/exception/NestableRuntimeException,56,200,"        super.printStackTrace(out);
",4,0,0,1,2,0,0,0,0,4,27,5,0.00000,0
defect4j,lang,org/apache/commons/lang/exception/NestableRuntimeException,56,201,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/SerializationUtils,56,61,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,lang,org/apache/commons/lang/SerializationUtils,56,62,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/SerializationUtils,56,80,"        return deserialize(serialize(object));
",0,0,0,2,4,1,6,0,0,6,38,5,0.00000,0
defect4j,lang,org/apache/commons/lang/SerializationUtils,56,101,"        if (outputStream == null) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.00000,0
defect4j,lang,org/apache/commons/lang/SerializationUtils,56,102,"            throw new IllegalArgumentException(""The OutputStream must not be null"");
",0,0,0,1,2,0,0,2,0,4,72,6,0.00000,0
defect4j,lang,org/apache/commons/lang/SerializationUtils,56,104,"        ObjectOutputStream out = null;
",2,0,0,0,0,0,0,2,0,4,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang/SerializationUtils,56,107,"            out = new ObjectOutputStream(outputStream);
",4,0,0,1,2,0,0,2,0,7,43,6,0.00000,0
defect4j,lang,org/apache/commons/lang/SerializationUtils,56,108,"            out.writeObject(obj);
",0,0,0,1,2,0,6,0,0,6,21,7,0.00000,0
defect4j,lang,org/apache/commons/lang/SerializationUtils,56,114,"                if (out != null) {
",2,1,0,1,3,0,0,0,0,3,18,8,0.00000,0
defect4j,lang,org/apache/commons/lang/SerializationUtils,56,115,"                    out.close();
",0,0,0,1,2,0,4,0,0,4,12,11,0.00000,0
defect4j,lang,org/apache/commons/lang/SerializationUtils,56,119,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/SerializationUtils,56,117,"            } catch (IOException ex) {
",2,0,0,1,4,0,0,2,0,4,26,8,0.00000,0
defect4j,lang,org/apache/commons/lang/SerializationUtils,56,120,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/SerializationUtils,56,110,"        } catch (IOException ex) {
",2,0,0,1,4,0,0,2,0,4,26,6,0.00000,0
defect4j,lang,org/apache/commons/lang/SerializationUtils,56,111,"            throw new SerializationException(ex);
",2,0,0,1,2,0,0,2,0,4,37,8,0.00000,0
defect4j,lang,org/apache/commons/lang/SerializationUtils,56,113,"            try {
",0,0,0,0,1,0,0,0,0,0,5,3,0.00000,0
defect4j,lang,org/apache/commons/lang/SerializationUtils,56,121,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/SerializationUtils,56,132,"        ByteArrayOutputStream baos = new ByteArrayOutputStream(512);
",2,0,0,1,2,0,0,4,0,6,60,4,0.00000,0
defect4j,lang,org/apache/commons/lang/SerializationUtils,56,133,"        serialize(obj, baos);
",0,0,0,1,2,0,6,0,0,6,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang/SerializationUtils,56,134,"        return baos.toByteArray();
",0,0,0,1,2,1,4,0,0,4,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang/SerializationUtils,56,155,"        if (inputStream == null) {
",2,1,0,1,3,0,0,0,0,3,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang/SerializationUtils,56,156,"            throw new IllegalArgumentException(""The InputStream must not be null"");
",0,0,0,1,2,0,0,2,0,4,71,6,0.00000,0
defect4j,lang,org/apache/commons/lang/SerializationUtils,56,158,"        ObjectInputStream in = null;
",2,0,0,0,0,0,0,2,0,4,28,4,0.00000,0
defect4j,lang,org/apache/commons/lang/SerializationUtils,56,161,"            in = new ObjectInputStream(inputStream);
",4,0,0,1,2,0,0,2,0,7,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang/SerializationUtils,56,162,"            return in.readObject();
",0,0,0,1,2,1,4,0,0,4,23,7,0.00000,0
defect4j,lang,org/apache/commons/lang/SerializationUtils,56,170,"                if (in != null) {
",2,1,0,1,3,0,0,0,0,3,17,8,0.00000,0
defect4j,lang,org/apache/commons/lang/SerializationUtils,56,171,"                    in.close();
",0,0,0,1,2,0,4,0,0,4,11,11,0.00000,0
defect4j,lang,org/apache/commons/lang/SerializationUtils,56,175,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/SerializationUtils,56,173,"            } catch (IOException ex) {
",2,0,0,1,4,0,0,2,0,4,26,8,0.00000,0
defect4j,lang,org/apache/commons/lang/SerializationUtils,56,164,"        } catch (ClassNotFoundException ex) {
",2,0,0,1,4,0,0,2,0,4,37,6,0.00000,0
defect4j,lang,org/apache/commons/lang/SerializationUtils,56,165,"            throw new SerializationException(ex);
",2,0,0,1,2,0,0,2,0,4,37,8,0.00000,0
defect4j,lang,org/apache/commons/lang/SerializationUtils,56,166,"        } catch (IOException ex) {
",2,0,0,1,4,0,0,2,0,4,26,6,0.00000,0
defect4j,lang,org/apache/commons/lang/SerializationUtils,56,167,"            throw new SerializationException(ex);
",2,0,0,1,2,0,0,2,0,4,37,8,0.00000,0
defect4j,lang,org/apache/commons/lang/SerializationUtils,56,169,"            try {
",0,0,0,0,1,0,0,0,0,0,5,3,0.00000,0
defect4j,lang,org/apache/commons/lang/SerializationUtils,56,188,"        if (objectData == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,lang,org/apache/commons/lang/SerializationUtils,56,189,"            throw new IllegalArgumentException(""The byte[] must not be null"");
",0,0,0,2,4,0,0,2,0,4,66,6,0.00000,0
defect4j,lang,org/apache/commons/lang/SerializationUtils,56,191,"        ByteArrayInputStream bais = new ByteArrayInputStream(objectData);
",4,0,0,1,2,0,0,4,0,8,65,4,0.00000,0
defect4j,lang,org/apache/commons/lang/SerializationUtils,56,192,"        return deserialize(bais);
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1218,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1219,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1211,"        static final UnpaddedMonthField INSTANCE = new UnpaddedMonthField();
",2,0,0,1,2,2,0,4,0,8,68,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1225,"            return 2;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1232,"            appendTo(buffer, calendar.get(Calendar.MONTH) + 1);
",4,1,0,2,4,0,8,0,0,13,51,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1233,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1239,"            if (value < 10) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1240,"                buffer.append((char)(value + '0'));
",2,1,0,3,6,0,4,0,0,8,35,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1242,"                buffer.append((char)(value / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1243,"                buffer.append((char)(value % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1245,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1436,"        TwelveHourField(NumberRule rule) {
",4,0,0,1,3,0,0,2,0,6,34,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1437,"            mRule = rule;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1438,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1444,"            return mRule.estimateLength();
",0,0,0,1,2,1,4,0,0,4,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1451,"            int value = calendar.get(Calendar.HOUR);
",6,0,0,1,2,0,4,0,0,10,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1452,"            if (value == 0) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1453,"                value = calendar.getLeastMaximum(Calendar.HOUR) + 1;
",6,1,0,1,2,0,4,0,0,12,52,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1455,"            mRule.appendTo(buffer, value);
",0,0,0,1,2,0,8,0,0,8,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1456,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1462,"            mRule.appendTo(buffer, value);
",0,0,0,1,2,0,8,0,0,8,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1463,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1478,"        TwentyFourHourField(NumberRule rule) {
",4,0,0,1,3,0,0,2,0,6,38,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1479,"            mRule = rule;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1480,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1486,"            return mRule.estimateLength();
",0,0,0,1,2,1,4,0,0,4,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1493,"            int value = calendar.get(Calendar.HOUR_OF_DAY);
",6,0,0,1,2,0,4,0,0,10,47,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1494,"            if (value == 0) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1495,"                value = calendar.getMaximum(Calendar.HOUR_OF_DAY) + 1;
",6,1,0,1,2,0,4,0,0,12,54,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1497,"            mRule.appendTo(buffer, value);
",0,0,0,1,2,0,8,0,0,8,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1498,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1504,"            mRule.appendTo(buffer, value);
",0,0,0,1,2,0,8,0,0,8,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1505,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1362,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1363,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1356,"        static final TwoDigitYearField INSTANCE = new TwoDigitYearField();
",2,0,0,1,2,2,0,4,0,8,66,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1369,"            return 2;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1376,"            appendTo(buffer, calendar.get(Calendar.YEAR) % 100);
",4,1,0,2,4,0,8,0,0,13,52,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1377,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1383,"            buffer.append((char)(value / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1384,"            buffer.append((char)(value % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1385,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1697,"        public Pair(Object obj1, Object obj2) {
",6,0,0,1,3,1,0,4,0,11,39,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1698,"            mObj1 = obj1;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1699,"            mObj2 = obj2;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1700,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1706,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1707,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1710,"            if (!(obj instanceof Pair)) {
",2,0,0,2,5,0,0,2,0,5,29,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1711,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1714,"            Pair key = (Pair)obj;
",4,0,0,1,2,0,0,4,0,8,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1716,"            return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1727,"            return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1736,"            return ""["" + mObj1 + ':' + mObj2 + ']';
",4,1,0,1,2,1,0,0,0,8,39,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1174,"        UnpaddedNumberField(int field) {
",4,0,0,1,3,0,0,0,0,4,32,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1175,"            mField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1176,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1165,"        static final UnpaddedNumberField INSTANCE_YEAR = new UnpaddedNumberField(Calendar.YEAR);
",6,0,0,1,2,2,0,4,0,12,88,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1182,"            return 4;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1189,"            appendTo(buffer, calendar.get(mField));
",0,0,0,2,4,0,10,0,0,10,39,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1190,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1196,"            if (value < 10) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1197,"                buffer.append((char)(value + '0'));
",2,1,0,3,6,0,4,0,0,8,35,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1198,"            } else if (value < 100) {
",2,1,0,1,4,0,0,0,0,3,25,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1199,"                buffer.append((char)(value / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,9,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1200,"                buffer.append((char)(value % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,9,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1202,"                buffer.append(Integer.toString(value));
",0,0,0,2,4,0,10,0,0,10,39,9,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1204,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1591,"        TimeZoneNumberRule(boolean colon) {
",4,0,0,1,3,0,0,0,0,4,35,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1592,"            mColon = colon;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1593,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1581,"        static final TimeZoneNumberRule INSTANCE_COLON = new TimeZoneNumberRule(true);
",2,0,0,1,2,2,0,4,0,9,78,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1582,"        static final TimeZoneNumberRule INSTANCE_NO_COLON = new TimeZoneNumberRule(false);
",2,0,0,1,2,2,0,4,0,9,82,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1599,"            return 5;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1606,"            int offset = calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET);
",10,1,0,2,4,0,8,0,0,19,84,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1608,"            if (offset < 0) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1609,"                buffer.append('-');
",0,0,0,1,2,0,4,0,0,5,19,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1610,"                offset = -offset;
",4,0,0,0,0,0,0,0,0,6,17,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1612,"                buffer.append('+');
",0,0,0,1,2,0,4,0,0,5,19,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1615,"            int hours = offset / (60 * 60 * 1000);
",4,2,0,1,2,0,0,0,0,6,38,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1616,"            buffer.append((char)(hours / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1617,"            buffer.append((char)(hours % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1619,"            if (mColon) {
",2,0,0,1,3,0,0,0,0,2,13,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1620,"                buffer.append(':');
",0,0,0,1,2,0,4,0,0,5,19,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1623,"            int minutes = offset / (60 * 1000) - 60 * hours;
",6,4,0,1,2,0,0,0,0,10,48,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1624,"            buffer.append((char)(minutes / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,42,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1625,"            buffer.append((char)(minutes % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,42,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1626,"        }            
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1647,"                           boolean daylight, int style, Locale locale) {
",6,0,0,0,2,0,0,2,0,8,45,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1648,"            mTimeZone = timeZone;
",4,0,0,0,0,0,0,0,0,5,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1649,"            if (daylight) {
",2,0,0,1,3,0,0,0,0,2,15,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1650,"                style |= 0x80000000;
",2,0,0,0,0,0,0,0,0,3,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1652,"            mStyle = style;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1653,"            mLocale = locale;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1654,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1660,"            return mStyle * 31 + mLocale.hashCode();
",2,2,0,1,2,1,4,0,0,8,40,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1667,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1668,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1670,"            if (obj instanceof TimeZoneDisplayKey) {
",2,0,0,1,3,0,0,2,0,4,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1671,"                TimeZoneDisplayKey other = (TimeZoneDisplayKey)obj;
",4,0,0,1,2,0,0,4,0,8,51,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1672,"                return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1677,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,541,"            throw new IllegalArgumentException(""The pattern must not be null"");
",0,0,0,1,2,0,0,2,0,4,67,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,154,"        return getInstance(getDefaultPattern(), null, null);
",0,0,0,2,4,1,4,0,0,6,52,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,182,"        return getInstance(pattern, timeZone, null);
",0,0,0,1,2,1,6,0,0,7,44,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,196,"        return getInstance(pattern, null, locale);
",0,0,0,1,2,1,6,0,0,7,42,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,235,"        return getDateInstance(style, null, null);
",0,0,0,1,2,1,4,0,0,5,42,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,250,"        return getDateInstance(style, null, locale);
",0,0,0,1,2,1,6,0,0,7,44,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,266,"        return getDateInstance(style, timeZone, null);
",0,0,0,1,2,1,6,0,0,7,46,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,281,"        Object key = new Integer(style);
",4,0,0,1,2,0,0,4,0,8,32,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,282,"        if (timeZone != null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,283,"            key = new Pair(key, timeZone);
",6,0,0,1,2,0,0,2,0,9,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,285,"        if (locale != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,286,"            key = new Pair(key, locale);
",6,0,0,1,2,0,0,2,0,9,28,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,289,"        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);
",2,0,0,2,4,0,6,4,0,12,69,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,290,"        if (format == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,291,"            if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,292,"                locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,296,"                SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateInstance(style, locale);
",2,0,0,2,4,0,8,4,0,14,90,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,297,"                String pattern = formatter.toPattern();
",2,0,0,1,2,0,4,2,0,8,39,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,298,"                format = getInstance(pattern, timeZone, locale);
",2,0,0,1,2,0,8,0,0,11,48,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,299,"                cDateInstanceCache.put(key, format);
",0,0,0,1,2,0,8,0,0,8,36,9,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,303,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,301,"            } catch (ClassCastException ex) {
",2,0,0,1,4,0,0,2,0,4,33,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,302,"                throw new IllegalArgumentException(""No date pattern for locale: "" + locale);
",2,1,0,1,2,0,0,2,0,6,76,10,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,305,"        return format;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,320,"        return getTimeInstance(style, null, null);
",0,0,0,1,2,1,4,0,0,5,42,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,335,"        return getTimeInstance(style, null, locale);
",0,0,0,1,2,1,6,0,0,7,44,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,351,"        return getTimeInstance(style, timeZone, null);
",0,0,0,1,2,1,6,0,0,7,46,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,367,"        Object key = new Integer(style);
",4,0,0,1,2,0,0,4,0,8,32,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,368,"        if (timeZone != null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,369,"            key = new Pair(key, timeZone);
",6,0,0,1,2,0,0,2,0,9,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,371,"        if (locale != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,372,"            key = new Pair(key, locale);
",6,0,0,1,2,0,0,2,0,9,28,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,375,"        FastDateFormat format = (FastDateFormat) cTimeInstanceCache.get(key);
",2,0,0,2,4,0,6,4,0,12,69,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,376,"        if (format == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,377,"            if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,378,"                locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,382,"                SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getTimeInstance(style, locale);
",2,0,0,2,4,0,8,4,0,14,90,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,383,"                String pattern = formatter.toPattern();
",2,0,0,1,2,0,4,2,0,8,39,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,384,"                format = getInstance(pattern, timeZone, locale);
",2,0,0,1,2,0,8,0,0,11,48,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,385,"                cTimeInstanceCache.put(key, format);
",0,0,0,1,2,0,8,0,0,8,36,9,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,389,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,387,"            } catch (ClassCastException ex) {
",2,0,0,1,4,0,0,2,0,4,33,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,388,"                throw new IllegalArgumentException(""No date pattern for locale: "" + locale);
",2,1,0,1,2,0,0,2,0,6,76,10,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,391,"        return format;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,408,"        return getDateTimeInstance(dateStyle, timeStyle, null, null);
",0,0,0,1,2,1,6,0,0,7,61,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,425,"        return getDateTimeInstance(dateStyle, timeStyle, null, locale);
",0,0,0,1,2,1,8,0,0,9,63,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,443,"        return getDateTimeInstance(dateStyle, timeStyle, timeZone, null);
",0,0,0,1,2,1,8,0,0,9,65,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,461,"        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));
",6,0,0,3,6,0,0,8,0,14,70,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,462,"        if (timeZone != null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,463,"            key = new Pair(key, timeZone);
",6,0,0,1,2,0,0,2,0,9,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,465,"        if (locale != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,466,"            key = new Pair(key, locale);
",6,0,0,1,2,0,0,2,0,9,28,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,469,"        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);
",2,0,0,2,4,0,6,4,0,12,73,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,470,"        if (format == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,471,"            if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,472,"                locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,476,"                SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,
",2,0,0,1,3,0,8,4,0,14,100,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,478,"                String pattern = formatter.toPattern();
",2,0,0,1,2,0,4,2,0,8,39,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,479,"                format = getInstance(pattern, timeZone, locale);
",2,0,0,1,2,0,8,0,0,11,48,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,480,"                cDateTimeInstanceCache.put(key, format);
",0,0,0,1,2,0,8,0,0,8,40,9,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,484,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,482,"            } catch (ClassCastException ex) {
",2,0,0,1,4,0,0,2,0,4,33,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,483,"                throw new IllegalArgumentException(""No date time pattern for locale: "" + locale);
",2,1,0,1,2,0,0,2,0,6,81,10,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,486,"        return format;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,501,"        Object key = new TimeZoneDisplayKey(tz, daylight, style, locale);
",10,0,0,1,2,0,0,4,0,14,65,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,502,"        String value = (String) cTimeZoneDisplayCache.get(key);
",2,0,0,2,4,0,6,4,0,12,55,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,503,"        if (value == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,505,"            value = tz.getDisplayName(daylight, style, locale);
",2,0,0,1,2,0,10,0,0,13,51,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,506,"            cTimeZoneDisplayCache.put(key, value);
",0,0,0,1,2,0,8,0,0,8,38,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,508,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,517,"        if (cDefaultPattern == null) {
",2,1,0,1,3,0,0,0,0,3,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,518,"            cDefaultPattern = new SimpleDateFormat().toPattern();
",2,0,0,2,4,0,2,2,0,7,53,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,520,"        return cDefaultPattern;
",2,0,0,0,0,1,0,0,0,2,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,602,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,610,"                rule = new TextField(Calendar.ERA, ERAs);
",8,0,0,1,2,0,0,2,0,11,41,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,611,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,616,"                    rule = TwoDigitYearField.INSTANCE;
",6,0,0,0,0,0,0,0,0,7,34,9,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,618,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,621,"                    rule = new TextField(Calendar.MONTH, months);
",8,0,0,1,2,0,0,2,0,11,45,9,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,623,"                    rule = new TextField(Calendar.MONTH, shortMonths);
",8,0,0,1,2,0,0,2,0,11,50,10,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,627,"                    rule = UnpaddedMonthField.INSTANCE;
",6,0,0,0,0,0,0,0,0,7,35,11,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,629,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,634,"                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));
",6,0,0,2,4,0,4,2,0,13,70,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,635,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,637,"                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);
",6,0,0,1,2,0,4,0,0,11,56,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,638,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,640,"                rule = selectNumberRule(Calendar.MINUTE, tokenLen);
",6,0,0,1,2,0,4,0,0,11,51,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,641,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,643,"                rule = selectNumberRule(Calendar.SECOND, tokenLen);
",6,0,0,1,2,0,4,0,0,11,51,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,644,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,646,"                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);
",6,0,0,1,2,0,4,0,0,11,56,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,647,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,649,"                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);
",12,1,0,1,2,0,0,2,0,16,84,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,650,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,652,"                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);
",6,0,0,1,2,0,4,0,0,11,56,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,653,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,655,"                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);
",6,0,0,1,2,0,4,0,0,11,65,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,656,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,658,"                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);
",6,0,0,1,2,0,4,0,0,11,57,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,659,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,661,"                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);
",6,0,0,1,2,0,4,0,0,11,58,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,662,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,664,"                rule = new TextField(Calendar.AM_PM, AmPmStrings);
",8,0,0,1,2,0,0,2,0,11,50,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,665,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,667,"                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));
",6,0,0,2,4,0,4,2,0,13,81,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,668,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,670,"                rule = selectNumberRule(Calendar.HOUR, tokenLen);
",6,0,0,1,2,0,4,0,0,11,49,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,671,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,673,"                if (tokenLen >= 4) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,674,"                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);
",12,0,0,1,2,0,0,2,0,15,80,9,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,676,"                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);
",12,0,0,1,2,0,0,2,0,15,81,9,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,678,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,680,"                if (tokenLen == 1) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,681,"                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;
",6,0,0,0,0,0,0,0,0,7,44,9,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,683,"                    rule = TimeZoneNumberRule.INSTANCE_COLON;
",6,0,0,0,0,0,0,0,0,7,41,9,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,685,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,691,"                    rule = new StringLiteral(sub);
",4,0,0,1,2,0,0,2,0,7,30,9,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,693,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,695,"                throw new IllegalArgumentException(""Illegal pattern component: "" + token);
",2,1,0,1,2,0,0,2,0,6,74,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,742,"                    if (i + 1 < length && pattern.charAt(i + 1) == '\'') {
",6,5,0,2,5,0,4,0,0,16,54,10,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,744,"                        i++;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,745,"                        buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,13,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,747,"                        inLiteral = !inLiteral;
",4,0,0,0,0,0,0,0,0,6,23,12,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,773,"            return new UnpaddedNumberField(field);
",2,0,0,1,2,1,0,2,0,4,38,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,793,"        if (obj instanceof Date) {
",2,0,0,1,3,0,0,2,0,4,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,794,"            return format((Date) obj, toAppendTo);
",2,0,0,2,4,1,4,2,0,8,38,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,795,"        } else if (obj instanceof Calendar) {
",2,0,0,1,4,0,0,2,0,4,37,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,796,"            return format((Calendar) obj, toAppendTo);
",2,0,0,2,4,1,4,2,0,8,42,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,797,"        } else if (obj instanceof Long) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,798,"            return format(((Long) obj).longValue(), toAppendTo);
",2,0,0,4,8,1,6,2,0,10,52,9,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,800,"            throw new IllegalArgumentException(""Unknown class: "" +
",0,1,0,0,1,0,0,2,0,4,54,9,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,813,"        return format(new Date(millis));
",2,0,0,2,4,1,2,2,0,6,32,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,823,"        Calendar c = new GregorianCalendar(mTimeZone);
",4,0,0,1,2,0,0,4,0,8,46,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,824,"        c.setTime(date);
",0,0,0,1,2,0,6,0,0,6,16,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,825,"        return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();
",2,0,0,3,6,1,6,2,0,10,70,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,835,"        return format(calendar, new StringBuffer(mMaxLengthEstimate)).toString();
",2,0,0,3,6,1,6,2,0,10,73,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,848,"        return format(new Date(millis), buf);
",2,0,0,2,4,1,4,2,0,8,37,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,860,"        Calendar c = new GregorianCalendar(mTimeZone);
",4,0,0,1,2,0,0,4,0,8,46,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,861,"        c.setTime(date);
",0,0,0,1,2,0,6,0,0,6,16,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,862,"        return applyRules(c, buf);
",0,0,0,1,2,1,6,0,0,6,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,874,"        if (mTimeZoneForced) {
",2,0,0,1,3,0,0,0,0,2,22,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,875,"            calendar = (Calendar) calendar.clone();
",2,0,0,2,4,0,4,2,0,9,39,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,876,"            calendar.setTimeZone(mTimeZone);
",0,0,0,1,2,0,6,0,0,6,32,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,878,"        return applyRules(calendar, buf);
",0,0,0,1,2,1,6,0,0,6,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,890,"        Rule[] rules = mRules;
",4,0,0,1,2,0,0,2,0,6,22,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,891,"        int len = mRules.length;
",6,0,0,0,0,0,0,0,0,6,24,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,892,"        for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,893,"            rules[i].appendTo(buf, calendar);
",0,0,1,2,4,0,6,0,0,10,33,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,895,"        return buf;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,908,"        pos.setIndex(0);
",0,0,0,1,2,0,4,0,0,4,16,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,909,"        pos.setErrorIndex(0);
",0,0,0,1,2,0,4,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,910,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,921,"        return mPattern;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,935,"        return mTimeZone;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,946,"        return mTimeZoneForced;
",2,0,0,0,0,1,0,0,0,2,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,955,"        return mLocale;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,968,"        return mMaxLengthEstimate;
",2,0,0,0,0,1,0,0,0,2,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,980,"        if (obj instanceof FastDateFormat == false) {
",2,1,0,1,3,0,0,2,0,6,45,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,981,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,983,"        FastDateFormat other = (FastDateFormat) obj;
",4,0,0,1,2,0,0,4,0,8,44,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,984,"        if (
",0,0,0,0,1,0,0,0,0,0,4,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,991,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,993,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1017,"        return ""FastDateFormat["" + mPattern + ""]"";
",2,1,0,1,2,1,0,0,0,5,42,4,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1134,"        TextField(int field, String[] values) {
",6,0,0,2,5,0,0,2,0,8,39,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1135,"            mField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1136,"            mValues = values;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1137,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1143,"            int max = 0;
",2,0,0,0,0,0,0,0,0,2,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1144,"            for (int i=mValues.length; --i >= 0; ) {
",8,1,0,1,3,0,0,0,0,10,40,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1145,"                int len = mValues[i].length();
",2,0,1,2,4,0,2,0,0,8,30,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1146,"                if (len > max) {
",4,1,0,1,3,0,0,0,0,5,16,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1147,"                    max = len;
",4,0,0,0,0,0,0,0,0,5,10,9,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1149,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1150,"            return max;
",2,0,0,0,0,1,0,0,0,2,11,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1157,"            buffer.append(mValues[calendar.get(mField)]);
",0,0,1,3,6,0,10,0,0,12,45,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1158,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1264,"                throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,9,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1281,"            appendTo(buffer, calendar.get(mField));
",0,0,0,2,4,0,10,0,0,10,39,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1282,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1288,"            if (value < 100) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1289,"                for (int i = mSize; --i >= 2; ) {
",6,1,0,1,3,0,0,0,0,8,33,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1290,"                    buffer.append('0');
",0,0,0,1,2,0,4,0,0,5,19,10,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1292,"                buffer.append((char)(value / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1293,"                buffer.append((char)(value % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1296,"                if (value < 1000) {
",2,1,0,1,3,0,0,0,0,3,19,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1297,"                    digits = 3;
",2,0,0,0,0,0,0,0,0,3,11,9,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1299,"                    Validate.isTrue(value > -1, ""Negative values should not be possible"", value);
",2,1,0,1,2,0,6,0,0,11,77,10,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1300,"                    digits = Integer.toString(value).length();
",2,0,0,2,4,0,8,0,0,11,42,9,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1302,"                for (int i = mSize; --i >= digits; ) {
",8,1,0,1,3,0,0,0,0,10,38,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1303,"                    buffer.append('0');
",0,0,0,1,2,0,4,0,0,5,19,10,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1305,"                buffer.append(Integer.toString(value));
",0,0,0,2,4,0,10,0,0,10,39,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1307,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1412,"            appendTo(buffer, calendar.get(Calendar.MONTH) + 1);
",4,1,0,2,4,0,8,0,0,13,51,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1413,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1419,"            buffer.append((char)(value / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1420,"            buffer.append((char)(value % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1421,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1085,"            buffer.append(mValue);
",0,0,0,1,2,0,6,0,0,6,22,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1086,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1527,"        TimeZoneNameRule(TimeZone timeZone, boolean timeZoneForced, Locale locale, int style) {
",10,0,0,1,3,0,0,4,0,14,87,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1528,"            mTimeZone = timeZone;
",4,0,0,0,0,0,0,0,0,5,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1529,"            mTimeZoneForced = timeZoneForced;
",4,0,0,0,0,0,0,0,0,5,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1530,"            mLocale = locale;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1531,"            mStyle = style;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1533,"            if (timeZoneForced) {
",2,0,0,1,3,0,0,0,0,2,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1534,"                mStandard = getTimeZoneDisplay(timeZone, false, style, locale);
",2,0,0,1,2,0,8,0,0,12,63,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1535,"                mDaylight = getTimeZoneDisplay(timeZone, true, style, locale);
",2,0,0,1,2,0,8,0,0,12,62,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1537,"                mStandard = null;
",2,0,0,0,0,0,0,0,0,3,17,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1538,"                mDaylight = null;
",2,0,0,0,0,0,0,0,0,3,17,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1540,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1546,"            if (mTimeZoneForced) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1547,"                return Math.max(mStandard.length(), mDaylight.length());
",0,0,0,3,6,1,12,0,0,12,56,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1548,"            } else if (mStyle == TimeZone.SHORT) {
",6,1,0,1,4,0,0,0,0,7,38,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1549,"                return 4;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1551,"                return 40;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1559,"            if (mTimeZoneForced) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1560,"                if (mTimeZone.useDaylightTime() && calendar.get(Calendar.DST_OFFSET) != 0) {
",4,2,0,3,7,0,8,0,0,14,76,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1561,"                    buffer.append(mDaylight);
",0,0,0,1,2,0,6,0,0,6,25,10,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1563,"                    buffer.append(mStandard);
",0,0,0,1,2,0,6,0,0,6,25,10,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1566,"                TimeZone timeZone = calendar.getTimeZone();
",2,0,0,1,2,0,4,2,0,8,43,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1567,"                if (timeZone.useDaylightTime() && calendar.get(Calendar.DST_OFFSET) != 0) {
",4,2,0,3,7,0,8,0,0,14,75,7,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1568,"                    buffer.append(getTimeZoneDisplay(timeZone, true, mStyle, mLocale));
",0,0,0,2,4,0,12,0,0,13,67,10,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1570,"                    buffer.append(getTimeZoneDisplay(timeZone, false, mStyle, mLocale));
",0,0,0,2,4,0,12,0,0,13,68,10,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1573,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1336,"            appendTo(buffer, calendar.get(mField));
",0,0,0,2,4,0,10,0,0,10,39,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1337,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1343,"            if (value < 100) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1344,"                buffer.append((char)(value / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1345,"                buffer.append((char)(value % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1347,"                buffer.append(Integer.toString(value));
",0,0,0,2,4,0,10,0,0,10,39,8,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1349,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1101,"        StringLiteral(String value) {
",4,0,0,1,3,0,0,2,0,6,29,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1102,"            mValue = value;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1103,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1109,"            return mValue.length();
",0,0,0,1,2,1,4,0,0,4,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1116,"            buffer.append(mValue);
",0,0,0,1,2,0,6,0,0,6,22,6,0.00000,0
defect4j,lang,org/apache/commons/lang/time/FastDateFormat,56,1117,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
