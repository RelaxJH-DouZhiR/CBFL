dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,462,"                pfxLen += pfx.length();
",2,0,0,1,2,0,4,0,0,7,23,8,0.33333,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,463,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.33333,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,467,"            final int hexDigits = str.length() - pfxLen;
",4,1,0,1,2,1,4,0,0,10,44,6,0.33333,1
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,468,"            if (hexDigits > 16) { // too many for Long
",2,1,0,1,3,0,0,0,0,3,42,6,0.33333,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,471,"            if (hexDigits > 8) { // too many for an int
",2,1,0,1,3,0,0,0,0,3,43,6,0.33333,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,474,"            return createInteger(str);
",0,0,0,1,2,1,4,0,0,4,26,7,0.33333,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,680,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.25000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,684,"        return Integer.decode(str);
",0,0,0,1,2,1,6,0,0,6,27,5,0.25000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,451,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.11111,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,454,"        if (StringUtils.isBlank(str)) {
",0,0,0,2,5,0,6,0,0,6,31,5,0.11111,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,458,"        final String[] hex_prefixes = {""0x"", ""0X"", ""-0x"", ""-0X"", ""#"", ""-#""};
",2,0,0,2,4,1,0,2,0,11,68,4,0.11111,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,459,"        int pfxLen = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.11111,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,460,"        for(final String pfx : hex_prefixes) {
",4,0,0,1,3,1,0,2,0,7,38,4,0.11111,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,461,"            if (str.startsWith(pfx)) {
",0,0,0,2,5,0,6,0,0,6,26,7,0.11111,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,466,"        if (pfxLen > 0) { // we have a hex number
",2,1,0,1,3,0,0,0,0,3,41,4,0.11111,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,257,"        if (cs == null || (strLen = cs.length()) == 0) {
",4,3,0,3,7,0,4,0,0,12,48,4,0.10000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,260,"        for (int i = 0; i < strLen; i++) {
",8,1,0,1,3,0,0,0,0,10,34,4,0.10000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,261,"            if (Character.isWhitespace(cs.charAt(i)) == false) {
",0,1,0,3,7,0,10,0,0,12,52,6,0.10000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,262,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.10000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,181,"    private static final Pattern WHITESPACE_PATTERN = Pattern.compile(""(?: \\s|[\\s&&[^ ]])\\s*"");
",2,0,0,4,8,3,4,2,0,12,94,2,0.09091,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,34,"    public static final Long LONG_ZERO = Long.valueOf(0L);
",2,0,0,1,2,3,4,2,0,11,54,2,0.01149,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,36,"    public static final Long LONG_ONE = Long.valueOf(1L);
",2,0,0,1,2,3,4,2,0,11,53,2,0.01149,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,38,"    public static final Long LONG_MINUS_ONE = Long.valueOf(-1L);
",2,0,0,1,2,3,4,2,0,12,60,2,0.01149,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,40,"    public static final Integer INTEGER_ZERO = Integer.valueOf(0);
",2,0,0,1,2,3,4,2,0,11,62,2,0.01149,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,42,"    public static final Integer INTEGER_ONE = Integer.valueOf(1);
",2,0,0,1,2,3,4,2,0,11,61,2,0.01149,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,44,"    public static final Integer INTEGER_MINUS_ONE = Integer.valueOf(-1);
",2,0,0,1,2,3,4,2,0,12,68,2,0.01149,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,46,"    public static final Short SHORT_ZERO = Short.valueOf((short) 0);
",2,0,0,2,4,3,4,2,0,11,64,2,0.01149,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,48,"    public static final Short SHORT_ONE = Short.valueOf((short) 1);
",2,0,0,2,4,3,4,2,0,11,63,2,0.01149,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,50,"    public static final Short SHORT_MINUS_ONE = Short.valueOf((short) -1);
",2,0,0,2,4,3,4,2,0,12,70,2,0.01149,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,52,"    public static final Byte BYTE_ZERO = Byte.valueOf((byte) 0);
",2,0,0,2,4,3,4,2,0,11,60,2,0.01149,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,54,"    public static final Byte BYTE_ONE = Byte.valueOf((byte) 1);
",2,0,0,2,4,3,4,2,0,11,59,2,0.01149,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,56,"    public static final Byte BYTE_MINUS_ONE = Byte.valueOf((byte) -1);
",2,0,0,2,4,3,4,2,0,12,66,2,0.01149,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,58,"    public static final Double DOUBLE_ZERO = Double.valueOf(0.0d);
",2,0,0,1,2,3,4,2,0,11,62,2,0.01149,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,60,"    public static final Double DOUBLE_ONE = Double.valueOf(1.0d);
",2,0,0,1,2,3,4,2,0,11,61,2,0.01149,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,62,"    public static final Double DOUBLE_MINUS_ONE = Double.valueOf(-1.0d);
",2,0,0,1,2,3,4,2,0,12,68,2,0.01149,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,64,"    public static final Float FLOAT_ZERO = Float.valueOf(0.0f);
",2,0,0,1,2,3,4,2,0,11,59,2,0.01149,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,66,"    public static final Float FLOAT_ONE = Float.valueOf(1.0f);
",2,0,0,1,2,3,4,2,0,11,58,2,0.01149,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,68,"    public static final Float FLOAT_MINUS_ONE = Float.valueOf(-1.0f);
",2,0,0,1,2,3,4,2,0,12,65,2,0.01149,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,192,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,193,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,217,"        return cs == null || cs.length() == 0;
",2,3,0,1,2,1,4,0,0,9,38,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,236,"        return !StringUtils.isEmpty(cs);
",0,0,0,1,2,1,6,0,0,7,32,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,258,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,265,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,286,"        return !StringUtils.isBlank(cs);
",0,0,0,1,2,1,6,0,0,7,32,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,315,"        return str == null ? null : str.trim();
",2,1,0,1,2,1,4,0,0,7,39,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,341,"        final String ts = trim(str);
",2,0,0,1,2,1,4,2,0,9,28,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,342,"        return isEmpty(ts) ? null : ts;
",2,0,0,1,2,1,4,0,0,7,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,367,"        return str == null ? EMPTY : str.trim();
",4,1,0,1,2,1,4,0,0,9,40,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,395,"        return strip(str, null);
",0,0,0,1,2,1,4,0,0,5,24,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,422,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,423,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,425,"        str = strip(str, null);
",2,0,0,1,2,0,4,0,0,8,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,426,"        return str.isEmpty() ? null : str;
",2,0,0,1,2,1,4,0,0,6,34,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,452,"        return str == null ? EMPTY : strip(str, null);
",4,1,0,1,2,1,4,0,0,10,46,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,482,"        if (isEmpty(str)) {
",0,0,0,2,5,0,4,0,0,4,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,483,"            return str;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,485,"        str = stripStart(str, stripChars);
",2,0,0,1,2,0,6,0,0,9,34,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,486,"        return stripEnd(str, stripChars);
",0,0,0,1,2,1,6,0,0,6,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,515,"        if (str == null || (strLen = str.length()) == 0) {
",4,3,0,3,7,0,4,0,0,12,50,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,516,"            return str;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,518,"        int start = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,519,"        if (stripChars == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,520,"            while (start != strLen && Character.isWhitespace(str.charAt(start))) {
",4,2,0,3,7,0,10,0,0,16,70,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,521,"                start++;
",2,0,0,0,0,0,0,0,0,3,8,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,523,"        } else if (stripChars.isEmpty()) {
",0,0,0,2,6,0,4,0,0,4,34,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,524,"            return str;
",2,0,0,0,0,1,0,0,0,2,11,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,526,"            while (start != strLen && stripChars.indexOf(str.charAt(start)) != INDEX_NOT_FOUND) {
",6,3,0,3,7,0,10,0,0,19,85,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,527,"                start++;
",2,0,0,0,0,0,0,0,0,3,8,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,530,"        return str.substring(start);
",0,0,0,1,2,1,6,0,0,6,28,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,560,"        if (str == null || (end = str.length()) == 0) {
",4,3,0,3,7,0,4,0,0,12,47,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,561,"            return str;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,564,"        if (stripChars == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,565,"            while (end != 0 && Character.isWhitespace(str.charAt(end - 1))) {
",4,3,0,3,7,0,8,0,0,15,65,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,566,"                end--;
",2,0,0,0,0,0,0,0,0,3,6,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,568,"        } else if (stripChars.isEmpty()) {
",0,0,0,2,6,0,4,0,0,4,34,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,569,"            return str;
",2,0,0,0,0,1,0,0,0,2,11,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,571,"            while (end != 0 && stripChars.indexOf(str.charAt(end - 1)) != INDEX_NOT_FOUND) {
",6,4,0,3,7,0,8,0,0,18,80,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,572,"                end--;
",2,0,0,0,0,0,0,0,0,3,6,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,575,"        return str.substring(0, end);
",0,0,0,1,2,1,6,0,0,6,29,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,600,"        return stripAll(strs, null);
",0,0,0,1,2,1,4,0,0,5,28,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,630,"        if (strs == null || (strsLen = strs.length) == 0) {
",8,3,0,2,5,0,0,0,0,12,51,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,631,"            return strs;
",2,0,0,0,0,1,0,0,0,2,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,633,"        final String[] newArr = new String[strsLen];
",2,0,1,2,4,1,0,4,0,9,44,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,634,"        for (int i = 0; i < strsLen; i++) {
",8,1,0,1,3,0,0,0,0,10,35,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,635,"            newArr[i] = strip(strs[i], stripChars);
",0,0,1,3,6,0,4,0,0,13,39,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,637,"        return newArr;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,659,"        if(input == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,660,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,662,"        final Pattern pattern = Pattern.compile(""\\p{InCombiningDiacriticalMarks}+"");//$NON-NLS-1$
",2,0,0,2,4,1,4,2,0,10,90,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,663,"        final String decomposed = Normalizer.normalize(input, Normalizer.Form.NFD);
",8,0,0,1,2,1,6,2,0,17,75,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,665,"        return pattern.matcher(decomposed).replaceAll("""");//$NON-NLS-1$
",0,0,0,2,4,1,8,0,0,9,63,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,692,"        if (cs1 == cs2) {
",4,1,0,1,3,0,0,0,0,5,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,693,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,695,"        if (cs1 == null || cs2 == null) {
",4,3,0,1,3,0,0,0,0,7,33,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,696,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,698,"        if (cs1 instanceof String && cs2 instanceof String) {
",4,1,0,1,3,0,0,4,0,9,53,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,699,"            return cs1.equals(cs2);
",0,0,0,1,2,1,6,0,0,6,23,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,701,"        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
",0,0,0,4,8,1,20,0,0,21,100,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,726,"        if (str1 == null || str2 == null) {
",4,3,0,1,3,0,0,0,0,7,35,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,727,"            return str1 == str2;
",4,1,0,0,0,1,0,0,0,5,20,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,728,"        } else if (str1 == str2) {
",4,1,0,1,4,0,0,0,0,5,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,729,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,730,"        } else if (str1.length() != str2.length()) {
",0,1,0,3,8,0,8,0,0,9,44,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,731,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,733,"            return CharSequenceUtils.regionMatches(str1, true, 0, str2, 0, str1.length());
",0,0,0,2,4,1,12,0,0,13,78,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,760,"        if (isEmpty(seq)) {
",0,0,0,2,5,0,4,0,0,4,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,761,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,1,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,763,"        return CharSequenceUtils.indexOf(seq, searchChar, 0);
",0,0,0,1,2,1,8,0,0,8,53,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,793,"        if (isEmpty(seq)) {
",0,0,0,2,5,0,4,0,0,4,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,794,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,1,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,796,"        return CharSequenceUtils.indexOf(seq, searchChar, startPos);
",0,0,0,1,2,1,10,0,0,10,60,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,824,"        if (seq == null || searchSeq == null) {
",4,3,0,1,3,0,0,0,0,7,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,825,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,1,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,827,"        return CharSequenceUtils.indexOf(seq, searchSeq, 0);
",0,0,0,1,2,1,8,0,0,8,52,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,864,"        if (seq == null || searchSeq == null) {
",4,3,0,1,3,0,0,0,0,7,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,865,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,1,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,867,"        return CharSequenceUtils.indexOf(seq, searchSeq, startPos);
",0,0,0,1,2,1,10,0,0,10,59,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,905,"        return ordinalIndexOf(str, searchStr, ordinal, false);
",0,0,0,1,2,1,8,0,0,9,54,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,923,"        if (str == null || searchStr == null || ordinal <= 0) {
",6,5,0,1,3,0,0,0,0,11,55,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,924,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,1,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,926,"        if (searchStr.length() == 0) {
",0,1,0,2,5,0,4,0,0,5,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,927,"            return lastIndex ? str.length() : 0;
",2,0,0,1,2,1,4,0,0,6,36,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,929,"        int found = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,930,"        int index = lastIndex ? str.length() : INDEX_NOT_FOUND;
",6,0,0,1,2,0,4,0,0,10,55,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,932,"            if (lastIndex) {
",2,0,0,1,3,0,0,0,0,2,16,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,933,"                index = CharSequenceUtils.lastIndexOf(str, searchStr, index - 1);
",4,1,0,1,2,0,8,0,0,14,65,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,935,"                index = CharSequenceUtils.indexOf(str, searchStr, index + 1);
",4,1,0,1,2,0,8,0,0,14,61,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,937,"            if (index < 0) {
",2,1,0,1,3,0,0,0,0,3,16,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,938,"                return index;
",2,0,0,0,0,1,0,0,0,2,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,940,"            found++;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,941,"        } while (found < ordinal);
",4,1,0,1,3,0,0,0,0,5,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,942,"        return index;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,971,"        return indexOfIgnoreCase(str, searchStr, 0);
",0,0,0,1,2,1,6,0,0,6,44,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1007,"        if (str == null || searchStr == null) {
",4,3,0,1,3,0,0,0,0,7,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1008,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,1,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1010,"        if (startPos < 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1011,"            startPos = 0;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1013,"        final int endLimit = str.length() - searchStr.length() + 1;
",2,2,0,2,4,1,8,0,0,13,59,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1014,"        if (startPos > endLimit) {
",4,1,0,1,3,0,0,0,0,5,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1015,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,1,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1017,"        if (searchStr.length() == 0) {
",0,1,0,2,5,0,4,0,0,5,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1018,"            return startPos;
",2,0,0,0,0,1,0,0,0,2,16,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1020,"        for (int i = startPos; i < endLimit; i++) {
",10,1,0,1,3,0,0,0,0,12,43,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1021,"            if (CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, searchStr.length())) {
",0,0,0,3,7,0,14,0,0,15,86,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1022,"                return i;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1025,"        return INDEX_NOT_FOUND;
",2,0,0,0,0,1,0,0,0,2,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1051,"        if (isEmpty(seq)) {
",0,0,0,2,5,0,4,0,0,4,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1052,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,1,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1054,"        return CharSequenceUtils.lastIndexOf(seq, searchChar, seq.length());
",0,0,0,2,4,1,12,0,0,12,68,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1089,"        if (isEmpty(seq)) {
",0,0,0,2,5,0,4,0,0,4,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1090,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,1,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1092,"        return CharSequenceUtils.lastIndexOf(seq, searchChar, startPos);
",0,0,0,1,2,1,10,0,0,10,64,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1119,"        if (seq == null || searchSeq == null) {
",4,3,0,1,3,0,0,0,0,7,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1120,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,1,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1122,"        return CharSequenceUtils.lastIndexOf(seq, searchSeq, seq.length());
",0,0,0,2,4,1,12,0,0,12,67,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1160,"        return ordinalIndexOf(str, searchStr, ordinal, true);
",0,0,0,1,2,1,8,0,0,9,53,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1200,"        if (seq == null || searchSeq == null) {
",4,3,0,1,3,0,0,0,0,7,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1201,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,1,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1203,"        return CharSequenceUtils.lastIndexOf(seq, searchSeq, startPos);
",0,0,0,1,2,1,10,0,0,10,63,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1230,"        if (str == null || searchStr == null) {
",4,3,0,1,3,0,0,0,0,7,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1231,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,1,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1233,"        return lastIndexOfIgnoreCase(str, searchStr, str.length());
",0,0,0,2,4,1,10,0,0,10,59,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1269,"        if (str == null || searchStr == null) {
",4,3,0,1,3,0,0,0,0,7,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1270,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,1,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1272,"        if (startPos > str.length() - searchStr.length()) {
",2,2,0,3,7,0,8,0,0,12,51,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1273,"            startPos = str.length() - searchStr.length();
",2,1,0,2,4,0,8,0,0,12,45,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1275,"        if (startPos < 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1276,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,1,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1278,"        if (searchStr.length() == 0) {
",0,1,0,2,5,0,4,0,0,5,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1279,"            return startPos;
",2,0,0,0,0,1,0,0,0,2,16,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1282,"        for (int i = startPos; i >= 0; i--) {
",8,1,0,1,3,0,0,0,0,10,37,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1283,"            if (CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, searchStr.length())) {
",0,0,0,3,7,0,14,0,0,15,86,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1284,"                return i;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1287,"        return INDEX_NOT_FOUND;
",2,0,0,0,0,1,0,0,0,2,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1313,"        if (isEmpty(seq)) {
",0,0,0,2,5,0,4,0,0,4,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1314,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1316,"        return CharSequenceUtils.indexOf(seq, searchChar, 0) >= 0;
",0,1,0,1,2,1,8,0,0,9,58,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1342,"        if (seq == null || searchSeq == null) {
",4,3,0,1,3,0,0,0,0,7,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1343,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1345,"        return CharSequenceUtils.indexOf(seq, searchSeq, 0) >= 0;
",0,1,0,1,2,1,8,0,0,9,57,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1373,"        if (str == null || searchStr == null) {
",4,3,0,1,3,0,0,0,0,7,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1374,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1376,"        final int len = searchStr.length();
",2,0,0,1,2,1,4,0,0,7,35,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1377,"        final int max = str.length() - len;
",4,1,0,1,2,1,4,0,0,10,35,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1378,"        for (int i = 0; i <= max; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1379,"            if (CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, len)) {
",0,0,0,2,5,0,12,0,0,13,71,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1380,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1383,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1396,"        if (isEmpty(seq)) {
",0,0,0,2,5,0,4,0,0,4,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1397,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1399,"        final int strLen = seq.length();
",2,0,0,1,2,1,4,0,0,7,32,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1400,"        for (int i = 0; i < strLen; i++) {
",8,1,0,1,3,0,0,0,0,10,34,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1401,"            if (Character.isWhitespace(seq.charAt(i))) {
",0,0,0,3,7,0,10,0,0,10,44,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1402,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1405,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1434,"        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
",0,1,0,3,7,0,10,0,0,11,53,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1435,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,1,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1437,"        final int csLen = cs.length();
",2,0,0,1,2,1,4,0,0,7,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1438,"        final int csLast = csLen - 1;
",4,1,0,0,0,1,0,0,0,6,29,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1439,"        final int searchLen = searchChars.length;
",6,0,0,0,0,1,0,0,0,7,41,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1440,"        final int searchLast = searchLen - 1;
",4,1,0,0,0,1,0,0,0,6,37,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1441,"        for (int i = 0; i < csLen; i++) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1442,"            final char ch = cs.charAt(i);
",2,0,0,1,2,1,6,0,0,9,29,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1443,"            for (int j = 0; j < searchLen; j++) {
",8,1,0,1,3,0,0,0,0,10,37,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1444,"                if (searchChars[j] == ch) {
",2,1,1,2,5,0,0,0,0,7,27,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1445,"                    if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {
",8,4,0,2,5,0,6,0,0,18,68,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1447,"                        if (searchChars[j + 1] == cs.charAt(i + 1)) {
",4,3,1,3,7,0,4,0,0,13,45,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1448,"                            return i;
",2,0,0,0,0,1,0,0,0,2,9,14,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1451,"                        return i;
",2,0,0,0,0,1,0,0,0,2,9,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1456,"        return INDEX_NOT_FOUND;
",2,0,0,0,0,1,0,0,0,2,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1483,"        if (isEmpty(cs) || isEmpty(searchChars)) {
",0,1,0,3,7,0,8,0,0,9,42,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1484,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,1,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1486,"        return indexOfAny(cs, searchChars.toCharArray());
",0,0,0,2,4,1,8,0,0,8,49,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1516,"        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
",0,1,0,3,7,0,10,0,0,11,53,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1517,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1519,"        final int csLength = cs.length();
",2,0,0,1,2,1,4,0,0,7,33,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1520,"        final int searchLength = searchChars.length;
",6,0,0,0,0,1,0,0,0,7,44,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1521,"        final int csLast = csLength - 1;
",4,1,0,0,0,1,0,0,0,6,32,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1522,"        final int searchLast = searchLength - 1;
",4,1,0,0,0,1,0,0,0,6,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1523,"        for (int i = 0; i < csLength; i++) {
",8,1,0,1,3,0,0,0,0,10,36,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1524,"            final char ch = cs.charAt(i);
",2,0,0,1,2,1,6,0,0,9,29,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1525,"            for (int j = 0; j < searchLength; j++) {
",8,1,0,1,3,0,0,0,0,10,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1526,"                if (searchChars[j] == ch) {
",2,1,1,2,5,0,0,0,0,7,27,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1527,"                    if (Character.isHighSurrogate(ch)) {
",0,0,0,2,5,0,6,0,0,6,36,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1528,"                        if (j == searchLast) {
",4,1,0,1,3,0,0,0,0,5,22,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1530,"                            return true;
",0,0,0,0,0,1,0,0,0,1,12,14,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1532,"                        if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
",8,5,1,3,7,0,4,0,0,19,59,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1533,"                            return true;
",0,0,0,0,0,1,0,0,0,1,12,14,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1537,"                        return true;
",0,0,0,0,0,1,0,0,0,1,12,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1542,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1574,"        if (searchChars == null) {
",2,1,0,1,3,0,0,0,0,3,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1575,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1577,"        return containsAny(cs, CharSequenceUtils.toCharArray(searchChars));
",0,0,0,2,4,1,10,0,0,10,67,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1607,"        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
",0,1,0,3,7,0,10,0,0,11,53,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1608,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,1,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1610,"        final int csLen = cs.length();
",2,0,0,1,2,1,4,0,0,7,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1611,"        final int csLast = csLen - 1;
",4,1,0,0,0,1,0,0,0,6,29,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1612,"        final int searchLen = searchChars.length;
",6,0,0,0,0,1,0,0,0,7,41,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1613,"        final int searchLast = searchLen - 1;
",4,1,0,0,0,1,0,0,0,6,37,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1615,"        for (int i = 0; i < csLen; i++) {
",8,1,0,1,3,0,0,0,0,10,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1616,"            final char ch = cs.charAt(i);
",2,0,0,1,2,1,6,0,0,9,29,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1617,"            for (int j = 0; j < searchLen; j++) {
",8,1,0,1,3,0,0,0,0,10,37,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1618,"                if (searchChars[j] == ch) {
",2,1,1,2,5,0,0,0,0,7,27,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1619,"                    if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {
",8,4,0,2,5,0,6,0,0,18,68,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1620,"                        if (searchChars[j + 1] == cs.charAt(i + 1)) {
",4,3,1,3,7,0,4,0,0,13,45,13,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1621,"                            continue outer;
",2,0,0,0,0,0,0,0,0,2,15,15,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1628,"            return i;
",2,0,0,0,0,1,0,0,0,2,9,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1630,"        return INDEX_NOT_FOUND;
",2,0,0,0,0,1,0,0,0,2,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1657,"        if (isEmpty(seq) || isEmpty(searchChars)) {
",0,1,0,3,7,0,8,0,0,9,43,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1658,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,1,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1660,"        final int strLen = seq.length();
",2,0,0,1,2,1,4,0,0,7,32,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1661,"        for (int i = 0; i < strLen; i++) {
",8,1,0,1,3,0,0,0,0,10,34,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1662,"            final char ch = seq.charAt(i);
",2,0,0,1,2,1,6,0,0,9,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1663,"            final boolean chFound = CharSequenceUtils.indexOf(searchChars, ch, 0) >= 0;
",2,1,0,1,2,1,8,0,0,12,75,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1664,"            if (i + 1 < strLen && Character.isHighSurrogate(ch)) {
",4,3,0,2,5,0,6,0,0,13,54,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1665,"                final char ch2 = seq.charAt(i + 1);
",4,1,0,1,2,1,4,0,0,10,35,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1666,"                if (chFound && CharSequenceUtils.indexOf(searchChars, ch2, 0) < 0) {
",2,2,0,2,5,0,8,0,0,12,68,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1667,"                    return i;
",2,0,0,0,0,1,0,0,0,2,9,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1669,"            } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1670,"                if (!chFound) {
",2,0,0,1,3,0,0,0,0,3,15,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1671,"                    return i;
",2,0,0,0,0,1,0,0,0,2,9,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1675,"        return INDEX_NOT_FOUND;
",2,0,0,0,0,1,0,0,0,2,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1704,"        if (valid == null || cs == null) {
",4,3,0,1,3,0,0,0,0,7,34,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1705,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1707,"        if (cs.length() == 0) {
",0,1,0,2,5,0,4,0,0,5,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1708,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1710,"        if (valid.length == 0) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1711,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1713,"        return indexOfAnyBut(cs, valid) == INDEX_NOT_FOUND;
",2,1,0,1,2,1,6,0,0,9,51,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1740,"        if (cs == null || validChars == null) {
",4,3,0,1,3,0,0,0,0,7,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1741,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1743,"        return containsOnly(cs, validChars.toCharArray());
",0,0,0,2,4,1,8,0,0,8,50,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1772,"        if (cs == null || searchChars == null) {
",4,3,0,1,3,0,0,0,0,7,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1773,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1775,"        final int csLen = cs.length();
",2,0,0,1,2,1,4,0,0,7,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1776,"        final int csLast = csLen - 1;
",4,1,0,0,0,1,0,0,0,6,29,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1777,"        final int searchLen = searchChars.length;
",6,0,0,0,0,1,0,0,0,7,41,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1778,"        final int searchLast = searchLen - 1;
",4,1,0,0,0,1,0,0,0,6,37,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1779,"        for (int i = 0; i < csLen; i++) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1780,"            final char ch = cs.charAt(i);
",2,0,0,1,2,1,6,0,0,9,29,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1781,"            for (int j = 0; j < searchLen; j++) {
",8,1,0,1,3,0,0,0,0,10,37,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1782,"                if (searchChars[j] == ch) {
",2,1,1,2,5,0,0,0,0,7,27,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1783,"                    if (Character.isHighSurrogate(ch)) {
",0,0,0,2,5,0,6,0,0,6,36,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1784,"                        if (j == searchLast) {
",4,1,0,1,3,0,0,0,0,5,22,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1786,"                            return false;
",0,0,0,0,0,1,0,0,0,1,13,14,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1788,"                        if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
",8,5,1,3,7,0,4,0,0,19,59,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1789,"                            return false;
",0,0,0,0,0,1,0,0,0,1,13,14,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1793,"                        return false;
",0,0,0,0,0,1,0,0,0,1,13,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1798,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1825,"        if (cs == null || invalidChars == null) {
",4,3,0,1,3,0,0,0,0,7,41,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1826,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1828,"        return containsNone(cs, invalidChars.toCharArray());
",0,0,0,2,4,1,8,0,0,8,52,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1861,"        if (str == null || searchStrs == null) {
",4,3,0,1,3,0,0,0,0,7,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1862,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,1,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1864,"        final int sz = searchStrs.length;
",6,0,0,0,0,1,0,0,0,7,33,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1867,"        int ret = Integer.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,6,28,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1869,"        int tmp = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1870,"        for (int i = 0; i < sz; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1871,"            final CharSequence search = searchStrs[i];
",2,0,1,1,2,1,0,2,0,9,42,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1872,"            if (search == null) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1873,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1875,"            tmp = CharSequenceUtils.indexOf(str, search, 0);
",2,0,0,1,2,0,8,0,0,11,48,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1876,"            if (tmp == INDEX_NOT_FOUND) {
",4,1,0,1,3,0,0,0,0,5,29,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1877,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1880,"            if (tmp < ret) {
",4,1,0,1,3,0,0,0,0,5,16,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1881,"                ret = tmp;
",4,0,0,0,0,0,0,0,0,5,10,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1885,"        return ret == Integer.MAX_VALUE ? INDEX_NOT_FOUND : ret;
",10,1,0,0,0,1,0,0,0,11,56,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1915,"        if (str == null || searchStrs == null) {
",4,3,0,1,3,0,0,0,0,7,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1916,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,1,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1918,"        final int sz = searchStrs.length;
",6,0,0,0,0,1,0,0,0,7,33,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1919,"        int ret = INDEX_NOT_FOUND;
",4,0,0,0,0,0,0,0,0,4,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1920,"        int tmp = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1921,"        for (int i = 0; i < sz; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1922,"            final CharSequence search = searchStrs[i];
",2,0,1,1,2,1,0,2,0,9,42,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1923,"            if (search == null) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1924,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1926,"            tmp = CharSequenceUtils.lastIndexOf(str, search, str.length());
",2,0,0,2,4,0,12,0,0,15,63,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1927,"            if (tmp > ret) {
",4,1,0,1,3,0,0,0,0,5,16,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1928,"                ret = tmp;
",4,0,0,0,0,0,0,0,0,5,10,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1931,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1961,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1962,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1966,"        if (start < 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1967,"            start = str.length() + start; // remember start is negative
",4,1,0,1,2,0,4,0,0,10,59,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1970,"        if (start < 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1971,"            start = 0;
",2,0,0,0,0,0,0,0,0,3,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1973,"        if (start > str.length()) {
",2,1,0,2,5,0,4,0,0,7,27,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1974,"            return EMPTY;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,1977,"        return str.substring(start);
",0,0,0,1,2,1,6,0,0,6,28,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2016,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2017,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2021,"        if (end < 0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2022,"            end = str.length() + end; // remember end is negative
",4,1,0,1,2,0,4,0,0,10,53,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2024,"        if (start < 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2025,"            start = str.length() + start; // remember start is negative
",4,1,0,1,2,0,4,0,0,10,59,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2029,"        if (end > str.length()) {
",2,1,0,2,5,0,4,0,0,7,25,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2030,"            end = str.length();
",2,0,0,1,2,0,4,0,0,7,19,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2034,"        if (start > end) {
",4,1,0,1,3,0,0,0,0,5,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2035,"            return EMPTY;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2038,"        if (start < 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2039,"            start = 0;
",2,0,0,0,0,0,0,0,0,3,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2041,"        if (end < 0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2042,"            end = 0;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2045,"        return str.substring(start, end);
",0,0,0,1,2,1,8,0,0,8,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2071,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2072,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2074,"        if (len < 0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2075,"            return EMPTY;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2077,"        if (str.length() <= len) {
",2,1,0,2,5,0,4,0,0,7,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2078,"            return str;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2080,"        return str.substring(0, len);
",0,0,0,1,2,1,6,0,0,6,29,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2104,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2105,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2107,"        if (len < 0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2108,"            return EMPTY;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2110,"        if (str.length() <= len) {
",2,1,0,2,5,0,4,0,0,7,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2111,"            return str;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2113,"        return str.substring(str.length() - len);
",2,1,0,2,4,1,8,0,0,11,41,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2142,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2143,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2145,"        if (len < 0 || pos > str.length()) {
",4,3,0,2,5,0,4,0,0,11,36,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2146,"            return EMPTY;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2148,"        if (pos < 0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2149,"            pos = 0;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2151,"        if (str.length() <= pos + len) {
",4,2,0,2,5,0,4,0,0,10,32,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2152,"            return str.substring(pos);
",0,0,0,1,2,1,6,0,0,6,26,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2154,"        return str.substring(pos, pos + len);
",4,1,0,1,2,1,6,0,0,11,37,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2187,"        if (isEmpty(str) || separator == null) {
",2,2,0,2,5,0,4,0,0,9,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2188,"            return str;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2190,"        if (separator.isEmpty()) {
",0,0,0,2,5,0,4,0,0,4,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2191,"            return EMPTY;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2193,"        final int pos = str.indexOf(separator);
",2,0,0,1,2,1,6,0,0,9,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2194,"        if (pos == INDEX_NOT_FOUND) {
",4,1,0,1,3,0,0,0,0,5,29,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2195,"            return str;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2197,"        return str.substring(0, pos);
",0,0,0,1,2,1,6,0,0,6,29,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2229,"        if (isEmpty(str)) {
",0,0,0,2,5,0,4,0,0,4,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2230,"            return str;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2232,"        if (separator == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2233,"            return EMPTY;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2235,"        final int pos = str.indexOf(separator);
",2,0,0,1,2,1,6,0,0,9,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2236,"        if (pos == INDEX_NOT_FOUND) {
",4,1,0,1,3,0,0,0,0,5,29,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2237,"            return EMPTY;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2239,"        return str.substring(pos + separator.length());
",2,1,0,2,4,1,8,0,0,11,47,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2270,"        if (isEmpty(str) || isEmpty(separator)) {
",0,1,0,3,7,0,8,0,0,9,41,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2271,"            return str;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2273,"        final int pos = str.lastIndexOf(separator);
",2,0,0,1,2,1,6,0,0,9,43,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2274,"        if (pos == INDEX_NOT_FOUND) {
",4,1,0,1,3,0,0,0,0,5,29,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2275,"            return str;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2277,"        return str.substring(0, pos);
",0,0,0,1,2,1,6,0,0,6,29,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2310,"        if (isEmpty(str)) {
",0,0,0,2,5,0,4,0,0,4,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2311,"            return str;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2313,"        if (isEmpty(separator)) {
",0,0,0,2,5,0,4,0,0,4,25,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2314,"            return EMPTY;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2316,"        final int pos = str.lastIndexOf(separator);
",2,0,0,1,2,1,6,0,0,9,43,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2317,"        if (pos == INDEX_NOT_FOUND || pos == str.length() - separator.length()) {
",6,4,0,3,7,0,8,0,0,18,73,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2318,"            return EMPTY;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2320,"        return str.substring(pos + separator.length());
",2,1,0,2,4,1,8,0,0,11,47,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2347,"        return substringBetween(str, tag, tag);
",0,0,0,1,2,1,8,0,0,8,39,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2378,"        if (str == null || open == null || close == null) {
",6,5,0,1,3,0,0,0,0,11,51,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2379,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2381,"        final int start = str.indexOf(open);
",2,0,0,1,2,1,6,0,0,9,36,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2382,"        if (start != INDEX_NOT_FOUND) {
",4,1,0,1,3,0,0,0,0,5,31,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2383,"            final int end = str.indexOf(close, start + open.length());
",4,1,0,2,4,1,10,0,0,16,58,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2384,"            if (end != INDEX_NOT_FOUND) {
",4,1,0,1,3,0,0,0,0,5,29,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2385,"                return str.substring(start + open.length(), end);
",2,1,0,2,4,1,10,0,0,13,49,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2388,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2414,"        if (str == null || isEmpty(open) || isEmpty(close)) {
",2,3,0,3,7,0,8,0,0,15,53,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2415,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2417,"        final int strLen = str.length();
",2,0,0,1,2,1,4,0,0,7,32,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2418,"        if (strLen == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2419,"            return ArrayUtils.EMPTY_STRING_ARRAY;
",4,0,0,0,0,1,0,0,0,4,37,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2421,"        final int closeLen = close.length();
",2,0,0,1,2,1,4,0,0,7,36,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2422,"        final int openLen = open.length();
",2,0,0,1,2,1,4,0,0,7,34,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2423,"        final List<String> list = new ArrayList<String>();
",2,0,0,1,2,1,0,8,0,11,50,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2424,"        int pos = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2425,"        while (pos < strLen - closeLen) {
",6,2,0,1,3,0,0,0,0,8,33,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2426,"            int start = str.indexOf(open, pos);
",2,0,0,1,2,0,8,0,0,10,35,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2427,"            if (start < 0) {
",2,1,0,1,3,0,0,0,0,3,16,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2428,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2430,"            start += openLen;
",4,0,0,0,0,0,0,0,0,5,17,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2431,"            final int end = str.indexOf(close, start);
",2,0,0,1,2,1,8,0,0,11,42,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2432,"            if (end < 0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2433,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2435,"            list.add(str.substring(start, end));
",0,0,0,2,4,0,12,0,0,12,36,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2436,"            pos = end + closeLen;
",6,1,0,0,0,0,0,0,0,8,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2437,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2438,"        if (list.isEmpty()) {
",0,0,0,2,5,0,4,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2439,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2441,"        return list.toArray(new String [list.size()]);
",0,0,0,3,6,1,8,2,0,10,46,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2472,"        return split(str, null, -1);
",0,0,0,1,2,1,4,0,0,6,28,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2500,"        return splitWorker(str, separatorChar, false);
",0,0,0,1,2,1,6,0,0,7,46,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2529,"        return splitWorker(str, separatorChars, -1, false);
",0,0,0,1,2,1,6,0,0,8,51,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2563,"        return splitWorker(str, separatorChars, max, false);
",0,0,0,1,2,1,8,0,0,9,52,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2590,"        return splitByWholeSeparatorWorker( str, separator, -1, false ) ;
",0,0,0,1,2,1,6,0,0,8,65,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2621,"        return splitByWholeSeparatorWorker(str, separator, max, false);
",0,0,0,1,2,1,8,0,0,9,63,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2650,"        return splitByWholeSeparatorWorker(str, separator, -1, true);
",0,0,0,1,2,1,6,0,0,8,61,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2683,"        return splitByWholeSeparatorWorker(str, separator, max, true);
",0,0,0,1,2,1,8,0,0,9,62,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2702,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2703,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2706,"        final int len = str.length();
",2,0,0,1,2,1,4,0,0,7,29,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2708,"        if (len == 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2709,"            return ArrayUtils.EMPTY_STRING_ARRAY;
",4,0,0,0,0,1,0,0,0,4,37,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2712,"        if (separator == null || EMPTY.equals(separator)) {
",2,2,0,2,5,0,6,0,0,10,51,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2714,"            return splitWorker(str, null, max, preserveAllTokens);
",0,0,0,1,2,1,8,0,0,9,54,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2717,"        final int separatorLength = separator.length();
",2,0,0,1,2,1,4,0,0,7,47,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2719,"        final ArrayList<String> substrings = new ArrayList<String>();
",2,0,0,1,2,1,0,8,0,11,61,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2720,"        int numberOfSubstrings = 0;
",2,0,0,0,0,0,0,0,0,2,27,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2721,"        int beg = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2722,"        int end = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2723,"        while (end < len) {
",4,1,0,1,3,0,0,0,0,5,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2724,"            end = str.indexOf(separator, beg);
",2,0,0,1,2,0,8,0,0,11,34,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2726,"            if (end > -1) {
",2,1,0,1,3,0,0,0,0,4,15,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2727,"                if (end > beg) {
",4,1,0,1,3,0,0,0,0,5,16,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2728,"                    numberOfSubstrings += 1;
",2,0,0,0,0,0,0,0,0,3,24,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2730,"                    if (numberOfSubstrings == max) {
",4,1,0,1,3,0,0,0,0,5,32,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2731,"                        end = len;
",4,0,0,0,0,0,0,0,0,5,10,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2732,"                        substrings.add(str.substring(beg));
",0,0,0,2,4,0,10,0,0,10,35,13,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2736,"                        substrings.add(str.substring(beg, end));
",0,0,0,2,4,0,12,0,0,12,40,13,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2741,"                        beg = end + separatorLength;
",6,1,0,0,0,0,0,0,0,8,28,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2745,"                    if (preserveAllTokens) {
",2,0,0,1,3,0,0,0,0,2,24,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2746,"                        numberOfSubstrings += 1;
",2,0,0,0,0,0,0,0,0,3,24,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2747,"                        if (numberOfSubstrings == max) {
",4,1,0,1,3,0,0,0,0,5,32,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2748,"                            end = len;
",4,0,0,0,0,0,0,0,0,5,10,14,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2749,"                            substrings.add(str.substring(beg));
",0,0,0,2,4,0,10,0,0,10,35,15,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2751,"                            substrings.add(EMPTY);
",0,0,0,1,2,0,6,0,0,6,22,15,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2754,"                    beg = end + separatorLength;
",6,1,0,0,0,0,0,0,0,8,28,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2758,"                substrings.add(str.substring(beg));
",0,0,0,2,4,0,10,0,0,10,35,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2759,"                end = len;
",4,0,0,0,0,0,0,0,0,5,10,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2763,"        return substrings.toArray(new String[substrings.size()]);
",0,0,0,3,6,1,8,2,0,10,57,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2792,"        return splitWorker(str, null, -1, true);
",0,0,0,1,2,1,4,0,0,7,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2828,"        return splitWorker(str, separatorChar, true);
",0,0,0,1,2,1,6,0,0,7,45,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2846,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2847,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2849,"        final int len = str.length();
",2,0,0,1,2,1,4,0,0,7,29,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2850,"        if (len == 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2851,"            return ArrayUtils.EMPTY_STRING_ARRAY;
",4,0,0,0,0,1,0,0,0,4,37,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2853,"        final List<String> list = new ArrayList<String>();
",2,0,0,1,2,1,0,8,0,11,50,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2854,"        int i = 0, start = 0;
",4,0,0,0,0,0,0,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2855,"        boolean match = false;
",2,0,0,0,0,0,0,0,0,3,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2856,"        boolean lastMatch = false;
",2,0,0,0,0,0,0,0,0,3,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2857,"        while (i < len) {
",4,1,0,1,3,0,0,0,0,5,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2858,"            if (str.charAt(i) == separatorChar) {
",2,1,0,2,5,0,6,0,0,9,37,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2859,"                if (match || preserveAllTokens) {
",4,1,0,1,3,0,0,0,0,5,33,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2860,"                    list.add(str.substring(start, i));
",0,0,0,2,4,0,12,0,0,12,34,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2861,"                    match = false;
",2,0,0,0,0,0,0,0,0,4,14,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2862,"                    lastMatch = true;
",2,0,0,0,0,0,0,0,0,4,17,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2864,"                start = ++i;
",4,0,0,0,0,0,0,0,0,6,12,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2865,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2867,"            lastMatch = false;
",2,0,0,0,0,0,0,0,0,4,18,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2868,"            match = true;
",2,0,0,0,0,0,0,0,0,4,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2869,"            i++;
",2,0,0,0,0,0,0,0,0,3,4,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2871,"        if (match || preserveAllTokens && lastMatch) {
",6,2,0,1,3,0,0,0,0,8,46,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2872,"            list.add(str.substring(start, i));
",0,0,0,2,4,0,12,0,0,12,34,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2874,"        return list.toArray(new String[list.size()]);
",0,0,0,3,6,1,8,2,0,10,45,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2911,"        return splitWorker(str, separatorChars, -1, true);
",0,0,0,1,2,1,6,0,0,8,50,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2951,"        return splitWorker(str, separatorChars, max, true);
",0,0,0,1,2,1,8,0,0,9,51,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2973,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2974,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2976,"        final int len = str.length();
",2,0,0,1,2,1,4,0,0,7,29,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2977,"        if (len == 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2978,"            return ArrayUtils.EMPTY_STRING_ARRAY;
",4,0,0,0,0,1,0,0,0,4,37,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2980,"        final List<String> list = new ArrayList<String>();
",2,0,0,1,2,1,0,8,0,11,50,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2981,"        int sizePlus1 = 1;
",2,0,0,0,0,0,0,0,0,2,18,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2982,"        int i = 0, start = 0;
",4,0,0,0,0,0,0,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2983,"        boolean match = false;
",2,0,0,0,0,0,0,0,0,3,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2984,"        boolean lastMatch = false;
",2,0,0,0,0,0,0,0,0,3,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2985,"        if (separatorChars == null) {
",2,1,0,1,3,0,0,0,0,3,29,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2987,"            while (i < len) {
",4,1,0,1,3,0,0,0,0,5,17,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2988,"                if (Character.isWhitespace(str.charAt(i))) {
",0,0,0,3,7,0,10,0,0,10,44,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2989,"                    if (match || preserveAllTokens) {
",4,1,0,1,3,0,0,0,0,5,33,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2990,"                        lastMatch = true;
",2,0,0,0,0,0,0,0,0,4,17,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2991,"                        if (sizePlus1++ == max) {
",4,1,0,1,3,0,0,0,0,6,25,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2992,"                            i = len;
",4,0,0,0,0,0,0,0,0,5,8,14,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2993,"                            lastMatch = false;
",2,0,0,0,0,0,0,0,0,4,18,14,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2995,"                        list.add(str.substring(start, i));
",0,0,0,2,4,0,12,0,0,12,34,13,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2996,"                        match = false;
",2,0,0,0,0,0,0,0,0,4,14,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2998,"                    start = ++i;
",4,0,0,0,0,0,0,0,0,6,12,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,2999,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3001,"                lastMatch = false;
",2,0,0,0,0,0,0,0,0,4,18,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3002,"                match = true;
",2,0,0,0,0,0,0,0,0,4,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3003,"                i++;
",2,0,0,0,0,0,0,0,0,3,4,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3005,"        } else if (separatorChars.length() == 1) {
",0,1,0,2,6,0,4,0,0,5,42,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3007,"            final char sep = separatorChars.charAt(0);
",2,0,0,1,2,1,4,0,0,7,42,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3008,"            while (i < len) {
",4,1,0,1,3,0,0,0,0,5,17,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3009,"                if (str.charAt(i) == sep) {
",2,1,0,2,5,0,6,0,0,9,27,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3010,"                    if (match || preserveAllTokens) {
",4,1,0,1,3,0,0,0,0,5,33,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3011,"                        lastMatch = true;
",2,0,0,0,0,0,0,0,0,4,17,13,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3012,"                        if (sizePlus1++ == max) {
",4,1,0,1,3,0,0,0,0,6,25,13,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3013,"                            i = len;
",4,0,0,0,0,0,0,0,0,5,8,15,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3014,"                            lastMatch = false;
",2,0,0,0,0,0,0,0,0,4,18,15,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3016,"                        list.add(str.substring(start, i));
",0,0,0,2,4,0,12,0,0,12,34,14,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3017,"                        match = false;
",2,0,0,0,0,0,0,0,0,4,14,13,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3019,"                    start = ++i;
",4,0,0,0,0,0,0,0,0,6,12,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3020,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3022,"                lastMatch = false;
",2,0,0,0,0,0,0,0,0,4,18,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3023,"                match = true;
",2,0,0,0,0,0,0,0,0,4,13,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3024,"                i++;
",2,0,0,0,0,0,0,0,0,3,4,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3026,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3028,"            while (i < len) {
",4,1,0,1,3,0,0,0,0,5,17,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3029,"                if (separatorChars.indexOf(str.charAt(i)) >= 0) {
",0,1,0,3,7,0,10,0,0,11,49,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3030,"                    if (match || preserveAllTokens) {
",4,1,0,1,3,0,0,0,0,5,33,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3031,"                        lastMatch = true;
",2,0,0,0,0,0,0,0,0,4,17,13,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3032,"                        if (sizePlus1++ == max) {
",4,1,0,1,3,0,0,0,0,6,25,13,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3033,"                            i = len;
",4,0,0,0,0,0,0,0,0,5,8,15,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3034,"                            lastMatch = false;
",2,0,0,0,0,0,0,0,0,4,18,15,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3036,"                        list.add(str.substring(start, i));
",0,0,0,2,4,0,12,0,0,12,34,14,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3037,"                        match = false;
",2,0,0,0,0,0,0,0,0,4,14,13,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3039,"                    start = ++i;
",4,0,0,0,0,0,0,0,0,6,12,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3040,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3042,"                lastMatch = false;
",2,0,0,0,0,0,0,0,0,4,18,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3043,"                match = true;
",2,0,0,0,0,0,0,0,0,4,13,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3044,"                i++;
",2,0,0,0,0,0,0,0,0,3,4,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3047,"        if (match || preserveAllTokens && lastMatch) {
",6,2,0,1,3,0,0,0,0,8,46,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3048,"            list.add(str.substring(start, i));
",0,0,0,2,4,0,12,0,0,12,34,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3050,"        return list.toArray(new String[list.size()]);
",0,0,0,3,6,1,8,2,0,10,45,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3073,"        return splitByCharacterType(str, false);
",0,0,0,1,2,1,4,0,0,5,40,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3101,"        return splitByCharacterType(str, true);
",0,0,0,1,2,1,4,0,0,5,39,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3119,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3120,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3122,"        if (str.isEmpty()) {
",0,0,0,2,5,0,4,0,0,4,20,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3123,"            return ArrayUtils.EMPTY_STRING_ARRAY;
",4,0,0,0,0,1,0,0,0,4,37,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3125,"        final char[] c = str.toCharArray();
",2,0,0,2,4,1,4,0,0,7,35,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3126,"        final List<String> list = new ArrayList<String>();
",2,0,0,1,2,1,0,8,0,11,50,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3127,"        int tokenStart = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3128,"        int currentType = Character.getType(c[tokenStart]);
",2,0,1,2,4,0,4,0,0,10,51,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3129,"        for (int pos = tokenStart + 1; pos < c.length; pos++) {
",12,2,0,1,3,0,0,0,0,15,55,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3130,"            final int type = Character.getType(c[pos]);
",2,0,1,2,4,1,4,0,0,11,43,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3131,"            if (type == currentType) {
",4,1,0,1,3,0,0,0,0,5,26,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3132,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3134,"            if (camelCase && type == Character.LOWERCASE_LETTER && currentType == Character.UPPERCASE_LETTER) {
",14,4,0,1,3,0,0,0,0,18,99,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3135,"                final int newTokenStart = pos - 1;
",4,1,0,0,0,1,0,0,0,6,34,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3136,"                if (newTokenStart != tokenStart) {
",4,1,0,1,3,0,0,0,0,5,34,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3137,"                    list.add(new String(c, tokenStart, newTokenStart - tokenStart));
",8,1,0,2,4,0,4,2,0,15,64,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3138,"                    tokenStart = newTokenStart;
",4,0,0,0,0,0,0,0,0,5,27,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3140,"            } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3141,"                list.add(new String(c, tokenStart, pos - tokenStart));
",8,1,0,2,4,0,4,2,0,15,54,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3142,"                tokenStart = pos;
",4,0,0,0,0,0,0,0,0,5,17,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3144,"            currentType = type;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3146,"        list.add(new String(c, tokenStart, c.length - tokenStart));
",10,1,0,2,4,0,4,2,0,17,59,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3147,"        return list.toArray(new String[list.size()]);
",0,0,0,3,6,1,8,2,0,10,45,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3175,"        return join(elements, null);
",0,0,0,1,2,1,4,0,0,5,28,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3201,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3202,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3204,"        return join(array, separator, 0, array.length);
",4,0,0,1,2,1,6,0,0,10,47,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3233,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3234,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3236,"        return join(array, separator, 0, array.length);
",4,0,0,1,2,1,6,0,0,10,47,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3265,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3266,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3268,"        return join(array, separator, 0, array.length);
",4,0,0,1,2,1,6,0,0,10,47,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3297,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3298,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3300,"        return join(array, separator, 0, array.length);
",4,0,0,1,2,1,6,0,0,10,47,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3329,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3330,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3332,"        return join(array, separator, 0, array.length);
",4,0,0,1,2,1,6,0,0,10,47,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3361,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3362,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3364,"        return join(array, separator, 0, array.length);
",4,0,0,1,2,1,6,0,0,10,47,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3393,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3394,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3396,"        return join(array, separator, 0, array.length);
",4,0,0,1,2,1,6,0,0,10,47,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3425,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3426,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3428,"        return join(array, separator, 0, array.length);
",4,0,0,1,2,1,6,0,0,10,47,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3459,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3460,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3462,"        final int noOfItems = endIndex - startIndex;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3463,"        if (noOfItems <= 0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3464,"            return EMPTY;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3466,"        final StringBuilder buf = new StringBuilder(noOfItems * 16);
",4,1,0,1,2,1,0,4,0,10,60,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3467,"        for (int i = startIndex; i < endIndex; i++) {
",10,1,0,1,3,0,0,0,0,12,45,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3468,"            if (i > startIndex) {
",4,1,0,1,3,0,0,0,0,5,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3469,"                buf.append(separator);
",0,0,0,1,2,0,6,0,0,6,22,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3471,"            if (array[i] != null) {
",0,1,1,2,5,0,0,0,0,5,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3472,"                buf.append(array[i]);
",0,0,1,2,4,0,4,0,0,8,21,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3475,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3510,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3511,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3513,"        final int noOfItems = endIndex - startIndex;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3514,"        if (noOfItems <= 0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3515,"            return EMPTY;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3517,"        final StringBuilder buf = new StringBuilder(noOfItems * 16);
",4,1,0,1,2,1,0,4,0,10,60,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3518,"        for (int i = startIndex; i < endIndex; i++) {
",10,1,0,1,3,0,0,0,0,12,45,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3519,"            if (i > startIndex) {
",4,1,0,1,3,0,0,0,0,5,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3520,"                buf.append(separator);
",0,0,0,1,2,0,6,0,0,6,22,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3522,"            buf.append(array[i]);
",0,0,1,2,4,0,4,0,0,8,21,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3524,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3559,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3560,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3562,"        final int noOfItems = endIndex - startIndex;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3563,"        if (noOfItems <= 0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3564,"            return EMPTY;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3566,"        final StringBuilder buf = new StringBuilder(noOfItems * 16);
",4,1,0,1,2,1,0,4,0,10,60,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3567,"        for (int i = startIndex; i < endIndex; i++) {
",10,1,0,1,3,0,0,0,0,12,45,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3568,"            if (i > startIndex) {
",4,1,0,1,3,0,0,0,0,5,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3569,"                buf.append(separator);
",0,0,0,1,2,0,6,0,0,6,22,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3571,"            buf.append(array[i]);
",0,0,1,2,4,0,4,0,0,8,21,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3573,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3608,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3609,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3611,"        final int noOfItems = endIndex - startIndex;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3612,"        if (noOfItems <= 0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3613,"            return EMPTY;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3615,"        final StringBuilder buf = new StringBuilder(noOfItems * 16);
",4,1,0,1,2,1,0,4,0,10,60,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3616,"        for (int i = startIndex; i < endIndex; i++) {
",10,1,0,1,3,0,0,0,0,12,45,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3617,"            if (i > startIndex) {
",4,1,0,1,3,0,0,0,0,5,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3618,"                buf.append(separator);
",0,0,0,1,2,0,6,0,0,6,22,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3620,"            buf.append(array[i]);
",0,0,1,2,4,0,4,0,0,8,21,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3622,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3657,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3658,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3660,"        final int noOfItems = endIndex - startIndex;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3661,"        if (noOfItems <= 0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3662,"            return EMPTY;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3664,"        final StringBuilder buf = new StringBuilder(noOfItems * 16);
",4,1,0,1,2,1,0,4,0,10,60,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3665,"        for (int i = startIndex; i < endIndex; i++) {
",10,1,0,1,3,0,0,0,0,12,45,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3666,"            if (i > startIndex) {
",4,1,0,1,3,0,0,0,0,5,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3667,"                buf.append(separator);
",0,0,0,1,2,0,6,0,0,6,22,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3669,"            buf.append(array[i]);
",0,0,1,2,4,0,4,0,0,8,21,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3671,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3706,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3707,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3709,"        final int noOfItems = endIndex - startIndex;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3710,"        if (noOfItems <= 0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3711,"            return EMPTY;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3713,"        final StringBuilder buf = new StringBuilder(noOfItems * 16);
",4,1,0,1,2,1,0,4,0,10,60,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3714,"        for (int i = startIndex; i < endIndex; i++) {
",10,1,0,1,3,0,0,0,0,12,45,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3715,"            if (i > startIndex) {
",4,1,0,1,3,0,0,0,0,5,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3716,"                buf.append(separator);
",0,0,0,1,2,0,6,0,0,6,22,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3718,"            buf.append(array[i]);
",0,0,1,2,4,0,4,0,0,8,21,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3720,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3755,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3756,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3758,"        final int noOfItems = endIndex - startIndex;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3759,"        if (noOfItems <= 0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3760,"            return EMPTY;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3762,"        final StringBuilder buf = new StringBuilder(noOfItems * 16);
",4,1,0,1,2,1,0,4,0,10,60,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3763,"        for (int i = startIndex; i < endIndex; i++) {
",10,1,0,1,3,0,0,0,0,12,45,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3764,"            if (i > startIndex) {
",4,1,0,1,3,0,0,0,0,5,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3765,"                buf.append(separator);
",0,0,0,1,2,0,6,0,0,6,22,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3767,"            buf.append(array[i]);
",0,0,1,2,4,0,4,0,0,8,21,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3769,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3804,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3805,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3807,"        final int noOfItems = endIndex - startIndex;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3808,"        if (noOfItems <= 0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3809,"            return EMPTY;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3811,"        final StringBuilder buf = new StringBuilder(noOfItems * 16);
",4,1,0,1,2,1,0,4,0,10,60,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3812,"        for (int i = startIndex; i < endIndex; i++) {
",10,1,0,1,3,0,0,0,0,12,45,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3813,"            if (i > startIndex) {
",4,1,0,1,3,0,0,0,0,5,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3814,"                buf.append(separator);
",0,0,0,1,2,0,6,0,0,6,22,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3816,"            buf.append(array[i]);
",0,0,1,2,4,0,4,0,0,8,21,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3818,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3846,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3847,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3849,"        return join(array, separator, 0, array.length);
",4,0,0,1,2,1,6,0,0,10,47,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3888,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3889,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3891,"        if (separator == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3892,"            separator = EMPTY;
",4,0,0,0,0,0,0,0,0,5,18,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3897,"        final int noOfItems = endIndex - startIndex;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3898,"        if (noOfItems <= 0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3899,"            return EMPTY;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3902,"        final StringBuilder buf = new StringBuilder(noOfItems * 16);
",4,1,0,1,2,1,0,4,0,10,60,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3904,"        for (int i = startIndex; i < endIndex; i++) {
",10,1,0,1,3,0,0,0,0,12,45,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3905,"            if (i > startIndex) {
",4,1,0,1,3,0,0,0,0,5,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3906,"                buf.append(separator);
",0,0,0,1,2,0,6,0,0,6,22,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3908,"            if (array[i] != null) {
",0,1,1,2,5,0,0,0,0,5,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3909,"                buf.append(array[i]);
",0,0,1,2,4,0,4,0,0,8,21,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3912,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3932,"        if (iterator == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3933,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3935,"        if (!iterator.hasNext()) {
",0,0,0,2,5,0,4,0,0,5,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3936,"            return EMPTY;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3938,"        final Object first = iterator.next();
",2,0,0,1,2,1,4,2,0,9,37,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3939,"        if (!iterator.hasNext()) {
",0,0,0,2,5,0,4,0,0,5,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3940,"            return ObjectUtils.toString(first);
",0,0,0,1,2,1,6,0,0,6,35,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3944,"        final StringBuilder buf = new StringBuilder(256); // Java default is 16, probably too small
",2,0,0,1,2,1,0,4,0,7,91,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3945,"        if (first != null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3946,"            buf.append(first);
",0,0,0,1,2,0,6,0,0,6,18,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3949,"        while (iterator.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,28,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3950,"            buf.append(separator);
",0,0,0,1,2,0,6,0,0,6,22,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3951,"            final Object obj = iterator.next();
",2,0,0,1,2,1,4,2,0,9,35,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3952,"            if (obj != null) {
",2,1,0,1,3,0,0,0,0,3,18,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3953,"                buf.append(obj);
",0,0,0,1,2,0,6,0,0,6,16,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3955,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3957,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3976,"        if (iterator == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3977,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3979,"        if (!iterator.hasNext()) {
",0,0,0,2,5,0,4,0,0,5,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3980,"            return EMPTY;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3982,"        final Object first = iterator.next();
",2,0,0,1,2,1,4,2,0,9,37,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3983,"        if (!iterator.hasNext()) {
",0,0,0,2,5,0,4,0,0,5,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3984,"            return ObjectUtils.toString(first);
",0,0,0,1,2,1,6,0,0,6,35,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3988,"        final StringBuilder buf = new StringBuilder(256); // Java default is 16, probably too small
",2,0,0,1,2,1,0,4,0,7,91,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3989,"        if (first != null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3990,"            buf.append(first);
",0,0,0,1,2,0,6,0,0,6,18,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3993,"        while (iterator.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,28,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3994,"            if (separator != null) {
",2,1,0,1,3,0,0,0,0,3,24,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3995,"                buf.append(separator);
",0,0,0,1,2,0,6,0,0,6,22,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3997,"            final Object obj = iterator.next();
",2,0,0,1,2,1,4,2,0,9,35,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3998,"            if (obj != null) {
",2,1,0,1,3,0,0,0,0,3,18,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,3999,"                buf.append(obj);
",0,0,0,1,2,0,6,0,0,6,16,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4001,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4002,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4020,"        if (iterable == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4021,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4023,"        return join(iterable.iterator(), separator);
",0,0,0,2,4,1,8,0,0,8,44,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4041,"        if (iterable == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4042,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4044,"        return join(iterable.iterator(), separator);
",0,0,0,2,4,1,8,0,0,8,44,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4064,"        if (isEmpty(str)) {
",0,0,0,2,5,0,4,0,0,4,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4065,"            return str;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4067,"        final int sz = str.length();
",2,0,0,1,2,1,4,0,0,7,28,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4068,"        final char[] chs = new char[sz];
",2,0,1,2,4,1,0,0,0,5,32,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4069,"        int count = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4070,"        for (int i = 0; i < sz; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4071,"            if (!Character.isWhitespace(str.charAt(i))) {
",0,0,0,3,7,0,10,0,0,11,45,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4072,"                chs[count++] = str.charAt(i);
",2,0,1,2,4,0,6,0,0,12,29,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4075,"        if (count == sz) {
",4,1,0,1,3,0,0,0,0,5,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4076,"            return str;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4078,"        return new String(chs, 0, count);
",4,0,0,1,2,1,0,2,0,6,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4108,"        if (isEmpty(str) || isEmpty(remove)) {
",0,1,0,3,7,0,8,0,0,9,38,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4109,"            return str;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4111,"        if (str.startsWith(remove)){
",0,0,0,2,5,0,6,0,0,6,28,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4112,"            return str.substring(remove.length());
",0,0,0,2,4,1,8,0,0,8,38,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4114,"        return str;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4143,"        if (isEmpty(str) || isEmpty(remove)) {
",0,1,0,3,7,0,8,0,0,9,38,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4144,"            return str;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4146,"        if (startsWithIgnoreCase(str, remove)) {
",0,0,0,2,5,0,6,0,0,6,40,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4147,"            return str.substring(remove.length());
",0,0,0,2,4,1,8,0,0,8,38,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4149,"        return str;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4177,"        if (isEmpty(str) || isEmpty(remove)) {
",0,1,0,3,7,0,8,0,0,9,38,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4178,"            return str;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4180,"        if (str.endsWith(remove)) {
",0,0,0,2,5,0,6,0,0,6,27,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4181,"            return str.substring(0, str.length() - remove.length());
",0,1,0,3,6,1,12,0,0,13,56,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4183,"        return str;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4213,"        if (isEmpty(str) || isEmpty(remove)) {
",0,1,0,3,7,0,8,0,0,9,38,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4214,"            return str;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4216,"        if (endsWithIgnoreCase(str, remove)) {
",0,0,0,2,5,0,6,0,0,6,38,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4217,"            return str.substring(0, str.length() - remove.length());
",0,1,0,3,6,1,12,0,0,13,56,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4219,"        return str;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4246,"        if (isEmpty(str) || isEmpty(remove)) {
",0,1,0,3,7,0,8,0,0,9,38,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4247,"            return str;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4249,"        return replace(str, remove, EMPTY, -1);
",0,0,0,1,2,1,8,0,0,9,39,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4272,"        if (isEmpty(str) || str.indexOf(remove) == INDEX_NOT_FOUND) {
",2,2,0,3,7,0,10,0,0,14,61,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4273,"            return str;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4275,"        final char[] chars = str.toCharArray();
",2,0,0,2,4,1,4,0,0,7,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4276,"        int pos = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4277,"        for (int i = 0; i < chars.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4278,"            if (chars[i] != remove) {
",2,1,1,2,5,0,0,0,0,7,25,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4279,"                chars[pos++] = chars[i];
",2,0,1,2,4,0,0,0,0,10,24,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4282,"        return new String(chars, 0, pos);
",4,0,0,1,2,1,0,2,0,6,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4311,"        return replace(text, searchString, replacement, 1);
",0,0,0,1,2,1,8,0,0,8,51,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4335,"        return Pattern.compile(regex, Pattern.DOTALL).matcher(source).replaceAll(replacement);
",4,0,0,3,6,1,14,0,0,18,86,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4351,"        return replacePattern(source, regex, StringUtils.EMPTY);
",4,0,0,1,2,1,6,0,0,10,56,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4378,"        return replace(text, searchString, replacement, -1);
",0,0,0,1,2,1,8,0,0,9,52,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4410,"        if (isEmpty(text) || isEmpty(searchString) || replacement == null || max == 0) {
",4,4,0,3,7,0,8,0,0,18,80,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4411,"            return text;
",2,0,0,0,0,1,0,0,0,2,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4413,"        int start = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4414,"        int end = text.indexOf(searchString, start);
",2,0,0,1,2,0,8,0,0,10,44,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4415,"        if (end == INDEX_NOT_FOUND) {
",4,1,0,1,3,0,0,0,0,5,29,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4416,"            return text;
",2,0,0,0,0,1,0,0,0,2,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4418,"        final int replLength = searchString.length();
",2,0,0,1,2,1,4,0,0,7,45,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4419,"        int increase = replacement.length() - replLength;
",4,1,0,1,2,0,4,0,0,9,49,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4420,"        increase = increase < 0 ? 0 : increase;
",6,1,0,0,0,0,0,0,0,8,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4421,"        increase *= max < 0 ? 16 : max > 64 ? 64 : max;
",8,2,0,0,0,0,0,0,0,11,47,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4422,"        final StringBuilder buf = new StringBuilder(text.length() + increase);
",4,1,0,2,4,1,4,4,0,14,70,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4423,"        while (end != INDEX_NOT_FOUND) {
",4,1,0,1,3,0,0,0,0,5,32,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4424,"            buf.append(text.substring(start, end)).append(replacement);
",0,0,0,3,6,0,16,0,0,16,59,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4425,"            start = end + replLength;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4426,"            if (--max == 0) {
",2,1,0,1,3,0,0,0,0,4,17,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4427,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4429,"            end = text.indexOf(searchString, start);
",2,0,0,1,2,0,8,0,0,11,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4431,"        buf.append(text.substring(start));
",0,0,0,2,4,0,10,0,0,10,34,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4432,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4475,"        return replaceEach(text, searchList, replacementList, false, 0);
",0,0,0,1,2,1,8,0,0,9,64,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4525,"        final int timeToLive = searchList == null ? 0 : searchList.length;
",8,1,0,0,0,1,0,0,0,10,66,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4526,"        return replaceEach(text, searchList, replacementList, true, timeToLive);
",0,0,0,1,2,1,10,0,0,11,72,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4583,"        if (text == null || text.isEmpty() || searchList == null ||
",4,7,0,1,3,0,4,0,0,15,59,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4585,"            return text;
",2,0,0,0,0,1,0,0,0,2,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4589,"        if (timeToLive < 0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4590,"            throw new IllegalStateException(""Aborting to protect against StackOverflowError - "" +
",0,1,0,0,1,0,0,2,0,4,85,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4594,"        final int searchLength = searchList.length;
",6,0,0,0,0,1,0,0,0,7,43,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4595,"        final int replacementLength = replacementList.length;
",6,0,0,0,0,1,0,0,0,7,53,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4598,"        if (searchLength != replacementLength) {
",4,1,0,1,3,0,0,0,0,5,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4599,"            throw new IllegalArgumentException(""Search and Replace array lengths don't match: ""
",0,0,0,0,1,0,0,2,0,3,83,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4606,"        final boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];
",2,0,1,2,4,1,0,0,0,5,70,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4609,"        int textIndex = -1;
",2,0,0,0,0,0,0,0,0,3,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4610,"        int replaceIndex = -1;
",2,0,0,0,0,0,0,0,0,3,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4611,"        int tempIndex = -1;
",2,0,0,0,0,0,0,0,0,3,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4615,"        for (int i = 0; i < searchLength; i++) {
",8,1,0,1,3,0,0,0,0,10,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4616,"            if (noMoreMatchesForReplIndex[i] || searchList[i] == null ||
",0,4,1,2,5,0,0,0,0,12,60,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4618,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4620,"            tempIndex = text.indexOf(searchList[i]);
",2,0,1,2,4,0,4,0,0,11,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4623,"            if (tempIndex == -1) {
",2,1,0,1,3,0,0,0,0,4,22,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4624,"                noMoreMatchesForReplIndex[i] = true;
",0,0,1,1,2,0,0,0,0,6,36,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4626,"                if (textIndex == -1 || tempIndex < textIndex) {
",6,3,0,1,3,0,0,0,0,10,47,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4627,"                    textIndex = tempIndex;
",4,0,0,0,0,0,0,0,0,5,22,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4628,"                    replaceIndex = i;
",4,0,0,0,0,0,0,0,0,5,17,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4635,"        if (textIndex == -1) {
",2,1,0,1,3,0,0,0,0,4,22,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4636,"            return text;
",2,0,0,0,0,1,0,0,0,2,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4639,"        int start = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4642,"        int increase = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4645,"        for (int i = 0; i < searchList.length; i++) {
",10,1,0,1,3,0,0,0,0,12,45,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4646,"            if (searchList[i] == null || replacementList[i] == null) {
",0,3,1,3,7,0,0,0,0,11,58,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4647,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4649,"            final int greater = replacementList[i].length() - searchList[i].length();
",2,1,1,4,8,1,4,0,0,16,73,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4650,"            if (greater > 0) {
",2,1,0,1,3,0,0,0,0,3,18,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4651,"                increase += 3 * greater; // assume 3 matches
",4,1,0,0,0,0,0,0,0,6,44,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4655,"        increase = Math.min(increase, text.length() / 5);
",2,1,0,2,4,0,10,0,0,14,49,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4657,"        final StringBuilder buf = new StringBuilder(text.length() + increase);
",4,1,0,2,4,1,4,4,0,14,70,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4659,"        while (textIndex != -1) {
",2,1,0,1,3,0,0,0,0,4,25,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4661,"            for (int i = start; i < textIndex; i++) {
",10,1,0,1,3,0,0,0,0,12,41,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4662,"                buf.append(text.charAt(i));
",0,0,0,2,4,0,10,0,0,10,27,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4664,"            buf.append(replacementList[replaceIndex]);
",0,0,1,2,4,0,4,0,0,8,42,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4666,"            start = textIndex + searchList[replaceIndex].length();
",4,1,1,2,4,0,2,0,0,12,54,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4668,"            textIndex = -1;
",2,0,0,0,0,0,0,0,0,4,15,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4669,"            replaceIndex = -1;
",2,0,0,0,0,0,0,0,0,4,18,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4670,"            tempIndex = -1;
",2,0,0,0,0,0,0,0,0,4,15,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4673,"            for (int i = 0; i < searchLength; i++) {
",8,1,0,1,3,0,0,0,0,10,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4674,"                if (noMoreMatchesForReplIndex[i] || searchList[i] == null ||
",0,4,1,2,5,0,0,0,0,12,60,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4676,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4678,"                tempIndex = text.indexOf(searchList[i], start);
",2,0,1,2,4,0,6,0,0,13,47,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4681,"                if (tempIndex == -1) {
",2,1,0,1,3,0,0,0,0,4,22,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4682,"                    noMoreMatchesForReplIndex[i] = true;
",0,0,1,1,2,0,0,0,0,6,36,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4684,"                    if (textIndex == -1 || tempIndex < textIndex) {
",6,3,0,1,3,0,0,0,0,10,47,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4685,"                        textIndex = tempIndex;
",4,0,0,0,0,0,0,0,0,5,22,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4686,"                        replaceIndex = i;
",4,0,0,0,0,0,0,0,0,5,17,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4693,"        final int textLength = text.length();
",2,0,0,1,2,1,4,0,0,7,37,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4694,"        for (int i = start; i < textLength; i++) {
",10,1,0,1,3,0,0,0,0,12,42,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4695,"            buf.append(text.charAt(i));
",0,0,0,2,4,0,10,0,0,10,27,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4697,"        final String result = buf.toString();
",2,0,0,1,2,1,4,2,0,9,37,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4698,"        if (!repeat) {
",2,0,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4699,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4702,"        return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);
",2,1,0,1,2,1,10,0,0,13,80,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4728,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4729,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4731,"        return str.replace(searchChar, replaceChar);
",0,0,0,1,2,1,8,0,0,8,44,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4771,"        if (isEmpty(str) || isEmpty(searchChars)) {
",0,1,0,3,7,0,8,0,0,9,43,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4772,"            return str;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4774,"        if (replaceChars == null) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4775,"            replaceChars = EMPTY;
",4,0,0,0,0,0,0,0,0,5,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4777,"        boolean modified = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4778,"        final int replaceCharsLength = replaceChars.length();
",2,0,0,1,2,1,4,0,0,7,53,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4779,"        final int strLength = str.length();
",2,0,0,1,2,1,4,0,0,7,35,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4780,"        final StringBuilder buf = new StringBuilder(strLength);
",4,0,0,1,2,1,0,4,0,9,55,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4781,"        for (int i = 0; i < strLength; i++) {
",8,1,0,1,3,0,0,0,0,10,37,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4782,"            final char ch = str.charAt(i);
",2,0,0,1,2,1,6,0,0,9,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4783,"            final int index = searchChars.indexOf(ch);
",2,0,0,1,2,1,6,0,0,9,42,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4784,"            if (index >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4785,"                modified = true;
",2,0,0,0,0,0,0,0,0,4,16,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4786,"                if (index < replaceCharsLength) {
",4,1,0,1,3,0,0,0,0,5,33,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4787,"                    buf.append(replaceChars.charAt(index));
",0,0,0,2,4,0,10,0,0,10,39,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4790,"                buf.append(ch);
",0,0,0,1,2,0,6,0,0,6,15,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4793,"        if (modified) {
",2,0,0,1,3,0,0,0,0,2,15,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4794,"            return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4796,"        return str;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4831,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4832,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4834,"        if (overlay == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4835,"            overlay = EMPTY;
",4,0,0,0,0,0,0,0,0,5,16,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4837,"        final int len = str.length();
",2,0,0,1,2,1,4,0,0,7,29,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4838,"        if (start < 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4839,"            start = 0;
",2,0,0,0,0,0,0,0,0,3,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4841,"        if (start > len) {
",4,1,0,1,3,0,0,0,0,5,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4842,"            start = len;
",4,0,0,0,0,0,0,0,0,5,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4844,"        if (end < 0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4845,"            end = 0;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4847,"        if (end > len) {
",4,1,0,1,3,0,0,0,0,5,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4848,"            end = len;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4850,"        if (start > end) {
",4,1,0,1,3,0,0,0,0,5,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4851,"            final int temp = start;
",4,0,0,0,0,1,0,0,0,5,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4852,"            start = end;
",4,0,0,0,0,0,0,0,0,5,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4853,"            end = temp;
",4,0,0,0,0,0,0,0,0,5,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4855,"        return new StringBuilder(len + start - end + overlay.length() + 1)
",6,4,0,2,4,1,4,2,0,16,66,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4890,"        if (isEmpty(str)) {
",0,0,0,2,5,0,4,0,0,4,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4891,"            return str;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4894,"        if (str.length() == 1) {
",0,1,0,2,5,0,4,0,0,5,24,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4895,"            final char ch = str.charAt(0);
",2,0,0,1,2,1,4,0,0,7,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4896,"            if (ch == CharUtils.CR || ch == CharUtils.LF) {
",12,3,0,1,3,0,0,0,0,15,47,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4897,"                return EMPTY;
",2,0,0,0,0,1,0,0,0,2,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4899,"            return str;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4902,"        int lastIdx = str.length() - 1;
",2,1,0,1,2,0,4,0,0,7,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4903,"        final char last = str.charAt(lastIdx);
",2,0,0,1,2,1,6,0,0,9,38,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4905,"        if (last == CharUtils.LF) {
",6,1,0,1,3,0,0,0,0,7,27,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4906,"            if (str.charAt(lastIdx - 1) == CharUtils.CR) {
",6,2,0,2,5,0,4,0,0,12,46,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4907,"                lastIdx--;
",2,0,0,0,0,0,0,0,0,3,10,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4909,"        } else if (last != CharUtils.CR) {
",6,1,0,1,4,0,0,0,0,7,34,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4910,"            lastIdx++;
",2,0,0,0,0,0,0,0,0,3,10,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4912,"        return str.substring(0, lastIdx);
",0,0,0,1,2,1,6,0,0,6,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4944,"        return removeEnd(str,separator);
",0,0,0,1,2,1,6,0,0,6,32,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4973,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4974,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4976,"        final int strLen = str.length();
",2,0,0,1,2,1,4,0,0,7,32,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4977,"        if (strLen < 2) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4978,"            return EMPTY;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4980,"        final int lastIdx = strLen - 1;
",4,1,0,0,0,1,0,0,0,6,31,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4981,"        final String ret = str.substring(0, lastIdx);
",2,0,0,1,2,1,6,2,0,11,45,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4982,"        final char last = str.charAt(lastIdx);
",2,0,0,1,2,1,6,0,0,9,38,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4983,"        if (last == CharUtils.LF && ret.charAt(lastIdx - 1) == CharUtils.CR) {
",12,4,0,2,5,0,4,0,0,20,70,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4984,"            return ret.substring(0, lastIdx - 1);
",2,1,0,1,2,1,4,0,0,7,37,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,4986,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5015,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5016,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5018,"        if (repeat <= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5019,"            return EMPTY;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5021,"        final int inputLength = str.length();
",2,0,0,1,2,1,4,0,0,7,37,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5022,"        if (repeat == 1 || inputLength == 0) {
",4,3,0,1,3,0,0,0,0,7,38,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5023,"            return str;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5025,"        if (inputLength == 1 && repeat <= PAD_LIMIT) {
",6,3,0,1,3,0,0,0,0,9,46,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5026,"            return repeat(str.charAt(0), repeat);
",0,0,0,2,4,1,8,0,0,8,37,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5029,"        final int outputLength = inputLength * repeat;
",6,1,0,0,0,1,0,0,0,8,46,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5030,"        switch (inputLength) {
",2,0,0,1,3,0,0,0,0,2,22,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5032,"                return repeat(str.charAt(0), repeat);
",0,0,0,2,4,1,8,0,0,8,37,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5034,"                final char ch0 = str.charAt(0);
",2,0,0,1,2,1,4,0,0,7,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5035,"                final char ch1 = str.charAt(1);
",2,0,0,1,2,1,4,0,0,7,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5036,"                final char[] output2 = new char[outputLength];
",2,0,1,2,4,1,0,0,0,5,46,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5037,"                for (int i = repeat * 2 - 2; i >= 0; i--, i--) {
",10,3,0,1,3,0,0,0,0,15,48,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5038,"                    output2[i] = ch0;
",2,0,1,1,2,0,0,0,0,7,17,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5039,"                    output2[i + 1] = ch1;
",4,1,1,1,2,0,0,0,0,8,21,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5041,"                return new String(output2);
",2,0,0,1,2,1,0,2,0,4,27,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5043,"                final StringBuilder buf = new StringBuilder(outputLength);
",4,0,0,1,2,1,0,4,0,9,58,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5044,"                for (int i = 0; i < repeat; i++) {
",8,1,0,1,3,0,0,0,0,10,34,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5045,"                    buf.append(str);
",0,0,0,1,2,0,6,0,0,6,16,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5047,"                return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5072,"        if(str == null || separator == null) {
",4,3,0,1,3,0,0,0,0,7,38,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5073,"            return repeat(str, repeat);
",0,0,0,1,2,1,6,0,0,6,27,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5076,"        final String result = repeat(str + separator, repeat);
",6,1,0,1,2,1,4,2,0,14,54,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5077,"        return removeEnd(result, separator);
",0,0,0,1,2,1,6,0,0,6,36,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5103,"        final char[] buf = new char[repeat];
",2,0,1,2,4,1,0,0,0,5,36,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5104,"        for (int i = repeat - 1; i >= 0; i--) {
",8,2,0,1,3,0,0,0,0,11,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5105,"            buf[i] = ch;
",2,0,1,1,2,0,0,0,0,7,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5107,"        return new String(buf);
",2,0,0,1,2,1,0,2,0,4,23,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5130,"        return rightPad(str, size, ' ');
",0,0,0,1,2,1,6,0,0,7,32,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5155,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5156,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5158,"        final int pads = size - str.length();
",4,1,0,1,2,1,4,0,0,10,37,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5159,"        if (pads <= 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5160,"            return str; // returns original String when possible
",2,0,0,0,0,1,0,0,0,2,52,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5162,"        if (pads > PAD_LIMIT) {
",4,1,0,1,3,0,0,0,0,5,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5163,"            return rightPad(str, size, String.valueOf(padChar));
",0,0,0,2,4,1,12,0,0,12,52,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5165,"        return str.concat(repeat(padChar, pads));
",0,0,0,2,4,1,10,0,0,10,41,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5192,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5193,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5195,"        if (isEmpty(padStr)) {
",0,0,0,2,5,0,4,0,0,4,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5196,"            padStr = SPACE;
",4,0,0,0,0,0,0,0,0,5,15,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5198,"        final int padLen = padStr.length();
",2,0,0,1,2,1,4,0,0,7,35,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5199,"        final int strLen = str.length();
",2,0,0,1,2,1,4,0,0,7,32,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5200,"        final int pads = size - strLen;
",6,1,0,0,0,1,0,0,0,8,31,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5201,"        if (pads <= 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5202,"            return str; // returns original String when possible
",2,0,0,0,0,1,0,0,0,2,52,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5204,"        if (padLen == 1 && pads <= PAD_LIMIT) {
",6,3,0,1,3,0,0,0,0,9,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5205,"            return rightPad(str, size, padStr.charAt(0));
",0,0,0,2,4,1,10,0,0,10,45,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5208,"        if (pads == padLen) {
",4,1,0,1,3,0,0,0,0,5,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5209,"            return str.concat(padStr);
",0,0,0,1,2,1,6,0,0,6,26,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5210,"        } else if (pads < padLen) {
",4,1,0,1,4,0,0,0,0,5,27,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5211,"            return str.concat(padStr.substring(0, pads));
",0,0,0,2,4,1,10,0,0,10,45,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5213,"            final char[] padding = new char[pads];
",2,0,1,2,4,1,0,0,0,5,38,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5214,"            final char[] padChars = padStr.toCharArray();
",2,0,0,2,4,1,4,0,0,7,45,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5215,"            for (int i = 0; i < pads; i++) {
",8,1,0,1,3,0,0,0,0,10,32,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5216,"                padding[i] = padChars[i % padLen];
",4,1,1,2,4,0,0,0,0,12,34,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5218,"            return str.concat(new String(padding));
",2,0,0,2,4,1,4,2,0,8,39,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5242,"        return leftPad(str, size, ' ');
",0,0,0,1,2,1,6,0,0,7,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5267,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5268,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5270,"        final int pads = size - str.length();
",4,1,0,1,2,1,4,0,0,10,37,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5271,"        if (pads <= 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5272,"            return str; // returns original String when possible
",2,0,0,0,0,1,0,0,0,2,52,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5274,"        if (pads > PAD_LIMIT) {
",4,1,0,1,3,0,0,0,0,5,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5275,"            return leftPad(str, size, String.valueOf(padChar));
",0,0,0,2,4,1,12,0,0,12,51,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5277,"        return repeat(padChar, pads).concat(str);
",0,0,0,2,4,1,10,0,0,10,41,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5304,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5305,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5307,"        if (isEmpty(padStr)) {
",0,0,0,2,5,0,4,0,0,4,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5308,"            padStr = SPACE;
",4,0,0,0,0,0,0,0,0,5,15,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5310,"        final int padLen = padStr.length();
",2,0,0,1,2,1,4,0,0,7,35,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5311,"        final int strLen = str.length();
",2,0,0,1,2,1,4,0,0,7,32,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5312,"        final int pads = size - strLen;
",6,1,0,0,0,1,0,0,0,8,31,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5313,"        if (pads <= 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5314,"            return str; // returns original String when possible
",2,0,0,0,0,1,0,0,0,2,52,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5316,"        if (padLen == 1 && pads <= PAD_LIMIT) {
",6,3,0,1,3,0,0,0,0,9,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5317,"            return leftPad(str, size, padStr.charAt(0));
",0,0,0,2,4,1,10,0,0,10,44,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5320,"        if (pads == padLen) {
",4,1,0,1,3,0,0,0,0,5,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5321,"            return padStr.concat(str);
",0,0,0,1,2,1,6,0,0,6,26,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5322,"        } else if (pads < padLen) {
",4,1,0,1,4,0,0,0,0,5,27,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5323,"            return padStr.substring(0, pads).concat(str);
",0,0,0,2,4,1,10,0,0,10,45,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5325,"            final char[] padding = new char[pads];
",2,0,1,2,4,1,0,0,0,5,38,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5326,"            final char[] padChars = padStr.toCharArray();
",2,0,0,2,4,1,4,0,0,7,45,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5327,"            for (int i = 0; i < pads; i++) {
",8,1,0,1,3,0,0,0,0,10,32,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5328,"                padding[i] = padChars[i % padLen];
",4,1,1,2,4,0,0,0,0,12,34,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5330,"            return new String(padding).concat(str);
",2,0,0,2,4,1,4,2,0,8,39,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5346,"        return cs == null ? 0 : cs.length();
",2,1,0,1,2,1,4,0,0,7,36,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5375,"        return center(str, size, ' ');
",0,0,0,1,2,1,6,0,0,7,30,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5403,"        if (str == null || size <= 0) {
",4,3,0,1,3,0,0,0,0,7,31,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5404,"            return str;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5406,"        final int strLen = str.length();
",2,0,0,1,2,1,4,0,0,7,32,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5407,"        final int pads = size - strLen;
",6,1,0,0,0,1,0,0,0,8,31,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5408,"        if (pads <= 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5409,"            return str;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5411,"        str = leftPad(str, strLen + pads / 2, padChar);
",6,2,0,1,2,0,6,0,0,15,47,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5412,"        str = rightPad(str, size, padChar);
",2,0,0,1,2,0,8,0,0,11,35,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5413,"        return str;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5443,"        if (str == null || size <= 0) {
",4,3,0,1,3,0,0,0,0,7,31,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5444,"            return str;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5446,"        if (isEmpty(padStr)) {
",0,0,0,2,5,0,4,0,0,4,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5447,"            padStr = SPACE;
",4,0,0,0,0,0,0,0,0,5,15,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5449,"        final int strLen = str.length();
",2,0,0,1,2,1,4,0,0,7,32,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5450,"        final int pads = size - strLen;
",6,1,0,0,0,1,0,0,0,8,31,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5451,"        if (pads <= 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5452,"            return str;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5454,"        str = leftPad(str, strLen + pads / 2, padStr);
",6,2,0,1,2,0,6,0,0,15,46,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5455,"        str = rightPad(str, size, padStr);
",2,0,0,1,2,0,8,0,0,11,34,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5456,"        return str;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5481,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5482,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5484,"        return str.toUpperCase();
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5504,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5505,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5507,"        return str.toUpperCase(locale);
",0,0,0,1,2,1,6,0,0,6,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5530,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5531,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5533,"        return str.toLowerCase();
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5553,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5554,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5556,"        return str.toLowerCase(locale);
",0,0,0,1,2,1,6,0,0,6,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5581,"        if (str == null || (strLen = str.length()) == 0) {
",4,3,0,3,7,0,4,0,0,12,50,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5582,"            return str;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5585,"        char firstChar = str.charAt(0);
",2,0,0,1,2,0,4,0,0,6,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5586,"        if (Character.isTitleCase(firstChar)) {
",0,0,0,2,5,0,6,0,0,6,39,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5588,"        	return str;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5591,"        return new StringBuilder(strLen)
",2,0,0,1,2,1,0,2,0,4,32,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5619,"        if (str == null || (strLen = str.length()) == 0) {
",4,3,0,3,7,0,4,0,0,12,50,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5620,"            return str;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5623,"        char firstChar = str.charAt(0);
",2,0,0,1,2,0,4,0,0,6,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5624,"        if (Character.isLowerCase(firstChar)) {
",0,0,0,2,5,0,6,0,0,6,39,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5626,"        	return str;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5629,"        return new StringBuilder(strLen)
",2,0,0,1,2,1,0,2,0,4,32,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5663,"        if (StringUtils.isEmpty(str)) {
",0,0,0,2,5,0,6,0,0,6,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5664,"            return str;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5667,"        final char[] buffer = str.toCharArray();
",2,0,0,2,4,1,4,0,0,7,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5669,"        for (int i = 0; i < buffer.length; i++) {
",10,1,0,1,3,0,0,0,0,12,41,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5670,"            final char ch = buffer[i];
",2,0,1,1,2,1,0,0,0,7,26,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5671,"            if (Character.isUpperCase(ch)) {
",0,0,0,2,5,0,6,0,0,6,32,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5672,"                buffer[i] = Character.toLowerCase(ch);
",0,0,1,2,4,0,6,0,0,11,38,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5673,"            } else if (Character.isTitleCase(ch)) {
",0,0,0,2,6,0,6,0,0,6,39,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5674,"                buffer[i] = Character.toLowerCase(ch);
",0,0,1,2,4,0,6,0,0,11,38,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5675,"            } else if (Character.isLowerCase(ch)) {
",0,0,0,2,6,0,6,0,0,6,39,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5676,"                buffer[i] = Character.toUpperCase(ch);
",0,0,1,2,4,0,6,0,0,11,38,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5679,"        return new String(buffer);
",2,0,0,1,2,1,0,2,0,4,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5705,"        if (isEmpty(str) || isEmpty(sub)) {
",0,1,0,3,7,0,8,0,0,9,35,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5706,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5708,"        int count = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5709,"        int idx = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5710,"        while ((idx = CharSequenceUtils.indexOf(str, sub, idx)) != INDEX_NOT_FOUND) {
",4,1,0,3,7,0,10,0,0,16,77,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5711,"            count++;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5712,"            idx += sub.length();
",2,0,0,1,2,0,4,0,0,7,20,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5714,"        return count;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5740,"        if (cs == null || cs.length() == 0) {
",2,3,0,2,5,0,4,0,0,9,37,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5741,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5743,"        final int sz = cs.length();
",2,0,0,1,2,1,4,0,0,7,27,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5744,"        for (int i = 0; i < sz; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5745,"            if (Character.isLetter(cs.charAt(i)) == false) {
",0,1,0,3,7,0,10,0,0,12,48,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5746,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5749,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5775,"        if (cs == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5776,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5778,"        final int sz = cs.length();
",2,0,0,1,2,1,4,0,0,7,27,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5779,"        for (int i = 0; i < sz; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5780,"            if (Character.isLetter(cs.charAt(i)) == false && cs.charAt(i) != ' ') {
",0,3,0,4,9,0,16,0,0,21,71,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5781,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5784,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5810,"        if (cs == null || cs.length() == 0) {
",2,3,0,2,5,0,4,0,0,9,37,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5811,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5813,"        final int sz = cs.length();
",2,0,0,1,2,1,4,0,0,7,27,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5814,"        for (int i = 0; i < sz; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5815,"            if (Character.isLetterOrDigit(cs.charAt(i)) == false) {
",0,1,0,3,7,0,10,0,0,12,55,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5816,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5819,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5845,"        if (cs == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5846,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5848,"        final int sz = cs.length();
",2,0,0,1,2,1,4,0,0,7,27,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5849,"        for (int i = 0; i < sz; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5850,"            if (Character.isLetterOrDigit(cs.charAt(i)) == false && cs.charAt(i) != ' ') {
",0,3,0,4,9,0,16,0,0,21,78,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5851,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5854,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5884,"        if (cs == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5885,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5887,"        final int sz = cs.length();
",2,0,0,1,2,1,4,0,0,7,27,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5888,"        for (int i = 0; i < sz; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5889,"            if (CharUtils.isAsciiPrintable(cs.charAt(i)) == false) {
",0,1,0,3,7,0,10,0,0,12,56,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5890,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5893,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5927,"        if (cs == null || cs.length() == 0) {
",2,3,0,2,5,0,4,0,0,9,37,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5928,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5930,"        final int sz = cs.length();
",2,0,0,1,2,1,4,0,0,7,27,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5931,"        for (int i = 0; i < sz; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5932,"            if (Character.isDigit(cs.charAt(i)) == false) {
",0,1,0,3,7,0,10,0,0,12,47,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5933,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5936,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5964,"        if (cs == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5965,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5967,"        final int sz = cs.length();
",2,0,0,1,2,1,4,0,0,7,27,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5968,"        for (int i = 0; i < sz; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5969,"            if (Character.isDigit(cs.charAt(i)) == false && cs.charAt(i) != ' ') {
",0,3,0,4,9,0,16,0,0,21,70,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5970,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5973,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5997,"        if (cs == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,5998,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6000,"        final int sz = cs.length();
",2,0,0,1,2,1,4,0,0,7,27,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6001,"        for (int i = 0; i < sz; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6002,"            if (Character.isWhitespace(cs.charAt(i)) == false) {
",0,1,0,3,7,0,10,0,0,12,52,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6003,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6006,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6029,"        if (cs == null || isEmpty(cs)) {
",2,2,0,2,5,0,4,0,0,9,32,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6030,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6032,"        final int sz = cs.length();
",2,0,0,1,2,1,4,0,0,7,27,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6033,"        for (int i = 0; i < sz; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6034,"            if (Character.isLowerCase(cs.charAt(i)) == false) {
",0,1,0,3,7,0,10,0,0,12,51,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6035,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6038,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6061,"        if (cs == null || isEmpty(cs)) {
",2,2,0,2,5,0,4,0,0,9,32,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6062,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6064,"        final int sz = cs.length();
",2,0,0,1,2,1,4,0,0,7,27,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6065,"        for (int i = 0; i < sz; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6066,"            if (Character.isUpperCase(cs.charAt(i)) == false) {
",0,1,0,3,7,0,10,0,0,12,51,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6067,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6070,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6092,"        return str == null ? EMPTY : str;
",6,1,0,0,0,1,0,0,0,7,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6113,"        return str == null ? defaultStr : str;
",6,1,0,0,0,1,0,0,0,7,38,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6135,"        return StringUtils.isBlank(str) ? defaultStr : str;
",4,0,0,1,2,1,6,0,0,10,51,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6157,"        return StringUtils.isEmpty(str) ? defaultStr : str;
",4,0,0,1,2,1,6,0,0,10,51,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6177,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6178,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6180,"        return new StringBuilder(str).reverse().toString();
",2,0,0,3,6,1,4,2,0,8,51,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6203,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6204,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6208,"        final String[] strs = split(str, separatorChar);
",2,0,0,2,4,1,6,2,0,11,48,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6209,"        ArrayUtils.reverse(strs);
",0,0,0,1,2,0,6,0,0,6,25,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6210,"        return join(strs, separatorChar);
",0,0,0,1,2,1,6,0,0,6,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6248,"        return abbreviate(str, 0, maxWidth);
",0,0,0,1,2,1,6,0,0,6,36,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6287,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6288,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6290,"        if (maxWidth < 4) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6291,"            throw new IllegalArgumentException(""Minimum abbreviation width is 4"");
",0,0,0,1,2,0,0,2,0,3,70,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6293,"        if (str.length() <= maxWidth) {
",2,1,0,2,5,0,4,0,0,7,31,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6294,"            return str;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6296,"        if (offset > str.length()) {
",2,1,0,2,5,0,4,0,0,7,28,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6297,"            offset = str.length();
",2,0,0,1,2,0,4,0,0,7,22,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6299,"        if (str.length() - offset < maxWidth - 3) {
",4,3,0,2,5,0,4,0,0,11,43,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6300,"            offset = str.length() - (maxWidth - 3);
",4,2,0,2,4,0,4,0,0,11,39,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6302,"        final String abrevMarker = ""..."";
",2,0,0,0,0,1,0,2,0,6,33,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6303,"        if (offset <= 4) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6304,"            return str.substring(0, maxWidth - 3) + abrevMarker;
",4,2,0,1,2,1,4,0,0,10,52,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6306,"        if (maxWidth < 7) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6307,"            throw new IllegalArgumentException(""Minimum abbreviation width with offset is 7"");
",0,0,0,1,2,0,0,2,0,3,82,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6309,"        if (offset + maxWidth - 3 < str.length()) {
",4,3,0,2,5,0,4,0,0,11,43,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6310,"            return abrevMarker + abbreviate(str.substring(offset), maxWidth - 3);
",4,2,0,2,4,1,8,0,0,14,69,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6312,"        return abrevMarker + str.substring(str.length() - (maxWidth - 3));
",4,3,0,3,6,1,8,0,0,15,66,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6345,"        if (isEmpty(str) || isEmpty(middle)) {
",0,1,0,3,7,0,8,0,0,9,38,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6346,"            return str;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6349,"        if (length >= str.length() || length < middle.length()+2) {
",4,4,0,3,7,0,8,0,0,16,59,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6350,"            return str;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6353,"        final int targetSting = length-middle.length();
",4,1,0,1,2,1,4,0,0,10,47,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6354,"        final int startOffset = targetSting/2+targetSting%2;
",6,3,0,0,0,1,0,0,0,10,52,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6355,"        final int endOffset = str.length()-targetSting/2;
",4,2,0,1,2,1,4,0,0,11,49,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6357,"        final StringBuilder builder = new StringBuilder(length);
",4,0,0,1,2,1,0,4,0,9,56,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6358,"        builder.append(str.substring(0,startOffset));
",0,0,0,2,4,0,10,0,0,10,45,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6359,"        builder.append(middle);
",0,0,0,1,2,0,6,0,0,6,23,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6360,"        builder.append(str.substring(endOffset));
",0,0,0,2,4,0,10,0,0,10,41,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6362,"        return builder.toString();
",0,0,0,1,2,1,4,0,0,4,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6396,"        if (str1 == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6397,"            return str2;
",2,0,0,0,0,1,0,0,0,2,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6399,"        if (str2 == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6400,"            return str1;
",2,0,0,0,0,1,0,0,0,2,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6402,"        final int at = indexOfDifference(str1, str2);
",2,0,0,1,2,1,6,0,0,9,45,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6403,"        if (at == INDEX_NOT_FOUND) {
",4,1,0,1,3,0,0,0,0,5,28,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6404,"            return EMPTY;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6406,"        return str2.substring(at);
",0,0,0,1,2,1,6,0,0,6,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6435,"        if (cs1 == cs2) {
",4,1,0,1,3,0,0,0,0,5,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6436,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,1,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6438,"        if (cs1 == null || cs2 == null) {
",4,3,0,1,3,0,0,0,0,7,33,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6439,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6442,"        for (i = 0; i < cs1.length() && i < cs2.length(); ++i) {
",8,3,0,3,7,0,8,0,0,21,56,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6443,"            if (cs1.charAt(i) != cs2.charAt(i)) {
",0,1,0,3,7,0,12,0,0,13,37,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6444,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6447,"        if (i < cs2.length() || i < cs1.length()) {
",4,3,0,3,7,0,8,0,0,15,43,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6448,"            return i;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6450,"        return INDEX_NOT_FOUND;
",2,0,0,0,0,1,0,0,0,2,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6486,"        if (css == null || css.length <= 1) {
",6,3,0,1,3,0,0,0,0,9,37,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6487,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,1,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6489,"        boolean anyStringNull = false;
",2,0,0,0,0,0,0,0,0,3,30,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6490,"        boolean allStringsNull = true;
",2,0,0,0,0,0,0,0,0,3,30,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6491,"        final int arrayLen = css.length;
",6,0,0,0,0,1,0,0,0,7,32,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6492,"        int shortestStrLen = Integer.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,6,39,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6493,"        int longestStrLen = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6498,"        for (int i = 0; i < arrayLen; i++) {
",8,1,0,1,3,0,0,0,0,10,36,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6499,"            if (css[i] == null) {
",0,1,1,2,5,0,0,0,0,5,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6500,"                anyStringNull = true;
",2,0,0,0,0,0,0,0,0,4,21,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6501,"                shortestStrLen = 0;
",2,0,0,0,0,0,0,0,0,3,19,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6503,"                allStringsNull = false;
",2,0,0,0,0,0,0,0,0,4,23,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6504,"                shortestStrLen = Math.min(css[i].length(), shortestStrLen);
",2,0,1,3,6,0,8,0,0,15,59,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6505,"                longestStrLen = Math.max(css[i].length(), longestStrLen);
",2,0,1,3,6,0,8,0,0,15,57,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6510,"        if (allStringsNull || longestStrLen == 0 && !anyStringNull) {
",6,3,0,1,3,0,0,0,0,10,61,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6511,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,1,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6515,"        if (shortestStrLen == 0) {
",2,1,0,1,3,0,0,0,0,3,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6516,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6520,"        int firstDiff = -1;
",2,0,0,0,0,0,0,0,0,3,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6521,"        for (int stringPos = 0; stringPos < shortestStrLen; stringPos++) {
",8,1,0,1,3,0,0,0,0,10,66,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6522,"            final char comparisonChar = css[0].charAt(stringPos);
",2,0,1,2,4,1,4,0,0,9,53,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6523,"            for (int arrayPos = 1; arrayPos < arrayLen; arrayPos++) {
",8,1,0,1,3,0,0,0,0,10,57,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6524,"                if (css[arrayPos].charAt(stringPos) != comparisonChar) {
",2,1,1,3,7,0,4,0,0,11,56,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6525,"                    firstDiff = stringPos;
",4,0,0,0,0,0,0,0,0,5,22,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6526,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6529,"            if (firstDiff != -1) {
",2,1,0,1,3,0,0,0,0,4,22,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6530,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6534,"        if (firstDiff == -1 && shortestStrLen != longestStrLen) {
",6,3,0,1,3,0,0,0,0,10,57,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6538,"            return shortestStrLen;
",2,0,0,0,0,1,0,0,0,2,22,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6540,"        return firstDiff;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6577,"        if (strs == null || strs.length == 0) {
",6,3,0,1,3,0,0,0,0,9,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6578,"            return EMPTY;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6580,"        final int smallestIndexOfDiff = indexOfDifference(strs);
",2,0,0,1,2,1,4,0,0,7,56,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6581,"        if (smallestIndexOfDiff == INDEX_NOT_FOUND) {
",4,1,0,1,3,0,0,0,0,5,45,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6583,"            if (strs[0] == null) {
",0,1,1,2,5,0,0,0,0,3,22,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6584,"                return EMPTY;
",2,0,0,0,0,1,0,0,0,2,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6586,"            return strs[0];
",0,0,1,1,2,1,0,0,0,2,15,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6587,"        } else if (smallestIndexOfDiff == 0) {
",2,1,0,1,4,0,0,0,0,3,38,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6589,"            return EMPTY;
",2,0,0,0,0,1,0,0,0,2,13,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6592,"            return strs[0].substring(0, smallestIndexOfDiff);
",0,0,1,2,4,1,4,0,0,6,49,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6635,"        if (s == null || t == null) {
",4,3,0,1,3,0,0,0,0,7,29,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6636,"            throw new IllegalArgumentException(""Strings must not be null"");
",0,0,0,1,2,0,0,2,0,4,63,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6656,"        int n = s.length(); // length of s
",2,0,0,1,2,0,4,0,0,6,34,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6657,"        int m = t.length(); // length of t
",2,0,0,1,2,0,4,0,0,6,34,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6659,"        if (n == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6660,"            return m;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6661,"        } else if (m == 0) {
",2,1,0,1,4,0,0,0,0,3,20,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6662,"            return n;
",2,0,0,0,0,1,0,0,0,2,9,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6665,"        if (n > m) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6667,"            final CharSequence tmp = s;
",4,0,0,0,0,1,0,2,0,7,27,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6668,"            s = t;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6669,"            t = tmp;
",4,0,0,0,0,0,0,0,0,5,8,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6670,"            n = m;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6671,"            m = t.length();
",2,0,0,1,2,0,4,0,0,7,15,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6674,"        int p[] = new int[n + 1]; //'previous' cost array, horizontally
",4,1,0,2,4,0,0,0,0,5,63,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6675,"        int d[] = new int[n + 1]; // cost array, horizontally
",4,1,0,2,4,0,0,0,0,5,53,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6686,"        for (i = 0; i <= n; i++) {
",8,1,0,1,3,0,0,0,0,11,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6687,"            p[i] = i;
",2,0,1,1,2,0,0,0,0,7,9,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6690,"        for (j = 1; j <= m; j++) {
",8,1,0,1,3,0,0,0,0,11,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6691,"            t_j = t.charAt(j - 1);
",4,1,0,1,2,0,4,0,0,10,22,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6692,"            d[0] = j;
",2,0,1,1,2,0,0,0,0,5,9,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6694,"            for (i = 1; i <= n; i++) {
",8,1,0,1,3,0,0,0,0,11,26,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6695,"                cost = s.charAt(i - 1) == t_j ? 0 : 1;
",6,2,0,1,2,0,4,0,0,13,38,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6697,"                d[i] = Math.min(Math.min(d[i - 1] + 1, p[i] + 1), p[i - 1] + cost);
",6,5,1,6,12,0,8,0,0,32,67,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6701,"            _d = p;
",4,0,0,0,0,0,0,0,0,5,7,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6702,"            p = d;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6703,"            d = _d;
",4,0,0,0,0,0,0,0,0,5,7,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6708,"        return p[n];
",0,0,1,1,2,1,0,0,0,4,12,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6744,"        if (s == null || t == null) {
",4,3,0,1,3,0,0,0,0,7,29,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6745,"            throw new IllegalArgumentException(""Strings must not be null"");
",0,0,0,1,2,0,0,2,0,4,63,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6747,"        if (threshold < 0) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6748,"            throw new IllegalArgumentException(""Threshold must not be negative"");
",0,0,0,1,2,0,0,2,0,3,69,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6795,"        int n = s.length(); // length of s
",2,0,0,1,2,0,4,0,0,6,34,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6796,"        int m = t.length(); // length of t
",2,0,0,1,2,0,4,0,0,6,34,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6799,"        if (n == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6800,"            return m <= threshold ? m : -1;
",6,1,0,0,0,1,0,0,0,8,31,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6801,"        } else if (m == 0) {
",2,1,0,1,4,0,0,0,0,3,20,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6802,"            return n <= threshold ? n : -1;
",6,1,0,0,0,1,0,0,0,8,31,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6805,"        if (n > m) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6807,"            final CharSequence tmp = s;
",4,0,0,0,0,1,0,2,0,7,27,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6808,"            s = t;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6809,"            t = tmp;
",4,0,0,0,0,0,0,0,0,5,8,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6810,"            n = m;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6811,"            m = t.length();
",2,0,0,1,2,0,4,0,0,7,15,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6814,"        int p[] = new int[n + 1]; // 'previous' cost array, horizontally
",4,1,0,2,4,0,0,0,0,5,64,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6815,"        int d[] = new int[n + 1]; // cost array, horizontally
",4,1,0,2,4,0,0,0,0,5,53,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6819,"        final int boundary = Math.min(n, threshold) + 1;
",2,1,0,1,2,1,8,0,0,12,48,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6820,"        for (int i = 0; i < boundary; i++) {
",8,1,0,1,3,0,0,0,0,10,36,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6821,"            p[i] = i;
",2,0,1,1,2,0,0,0,0,7,9,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6825,"        Arrays.fill(p, boundary, p.length, Integer.MAX_VALUE);
",8,0,0,1,2,0,8,0,0,16,54,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6826,"        Arrays.fill(d, Integer.MAX_VALUE);
",4,0,0,1,2,0,6,0,0,10,34,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6829,"        for (int j = 1; j <= m; j++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6830,"            final char t_j = t.charAt(j - 1); // jth character of t
",4,1,0,1,2,1,4,0,0,10,55,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6831,"            d[0] = j;
",2,0,1,1,2,0,0,0,0,5,9,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6834,"            final int min = Math.max(1, j - threshold);
",6,1,0,1,2,1,4,0,0,12,43,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6835,"            final int max = Math.min(n, j + threshold);
",6,1,0,1,2,1,6,0,0,14,43,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6838,"            if (min > max) {
",4,1,0,1,3,0,0,0,0,5,16,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6839,"                return -1;
",0,0,0,0,0,1,0,0,0,1,10,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6843,"            if (min > 1) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6844,"                d[min - 1] = Integer.MAX_VALUE;
",6,1,1,1,2,0,0,0,0,10,31,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6848,"            for (int i = min; i <= max; i++) {
",10,1,0,1,3,0,0,0,0,12,34,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6849,"                if (s.charAt(i - 1) == t_j) {
",4,2,0,2,5,0,4,0,0,10,29,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6851,"                    d[i] = p[i - 1];
",2,1,1,2,4,0,0,0,0,10,16,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6854,"                    d[i] = 1 + Math.min(Math.min(d[i - 1], p[i]), p[i - 1]);
",4,3,1,6,12,0,8,0,0,28,56,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6859,"            _d = p;
",4,0,0,0,0,0,0,0,0,5,7,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6860,"            p = d;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6861,"            d = _d;
",4,0,0,0,0,0,0,0,0,5,7,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6866,"        if (p[n] <= threshold) {
",2,1,1,2,5,0,0,0,0,7,24,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6867,"            return p[n];
",0,0,1,1,2,1,0,0,0,4,12,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6869,"        return -1;
",0,0,0,0,0,1,0,0,0,1,10,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6898,"        return startsWith(str, prefix, false);
",0,0,0,1,2,1,6,0,0,7,38,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6924,"        return startsWith(str, prefix, true);
",0,0,0,1,2,1,6,0,0,7,37,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6939,"        if (str == null || prefix == null) {
",4,3,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6940,"            return str == null && prefix == null;
",4,3,0,0,0,1,0,0,0,7,37,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6942,"        if (prefix.length() > str.length()) {
",0,1,0,3,7,0,8,0,0,9,37,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6943,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6945,"        return CharSequenceUtils.regionMatches(str, ignoreCase, 0, prefix, 0, prefix.length());
",0,0,0,2,4,1,14,0,0,14,87,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6968,"        if (isEmpty(string) || ArrayUtils.isEmpty(searchStrings)) {
",0,1,0,3,7,0,10,0,0,11,59,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6969,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6971,"        for (final CharSequence searchString : searchStrings) {
",4,0,0,1,3,1,0,2,0,7,55,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6972,"            if (StringUtils.startsWith(string, searchString)) {
",0,0,0,2,5,0,8,0,0,8,51,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6973,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,6976,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,7006,"        return endsWith(str, suffix, false);
",0,0,0,1,2,1,6,0,0,7,36,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,7033,"        return endsWith(str, suffix, true);
",0,0,0,1,2,1,6,0,0,7,35,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,7048,"        if (str == null || suffix == null) {
",4,3,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,7049,"            return str == null && suffix == null;
",4,3,0,0,0,1,0,0,0,7,37,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,7051,"        if (suffix.length() > str.length()) {
",0,1,0,3,7,0,8,0,0,9,37,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,7052,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,7054,"        final int strOffset = str.length() - suffix.length();
",2,1,0,2,4,1,8,0,0,12,53,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,7055,"        return CharSequenceUtils.regionMatches(str, ignoreCase, strOffset, suffix, 0, suffix.length());
",0,0,0,2,4,1,16,0,0,16,95,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,7100,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,7101,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,7103,"        return WHITESPACE_PATTERN.matcher(trim(str)).replaceAll(SPACE);
",0,0,0,3,6,1,12,0,0,12,63,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,7125,"        if (isEmpty(string) || ArrayUtils.isEmpty(searchStrings)) {
",0,1,0,3,7,0,10,0,0,11,59,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,7126,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,7128,"        for (final CharSequence searchString : searchStrings) {
",4,0,0,1,3,1,0,2,0,7,55,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,7129,"            if (StringUtils.endsWith(string, searchString)) {
",0,0,0,2,5,0,8,0,0,8,49,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,7130,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,7133,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,7148,"        if (str == null || isEmpty(suffix) || endsWith(str, suffix, ignoreCase)) {
",2,3,0,3,7,0,12,0,0,19,74,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,7149,"            return str;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,7151,"        if (suffixes != null && suffixes.length > 0) {
",6,3,0,1,3,0,0,0,0,9,46,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,7152,"            for (final CharSequence s : suffixes) {
",4,0,0,1,3,1,0,2,0,7,39,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,7153,"                if (endsWith(str, s, ignoreCase)) {
",0,0,0,2,5,0,8,0,0,8,35,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,7154,"                    return str;
",2,0,0,0,0,1,0,0,0,2,11,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,7158,"        return str + suffix.toString();
",2,1,0,1,2,1,4,0,0,7,31,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,7196,"        return appendIfMissing(str, suffix, false, suffixes);
",0,0,0,1,2,1,8,0,0,9,53,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,7234,"        return appendIfMissing(str, suffix, true, suffixes);
",0,0,0,1,2,1,8,0,0,9,52,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,7249,"        if (str == null || isEmpty(prefix) || startsWith(str, prefix, ignoreCase)) {
",2,3,0,3,7,0,12,0,0,19,76,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,7250,"            return str;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,7252,"        if (prefixes != null && prefixes.length > 0) {
",6,3,0,1,3,0,0,0,0,9,46,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,7253,"            for (final CharSequence p : prefixes) {
",4,0,0,1,3,1,0,2,0,7,39,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,7254,"                if (startsWith(str, p, ignoreCase)) {
",0,0,0,2,5,0,8,0,0,8,37,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,7255,"                    return str;
",2,0,0,0,0,1,0,0,0,2,11,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,7259,"        return prefix.toString() + str;
",2,1,0,1,2,1,4,0,0,7,31,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,7297,"        return prependIfMissing(str, prefix, false, prefixes);
",0,0,0,1,2,1,8,0,0,9,54,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,7335,"        return prependIfMissing(str, prefix, true, prefixes);
",0,0,0,1,2,1,8,0,0,9,53,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,1,7353,"        return charsetName == null ? new String(bytes) : new String(bytes, charsetName);
",8,1,0,2,4,1,0,4,0,15,80,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,78,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,79,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,100,"        return toInt(str, 0);
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,121,"        if(str == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,122,"            return defaultValue;
",2,0,0,0,0,1,0,0,0,2,20,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,125,"            return Integer.parseInt(str);
",0,0,0,1,2,1,6,0,0,6,29,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,126,"        } catch (final NumberFormatException nfe) {
",2,0,0,1,4,1,0,2,0,5,43,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,127,"            return defaultValue;
",2,0,0,0,0,1,0,0,0,2,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,149,"        return toLong(str, 0L);
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,170,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,171,"            return defaultValue;
",2,0,0,0,0,1,0,0,0,2,20,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,174,"            return Long.parseLong(str);
",0,0,0,1,2,1,6,0,0,6,27,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,175,"        } catch (final NumberFormatException nfe) {
",2,0,0,1,4,1,0,2,0,5,43,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,176,"            return defaultValue;
",2,0,0,0,0,1,0,0,0,2,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,199,"        return toFloat(str, 0.0f);
",0,0,0,1,2,1,4,0,0,4,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,222,"      if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,223,"          return defaultValue;
",2,0,0,0,0,1,0,0,0,2,20,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,226,"          return Float.parseFloat(str);
",0,0,0,1,2,1,6,0,0,6,29,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,227,"      } catch (final NumberFormatException nfe) {
",2,0,0,1,4,1,0,2,0,5,43,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,228,"          return defaultValue;
",2,0,0,0,0,1,0,0,0,2,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,251,"        return toDouble(str, 0.0d);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,274,"      if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,275,"          return defaultValue;
",2,0,0,0,0,1,0,0,0,2,20,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,278,"          return Double.parseDouble(str);
",0,0,0,1,2,1,6,0,0,6,31,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,279,"      } catch (final NumberFormatException nfe) {
",2,0,0,1,4,1,0,2,0,5,43,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,280,"          return defaultValue;
",2,0,0,0,0,1,0,0,0,2,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,303,"        return toByte(str, (byte) 0);
",0,0,0,2,4,1,4,0,0,4,29,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,324,"        if(str == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,325,"            return defaultValue;
",2,0,0,0,0,1,0,0,0,2,20,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,328,"            return Byte.parseByte(str);
",0,0,0,1,2,1,6,0,0,6,27,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,329,"        } catch (final NumberFormatException nfe) {
",2,0,0,1,4,1,0,2,0,5,43,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,330,"            return defaultValue;
",2,0,0,0,0,1,0,0,0,2,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,352,"        return toShort(str, (short) 0);
",0,0,0,2,4,1,4,0,0,4,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,373,"        if(str == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,374,"            return defaultValue;
",2,0,0,0,0,1,0,0,0,2,20,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,377,"            return Short.parseShort(str);
",0,0,0,1,2,1,6,0,0,6,29,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,378,"        } catch (final NumberFormatException nfe) {
",2,0,0,1,4,1,0,2,0,5,43,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,379,"            return defaultValue;
",2,0,0,0,0,1,0,0,0,2,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,452,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,455,"            throw new NumberFormatException(""A blank string is not a valid number"");
",0,0,0,1,2,0,0,2,0,3,72,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,469,"                return createBigInteger(str);
",0,0,0,1,2,1,4,0,0,4,29,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,472,"                return createLong(str);
",0,0,0,1,2,1,4,0,0,4,23,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,476,"        final char lastChar = str.charAt(str.length() - 1);
",2,1,0,2,4,1,8,0,0,12,51,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,480,"        final int decPos = str.indexOf('.');
",2,0,0,1,2,1,4,0,0,8,36,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,481,"        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present
",2,1,0,2,4,1,8,0,0,14,87,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,485,"        int numDecimals = 0; // Check required precision (LANG-693)
",2,0,0,1,2,0,0,0,0,2,59,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,486,"        if (decPos > -1) { // there is a decimal point
",2,1,0,1,3,0,0,0,0,4,46,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,488,"            if (expPos > -1) { // there is an exponent
",2,1,0,1,3,0,0,0,0,4,42,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,489,"                if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE
",6,3,0,2,5,0,4,0,0,13,89,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,490,"                    throw new NumberFormatException(str + "" is not a valid number."");
",2,1,0,1,2,0,0,2,0,6,65,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,492,"                dec = str.substring(decPos + 1, expPos);
",4,1,0,1,2,0,6,0,0,12,40,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,494,"                dec = str.substring(decPos + 1);
",4,1,0,1,2,0,4,0,0,10,32,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,496,"            mant = str.substring(0, decPos);
",2,0,0,1,2,0,6,0,0,9,32,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,497,"            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
",2,0,0,1,2,0,4,0,0,7,128,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,499,"            if (expPos > -1) {
",2,1,0,1,3,0,0,0,0,4,18,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,500,"                if (expPos > str.length()) { // prevents double exponent causing IOOBE
",2,1,0,2,5,0,4,0,0,7,70,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,501,"                    throw new NumberFormatException(str + "" is not a valid number."");
",2,1,0,1,2,0,0,2,0,6,65,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,503,"                mant = str.substring(0, expPos);
",2,0,0,1,2,0,6,0,0,9,32,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,505,"                mant = str;
",4,0,0,0,0,0,0,0,0,5,11,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,507,"            dec = null;
",2,0,0,0,0,0,0,0,0,3,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,509,"        if (!Character.isDigit(lastChar) && lastChar != '.') {
",2,2,0,2,5,0,6,0,0,12,54,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,510,"            if (expPos > -1 && expPos < str.length() - 1) {
",4,4,0,2,5,0,4,0,0,13,47,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,511,"                exp = str.substring(expPos + 1, str.length() - 1);
",4,2,0,2,4,0,8,0,0,15,50,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,513,"                exp = null;
",2,0,0,0,0,0,0,0,0,3,11,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,516,"            final String numeric = str.substring(0, str.length() - 1);
",2,1,0,2,4,1,8,2,0,14,58,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,517,"            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
",2,1,0,2,4,1,8,0,0,12,61,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,518,"            switch (lastChar) {
",2,0,0,1,3,0,0,0,0,2,19,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,521,"                    if (dec == null
",2,1,0,0,1,0,0,0,0,3,15,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,525,"                            return createLong(numeric);
",0,0,0,1,2,1,4,0,0,4,27,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,526,"                        } catch (final NumberFormatException nfe) { // NOPMD
",2,0,0,1,4,1,0,2,0,5,52,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,529,"                        return createBigInteger(numeric);
",0,0,0,1,2,1,4,0,0,4,33,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,532,"                    throw new NumberFormatException(str + "" is not a valid number."");
",2,1,0,1,2,0,0,2,0,6,65,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,536,"                        final Float f = NumberUtils.createFloat(numeric);
",2,0,0,1,2,1,6,2,0,11,49,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,537,"                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
",2,3,0,5,11,0,8,0,0,15,65,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,540,"                            return f;
",2,0,0,0,0,1,0,0,0,2,9,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,545,"                    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,543,"                    } catch (final NumberFormatException nfe) { // NOPMD
",2,0,0,1,4,1,0,2,0,5,52,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,550,"                        final Double d = NumberUtils.createDouble(numeric);
",2,0,0,1,2,1,6,2,0,11,51,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,551,"                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
",2,3,0,5,11,0,8,0,0,15,65,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,552,"                            return d;
",2,0,0,0,0,1,0,0,0,2,9,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,556,"                    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,554,"                    } catch (final NumberFormatException nfe) { // NOPMD
",2,0,0,1,4,1,0,2,0,5,52,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,558,"                        return createBigDecimal(numeric);
",0,0,0,1,2,1,4,0,0,4,33,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,559,"                    } catch (final NumberFormatException e) { // NOPMD
",2,0,0,1,4,1,0,2,0,5,50,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,564,"                    throw new NumberFormatException(str + "" is not a valid number."");
",2,1,0,1,2,0,0,2,0,6,65,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,570,"        if (expPos > -1 && expPos < str.length() - 1) {
",4,4,0,2,5,0,4,0,0,13,47,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,571,"            exp = str.substring(expPos + 1, str.length());
",4,1,0,2,4,0,8,0,0,14,46,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,573,"            exp = null;
",2,0,0,0,0,0,0,0,0,3,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,575,"        if (dec == null && exp == null) { // no decimal point and no exponent
",4,3,0,1,3,0,0,0,0,7,69,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,578,"                return createInteger(str);
",0,0,0,1,2,1,4,0,0,4,26,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,579,"            } catch (final NumberFormatException nfe) { // NOPMD
",2,0,0,1,4,1,0,2,0,5,52,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,583,"                return createLong(str);
",0,0,0,1,2,1,4,0,0,4,23,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,584,"            } catch (final NumberFormatException nfe) { // NOPMD
",2,0,0,1,4,1,0,2,0,5,52,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,587,"            return createBigInteger(str);
",0,0,0,1,2,1,4,0,0,4,29,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,591,"        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
",2,1,0,2,4,1,8,0,0,12,61,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,593,"            if(numDecimals <= 7){// If number has 7 or fewer digits past the decimal point then make it a float
",2,1,0,1,3,0,0,0,0,3,99,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,594,"                final Float f = createFloat(str);
",2,0,0,1,2,1,4,2,0,9,33,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,595,"                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
",2,3,0,5,11,0,8,0,0,15,65,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,596,"                    return f;
",2,0,0,0,0,1,0,0,0,2,9,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,601,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,599,"        } catch (final NumberFormatException nfe) { // NOPMD
",2,0,0,1,4,1,0,2,0,5,52,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,603,"            if(numDecimals <= 16){// If number has between 8 and 16 digits past the decimal point then make it a double
",2,1,0,1,3,0,0,0,0,3,107,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,604,"                final Double d = createDouble(str);
",2,0,0,1,2,1,4,2,0,9,35,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,605,"                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
",2,3,0,5,11,0,8,0,0,15,66,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,606,"                    return d;
",2,0,0,0,0,1,0,0,0,2,9,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,611,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,609,"        } catch (final NumberFormatException nfe) { // NOPMD
",2,0,0,1,4,1,0,2,0,5,52,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,613,"        return createBigDecimal(str);
",0,0,0,1,2,1,4,0,0,4,29,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,625,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,626,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,628,"        for (int i = str.length() - 1; i >= 0; i--) {
",6,2,0,2,5,0,4,0,0,13,45,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,629,"            if (str.charAt(i) != '0') {
",0,1,0,2,5,0,6,0,0,8,27,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,630,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,633,"        return str.length() > 0;
",0,1,0,1,2,1,4,0,0,5,24,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,647,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,648,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,650,"        return Float.valueOf(str);
",0,0,0,1,2,1,6,0,0,6,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,663,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,664,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,666,"        return Double.valueOf(str);
",0,0,0,1,2,1,6,0,0,6,27,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,681,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,698,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,699,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,701,"        return Long.decode(str);
",0,0,0,1,2,1,6,0,0,6,24,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,715,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,716,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,718,"        int pos = 0; // offset within string
",2,0,0,0,0,0,0,0,0,2,36,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,719,"        int radix = 10;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,720,"        boolean negate = false; // need to negate later?
",2,0,0,0,0,0,0,0,0,3,48,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,721,"        if (str.startsWith(""-"")) {
",0,0,0,2,5,0,4,0,0,5,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,722,"            negate = true;
",2,0,0,0,0,0,0,0,0,4,14,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,723,"            pos = 1;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,725,"        if (str.startsWith(""0x"", pos) || str.startsWith(""0x"", pos)) { // hex
",0,1,0,3,7,0,12,0,0,15,68,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,726,"            radix = 16;
",2,0,0,0,0,0,0,0,0,3,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,727,"            pos += 2;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,728,"        } else if (str.startsWith(""#"", pos)) { // alternative hex (allowed by Long/Integer)
",0,0,0,3,8,0,6,0,0,7,83,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,729,"            radix = 16;
",2,0,0,0,0,0,0,0,0,3,11,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,730,"            pos ++;
",2,0,0,0,0,0,0,0,0,3,7,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,731,"        } else if (str.startsWith(""0"", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits
",2,3,0,3,8,0,10,0,0,16,113,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,732,"            radix = 8;
",2,0,0,0,0,0,0,0,0,3,10,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,733,"            pos ++;
",2,0,0,0,0,0,0,0,0,3,7,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,736,"        final BigInteger value = new BigInteger(str.substring(pos), radix);
",4,0,0,2,4,1,6,4,0,15,67,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,737,"        return negate ? value.negate() : value;
",4,0,0,1,2,1,4,0,0,8,39,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,750,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,751,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,754,"        if (StringUtils.isBlank(str)) {
",0,0,0,2,5,0,6,0,0,6,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,755,"            throw new NumberFormatException(""A blank string is not a valid number"");
",0,0,0,1,2,0,0,2,0,3,72,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,757,"        if (str.trim().startsWith(""--"")) {
",0,0,0,3,7,0,6,0,0,7,34,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,762,"            throw new NumberFormatException(str + "" is not a valid number."");
",2,1,0,1,2,0,0,2,0,6,65,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,764,"        return new BigDecimal(str);
",2,0,0,1,2,1,0,2,0,4,27,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,779,"        validateArray(array);
",0,0,0,1,2,0,4,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,782,"        long min = array[0];
",2,0,1,1,2,0,0,0,0,4,20,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,783,"        for (int i = 1; i < array.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,784,"            if (array[i] < min) {
",2,1,1,2,5,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,785,"                min = array[i];
",2,0,1,1,2,0,0,0,0,7,15,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,789,"        return min;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,802,"        validateArray(array);
",0,0,0,1,2,0,4,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,805,"        int min = array[0];
",2,0,1,1,2,0,0,0,0,4,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,806,"        for (int j = 1; j < array.length; j++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,807,"            if (array[j] < min) {
",2,1,1,2,5,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,808,"                min = array[j];
",2,0,1,1,2,0,0,0,0,7,15,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,812,"        return min;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,825,"        validateArray(array);
",0,0,0,1,2,0,4,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,828,"        short min = array[0];
",2,0,1,1,2,0,0,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,829,"        for (int i = 1; i < array.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,830,"            if (array[i] < min) {
",2,1,1,2,5,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,831,"                min = array[i];
",2,0,1,1,2,0,0,0,0,7,15,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,835,"        return min;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,848,"        validateArray(array);
",0,0,0,1,2,0,4,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,851,"        byte min = array[0];
",2,0,1,1,2,0,0,0,0,4,20,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,852,"        for (int i = 1; i < array.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,853,"            if (array[i] < min) {
",2,1,1,2,5,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,854,"                min = array[i];
",2,0,1,1,2,0,0,0,0,7,15,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,858,"        return min;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,872,"        validateArray(array);
",0,0,0,1,2,0,4,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,875,"        double min = array[0];
",2,0,1,1,2,0,0,0,0,4,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,876,"        for (int i = 1; i < array.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,877,"            if (Double.isNaN(array[i])) {
",0,0,1,3,7,0,4,0,0,8,29,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,878,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,880,"            if (array[i] < min) {
",2,1,1,2,5,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,881,"                min = array[i];
",2,0,1,1,2,0,0,0,0,7,15,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,885,"        return min;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,899,"        validateArray(array);
",0,0,0,1,2,0,4,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,902,"        float min = array[0];
",2,0,1,1,2,0,0,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,903,"        for (int i = 1; i < array.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,904,"            if (Float.isNaN(array[i])) {
",0,0,1,3,7,0,4,0,0,8,28,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,905,"                return Float.NaN;
",4,0,0,0,0,1,0,0,0,4,17,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,907,"            if (array[i] < min) {
",2,1,1,2,5,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,908,"                min = array[i];
",2,0,1,1,2,0,0,0,0,7,15,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,912,"        return min;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,927,"        validateArray(array);
",0,0,0,1,2,0,4,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,930,"        long max = array[0];
",2,0,1,1,2,0,0,0,0,4,20,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,931,"        for (int j = 1; j < array.length; j++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,932,"            if (array[j] > max) {
",2,1,1,2,5,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,933,"                max = array[j];
",2,0,1,1,2,0,0,0,0,7,15,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,937,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,950,"        validateArray(array);
",0,0,0,1,2,0,4,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,953,"        int max = array[0];
",2,0,1,1,2,0,0,0,0,4,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,954,"        for (int j = 1; j < array.length; j++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,955,"            if (array[j] > max) {
",2,1,1,2,5,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,956,"                max = array[j];
",2,0,1,1,2,0,0,0,0,7,15,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,960,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,973,"        validateArray(array);
",0,0,0,1,2,0,4,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,976,"        short max = array[0];
",2,0,1,1,2,0,0,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,977,"        for (int i = 1; i < array.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,978,"            if (array[i] > max) {
",2,1,1,2,5,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,979,"                max = array[i];
",2,0,1,1,2,0,0,0,0,7,15,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,983,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,996,"        validateArray(array);
",0,0,0,1,2,0,4,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,999,"        byte max = array[0];
",2,0,1,1,2,0,0,0,0,4,20,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1000,"        for (int i = 1; i < array.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1001,"            if (array[i] > max) {
",2,1,1,2,5,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1002,"                max = array[i];
",2,0,1,1,2,0,0,0,0,7,15,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1006,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1020,"        validateArray(array);
",0,0,0,1,2,0,4,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1023,"        double max = array[0];
",2,0,1,1,2,0,0,0,0,4,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1024,"        for (int j = 1; j < array.length; j++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1025,"            if (Double.isNaN(array[j])) {
",0,0,1,3,7,0,4,0,0,8,29,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1026,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1028,"            if (array[j] > max) {
",2,1,1,2,5,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1029,"                max = array[j];
",2,0,1,1,2,0,0,0,0,7,15,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1033,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1047,"        validateArray(array);
",0,0,0,1,2,0,4,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1050,"        float max = array[0];
",2,0,1,1,2,0,0,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1051,"        for (int j = 1; j < array.length; j++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1052,"            if (Float.isNaN(array[j])) {
",0,0,1,3,7,0,4,0,0,8,28,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1053,"                return Float.NaN;
",4,0,0,0,0,1,0,0,0,4,17,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1055,"            if (array[j] > max) {
",2,1,1,2,5,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1056,"                max = array[j];
",2,0,1,1,2,0,0,0,0,7,15,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1060,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1070,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1071,"            throw new IllegalArgumentException(""The Array must not be null"");
",0,0,0,1,2,0,0,2,0,4,65,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1072,"        } else if (Array.getLength(array) == 0) {
",0,1,0,2,6,0,6,0,0,7,41,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1073,"            throw new IllegalArgumentException(""Array cannot be empty."");
",0,0,0,1,2,0,0,2,0,3,61,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1075,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1088,"        if (b < a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1089,"            a = b;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1091,"        if (c < a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1092,"            a = c;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1094,"        return a;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1106,"        if (b < a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1107,"            a = b;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1109,"        if (c < a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1110,"            a = c;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1112,"        return a;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1124,"        if (b < a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1125,"            a = b;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1127,"        if (c < a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1128,"            a = c;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1130,"        return a;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1142,"        if (b < a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1143,"            a = b;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1145,"        if (c < a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1146,"            a = c;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1148,"        return a;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1164,"        return Math.min(Math.min(a, b), c);
",0,0,0,2,4,1,14,0,0,14,35,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1180,"        return Math.min(Math.min(a, b), c);
",0,0,0,2,4,1,14,0,0,14,35,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1194,"        if (b > a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1195,"            a = b;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1197,"        if (c > a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1198,"            a = c;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1200,"        return a;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1212,"        if (b > a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1213,"            a = b;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1215,"        if (c > a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1216,"            a = c;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1218,"        return a;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1230,"        if (b > a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1231,"            a = b;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1233,"        if (c > a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1234,"            a = c;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1236,"        return a;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1248,"        if (b > a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1249,"            a = b;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1251,"        if (c > a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1252,"            a = c;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1254,"        return a;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1270,"        return Math.max(Math.max(a, b), c);
",0,0,0,2,4,1,14,0,0,14,35,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1286,"        return Math.max(Math.max(a, b), c);
",0,0,0,2,4,1,14,0,0,14,35,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1301,"        if (StringUtils.isEmpty(str)) {
",0,0,0,2,5,0,6,0,0,6,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1302,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1304,"        for (int i = 0; i < str.length(); i++) {
",6,1,0,2,5,0,4,0,0,12,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1305,"            if (!Character.isDigit(str.charAt(i))) {
",0,0,0,3,7,0,10,0,0,11,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1306,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1309,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1326,"        if (StringUtils.isEmpty(str)) {
",0,0,0,2,5,0,6,0,0,6,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1327,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1329,"        final char[] chars = str.toCharArray();
",2,0,0,2,4,1,4,0,0,7,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1330,"        int sz = chars.length;
",6,0,0,0,0,0,0,0,0,6,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1331,"        boolean hasExp = false;
",2,0,0,0,0,0,0,0,0,3,23,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1332,"        boolean hasDecPoint = false;
",2,0,0,0,0,0,0,0,0,3,28,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1333,"        boolean allowSigns = false;
",2,0,0,0,0,0,0,0,0,3,27,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1334,"        boolean foundDigit = false;
",2,0,0,0,0,0,0,0,0,3,27,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1336,"        final int start = (chars[0] == '-') ? 1 : 0;
",2,1,1,2,4,1,0,0,0,7,44,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1337,"        if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x') {
",6,7,1,3,7,0,0,0,0,21,71,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1338,"            int i = start + 2;
",4,1,0,0,0,0,0,0,0,5,18,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1339,"            if (i == sz) {
",4,1,0,1,3,0,0,0,0,5,14,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1340,"                return false; // str == ""0x""
",0,0,0,0,0,1,0,0,0,1,28,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1343,"            for (; i < chars.length; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1344,"                if ((chars[i] < '0' || chars[i] > '9')
",0,3,1,3,7,0,0,0,0,13,38,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1347,"                    return false;
",0,0,0,0,0,1,0,0,0,1,13,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1350,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1352,"        sz--; // don't want to loop to the last char, check it afterwords
",2,0,0,0,0,0,0,0,0,3,65,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1354,"        int i = start;
",4,0,0,0,0,0,0,0,0,4,14,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1357,"        while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {
",12,6,0,2,5,0,0,0,0,19,61,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1358,"            if (chars[i] >= '0' && chars[i] <= '9') {
",0,3,1,3,7,0,0,0,0,13,41,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1359,"                foundDigit = true;
",2,0,0,0,0,0,0,0,0,4,18,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1360,"                allowSigns = false;
",2,0,0,0,0,0,0,0,0,4,19,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1362,"            } else if (chars[i] == '.') {
",0,1,1,2,6,0,0,0,0,6,29,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1363,"                if (hasDecPoint || hasExp) {
",4,1,0,1,3,0,0,0,0,5,28,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1365,"                    return false;
",0,0,0,0,0,1,0,0,0,1,13,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1367,"                hasDecPoint = true;
",2,0,0,0,0,0,0,0,0,4,19,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1368,"            } else if (chars[i] == 'e' || chars[i] == 'E') {
",0,3,1,3,8,0,0,0,0,13,48,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1370,"                if (hasExp) {
",2,0,0,1,3,0,0,0,0,2,13,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1372,"                    return false;
",0,0,0,0,0,1,0,0,0,1,13,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1374,"                if (!foundDigit) {
",2,0,0,1,3,0,0,0,0,3,18,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1375,"                    return false;
",0,0,0,0,0,1,0,0,0,1,13,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1377,"                hasExp = true;
",2,0,0,0,0,0,0,0,0,4,14,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1378,"                allowSigns = true;
",2,0,0,0,0,0,0,0,0,4,18,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1379,"            } else if (chars[i] == '+' || chars[i] == '-') {
",0,3,1,3,8,0,0,0,0,13,48,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1380,"                if (!allowSigns) {
",2,0,0,1,3,0,0,0,0,3,18,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1381,"                    return false;
",0,0,0,0,0,1,0,0,0,1,13,13,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1383,"                allowSigns = false;
",2,0,0,0,0,0,0,0,0,4,19,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1384,"                foundDigit = false; // we need a digit after the E
",2,0,0,0,0,0,0,0,0,4,50,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1386,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1388,"            i++;
",2,0,0,0,0,0,0,0,0,3,4,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1390,"        if (i < chars.length) {
",6,1,0,1,3,0,0,0,0,7,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1391,"            if (chars[i] >= '0' && chars[i] <= '9') {
",0,3,1,3,7,0,0,0,0,13,41,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1393,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1395,"            if (chars[i] == 'e' || chars[i] == 'E') {
",0,3,1,3,7,0,0,0,0,13,41,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1397,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1399,"            if (chars[i] == '.') {
",0,1,1,2,5,0,0,0,0,6,22,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1400,"                if (hasDecPoint || hasExp) {
",4,1,0,1,3,0,0,0,0,5,28,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1402,"                    return false;
",0,0,0,0,0,1,0,0,0,1,13,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1405,"                return foundDigit;
",2,0,0,0,0,1,0,0,0,2,18,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1407,"            if (!allowSigns
",2,0,0,0,1,0,0,0,0,3,15,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1412,"                return foundDigit;
",2,0,0,0,0,1,0,0,0,2,18,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1414,"            if (chars[i] == 'l'
",0,1,1,1,3,0,0,0,0,6,19,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1417,"                return foundDigit && !hasExp && !hasDecPoint;
",6,1,0,0,0,1,0,0,0,9,45,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1420,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,1,1424,"        return !allowSigns && foundDigit;
",4,1,0,0,0,1,0,0,0,6,33,4,0.00000,0
