dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1134,"            if (zone.useDaylightTime()
",0,0,0,1,3,0,4,0,0,4,26,7,1,1
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1138,"                buffer.append(getTimeZoneDisplay(zone, false, mStyle, mLocale));
",0,0,0,2,4,0,12,0,0,13,64,8,1,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1140,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1238,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,1,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1241,"            if (obj instanceof TimeZoneDisplayKey) {
",2,0,0,1,3,0,0,2,0,4,40,6,1,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1242,"                TimeZoneDisplayKey other = (TimeZoneDisplayKey)obj;
",4,0,0,1,2,0,0,4,0,8,51,7,1,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1243,"                return
",0,0,0,0,0,0,0,0,0,0,6,3,1,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,734,"            } else if (value < 100) {
",2,1,0,1,4,0,0,0,0,3,25,6,1.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,735,"                buffer.append((char)(value / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,9,1.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,736,"                buffer.append((char)(value % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,9,1.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1216,"                           boolean daylight, int style, Locale locale) {
",6,0,0,0,2,0,0,2,0,8,45,4,0.80000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1217,"            mTimeZone = timeZone;
",4,0,0,0,0,0,0,0,0,5,21,5,0.80000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1218,"            if (daylight) {
",2,0,0,1,3,0,0,0,0,2,15,5,0.80000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1219,"                style |= 0x80000000;
",2,0,0,0,0,0,0,0,0,3,20,7,0.80000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1221,"            mStyle = style;
",4,0,0,0,0,0,0,0,0,5,15,5,0.80000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1222,"            mLocale = locale;
",4,0,0,0,0,0,0,0,0,5,17,5,0.80000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1223,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.80000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1230,"            return (mStyle * 31 + mLocale.hashCode() ) * 31 + mTimeZone.hashCode();
",2,4,0,3,6,0,8,0,0,14,71,5,0.80000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,259,"                if (tokenLen >= 4) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.80000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,262,"                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);
",10,0,0,1,2,0,0,2,0,13,64,9,0.80000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,264,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.80000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1079,"        TimeZoneDisplayKey key = new TimeZoneDisplayKey(tz, daylight, style, locale);
",10,0,0,1,2,0,0,4,0,14,77,4,0.80000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1080,"        String value = cTimeZoneDisplayCache.get(key);
",2,0,0,1,2,0,6,2,0,10,46,4,0.80000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1081,"        if (value == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.80000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1083,"            value = tz.getDisplayName(daylight, style, locale);
",2,0,0,1,2,0,10,0,0,13,51,6,0.80000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1084,"            String prior = cTimeZoneDisplayCache.putIfAbsent(key, value);
",2,0,0,1,2,0,8,2,0,12,61,6,0.80000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1085,"            if (prior != null) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.80000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1089,"        return value;
",2,0,0,0,0,0,0,0,0,2,13,4,0.80000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,692,"            buffer.append(mValues[calendar.get(mField)]);
",0,0,1,3,6,0,10,0,0,12,45,6,0.80000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,693,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.80000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1109,"        TimeZoneNameRule(TimeZone timeZone, Locale locale, int style) {
",8,0,0,1,3,0,0,4,0,12,63,3,0.80000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1110,"            mLocale = locale;
",4,0,0,0,0,0,0,0,0,5,17,5,0.80000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1111,"            mStyle = style;
",4,0,0,0,0,0,0,0,0,5,15,5,0.80000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1112,"            zone = timeZone;
",4,0,0,0,0,0,0,0,0,5,16,5,0.80000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1114,"            mStandard = getTimeZoneDisplay(timeZone, false, style, locale);
",2,0,0,1,2,0,8,0,0,12,63,5,0.80000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1115,"            mDaylight = getTimeZoneDisplay(timeZone, true, style, locale);
",2,0,0,1,2,0,8,0,0,12,62,5,0.80000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1116,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.80000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1126,"            return Math.max(mStandard.length(), mDaylight.length());
",0,0,0,3,6,0,12,0,0,12,56,6,0.80000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,732,"            if (value < 10) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.66667,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,740,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.66667,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,450,"            return MODULO_HOUR_STRATEGY;
",2,0,0,0,0,0,0,0,0,2,28,5,0.26667,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,987,"        TwelveHourField(NumberRule rule) {
",4,0,0,1,3,0,0,2,0,6,34,3,0.26667,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,988,"            mRule = rule;
",4,0,0,0,0,0,0,0,0,5,13,5,0.26667,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,989,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.26667,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,996,"            return mRule.estimateLength();
",0,0,0,1,2,0,4,0,0,4,30,6,0.26667,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,220,"                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));
",6,0,0,2,4,0,4,2,0,13,70,7,0.26667,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,221,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.26667,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,446,"            return getLocaleSpecificStrategy(Calendar.AM_PM, definingCalendar);
",4,0,0,1,2,0,4,0,0,8,67,6,0.23529,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,250,"                rule = new TextField(Calendar.AM_PM, AmPmStrings);
",8,0,0,1,2,0,0,2,0,11,50,7,0.22222,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,251,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.22222,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,359,"            return new UnpaddedNumberField(field);
",2,0,0,1,2,0,0,2,0,4,38,6,0.17391,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,707,"        UnpaddedNumberField(int field) {
",4,0,0,1,3,0,0,0,0,4,32,3,0.17391,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,708,"            mField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.17391,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,709,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.17391,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,716,"            return 4;
",0,0,0,0,0,0,0,0,0,0,9,3,0.17391,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,8,420,"        return printer.format(calendar);
",0,0,0,1,2,0,6,0,0,6,32,5,0.11429,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,77,"            locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,6,0.10811,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,8,119,"        return cache.getInstance(pattern, null, null);
",0,0,0,1,2,0,6,0,0,6,46,5,0.10811,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,415,"        return format(calendar, new StringBuffer(mMaxLengthEstimate)).toString();
",2,0,0,3,6,0,6,2,0,10,73,5,0.09524,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,441,"        return applyRules(calendar, buf);
",0,0,0,1,2,0,6,0,0,6,33,5,0.09524,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,616,"            buffer.append(mValue);
",0,0,0,1,2,0,6,0,0,6,22,6,0.09091,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,617,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.09091,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,74,"            timeZone = TimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.08889,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,880,"            appendTo(buffer, calendar.get(mField));
",0,0,0,2,4,0,10,0,0,10,39,6,0.08696,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,881,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.08696,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,888,"            if (value < 100) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.08696,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,889,"                buffer.append((char)(value / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,8,0.08696,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,890,"                buffer.append((char)(value % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,8,0.08696,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,894,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.08696,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,453,"        for (Rule rule : mRules) {
",4,0,0,1,3,0,0,2,0,6,26,4,0.08333,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,454,"            rule.appendTo(buf, calendar);
",0,0,0,1,2,0,8,0,0,8,29,7,0.08333,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,456,"        return buf;
",2,0,0,0,0,0,0,0,0,2,11,4,0.08333,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,463,"        	return getLocaleSpecificStrategy(Calendar.ZONE_OFFSET, definingCalendar);
",4,0,0,1,2,0,4,0,0,8,73,6,0.07692,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,686,"        TimeZoneStrategy(Locale locale) {
",4,0,0,1,3,0,0,2,0,6,33,3,0.07692,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,680,"        final SortedMap<String, TimeZone> tzNames= new TreeMap<String, TimeZone>(String.CASE_INSENSITIVE_ORDER);
",6,0,0,1,2,1,0,12,0,19,104,3,0.07692,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,687,"            for(String id : TimeZone.getAvailableIDs()) {
",2,0,0,2,5,0,4,2,0,8,45,5,0.07692,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,688,"                if(id.startsWith(""GMT"")) {
",0,0,0,2,5,0,4,0,0,5,26,8,0.07692,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,689,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.07692,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,691,"                TimeZone tz= TimeZone.getTimeZone(id);
",2,0,0,1,2,0,6,2,0,10,38,7,0.07692,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,692,"                tzNames.put(tz.getDisplayName(false, TimeZone.SHORT, locale), tz);
",4,0,0,2,4,0,12,0,0,17,66,8,0.07692,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,693,"                tzNames.put(tz.getDisplayName(false, TimeZone.LONG, locale), tz);
",4,0,0,2,4,0,12,0,0,17,65,8,0.07692,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,694,"                if(tz.useDaylightTime()) {
",0,0,0,2,5,0,4,0,0,4,26,8,0.07692,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,695,"                    tzNames.put(tz.getDisplayName(true, TimeZone.SHORT, locale), tz);
",4,0,0,2,4,0,12,0,0,17,65,10,0.07692,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,696,"                    tzNames.put(tz.getDisplayName(true, TimeZone.LONG, locale), tz);
",4,0,0,2,4,0,12,0,0,17,64,10,0.07692,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,699,"            StringBuilder sb= new StringBuilder();
",2,0,0,1,2,0,0,4,0,6,38,5,0.07692,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,700,"            sb.append(""(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|"");
",0,0,0,7,15,0,4,0,0,5,60,6,0.07692,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,701,"            for(String id : tzNames.keySet()) {
",2,0,0,2,5,0,4,2,0,8,35,5,0.07692,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,702,"                escapeRegex(sb, id, false).append('|');
",0,0,0,2,4,0,8,0,0,10,39,8,0.07692,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,703,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07692,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,704,"            sb.setCharAt(sb.length()-1, ')');
",0,1,0,2,5,0,8,0,0,10,33,6,0.07692,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,705,"            validTimeZoneChars= sb.toString();
",2,0,0,1,2,0,4,0,0,7,34,5,0.07692,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,706,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07692,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,721,"            regex.append(validTimeZoneChars);
",0,0,0,1,2,0,6,0,0,6,33,6,0.07692,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,722,"            return true;
",0,0,0,0,0,0,0,0,0,1,12,5,0.07692,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,454,"            return MINUTE_STRATEGY;
",2,0,0,0,0,0,0,0,0,2,23,5,0.07547,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,305,"                if(unquote) {
",2,0,0,1,3,0,0,0,0,2,13,7,0.07407,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,346,"        return definingCalendar.getDisplayNames(field, Calendar.ALL_STYLES, locale);
",4,0,0,1,2,0,8,0,0,12,76,5,0.07407,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,560,"        TextStrategy(int field, Calendar definingCalendar, Locale locale) {
",8,0,0,1,3,0,0,4,0,12,67,3,0.07407,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,561,"            this.field= field;
",4,0,0,0,0,0,0,0,0,5,18,5,0.07407,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,562,"            this.keyValues= getDisplayNames(field, definingCalendar, locale);
",2,0,0,1,2,0,8,0,0,11,65,5,0.07407,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,563,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07407,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,578,"            regex.append('(');
",0,0,0,1,3,0,4,0,0,5,18,6,0.07407,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,579,"            for(String textKeyValue : keyValues.keySet()) {
",2,0,0,2,5,0,4,2,0,8,47,5,0.07407,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,580,"                escapeRegex(regex, textKeyValue, false).append('|');
",0,0,0,2,4,0,8,0,0,10,52,8,0.07407,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,581,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07407,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,582,"            regex.setCharAt(regex.length()-1, ')');
",0,1,0,2,5,0,8,0,0,10,39,6,0.07407,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,583,"            return true;
",0,0,0,0,0,0,0,0,0,1,12,5,0.07407,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,226,"                rule = selectNumberRule(Calendar.MINUTE, tokenLen);
",6,0,0,1,2,0,4,0,0,11,51,7,0.07273,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,227,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.07273,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,667,"        TextField(int field, String[] values) {
",6,0,0,2,5,0,0,2,0,8,39,3,0.07143,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,668,"            mField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.07143,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,669,"            mValues = values;
",4,0,0,0,0,0,0,0,0,5,17,5,0.07143,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,670,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07143,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,677,"            int max = 0;
",2,0,0,0,0,0,0,0,0,2,12,6,0.07143,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,678,"            for (int i=mValues.length; --i >= 0; ) {
",8,1,0,1,3,0,0,0,0,10,40,5,0.07143,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,679,"                int len = mValues[i].length();
",2,0,1,2,4,0,2,0,0,8,30,8,0.07143,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,680,"                if (len > max) {
",4,1,0,1,3,0,0,0,0,5,16,7,0.07143,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,681,"                    max = len;
",4,0,0,0,0,0,0,0,0,5,10,9,0.07143,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,683,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07143,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,684,"            return max;
",2,0,0,0,0,0,0,0,0,2,11,5,0.07143,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,476,"    	synchronized(caches) {
",2,0,0,1,3,0,0,0,0,2,22,4,0.06667,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,477,"    		if(caches[field]==null) {
",0,1,1,2,5,0,0,0,0,5,25,6,0.06667,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,478,"    			caches[field]= new ConcurrentHashMap<Locale,Strategy>(3);
",0,0,1,2,4,0,0,6,0,11,57,8,0.06667,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,480,"    		return caches[field];
",0,0,1,1,2,0,0,0,0,4,21,7,0.06667,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,492,"    	ConcurrentMap<Locale,Strategy> cache = getCache(field);
",2,0,0,1,2,0,4,6,0,12,55,4,0.06667,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,493,"    	Strategy strategy= cache.get(Integer.valueOf(field));
",2,0,0,2,4,0,10,2,0,14,53,4,0.06667,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,494,"        if(strategy==null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.06667,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,495,"        	strategy= field==Calendar.ZONE_OFFSET
",8,1,0,0,0,0,0,0,0,10,37,6,0.06667,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,498,"            Strategy inCache= cache.putIfAbsent(locale, strategy);
",2,0,0,1,2,0,8,2,0,12,54,6,0.06667,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,499,"            if(inCache!=null) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.06667,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,503,"        return strategy;
",2,0,0,0,0,0,0,0,0,2,16,4,0.06667,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,141,"            collector.add(currentStrategy);
",0,0,0,1,2,0,6,0,0,6,31,7,0.04762,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,525,"            char c= formatField.charAt(0);
",2,0,0,1,2,0,4,0,0,6,30,6,0.04762,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,526,"            if(c=='\'') {
",2,1,0,1,3,0,0,0,0,4,13,5,0.04762,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,529,"            return Character.isDigit(c);
",0,0,0,1,2,0,6,0,0,6,28,6,0.04762,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,132,"                collector.add(currentStrategy);
",0,0,0,1,2,0,6,0,0,6,31,9,0.04651,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,300,"        regex.append(""\\Q"");
",0,0,0,1,2,0,4,0,0,5,20,5,0.04651,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,301,"        for(int i= 0; i<value.length(); ++i) {
",6,1,0,2,5,0,4,0,0,12,38,4,0.04651,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,302,"            char c= value.charAt(i);
",2,0,0,1,2,0,6,0,0,8,24,7,0.04651,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,303,"            switch(c) {
",2,0,0,1,3,0,0,0,0,2,11,6,0.04651,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,331,"            regex.append(c);
",0,0,0,1,2,0,6,0,0,6,16,7,0.04651,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,333,"        regex.append(""\\E"");
",0,0,0,1,2,0,4,0,0,5,20,5,0.04651,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,334,"        return regex;
",2,0,0,0,0,0,0,0,0,2,13,4,0.04651,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,426,"            return new CopyQuotedStrategy(formatField);
",2,0,0,1,2,0,0,2,0,4,43,6,0.04651,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,65,"public class FastDateParser implements DateParser, Serializable {
",2,0,0,0,1,1,0,4,0,7,65,1,0.04651,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,863,"        TwoDigitNumberField(int field) {
",4,0,0,1,3,0,0,0,0,4,32,3,0.04651,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,864,"            mField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.04651,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,865,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04651,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,872,"            return 2;
",0,0,0,0,0,0,0,0,0,0,9,3,0.04651,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,361,"            return new TwoDigitNumberField(field);
",2,0,0,1,2,0,0,2,0,4,38,6,0.04651,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,516,"        CopyQuotedStrategy(String formatField) {
",4,0,0,1,3,0,0,2,0,6,40,3,0.04651,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,517,"            this.formatField= formatField;
",4,0,0,0,0,0,0,0,0,5,30,5,0.04651,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,518,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04651,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,537,"            escapeRegex(regex, formatField, true);
",0,0,0,1,2,0,6,0,0,7,38,6,0.04651,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,538,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,5,0.04651,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,35,"abstract class FormatCache<F extends Format> {
",4,0,0,0,1,1,0,2,0,7,46,1,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,41,"    private final ConcurrentMap<MultipartKey, F> cInstanceCache 
",2,0,0,0,0,2,0,6,0,10,59,2,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,171,"    private static class MultipartKey {
",2,0,0,0,1,2,0,0,0,4,35,2,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,70,"        if (pattern == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,73,"        if (timeZone == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,76,"        if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,79,"        MultipartKey key = new MultipartKey(pattern, timeZone, locale);
",8,0,0,1,2,0,0,4,0,12,63,4,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,80,"        F format = cInstanceCache.get(key);
",2,0,0,1,2,0,6,2,0,10,35,4,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,81,"        if (format == null) {           
",2,1,0,1,3,0,0,0,0,3,21,4,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,82,"            format = createInstance(pattern, timeZone, locale);
",2,0,0,1,2,0,8,0,0,11,51,6,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,83,"            F previousValue= cInstanceCache.putIfAbsent(key, format);
",2,0,0,1,2,0,8,2,0,12,57,6,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,84,"            if (previousValue != null) {
",2,1,0,1,3,0,0,0,0,3,28,6,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,90,"        return format;
",2,0,0,0,0,0,0,0,0,2,14,4,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,633,"            if(parser.isNextNumber()) {
",0,0,0,2,5,0,4,0,0,4,27,6,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,637,"                regex.append(""(\\p{IsNd}++)"");
",0,0,0,3,6,0,4,0,0,5,30,8,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,639,"            return true;
",0,0,0,0,0,0,0,0,0,1,12,5,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,97,"    protected FastDateParser(String pattern, TimeZone timeZone, Locale locale) {
",8,0,0,1,3,1,0,6,0,15,76,2,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,98,"        this.pattern = pattern;
",4,0,0,0,0,0,0,0,0,5,23,4,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,99,"        this.timeZone = timeZone;
",4,0,0,0,0,0,0,0,0,5,25,4,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,100,"        this.locale = locale;
",4,0,0,0,0,0,0,0,0,5,21,4,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,101,"        init();
",0,0,0,1,2,0,2,0,0,2,7,5,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,102,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,109,"        Calendar definingCalendar = Calendar.getInstance(timeZone, locale);
",2,0,0,1,2,0,8,2,0,12,67,4,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,110,"		thisYear= definingCalendar.get(Calendar.YEAR);
",6,0,0,1,2,0,4,0,0,11,46,4,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,112,"        StringBuilder regex= new StringBuilder();
",2,0,0,1,2,0,0,4,0,6,41,4,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,113,"        List<Strategy> collector = new ArrayList<Strategy>();
",2,0,0,1,2,0,0,8,0,10,53,4,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,115,"        Matcher patternMatcher= formatPattern.matcher(pattern);
",2,0,0,1,2,0,6,2,0,10,55,4,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,116,"        if(!patternMatcher.lookingAt()) {
",0,0,0,2,5,0,4,0,0,5,33,4,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,121,"        currentFormatField= patternMatcher.group();
",2,0,0,1,2,0,4,0,0,7,43,4,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,122,"        Strategy currentStrategy= getStrategy(currentFormatField, definingCalendar);
",2,0,0,1,2,0,6,2,0,10,76,4,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,124,"            patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());
",0,0,0,3,6,0,12,0,0,12,72,7,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,125,"            if(!patternMatcher.lookingAt()) {
",0,0,0,2,5,0,4,0,0,5,33,6,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,126,"                nextStrategy = null;
",2,0,0,0,0,0,0,0,0,3,20,8,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,127,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,129,"            String nextFormatField= patternMatcher.group();
",2,0,0,1,2,0,4,2,0,8,47,6,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,130,"            nextStrategy = getStrategy(nextFormatField, definingCalendar);
",2,0,0,1,2,0,6,0,0,9,62,6,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,131,"            if(currentStrategy.addRegex(this, regex)) {
",0,0,0,2,5,0,6,0,0,6,43,7,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,134,"            currentFormatField= nextFormatField;
",4,0,0,0,0,0,0,0,0,5,36,6,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,135,"            currentStrategy= nextStrategy;
",4,0,0,0,0,0,0,0,0,5,30,6,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,136,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,137,"        if (patternMatcher.regionStart() != patternMatcher.regionEnd()) {
",0,1,0,3,7,0,8,0,0,9,65,4,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,140,"        if(currentStrategy.addRegex(this, regex)) {
",0,0,0,2,5,0,6,0,0,6,43,5,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,143,"        currentFormatField= null;
",2,0,0,0,0,0,0,0,0,3,25,4,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,144,"        strategies= collector.toArray(new Strategy[collector.size()]);
",2,0,0,3,6,0,8,2,0,13,62,4,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,145,"        parsePattern= Pattern.compile(regex.toString());
",2,0,0,2,4,0,8,0,0,11,48,4,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,146,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,367,"        return nextStrategy!=null && nextStrategy.isNumber();
",2,2,0,1,2,0,4,0,0,8,53,4,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,419,"        switch(formatField.charAt(0)) {
",0,0,0,2,5,0,4,0,0,4,31,5,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,8,88,"    private static final FormatCache<FastDateFormat> cache= new FormatCache<FastDateFormat>() {
",2,0,0,1,3,3,0,8,0,13,91,2,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,8,91,"            return new FastDateFormat(pattern, timeZone, locale);
",6,0,0,1,2,0,0,2,0,8,53,9,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,8,368,"    protected FastDateFormat(String pattern, TimeZone timeZone, Locale locale) {
",8,0,0,1,3,1,0,6,0,15,76,2,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,8,369,"        printer= new FastDatePrinter(pattern, timeZone, locale);
",8,0,0,1,2,0,0,2,0,11,56,4,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,8,370,"        parser= new FastDateParser(pattern, timeZone, locale);
",8,0,0,1,2,0,0,2,0,11,54,4,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,8,371,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,8,88,"    private static final FormatCache<FastDateFormat> cache= new FormatCache<FastDateFormat>() {
",2,0,0,1,3,3,0,8,0,13,91,2,0.04598,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,44,"    private static final ConcurrentMap<MultipartKey, String> cDateTimeInstanceCache 
",2,0,0,0,0,3,0,6,0,11,79,2,0.04545,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,747,"    private static final Strategy NUMBER_MONTH_STRATEGY = new NumberStrategy(Calendar.MONTH) {
",6,0,0,1,3,3,0,4,0,13,90,2,0.04545,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,616,"        NumberStrategy(int field) {
",4,0,0,1,3,0,0,0,0,4,27,3,0.04545,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,617,"             this.field= field;
",4,0,0,0,0,0,0,0,0,5,18,5,0.04545,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,618,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04545,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,73,"    static final Locale JAPANESE_IMPERIAL = new Locale(""ja"",""JP"",""JP"");
",2,0,0,1,2,2,0,4,0,11,67,2,0.04545,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,409,"    private static final Pattern formatPattern= Pattern.compile(
",2,0,0,0,1,3,4,2,0,11,60,2,0.04545,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,468,"    private static ConcurrentMap<Locale, Strategy>[] caches = new ConcurrentMap[Calendar.FIELD_COUNT];
",6,0,0,2,4,2,0,8,0,16,98,2,0.04545,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,660,"    private static final Strategy ABBREVIATED_YEAR_STRATEGY = new NumberStrategy(Calendar.YEAR) {
",6,0,0,1,3,3,0,4,0,13,93,2,0.04545,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,747,"    private static final Strategy NUMBER_MONTH_STRATEGY = new NumberStrategy(Calendar.MONTH) {
",6,0,0,1,3,3,0,4,0,13,90,2,0.04545,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,753,"    private static final Strategy LITERAL_YEAR_STRATEGY = new NumberStrategy(Calendar.YEAR);
",6,0,0,1,2,3,0,4,0,13,88,2,0.04545,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,754,"    private static final Strategy WEEK_OF_YEAR_STRATEGY = new NumberStrategy(Calendar.WEEK_OF_YEAR);
",6,0,0,1,2,3,0,4,0,13,96,2,0.04545,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,755,"    private static final Strategy WEEK_OF_MONTH_STRATEGY = new NumberStrategy(Calendar.WEEK_OF_MONTH);
",6,0,0,1,2,3,0,4,0,13,98,2,0.04545,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,756,"    private static final Strategy DAY_OF_YEAR_STRATEGY = new NumberStrategy(Calendar.DAY_OF_YEAR);
",6,0,0,1,2,3,0,4,0,13,94,2,0.04545,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,757,"    private static final Strategy DAY_OF_MONTH_STRATEGY = new NumberStrategy(Calendar.DAY_OF_MONTH);
",6,0,0,1,2,3,0,4,0,13,96,2,0.04545,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,758,"    private static final Strategy DAY_OF_WEEK_IN_MONTH_STRATEGY = new NumberStrategy(Calendar.DAY_OF_WEEK_IN_MONTH);
",6,0,0,1,2,3,0,4,0,13,112,2,0.04545,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,759,"    private static final Strategy HOUR_OF_DAY_STRATEGY = new NumberStrategy(Calendar.HOUR_OF_DAY);
",6,0,0,1,2,3,0,4,0,13,94,2,0.04545,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,760,"    private static final Strategy MODULO_HOUR_OF_DAY_STRATEGY = new NumberStrategy(Calendar.HOUR_OF_DAY) {
",6,0,0,1,3,3,0,4,0,13,102,2,0.04545,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,766,"    private static final Strategy MODULO_HOUR_STRATEGY = new NumberStrategy(Calendar.HOUR) {
",6,0,0,1,3,3,0,4,0,13,88,2,0.04545,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,772,"    private static final Strategy HOUR_STRATEGY = new NumberStrategy(Calendar.HOUR);
",6,0,0,1,2,3,0,4,0,13,80,2,0.04545,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,773,"    private static final Strategy MINUTE_STRATEGY = new NumberStrategy(Calendar.MINUTE);
",6,0,0,1,2,3,0,4,0,13,84,2,0.04545,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,774,"    private static final Strategy SECOND_STRATEGY = new NumberStrategy(Calendar.SECOND);
",6,0,0,1,2,3,0,4,0,13,84,2,0.04545,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,775,"    private static final Strategy MILLISECOND_STRATEGY = new NumberStrategy(Calendar.MILLISECOND);
",6,0,0,1,2,3,0,4,0,13,94,2,0.04545,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,179,"        public MultipartKey(Object... keys) {
",4,0,0,1,3,1,0,2,0,7,37,3,0.04545,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,180,"            this.keys = keys;
",4,0,0,0,0,0,0,0,0,5,17,5,0.04545,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,181,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04545,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,199,"            if(hashCode==0) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.04545,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,200,"                int rc= 0;
",2,0,0,0,0,0,0,0,0,2,10,8,0.04545,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,201,"                for(Object key : keys) {
",4,0,0,1,3,0,0,2,0,6,24,7,0.04545,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,202,"                    if(key!=null) {
",2,1,0,1,3,0,0,0,0,3,15,9,0.04545,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,203,"                        rc= rc*7 + key.hashCode();
",4,2,0,1,2,0,4,0,0,11,26,11,0.04545,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,206,"                hashCode= rc;
",4,0,0,0,0,0,0,0,0,5,13,7,0.04545,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,208,"            return hashCode;
",2,0,0,0,0,0,0,0,0,2,16,5,0.04545,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,660,"    private static final Strategy ABBREVIATED_YEAR_STRATEGY = new NumberStrategy(Calendar.YEAR) {
",6,0,0,1,3,3,0,4,0,13,93,2,0.04545,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,760,"    private static final Strategy MODULO_HOUR_OF_DAY_STRATEGY = new NumberStrategy(Calendar.HOUR_OF_DAY) {
",6,0,0,1,3,3,0,4,0,13,102,2,0.04545,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,766,"    private static final Strategy MODULO_HOUR_STRATEGY = new NumberStrategy(Calendar.HOUR) {
",6,0,0,1,3,3,0,4,0,13,88,2,0.04545,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,312,"                    buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,11,0.04301,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,313,"                    i++;
",2,0,0,0,0,0,0,0,0,3,4,10,0.04301,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,317,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04301,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,599,"        CharacterLiteral(char value) {
",4,0,0,1,3,0,0,0,0,4,30,3,0.04124,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,600,"            mValue = value;
",4,0,0,0,0,0,0,0,0,5,15,5,0.04124,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,601,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04124,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,608,"            return 1;
",0,0,0,0,0,0,0,0,0,0,9,3,0.04124,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,275,"                    rule = new CharacterLiteral(sub.charAt(0));
",2,0,0,2,4,0,4,2,0,9,43,9,0.04124,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,273,"                String sub = token.substring(1);
",2,0,0,1,2,0,4,2,0,8,32,7,0.04040,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,274,"                if (sub.length() == 1) {
",0,1,0,2,5,0,4,0,0,5,24,7,0.04040,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,320,"            buf.append('\'');
",0,0,0,1,2,0,4,0,0,5,17,7,0.04040,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,322,"            boolean inLiteral = false;
",2,0,0,0,0,0,0,0,0,3,26,7,0.04040,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,324,"            for (; i < length; i++) {
",6,1,0,1,3,0,0,0,0,8,25,6,0.04040,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,325,"                c = pattern.charAt(i);
",2,0,0,1,2,0,6,0,0,9,22,8,0.04040,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,327,"                if (c == '\'') {
",2,1,0,1,3,0,0,0,0,4,16,8,0.04040,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,335,"                } else if (!inLiteral &&
",2,1,0,0,2,0,0,0,0,4,24,9,0.04040,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,337,"                    i--;
",2,0,0,0,0,0,0,0,0,3,4,11,0.04040,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,338,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.04040,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,340,"                    buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,12,0.04040,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,357,"        switch (padding) {
",2,0,0,1,3,0,0,0,0,2,18,4,0.04040,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,136,"    protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
",8,0,0,1,3,1,0,6,0,15,77,2,0.04000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,137,"        mPattern = pattern;
",4,0,0,0,0,0,0,0,0,5,19,4,0.04000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,138,"        mTimeZone = timeZone;
",4,0,0,0,0,0,0,0,0,5,21,4,0.04000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,139,"        mLocale = locale;
",4,0,0,0,0,0,0,0,0,5,17,4,0.04000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,141,"        init();
",0,0,0,1,2,0,2,0,0,2,7,5,0.04000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,142,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1067,"    private static ConcurrentMap<TimeZoneDisplayKey, String> cTimeZoneDisplayCache =
",2,0,0,0,0,2,0,6,0,10,80,2,0.04000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,148,"        List<Rule> rulesList = parsePattern();
",2,0,0,1,2,0,2,4,0,8,38,4,0.04000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,149,"        mRules = rulesList.toArray(new Rule[rulesList.size()]);
",2,0,0,3,6,0,8,2,0,13,55,4,0.04000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,151,"        int len = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.04000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,152,"        for (int i=mRules.length; --i >= 0; ) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.04000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,153,"            len += mRules[i].estimateLength();
",2,0,1,2,4,0,2,0,0,9,34,6,0.04000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,156,"        mMaxLengthEstimate = len;
",4,0,0,0,0,0,0,0,0,5,25,4,0.04000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,157,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,168,"        DateFormatSymbols symbols = new DateFormatSymbols(mLocale);
",4,0,0,1,2,0,0,4,0,8,59,4,0.04000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,169,"        List<Rule> rules = new ArrayList<Rule>();
",2,0,0,1,2,0,0,8,0,10,41,4,0.04000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,171,"        String[] ERAs = symbols.getEras();
",2,0,0,2,4,0,4,2,0,8,34,4,0.04000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,172,"        String[] months = symbols.getMonths();
",2,0,0,2,4,0,4,2,0,8,38,4,0.04000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,173,"        String[] shortMonths = symbols.getShortMonths();
",2,0,0,2,4,0,4,2,0,8,48,4,0.04000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,174,"        String[] weekdays = symbols.getWeekdays();
",2,0,0,2,4,0,4,2,0,8,42,4,0.04000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,175,"        String[] shortWeekdays = symbols.getShortWeekdays();
",2,0,0,2,4,0,4,2,0,8,52,4,0.04000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,176,"        String[] AmPmStrings = symbols.getAmPmStrings();
",2,0,0,2,4,0,4,2,0,8,48,4,0.04000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,178,"        int length = mPattern.length();
",2,0,0,1,2,0,4,0,0,6,31,5,0.04000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,179,"        int[] indexRef = new int[1];
",2,0,0,2,4,0,0,0,0,2,28,5,0.04000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,181,"        for (int i = 0; i < length; i++) {
",8,1,0,1,3,0,0,0,0,10,34,4,0.04000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,182,"            indexRef[0] = i;
",2,0,1,1,2,0,0,0,0,5,16,6,0.04000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,183,"            String token = parseToken(mPattern, indexRef);
",2,0,0,1,2,0,6,2,0,10,46,6,0.04000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,184,"            i = indexRef[0];
",2,0,1,1,2,0,0,0,0,5,16,6,0.04000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,186,"            int tokenLen = token.length();
",2,0,0,1,2,0,4,0,0,6,30,7,0.04000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,187,"            if (tokenLen == 0) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.04000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,192,"            char c = token.charAt(0);
",2,0,0,1,2,0,4,0,0,6,25,7,0.04000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,194,"            switch (c) {
",2,0,0,1,3,0,0,0,0,2,12,6,0.04000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,284,"            rules.add(rule);
",0,0,0,1,2,0,6,0,0,6,16,7,0.04000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,287,"        return rules;
",2,0,0,0,0,0,0,0,0,2,13,4,0.04000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,298,"        StringBuilder buf = new StringBuilder();
",2,0,0,1,2,0,0,4,0,6,40,4,0.04000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,300,"        int i = indexRef[0];
",2,0,1,1,2,0,0,0,0,4,20,5,0.04000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,301,"        int length = pattern.length();
",2,0,0,1,2,0,4,0,0,6,30,5,0.04000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,303,"        char c = pattern.charAt(i);
",2,0,0,1,2,0,6,0,0,8,27,5,0.04000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,304,"        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {
",8,7,0,1,3,0,0,0,0,19,51,4,0.04000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,307,"            buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,7,0.04000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,309,"            while (i + 1 < length) {
",4,2,0,1,3,0,0,0,0,6,24,6,0.04000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,310,"                char peek = pattern.charAt(i + 1);
",4,1,0,1,2,0,4,0,0,9,34,9,0.04000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,311,"                if (peek == c) {
",4,1,0,1,3,0,0,0,0,5,16,8,0.04000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,345,"        indexRef[0] = i;
",2,0,1,1,2,0,0,0,0,5,16,4,0.04000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,346,"        return buf.toString();
",0,0,0,1,2,0,4,0,0,4,22,5,0.04000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,54,"        return getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, TimeZone.getDefault(), Locale.getDefault());
",8,0,0,3,6,0,10,0,0,18,107,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,71,"            throw new NullPointerException(""pattern must not be null"");
",0,0,0,1,2,0,0,2,0,4,59,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,87,"                format= previousValue;              
",4,0,0,0,0,0,0,0,0,5,22,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,120,"        if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,121,"            locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,123,"        String pattern = getPatternForStyle(dateStyle, timeStyle, locale);
",2,0,0,1,2,0,8,2,0,12,66,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,124,"        return getInstance(pattern, timeZone, locale);
",0,0,0,1,2,0,8,0,0,8,46,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,137,"        MultipartKey key = new MultipartKey(dateStyle, timeStyle, locale);
",8,0,0,1,2,0,0,4,0,12,66,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,139,"        String pattern = cDateTimeInstanceCache.get(key);
",2,0,0,1,2,0,6,2,0,10,49,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,140,"        if (pattern == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,143,"                if (dateStyle == null) {
",2,1,0,1,3,0,0,0,0,3,24,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,144,"                    formatter = DateFormat.getTimeInstance(timeStyle, locale);                    
",2,0,0,1,2,0,8,0,0,11,58,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,146,"                else if (timeStyle == null) {
",2,1,0,1,3,0,0,0,0,3,29,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,147,"                    formatter = DateFormat.getDateInstance(dateStyle, locale);                    
",2,0,0,1,2,0,8,0,0,11,58,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,150,"                    formatter = DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
",2,0,0,1,2,0,10,0,0,13,73,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,152,"                pattern = ((SimpleDateFormat)formatter).toPattern();
",4,0,0,3,6,0,2,2,0,9,52,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,153,"                String previous = cDateTimeInstanceCache.putIfAbsent(key, pattern);
",2,0,0,1,2,0,8,2,0,12,67,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,154,"                if (previous != null) {
",2,1,0,1,3,0,0,0,0,3,23,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,158,"                    pattern= previous;
",4,0,0,0,0,0,0,0,0,5,18,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,162,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,160,"            } catch (ClassCastException ex) {
",2,0,0,1,4,0,0,2,0,4,33,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,161,"                throw new IllegalArgumentException(""No date time pattern for locale: "" + locale);
",2,1,0,1,2,0,0,2,0,6,81,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,164,"        return pattern;
",2,0,0,0,0,0,0,0,0,2,15,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,754,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,755,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,747,"        static final UnpaddedMonthField INSTANCE = new UnpaddedMonthField();
",2,0,0,1,2,2,0,4,0,8,68,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,762,"            return 2;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,770,"            appendTo(buffer, calendar.get(Calendar.MONTH) + 1);
",4,1,0,2,4,0,8,0,0,13,51,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,771,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,778,"            if (value < 10) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,779,"                buffer.append((char)(value + '0'));
",2,1,0,3,6,0,4,0,0,8,35,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,781,"                buffer.append((char)(value / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,782,"                buffer.append((char)(value % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,784,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,800,"        PaddedNumberField(int field, int size) {
",6,0,0,1,3,0,0,0,0,6,40,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,801,"            if (size < 3) {
",2,1,0,1,3,0,0,0,0,3,15,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,803,"                throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,805,"            mField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,806,"            mSize = size;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,807,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,814,"            return 4;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,822,"            appendTo(buffer, calendar.get(mField));
",0,0,0,2,4,0,10,0,0,10,39,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,823,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,830,"            if (value < 100) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,831,"                for (int i = mSize; --i >= 2; ) {
",6,1,0,1,3,0,0,0,0,8,33,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,832,"                    buffer.append('0');
",0,0,0,1,2,0,4,0,0,5,19,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,834,"                buffer.append((char)(value / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,835,"                buffer.append((char)(value % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,838,"                if (value < 1000) {
",2,1,0,1,3,0,0,0,0,3,19,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,839,"                    digits = 3;
",2,0,0,0,0,0,0,0,0,3,11,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,841,"                    Validate.isTrue(value > -1, ""Negative values should not be possible"", value);
",2,1,0,1,2,0,6,0,0,11,77,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,842,"                    digits = Integer.toString(value).length();
",2,0,0,2,4,0,8,0,0,11,42,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,844,"                for (int i = mSize; --i >= digits; ) {
",8,1,0,1,3,0,0,0,0,10,38,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,845,"                    buffer.append('0');
",0,0,0,1,2,0,4,0,0,5,19,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,847,"                buffer.append(Integer.toString(value));
",0,0,0,2,4,0,10,0,0,10,39,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,849,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,750,"            return iValue-1;
",2,1,0,0,0,0,0,0,0,3,16,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,625,"            return true;
",0,0,0,0,0,0,0,0,0,1,12,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,634,"                regex.append(""(\\p{IsNd}{"").append(parser.getFieldWidth()).append(""}+)"");
",0,0,0,7,14,0,12,0,0,14,73,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,647,"            cal.set(field, modify(Integer.parseInt(value)));
",0,0,0,3,6,0,14,0,0,14,48,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,648,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,656,"            return iValue;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,117,"            throw new IllegalArgumentException(
",0,0,0,0,1,0,0,2,0,2,35,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,138,"            throw new IllegalArgumentException(""Failed to parse \""""+pattern+""\"" ; gave up at index ""+patternMatcher.regionStart());
",2,1,0,2,4,0,4,2,0,11,119,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,155,"        return pattern;
",2,0,0,0,0,0,0,0,0,2,15,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,163,"        return timeZone;
",2,0,0,0,0,0,0,0,0,2,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,171,"        return locale;
",2,0,0,0,0,0,0,0,0,2,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,176,"        return parsePattern;
",2,0,0,0,0,0,0,0,0,2,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,189,"        if (! (obj instanceof FastDateParser) ) {
",2,0,0,2,5,0,0,2,0,5,41,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,190,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,192,"        FastDateParser other = (FastDateParser) obj;
",4,0,0,1,2,0,0,4,0,8,44,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,193,"        return pattern.equals(other.pattern)
",4,0,0,1,2,0,4,0,0,8,36,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,205,"        return pattern.hashCode() + 13 * (timeZone.hashCode() + 13 * locale.hashCode());
",0,4,0,4,8,0,12,0,0,16,80,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,215,"        return ""FastDateParser["" + pattern + "","" + locale + "","" + timeZone.getID() + ""]"";
",4,1,0,2,4,0,4,0,0,13,81,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,229,"        in.defaultReadObject();
",0,0,0,1,2,0,4,0,0,4,23,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,230,"        init();
",0,0,0,1,2,0,2,0,0,2,7,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,231,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,238,"        return parse(source);
",0,0,0,1,2,0,4,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,246,"        Date date= parse(source, new ParsePosition(0));
",2,0,0,2,4,0,4,4,0,10,47,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,247,"        if(date==null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,249,"            if (locale.equals(JAPANESE_IMPERIAL)) {
",0,0,0,2,5,0,6,0,0,6,39,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,250,"                throw new ParseException(
",0,0,0,0,1,0,0,2,0,2,25,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,254,"            throw new ParseException(""Unparseable date: \""""+source+""\"" does not match ""+parsePattern.pattern(), 0);
",2,1,0,2,4,0,4,2,0,11,103,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,256,"        return date;
",2,0,0,0,0,0,0,0,0,2,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,264,"        return parse(source, pos);
",0,0,0,1,2,0,6,0,0,6,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,272,"        int offset= pos.getIndex();
",2,0,0,1,2,0,4,0,0,6,27,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,273,"        Matcher matcher= parsePattern.matcher(source.substring(offset));
",2,0,0,2,4,0,10,2,0,14,64,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,274,"        if(!matcher.lookingAt()) {
",0,0,0,2,5,0,4,0,0,5,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,275,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,278,"        Calendar cal= Calendar.getInstance(timeZone, locale);
",2,0,0,1,2,0,8,2,0,12,53,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,279,"        cal.clear();
",0,0,0,1,2,0,4,0,0,4,12,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,281,"        for(int i=0; i<strategies.length;) {
",8,1,0,1,3,0,0,0,0,9,36,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,282,"            Strategy strategy= strategies[i++];
",4,0,1,1,2,0,0,2,0,9,35,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,283,"            strategy.setCalendar(this, cal, matcher.group(i));
",0,0,0,2,4,0,12,0,0,12,50,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,284,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,285,"        pos.setIndex(offset+matcher.end());
",2,1,0,2,4,0,8,0,0,11,35,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,286,"        return cal.getTime();
",0,0,0,1,2,0,4,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,306,"                    if(++i==value.length()) {
",2,1,0,2,5,0,4,0,0,8,25,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,307,"                        return regex;
",2,0,0,0,0,0,0,0,0,2,13,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,309,"                    c= value.charAt(i);
",2,0,0,1,2,0,6,0,0,9,19,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,313,"                if(++i==value.length()) {
",2,1,0,2,5,0,4,0,0,8,25,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,314,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,323,"                regex.append(c); // we always want the original \
",0,0,0,1,2,0,6,0,0,6,49,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,324,"                c = value.charAt(i); // Is it followed by E ?
",2,0,0,1,2,0,6,0,0,9,45,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,325,"                if (c == 'E') { // \E detected
",2,1,0,1,3,0,0,0,0,4,30,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,326,"                  regex.append(""E\\\\E\\""); // see comment above
",0,0,0,1,2,0,4,0,0,5,46,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,327,"                  c = 'Q'; // appended below
",2,0,0,0,0,0,0,0,0,4,26,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,355,"        int trial= twoDigitYear + thisYear - thisYear%100;
",8,3,0,0,0,0,0,0,0,11,50,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,356,"        if(trial < thisYear+20) {
",4,2,0,1,3,0,0,0,0,6,25,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,357,"            return trial;
",2,0,0,0,0,0,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,359,"        return trial-100;
",2,1,0,0,0,0,0,0,0,3,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,375,"        return currentFormatField.length();
",0,0,0,1,2,0,4,0,0,4,35,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,421,"            if(formatField.length()>2) {
",0,1,0,2,5,0,4,0,0,5,28,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,422,"                formatField= formatField.substring(1, formatField.length()-1);
",2,1,0,2,4,0,8,0,0,12,62,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,428,"            return DAY_OF_YEAR_STRATEGY;
",2,0,0,0,0,0,0,0,0,2,28,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,430,"            return getLocaleSpecificStrategy(Calendar.DAY_OF_WEEK, definingCalendar);
",4,0,0,1,2,0,4,0,0,8,73,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,432,"            return DAY_OF_WEEK_IN_MONTH_STRATEGY;
",2,0,0,0,0,0,0,0,0,2,37,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,434,"            return getLocaleSpecificStrategy(Calendar.ERA, definingCalendar);
",4,0,0,1,2,0,4,0,0,8,65,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,436,"            return MODULO_HOUR_OF_DAY_STRATEGY;
",2,0,0,0,0,0,0,0,0,2,35,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,438,"            return HOUR_STRATEGY;
",2,0,0,0,0,0,0,0,0,2,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,440,"            return formatField.length()>=3 ?getLocaleSpecificStrategy(Calendar.MONTH, definingCalendar) :NUMBER_MONTH_STRATEGY;
",6,1,0,2,4,0,8,0,0,15,115,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,442,"            return MILLISECOND_STRATEGY;
",2,0,0,0,0,0,0,0,0,2,28,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,444,"            return WEEK_OF_MONTH_STRATEGY;
",2,0,0,0,0,0,0,0,0,2,30,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,448,"            return DAY_OF_MONTH_STRATEGY;
",2,0,0,0,0,0,0,0,0,2,29,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,452,"            return HOUR_OF_DAY_STRATEGY;
",2,0,0,0,0,0,0,0,0,2,28,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,456,"            return SECOND_STRATEGY;
",2,0,0,0,0,0,0,0,0,2,23,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,458,"            return WEEK_OF_YEAR_STRATEGY;
",2,0,0,0,0,0,0,0,0,2,29,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,460,"            return formatField.length()>2 ?LITERAL_YEAR_STRATEGY :ABBREVIATED_YEAR_STRATEGY;
",4,1,0,1,2,0,4,0,0,9,80,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,481,"    	}
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,500,"                return inCache;
",2,0,0,0,0,0,0,0,0,2,15,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1032,"        TwentyFourHourField(NumberRule rule) {
",4,0,0,1,3,0,0,2,0,6,38,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1033,"            mRule = rule;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1034,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1041,"            return mRule.estimateLength();
",0,0,0,1,2,0,4,0,0,4,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1049,"            int value = calendar.get(Calendar.HOUR_OF_DAY);
",6,0,0,1,2,0,4,0,0,10,47,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1050,"            if (value == 0) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1051,"                value = calendar.getMaximum(Calendar.HOUR_OF_DAY) + 1;
",6,1,0,1,2,0,4,0,0,12,54,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1053,"            mRule.appendTo(buffer, value);
",0,0,0,1,2,0,8,0,0,8,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1054,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1061,"            mRule.appendTo(buffer, value);
",0,0,0,1,2,0,8,0,0,8,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1062,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,907,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,908,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,901,"        static final TwoDigitYearField INSTANCE = new TwoDigitYearField();
",2,0,0,1,2,2,0,4,0,8,66,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,915,"            return 2;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,923,"            appendTo(buffer, calendar.get(Calendar.YEAR) % 100);
",4,1,0,2,4,0,8,0,0,13,52,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,924,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,931,"            buffer.append((char)(value / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,932,"            buffer.append((char)(value % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,933,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,570,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,591,"            Integer iVal = keyValues.get(value);
",2,0,0,1,2,0,6,2,0,10,36,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,592,"            if(iVal == null) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,593,"                StringBuilder sb= new StringBuilder(value);
",4,0,0,1,2,0,0,4,0,8,43,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,594,"                sb.append("" not in ("");
",0,0,0,1,3,0,4,0,0,5,23,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,595,"                for(String textKeyValue : keyValues.keySet()) {
",2,0,0,2,5,0,4,2,0,8,47,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,596,"                    sb.append(textKeyValue).append(' ');
",0,0,0,2,4,0,8,0,0,9,36,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,597,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,598,"                sb.setCharAt(sb.length()-1, ')');
",0,1,0,2,5,0,8,0,0,10,33,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,599,"                throw new IllegalArgumentException(sb.toString());
",0,0,0,2,4,0,4,2,0,6,50,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,601,"            cal.set(field, iVal.intValue());
",0,0,0,2,4,0,10,0,0,10,32,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,602,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FormatCache,8,191,"            return Arrays.equals(keys, ((MultipartKey)obj).keys);
",4,0,0,3,6,0,6,2,0,12,53,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,892,"                buffer.append(Integer.toString(value));
",0,0,0,2,4,0,10,0,0,10,39,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1004,"            int value = calendar.get(Calendar.HOUR);
",6,0,0,1,2,0,4,0,0,10,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1005,"            if (value == 0) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1006,"                value = calendar.getLeastMaximum(Calendar.HOUR) + 1;
",6,1,0,1,2,0,4,0,0,12,52,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1008,"            mRule.appendTo(buffer, value);
",0,0,0,1,2,0,8,0,0,8,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1009,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1016,"            mRule.appendTo(buffer, value);
",0,0,0,1,2,0,8,0,0,8,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1017,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1158,"        TimeZoneNumberRule(boolean colon) {
",4,0,0,1,3,0,0,0,0,4,35,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1159,"            mColon = colon;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1160,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1148,"        static final TimeZoneNumberRule INSTANCE_COLON = new TimeZoneNumberRule(true);
",2,0,0,1,2,2,0,4,0,9,78,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1149,"        static final TimeZoneNumberRule INSTANCE_NO_COLON = new TimeZoneNumberRule(false);
",2,0,0,1,2,2,0,4,0,9,82,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1167,"            return 5;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1175,"            int offset = calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET);
",10,1,0,2,4,0,8,0,0,19,84,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1177,"            if (offset < 0) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1178,"                buffer.append('-');
",0,0,0,1,2,0,4,0,0,5,19,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1179,"                offset = -offset;
",4,0,0,0,0,0,0,0,0,6,17,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1181,"                buffer.append('+');
",0,0,0,1,2,0,4,0,0,5,19,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1184,"            int hours = offset / (60 * 60 * 1000);
",4,2,0,1,2,0,0,0,0,6,38,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1185,"            buffer.append((char)(hours / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1186,"            buffer.append((char)(hours % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1188,"            if (mColon) {
",2,0,0,1,3,0,0,0,0,2,13,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1189,"                buffer.append(':');
",0,0,0,1,2,0,4,0,0,5,19,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1192,"            int minutes = offset / (60 * 1000) - 60 * hours;
",6,4,0,1,2,0,0,0,0,10,48,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1193,"            buffer.append((char)(minutes / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,42,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1194,"            buffer.append((char)(minutes % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,42,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1195,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,713,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,731,"            if(value.charAt(0)=='+' || value.charAt(0)=='-') {
",0,3,0,3,7,0,8,0,0,13,50,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,732,"                tz= TimeZone.getTimeZone(""GMT""+value);
",4,1,0,1,2,0,4,0,0,11,38,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,734,"            else if(value.startsWith(""GMT"")) {
",0,0,0,2,5,0,4,0,0,5,34,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,735,"                tz= TimeZone.getTimeZone(value);
",2,0,0,1,2,0,6,0,0,9,32,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,738,"                tz= tzNames.get(value);
",2,0,0,1,2,0,6,0,0,9,23,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,739,"                if(tz==null) {
",2,1,0,1,3,0,0,0,0,3,14,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,740,"                    throw new IllegalArgumentException(value + "" is not a supported timezone name"");
",2,1,0,1,2,0,0,2,0,6,80,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,743,"            cal.setTimeZone(tz);
",0,0,0,1,2,0,6,0,0,6,20,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,744,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1239,"                return true;
",0,0,0,0,0,0,0,0,0,1,12,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1248,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,188,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,196,"                rule = new TextField(Calendar.ERA, ERAs);
",8,0,0,1,2,0,0,2,0,11,41,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,197,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,199,"                if (tokenLen == 2) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,200,"                    rule = TwoDigitYearField.INSTANCE;
",6,0,0,0,0,0,0,0,0,7,34,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,202,"                    rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen);
",10,1,0,1,2,0,2,0,0,14,68,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,204,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,206,"                if (tokenLen >= 4) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,207,"                    rule = new TextField(Calendar.MONTH, months);
",8,0,0,1,2,0,0,2,0,11,45,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,208,"                } else if (tokenLen == 3) {
",2,1,0,1,4,0,0,0,0,3,27,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,209,"                    rule = new TextField(Calendar.MONTH, shortMonths);
",8,0,0,1,2,0,0,2,0,11,50,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,210,"                } else if (tokenLen == 2) {
",2,1,0,1,4,0,0,0,0,3,27,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,211,"                    rule = TwoDigitMonthField.INSTANCE;
",6,0,0,0,0,0,0,0,0,7,35,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,213,"                    rule = UnpaddedMonthField.INSTANCE;
",6,0,0,0,0,0,0,0,0,7,35,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,215,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,217,"                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);
",6,0,0,1,2,0,4,0,0,11,57,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,218,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,223,"                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);
",6,0,0,1,2,0,4,0,0,11,56,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,224,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,229,"                rule = selectNumberRule(Calendar.SECOND, tokenLen);
",6,0,0,1,2,0,4,0,0,11,51,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,230,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,232,"                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);
",6,0,0,1,2,0,4,0,0,11,56,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,233,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,235,"                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);
",12,1,0,1,2,0,0,2,0,16,84,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,236,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,238,"                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);
",6,0,0,1,2,0,4,0,0,11,56,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,239,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,241,"                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);
",6,0,0,1,2,0,4,0,0,11,65,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,242,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,244,"                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);
",6,0,0,1,2,0,4,0,0,11,57,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,245,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,247,"                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);
",6,0,0,1,2,0,4,0,0,11,58,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,248,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,253,"                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));
",6,0,0,2,4,0,4,2,0,13,81,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,254,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,256,"                rule = selectNumberRule(Calendar.HOUR, tokenLen);
",6,0,0,1,2,0,4,0,0,11,49,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,257,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,260,"                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);
",10,0,0,1,2,0,0,2,0,13,63,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,266,"                if (tokenLen == 1) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,267,"                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;
",6,0,0,0,0,0,0,0,0,7,44,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,269,"                    rule = TimeZoneNumberRule.INSTANCE_COLON;
",6,0,0,0,0,0,0,0,0,7,41,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,271,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,277,"                    rule = new StringLiteral(sub);
",4,0,0,1,2,0,0,2,0,7,30,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,279,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,281,"                throw new IllegalArgumentException(""Illegal pattern component: "" + token);
",2,1,0,1,2,0,0,2,0,6,74,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,328,"                    if (i + 1 < length && pattern.charAt(i + 1) == '\'') {
",6,5,0,2,5,0,4,0,0,16,54,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,330,"                        i++;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,331,"                        buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,13,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,333,"                        inLiteral = !inLiteral;
",4,0,0,0,0,0,0,0,0,6,23,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,363,"            return new PaddedNumberField(field, padding);
",4,0,0,1,2,0,0,2,0,6,45,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,380,"        if (obj instanceof Date) {
",2,0,0,1,3,0,0,2,0,4,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,381,"            return format((Date) obj, toAppendTo);
",2,0,0,2,4,0,4,2,0,8,38,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,382,"        } else if (obj instanceof Calendar) {
",2,0,0,1,4,0,0,2,0,4,37,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,383,"            return format((Calendar) obj, toAppendTo);
",2,0,0,2,4,0,4,2,0,8,42,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,384,"        } else if (obj instanceof Long) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,385,"            return format(((Long) obj).longValue(), toAppendTo);
",2,0,0,4,8,0,6,2,0,10,52,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,387,"            throw new IllegalArgumentException(""Unknown class: "" +
",0,1,0,0,1,0,0,2,0,4,54,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,397,"        return format(new Date(millis));
",2,0,0,2,4,0,2,2,0,6,32,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,405,"        Calendar c = new GregorianCalendar(mTimeZone, mLocale);  // hard code GregorianCalendar
",6,0,0,1,2,0,0,4,0,10,87,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,406,"        c.setTime(date);
",0,0,0,1,2,0,6,0,0,6,16,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,407,"        return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();
",2,0,0,3,6,0,6,2,0,10,70,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,423,"        return format(new Date(millis), buf);
",2,0,0,2,4,0,4,2,0,8,37,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,431,"        Calendar c = new GregorianCalendar(mTimeZone, mLocale);  // hard code GregorianCalendar
",6,0,0,1,2,0,0,4,0,10,87,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,432,"        c.setTime(date);
",0,0,0,1,2,0,6,0,0,6,16,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,433,"        return applyRules(c, buf);
",0,0,0,1,2,0,6,0,0,6,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,466,"        return mPattern;
",2,0,0,0,0,0,0,0,0,2,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,474,"        return mTimeZone;
",2,0,0,0,0,0,0,0,0,2,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,482,"        return mLocale;
",2,0,0,0,0,0,0,0,0,2,15,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,495,"        return mMaxLengthEstimate;
",2,0,0,0,0,0,0,0,0,2,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,508,"        if (obj instanceof FastDatePrinter == false) {
",2,1,0,1,3,0,0,2,0,6,46,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,509,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,511,"        FastDatePrinter other = (FastDatePrinter) obj;
",4,0,0,1,2,0,0,4,0,8,46,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,512,"        return mPattern.equals(other.mPattern)
",4,0,0,1,2,0,4,0,0,8,38,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,524,"        return mPattern.hashCode() + 13 * (mTimeZone.hashCode() + 13 * mLocale.hashCode());
",0,4,0,4,8,0,12,0,0,16,83,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,534,"        return ""FastDatePrinter["" + mPattern + "","" + mLocale + "","" + mTimeZone.getID() + ""]"";
",4,1,0,2,4,0,4,0,0,13,85,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,548,"        in.defaultReadObject();
",0,0,0,1,2,0,4,0,0,4,23,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,549,"        init();
",0,0,0,1,2,0,2,0,0,2,7,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,550,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1086,"                value= prior;
",4,0,0,0,0,0,0,0,0,5,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,666,"            int iValue= Integer.parseInt(value);
",2,0,0,1,2,0,6,0,0,8,36,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,667,"            if(iValue<100) {
",2,1,0,1,3,0,0,0,0,3,16,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,668,"                iValue= parser.adjustYear(iValue);
",2,0,0,1,2,0,6,0,0,9,34,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,670,"            cal.set(Calendar.YEAR, iValue);
",4,0,0,1,2,0,6,0,0,10,31,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,671,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,724,"            appendTo(buffer, calendar.get(mField));
",0,0,0,2,4,0,10,0,0,10,39,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,725,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,733,"                buffer.append((char)(value + '0'));
",2,1,0,3,6,0,4,0,0,8,35,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,738,"                buffer.append(Integer.toString(value));
",0,0,0,2,4,0,10,0,0,10,39,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,527,"                c= formatField.charAt(1);
",2,0,0,1,2,0,4,0,0,7,25,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,546,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,8,106,"        return cache.getInstance();
",0,0,0,1,2,0,4,0,0,4,27,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,8,134,"        return cache.getInstance(pattern, timeZone, null);
",0,0,0,1,2,0,8,0,0,8,50,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,8,148,"        return cache.getInstance(pattern, null, locale);
",0,0,0,1,2,0,8,0,0,8,48,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,8,165,"        return cache.getInstance(pattern, timeZone, locale);
",0,0,0,1,2,0,10,0,0,10,52,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,8,180,"        return cache.getDateTimeInstance(style, null, null, null);
",0,0,0,1,2,0,6,0,0,6,58,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,8,195,"        return cache.getDateTimeInstance(style, null, null, locale);
",0,0,0,1,2,0,8,0,0,8,60,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,8,211,"        return cache.getDateTimeInstance(style, null, timeZone, null);
",0,0,0,1,2,0,8,0,0,8,62,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,8,227,"        return cache.getDateTimeInstance(style, null, timeZone, locale);
",0,0,0,1,2,0,10,0,0,10,64,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,8,242,"        return cache.getDateTimeInstance(null, style, null, null);
",0,0,0,1,2,0,6,0,0,6,58,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,8,257,"        return cache.getDateTimeInstance(null, style, null, locale);
",0,0,0,1,2,0,8,0,0,8,60,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,8,273,"        return cache.getDateTimeInstance(null, style, timeZone, null);
",0,0,0,1,2,0,8,0,0,8,62,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,8,289,"        return cache.getDateTimeInstance(null, style, timeZone, locale);
",0,0,0,1,2,0,10,0,0,10,64,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,8,305,"        return cache.getDateTimeInstance(dateStyle, timeStyle, null, null);
",0,0,0,1,2,0,8,0,0,8,67,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,8,321,"        return cache.getDateTimeInstance(dateStyle, timeStyle, null, locale);
",0,0,0,1,2,0,10,0,0,10,69,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,8,338,"        return getDateTimeInstance(dateStyle, timeStyle, timeZone, null);
",0,0,0,1,2,0,8,0,0,9,65,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,8,355,"        return cache.getDateTimeInstance(dateStyle, timeStyle, timeZone, locale);
",0,0,0,1,2,0,12,0,0,12,73,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,8,386,"        return printer.format(obj, toAppendTo, pos);
",0,0,0,1,2,0,10,0,0,10,44,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,8,398,"        return format(new Date(millis));
",2,0,0,2,4,0,2,2,0,6,32,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,8,409,"        return printer.format(date);
",0,0,0,1,2,0,6,0,0,6,28,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,8,434,"        return printer.format(millis, buf);
",0,0,0,1,2,0,8,0,0,8,35,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,8,447,"        return printer.format(date, buf);
",0,0,0,1,2,0,8,0,0,8,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,8,460,"        return printer.format(calendar, buf);
",0,0,0,1,2,0,8,0,0,8,37,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,8,472,"        return parser.parse(source);
",0,0,0,1,2,0,6,0,0,6,28,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,8,480,"            return parser.parse(source, pos);
",0,0,0,1,2,0,8,0,0,8,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,8,488,"        return parser.parseObject(source, pos);
",0,0,0,1,2,0,8,0,0,8,39,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,8,500,"        return printer.getPattern();
",0,0,0,1,2,0,4,0,0,4,28,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,8,512,"        return printer.getTimeZone();
",0,0,0,1,2,0,4,0,0,4,29,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,8,522,"        return printer.getLocale();
",0,0,0,1,2,0,4,0,0,4,27,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,8,535,"        return printer.getMaxLengthEstimate();
",0,0,0,1,2,0,4,0,0,4,38,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,8,548,"        if (obj instanceof FastDateFormat == false) {
",2,1,0,1,3,0,0,2,0,6,45,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,8,549,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,8,551,"        FastDateFormat other = (FastDateFormat) obj;
",4,0,0,1,2,0,0,4,0,8,44,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,8,553,"        return printer.equals(other.printer);
",4,0,0,1,2,0,4,0,0,8,37,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,8,563,"        return printer.hashCode();
",0,0,0,1,2,0,4,0,0,4,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,8,573,"        return ""FastDateFormat["" + printer.getPattern() + "","" + printer.getLocale() + "","" + printer.getTimeZone().getID() + ""]"";
",0,1,0,5,10,0,14,0,0,19,120,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,8,586,"        return printer.applyRules(calendar, buf);
",0,0,0,1,2,0,8,0,0,8,41,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,763,"            return iValue%24;
",2,1,0,0,0,0,0,0,0,3,17,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,632,"        StringLiteral(String value) {
",4,0,0,1,3,0,0,2,0,6,29,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,633,"            mValue = value;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,634,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,641,"            return mValue.length();
",0,0,0,1,2,0,4,0,0,4,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,649,"            buffer.append(mValue);
",0,0,0,1,2,0,6,0,0,6,22,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,650,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,1136,"                buffer.append(getTimeZoneDisplay(zone, true, mStyle, mLocale));
",0,0,0,2,4,0,12,0,0,13,63,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateParser,8,769,"            return iValue%12;
",2,1,0,0,0,0,0,0,0,3,17,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,946,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,947,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,940,"        static final TwoDigitMonthField INSTANCE = new TwoDigitMonthField();
",2,0,0,1,2,2,0,4,0,8,68,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,954,"            return 2;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,962,"            appendTo(buffer, calendar.get(Calendar.MONTH) + 1);
",4,1,0,2,4,0,8,0,0,13,51,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,963,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,970,"            buffer.append((char)(value / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,971,"            buffer.append((char)(value % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDatePrinter,8,972,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
