dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,129,"            return (instant + 1) % iUnitMillis + iUnitMillis - 1;
",6,4,0,1,2,1,0,0,0,10,53,6,1,0
defect4j,time,org/joda/time/LocalDateTime,12,2016,"        return ISODateTimeFormat.dateTime().print(this);
",0,0,0,2,4,1,6,0,0,6,48,5,1,0
defect4j,time,org/joda/time/LocalDateTime,12,612,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,1,0
defect4j,time,org/joda/time/LocalDateTime,12,615,"        return type.getField(getChronology()).isSupported();
",0,0,0,3,6,1,8,0,0,8,52,5,1,0
defect4j,time,org/joda/time/LocalDate,12,1805,"        return ISODateTimeFormat.date().print(this);
",0,0,0,2,4,1,6,0,0,6,44,5,1,0
defect4j,time,org/joda/time/LocalDateTime,12,597,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.80000,0
defect4j,time,org/joda/time/LocalDateTime,12,600,"        return type.getField(getChronology()).get(getLocalMillis());
",0,0,0,4,8,1,10,0,0,10,60,5,0.80000,0
defect4j,time,org/joda/time/LocalDate,12,548,"        return fieldType.getField(getChronology()).get(getLocalMillis());
",0,0,0,4,8,1,10,0,0,10,65,5,0.80000,0
defect4j,time,org/joda/time/LocalDateTime,12,567,"        switch (index) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.76190,0
defect4j,time,org/joda/time/LocalDateTime,12,569,"                return getChronology().year().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,52,6,0.76190,0
defect4j,time,org/joda/time/LocalDateTime,12,571,"                return getChronology().monthOfYear().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,59,6,0.76190,0
defect4j,time,org/joda/time/LocalDateTime,12,573,"                return getChronology().dayOfMonth().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,58,6,0.76190,0
defect4j,time,org/joda/time/LocalDateTime,12,575,"                return getChronology().millisOfDay().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,59,6,0.76190,0
defect4j,time,org/joda/time/LocalDate,12,542,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.76190,0
defect4j,time,org/joda/time/LocalDate,12,545,"        if (isSupported(fieldType) == false) {
",0,1,0,2,5,0,4,0,0,6,38,4,0.76190,0
defect4j,time,org/joda/time/LocalDate,12,567,"            return type.getField(getChronology()).isSupported();
",0,0,0,3,6,1,8,0,0,8,52,7,0.66667,0
defect4j,time,org/joda/time/LocalDate,12,560,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.61538,0
defect4j,time,org/joda/time/LocalDate,12,563,"        DurationFieldType durType = type.getDurationType();
",2,0,0,1,2,0,4,2,0,8,51,4,0.61538,0
defect4j,time,org/joda/time/LocalDate,12,564,"        if (DATE_DURATION_TYPES.contains(durType) ||
",0,1,0,1,3,0,6,0,0,7,44,4,0.61538,0
defect4j,time,org/joda/time/LocalDateTime,12,199,"        int yearOfEra = calendar.get(Calendar.YEAR);
",6,0,0,1,2,0,4,0,0,10,44,5,0.57143,0
defect4j,time,org/joda/time/LocalDateTime,12,200,"        return new LocalDateTime(
",0,0,0,0,1,1,0,2,0,2,25,6,0.57143,0
defect4j,time,org/joda/time/LocalDate,12,210,"        int yearOfEra = calendar.get(Calendar.YEAR);
",6,0,0,1,2,0,4,0,0,10,44,5,0.57143,0
defect4j,time,org/joda/time/LocalDate,12,211,"        return new LocalDate(
",0,0,0,0,1,1,0,2,0,2,21,6,0.57143,0
defect4j,time,org/joda/time/LocalDateTime,12,196,"        if (calendar == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.50000,0
defect4j,time,org/joda/time/LocalDate,12,207,"        if (calendar == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.50000,0
defect4j,time,org/joda/time/LocalDateTime,12,546,"                return chrono.monthOfYear();
",0,0,0,1,2,1,4,0,0,4,28,6,0.37209,0
defect4j,time,org/joda/time/LocalDateTime,12,548,"                return chrono.dayOfMonth();
",0,0,0,1,2,1,4,0,0,4,27,6,0.37209,0
defect4j,time,org/joda/time/LocalDateTime,12,550,"                return chrono.millisOfDay();
",0,0,0,1,2,1,4,0,0,4,28,6,0.37209,0
defect4j,time,org/joda/time/DateTimeFieldType,12,526,"                    return chronology.millisOfDay();
",0,0,0,1,2,1,4,0,0,4,32,7,0.37209,0
defect4j,time,org/joda/time/LocalDateTime,12,529,"        return 4;
",0,0,0,0,0,1,0,0,0,0,9,3,0.36364,0
defect4j,time,org/joda/time/LocalDateTime,12,542,"        switch (index) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.36364,0
defect4j,time,org/joda/time/LocalDateTime,12,544,"                return chrono.year();
",0,0,0,1,2,1,4,0,0,4,21,6,0.36364,0
defect4j,time,org/joda/time/LocalDateTime,12,669,"                return iLocalMillis == other.iLocalMillis;
",6,1,0,0,0,1,0,0,0,7,42,8,0.32000,0
defect4j,time,org/joda/time/LocalDateTime,12,237,"        return new LocalDateTime(
",0,0,0,0,1,1,0,2,0,2,25,6,0.30769,1
defect4j,time,org/joda/time/LocalDateTime,12,666,"        if (partial instanceof LocalDateTime) {
",2,0,0,1,3,0,0,2,0,4,39,5,0.30769,0
defect4j,time,org/joda/time/LocalDateTime,12,667,"            LocalDateTime other = (LocalDateTime) partial;
",4,0,0,1,2,0,0,4,0,8,46,6,0.30769,0
defect4j,time,org/joda/time/LocalDateTime,12,668,"            if (iChronology.equals(other.iChronology)) {
",4,0,0,2,5,0,4,0,0,8,44,7,0.30769,0
defect4j,time,org/joda/time/LocalDate,12,244,"        return new LocalDate(
",0,0,0,0,1,1,0,2,0,2,21,6,0.30769,0
defect4j,time,org/joda/time/LocalDateTime,12,663,"        if (this == partial) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.30189,0
defect4j,time,org/joda/time/LocalDateTime,12,233,"        if (date == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.28571,0
defect4j,time,org/joda/time/LocalDate,12,240,"        if (date == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.28571,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,190,"        return super.equals(obj);
",4,0,0,1,2,1,0,0,0,4,25,5,0.27350,0
defect4j,time,org/joda/time/LocalDate,12,628,"                return iLocalMillis == other.iLocalMillis;
",6,1,0,0,0,1,0,0,0,7,42,8,0.26667,0
defect4j,time,org/joda/time/LocalDate,12,622,"        if (this == partial) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.25806,0
defect4j,time,org/joda/time/LocalDate,12,625,"        if (partial instanceof LocalDate) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.25806,0
defect4j,time,org/joda/time/LocalDate,12,626,"            LocalDate other = (LocalDate) partial;
",4,0,0,1,2,0,0,4,0,8,38,6,0.25806,0
defect4j,time,org/joda/time/LocalDate,12,627,"            if (iChronology.equals(other.iChronology)) {
",4,0,0,2,5,0,4,0,0,8,44,7,0.25806,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,239,"        for (int i = 0, isize = partial.size(); i < isize; i++) {
",10,1,0,2,5,0,4,0,0,16,57,4,0.21918,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,240,"            instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));
",2,0,0,4,8,0,18,0,0,21,83,6,0.21918,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,242,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.21918,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,131,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);
",6,0,0,1,2,0,4,0,0,11,59,10,0.20847,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,132,"                    chrono = new GregorianChronology
",2,0,0,0,0,0,0,2,0,5,32,10,0.20847,0
defect4j,time,org/joda/time/LocalDate,12,426,"        this(year, monthOfYear, dayOfMonth, ISOChronology.getInstanceUTC());
",6,0,0,2,4,0,4,0,0,10,68,4,0.20253,0
defect4j,time,org/joda/time/LocalDate,12,427,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20253,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,171,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.19104,0
defect4j,time,org/joda/time/LocalDateTime,12,471,"        this(year, monthOfYear, dayOfMonth, hourOfDay,
",8,0,0,0,1,0,0,0,0,8,46,4,0.17778,0
defect4j,time,org/joda/time/LocalDateTime,12,473,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.17778,0
defect4j,time,org/joda/time/DateTimeFieldType,12,498,"                    return chronology.dayOfMonth();
",0,0,0,1,2,1,4,0,0,4,31,7,0.17021,0
defect4j,time,org/joda/time/DateTimeFieldType,12,492,"                    return chronology.year();
",0,0,0,1,2,1,4,0,0,4,25,7,0.15534,0
defect4j,time,org/joda/time/DateTimeFieldType,12,496,"                    return chronology.monthOfYear();
",0,0,0,1,2,1,4,0,0,4,32,7,0.15059,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,120,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);
",0,0,0,1,2,1,12,0,0,12,74,7,0.13008,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,118,"        if ((base = iBase) != null && (iBaseFlags & 6) == 6) {
",6,4,0,3,7,0,0,0,0,11,54,4,0.12800,0
defect4j,time,org/joda/time/base/BaseLocal,12,47,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.12500,0
defect4j,time,org/joda/time/base/BaseLocal,12,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12500,0
defect4j,time,org/joda/time/base/AbstractPartial,12,79,"        return getField(index, getChronology()).getType();
",0,0,0,3,6,1,8,0,0,8,50,5,0.12308,0
defect4j,time,org/joda/time/LocalDateTime,12,499,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.11679,0
defect4j,time,org/joda/time/LocalDateTime,12,500,"        chronology = DateTimeUtils.getChronology(chronology).withUTC();
",2,0,0,2,4,0,8,0,0,11,63,4,0.11679,0
defect4j,time,org/joda/time/LocalDateTime,12,501,"        long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
",2,0,0,0,1,0,10,0,0,12,74,5,0.11679,0
defect4j,time,org/joda/time/LocalDateTime,12,503,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.11679,0
defect4j,time,org/joda/time/LocalDateTime,12,504,"        iLocalMillis = instant;
",4,0,0,0,0,0,0,0,0,5,23,4,0.11679,0
defect4j,time,org/joda/time/LocalDateTime,12,505,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11679,0
defect4j,time,org/joda/time/DateTimeFieldType,12,480,"            chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,5,0.10997,0
defect4j,time,org/joda/time/DateTimeFieldType,12,482,"            switch (iOrdinal) {
",2,0,0,1,3,0,0,0,0,2,19,5,0.10997,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,84,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.10774,0
defect4j,time,org/joda/time/LocalDate,12,445,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.10738,0
defect4j,time,org/joda/time/LocalDate,12,446,"        chronology = DateTimeUtils.getChronology(chronology).withUTC();
",2,0,0,2,4,0,8,0,0,11,63,4,0.10738,0
defect4j,time,org/joda/time/LocalDate,12,447,"        long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);
",2,0,0,1,2,0,10,0,0,12,78,5,0.10738,0
defect4j,time,org/joda/time/LocalDate,12,448,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.10738,0
defect4j,time,org/joda/time/LocalDate,12,449,"        iLocalMillis = instant;
",4,0,0,0,0,0,0,0,0,5,23,4,0.10738,0
defect4j,time,org/joda/time/LocalDate,12,450,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.10738,0
defect4j,time,org/joda/time/LocalDate,12,600,"        return iLocalMillis;
",2,0,0,0,0,1,0,0,0,2,20,4,0.10000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,126,"        if (instant >= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.09756,0
defect4j,time,org/joda/time/LocalDate,12,609,"        return iChronology;
",2,0,0,0,0,1,0,0,0,2,19,4,0.09249,0
defect4j,time,org/joda/time/DateTimeFieldType,12,522,"                    return chronology.secondOfDay();
",0,0,0,1,2,1,4,0,0,4,32,7,0.08649,0
defect4j,time,org/joda/time/LocalDateTime,12,641,"        return iLocalMillis;
",2,0,0,0,0,1,0,0,0,2,20,4,0.08466,0
defect4j,time,org/joda/time/LocalDateTime,12,650,"        return iChronology;
",2,0,0,0,0,1,0,0,0,2,19,4,0.08122,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,136,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth,
",8,0,0,0,1,1,0,0,0,8,61,5,0.07556,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,132,"        long instant = year().set(0, year);
",2,0,0,2,4,0,6,0,0,8,35,5,0.07556,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,133,"        instant = monthOfYear().set(instant, monthOfYear);
",2,0,0,2,4,0,8,0,0,11,50,4,0.07556,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,134,"        instant = dayOfMonth().set(instant, dayOfMonth);
",2,0,0,2,4,0,8,0,0,11,48,4,0.07556,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,135,"        instant = hourOfDay().set(instant, hourOfDay);
",2,0,0,2,4,0,8,0,0,11,46,4,0.07556,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,136,"        instant = minuteOfHour().set(instant, minuteOfHour);
",2,0,0,2,4,0,8,0,0,11,52,4,0.07556,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,137,"        instant = secondOfMinute().set(instant, secondOfMinute);
",2,0,0,2,4,0,8,0,0,11,56,4,0.07556,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,138,"        return millisOfSecond().set(instant, millisOfSecond);
",0,0,0,2,4,1,8,0,0,8,53,5,0.07556,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,12,82,"        return iField.set(instant, value);
",0,0,0,1,2,1,8,0,0,8,34,5,0.07556,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,12,152,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);
",0,0,0,1,2,0,10,0,0,10,54,5,0.07556,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,12,153,"        return super.set(instant, value - iOffset);
",8,1,0,1,2,1,0,0,0,9,43,5,0.07556,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,228,"        return iChronology.getMaxYear();
",0,0,0,1,2,1,4,0,0,4,32,5,0.07556,0
defect4j,time,org/joda/time/chrono/GJChronology,12,644,"            if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,5,0.07556,0
defect4j,time,org/joda/time/chrono/GJChronology,12,647,"                return iJulianField.get(instant);
",0,0,0,1,2,1,6,0,0,6,33,8,0.07556,0
defect4j,time,org/joda/time/chrono/GJChronology,12,710,"            if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,5,0.07556,0
defect4j,time,org/joda/time/chrono/GJChronology,12,711,"                instant = iGregorianField.set(instant, value);
",2,0,0,1,2,0,8,0,0,11,46,7,0.07556,0
defect4j,time,org/joda/time/chrono/GJChronology,12,712,"                if (instant < iCutover) {
",4,1,0,1,3,0,0,0,0,5,25,7,0.07556,0
defect4j,time,org/joda/time/chrono/GJChronology,12,714,"                    if (instant + iGapDuration < iCutover) {
",6,2,0,1,3,0,0,0,0,8,40,9,0.07556,0
defect4j,time,org/joda/time/chrono/GJChronology,12,715,"                        instant = gregorianToJulian(instant);
",2,0,0,1,2,0,4,0,0,7,37,11,0.07556,0
defect4j,time,org/joda/time/chrono/GJChronology,12,718,"                    if (get(instant) != value) {
",2,1,0,2,5,0,4,0,0,7,28,9,0.07556,0
defect4j,time,org/joda/time/chrono/GJChronology,12,724,"                instant = iJulianField.set(instant, value);
",2,0,0,1,2,0,8,0,0,11,43,7,0.07556,0
defect4j,time,org/joda/time/chrono/GJChronology,12,725,"                if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,7,0.07556,0
defect4j,time,org/joda/time/chrono/GJChronology,12,737,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,5,0.07556,0
defect4j,time,org/joda/time/chrono/GJChronology,12,795,"            return iJulianField.getMinimumValue();
",0,0,0,1,2,1,4,0,0,4,38,6,0.07556,0
defect4j,time,org/joda/time/chrono/GJChronology,12,826,"            return iGregorianField.getMaximumValue();
",0,0,0,1,2,1,4,0,0,4,41,6,0.07556,0
defect4j,time,org/joda/time/chrono/GJChronology,12,912,"            if (iConvertByWeekyear) {
",2,0,0,1,3,0,0,0,0,2,25,5,0.07556,0
defect4j,time,org/joda/time/chrono/GJChronology,12,915,"                return gregorianToJulianByYear(instant);
",0,0,0,1,2,1,4,0,0,4,40,8,0.07556,0
defect4j,time,org/joda/time/chrono/GJChronology,12,173,"        return getInstance(zone, gregorianCutover, 4);
",0,0,0,1,2,1,6,0,0,6,46,5,0.07556,0
defect4j,time,org/joda/time/chrono/GJChronology,12,192,"            cutoverInstant = DEFAULT_CUTOVER;
",4,0,0,0,0,0,0,0,0,5,33,6,0.07556,0
defect4j,time,org/joda/time/chrono/GJChronology,12,579,"        return convertByYear(instant, iGregorianChronology, iJulianChronology);
",0,0,0,1,2,1,8,0,0,8,71,5,0.07556,0
defect4j,time,org/joda/time/chrono/GJChronology,12,74,"public final class GJChronology extends AssembledChronology {
",2,0,0,0,1,2,0,2,0,6,61,1,0.07556,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,78,"        if (year <= 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.07556,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,79,"            if (year == 0) {
",2,1,0,1,3,0,0,0,0,3,16,6,0.07556,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,83,"            year++;
",2,0,0,0,0,0,0,0,0,3,7,6,0.07556,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,85,"        return year;
",2,0,0,0,0,1,0,0,0,2,12,4,0.07556,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,207,"        return super.getDateMidnightMillis(adjustYearForSet(year), monthOfYear, dayOfMonth);
",6,0,0,2,4,1,4,0,0,10,84,5,0.07556,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,128,"        super(base, param);
",4,0,0,1,2,0,0,0,0,4,19,4,0.07556,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,129,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07556,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,65,"    private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField(""BE"");
",2,0,0,1,2,3,0,4,0,10,85,2,0.07556,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,71,"    private static final Map<DateTimeZone, BuddhistChronology> cCache = new HashMap<DateTimeZone, BuddhistChronology>();
",2,0,0,1,2,3,0,12,0,17,116,2,0.07556,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,74,"    private static final BuddhistChronology INSTANCE_UTC = getInstance(DateTimeZone.UTC);
",6,0,0,1,2,3,2,2,0,13,85,2,0.07556,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,104,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.07556,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,107,"        BuddhistChronology chrono = cCache.get(zone);
",2,0,0,1,2,0,6,2,0,10,45,4,0.07556,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,108,"        if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.07556,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,110,"            chrono = new BuddhistChronology(GJChronology.getInstance(zone, null), null);
",2,0,0,2,4,0,6,2,0,12,76,6,0.07556,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,112,"            DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);
",4,0,0,1,2,0,0,4,0,8,64,6,0.07556,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,113,"            chrono = new BuddhistChronology(LimitChronology.getInstance(chrono, lowerLimit, null), """");
",2,0,0,2,4,0,8,2,0,15,91,6,0.07556,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,114,"            cCache.put(zone, chrono);
",0,0,0,1,2,0,8,0,0,8,25,7,0.07556,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,116,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.07556,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,204,"        if (getParam() == null) {
",0,1,0,2,5,0,2,0,0,4,25,4,0.07556,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,206,"            DateTimeField field = fields.year;
",6,0,0,0,0,0,0,2,0,8,34,6,0.07556,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,207,"            fields.year = new OffsetDateTimeField(
",4,0,0,0,1,0,0,2,0,7,38,6,0.07556,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,211,"            field = fields.yearOfEra;
",6,0,0,0,0,0,0,0,0,7,25,6,0.07556,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,212,"            fields.yearOfEra = new DelegatedDateTimeField(
",4,0,0,0,1,0,0,2,0,7,46,6,0.07556,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,216,"            field = fields.weekyear;
",6,0,0,0,0,0,0,0,0,7,24,6,0.07556,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,217,"            fields.weekyear = new OffsetDateTimeField(
",4,0,0,0,1,0,0,2,0,7,42,6,0.07556,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,220,"            field = new OffsetDateTimeField(fields.yearOfEra, 99);
",6,0,0,1,2,0,0,2,0,9,54,6,0.07556,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,221,"            fields.centuryOfEra = new DividedDateTimeField(
",4,0,0,0,1,0,0,2,0,7,47,6,0.07556,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,224,"            field = new RemainderDateTimeField(
",2,0,0,0,1,0,0,2,0,5,35,6,0.07556,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,226,"            fields.yearOfCentury = new OffsetDateTimeField(
",4,0,0,0,1,0,0,2,0,7,47,6,0.07556,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,229,"            field = new RemainderDateTimeField(
",2,0,0,0,1,0,0,2,0,5,35,6,0.07556,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,231,"            fields.weekyearOfCentury = new OffsetDateTimeField(
",4,0,0,0,1,0,0,2,0,7,51,6,0.07556,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,234,"            fields.era = ERA_FIELD;
",6,0,0,0,0,0,0,0,0,7,23,6,0.07556,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,236,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07556,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,53,"        this(chronology, field, 0);
",4,0,0,1,2,0,0,0,0,4,27,4,0.07556,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,54,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07556,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,64,"        super(field);
",2,0,0,1,2,0,0,0,0,2,13,4,0.07556,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,65,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.07556,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,66,"        int min = super.getMinimumValue();
",4,0,0,1,2,0,0,0,0,4,34,5,0.07556,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,67,"        if (min < skip) {
",4,1,0,1,3,0,0,0,0,5,17,4,0.07556,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,68,"            iMinValue = min + 1;
",4,1,0,0,0,0,0,0,0,6,20,6,0.07556,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,74,"        iSkip = skip;
",4,0,0,0,0,0,0,0,0,5,13,4,0.07556,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,75,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07556,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,87,"        FieldUtils.verifyValueBounds(this, value, iMinValue, getMaximumValue());
",0,0,0,2,4,0,10,0,0,10,72,5,0.07556,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,88,"        if (value <= iSkip) {
",4,1,0,1,3,0,0,0,0,5,21,4,0.07556,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,89,"            value--;
",2,0,0,0,0,0,0,0,0,3,8,6,0.07556,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,91,"        return super.set(millis, value);
",6,0,0,1,2,1,0,0,0,6,32,5,0.07556,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,95,"        return iMinValue;
",2,0,0,0,0,1,0,0,0,2,17,4,0.07556,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,172,"        return iField.set(instant, value);
",0,0,0,1,2,1,8,0,0,8,34,5,0.07556,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,228,"        return iField.getMaximumValue();
",0,0,0,1,2,1,4,0,0,4,32,5,0.07556,0
defect4j,time,org/joda/time/field/SkipDateTimeField,12,82,"            value--;
",2,0,0,0,0,0,0,0,0,3,8,6,0.07556,0
defect4j,time,org/joda/time/field/SkipDateTimeField,12,100,"        return iMinValue;
",2,0,0,0,0,1,0,0,0,2,17,4,0.07556,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,344,"            return jan1millis + (8 - jan1dayOfWeek)
",4,2,0,1,2,1,0,0,0,6,39,6,0.07529,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,237,"            instant -= ((long) DateTimeConstants.MILLIS_PER_WEEK) * (wow - 1);
",8,2,0,3,6,0,0,0,0,11,66,6,0.07529,0
defect4j,time,org/joda/time/chrono/GJChronology,12,501,"            fields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);
",10,0,0,2,4,0,4,2,0,17,105,6,0.07529,0
defect4j,time,org/joda/time/chrono/GJChronology,12,502,"            fields.millisOfDay = new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis);
",10,0,0,2,4,0,4,2,0,17,96,6,0.07529,0
defect4j,time,org/joda/time/chrono/GJChronology,12,503,"            fields.secondOfMinute = new CutoverField(julian.secondOfMinute(), fields.secondOfMinute, iCutoverMillis);
",10,0,0,2,4,0,4,2,0,17,105,6,0.07529,0
defect4j,time,org/joda/time/chrono/GJChronology,12,504,"            fields.secondOfDay = new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis);
",10,0,0,2,4,0,4,2,0,17,96,6,0.07529,0
defect4j,time,org/joda/time/chrono/GJChronology,12,505,"            fields.minuteOfHour = new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);
",10,0,0,2,4,0,4,2,0,17,99,6,0.07529,0
defect4j,time,org/joda/time/chrono/GJChronology,12,506,"            fields.minuteOfDay = new CutoverField(julian.minuteOfDay(), fields.minuteOfDay, iCutoverMillis);
",10,0,0,2,4,0,4,2,0,17,96,6,0.07529,0
defect4j,time,org/joda/time/chrono/GJChronology,12,507,"            fields.hourOfDay = new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis);
",10,0,0,2,4,0,4,2,0,17,90,6,0.07529,0
defect4j,time,org/joda/time/chrono/GJChronology,12,508,"            fields.hourOfHalfday = new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday, iCutoverMillis);
",10,0,0,2,4,0,4,2,0,17,102,6,0.07529,0
defect4j,time,org/joda/time/chrono/GJChronology,12,509,"            fields.clockhourOfDay = new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis);
",10,0,0,2,4,0,4,2,0,17,105,6,0.07529,0
defect4j,time,org/joda/time/chrono/GJChronology,12,510,"            fields.clockhourOfHalfday = new CutoverField(julian.clockhourOfHalfday(),
",4,0,0,1,3,0,4,2,0,11,73,6,0.07529,0
defect4j,time,org/joda/time/chrono/GJChronology,12,512,"            fields.halfdayOfDay = new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis);
",10,0,0,2,4,0,4,2,0,17,99,6,0.07529,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,224,"            leapYears = (relativeYear + 3) >> 2;
",4,2,0,1,2,0,0,0,0,7,36,6,0.07529,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,886,"        long newInstant = roundFloor(instant);
",2,0,0,1,2,0,4,0,0,6,38,5,0.07521,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,887,"        if (newInstant != instant) {
",4,1,0,1,3,0,0,0,0,5,28,4,0.07521,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,888,"            instant = add(newInstant, 1);
",2,0,0,1,2,0,4,0,0,7,29,6,0.07521,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,890,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.07521,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,327,"        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,55,5,0.07521,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,328,"        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);
",4,1,0,1,2,0,2,0,0,7,59,5,0.07521,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,329,"        return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);
",8,2,0,3,6,1,0,0,0,10,89,6,0.07521,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,496,"            return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);
",6,1,0,1,2,1,2,0,0,9,60,7,0.07521,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,127,"        int year = get(instant);
",2,0,0,1,2,0,4,0,0,6,24,5,0.07521,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,128,"        long yearStartMillis = iChronology.getYearMillis(year);
",2,0,0,1,2,0,6,0,0,8,55,5,0.07521,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,129,"        if (instant != yearStartMillis) {
",4,1,0,1,3,0,0,0,0,5,33,4,0.07521,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,131,"            instant = iChronology.getYearMillis(year + 1);
",4,1,0,1,2,0,4,0,0,10,46,6,0.07521,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,133,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.07521,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,72,"        if (years == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.07521,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,75,"        return set(instant, get(instant) + years);
",2,1,0,2,4,1,8,0,0,11,42,5,0.07521,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,128,"        FieldUtils.verifyValueBounds(this, Math.abs(year),
",0,0,0,1,3,0,10,0,0,10,50,5,0.07521,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,133,"        int thisWeekyear = get( instant );
",2,0,0,1,2,0,4,0,0,6,34,5,0.07521,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,134,"        if ( thisWeekyear == year ) {
",4,1,0,1,3,0,0,0,0,5,29,4,0.07521,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,140,"        int thisDow = iChronology.getDayOfWeek(instant);
",2,0,0,1,2,0,6,0,0,8,48,5,0.07521,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,144,"        int weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );
",2,0,0,1,2,0,6,0,0,8,65,5,0.07521,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,145,"        int weeksInToYear = iChronology.getWeeksInYear( year );
",2,0,0,1,2,0,6,0,0,8,55,5,0.07521,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,146,"        int maxOutWeeks = (weeksInToYear < weeksInFromYear) ?
",6,1,0,1,2,0,0,0,0,7,53,5,0.07521,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,154,"        int setToWeek = iChronology.getWeekOfWeekyear(instant);
",2,0,0,1,2,0,6,0,0,8,55,5,0.07521,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,155,"        if ( setToWeek > maxOutWeeks ) {
",4,1,0,1,3,0,0,0,0,5,32,4,0.07521,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,162,"        long workInstant = instant; // Get a copy
",4,0,0,0,0,0,0,0,0,4,41,5,0.07521,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,168,"        workInstant = iChronology.setYear( workInstant, year );
",2,0,0,1,2,0,8,0,0,11,55,4,0.07521,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,173,"        int workWoyYear = get( workInstant );
",2,0,0,1,2,0,4,0,0,6,37,5,0.07521,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,179,"        if ( workWoyYear < year ) {
",4,1,0,1,3,0,0,0,0,5,27,4,0.07521,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,181,"        } else if ( workWoyYear > year ) {
",4,1,0,1,4,0,0,0,0,5,34,5,0.07521,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,189,"        int currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);
",2,0,0,1,2,0,6,0,0,8,64,5,0.07521,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,191,"        workInstant = workInstant + (setToWeek - currentWoyWeek)
",8,2,0,1,2,0,0,0,0,11,56,4,0.07521,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,200,"        workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );
",2,0,0,2,4,0,10,0,0,13,66,4,0.07521,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,204,"        return workInstant;
",2,0,0,0,0,1,0,0,0,2,19,4,0.07521,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,234,"        instant = iChronology.weekOfWeekyear().roundFloor(instant);
",2,0,0,2,4,0,8,0,0,11,59,4,0.07521,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,235,"        int wow = iChronology.getWeekOfWeekyear(instant);
",2,0,0,1,2,0,6,0,0,8,49,5,0.07521,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,236,"        if (wow > 1) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.07521,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,239,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.07521,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,65,"        return super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY)
",8,2,0,1,2,1,0,0,0,10,71,6,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,1083,"            super(durationField, durationField.getType());
",2,0,0,2,4,0,4,0,0,6,46,5,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,1084,"            iField = dateTimeField;
",4,0,0,0,0,0,0,0,0,5,23,5,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,1085,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,612,"            this(julianField, gregorianField, cutoverMillis, false);
",6,0,0,1,2,0,0,0,0,7,56,5,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,613,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,622,"                     long cutoverMillis, boolean convertByWeekyear) {
",4,0,0,0,2,0,0,0,0,4,48,4,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,623,"            super(gregorianField.getType());
",0,0,0,2,4,0,4,0,0,4,32,6,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,624,"            iJulianField = julianField;
",4,0,0,0,0,0,0,0,0,5,27,5,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,625,"            iGregorianField = gregorianField;
",4,0,0,0,0,0,0,0,0,5,33,5,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,626,"            iCutover = cutoverMillis;
",4,0,0,0,0,0,0,0,0,5,25,5,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,627,"            iConvertByWeekyear = convertByWeekyear;
",4,0,0,0,0,0,0,0,0,5,39,5,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,630,"            iDurationField = gregorianField.getDurationField();
",2,0,0,1,2,0,4,0,0,7,51,5,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,632,"            DurationField rangeField = gregorianField.getRangeDurationField();
",2,0,0,1,2,0,4,2,0,8,66,5,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,633,"            if (rangeField == null) {
",2,1,0,1,3,0,0,0,0,3,25,5,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,634,"                rangeField = julianField.getRangeDurationField();
",2,0,0,1,2,0,4,0,0,7,49,7,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,636,"            iRangeDurationField = rangeField;
",4,0,0,0,0,0,0,0,0,5,33,5,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,637,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,764,"            return iDurationField;
",2,0,0,0,0,1,0,0,0,2,22,5,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,768,"            return iRangeDurationField;
",2,0,0,0,0,1,0,0,0,2,27,5,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,788,"            return iGregorianField.getLeapDurationField();
",0,0,0,1,2,1,4,0,0,4,46,6,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,271,"        super(null, new Object[] {julian, gregorian, cutoverInstant});
",6,0,0,3,6,0,0,2,0,9,62,3,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,272,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,105,"    static final Instant DEFAULT_CUTOVER = new Instant(-12219292800000L);
",2,0,0,1,2,2,0,4,0,9,69,2,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,108,"    private static final Map<DateTimeZone, ArrayList<GJChronology>> cCache = new HashMap<DateTimeZone, ArrayList<GJChronology>>();
",2,0,0,1,2,3,0,16,0,21,126,2,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,83,"        return to.getDateTimeMillis
",0,0,0,0,0,1,4,0,0,4,27,5,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,189,"        zone = DateTimeUtils.getZone(zone);
",2,0,0,1,2,0,6,0,0,9,35,4,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,191,"        if (gregorianCutover == null) {
",2,1,0,1,3,0,0,0,0,3,31,4,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,199,"        ArrayList<GJChronology> chronos = cCache.get(zone);
",2,0,0,1,2,0,6,4,0,12,51,4,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,200,"        if (chronos == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,201,"            chronos = new ArrayList<GJChronology>(2);
",2,0,0,1,2,0,0,4,0,7,41,6,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,202,"            cCache.put(zone, chronos);
",0,0,0,1,2,0,8,0,0,8,26,7,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,214,"        if (zone == DateTimeZone.UTC) {
",6,1,0,1,3,0,0,0,0,7,31,4,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,215,"            chrono = new GJChronology
",2,0,0,0,0,0,0,2,0,5,25,6,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,228,"        chronos.add(chrono);
",0,0,0,1,2,0,6,0,0,6,20,5,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,230,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,465,"        Object[] params = (Object[])getParam();
",2,0,0,4,8,0,2,4,0,8,39,4,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,467,"        JulianChronology julian = (JulianChronology)params[0];
",2,0,1,2,4,0,0,4,0,8,54,4,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,468,"        GregorianChronology gregorian = (GregorianChronology)params[1];
",2,0,1,2,4,0,0,4,0,8,63,4,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,469,"        Instant cutoverInstant = (Instant)params[2];
",2,0,1,2,4,0,0,4,0,8,44,4,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,470,"        iCutoverMillis = cutoverInstant.getMillis();
",2,0,0,1,2,0,4,0,0,7,44,4,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,472,"        iJulianChronology = julian;
",4,0,0,0,0,0,0,0,0,5,27,4,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,473,"        iGregorianChronology = gregorian;
",4,0,0,0,0,0,0,0,0,5,33,4,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,474,"        iCutoverInstant = cutoverInstant;
",4,0,0,0,0,0,0,0,0,5,33,4,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,476,"        if (getBase() != null) {
",0,1,0,2,5,0,2,0,0,4,24,4,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,480,"        if (julian.getMinimumDaysInFirstWeek() != gregorian.getMinimumDaysInFirstWeek()) {
",0,1,0,3,7,0,8,0,0,9,82,4,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,485,"        iGapDuration = iCutoverMillis - julianToGregorianByYear(iCutoverMillis);
",4,1,0,1,2,0,4,0,0,10,72,4,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,491,"        fields.copyFieldsFrom(gregorian);
",0,0,0,1,2,0,6,0,0,6,33,5,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,497,"        if (gregorian.millisOfDay().get(iCutoverMillis) == 0) {
",0,1,0,3,7,0,8,0,0,9,55,4,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,517,"            fields.era = new CutoverField(julian.era(), fields.era, iCutoverMillis);
",10,0,0,2,4,0,4,2,0,17,72,5,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,526,"            long cutover = gregorian.year().roundCeiling(iCutoverMillis);
",2,0,0,2,4,0,8,0,0,10,61,6,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,527,"            fields.dayOfYear = new CutoverField(
",4,0,0,0,1,0,0,2,0,7,36,5,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,532,"            long cutover = gregorian.weekyear().roundCeiling(iCutoverMillis);
",2,0,0,2,4,0,8,0,0,10,65,6,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,533,"            fields.weekOfWeekyear = new CutoverField(
",4,0,0,0,1,0,0,2,0,7,41,5,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,541,"            fields.year = new ImpreciseCutoverField(
",4,0,0,0,1,0,0,2,0,7,40,5,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,543,"            fields.years = fields.year.getDurationField();
",8,0,0,1,2,0,2,0,0,11,46,5,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,544,"            fields.yearOfEra = new ImpreciseCutoverField(
",4,0,0,0,1,0,0,2,0,7,45,5,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,546,"            fields.yearOfCentury = new ImpreciseCutoverField(
",4,0,0,0,1,0,0,2,0,7,49,5,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,549,"            fields.centuryOfEra = new ImpreciseCutoverField(
",4,0,0,0,1,0,0,2,0,7,48,5,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,551,"            fields.centuries = fields.centuryOfEra.getDurationField();
",8,0,0,1,2,0,2,0,0,11,58,5,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,553,"            fields.monthOfYear = new ImpreciseCutoverField(
",4,0,0,0,1,0,0,2,0,7,47,5,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,555,"            fields.months = fields.monthOfYear.getDurationField();
",8,0,0,1,2,0,2,0,0,11,54,5,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,557,"            fields.weekyear = new ImpreciseCutoverField(
",4,0,0,0,1,0,0,2,0,7,44,5,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,559,"            fields.weekyearOfCentury = new ImpreciseCutoverField(
",4,0,0,0,1,0,0,2,0,7,53,5,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,561,"            fields.weekyears = fields.weekyear.getDurationField();
",8,0,0,1,2,0,2,0,0,11,54,5,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,567,"            CutoverField cf = new CutoverField
",2,0,0,0,0,0,0,4,0,6,34,5,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,569,"            cf.iRangeDurationField = fields.months;
",8,0,0,0,0,0,0,0,0,9,39,5,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,570,"            fields.dayOfMonth = cf;
",6,0,0,0,0,0,0,0,0,7,23,5,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,572,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,575,"        return convertByYear(instant, iJulianChronology, iGregorianChronology);
",0,0,0,1,2,1,8,0,0,8,71,5,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,934,"            this(julianField, gregorianField, null, cutoverMillis, false);
",6,0,0,1,2,0,0,0,0,7,62,5,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,935,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,945,"            this(julianField, gregorianField, durationField, cutoverMillis, false);
",8,0,0,1,2,0,0,0,0,9,71,5,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,946,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,956,"        {
",0,0,0,0,1,0,0,0,0,0,1,3,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,957,"            super(julianField, gregorianField, cutoverMillis, convertByWeekyear);
",8,0,0,1,2,0,0,0,0,8,69,5,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,958,"            if (durationField == null) {
",2,1,0,1,3,0,0,0,0,3,28,5,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,959,"                durationField = new LinkedDurationField(iDurationField, this);
",4,0,0,1,2,0,0,2,0,7,62,7,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,961,"            iDurationField = durationField;
",4,0,0,0,0,0,0,0,0,5,31,5,0.07521,0
defect4j,time,org/joda/time/chrono/GJChronology,12,962,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07521,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,211,"        return (year & 3) == 0;
",2,2,0,1,2,1,0,0,0,4,23,4,0.07521,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,219,"        int relativeYear = year - 1968;
",4,1,0,0,0,0,0,0,0,5,31,5,0.07521,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,221,"        if (relativeYear <= 0) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.07521,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,233,"        long millis = (relativeYear * 365L + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY;
",10,3,0,2,4,0,0,0,0,13,89,5,0.07521,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,237,"        return millis - (366L + 352) * DateTimeConstants.MILLIS_PER_DAY;
",6,3,0,1,2,1,0,0,0,9,64,4,0.07521,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,253,"        return MILLIS_PER_YEAR / 2;
",2,1,0,0,0,1,0,0,0,3,27,4,0.07521,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,261,"        return (1969L * MILLIS_PER_YEAR + 352L * DateTimeConstants.MILLIS_PER_DAY) / 2;
",6,4,0,1,2,1,0,0,0,10,79,4,0.07521,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,537,"            daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1))
",8,2,0,2,4,0,0,0,0,11,70,6,0.07512,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,539,"            if (daysSince19700101 < -3) {
",2,1,0,1,3,0,0,0,0,4,29,6,0.07512,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,540,"                return 7 + (int) ((daysSince19700101 + 4) % 7);
",2,3,0,3,6,1,0,0,0,5,47,8,0.07512,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,162,"        super(base, param, minDaysInFirstWeek);
",6,0,0,1,2,0,0,0,0,6,39,4,0.07512,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,163,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07512,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,71,"    private static final Map<DateTimeZone, JulianChronology[]> cCache = new HashMap<DateTimeZone, JulianChronology[]>();
",2,0,0,3,6,3,0,12,0,17,116,2,0.07512,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,74,"        INSTANCE_UTC = getInstance(DateTimeZone.UTC);
",6,0,0,1,2,0,2,0,0,9,45,4,0.07512,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,75,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07512,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,114,"        return getInstance(zone, 4);
",0,0,0,1,2,1,4,0,0,4,28,5,0.07512,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,125,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.07512,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,129,"        synchronized (cCache) {
",2,0,0,1,3,0,0,0,0,2,23,4,0.07512,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,130,"            JulianChronology[] chronos = cCache.get(zone);
",2,0,0,2,4,0,6,2,0,10,46,6,0.07512,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,131,"            if (chronos == null) {
",2,1,0,1,3,0,0,0,0,3,22,6,0.07512,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,132,"                chronos = new JulianChronology[7];
",2,0,0,1,2,0,0,2,0,5,34,8,0.07512,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,133,"                cCache.put(zone, chronos);
",0,0,0,1,2,0,8,0,0,8,26,9,0.07512,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,136,"                chrono = chronos[minDaysInFirstWeek - 1];
",4,1,1,1,2,0,0,0,0,8,41,8,0.07512,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,140,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07512,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,141,"            if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.07512,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,142,"                if (zone == DateTimeZone.UTC) {
",6,1,0,1,3,0,0,0,0,7,31,8,0.07512,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,143,"                    chrono = new JulianChronology(null, null, minDaysInFirstWeek);
",4,0,0,1,2,0,0,2,0,8,62,10,0.07512,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,149,"                chronos[minDaysInFirstWeek - 1] = chrono;
",4,1,1,1,2,0,0,0,0,8,41,8,0.07512,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,151,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07512,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,152,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.07512,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,241,"        return MIN_YEAR;
",2,0,0,0,0,1,0,0,0,2,16,4,0.07512,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,245,"        return MAX_YEAR;
",2,0,0,0,0,1,0,0,0,2,16,4,0.07512,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,249,"        return MILLIS_PER_YEAR;
",2,0,0,0,0,1,0,0,0,2,23,4,0.07512,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,257,"        return MILLIS_PER_MONTH;
",2,0,0,0,0,1,0,0,0,2,24,4,0.07512,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,265,"        if (getBase() == null) {
",0,1,0,2,5,0,2,0,0,4,24,4,0.07512,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,266,"            super.assemble(fields);
",4,0,0,1,2,0,0,0,0,4,23,7,0.07512,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,268,"            fields.year = new SkipDateTimeField(this, fields.year);
",8,0,0,1,2,0,0,2,0,11,55,6,0.07512,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,269,"            fields.weekyear = new SkipDateTimeField(this, fields.weekyear);
",8,0,0,1,2,0,0,2,0,11,63,6,0.07512,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,271,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07512,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,50,"public final class JulianChronology extends BasicGJChronology {
",2,0,0,0,1,2,0,2,0,6,63,1,0.07512,0
defect4j,time,org/joda/time/field/SkipDateTimeField,12,80,"        int value = super.get(millis);
",6,0,0,1,2,0,0,0,0,6,30,5,0.07512,0
defect4j,time,org/joda/time/field/SkipDateTimeField,12,81,"        if (value <= iSkip) {
",4,1,0,1,3,0,0,0,0,5,21,4,0.07512,0
defect4j,time,org/joda/time/field/SkipDateTimeField,12,84,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.07512,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,96,"        return iField.get(instant);
",0,0,0,1,2,1,6,0,0,6,27,5,0.07503,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,339,"        long jan1millis = getYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,38,5,0.07494,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,340,"        int jan1dayOfWeek = getDayOfWeek(jan1millis);
",2,0,0,1,2,0,4,0,0,6,45,5,0.07494,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,342,"        if (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {
",4,2,0,2,5,0,0,0,0,6,48,4,0.07494,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,493,"        int year = getYear(instant);
",2,0,0,1,2,0,4,0,0,6,28,5,0.07494,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,494,"        int week = getWeekOfWeekyear(instant, year);
",2,0,0,1,2,0,6,0,0,8,44,5,0.07494,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,495,"        if (week == 1) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.07494,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,508,"        return getWeekOfWeekyear(instant, getYear(instant));
",0,0,0,2,4,1,8,0,0,8,52,5,0.07494,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,516,"        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,55,5,0.07494,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,517,"        if (instant < firstWeekMillis1) {
",4,1,0,1,3,0,0,0,0,5,33,4,0.07494,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,520,"        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);
",4,1,0,1,2,0,2,0,0,7,59,5,0.07494,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,521,"        if (instant >= firstWeekMillis2) {
",4,1,0,1,3,0,0,0,0,5,34,4,0.07494,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,524,"        return (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;
",8,3,0,3,6,1,0,0,0,11,84,4,0.07494,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,163,"        return getMaximumValue(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.07494,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,60,"        return iChronology.getWeekyear(instant);
",0,0,0,1,2,1,6,0,0,6,40,5,0.07494,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,402,"            i2 = i2 - unitMillis + 1;
",6,2,0,0,0,0,0,0,0,9,25,6,0.07485,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,209,"            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;
",8,7,0,4,8,0,0,0,0,16,71,6,0.07485,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,12,82,"            return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);
",6,5,0,5,10,1,2,0,0,13,71,6,0.07485,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,95,"            instant += 1;
",2,0,0,0,0,0,0,0,0,3,13,6,0.07468,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,96,"            return instant - instant % iUnitMillis - iUnitMillis;
",8,3,0,0,0,1,0,0,0,11,53,6,0.07468,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,12,103,"        return DateTimeConstants.MONDAY;
",4,0,0,0,0,1,0,0,0,4,32,5,0.07468,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,12,112,"        return DateTimeConstants.SUNDAY;
",4,0,0,0,0,1,0,0,0,4,32,5,0.07468,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,554,"            return (DateTimeConstants.MILLIS_PER_DAY - 1)
",4,1,0,1,2,1,0,0,0,5,45,8,0.07459,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,185,"        return iMinDaysInFirstWeek;
",2,0,0,0,0,1,0,0,0,2,27,4,0.07451,0
defect4j,time,org/joda/time/LocalDate,12,96,"    private static final Set<DurationFieldType> DATE_DURATION_TYPES = new HashSet<DurationFieldType>();
",2,0,0,1,2,3,0,8,0,13,99,2,0.07442,0
defect4j,time,org/joda/time/LocalDate,12,98,"        DATE_DURATION_TYPES.add(DurationFieldType.days());
",0,0,0,2,4,0,8,0,0,8,50,5,0.07442,0
defect4j,time,org/joda/time/LocalDate,12,99,"        DATE_DURATION_TYPES.add(DurationFieldType.weeks());
",0,0,0,2,4,0,8,0,0,8,51,5,0.07442,0
defect4j,time,org/joda/time/LocalDate,12,100,"        DATE_DURATION_TYPES.add(DurationFieldType.months());
",0,0,0,2,4,0,8,0,0,8,52,5,0.07442,0
defect4j,time,org/joda/time/LocalDate,12,101,"        DATE_DURATION_TYPES.add(DurationFieldType.weekyears());
",0,0,0,2,4,0,8,0,0,8,55,5,0.07442,0
defect4j,time,org/joda/time/LocalDate,12,102,"        DATE_DURATION_TYPES.add(DurationFieldType.years());
",0,0,0,2,4,0,8,0,0,8,51,5,0.07442,0
defect4j,time,org/joda/time/LocalDate,12,103,"        DATE_DURATION_TYPES.add(DurationFieldType.centuries());
",0,0,0,2,4,0,8,0,0,8,55,5,0.07442,0
defect4j,time,org/joda/time/LocalDate,12,105,"        DATE_DURATION_TYPES.add(DurationFieldType.eras());
",0,0,0,2,4,0,8,0,0,8,50,5,0.07442,0
defect4j,time,org/joda/time/LocalDate,12,106,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07442,0
defect4j,time,org/joda/time/DateTimeUtils,12,299,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.07433,0
defect4j,time,org/joda/time/DateTimeUtils,12,302,"        return zone;
",2,0,0,0,0,1,0,0,0,2,12,4,0.07433,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,414,"            if (isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,4,23,8,0.07399,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,417,"                oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;
",6,1,0,0,0,0,0,0,0,8,50,9,0.07399,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,420,"            yearStart += oneYear;
",4,0,0,0,0,0,0,0,0,5,21,7,0.07399,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,422,"            if (yearStart <= instant) {
",4,1,0,1,3,0,0,0,0,5,27,7,0.07399,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,424,"                year++;
",2,0,0,0,0,0,0,0,0,3,7,9,0.07399,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,792,"        return getMaximumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.07382,0
defect4j,time,org/joda/time/base/AbstractPartial,12,54,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.07306,0
defect4j,time,org/joda/time/base/AbstractPartial,12,55,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07306,0
defect4j,time,org/joda/time/Instant,12,118,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.07232,0
defect4j,time,org/joda/time/Instant,12,119,"        iMillis = instant;
",4,0,0,0,0,0,0,0,0,5,18,4,0.07232,0
defect4j,time,org/joda/time/Instant,12,120,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07232,0
defect4j,time,org/joda/time/Instant,12,256,"        return iMillis;
",2,0,0,0,0,1,0,0,0,2,15,4,0.07223,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,153,"        if ((base = getBase()) != null) {
",2,1,0,3,7,0,2,0,0,7,33,4,0.07183,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,157,"        FieldUtils.verifyValueBounds
",0,0,0,0,0,0,4,0,0,4,28,5,0.07183,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,159,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;
",2,1,0,1,2,1,8,0,0,11,74,4,0.07183,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,92,"        if (instant >= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.06737,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,213,"                leapYears--;
",2,0,0,0,0,0,0,0,0,3,12,8,0.06439,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,534,"        if (instant >= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.06419,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,12,56,"        return iChronology.getDayOfWeek(instant);
",0,0,0,1,2,1,6,0,0,6,41,5,0.06419,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,298,"        FieldUtils.verifyValueBounds(this, month, MIN, iMax);
",0,0,0,1,2,0,10,0,0,10,53,5,0.06184,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,300,"        int thisYear = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,44,5,0.06184,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,302,"        int thisDom = iChronology.getDayOfMonth(instant, thisYear);
",2,0,0,1,2,0,8,0,0,10,59,5,0.06184,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,303,"        int maxDom = iChronology.getDaysInYearMonth(thisYear, month);
",2,0,0,1,2,0,8,0,0,10,61,5,0.06184,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,304,"        if (thisDom > maxDom) {
",4,1,0,1,3,0,0,0,0,5,23,4,0.06184,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,309,"        return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +
",0,1,0,1,2,1,10,0,0,11,68,4,0.06184,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,458,"        int month = getMonthOfYear(millis, year);
",2,0,0,1,2,0,6,0,0,8,41,5,0.06184,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,459,"        return getDayOfMonth(millis, year, month);
",0,0,0,1,2,1,8,0,0,8,42,5,0.06184,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,134,"        return (value > 28 ? getDaysInMonthMax(instant) : 28);
",2,1,0,2,4,1,4,0,0,7,54,6,0.06172,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,96,"        return iChronology.getDaysInMonthMaxForSet(instant, value);
",0,0,0,1,2,1,8,0,0,8,59,5,0.06172,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,82,"        FieldUtils.verifyValueBounds
",0,0,0,0,0,0,4,0,0,4,28,5,0.06160,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,84,"        return iChronology.setYear(instant, year);
",0,0,0,1,2,1,8,0,0,8,42,5,0.06160,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,12,111,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());
",0,0,0,3,6,0,10,0,0,10,80,5,0.06160,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,12,112,"        return instant + (value - get(instant)) * iUnitMillis;
",6,3,0,2,4,1,4,0,0,13,54,4,0.06160,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,175,"        int thisYear = getYear(instant);
",2,0,0,1,2,0,4,0,0,6,32,5,0.06142,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,176,"        int dayOfYear = getDayOfYear(instant, thisYear);
",2,0,0,1,2,0,6,0,0,8,48,5,0.06142,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,177,"        int millisOfDay = getMillisOfDay(instant);
",2,0,0,1,2,0,4,0,0,6,42,5,0.06142,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,179,"        if (dayOfYear > (31 + 28)) { // after Feb 28
",2,2,0,2,5,0,0,0,0,4,44,4,0.06142,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,195,"        instant = getYearMonthDayMillis(year, 1, dayOfYear);
",2,0,0,1,2,0,6,0,0,9,52,4,0.06142,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,196,"        instant += millisOfDay;
",4,0,0,0,0,0,0,0,0,5,23,4,0.06142,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,198,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.06142,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,78,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(),
",0,0,0,1,3,0,8,0,0,8,60,5,0.06136,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,80,"        return instant + (value - get(instant)) * iUnitMillis;
",6,3,0,2,4,1,4,0,0,13,54,4,0.06136,0
defect4j,time,org/joda/time/DateTime,12,527,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,391,"        LimitDurationField(DurationField field) {
",4,0,0,1,3,0,0,2,0,6,41,3,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,392,"            super(field, field.getType());
",2,0,0,2,4,0,4,0,0,6,30,5,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,393,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,99,"        super(base, null);
",2,0,0,1,2,0,0,0,0,3,18,3,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,101,"        iLowerLimit = lowerLimit;
",4,0,0,0,0,0,0,0,0,5,25,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,102,"        iUpperLimit = upperLimit;
",4,0,0,0,0,0,0,0,0,5,25,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,103,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,67,"        if (base == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,71,"        lowerLimit = lowerLimit == null ? null : lowerLimit.toDateTime();
",4,1,0,1,2,0,4,0,0,10,65,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,72,"        upperLimit = upperLimit == null ? null : upperLimit.toDateTime();
",4,1,0,1,2,0,4,0,0,10,65,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,74,"        if (lowerLimit != null && upperLimit != null) {
",4,3,0,1,3,0,0,0,0,7,47,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,81,"        return new LimitChronology(base, (DateTime)lowerLimit, (DateTime)upperLimit);
",6,0,0,3,6,1,0,6,0,12,77,5,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,209,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();
",2,0,0,1,2,0,0,12,0,14,66,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,213,"        fields.eras = convertField(fields.eras, converted);
",8,0,0,1,2,0,4,0,0,13,51,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,214,"        fields.centuries = convertField(fields.centuries, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,215,"        fields.years = convertField(fields.years, converted);
",8,0,0,1,2,0,4,0,0,13,53,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,216,"        fields.months = convertField(fields.months, converted);
",8,0,0,1,2,0,4,0,0,13,55,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,217,"        fields.weekyears = convertField(fields.weekyears, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,218,"        fields.weeks = convertField(fields.weeks, converted);
",8,0,0,1,2,0,4,0,0,13,53,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,219,"        fields.days = convertField(fields.days, converted);
",8,0,0,1,2,0,4,0,0,13,51,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,221,"        fields.halfdays = convertField(fields.halfdays, converted);
",8,0,0,1,2,0,4,0,0,13,59,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,222,"        fields.hours = convertField(fields.hours, converted);
",8,0,0,1,2,0,4,0,0,13,53,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,223,"        fields.minutes = convertField(fields.minutes, converted);
",8,0,0,1,2,0,4,0,0,13,57,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,224,"        fields.seconds = convertField(fields.seconds, converted);
",8,0,0,1,2,0,4,0,0,13,57,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,225,"        fields.millis = convertField(fields.millis, converted);
",8,0,0,1,2,0,4,0,0,13,55,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,229,"        fields.year = convertField(fields.year, converted);
",8,0,0,1,2,0,4,0,0,13,51,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,230,"        fields.yearOfEra = convertField(fields.yearOfEra, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,231,"        fields.yearOfCentury = convertField(fields.yearOfCentury, converted);
",8,0,0,1,2,0,4,0,0,13,69,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,232,"        fields.centuryOfEra = convertField(fields.centuryOfEra, converted);
",8,0,0,1,2,0,4,0,0,13,67,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,233,"        fields.era = convertField(fields.era, converted);
",8,0,0,1,2,0,4,0,0,13,49,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,234,"        fields.dayOfWeek = convertField(fields.dayOfWeek, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,235,"        fields.dayOfMonth = convertField(fields.dayOfMonth, converted);
",8,0,0,1,2,0,4,0,0,13,63,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,236,"        fields.dayOfYear = convertField(fields.dayOfYear, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,237,"        fields.monthOfYear = convertField(fields.monthOfYear, converted);
",8,0,0,1,2,0,4,0,0,13,65,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,238,"        fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);
",8,0,0,1,2,0,4,0,0,13,71,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,239,"        fields.weekyear = convertField(fields.weekyear, converted);
",8,0,0,1,2,0,4,0,0,13,59,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,240,"        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);
",8,0,0,1,2,0,4,0,0,13,77,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,242,"        fields.millisOfSecond = convertField(fields.millisOfSecond, converted);
",8,0,0,1,2,0,4,0,0,13,71,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,243,"        fields.millisOfDay = convertField(fields.millisOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,65,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,244,"        fields.secondOfMinute = convertField(fields.secondOfMinute, converted);
",8,0,0,1,2,0,4,0,0,13,71,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,245,"        fields.secondOfDay = convertField(fields.secondOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,65,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,246,"        fields.minuteOfHour = convertField(fields.minuteOfHour, converted);
",8,0,0,1,2,0,4,0,0,13,67,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,247,"        fields.minuteOfDay = convertField(fields.minuteOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,65,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,248,"        fields.hourOfDay = convertField(fields.hourOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,249,"        fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);
",8,0,0,1,2,0,4,0,0,13,69,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,250,"        fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,71,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,251,"        fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);
",8,0,0,1,2,0,4,0,0,13,79,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,252,"        fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,67,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,253,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,256,"        if (field == null || !field.isSupported()) {
",2,2,0,2,5,0,4,0,0,9,44,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,257,"            return field;
",2,0,0,0,0,1,0,0,0,2,13,6,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,259,"        if (converted.containsKey(field)) {
",0,0,0,2,5,0,6,0,0,6,35,5,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,260,"            return (DurationField)converted.get(field);
",0,0,0,2,4,1,6,2,0,8,43,7,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,262,"        LimitDurationField limitField = new LimitDurationField(field);
",4,0,0,1,2,0,0,4,0,8,62,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,263,"        converted.put(field, limitField);
",0,0,0,1,2,0,8,0,0,8,33,5,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,264,"        return limitField;
",2,0,0,0,0,1,0,0,0,2,18,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,268,"        if (field == null || !field.isSupported()) {
",2,2,0,2,5,0,4,0,0,9,44,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,271,"        if (converted.containsKey(field)) {
",0,0,0,2,5,0,6,0,0,6,35,5,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,274,"        LimitDateTimeField limitField =
",2,0,0,0,0,0,0,2,0,4,31,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,279,"        converted.put(field, limitField);
",0,0,0,1,2,0,8,0,0,8,33,5,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,280,"        return limitField;
",2,0,0,0,0,1,0,0,0,2,18,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,453,"                           DurationField leapDurationField) {
",2,0,0,0,2,0,0,2,0,4,34,4,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,454,"            super(field, field.getType());
",2,0,0,2,4,0,4,0,0,6,30,5,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,455,"            iDurationField = durationField;
",4,0,0,0,0,0,0,0,0,5,31,5,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,456,"            iRangeDurationField = rangeDurationField;
",4,0,0,0,0,0,0,0,0,5,41,5,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,457,"            iLeapDurationField = leapDurationField;
",4,0,0,0,0,0,0,0,0,5,39,5,0.06130,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,458,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06130,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,12,51,"        super(DateTimeFieldType.era());
",0,0,0,2,4,0,4,0,0,4,31,5,0.06130,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,12,52,"        iEraText = text;
",4,0,0,0,0,0,0,0,0,5,16,4,0.06130,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,12,53,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06130,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,12,106,"        return UnsupportedDurationField.getInstance(DurationFieldType.eras());
",0,0,0,2,4,1,8,0,0,8,70,5,0.06130,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,12,111,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.06130,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,88,"        return iField.isSupported();
",0,0,0,1,2,1,4,0,0,4,28,5,0.06124,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,208,"        return iField.getLeapDurationField();
",0,0,0,1,2,1,4,0,0,4,37,5,0.06124,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,485,"        long yearStart = getYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,37,5,0.06119,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,486,"        return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;
",8,3,0,3,6,1,0,0,0,11,76,4,0.06119,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,80,"        return iType;
",2,0,0,0,0,1,0,0,0,2,13,4,0.06119,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,192,"        return iField.getDurationField();
",0,0,0,1,2,1,4,0,0,4,33,5,0.06119,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,224,"        return iChronology.getMinYear();
",0,0,0,1,2,1,4,0,0,4,32,5,0.06113,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,212,"        return iField.getMinimumValue();
",0,0,0,1,2,1,4,0,0,4,32,5,0.06113,0
defect4j,time,org/joda/time/field/SkipDateTimeField,12,54,"        this(chronology, field, 0);
",4,0,0,1,2,0,0,0,0,4,27,4,0.06113,0
defect4j,time,org/joda/time/field/SkipDateTimeField,12,55,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06113,0
defect4j,time,org/joda/time/field/SkipDateTimeField,12,65,"        super(field);
",2,0,0,1,2,0,0,0,0,2,13,4,0.06113,0
defect4j,time,org/joda/time/field/SkipDateTimeField,12,66,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.06113,0
defect4j,time,org/joda/time/field/SkipDateTimeField,12,67,"        int min = super.getMinimumValue();
",4,0,0,1,2,0,0,0,0,4,34,5,0.06113,0
defect4j,time,org/joda/time/field/SkipDateTimeField,12,68,"        if (min < skip) {
",4,1,0,1,3,0,0,0,0,5,17,4,0.06113,0
defect4j,time,org/joda/time/field/SkipDateTimeField,12,69,"            iMinValue = min - 1;
",4,1,0,0,0,0,0,0,0,6,20,6,0.06113,0
defect4j,time,org/joda/time/field/SkipDateTimeField,12,75,"        iSkip = skip;
",4,0,0,0,0,0,0,0,0,5,13,4,0.06113,0
defect4j,time,org/joda/time/field/SkipDateTimeField,12,76,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06113,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,52,"        this(field, null);
",2,0,0,1,2,0,0,0,0,2,18,4,0.06107,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,53,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06107,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,62,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.06107,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,63,"        if (field == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.06107,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,66,"        iField = field;
",4,0,0,0,0,0,0,0,0,5,15,4,0.06107,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,67,"        iType = (type == null ? field.getType() : type);
",6,1,0,2,4,0,4,0,0,12,48,4,0.06107,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,68,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06107,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,196,"        return iField.getRangeDurationField();
",0,0,0,1,2,1,4,0,0,4,38,5,0.06107,0
defect4j,time,org/joda/time/DateTime,12,516,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,0.06101,0
defect4j,time,org/joda/time/DateTime,12,518,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06101,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,552,"            return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);
",6,1,0,2,4,1,0,0,0,7,58,8,0.06072,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,55,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.06066,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,12,131,"        return iRange - 1;
",2,1,0,0,0,1,0,0,0,3,18,4,0.06049,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,551,"        if (instant >= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.06043,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,115,"        return iChronology.getMinYear();
",0,0,0,1,2,1,4,0,0,4,32,5,0.05931,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,131,"        if ((base = iBase) != null && (iBaseFlags & 5) == 5) {
",6,4,0,3,7,0,0,0,0,11,54,4,0.05899,0
defect4j,time,org/joda/time/field/FieldUtils,12,217,"        if ((value < lowerBound) || (value > upperBound)) {
",8,3,0,3,7,0,0,0,0,11,51,4,0.05845,0
defect4j,time,org/joda/time/field/FieldUtils,12,222,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05845,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,435,"        return getMonthOfYear(millis, getYear(millis));
",0,0,0,2,4,1,8,0,0,8,47,5,0.05755,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,72,"        return iChronology.getMonthOfYear(instant);
",0,0,0,1,2,1,6,0,0,6,43,5,0.05750,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,12,165,"        return getWrappedField().getLeapDurationField();
",0,0,0,2,4,1,4,0,0,4,48,5,0.05735,0
defect4j,time,org/joda/time/DateTimeFieldType,12,524,"                    return chronology.secondOfMinute();
",0,0,0,1,2,1,4,0,0,4,35,7,0.05714,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,77,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.05634,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,12,79,"        if (instant >= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.05624,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,123,"            return MIN_DAYS_PER_MONTH_ARRAY[month - 1];
",2,1,1,1,2,1,0,0,0,5,43,7,0.05508,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,448,"        int year = getYear(millis);
",2,0,0,1,2,0,4,0,0,6,27,5,0.05424,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,449,"        int month = getMonthOfYear(millis, year);
",2,0,0,1,2,0,6,0,0,8,41,5,0.05424,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,450,"        return getDayOfMonth(millis, year, month);
",0,0,0,1,2,1,8,0,0,8,42,5,0.05424,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,54,"        return iChronology.getYear(instant);
",0,0,0,1,2,1,6,0,0,6,36,5,0.05424,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,47,"        return iChronology.getDayOfMonth(instant);
",0,0,0,1,2,1,6,0,0,6,42,5,0.05415,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,142,"            return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];
",2,1,1,1,2,1,0,0,0,5,50,7,0.05387,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,468,"        long dateMillis = getYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,38,5,0.05378,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,469,"        dateMillis += getTotalMillisByYearMonth(year, month);
",2,0,0,1,2,0,6,0,0,9,53,4,0.05378,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,470,"        return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;
",8,3,0,3,6,1,0,0,0,11,76,4,0.05378,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,120,"        if (isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,4,23,5,0.05316,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,88,"        int i = (int)((millis - getYearMillis(year)) >> 10);
",4,2,0,4,8,0,4,0,0,10,52,5,0.05289,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,93,"        return
",0,0,0,0,0,1,0,0,0,0,6,3,0.05289,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,233,"        return MILLIS_PER_YEAR / 2;
",2,1,0,0,0,1,0,0,0,3,27,4,0.05267,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,241,"        return (1970L * MILLIS_PER_YEAR) / 2;
",2,2,0,1,2,1,0,0,0,4,37,4,0.05267,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,221,"        return MIN_YEAR;
",2,0,0,0,0,1,0,0,0,2,16,4,0.05263,0
defect4j,time,org/joda/time/base/BaseDateTime,12,256,"        iMillis = checkInstant(instant, iChronology);
",2,0,0,1,2,0,6,0,0,9,45,4,0.05259,0
defect4j,time,org/joda/time/base/BaseDateTime,12,257,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05259,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,399,"        long unitMillis = getAverageMillisPerYearDividedByTwo();
",2,0,0,1,2,0,2,0,0,4,56,5,0.05259,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,400,"        long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();
",4,2,0,2,4,0,2,0,0,8,64,5,0.05259,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,401,"        if (i2 < 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.05259,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,404,"        int year = (int) (i2 / unitMillis);
",6,1,0,2,4,0,0,0,0,7,35,5,0.05259,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,406,"        long yearStart = getYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,37,5,0.05259,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,407,"        long diff = instant - yearStart;
",6,1,0,0,0,0,0,0,0,7,32,5,0.05259,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,409,"        if (diff < 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.05259,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,411,"        } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {
",6,2,0,1,4,0,0,0,0,8,61,5,0.05259,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,428,"        return year;
",2,0,0,0,0,1,0,0,0,2,12,4,0.05259,0
defect4j,time,org/joda/time/base/BaseDateTime,12,252,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.05242,0
defect4j,time,org/joda/time/base/BaseDateTime,12,253,"        iChronology = checkChronology(chronology);
",2,0,0,1,2,0,4,0,0,7,42,4,0.05242,0
defect4j,time,org/joda/time/base/BaseDateTime,12,254,"        long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
",2,0,0,0,1,0,10,0,0,12,75,5,0.05242,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,139,"        if (isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,4,23,5,0.05229,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,140,"            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];
",2,1,1,1,2,1,0,0,0,5,50,7,0.05229,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,202,"        int leapYears = year / 100;
",4,1,0,0,0,0,0,0,0,5,27,5,0.05153,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,203,"        if (year < 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.05153,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,211,"            leapYears = (year >> 2) - leapYears + (leapYears >> 2);
",8,4,0,2,4,0,0,0,0,13,55,6,0.05153,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,212,"            if (isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,4,23,7,0.05153,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,217,"        return (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;
",10,4,0,2,4,1,0,0,0,14,90,4,0.05153,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,603,"        FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());
",0,0,0,4,8,0,14,0,0,14,89,5,0.05149,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,604,"        FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));
",0,0,0,3,6,0,14,0,0,14,97,5,0.05149,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,605,"        FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));
",0,0,0,3,6,0,16,0,0,16,115,5,0.05149,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,606,"        return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);
",0,0,0,1,2,1,8,0,0,8,60,5,0.05149,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,682,"        return getMaxMonth();
",0,0,0,1,2,1,2,0,0,2,21,5,0.05149,0
defect4j,time,org/joda/time/field/FieldUtils,12,235,"        if ((value < lowerBound) || (value > upperBound)) {
",8,3,0,3,7,0,0,0,0,11,51,4,0.05149,0
defect4j,time,org/joda/time/field/FieldUtils,12,240,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05149,0
defect4j,time,org/joda/time/DateTimeUtils,12,98,"        checkPermission();
",0,0,0,1,2,0,2,0,0,2,18,5,0.05116,0
defect4j,time,org/joda/time/DateTimeUtils,12,99,"        cMillisProvider = SYSTEM_MILLIS_PROVIDER;
",4,0,0,0,0,0,0,0,0,5,41,4,0.05116,0
defect4j,time,org/joda/time/DateTimeUtils,12,100,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05116,0
defect4j,time,org/joda/time/DateTimeUtils,12,112,"        checkPermission();
",0,0,0,1,2,0,2,0,0,2,18,5,0.05116,0
defect4j,time,org/joda/time/DateTimeUtils,12,113,"        cMillisProvider = new FixedMillisProvider(fixedMillis);
",4,0,0,1,2,0,0,2,0,7,55,4,0.05116,0
defect4j,time,org/joda/time/DateTimeUtils,12,114,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05116,0
defect4j,time,org/joda/time/DateTimeUtils,12,159,"        SecurityManager sm = System.getSecurityManager();
",2,0,0,1,2,0,4,2,0,8,49,4,0.05116,0
defect4j,time,org/joda/time/DateTimeUtils,12,160,"        if (sm != null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.05116,0
defect4j,time,org/joda/time/DateTimeUtils,12,163,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05116,0
defect4j,time,org/joda/time/DateTimeUtils,12,530,"        FixedMillisProvider(long fixedMillis) {
",4,0,0,1,3,0,0,0,0,4,39,3,0.05116,0
defect4j,time,org/joda/time/DateTimeUtils,12,531,"            iMillis = fixedMillis;
",4,0,0,0,0,0,0,0,0,5,22,5,0.05116,0
defect4j,time,org/joda/time/DateTimeUtils,12,532,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05116,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,197,"        return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);
",6,8,0,5,10,1,0,0,0,14,69,4,0.05112,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,121,"            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];
",2,1,1,1,2,1,0,0,0,5,43,7,0.05079,0
defect4j,time,org/joda/time/base/BaseDateTime,12,284,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.05039,0
defect4j,time,org/joda/time/base/AbstractDateTime,12,51,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.05004,0
defect4j,time,org/joda/time/base/AbstractDateTime,12,52,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05004,0
defect4j,time,org/joda/time/base/BaseDateTime,12,270,"        return DateTimeUtils.getChronology(chronology);
",0,0,0,1,2,1,6,0,0,6,47,5,0.05004,0
defect4j,time,org/joda/time/base/AbstractInstant,12,61,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.04977,0
defect4j,time,org/joda/time/base/AbstractInstant,12,62,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04977,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,385,"        long millis = getYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,34,5,0.04919,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,386,"        millis += getTotalMillisByYearMonth(year, month);
",2,0,0,1,2,0,6,0,0,9,49,4,0.04919,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,387,"        return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;
",8,3,0,2,4,1,0,0,0,11,74,4,0.04919,0
defect4j,time,org/joda/time/DateTimeZone,12,174,"        SecurityManager sm = System.getSecurityManager();
",2,0,0,1,2,0,4,2,0,8,49,4,0.04908,0
defect4j,time,org/joda/time/DateTimeZone,12,175,"        if (sm != null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.04908,0
defect4j,time,org/joda/time/DateTimeZone,12,178,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.04908,0
defect4j,time,org/joda/time/DateTimeZone,12,181,"        synchronized(DateTimeZone.class) {
",0,0,0,1,3,0,0,2,0,2,34,6,0.04908,0
defect4j,time,org/joda/time/DateTimeZone,12,182,"            cDefault = zone;
",4,0,0,0,0,0,0,0,0,5,16,6,0.04908,0
defect4j,time,org/joda/time/DateTimeZone,12,183,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04908,0
defect4j,time,org/joda/time/DateTimeZone,12,184,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04908,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,360,"        return getYearInfo(year).iFirstDayMillis;
",2,0,0,1,2,1,4,0,0,6,41,5,0.04780,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,738,"        YearInfo info = iYearInfoCache[year & CACHE_MASK];
",6,1,1,1,2,0,0,2,0,11,50,4,0.04780,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,739,"        if (info == null || info.iYear != year) {
",8,3,0,1,3,0,0,0,0,11,41,4,0.04780,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,740,"            info = new YearInfo(year, calculateFirstDayOfYearMillis(year));
",4,0,0,2,4,0,4,2,0,11,63,6,0.04780,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,741,"            iYearInfoCache[year & CACHE_MASK] = info;
",6,1,1,1,2,0,0,0,0,10,41,6,0.04780,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,743,"        return info;
",2,0,0,0,0,1,0,0,0,2,12,4,0.04780,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,770,"        YearInfo(int year, long firstDayMillis) {
",6,0,0,1,3,0,0,0,0,6,41,3,0.04780,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,771,"            iYear = year;
",4,0,0,0,0,0,0,0,0,5,13,5,0.04780,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,772,"            iFirstDayMillis = firstDayMillis;
",4,0,0,0,0,0,0,0,0,5,33,5,0.04780,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,773,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04780,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,123,"        return iZone.hashCode();
",0,0,0,1,2,1,4,0,0,4,24,5,0.04744,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,12,127,"        return UnsupportedDurationField.getInstance(DurationFieldType.eras());
",0,0,0,2,4,1,8,0,0,8,70,5,0.04709,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,12,131,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.04709,0
defect4j,time,org/joda/time/DateTimeZone,12,147,"                        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04675,0
defect4j,time,org/joda/time/DateTimeZone,12,133,"        DateTimeZone zone = cDefault;
",4,0,0,0,0,0,0,2,0,6,29,4,0.04672,0
defect4j,time,org/joda/time/DateTimeZone,12,134,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.04672,0
defect4j,time,org/joda/time/DateTimeZone,12,135,"            synchronized(DateTimeZone.class) {
",0,0,0,1,3,0,0,2,0,2,34,8,0.04672,0
defect4j,time,org/joda/time/DateTimeZone,12,136,"                zone = cDefault;
",4,0,0,0,0,0,0,0,0,5,16,8,0.04672,0
defect4j,time,org/joda/time/DateTimeZone,12,137,"                if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,8,0.04672,0
defect4j,time,org/joda/time/DateTimeZone,12,138,"                    DateTimeZone temp = null;
",2,0,0,0,0,0,0,2,0,4,25,10,0.04672,0
defect4j,time,org/joda/time/DateTimeZone,12,141,"                            String id = System.getProperty(""user.timezone"");
",2,0,0,1,2,0,4,2,0,9,48,14,0.04672,0
defect4j,time,org/joda/time/DateTimeZone,12,142,"                            if (id != null) {  // null check avoids stack overflow
",2,1,0,1,3,0,0,0,0,3,54,14,0.04672,0
defect4j,time,org/joda/time/DateTimeZone,12,143,"                                temp = forID(id);
",2,0,0,1,2,0,4,0,0,7,17,16,0.04672,0
defect4j,time,org/joda/time/DateTimeZone,12,148,"                        if (temp == null) {
",2,1,0,1,3,0,0,0,0,3,19,12,0.04672,0
defect4j,time,org/joda/time/DateTimeZone,12,153,"                    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04672,0
defect4j,time,org/joda/time/DateTimeZone,12,154,"                    if (temp == null) {
",2,1,0,1,3,0,0,0,0,3,19,10,0.04672,0
defect4j,time,org/joda/time/DateTimeZone,12,157,"                    cDefault = zone = temp;
",6,0,0,0,0,0,0,0,0,8,23,10,0.04672,0
defect4j,time,org/joda/time/DateTimeZone,12,159,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04672,0
defect4j,time,org/joda/time/DateTimeZone,12,161,"        return zone;
",2,0,0,0,0,1,0,0,0,2,12,4,0.04672,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,133,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.04624,0
defect4j,time,org/joda/time/DateTimeZone,12,1250,"        return 57 + getID().hashCode();
",0,1,0,2,4,1,4,0,0,5,31,4,0.04601,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,12,218,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,82,"        super(base, zone);
",4,0,0,1,2,0,0,0,0,4,18,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,83,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,56,"        if (base == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,59,"        base = base.withUTC();
",2,0,0,1,2,0,4,0,0,7,22,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,60,"        if (base == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,63,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,66,"        return new ZonedChronology(base, zone);
",4,0,0,1,2,1,0,2,0,6,39,5,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,72,"        return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;
",6,4,0,1,2,1,4,0,0,14,87,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,86,"        return (DateTimeZone)getParam();
",0,0,0,2,4,1,2,2,0,4,32,5,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,153,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();
",2,0,0,1,2,0,0,12,0,14,66,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,157,"        fields.eras = convertField(fields.eras, converted);
",8,0,0,1,2,0,4,0,0,13,51,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,158,"        fields.centuries = convertField(fields.centuries, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,159,"        fields.years = convertField(fields.years, converted);
",8,0,0,1,2,0,4,0,0,13,53,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,160,"        fields.months = convertField(fields.months, converted);
",8,0,0,1,2,0,4,0,0,13,55,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,161,"        fields.weekyears = convertField(fields.weekyears, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,162,"        fields.weeks = convertField(fields.weeks, converted);
",8,0,0,1,2,0,4,0,0,13,53,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,163,"        fields.days = convertField(fields.days, converted);
",8,0,0,1,2,0,4,0,0,13,51,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,165,"        fields.halfdays = convertField(fields.halfdays, converted);
",8,0,0,1,2,0,4,0,0,13,59,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,166,"        fields.hours = convertField(fields.hours, converted);
",8,0,0,1,2,0,4,0,0,13,53,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,167,"        fields.minutes = convertField(fields.minutes, converted);
",8,0,0,1,2,0,4,0,0,13,57,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,168,"        fields.seconds = convertField(fields.seconds, converted);
",8,0,0,1,2,0,4,0,0,13,57,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,169,"        fields.millis = convertField(fields.millis, converted);
",8,0,0,1,2,0,4,0,0,13,55,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,173,"        fields.year = convertField(fields.year, converted);
",8,0,0,1,2,0,4,0,0,13,51,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,174,"        fields.yearOfEra = convertField(fields.yearOfEra, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,175,"        fields.yearOfCentury = convertField(fields.yearOfCentury, converted);
",8,0,0,1,2,0,4,0,0,13,69,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,176,"        fields.centuryOfEra = convertField(fields.centuryOfEra, converted);
",8,0,0,1,2,0,4,0,0,13,67,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,177,"        fields.era = convertField(fields.era, converted);
",8,0,0,1,2,0,4,0,0,13,49,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,178,"        fields.dayOfWeek = convertField(fields.dayOfWeek, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,179,"        fields.dayOfMonth = convertField(fields.dayOfMonth, converted);
",8,0,0,1,2,0,4,0,0,13,63,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,180,"        fields.dayOfYear = convertField(fields.dayOfYear, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,181,"        fields.monthOfYear = convertField(fields.monthOfYear, converted);
",8,0,0,1,2,0,4,0,0,13,65,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,182,"        fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);
",8,0,0,1,2,0,4,0,0,13,71,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,183,"        fields.weekyear = convertField(fields.weekyear, converted);
",8,0,0,1,2,0,4,0,0,13,59,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,184,"        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);
",8,0,0,1,2,0,4,0,0,13,77,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,186,"        fields.millisOfSecond = convertField(fields.millisOfSecond, converted);
",8,0,0,1,2,0,4,0,0,13,71,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,187,"        fields.millisOfDay = convertField(fields.millisOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,65,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,188,"        fields.secondOfMinute = convertField(fields.secondOfMinute, converted);
",8,0,0,1,2,0,4,0,0,13,71,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,189,"        fields.secondOfDay = convertField(fields.secondOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,65,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,190,"        fields.minuteOfHour = convertField(fields.minuteOfHour, converted);
",8,0,0,1,2,0,4,0,0,13,67,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,191,"        fields.minuteOfDay = convertField(fields.minuteOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,65,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,192,"        fields.hourOfDay = convertField(fields.hourOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,193,"        fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);
",8,0,0,1,2,0,4,0,0,13,69,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,194,"        fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,71,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,195,"        fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);
",8,0,0,1,2,0,4,0,0,13,79,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,196,"        fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,67,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,197,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,200,"        if (field == null || !field.isSupported()) {
",2,2,0,2,5,0,4,0,0,9,44,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,201,"            return field;
",2,0,0,0,0,1,0,0,0,2,13,6,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,203,"        if (converted.containsKey(field)) {
",0,0,0,2,5,0,6,0,0,6,35,5,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,204,"            return (DurationField)converted.get(field);
",0,0,0,2,4,1,6,2,0,8,43,7,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,206,"        ZonedDurationField zonedField = new ZonedDurationField(field, getZone());
",4,0,0,2,4,0,2,4,0,10,73,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,207,"        converted.put(field, zonedField);
",0,0,0,1,2,0,8,0,0,8,33,5,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,208,"        return zonedField;
",2,0,0,0,0,1,0,0,0,2,18,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,212,"        if (field == null || !field.isSupported()) {
",2,2,0,2,5,0,4,0,0,9,44,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,215,"        if (converted.containsKey(field)) {
",0,0,0,2,5,0,6,0,0,6,35,5,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,218,"        ZonedDateTimeField zonedField =
",2,0,0,0,0,0,0,2,0,4,31,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,223,"        converted.put(field, zonedField);
",0,0,0,1,2,0,8,0,0,8,33,5,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,224,"        return zonedField;
",2,0,0,0,0,1,0,0,0,2,18,4,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,284,"            super(field.getType());
",0,0,0,2,4,0,4,0,0,4,23,6,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,285,"            if (!field.isSupported()) {
",0,0,0,2,5,0,4,0,0,5,27,5,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,288,"            iField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,289,"            iTimeField = useTimeArithmetic(field);
",2,0,0,1,2,0,4,0,0,7,38,5,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,290,"            iZone = zone;
",4,0,0,0,0,0,0,0,0,5,13,5,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,291,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,298,"            return iField.getUnitMillis();
",0,0,0,1,2,1,4,0,0,4,30,6,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,389,"            super(field.getType());
",0,0,0,2,4,0,4,0,0,4,23,6,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,390,"            if (!field.isSupported()) {
",0,0,0,2,5,0,4,0,0,5,27,5,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,393,"            iField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,394,"            iZone = zone;
",4,0,0,0,0,0,0,0,0,5,13,5,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,395,"            iDurationField = durationField;
",4,0,0,0,0,0,0,0,0,5,31,5,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,396,"            iTimeField = useTimeArithmetic(durationField);
",2,0,0,1,2,0,4,0,0,7,46,5,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,397,"            iRangeDurationField = rangeDurationField;
",4,0,0,0,0,0,0,0,0,5,41,5,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,398,"            iLeapDurationField = leapDurationField;
",4,0,0,0,0,0,0,0,0,5,39,5,0.04601,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,399,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04601,0
defect4j,time,org/joda/time/field/ScaledDurationField,12,109,"        return getWrappedField().getUnitMillis() * iScalar;
",2,1,0,2,4,1,4,0,0,7,51,4,0.04601,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,315,"        return iParam;
",2,0,0,0,0,1,0,0,0,2,14,4,0.04598,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,12,160,"            return iUnitMillis;
",2,0,0,0,0,1,0,0,0,2,19,5,0.04598,0
defect4j,time,org/joda/time/DateTimeFieldType,12,520,"                    return chronology.minuteOfHour();
",0,0,0,1,2,1,4,0,0,4,33,7,0.04533,0
defect4j,time,org/joda/time/DateTimeUtils,12,285,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.04520,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,334,"        return iChronology.days();
",0,0,0,1,2,1,4,0,0,4,26,5,0.04408,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,726,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.04408,0
defect4j,time,org/joda/time/field/BaseDurationField,12,55,"        return iType;
",2,0,0,0,0,1,0,0,0,2,13,4,0.04408,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,111,"        return iChronology.days();
",0,0,0,1,2,1,4,0,0,4,26,5,0.04408,0
defect4j,time,org/joda/time/field/PreciseDurationField,12,142,"        long millis = iUnitMillis;
",4,0,0,0,0,0,0,0,0,4,26,5,0.04408,0
defect4j,time,org/joda/time/field/PreciseDurationField,12,143,"        int hash = (int) (millis ^ (millis >>> 32));
",6,2,0,3,6,0,0,0,0,8,44,5,0.04408,0
defect4j,time,org/joda/time/field/PreciseDurationField,12,144,"        hash += getType().hashCode();
",2,0,0,2,4,0,4,0,0,7,29,4,0.04408,0
defect4j,time,org/joda/time/field/PreciseDurationField,12,145,"        return hash;
",2,0,0,0,0,1,0,0,0,2,12,4,0.04408,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,12,101,"        return getWrappedField().getLeapDurationField();
",0,0,0,2,4,1,4,0,0,4,48,5,0.04408,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,12,90,"        return iField.getRangeDurationField();
",0,0,0,1,2,1,4,0,0,4,38,5,0.04408,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,12,139,"        return iRangeField;
",2,0,0,0,0,1,0,0,0,2,19,4,0.04408,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,12,94,"        return iChronology.weeks();
",0,0,0,1,2,1,4,0,0,4,27,5,0.04408,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,12,56,"        return iChronology.years();
",0,0,0,1,2,1,4,0,0,4,27,5,0.04408,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,208,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.04408,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,220,"        return iChronology.weeks();
",0,0,0,1,2,1,4,0,0,4,27,5,0.04408,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,58,"        return iChronology.weekyears();
",0,0,0,1,2,1,4,0,0,4,31,5,0.04408,0
defect4j,time,org/joda/time/field/DecoratedDurationField,12,69,"        return iField;
",2,0,0,0,0,1,0,0,0,2,14,4,0.04408,0
defect4j,time,org/joda/time/field/ScaledDurationField,12,147,"        long scalar = iScalar;
",4,0,0,0,0,0,0,0,0,4,22,5,0.04408,0
defect4j,time,org/joda/time/field/ScaledDurationField,12,148,"        int hash = (int) (scalar ^ (scalar >>> 32));
",6,2,0,3,6,0,0,0,0,8,44,5,0.04408,0
defect4j,time,org/joda/time/field/ScaledDurationField,12,149,"        hash += getType().hashCode();
",2,0,0,2,4,0,4,0,0,7,29,4,0.04408,0
defect4j,time,org/joda/time/field/ScaledDurationField,12,150,"        hash += getWrappedField().hashCode();
",2,0,0,2,4,0,4,0,0,7,37,4,0.04408,0
defect4j,time,org/joda/time/field/ScaledDurationField,12,151,"        return hash;
",2,0,0,0,0,1,0,0,0,2,12,4,0.04408,0
defect4j,time,org/joda/time/field/MillisDurationField,12,49,"        return DurationFieldType.millis();
",0,0,0,1,2,1,4,0,0,4,34,5,0.04408,0
defect4j,time,org/joda/time/field/MillisDurationField,12,155,"        return (int) getUnitMillis();
",0,0,0,2,4,1,2,0,0,2,29,6,0.04408,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,315,"        return iChronology.years();
",0,0,0,1,2,1,4,0,0,4,27,5,0.04405,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,95,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.04405,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,12,122,"        return iRangeField;
",2,0,0,0,0,1,0,0,0,2,19,4,0.04405,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,51,"        return iChronology.months();
",0,0,0,1,2,1,4,0,0,4,28,5,0.04405,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,141,"        return iUnitField;
",2,0,0,0,0,1,0,0,0,2,18,4,0.04381,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,122,"        super(base, null);
",2,0,0,1,2,0,0,0,0,3,18,3,0.04375,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,123,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04375,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,63,"    private static final Map<DateTimeZone, ISOChronology> cCache = new HashMap<DateTimeZone, ISOChronology>();
",2,0,0,1,2,3,0,12,0,17,106,2,0.04375,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,65,"        cFastCache = new ISOChronology[FAST_CACHE_SIZE];
",2,0,1,1,2,0,0,2,0,7,48,4,0.04375,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,66,"        INSTANCE_UTC = new ISOChronology(GregorianChronology.getInstanceUTC());
",2,0,0,2,4,0,4,2,0,9,71,4,0.04375,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,67,"        cCache.put(DateTimeZone.UTC, INSTANCE_UTC);
",4,0,0,1,2,0,6,0,0,10,43,5,0.04375,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,68,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04375,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,169,"        if (getBase().getZone() == DateTimeZone.UTC) {
",4,1,0,3,7,0,4,0,0,9,46,4,0.04375,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,171,"            fields.centuryOfEra = new DividedDateTimeField(
",4,0,0,0,1,0,0,2,0,7,47,6,0.04375,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,173,"            fields.yearOfCentury = new RemainderDateTimeField(
",4,0,0,0,1,0,0,2,0,7,50,6,0.04375,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,175,"            fields.weekyearOfCentury = new RemainderDateTimeField(
",4,0,0,0,1,0,0,2,0,7,54,6,0.04375,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,178,"            fields.centuries = fields.centuryOfEra.getDurationField();
",8,0,0,1,2,0,2,0,0,11,58,6,0.04375,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,180,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04375,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,81,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.04375,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,12,46,"        super(GregorianChronology.getInstanceUTC().year(), DateTimeFieldType.yearOfEra());
",0,0,0,4,8,0,10,0,0,10,82,5,0.04375,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,12,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04375,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,12,40,"    static final DateTimeField INSTANCE = new ISOYearOfEraDateTimeField();
",2,0,0,1,2,2,0,4,0,8,70,2,0.04375,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,12,87,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.04375,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,12,91,"        return getWrappedField().getMaximumValue();
",0,0,0,2,4,1,4,0,0,4,43,5,0.04375,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,148,"        super(base, param, minDaysInFirstWeek);
",6,0,0,1,2,0,0,0,0,6,39,4,0.04369,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,149,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04369,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,68,"    private static final Map<DateTimeZone, GregorianChronology[]> cCache = new HashMap<DateTimeZone, GregorianChronology[]>();
",2,0,0,3,6,3,0,12,0,17,122,2,0.04369,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,71,"        INSTANCE_UTC = getInstance(DateTimeZone.UTC);
",6,0,0,1,2,0,2,0,0,9,45,4,0.04369,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,72,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04369,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,100,"        return getInstance(zone, 4);
",0,0,0,1,2,1,4,0,0,4,28,5,0.04369,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,111,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.04369,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,115,"        synchronized (cCache) {
",2,0,0,1,3,0,0,0,0,2,23,4,0.04369,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,116,"            GregorianChronology[] chronos = cCache.get(zone);
",2,0,0,2,4,0,6,2,0,10,49,6,0.04369,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,117,"            if (chronos == null) {
",2,1,0,1,3,0,0,0,0,3,22,6,0.04369,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,118,"                chronos = new GregorianChronology[7];
",2,0,0,1,2,0,0,2,0,5,37,8,0.04369,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,119,"                cCache.put(zone, chronos);
",0,0,0,1,2,0,8,0,0,8,26,9,0.04369,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,122,"                chrono = chronos[minDaysInFirstWeek - 1];
",4,1,1,1,2,0,0,0,0,8,41,8,0.04369,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,126,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04369,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,127,"            if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.04369,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,128,"                if (zone == DateTimeZone.UTC) {
",6,1,0,1,3,0,0,0,0,7,31,8,0.04369,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,129,"                    chrono = new GregorianChronology(null, null, minDaysInFirstWeek);
",4,0,0,1,2,0,0,2,0,8,65,10,0.04369,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,135,"                chronos[minDaysInFirstWeek - 1] = chrono;
",4,1,1,1,2,0,0,0,0,8,41,8,0.04369,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,137,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04369,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,138,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.04369,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,191,"        if (getBase() == null) {
",0,1,0,2,5,0,2,0,0,4,24,4,0.04369,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,192,"            super.assemble(fields);
",4,0,0,1,2,0,0,0,0,4,23,7,0.04369,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,194,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04369,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,225,"        return MAX_YEAR;
",2,0,0,0,0,1,0,0,0,2,16,4,0.04369,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,229,"        return MILLIS_PER_YEAR;
",2,0,0,0,0,1,0,0,0,2,23,4,0.04369,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,237,"        return MILLIS_PER_MONTH;
",2,0,0,0,0,1,0,0,0,2,24,4,0.04369,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,45,"public final class GregorianChronology extends BasicGJChronology {
",2,0,0,0,1,2,0,2,0,6,66,1,0.04369,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,146,"        return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,5,0.04366,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,691,"        return 12;
",0,0,0,0,0,1,0,0,0,0,10,3,0.04366,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,75,"        super(base, param, minDaysInFirstWeek);
",6,0,0,1,2,0,0,0,0,6,39,4,0.04366,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,76,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04366,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,42,"    private static final int[] MIN_DAYS_PER_MONTH_ARRAY = {
",2,0,0,1,3,3,0,0,0,5,55,2,0.04366,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,45,"    private static final int[] MAX_DAYS_PER_MONTH_ARRAY = {
",2,0,0,1,3,3,0,0,0,5,55,2,0.04366,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,53,"        MIN_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];
",2,0,0,1,2,0,0,0,0,3,47,4,0.04366,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,54,"        MAX_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];
",2,0,0,1,2,0,0,0,0,3,47,4,0.04366,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,56,"        long minSum = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.04366,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,57,"        long maxSum = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.04366,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,58,"        for (int i = 0; i < 11; i++) {
",6,1,0,1,3,0,0,0,0,8,30,4,0.04366,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,59,"            long millis = MIN_DAYS_PER_MONTH_ARRAY[i]
",2,0,1,1,2,0,0,0,0,6,41,7,0.04366,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,61,"            minSum += millis;
",4,0,0,0,0,0,0,0,0,5,17,6,0.04366,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,62,"            MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = minSum;
",4,1,1,1,2,0,0,0,0,8,48,6,0.04366,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,64,"            millis = MAX_DAYS_PER_MONTH_ARRAY[i]
",2,0,1,1,2,0,0,0,0,7,36,6,0.04366,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,66,"            maxSum += millis;
",4,0,0,0,0,0,0,0,0,5,17,6,0.04366,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,67,"            MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = maxSum;
",4,1,1,1,2,0,0,0,0,8,48,6,0.04366,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,69,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04366,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,143,"        if ((base = getBase()) != null) {
",2,1,0,3,7,0,2,0,0,7,33,4,0.04363,0
defect4j,time,org/joda/time/DateTimeUtils,12,282,"        if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.04348,0
defect4j,time,org/joda/time/DateTimeFieldType,12,516,"                    return chronology.hourOfDay();
",0,0,0,1,2,1,4,0,0,4,30,7,0.04348,0
defect4j,time,org/joda/time/DateTimeFieldType,12,164,"        return MILLIS_OF_SECOND_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,4,0.04345,0
defect4j,time,org/joda/time/DateTimeFieldType,12,173,"        return MILLIS_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,4,0.04345,0
defect4j,time,org/joda/time/DateTimeFieldType,12,182,"        return SECOND_OF_MINUTE_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,4,0.04345,0
defect4j,time,org/joda/time/DateTimeFieldType,12,191,"        return SECOND_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,4,0.04345,0
defect4j,time,org/joda/time/DateTimeFieldType,12,200,"        return MINUTE_OF_HOUR_TYPE;
",2,0,0,0,0,1,0,0,0,2,27,4,0.04345,0
defect4j,time,org/joda/time/DateTimeFieldType,12,209,"        return MINUTE_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,4,0.04345,0
defect4j,time,org/joda/time/DateTimeFieldType,12,218,"        return HOUR_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,4,0.04345,0
defect4j,time,org/joda/time/DateTimeFieldType,12,236,"        return HOUR_OF_HALFDAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,28,4,0.04345,0
defect4j,time,org/joda/time/DateTimeFieldType,12,245,"        return CLOCKHOUR_OF_HALFDAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,33,4,0.04345,0
defect4j,time,org/joda/time/DateTimeFieldType,12,254,"        return HALFDAY_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,27,4,0.04345,0
defect4j,time,org/joda/time/DateTimeFieldType,12,264,"        return DAY_OF_WEEK_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,4,0.04345,0
defect4j,time,org/joda/time/DateTimeFieldType,12,273,"        return DAY_OF_MONTH_TYPE;
",2,0,0,0,0,1,0,0,0,2,25,4,0.04345,0
defect4j,time,org/joda/time/DateTimeFieldType,12,282,"        return DAY_OF_YEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,4,0.04345,0
defect4j,time,org/joda/time/DateTimeFieldType,12,291,"        return WEEK_OF_WEEKYEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,4,0.04345,0
defect4j,time,org/joda/time/DateTimeFieldType,12,300,"        return WEEKYEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,21,4,0.04345,0
defect4j,time,org/joda/time/DateTimeFieldType,12,309,"        return WEEKYEAR_OF_CENTURY_TYPE;
",2,0,0,0,0,1,0,0,0,2,32,4,0.04345,0
defect4j,time,org/joda/time/DateTimeFieldType,12,318,"        return MONTH_OF_YEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,4,0.04345,0
defect4j,time,org/joda/time/DateTimeFieldType,12,336,"        return YEAR_OF_ERA_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,4,0.04345,0
defect4j,time,org/joda/time/DateTimeFieldType,12,345,"        return YEAR_OF_CENTURY_TYPE;
",2,0,0,0,0,1,0,0,0,2,28,4,0.04345,0
defect4j,time,org/joda/time/DateTimeFieldType,12,354,"        return CENTURY_OF_ERA_TYPE;
",2,0,0,0,0,1,0,0,0,2,27,4,0.04345,0
defect4j,time,org/joda/time/DateTimeFieldType,12,363,"        return ERA_TYPE;
",2,0,0,0,0,1,0,0,0,2,16,4,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,99,"    protected AssembledChronology(Chronology base, Object param) {
",6,0,0,1,3,1,0,4,0,11,62,2,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,100,"        iBase = base;
",4,0,0,0,0,0,0,0,0,5,13,4,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,101,"        iParam = param;
",4,0,0,0,0,0,0,0,0,5,15,4,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,102,"        setFields();
",0,0,0,1,2,0,2,0,0,2,12,5,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,103,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,156,"        return iMillis;
",2,0,0,0,0,1,0,0,0,2,15,4,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,160,"        return iMillisOfSecond;
",2,0,0,0,0,1,0,0,0,2,23,4,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,164,"        return iMillisOfDay;
",2,0,0,0,0,1,0,0,0,2,20,4,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,168,"        return iSeconds;
",2,0,0,0,0,1,0,0,0,2,16,4,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,172,"        return iSecondOfMinute;
",2,0,0,0,0,1,0,0,0,2,23,4,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,176,"        return iSecondOfDay;
",2,0,0,0,0,1,0,0,0,2,20,4,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,180,"        return iMinutes;
",2,0,0,0,0,1,0,0,0,2,16,4,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,184,"        return iMinuteOfHour;
",2,0,0,0,0,1,0,0,0,2,21,4,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,188,"        return iMinuteOfDay;
",2,0,0,0,0,1,0,0,0,2,20,4,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,192,"        return iHours;
",2,0,0,0,0,1,0,0,0,2,14,4,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,196,"        return iHourOfDay;
",2,0,0,0,0,1,0,0,0,2,18,4,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,200,"        return iClockhourOfDay;
",2,0,0,0,0,1,0,0,0,2,23,4,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,204,"        return iHalfdays;
",2,0,0,0,0,1,0,0,0,2,17,4,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,208,"        return iHourOfHalfday;
",2,0,0,0,0,1,0,0,0,2,22,4,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,212,"        return iClockhourOfHalfday;
",2,0,0,0,0,1,0,0,0,2,27,4,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,216,"        return iHalfdayOfDay;
",2,0,0,0,0,1,0,0,0,2,21,4,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,220,"        return iDays;
",2,0,0,0,0,1,0,0,0,2,13,4,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,224,"        return iDayOfWeek;
",2,0,0,0,0,1,0,0,0,2,18,4,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,228,"        return iDayOfMonth;
",2,0,0,0,0,1,0,0,0,2,19,4,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,232,"        return iDayOfYear;
",2,0,0,0,0,1,0,0,0,2,18,4,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,236,"        return iWeeks;
",2,0,0,0,0,1,0,0,0,2,14,4,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,240,"        return iWeekOfWeekyear;
",2,0,0,0,0,1,0,0,0,2,23,4,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,244,"        return iWeekyears;
",2,0,0,0,0,1,0,0,0,2,18,4,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,248,"        return iWeekyear;
",2,0,0,0,0,1,0,0,0,2,17,4,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,252,"        return iWeekyearOfCentury;
",2,0,0,0,0,1,0,0,0,2,26,4,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,256,"        return iMonths;
",2,0,0,0,0,1,0,0,0,2,15,4,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,260,"        return iMonthOfYear;
",2,0,0,0,0,1,0,0,0,2,20,4,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,264,"        return iYears;
",2,0,0,0,0,1,0,0,0,2,14,4,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,268,"        return iYear;
",2,0,0,0,0,1,0,0,0,2,13,4,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,272,"        return iYearOfEra;
",2,0,0,0,0,1,0,0,0,2,18,4,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,276,"        return iYearOfCentury;
",2,0,0,0,0,1,0,0,0,2,22,4,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,280,"        return iCenturies;
",2,0,0,0,0,1,0,0,0,2,18,4,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,284,"        return iCenturyOfEra;
",2,0,0,0,0,1,0,0,0,2,21,4,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,288,"        return iEras;
",2,0,0,0,0,1,0,0,0,2,13,4,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,292,"        return iEra;
",2,0,0,0,0,1,0,0,0,2,12,4,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,308,"        return iBase;
",2,0,0,0,0,1,0,0,0,2,13,4,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,319,"        Fields fields = new Fields();
",2,0,0,1,2,0,0,4,0,6,29,4,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,320,"        if (iBase != null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,321,"            fields.copyFieldsFrom(iBase);
",0,0,0,1,2,0,6,0,0,6,29,7,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,323,"        assemble(fields);
",0,0,0,1,2,0,4,0,0,4,17,5,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,327,"            iMillis    = (f = fields.millis)    != null ? f : super.millis();
",12,1,0,2,4,0,0,0,0,15,65,5,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,328,"            iSeconds   = (f = fields.seconds)   != null ? f : super.seconds();
",12,1,0,2,4,0,0,0,0,15,66,5,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,329,"            iMinutes   = (f = fields.minutes)   != null ? f : super.minutes();
",12,1,0,2,4,0,0,0,0,15,66,5,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,330,"            iHours     = (f = fields.hours)     != null ? f : super.hours();
",12,1,0,2,4,0,0,0,0,15,64,5,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,331,"            iHalfdays  = (f = fields.halfdays)  != null ? f : super.halfdays();
",12,1,0,2,4,0,0,0,0,15,67,5,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,332,"            iDays      = (f = fields.days)      != null ? f : super.days();
",12,1,0,2,4,0,0,0,0,15,63,5,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,333,"            iWeeks     = (f = fields.weeks)     != null ? f : super.weeks();
",12,1,0,2,4,0,0,0,0,15,64,5,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,334,"            iWeekyears = (f = fields.weekyears) != null ? f : super.weekyears();
",12,1,0,2,4,0,0,0,0,15,68,5,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,335,"            iMonths    = (f = fields.months)    != null ? f : super.months();
",12,1,0,2,4,0,0,0,0,15,65,5,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,336,"            iYears     = (f = fields.years)     != null ? f : super.years();
",12,1,0,2,4,0,0,0,0,15,64,5,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,337,"            iCenturies = (f = fields.centuries) != null ? f : super.centuries();
",12,1,0,2,4,0,0,0,0,15,68,5,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,338,"            iEras      = (f = fields.eras)      != null ? f : super.eras();
",12,1,0,2,4,0,0,0,0,15,63,5,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,343,"            iMillisOfSecond     = (f = fields.millisOfSecond)     != null ? f : super.millisOfSecond();
",12,1,0,2,4,0,0,0,0,15,91,5,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,344,"            iMillisOfDay        = (f = fields.millisOfDay)        != null ? f : super.millisOfDay();
",12,1,0,2,4,0,0,0,0,15,88,5,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,345,"            iSecondOfMinute     = (f = fields.secondOfMinute)     != null ? f : super.secondOfMinute();
",12,1,0,2,4,0,0,0,0,15,91,5,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,346,"            iSecondOfDay        = (f = fields.secondOfDay)        != null ? f : super.secondOfDay();
",12,1,0,2,4,0,0,0,0,15,88,5,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,347,"            iMinuteOfHour       = (f = fields.minuteOfHour)       != null ? f : super.minuteOfHour();
",12,1,0,2,4,0,0,0,0,15,89,5,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,348,"            iMinuteOfDay        = (f = fields.minuteOfDay)        != null ? f : super.minuteOfDay();
",12,1,0,2,4,0,0,0,0,15,88,5,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,349,"            iHourOfDay          = (f = fields.hourOfDay)          != null ? f : super.hourOfDay();
",12,1,0,2,4,0,0,0,0,15,86,5,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,350,"            iClockhourOfDay     = (f = fields.clockhourOfDay)     != null ? f : super.clockhourOfDay();
",12,1,0,2,4,0,0,0,0,15,91,5,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,351,"            iHourOfHalfday      = (f = fields.hourOfHalfday)      != null ? f : super.hourOfHalfday();
",12,1,0,2,4,0,0,0,0,15,90,5,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,352,"            iClockhourOfHalfday = (f = fields.clockhourOfHalfday) != null ? f : super.clockhourOfHalfday();
",12,1,0,2,4,0,0,0,0,15,95,5,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,353,"            iHalfdayOfDay       = (f = fields.halfdayOfDay)       != null ? f : super.halfdayOfDay();
",12,1,0,2,4,0,0,0,0,15,89,5,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,354,"            iDayOfWeek          = (f = fields.dayOfWeek)          != null ? f : super.dayOfWeek();
",12,1,0,2,4,0,0,0,0,15,86,5,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,355,"            iDayOfMonth         = (f = fields.dayOfMonth)         != null ? f : super.dayOfMonth();
",12,1,0,2,4,0,0,0,0,15,87,5,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,356,"            iDayOfYear          = (f = fields.dayOfYear)          != null ? f : super.dayOfYear();
",12,1,0,2,4,0,0,0,0,15,86,5,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,357,"            iWeekOfWeekyear     = (f = fields.weekOfWeekyear)     != null ? f : super.weekOfWeekyear();
",12,1,0,2,4,0,0,0,0,15,91,5,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,358,"            iWeekyear           = (f = fields.weekyear)           != null ? f : super.weekyear();
",12,1,0,2,4,0,0,0,0,15,85,5,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,359,"            iWeekyearOfCentury  = (f = fields.weekyearOfCentury)  != null ? f : super.weekyearOfCentury();
",12,1,0,2,4,0,0,0,0,15,94,5,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,360,"            iMonthOfYear        = (f = fields.monthOfYear)        != null ? f : super.monthOfYear();
",12,1,0,2,4,0,0,0,0,15,88,5,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,361,"            iYear               = (f = fields.year)               != null ? f : super.year();
",12,1,0,2,4,0,0,0,0,15,81,5,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,362,"            iYearOfEra          = (f = fields.yearOfEra)          != null ? f : super.yearOfEra();
",12,1,0,2,4,0,0,0,0,15,86,5,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,363,"            iYearOfCentury      = (f = fields.yearOfCentury)      != null ? f : super.yearOfCentury();
",12,1,0,2,4,0,0,0,0,15,90,5,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,364,"            iCenturyOfEra       = (f = fields.centuryOfEra)       != null ? f : super.centuryOfEra();
",12,1,0,2,4,0,0,0,0,15,89,5,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,365,"            iEra                = (f = fields.era)                != null ? f : super.era();
",12,1,0,2,4,0,0,0,0,15,80,5,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,369,"        if (iBase == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,370,"            flags = 0;
",2,0,0,0,0,0,0,0,0,3,10,6,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,372,"            flags = 
",2,0,0,0,0,0,0,0,0,3,7,6,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,385,"        iBaseFlags = flags;
",4,0,0,0,0,0,0,0,0,5,19,4,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,386,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04345,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,660,"        return UnsupportedDurationField.getInstance(DurationFieldType.eras());
",0,0,0,2,4,1,8,0,0,8,70,5,0.04345,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,12,37,"        super(chronology, 2);
",2,0,0,1,2,0,0,0,0,2,21,4,0.04345,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,12,38,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04345,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,51,"        super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth());
",0,0,0,3,6,0,8,0,0,8,78,5,0.04345,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,52,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,53,"        iMax = iChronology.getMaxMonth();
",2,0,0,1,2,0,4,0,0,7,33,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,54,"        iLeapMonth = leapMonth;
",4,0,0,0,0,0,0,0,0,5,23,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,55,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04345,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,12,55,"        super(type);
",2,0,0,1,2,0,0,0,0,2,12,4,0.04345,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,12,56,"        iUnitMillis = unitMillis;
",4,0,0,0,0,0,0,0,0,5,25,4,0.04345,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,12,57,"        iDurationField = new LinkedDurationField(type.getDurationType());
",2,0,0,2,4,0,4,2,0,9,65,4,0.04345,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,12,58,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04345,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,12,137,"        return iDurationField;
",2,0,0,0,0,1,0,0,0,2,22,4,0.04345,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,50,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.04345,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,51,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.04345,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,54,"        iType = type;
",4,0,0,0,0,0,0,0,0,5,13,4,0.04345,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,55,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04345,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,58,"        return iType;
",2,0,0,0,0,1,0,0,0,2,13,4,0.04345,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,69,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.04345,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,12,151,"        LinkedDurationField(DurationFieldType type) {
",4,0,0,1,3,0,0,2,0,6,45,3,0.04345,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,12,152,"            super(type);
",2,0,0,1,2,0,0,0,0,2,12,5,0.04345,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,12,153,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04345,0
defect4j,time,org/joda/time/field/BaseDurationField,12,47,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.04345,0
defect4j,time,org/joda/time/field/BaseDurationField,12,48,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.04345,0
defect4j,time,org/joda/time/field/BaseDurationField,12,51,"        iType = type;
",4,0,0,0,0,0,0,0,0,5,13,4,0.04345,0
defect4j,time,org/joda/time/field/BaseDurationField,12,52,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04345,0
defect4j,time,org/joda/time/field/BaseDurationField,12,66,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,131,"        super(base, param);
",4,0,0,1,2,0,0,0,0,4,19,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,126,"    private transient final YearInfo[] iYearInfoCache = new YearInfo[CACHE_SIZE];
",2,0,1,2,4,3,0,4,0,11,77,2,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,133,"        if (minDaysInFirstWeek < 1 || minDaysInFirstWeek > 7) {
",4,3,0,1,3,0,0,0,0,7,55,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,138,"        iMinDaysInFirstWeek = minDaysInFirstWeek;
",4,0,0,0,0,0,0,0,0,5,41,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,139,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,76,"        cMillisField = MillisDurationField.INSTANCE;
",6,0,0,0,0,0,0,0,0,7,44,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,77,"        cSecondsField = new PreciseDurationField
",2,0,0,0,0,0,0,2,0,5,40,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,79,"        cMinutesField = new PreciseDurationField
",2,0,0,0,0,0,0,2,0,5,40,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,81,"        cHoursField = new PreciseDurationField
",2,0,0,0,0,0,0,2,0,5,38,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,83,"        cHalfdaysField = new PreciseDurationField
",2,0,0,0,0,0,0,2,0,5,41,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,85,"        cDaysField = new PreciseDurationField
",2,0,0,0,0,0,0,2,0,5,37,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,87,"        cWeeksField = new PreciseDurationField
",2,0,0,0,0,0,0,2,0,5,38,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,90,"        cMillisOfSecondField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,47,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,93,"        cMillisOfDayField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,44,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,96,"        cSecondOfMinuteField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,47,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,99,"        cSecondOfDayField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,44,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,102,"        cMinuteOfHourField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,45,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,105,"        cMinuteOfDayField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,44,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,108,"        cHourOfDayField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,42,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,111,"        cHourOfHalfdayField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,46,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,114,"        cClockhourOfDayField = new ZeroIsMaxDateTimeField
",2,0,0,0,0,0,0,2,0,5,49,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,117,"        cClockhourOfHalfdayField = new ZeroIsMaxDateTimeField
",2,0,0,0,0,0,0,2,0,5,53,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,120,"        cHalfdayOfDayField = new HalfdayField();
",2,0,0,1,2,0,0,2,0,5,40,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,121,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,241,"        fields.millis = cMillisField;
",6,0,0,0,0,0,0,0,0,7,29,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,242,"        fields.seconds = cSecondsField;
",6,0,0,0,0,0,0,0,0,7,31,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,243,"        fields.minutes = cMinutesField;
",6,0,0,0,0,0,0,0,0,7,31,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,244,"        fields.hours = cHoursField;
",6,0,0,0,0,0,0,0,0,7,27,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,245,"        fields.halfdays = cHalfdaysField;
",6,0,0,0,0,0,0,0,0,7,33,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,246,"        fields.days = cDaysField;
",6,0,0,0,0,0,0,0,0,7,25,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,247,"        fields.weeks = cWeeksField;
",6,0,0,0,0,0,0,0,0,7,27,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,249,"        fields.millisOfSecond = cMillisOfSecondField;
",6,0,0,0,0,0,0,0,0,7,45,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,250,"        fields.millisOfDay = cMillisOfDayField;
",6,0,0,0,0,0,0,0,0,7,39,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,251,"        fields.secondOfMinute = cSecondOfMinuteField;
",6,0,0,0,0,0,0,0,0,7,45,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,252,"        fields.secondOfDay = cSecondOfDayField;
",6,0,0,0,0,0,0,0,0,7,39,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,253,"        fields.minuteOfHour = cMinuteOfHourField;
",6,0,0,0,0,0,0,0,0,7,41,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,254,"        fields.minuteOfDay = cMinuteOfDayField;
",6,0,0,0,0,0,0,0,0,7,39,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,255,"        fields.hourOfDay = cHourOfDayField;
",6,0,0,0,0,0,0,0,0,7,35,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,256,"        fields.hourOfHalfday = cHourOfHalfdayField;
",6,0,0,0,0,0,0,0,0,7,43,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,257,"        fields.clockhourOfDay = cClockhourOfDayField;
",6,0,0,0,0,0,0,0,0,7,45,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,258,"        fields.clockhourOfHalfday = cClockhourOfHalfdayField;
",6,0,0,0,0,0,0,0,0,7,53,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,259,"        fields.halfdayOfDay = cHalfdayOfDayField;
",6,0,0,0,0,0,0,0,0,7,41,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,264,"        fields.year = new BasicYearDateTimeField(this);
",4,0,0,1,2,0,0,2,0,7,47,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,265,"        fields.yearOfEra = new GJYearOfEraDateTimeField(fields.year, this);
",8,0,0,1,2,0,0,2,0,11,67,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,268,"        DateTimeField field = new OffsetDateTimeField(
",2,0,0,0,1,0,0,4,0,6,46,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,270,"        fields.centuryOfEra = new DividedDateTimeField(
",4,0,0,0,1,0,0,2,0,7,47,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,273,"        field = new RemainderDateTimeField(
",2,0,0,0,1,0,0,2,0,5,35,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,275,"        fields.yearOfCentury = new OffsetDateTimeField(
",4,0,0,0,1,0,0,2,0,7,47,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,278,"        fields.era = new GJEraDateTimeField(this);
",4,0,0,1,2,0,0,2,0,7,42,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,279,"        fields.dayOfWeek = new GJDayOfWeekDateTimeField(this, fields.days);
",8,0,0,1,2,0,0,2,0,11,67,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,280,"        fields.dayOfMonth = new BasicDayOfMonthDateTimeField(this, fields.days);
",8,0,0,1,2,0,0,2,0,11,72,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,281,"        fields.dayOfYear = new BasicDayOfYearDateTimeField(this, fields.days);
",8,0,0,1,2,0,0,2,0,11,70,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,282,"        fields.monthOfYear = new GJMonthOfYearDateTimeField(this);
",4,0,0,1,2,0,0,2,0,7,58,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,283,"        fields.weekyear = new BasicWeekyearDateTimeField(this);
",4,0,0,1,2,0,0,2,0,7,55,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,284,"        fields.weekOfWeekyear = new BasicWeekOfWeekyearDateTimeField(this, fields.weeks);
",8,0,0,1,2,0,0,2,0,11,81,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,286,"        field = new RemainderDateTimeField(
",2,0,0,0,1,0,0,2,0,5,35,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,288,"        fields.weekyearOfCentury = new OffsetDateTimeField(
",4,0,0,0,1,0,0,2,0,7,51,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,294,"        fields.years = fields.year.getDurationField();
",8,0,0,1,2,0,2,0,0,11,46,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,295,"        fields.centuries = fields.centuryOfEra.getDurationField();
",8,0,0,1,2,0,2,0,0,11,58,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,296,"        fields.months = fields.monthOfYear.getDurationField();
",8,0,0,1,2,0,2,0,0,11,54,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,297,"        fields.weekyears = fields.weekyear.getDurationField();
",8,0,0,1,2,0,2,0,0,11,54,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,298,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,50,"abstract class BasicChronology extends AssembledChronology {
",2,0,0,0,1,1,0,2,0,5,60,1,0.04345,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,45,"        super(DateTimeFieldType.year(), chronology.getAverageMillisPerYear());
",0,0,0,3,6,0,8,0,0,8,70,5,0.04345,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,46,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04345,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,119,"        return iChronology.getMaxYear();
",0,0,0,1,2,1,4,0,0,4,32,5,0.04345,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,12,46,"        super(DateTimeFieldType.era());
",0,0,0,2,4,0,4,0,0,4,31,5,0.04345,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,12,47,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.04345,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,12,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04345,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,12,92,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.04345,0
defect4j,time,org/joda/time/field/PreciseDurationField,12,43,"        super(type);
",2,0,0,1,2,0,0,0,0,2,12,4,0.04345,0
defect4j,time,org/joda/time/field/PreciseDurationField,12,44,"        iUnitMillis = unitMillis;
",4,0,0,0,0,0,0,0,0,5,25,4,0.04345,0
defect4j,time,org/joda/time/field/PreciseDurationField,12,45,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04345,0
defect4j,time,org/joda/time/field/PreciseDurationField,12,54,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.04345,0
defect4j,time,org/joda/time/field/PreciseDurationField,12,63,"        return iUnitMillis;
",2,0,0,0,0,1,0,0,0,2,19,4,0.04345,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,12,57,"        super(type, unit);
",4,0,0,1,2,0,0,0,0,4,18,4,0.04345,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,12,59,"        if (!range.isPrecise()) {
",0,0,0,2,5,0,4,0,0,5,25,4,0.04345,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,12,63,"        long rangeMillis = range.getUnitMillis();
",2,0,0,1,2,0,4,0,0,6,41,5,0.04345,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,12,64,"        iRange = (int)(rangeMillis / getUnitMillis());
",4,1,0,3,6,0,2,0,0,8,46,4,0.04345,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,12,65,"        if (iRange < 2) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.04345,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,12,69,"        iRangeField = range;
",4,0,0,0,0,0,0,0,0,5,20,4,0.04345,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,12,70,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04345,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,48,"        super(type);
",2,0,0,1,2,0,0,0,0,2,12,4,0.04345,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,50,"        if (!unit.isPrecise()) {
",0,0,0,2,5,0,4,0,0,5,24,4,0.04345,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,54,"        iUnitMillis = unit.getUnitMillis();
",2,0,0,1,2,0,4,0,0,7,35,4,0.04345,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,55,"        if (iUnitMillis < 1) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.04345,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,59,"        iUnitField = unit;
",4,0,0,0,0,0,0,0,0,5,18,4,0.04345,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,60,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04345,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,150,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.04345,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,154,"        return iUnitMillis;
",2,0,0,0,0,1,0,0,0,2,19,4,0.04345,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,12,45,"        super(field, type);
",4,0,0,1,2,0,0,0,0,4,19,4,0.04345,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,12,46,"        if (field.getMinimumValue() != 0) {
",0,1,0,2,5,0,4,0,0,5,35,4,0.04345,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,12,49,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04345,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,12,54,"        super(type);
",2,0,0,1,2,0,0,0,0,2,12,4,0.04345,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,12,55,"        if (field == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.04345,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,12,58,"        if (!field.isSupported()) {
",0,0,0,2,5,0,4,0,0,5,27,4,0.04345,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,12,61,"        iField = field;
",4,0,0,0,0,0,0,0,0,5,15,4,0.04345,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,12,62,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04345,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,12,70,"        return iField;
",2,0,0,0,0,1,0,0,0,2,14,4,0.04345,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,12,86,"        return iField.getDurationField();
",0,0,0,1,2,1,4,0,0,4,33,5,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,750,"            super(DateTimeFieldType.halfdayOfDay(), cHalfdaysField, cDaysField);
",4,0,0,2,4,0,4,0,0,8,68,5,0.04345,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,751,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04345,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,12,40,"        super(yearField, DateTimeFieldType.yearOfEra());
",2,0,0,2,4,0,4,0,0,6,48,4,0.04345,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,12,41,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.04345,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,12,42,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04345,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,12,93,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.04345,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,12,97,"        return getWrappedField().getMaximumValue();
",0,0,0,2,4,1,4,0,0,4,43,5,0.04345,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,12,46,"        this(field, (field == null ? null : field.getType()), offset, Integer.MIN_VALUE, Integer.MAX_VALUE);
",14,1,0,3,6,0,4,0,0,19,100,4,0.04345,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,12,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04345,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,12,58,"        this(field, type, offset, Integer.MIN_VALUE, Integer.MAX_VALUE);
",14,0,0,1,2,0,0,0,0,14,64,4,0.04345,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,12,59,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04345,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,12,73,"        super(field, type);
",4,0,0,1,2,0,0,0,0,4,19,4,0.04345,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,12,75,"        if (offset == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.04345,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,12,79,"        iOffset = offset;
",4,0,0,0,0,0,0,0,0,5,17,4,0.04345,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,12,81,"        if (minValue < (field.getMinimumValue() + offset)) {
",4,2,0,3,7,0,4,0,0,10,52,4,0.04345,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,12,82,"            iMin = field.getMinimumValue() + offset;
",4,1,0,1,2,0,4,0,0,10,40,6,0.04345,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,12,86,"        if (maxValue > (field.getMaximumValue() + offset)) {
",4,2,0,3,7,0,4,0,0,10,52,4,0.04345,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,12,87,"            iMax = field.getMaximumValue() + offset;
",4,1,0,1,2,0,4,0,0,10,40,6,0.04345,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,12,91,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04345,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,12,174,"        return iMin;
",2,0,0,0,0,1,0,0,0,2,12,4,0.04345,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,12,183,"        return iMax;
",2,0,0,0,0,1,0,0,0,2,12,4,0.04345,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,56,"        super(field, type);
",4,0,0,1,2,0,0,0,0,4,19,4,0.04345,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,58,"        if (divisor < 2) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.04345,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,62,"        DurationField unitField = field.getDurationField();
",2,0,0,1,2,0,4,2,0,8,51,4,0.04345,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,63,"        if (unitField == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.04345,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,66,"            iDurationField = new ScaledDurationField(
",2,0,0,0,1,0,0,2,0,5,41,6,0.04345,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,70,"        iDivisor = divisor;
",4,0,0,0,0,0,0,0,0,5,19,4,0.04345,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,72,"        int i = field.getMinimumValue();
",2,0,0,1,2,0,4,0,0,6,32,5,0.04345,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,73,"        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);
",12,5,0,3,6,0,0,0,0,17,59,5,0.04345,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,75,"        int j = field.getMaximumValue();
",2,0,0,1,2,0,4,0,0,6,32,5,0.04345,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,76,"        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);
",12,5,0,3,6,0,0,0,0,17,59,5,0.04345,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,78,"        iMin = min;
",4,0,0,0,0,0,0,0,0,5,11,4,0.04345,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,79,"        iMax = max;
",4,0,0,0,0,0,0,0,0,5,11,4,0.04345,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,80,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04345,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,182,"        return iDurationField;
",2,0,0,0,0,1,0,0,0,2,22,4,0.04345,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,12,52,"        super(field, type);
",4,0,0,1,2,0,0,0,0,4,19,4,0.04345,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,12,54,"        if (divisor < 2) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.04345,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,12,58,"        DurationField rangeField = field.getDurationField();
",2,0,0,1,2,0,4,2,0,8,52,4,0.04345,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,12,59,"        if (rangeField == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.04345,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,12,62,"            iRangeField = new ScaledDurationField(
",2,0,0,0,1,0,0,2,0,5,38,6,0.04345,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,12,66,"        iDivisor = divisor;
",4,0,0,0,0,0,0,0,0,5,19,4,0.04345,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,12,67,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04345,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,12,76,"        this(dividedField, dividedField.getType());
",2,0,0,2,4,0,4,0,0,6,43,4,0.04345,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,12,77,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04345,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,12,87,"        super(dividedField.getWrappedField(), type);
",2,0,0,2,4,0,4,0,0,6,44,4,0.04345,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,12,88,"        iDivisor = dividedField.iDivisor;
",6,0,0,0,0,0,0,0,0,7,33,4,0.04345,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,12,89,"        iRangeField = dividedField.iDurationField;
",6,0,0,0,0,0,0,0,0,7,42,4,0.04345,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,12,90,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04345,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,12,148,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.04345,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,12,158,"        return iDivisor - 1;
",2,1,0,0,0,1,0,0,0,3,20,4,0.04345,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,12,45,"        super(DateTimeFieldType.dayOfWeek(), days);
",2,0,0,2,4,0,4,0,0,6,43,4,0.04345,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,12,46,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.04345,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,12,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04345,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,41,"        super(DateTimeFieldType.dayOfMonth(), days);
",2,0,0,2,4,0,4,0,0,6,44,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,42,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,43,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04345,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,12,41,"        super(DateTimeFieldType.dayOfYear(), days);
",2,0,0,2,4,0,4,0,0,6,43,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,12,42,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,12,43,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04345,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,44,"        super(DateTimeFieldType.weekyear(), chronology.getAverageMillisPerYear());
",0,0,0,3,6,0,8,0,0,8,74,5,0.04345,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,45,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,46,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04345,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,42,"        super(DateTimeFieldType.weekOfWeekyear(), weeks);
",2,0,0,2,4,0,4,0,0,6,49,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,43,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.04345,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,44,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,436,"        Fields() {
",2,0,0,1,3,0,0,0,0,2,10,3,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,437,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,445,"                if (isSupported(f = chrono.millis())) {
",2,0,0,3,7,0,6,0,0,9,39,7,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,446,"                    millis = f;
",4,0,0,0,0,0,0,0,0,5,11,8,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,448,"                if (isSupported(f = chrono.seconds())) {
",2,0,0,3,7,0,6,0,0,9,40,7,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,449,"                    seconds = f;
",4,0,0,0,0,0,0,0,0,5,12,8,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,451,"                if (isSupported(f = chrono.minutes())) {
",2,0,0,3,7,0,6,0,0,9,40,7,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,452,"                    minutes = f;
",4,0,0,0,0,0,0,0,0,5,12,8,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,454,"                if (isSupported(f = chrono.hours())) {
",2,0,0,3,7,0,6,0,0,9,38,7,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,455,"                    hours = f;
",4,0,0,0,0,0,0,0,0,5,10,8,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,457,"                if (isSupported(f = chrono.halfdays())) {
",2,0,0,3,7,0,6,0,0,9,41,7,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,458,"                    halfdays = f;
",4,0,0,0,0,0,0,0,0,5,13,8,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,460,"                if (isSupported(f = chrono.days())) {
",2,0,0,3,7,0,6,0,0,9,37,7,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,461,"                    days = f;
",4,0,0,0,0,0,0,0,0,5,9,8,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,463,"                if (isSupported(f = chrono.weeks())) {
",2,0,0,3,7,0,6,0,0,9,38,7,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,464,"                    weeks = f;
",4,0,0,0,0,0,0,0,0,5,10,8,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,466,"                if (isSupported(f = chrono.weekyears())) {
",2,0,0,3,7,0,6,0,0,9,42,7,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,467,"                    weekyears = f;
",4,0,0,0,0,0,0,0,0,5,14,8,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,469,"                if (isSupported(f = chrono.months())) {
",2,0,0,3,7,0,6,0,0,9,39,7,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,470,"                    months = f;
",4,0,0,0,0,0,0,0,0,5,11,8,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,472,"                if (isSupported(f = chrono.years())) {
",2,0,0,3,7,0,6,0,0,9,38,7,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,473,"                    years = f;
",4,0,0,0,0,0,0,0,0,5,10,8,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,475,"                if (isSupported(f = chrono.centuries())) {
",2,0,0,3,7,0,6,0,0,9,42,7,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,476,"                    centuries = f;
",4,0,0,0,0,0,0,0,0,5,14,8,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,478,"                if (isSupported(f = chrono.eras())) {
",2,0,0,3,7,0,6,0,0,9,37,7,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,485,"                if (isSupported(f = chrono.millisOfSecond())) {
",2,0,0,3,7,0,6,0,0,9,47,7,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,486,"                    millisOfSecond = f;
",4,0,0,0,0,0,0,0,0,5,19,8,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,488,"                if (isSupported(f = chrono.millisOfDay())) {
",2,0,0,3,7,0,6,0,0,9,44,7,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,489,"                    millisOfDay = f;
",4,0,0,0,0,0,0,0,0,5,16,8,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,491,"                if (isSupported(f = chrono.secondOfMinute())) {
",2,0,0,3,7,0,6,0,0,9,47,7,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,492,"                    secondOfMinute = f;
",4,0,0,0,0,0,0,0,0,5,19,8,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,494,"                if (isSupported(f = chrono.secondOfDay())) {
",2,0,0,3,7,0,6,0,0,9,44,7,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,495,"                    secondOfDay = f;
",4,0,0,0,0,0,0,0,0,5,16,8,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,497,"                if (isSupported(f = chrono.minuteOfHour())) {
",2,0,0,3,7,0,6,0,0,9,45,7,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,498,"                    minuteOfHour = f;
",4,0,0,0,0,0,0,0,0,5,17,8,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,500,"                if (isSupported(f = chrono.minuteOfDay())) {
",2,0,0,3,7,0,6,0,0,9,44,7,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,501,"                    minuteOfDay = f;
",4,0,0,0,0,0,0,0,0,5,16,8,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,503,"                if (isSupported(f = chrono.hourOfDay())) {
",2,0,0,3,7,0,6,0,0,9,42,7,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,504,"                    hourOfDay = f;
",4,0,0,0,0,0,0,0,0,5,14,8,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,506,"                if (isSupported(f = chrono.clockhourOfDay())) {
",2,0,0,3,7,0,6,0,0,9,47,7,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,507,"                    clockhourOfDay = f;
",4,0,0,0,0,0,0,0,0,5,19,8,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,509,"                if (isSupported(f = chrono.hourOfHalfday())) {
",2,0,0,3,7,0,6,0,0,9,46,7,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,510,"                    hourOfHalfday = f;
",4,0,0,0,0,0,0,0,0,5,18,8,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,512,"                if (isSupported(f = chrono.clockhourOfHalfday())) {
",2,0,0,3,7,0,6,0,0,9,51,7,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,513,"                    clockhourOfHalfday = f;
",4,0,0,0,0,0,0,0,0,5,23,8,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,515,"                if (isSupported(f = chrono.halfdayOfDay())) {
",2,0,0,3,7,0,6,0,0,9,45,7,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,516,"                    halfdayOfDay = f;
",4,0,0,0,0,0,0,0,0,5,17,8,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,518,"                if (isSupported(f = chrono.dayOfWeek())) {
",2,0,0,3,7,0,6,0,0,9,42,7,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,519,"                    dayOfWeek = f;
",4,0,0,0,0,0,0,0,0,5,14,8,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,521,"                if (isSupported(f = chrono.dayOfMonth())) {
",2,0,0,3,7,0,6,0,0,9,43,7,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,522,"                    dayOfMonth = f;
",4,0,0,0,0,0,0,0,0,5,15,8,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,524,"                if (isSupported(f = chrono.dayOfYear())) {
",2,0,0,3,7,0,6,0,0,9,42,7,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,525,"                    dayOfYear = f;
",4,0,0,0,0,0,0,0,0,5,14,8,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,527,"                if (isSupported(f = chrono.weekOfWeekyear())) {
",2,0,0,3,7,0,6,0,0,9,47,7,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,528,"                    weekOfWeekyear = f;
",4,0,0,0,0,0,0,0,0,5,19,8,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,530,"                if (isSupported(f = chrono.weekyear())) {
",2,0,0,3,7,0,6,0,0,9,41,7,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,531,"                    weekyear = f;
",4,0,0,0,0,0,0,0,0,5,13,8,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,533,"                if (isSupported(f = chrono.weekyearOfCentury())) {
",2,0,0,3,7,0,6,0,0,9,50,7,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,534,"                    weekyearOfCentury = f;
",4,0,0,0,0,0,0,0,0,5,22,8,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,536,"                if (isSupported(f = chrono.monthOfYear())) {
",2,0,0,3,7,0,6,0,0,9,44,7,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,537,"                    monthOfYear = f;
",4,0,0,0,0,0,0,0,0,5,16,8,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,539,"                if (isSupported(f = chrono.year())) {
",2,0,0,3,7,0,6,0,0,9,37,7,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,540,"                    year = f;
",4,0,0,0,0,0,0,0,0,5,9,8,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,542,"                if (isSupported(f = chrono.yearOfEra())) {
",2,0,0,3,7,0,6,0,0,9,42,7,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,543,"                    yearOfEra = f;
",4,0,0,0,0,0,0,0,0,5,14,8,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,545,"                if (isSupported(f = chrono.yearOfCentury())) {
",2,0,0,3,7,0,6,0,0,9,46,7,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,546,"                    yearOfCentury = f;
",4,0,0,0,0,0,0,0,0,5,18,8,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,548,"                if (isSupported(f = chrono.centuryOfEra())) {
",2,0,0,3,7,0,6,0,0,9,45,7,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,549,"                    centuryOfEra = f;
",4,0,0,0,0,0,0,0,0,5,17,8,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,551,"                if (isSupported(f = chrono.era())) {
",2,0,0,3,7,0,6,0,0,9,36,7,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,552,"                    era = f;
",4,0,0,0,0,0,0,0,0,5,8,8,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,555,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,558,"            return field == null ? false : field.isSupported();
",2,1,0,1,2,1,4,0,0,8,51,6,0.04345,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,562,"            return field == null ? false : field.isSupported();
",2,1,0,1,2,1,4,0,0,8,51,6,0.04345,0
defect4j,time,org/joda/time/field/DecoratedDurationField,12,52,"        super(type);
",2,0,0,1,2,0,0,0,0,2,12,4,0.04345,0
defect4j,time,org/joda/time/field/DecoratedDurationField,12,53,"        if (field == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.04345,0
defect4j,time,org/joda/time/field/DecoratedDurationField,12,56,"        if (!field.isSupported()) {
",0,0,0,2,5,0,4,0,0,5,27,4,0.04345,0
defect4j,time,org/joda/time/field/DecoratedDurationField,12,59,"        iField = field;
",4,0,0,0,0,0,0,0,0,5,15,4,0.04345,0
defect4j,time,org/joda/time/field/DecoratedDurationField,12,60,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04345,0
defect4j,time,org/joda/time/field/ScaledDurationField,12,47,"        super(field, type);
",4,0,0,1,2,0,0,0,0,4,19,4,0.04345,0
defect4j,time,org/joda/time/field/ScaledDurationField,12,48,"        if (scalar == 0 || scalar == 1) {
",4,3,0,1,3,0,0,0,0,7,33,4,0.04345,0
defect4j,time,org/joda/time/field/ScaledDurationField,12,51,"        iScalar = scalar;
",4,0,0,0,0,0,0,0,0,5,17,4,0.04345,0
defect4j,time,org/joda/time/field/ScaledDurationField,12,52,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04345,0
defect4j,time,org/joda/time/field/MillisDurationField,12,44,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.04345,0
defect4j,time,org/joda/time/field/MillisDurationField,12,45,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04345,0
defect4j,time,org/joda/time/field/MillisDurationField,12,38,"    public static final DurationField INSTANCE = new MillisDurationField();
",2,0,0,1,2,3,0,4,0,9,71,2,0.04345,0
defect4j,time,org/joda/time/field/MillisDurationField,12,62,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.04345,0
defect4j,time,org/joda/time/field/MillisDurationField,12,71,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.04345,0
defect4j,time,org/joda/time/field/MillisDurationField,12,80,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.04345,0
defect4j,time,org/joda/time/DateTimeFieldType,12,452,"            return iUnitType;
",2,0,0,0,0,1,0,0,0,2,17,5,0.04345,0
defect4j,time,org/joda/time/DateTimeFieldType,12,457,"            return iRangeType;
",2,0,0,0,0,1,0,0,0,2,18,5,0.04345,0
defect4j,time,org/joda/time/DateTimeFieldType,12,227,"        return CLOCKHOUR_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,4,0.04342,0
defect4j,time,org/joda/time/DateTimeFieldType,12,327,"        return YEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,17,4,0.04342,0
defect4j,time,org/joda/time/DateTimeField,12,33,"public abstract class DateTimeField {
",2,0,0,0,1,2,0,0,0,4,37,1,0.04342,0
defect4j,time,org/joda/time/DurationField,12,30,"public abstract class DurationField implements Comparable<DurationField> {
",2,0,0,0,1,2,0,4,0,8,74,1,0.04342,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,12,70,"    private UnsupportedDurationField(DurationFieldType type) {
",4,0,0,1,3,1,0,2,0,7,58,2,0.04342,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,12,71,"        iType = type;
",4,0,0,0,0,0,0,0,0,5,13,4,0.04342,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,12,72,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04342,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,12,49,"        if (cCache == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.04342,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,12,50,"            cCache = new HashMap<DurationFieldType, UnsupportedDurationField>(7);
",2,0,0,1,2,0,0,6,0,9,69,6,0.04342,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,12,51,"            field = null;
",2,0,0,0,0,0,0,0,0,3,13,6,0.04342,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,12,53,"            field = cCache.get(type);
",2,0,0,1,2,0,6,0,0,9,25,6,0.04342,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,12,55,"        if (field == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.04342,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,12,56,"            field = new UnsupportedDurationField(type);
",4,0,0,1,2,0,0,2,0,7,43,6,0.04342,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,12,57,"            cCache.put(type, field);
",0,0,0,1,2,0,8,0,0,8,24,7,0.04342,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,12,59,"        return field;
",2,0,0,0,0,1,0,0,0,2,13,4,0.04342,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,12,102,"        return getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;
",4,4,0,2,4,1,4,0,0,12,68,4,0.04342,0
defect4j,time,org/joda/time/DurationFieldType,12,278,"            return (1 << iOrdinal);
",2,1,0,1,2,1,0,0,0,3,23,6,0.04342,0
defect4j,time,org/joda/time/DateTimeFieldType,12,153,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.04339,0
defect4j,time,org/joda/time/DateTimeFieldType,12,154,"        iName = name;
",4,0,0,0,0,0,0,0,0,5,13,4,0.04339,0
defect4j,time,org/joda/time/DateTimeFieldType,12,155,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04339,0
defect4j,time,org/joda/time/DateTimeFieldType,12,73,"    private static final DateTimeFieldType ERA_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,80,2,0.04339,0
defect4j,time,org/joda/time/DateTimeFieldType,12,76,"    private static final DateTimeFieldType YEAR_OF_ERA_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,88,2,0.04339,0
defect4j,time,org/joda/time/DateTimeFieldType,12,79,"    private static final DateTimeFieldType CENTURY_OF_ERA_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,91,2,0.04339,0
defect4j,time,org/joda/time/DateTimeFieldType,12,82,"    private static final DateTimeFieldType YEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,92,2,0.04339,0
defect4j,time,org/joda/time/DateTimeFieldType,12,85,"    private static final DateTimeFieldType YEAR_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,81,2,0.04339,0
defect4j,time,org/joda/time/DateTimeFieldType,12,88,"    private static final DateTimeFieldType DAY_OF_YEAR_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,88,2,0.04339,0
defect4j,time,org/joda/time/DateTimeFieldType,12,91,"    private static final DateTimeFieldType MONTH_OF_YEAR_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,90,2,0.04339,0
defect4j,time,org/joda/time/DateTimeFieldType,12,94,"    private static final DateTimeFieldType DAY_OF_MONTH_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,89,2,0.04339,0
defect4j,time,org/joda/time/DateTimeFieldType,12,97,"    private static final DateTimeFieldType WEEKYEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,96,2,0.04339,0
defect4j,time,org/joda/time/DateTimeFieldType,12,100,"    private static final DateTimeFieldType WEEKYEAR_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,85,2,0.04339,0
defect4j,time,org/joda/time/DateTimeFieldType,12,103,"    private static final DateTimeFieldType WEEK_OF_WEEKYEAR_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,93,2,0.04339,0
defect4j,time,org/joda/time/DateTimeFieldType,12,106,"    private static final DateTimeFieldType DAY_OF_WEEK_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,88,2,0.04339,0
defect4j,time,org/joda/time/DateTimeFieldType,12,110,"    private static final DateTimeFieldType HALFDAY_OF_DAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,91,2,0.04339,0
defect4j,time,org/joda/time/DateTimeFieldType,12,113,"    private static final DateTimeFieldType HOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,92,2,0.04339,0
defect4j,time,org/joda/time/DateTimeFieldType,12,116,"    private static final DateTimeFieldType CLOCKHOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,97,2,0.04339,0
defect4j,time,org/joda/time/DateTimeFieldType,12,119,"    private static final DateTimeFieldType CLOCKHOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,93,2,0.04339,0
defect4j,time,org/joda/time/DateTimeFieldType,12,122,"    private static final DateTimeFieldType HOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,88,2,0.04339,0
defect4j,time,org/joda/time/DateTimeFieldType,12,125,"    private static final DateTimeFieldType MINUTE_OF_DAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,90,2,0.04339,0
defect4j,time,org/joda/time/DateTimeFieldType,12,128,"    private static final DateTimeFieldType MINUTE_OF_HOUR_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,91,2,0.04339,0
defect4j,time,org/joda/time/DateTimeFieldType,12,131,"    private static final DateTimeFieldType SECOND_OF_DAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,90,2,0.04339,0
defect4j,time,org/joda/time/DateTimeFieldType,12,134,"    private static final DateTimeFieldType SECOND_OF_MINUTE_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,93,2,0.04339,0
defect4j,time,org/joda/time/DateTimeFieldType,12,137,"    private static final DateTimeFieldType MILLIS_OF_DAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,90,2,0.04339,0
defect4j,time,org/joda/time/DateTimeFieldType,12,140,"    private static final DateTimeFieldType MILLIS_OF_SECOND_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,93,2,0.04339,0
defect4j,time,org/joda/time/DurationFieldType,12,141,"        return HALFDAYS_TYPE;
",2,0,0,0,0,1,0,0,0,2,21,4,0.04339,0
defect4j,time,org/joda/time/DurationFieldType,12,169,"        return WEEKYEARS_TYPE;
",2,0,0,0,0,1,0,0,0,2,22,4,0.04339,0
defect4j,time,org/joda/time/DurationFieldType,12,196,"        return CENTURIES_TYPE;
",2,0,0,0,0,1,0,0,0,2,22,4,0.04339,0
defect4j,time,org/joda/time/DurationFieldType,12,205,"        return ERAS_TYPE;
",2,0,0,0,0,1,0,0,0,2,17,4,0.04339,0
defect4j,time,org/joda/time/DateTimeFieldType,12,444,"            super(name);
",2,0,0,1,2,0,0,0,0,2,12,5,0.04339,0
defect4j,time,org/joda/time/DateTimeFieldType,12,445,"            iOrdinal = ordinal;
",4,0,0,0,0,0,0,0,0,5,19,5,0.04339,0
defect4j,time,org/joda/time/DateTimeFieldType,12,446,"            iUnitType = unitType;
",4,0,0,0,0,0,0,0,0,5,21,5,0.04339,0
defect4j,time,org/joda/time/DateTimeFieldType,12,447,"            iRangeType = rangeType;
",4,0,0,0,0,0,0,0,0,5,23,5,0.04339,0
defect4j,time,org/joda/time/DateTimeFieldType,12,448,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04339,0
defect4j,time,org/joda/time/DurationFieldType,12,105,"        return MILLIS_TYPE;
",2,0,0,0,0,1,0,0,0,2,19,4,0.04330,0
defect4j,time,org/joda/time/Chronology,12,63,"public abstract class Chronology {
",2,0,0,0,1,2,0,0,0,4,34,1,0.04307,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,54,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.04307,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,55,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04307,0
defect4j,time,org/joda/time/DateTimeUtils,12,39,"    private static final SystemMillisProvider SYSTEM_MILLIS_PROVIDER = new SystemMillisProvider();
",2,0,0,1,2,3,0,4,0,9,94,2,0.04298,0
defect4j,time,org/joda/time/DateTimeUtils,12,41,"    private static volatile MillisProvider cMillisProvider = SYSTEM_MILLIS_PROVIDER;
",4,0,0,0,0,3,0,2,0,9,80,2,0.04298,0
defect4j,time,org/joda/time/DateTimeUtils,12,47,"        Map<String, DateTimeZone> map = new LinkedHashMap<String, DateTimeZone>();
",2,0,0,1,2,0,0,12,0,14,74,4,0.04298,0
defect4j,time,org/joda/time/DateTimeUtils,12,48,"        map.put(""UT"", DateTimeZone.UTC);
",4,0,0,1,2,0,4,0,0,9,32,5,0.04298,0
defect4j,time,org/joda/time/DateTimeUtils,12,49,"        map.put(""UTC"", DateTimeZone.UTC);
",4,0,0,1,2,0,4,0,0,9,33,5,0.04298,0
defect4j,time,org/joda/time/DateTimeUtils,12,50,"        map.put(""GMT"", DateTimeZone.UTC);
",4,0,0,1,2,0,4,0,0,9,33,5,0.04298,0
defect4j,time,org/joda/time/DateTimeUtils,12,51,"        put(map, ""EST"", ""America/New_York"");
",0,0,0,1,2,0,4,0,0,6,36,5,0.04298,0
defect4j,time,org/joda/time/DateTimeUtils,12,52,"        put(map, ""EDT"", ""America/New_York"");
",0,0,0,1,2,0,4,0,0,6,36,5,0.04298,0
defect4j,time,org/joda/time/DateTimeUtils,12,53,"        put(map, ""CST"", ""America/Chicago"");
",0,0,0,1,2,0,4,0,0,6,35,5,0.04298,0
defect4j,time,org/joda/time/DateTimeUtils,12,54,"        put(map, ""CDT"", ""America/Chicago"");
",0,0,0,1,2,0,4,0,0,6,35,5,0.04298,0
defect4j,time,org/joda/time/DateTimeUtils,12,55,"        put(map, ""MST"", ""America/Denver"");
",0,0,0,1,2,0,4,0,0,6,34,5,0.04298,0
defect4j,time,org/joda/time/DateTimeUtils,12,56,"        put(map, ""MDT"", ""America/Denver"");
",0,0,0,1,2,0,4,0,0,6,34,5,0.04298,0
defect4j,time,org/joda/time/DateTimeUtils,12,57,"        put(map, ""PST"", ""America/Los_Angeles"");
",0,0,0,1,2,0,4,0,0,6,39,5,0.04298,0
defect4j,time,org/joda/time/DateTimeUtils,12,58,"        put(map, ""PDT"", ""America/Los_Angeles"");
",0,0,0,1,2,0,4,0,0,6,39,5,0.04298,0
defect4j,time,org/joda/time/DateTimeUtils,12,59,"        cZoneNames = Collections.unmodifiableMap(map);
",2,0,0,1,2,0,6,0,0,9,46,4,0.04298,0
defect4j,time,org/joda/time/DateTimeUtils,12,60,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04298,0
defect4j,time,org/joda/time/DateTimeUtils,12,63,"            map.put(name, DateTimeZone.forID(id));
",0,0,0,2,4,0,12,0,0,12,38,7,0.04298,0
defect4j,time,org/joda/time/DateTimeUtils,12,66,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04298,0
defect4j,time,org/joda/time/DateTimeUtils,12,67,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04298,0
defect4j,time,org/joda/time/DateTimeUtils,12,509,"    static class SystemMillisProvider implements MillisProvider {
",2,0,0,0,1,1,0,2,0,5,61,2,0.04298,0
defect4j,time,org/joda/time/DurationFieldType,12,178,"        return MONTHS_TYPE;
",2,0,0,0,0,1,0,0,0,2,19,4,0.04287,0
defect4j,time,org/joda/time/DurationFieldType,12,187,"        return YEARS_TYPE;
",2,0,0,0,0,1,0,0,0,2,18,4,0.04287,0
defect4j,time,org/joda/time/DurationFieldType,12,160,"        return WEEKS_TYPE;
",2,0,0,0,0,1,0,0,0,2,18,4,0.04261,0
defect4j,time,org/joda/time/DurationFieldType,12,114,"        return SECONDS_TYPE;
",2,0,0,0,0,1,0,0,0,2,20,4,0.04258,0
defect4j,time,org/joda/time/DurationFieldType,12,123,"        return MINUTES_TYPE;
",2,0,0,0,0,1,0,0,0,2,20,4,0.04258,0
defect4j,time,org/joda/time/DurationFieldType,12,132,"        return HOURS_TYPE;
",2,0,0,0,0,1,0,0,0,2,18,4,0.04258,0
defect4j,time,org/joda/time/DurationFieldType,12,151,"        return DAYS_TYPE;
",2,0,0,0,0,1,0,0,0,2,17,4,0.04255,0
defect4j,time,org/joda/time/DurationFieldType,12,94,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.03960,0
defect4j,time,org/joda/time/DurationFieldType,12,95,"        iName = name;
",4,0,0,0,0,0,0,0,0,5,13,4,0.03960,0
defect4j,time,org/joda/time/DurationFieldType,12,96,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03960,0
defect4j,time,org/joda/time/DurationFieldType,12,60,"    static final DurationFieldType ERAS_TYPE = new StandardDurationFieldType(""eras"", ERAS);
",4,0,0,1,2,2,0,4,0,11,87,2,0.03960,0
defect4j,time,org/joda/time/DurationFieldType,12,62,"    static final DurationFieldType CENTURIES_TYPE = new StandardDurationFieldType(""centuries"", CENTURIES);
",4,0,0,1,2,2,0,4,0,11,102,2,0.03960,0
defect4j,time,org/joda/time/DurationFieldType,12,64,"    static final DurationFieldType WEEKYEARS_TYPE = new StandardDurationFieldType(""weekyears"", WEEKYEARS);
",4,0,0,1,2,2,0,4,0,11,102,2,0.03960,0
defect4j,time,org/joda/time/DurationFieldType,12,66,"    static final DurationFieldType YEARS_TYPE = new StandardDurationFieldType(""years"", YEARS);
",4,0,0,1,2,2,0,4,0,11,90,2,0.03960,0
defect4j,time,org/joda/time/DurationFieldType,12,68,"    static final DurationFieldType MONTHS_TYPE = new StandardDurationFieldType(""months"", MONTHS);
",4,0,0,1,2,2,0,4,0,11,93,2,0.03960,0
defect4j,time,org/joda/time/DurationFieldType,12,70,"    static final DurationFieldType WEEKS_TYPE = new StandardDurationFieldType(""weeks"", WEEKS);
",4,0,0,1,2,2,0,4,0,11,90,2,0.03960,0
defect4j,time,org/joda/time/DurationFieldType,12,72,"    static final DurationFieldType DAYS_TYPE = new StandardDurationFieldType(""days"", DAYS);
",4,0,0,1,2,2,0,4,0,11,87,2,0.03960,0
defect4j,time,org/joda/time/DurationFieldType,12,74,"    static final DurationFieldType HALFDAYS_TYPE = new StandardDurationFieldType(""halfdays"", HALFDAYS);
",4,0,0,1,2,2,0,4,0,11,99,2,0.03960,0
defect4j,time,org/joda/time/DurationFieldType,12,76,"    static final DurationFieldType HOURS_TYPE = new StandardDurationFieldType(""hours"", HOURS);
",4,0,0,1,2,2,0,4,0,11,90,2,0.03960,0
defect4j,time,org/joda/time/DurationFieldType,12,78,"    static final DurationFieldType MINUTES_TYPE = new StandardDurationFieldType(""minutes"", MINUTES);
",4,0,0,1,2,2,0,4,0,11,96,2,0.03960,0
defect4j,time,org/joda/time/DurationFieldType,12,80,"    static final DurationFieldType SECONDS_TYPE = new StandardDurationFieldType(""seconds"", SECONDS);
",4,0,0,1,2,2,0,4,0,11,96,2,0.03960,0
defect4j,time,org/joda/time/DurationFieldType,12,82,"    static final DurationFieldType MILLIS_TYPE = new StandardDurationFieldType(""millis"", MILLIS);
",4,0,0,1,2,2,0,4,0,11,93,2,0.03960,0
defect4j,time,org/joda/time/DurationFieldType,12,259,"            super(name);
",2,0,0,1,2,0,0,0,0,2,12,5,0.03960,0
defect4j,time,org/joda/time/DurationFieldType,12,260,"            iOrdinal = ordinal;
",4,0,0,0,0,0,0,0,0,5,19,5,0.03960,0
defect4j,time,org/joda/time/DurationFieldType,12,261,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03960,0
defect4j,time,org/joda/time/DateTimeZone,12,689,"    protected DateTimeZone(String id) {
",4,0,0,1,3,1,0,2,0,7,35,2,0.03842,0
defect4j,time,org/joda/time/DateTimeZone,12,690,"        if (id == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.03842,0
defect4j,time,org/joda/time/DateTimeZone,12,693,"        iID = id;
",4,0,0,0,0,0,0,0,0,5,9,4,0.03842,0
defect4j,time,org/joda/time/DateTimeZone,12,694,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03842,0
defect4j,time,org/joda/time/DateTimeZone,12,95,"    public static final DateTimeZone UTC = new FixedDateTimeZone(""UTC"", ""UTC"", 0, 0);
",2,0,0,1,2,3,0,4,0,11,81,2,0.03842,0
defect4j,time,org/joda/time/DateTimeZone,12,115,"        setProvider0(null);
",0,0,0,1,2,0,2,0,0,3,19,4,0.03842,0
defect4j,time,org/joda/time/DateTimeZone,12,116,"        setNameProvider0(null);
",0,0,0,1,2,0,2,0,0,3,23,4,0.03842,0
defect4j,time,org/joda/time/DateTimeZone,12,117,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03842,0
defect4j,time,org/joda/time/DateTimeZone,12,204,"        if (id == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.03842,0
defect4j,time,org/joda/time/DateTimeZone,12,207,"        if (id.equals(""UTC"")) {
",0,0,0,2,5,0,4,0,0,5,23,5,0.03842,0
defect4j,time,org/joda/time/DateTimeZone,12,210,"        DateTimeZone zone = cProvider.getZone(id);
",2,0,0,1,2,0,6,2,0,10,42,4,0.03842,0
defect4j,time,org/joda/time/DateTimeZone,12,211,"        if (zone != null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.03842,0
defect4j,time,org/joda/time/DateTimeZone,12,212,"            return zone;
",2,0,0,0,0,1,0,0,0,2,12,6,0.03842,0
defect4j,time,org/joda/time/DateTimeZone,12,415,"        if (provider == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.03842,0
defect4j,time,org/joda/time/DateTimeZone,12,416,"            provider = getDefaultProvider();
",2,0,0,1,2,0,2,0,0,5,32,6,0.03842,0
defect4j,time,org/joda/time/DateTimeZone,12,418,"        Set<String> ids = provider.getAvailableIDs();
",2,0,0,1,2,0,4,4,0,10,45,4,0.03842,0
defect4j,time,org/joda/time/DateTimeZone,12,419,"        if (ids == null || ids.size() == 0) {
",2,3,0,2,5,0,4,0,0,9,37,4,0.03842,0
defect4j,time,org/joda/time/DateTimeZone,12,423,"        if (!ids.contains(""UTC"")) {
",0,0,0,2,5,0,4,0,0,6,27,4,0.03842,0
defect4j,time,org/joda/time/DateTimeZone,12,426,"        if (!UTC.equals(provider.getZone(""UTC""))) {
",0,0,0,3,7,0,8,0,0,10,43,4,0.03842,0
defect4j,time,org/joda/time/DateTimeZone,12,429,"        cProvider = provider;
",4,0,0,0,0,0,0,0,0,5,21,4,0.03842,0
defect4j,time,org/joda/time/DateTimeZone,12,430,"        cAvailableIDs = ids;
",4,0,0,0,0,0,0,0,0,5,20,4,0.03842,0
defect4j,time,org/joda/time/DateTimeZone,12,431,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03842,0
defect4j,time,org/joda/time/DateTimeZone,12,443,"        Provider provider = null;
",2,0,0,0,0,0,0,2,0,4,25,4,0.03842,0
defect4j,time,org/joda/time/DateTimeZone,12,446,"            String providerClass =
",2,0,0,0,0,0,0,2,0,4,22,6,0.03842,0
defect4j,time,org/joda/time/DateTimeZone,12,448,"            if (providerClass != null) {
",2,1,0,1,3,0,0,0,0,3,28,6,0.03842,0
defect4j,time,org/joda/time/DateTimeZone,12,458,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03842,0
defect4j,time,org/joda/time/DateTimeZone,12,460,"        if (provider == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.03842,0
defect4j,time,org/joda/time/DateTimeZone,12,462,"                provider = new ZoneInfoProvider(""org/joda/time/tz/data"");
",2,0,0,1,2,0,0,2,0,6,57,8,0.03842,0
defect4j,time,org/joda/time/DateTimeZone,12,466,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03842,0
defect4j,time,org/joda/time/DateTimeZone,12,469,"        if (provider == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.03842,0
defect4j,time,org/joda/time/DateTimeZone,12,473,"        return provider;
",2,0,0,0,0,1,0,0,0,2,16,4,0.03842,0
defect4j,time,org/joda/time/DateTimeZone,12,514,"        if (nameProvider == null) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.03842,0
defect4j,time,org/joda/time/DateTimeZone,12,515,"            nameProvider = getDefaultNameProvider();
",2,0,0,1,2,0,2,0,0,5,40,6,0.03842,0
defect4j,time,org/joda/time/DateTimeZone,12,517,"        cNameProvider = nameProvider;
",4,0,0,0,0,0,0,0,0,5,29,4,0.03842,0
defect4j,time,org/joda/time/DateTimeZone,12,518,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03842,0
defect4j,time,org/joda/time/DateTimeZone,12,529,"        NameProvider nameProvider = null;
",2,0,0,0,0,0,0,2,0,4,33,4,0.03842,0
defect4j,time,org/joda/time/DateTimeZone,12,531,"            String providerClass = System.getProperty(""org.joda.time.DateTimeZone.NameProvider"");
",2,0,0,1,2,0,4,2,0,9,85,6,0.03842,0
defect4j,time,org/joda/time/DateTimeZone,12,532,"            if (providerClass != null) {
",2,1,0,1,3,0,0,0,0,3,28,6,0.03842,0
defect4j,time,org/joda/time/DateTimeZone,12,542,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03842,0
defect4j,time,org/joda/time/DateTimeZone,12,544,"        if (nameProvider == null) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.03842,0
defect4j,time,org/joda/time/DateTimeZone,12,545,"            nameProvider = new DefaultNameProvider();
",2,0,0,1,2,0,0,2,0,5,41,6,0.03842,0
defect4j,time,org/joda/time/DateTimeZone,12,548,"        return nameProvider;
",2,0,0,0,0,1,0,0,0,2,20,4,0.03842,0
defect4j,time,org/joda/time/DateTimeZone,12,706,"        return iID;
",2,0,0,0,0,1,0,0,0,2,11,4,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,504,"        {
",0,0,0,0,1,0,0,0,0,0,1,3,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,505,"            if (mode != 'u' && mode != 'w' && mode != 's') {
",6,5,0,1,3,0,0,0,0,14,48,5,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,509,"            iMode = mode;
",4,0,0,0,0,0,0,0,0,5,13,5,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,510,"            iMonthOfYear = monthOfYear;
",4,0,0,0,0,0,0,0,0,5,27,5,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,511,"            iDayOfMonth = dayOfMonth;
",4,0,0,0,0,0,0,0,0,5,25,5,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,512,"            iDayOfWeek = dayOfWeek;
",4,0,0,0,0,0,0,0,0,5,23,5,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,513,"            iAdvance = advanceDayOfWeek;
",4,0,0,0,0,0,0,0,0,5,28,5,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,514,"            iMillisOfDay = millisOfDay;
",4,0,0,0,0,0,0,0,0,5,27,5,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,515,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,482,"            return new OfYear((char)in.readUnsignedByte(),
",0,0,0,2,5,1,4,2,0,6,46,6,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1176,"            super(id);
",2,0,0,1,2,0,0,0,0,2,10,5,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1177,"            iStandardOffset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,33,5,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1178,"            iStartRecurrence = startRecurrence;
",4,0,0,0,0,0,0,0,0,5,35,5,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1179,"            iEndRecurrence = endRecurrence;
",4,0,0,0,0,0,0,0,0,5,31,5,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1180,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1166,"            return new DSTZone(id, (int)readMillis(in), 
",2,0,0,2,5,1,4,2,0,8,43,6,0.03842,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,12,38,"        super(id);
",2,0,0,1,2,0,0,0,0,2,10,4,0.03842,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,12,39,"        iNameKey = nameKey;
",4,0,0,0,0,0,0,0,0,5,19,4,0.03842,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,12,40,"        iWallOffset = wallOffset;
",4,0,0,0,0,0,0,0,0,5,25,4,0.03842,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,12,41,"        iStandardOffset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,33,4,0.03842,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,12,42,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03842,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,12,88,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.03842,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,12,89,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.03842,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,12,39,"    public DefaultNameProvider() {
",2,0,0,1,3,1,0,0,0,3,30,2,0.03842,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,12,37,"    private HashMap<Locale, Map<String, Map<String, Object>>> iByLocaleCache = createCache();
",2,0,0,1,2,1,2,14,0,19,89,2,0.03842,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,12,40,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03842,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,12,99,"        return new HashMap(7);
",0,0,0,1,2,1,0,2,0,2,22,6,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,82,"        this(resourcePath, null, false);
",2,0,0,1,2,0,0,0,0,3,32,4,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,83,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,106,"    {
",0,0,0,0,1,0,0,0,0,0,1,3,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,107,"        if (resourcePath == null) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,110,"        if (!resourcePath.endsWith(""/"")) {
",0,0,0,2,5,0,4,0,0,6,34,4,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,111,"            resourcePath += '/';
",2,0,0,0,0,0,0,0,0,4,20,6,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,114,"        iFileDir = null;
",2,0,0,0,0,0,0,0,0,3,16,4,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,115,"        iResourcePath = resourcePath;
",4,0,0,0,0,0,0,0,0,5,29,4,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,117,"        if (loader == null && !favorSystemLoader) {
",4,2,0,1,3,0,0,0,0,7,43,4,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,118,"            loader = getClass().getClassLoader();
",2,0,0,2,4,0,4,0,0,7,37,6,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,121,"        iLoader = loader;
",4,0,0,0,0,0,0,0,0,5,17,4,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,123,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));
",2,0,0,2,4,0,4,0,0,8,60,4,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,124,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,136,"        if (id == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,140,"        Object obj = iZoneInfoMap.get(id);
",2,0,0,1,2,0,6,2,0,10,34,4,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,141,"        if (obj == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,145,"        if (id.equals(obj)) {
",0,0,0,2,5,0,6,0,0,6,21,5,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,147,"            return loadZoneData(id);
",0,0,0,1,2,1,4,0,0,4,24,7,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,150,"        if (obj instanceof SoftReference<?>) {
",2,0,0,1,3,0,0,2,0,4,38,5,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,152,"            SoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;
",4,0,0,1,2,0,0,8,0,12,68,6,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,153,"            DateTimeZone tz = ref.get();
",2,0,0,1,2,0,4,2,0,8,28,6,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,154,"            if (tz != null) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,155,"                return tz;
",2,0,0,0,0,1,0,0,0,2,10,8,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,174,"        return new TreeSet<String>(iZoneInfoMap.keySet());
",0,0,0,2,4,1,4,4,0,8,50,5,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,196,"        if (iFileDir != null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,199,"            String path = iResourcePath.concat(name);
",2,0,0,1,2,0,6,2,0,10,41,6,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,200,"            if (iLoader != null) {
",2,1,0,1,3,0,0,0,0,3,22,6,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,201,"                in = iLoader.getResourceAsStream(path);
",2,0,0,1,2,0,6,0,0,9,39,8,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,205,"            if (in == null) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,214,"        return in;
",2,0,0,0,0,1,0,0,0,2,10,4,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,224,"        InputStream in = null;
",2,0,0,0,0,0,0,2,0,4,22,4,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,226,"            in = openResource(id);
",2,0,0,1,2,0,4,0,0,7,22,6,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,227,"            DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);
",2,0,0,1,2,0,8,2,0,12,55,6,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,228,"            iZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));
",2,0,0,2,4,0,6,4,0,12,58,7,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,229,"            return tz;
",2,0,0,0,0,1,0,0,0,2,10,6,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,236,"                if (in != null) {
",2,1,0,1,3,0,0,0,0,3,17,8,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,237,"                    in.close();
",0,0,0,1,2,0,4,0,0,4,11,11,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,240,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,252,"        Map<String, Object> map = new ConcurrentHashMap<String, Object>();
",2,0,0,1,2,0,0,12,0,14,66,4,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,253,"        DataInputStream din = new DataInputStream(in);
",4,0,0,1,2,0,0,4,0,8,46,4,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,255,"            readZoneInfoMap(din, map);
",0,0,0,1,2,0,6,0,0,6,26,7,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,258,"                din.close();
",0,0,0,1,2,0,4,0,0,4,12,9,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,260,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,262,"        map.put(""UTC"", new SoftReference<DateTimeZone>(DateTimeZone.UTC));
",4,0,0,2,4,0,4,4,0,13,66,5,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,263,"        return map;
",2,0,0,0,0,1,0,0,0,2,11,4,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,274,"        int size = din.readUnsignedShort();
",2,0,0,1,2,0,4,0,0,6,35,5,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,275,"        String[] pool = new String[size];
",2,0,1,2,4,0,0,4,0,8,33,4,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,276,"        for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,4,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,277,"            pool[i] = din.readUTF().intern();
",0,0,1,3,6,0,6,0,0,11,33,6,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,281,"        size = din.readUnsignedShort();
",2,0,0,1,2,0,4,0,0,7,31,4,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,282,"        for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,4,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,284,"                zimap.put(pool[din.readUnsignedShort()], pool[din.readUnsignedShort()]);
",0,0,1,5,10,0,12,0,0,16,72,9,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,287,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03842,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,289,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,95,"        if (in instanceof DataInput) {
",2,0,0,1,3,0,0,2,0,4,30,5,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,98,"            return readFrom((DataInput)new DataInputStream(in), id);
",2,0,0,3,6,1,4,4,0,10,56,7,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,110,"        switch (in.readUnsignedByte()) {
",0,0,0,2,5,0,4,0,0,4,32,5,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,119,"            return CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in, id));
",0,0,0,2,4,1,12,0,0,12,70,6,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,183,"        int v = in.readUnsignedByte();
",2,0,0,1,2,0,4,0,0,6,30,5,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,184,"        switch (v >> 6) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,187,"            v = (v << (32 - 6)) >> (32 - 6);
",4,4,0,3,6,0,0,0,0,9,32,5,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,188,"            return v * (30 * 60000L);
",2,2,0,1,2,1,0,0,0,4,25,5,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,192,"            v = (v << (32 - 6)) >> (32 - 30);
",4,4,0,3,6,0,0,0,0,9,33,5,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,193,"            v |= (in.readUnsignedByte()) << 16;
",2,1,0,2,4,0,4,0,0,8,35,5,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,194,"            v |= (in.readUnsignedByte()) << 8;
",2,1,0,2,4,0,4,0,0,8,34,5,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,195,"            v |= (in.readUnsignedByte());
",2,0,0,2,4,0,4,0,0,7,29,5,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,196,"            return v * 60000L;
",2,1,0,0,0,1,0,0,0,3,18,5,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,200,"            long w = (((long)v) << (64 - 6)) >> (64 - 38);
",4,4,0,5,10,0,0,0,0,8,46,6,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,201,"            w |= (in.readUnsignedByte()) << 24;
",2,1,0,2,4,0,4,0,0,8,35,5,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,202,"            w |= (in.readUnsignedByte()) << 16;
",2,1,0,2,4,0,4,0,0,8,35,5,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,203,"            w |= (in.readUnsignedByte()) << 8;
",2,1,0,2,4,0,4,0,0,8,34,5,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,204,"            w |= (in.readUnsignedByte());
",2,0,0,2,4,0,4,0,0,7,29,5,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,205,"            return w * 1000L;
",2,1,0,0,0,1,0,0,0,3,17,5,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,209,"            return in.readLong();
",0,0,0,1,2,1,4,0,0,4,21,6,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1500,"            super(id);
",2,0,0,1,2,0,0,0,0,2,10,5,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1501,"            iTransitions = transitions;
",4,0,0,0,0,0,0,0,0,5,27,5,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1502,"            iWallOffsets = wallOffsets;
",4,0,0,0,0,0,0,0,0,5,27,5,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1503,"            iStandardOffsets = standardOffsets;
",4,0,0,0,0,0,0,0,0,5,35,5,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1504,"            iNameKeys = nameKeys;
",4,0,0,0,0,0,0,0,0,5,21,5,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1505,"            iTailZone = tailZone;
",4,0,0,0,0,0,0,0,0,5,21,5,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1506,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1341,"            int poolSize = in.readUnsignedShort();
",2,0,0,1,2,0,4,0,0,6,38,6,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1342,"            String[] pool = new String[poolSize];
",2,0,1,2,4,0,0,4,0,8,37,5,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1343,"            for (int i=0; i<poolSize; i++) {
",8,1,0,1,3,0,0,0,0,10,32,5,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1344,"                pool[i] = in.readUTF();
",0,0,1,2,4,0,4,0,0,9,23,7,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1347,"            int size = in.readInt();
",2,0,0,1,2,0,4,0,0,6,24,6,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1348,"            long[] transitions = new long[size];
",2,0,1,2,4,0,0,0,0,4,36,6,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1349,"            int[] wallOffsets = new int[size];
",2,0,1,2,4,0,0,0,0,4,34,6,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1350,"            int[] standardOffsets = new int[size];
",2,0,1,2,4,0,0,0,0,4,38,6,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1351,"            String[] nameKeys = new String[size];
",2,0,1,2,4,0,0,4,0,8,37,5,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1353,"            for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,5,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1354,"                transitions[i] = readMillis(in);
",0,0,1,2,4,0,4,0,0,9,32,7,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1355,"                wallOffsets[i] = (int)readMillis(in);
",0,0,1,3,6,0,4,0,0,9,37,7,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1356,"                standardOffsets[i] = (int)readMillis(in);
",0,0,1,3,6,0,4,0,0,9,41,7,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1359,"                    if (poolSize < 256) {
",2,1,0,1,3,0,0,0,0,3,21,9,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1360,"                        index = in.readUnsignedByte();
",2,0,0,1,2,0,4,0,0,7,30,11,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1364,"                    nameKeys[i] = pool[index];
",0,0,1,2,4,0,0,0,0,9,26,9,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1367,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1370,"            DSTZone tailZone = null;
",2,0,0,0,0,0,0,2,0,4,24,5,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1371,"            if (in.readBoolean()) {
",0,0,0,2,5,0,4,0,0,4,23,6,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1372,"                tailZone = DSTZone.readFrom(in, id);
",2,0,0,1,2,0,8,0,0,11,36,7,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1375,"            return new PrecalculatedZone
",0,0,0,0,0,1,0,2,0,2,28,7,0.03842,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,87,"        super(zone.getID());
",0,0,0,2,4,0,4,0,0,4,20,5,0.03842,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,84,"    private final Info[] iInfoCache = new Info[cInfoCacheMask + 1];
",4,1,0,2,4,2,0,4,0,11,63,2,0.03842,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,88,"        iZone = zone;
",4,0,0,0,0,0,0,0,0,5,13,4,0.03842,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,89,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03842,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,39,"            i = Integer.getInteger(""org.joda.time.tz.CachedDateTimeZone.size"");
",2,0,0,1,2,0,4,0,0,8,67,6,0.03842,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,42,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03842,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,45,"        if (i == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.03842,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,48,"            cacheSize = 512; // (1 << 9)
",2,0,0,1,2,0,0,0,0,3,28,6,0.03842,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,61,"        cInfoCacheMask = cacheSize - 1;
",4,1,0,0,0,0,0,0,0,6,31,4,0.03842,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,62,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03842,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,68,"        if (zone instanceof CachedDateTimeZone) {
",2,0,0,1,3,0,0,2,0,4,41,5,0.03842,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,71,"        return new CachedDateTimeZone(zone);
",2,0,0,1,2,1,0,2,0,4,36,5,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,747,"        Recurrence(OfYear ofYear, String nameKey, int saveMillis) {
",8,0,0,1,3,0,0,4,0,12,59,3,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,748,"            iOfYear = ofYear;
",4,0,0,0,0,0,0,0,0,5,17,5,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,749,"            iNameKey = nameKey;
",4,0,0,0,0,0,0,0,0,5,19,5,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,750,"            iSaveMillis = saveMillis;
",4,0,0,0,0,0,0,0,0,5,25,5,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,751,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03842,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,740,"            return new Recurrence(OfYear.readFrom(in), in.readUTF(), (int)readMillis(in));
",0,0,0,5,10,1,14,2,0,16,78,6,0.03842,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,133,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,
",0,0,0,0,1,1,10,0,0,10,60,7,0.03837,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1535,"                if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,7,0.01706,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1536,"                    return iWallOffsets[i - 1];
",2,1,1,1,2,1,0,0,0,5,27,10,0.01706,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1574,"                return transitions[i];
",0,0,1,1,2,1,0,0,0,4,22,8,0.01704,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,160,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.01527,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,196,"            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {
",8,3,0,1,3,0,0,0,0,11,59,5,0.01517,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,197,"                if (iOffset == Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,35,7,0.01517,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,198,"                    iOffset = iZoneRef.getOffset(iPeriodStart);
",2,0,0,1,2,0,6,0,0,9,43,9,0.01517,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,200,"                return iOffset;
",2,0,0,0,0,1,0,0,0,2,15,7,0.01517,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1533,"            i = ~i;
",4,0,0,0,0,0,0,0,0,6,7,5,0.01517,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1534,"            if (i < transitions.length) {
",6,1,0,1,3,0,0,0,0,7,29,5,0.01517,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,103,"        return getInfo(instant).getOffset(instant);
",0,0,0,2,4,1,8,0,0,8,43,5,0.01517,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1528,"            long[] transitions = iTransitions;
",4,0,0,1,2,0,0,0,0,4,34,6,0.01515,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1529,"            int i = Arrays.binarySearch(transitions, instant);
",2,0,0,1,2,0,8,0,0,10,50,6,0.01515,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1530,"            if (i >= 0) {
",2,1,0,1,3,0,0,0,0,3,13,5,0.01515,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,180,"        Info(DateTimeZone zone, long periodStart) {
",6,0,0,1,3,0,0,2,0,8,43,3,0.01509,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,177,"        private int iOffset = Integer.MIN_VALUE;
",6,0,0,0,0,1,0,0,0,7,40,3,0.01509,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,178,"        private int iStandardOffset = Integer.MIN_VALUE;
",6,0,0,0,0,1,0,0,0,7,48,3,0.01509,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,181,"            iPeriodStart = periodStart;
",4,0,0,0,0,0,0,0,0,5,27,5,0.01509,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,182,"            iZoneRef = zone;
",4,0,0,0,0,0,0,0,0,5,16,5,0.01509,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,183,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01509,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1570,"            long[] transitions = iTransitions;
",4,0,0,1,2,0,0,0,0,4,34,6,0.01509,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1571,"            int i = Arrays.binarySearch(transitions, instant);
",2,0,0,1,2,0,8,0,0,10,50,6,0.01509,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1572,"            i = (i >= 0) ? (i + 1) : ~i;
",8,2,0,2,4,0,0,0,0,12,28,5,0.01509,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1573,"            if (i < transitions.length) {
",6,1,0,1,3,0,0,0,0,7,29,5,0.01509,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,140,"        int period = (int)(millis >> 32);
",4,1,0,2,4,0,0,0,0,5,33,5,0.01509,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,141,"        Info[] cache = iInfoCache;
",4,0,0,1,2,0,0,2,0,6,26,4,0.01509,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,142,"        int index = period & cInfoCacheMask;
",6,1,0,0,0,0,0,0,0,7,36,5,0.01509,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,143,"        Info info = cache[index];
",2,0,1,1,2,0,0,2,0,8,25,4,0.01509,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,144,"        if (info == null || (int)((info.iPeriodStart >> 32)) != period) {
",8,4,0,4,9,0,0,0,0,12,65,4,0.01509,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,145,"            info = createInfo(millis);
",2,0,0,1,2,0,4,0,0,7,26,6,0.01509,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,146,"            cache[index] = info;
",2,0,1,1,2,0,0,0,0,7,20,6,0.01509,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,148,"        return info;
",2,0,0,0,0,1,0,0,0,2,12,4,0.01509,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,152,"        long periodStart = millis & (0xffffffffL << 32);
",4,2,0,1,2,0,0,0,0,6,48,5,0.01509,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,153,"        Info info = new Info(iZone, periodStart);
",6,0,0,1,2,0,0,4,0,10,41,4,0.01509,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,155,"        long end = periodStart | 0xffffffffL;
",4,1,0,0,0,0,0,0,0,5,37,5,0.01509,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,156,"        Info chain = info;
",4,0,0,0,0,0,0,2,0,6,18,4,0.01509,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,158,"            long next = iZone.nextTransition(periodStart);
",2,0,0,1,2,0,6,0,0,8,46,7,0.01509,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,159,"            if (next == periodStart || next > end) {
",8,3,0,1,3,0,0,0,0,11,40,6,0.01509,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,166,"        return info;
",2,0,0,0,0,1,0,0,0,2,12,4,0.01509,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,167,"        if ((base = getBase()) != null) {
",2,1,0,3,7,0,2,0,0,7,33,4,0.01505,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,172,"        FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);
",0,0,0,2,4,0,10,0,0,10,78,5,0.01505,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,173,"        FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);
",0,0,0,2,4,0,10,0,0,10,84,5,0.01505,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,174,"        FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);
",0,0,0,2,4,0,10,0,0,10,88,5,0.01505,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,175,"        FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);
",0,0,0,2,4,0,10,0,0,10,89,5,0.01505,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,177,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth)
",0,0,0,1,2,1,8,0,0,8,59,9,0.01505,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));
",0,0,0,3,6,0,12,0,0,14,79,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,109,"        iDateTimeFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,110,"        iDurationFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,111,"        iFieldName = fieldType.getName();
",2,0,0,1,2,0,4,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,112,"        iNumberValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,113,"        iStringValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,114,"        iLowerBound = lowerBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,115,"        iUpperBound = upperBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,116,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,117,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,129,"        super(createMessage(fieldType.getName(), value, null, null, explain));
",0,0,0,3,6,0,10,0,0,12,70,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,130,"        iDateTimeFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,131,"        iDurationFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,132,"        iFieldName = fieldType.getName();
",2,0,0,1,2,0,4,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,133,"        iNumberValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,134,"        iStringValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,135,"        iLowerBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,136,"        iUpperBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,137,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,138,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,150,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));
",0,0,0,3,6,0,12,0,0,14,79,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,151,"        iDateTimeFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,152,"        iDurationFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,153,"        iFieldName = fieldType.getName();
",2,0,0,1,2,0,4,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,154,"        iNumberValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,155,"        iStringValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,156,"        iLowerBound = lowerBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,157,"        iUpperBound = upperBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,158,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,159,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,171,"        super(createMessage(fieldName, value, lowerBound, upperBound, null));
",0,0,0,2,4,0,10,0,0,12,69,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,172,"        iDateTimeFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,173,"        iDurationFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,174,"        iFieldName = fieldName;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,175,"        iNumberValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,176,"        iStringValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,177,"        iLowerBound = lowerBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,178,"        iUpperBound = upperBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,179,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,180,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,189,"        super(createMessage(fieldType.getName(), value));
",0,0,0,3,6,0,8,0,0,8,49,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,190,"        iDateTimeFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,191,"        iDurationFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,192,"        iFieldName = fieldType.getName();
",2,0,0,1,2,0,4,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,193,"        iStringValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,194,"        iNumberValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,195,"        iLowerBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,196,"        iUpperBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,197,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,198,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,207,"        super(createMessage(fieldType.getName(), value));
",0,0,0,3,6,0,8,0,0,8,49,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,208,"        iDateTimeFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,209,"        iDurationFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,210,"        iFieldName = fieldType.getName();
",2,0,0,1,2,0,4,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,211,"        iStringValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,212,"        iNumberValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,213,"        iLowerBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,214,"        iUpperBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,215,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,216,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,225,"        super(createMessage(fieldName, value));
",0,0,0,2,4,0,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,226,"        iDateTimeFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,227,"        iDurationFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,228,"        iFieldName = fieldName;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,229,"        iStringValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,230,"        iNumberValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,231,"        iLowerBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,232,"        iUpperBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,233,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,234,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,41,"        StringBuilder buf = new StringBuilder()
",2,0,0,1,2,0,0,4,0,6,39,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,44,"        if (lowerBound == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,45,"            if (upperBound == null) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,46,"                buf.append(""is not supported"");
",0,0,0,1,2,0,4,0,0,5,31,9,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,48,"                buf.append(""must not be larger than "").append(upperBound);
",0,0,0,2,4,0,8,0,0,9,58,9,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,50,"        } else if (upperBound == null) {
",2,1,0,1,4,0,0,0,0,3,32,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,51,"            buf.append(""must not be smaller than "").append(lowerBound);
",0,0,0,2,4,0,8,0,0,9,59,8,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,53,"            buf.append(""must be in the range ["")
",0,0,0,1,3,0,4,0,0,5,36,12,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,59,"        if (explain != null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,60,"            buf.append("": "").append(explain);
",0,0,0,2,4,0,8,0,0,9,33,7,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,63,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,74,"        StringBuffer buf = new StringBuffer().append(""Value "");
",2,0,0,2,4,0,2,4,0,9,55,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,76,"        if (value == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,77,"            buf.append(""null"");
",0,0,0,1,2,0,4,0,0,5,19,7,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,79,"            buf.append('""');
",0,0,0,1,2,0,4,0,0,5,16,7,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,80,"            buf.append(value);
",0,0,0,1,2,0,6,0,0,6,18,7,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,81,"            buf.append('""');
",0,0,0,1,2,0,4,0,0,5,16,7,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,84,"        buf.append("" for "").append(fieldName).append(' ').append(""is not supported"");
",0,0,0,4,8,0,12,0,0,15,77,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,86,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,243,"        return iDateTimeFieldType;
",2,0,0,0,0,1,0,0,0,2,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,252,"        return iDurationFieldType;
",2,0,0,0,0,1,0,0,0,2,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,261,"        return iFieldName;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,270,"        return iNumberValue;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,279,"        return iStringValue;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,288,"        String value = iStringValue;
",4,0,0,0,0,0,0,2,0,6,28,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,289,"        if (value == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,290,"            value = String.valueOf(iNumberValue);
",2,0,0,1,2,0,6,0,0,9,37,6,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,292,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,301,"        return iLowerBound;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,310,"        return iUpperBound;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,314,"        return iMessage;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,323,"        if (iMessage == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,324,"            iMessage = message;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,325,"        } else if (message != null) {
",2,1,0,1,4,0,0,0,0,3,29,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,326,"            iMessage = message + "": "" + iMessage;
",6,1,0,0,0,0,0,0,0,9,37,7,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,12,328,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,378,"        return iName;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,410,"        return getField(chronology).isSupported();
",0,0,0,2,4,1,6,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,419,"        return getName();
",0,0,0,1,2,1,2,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,41,"public abstract class DateTimeFieldType implements Serializable {
",2,0,0,0,1,2,0,2,0,6,65,1,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,12,216,"        return iName;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,12,234,"        return getField(chronology).isSupported();
",0,0,0,2,4,1,6,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,12,243,"        return getName();
",0,0,0,1,2,1,2,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,90,"        DateTimeFieldType[] result = new DateTimeFieldType[size()];
",2,0,0,3,6,0,2,4,0,8,59,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,91,"        for (int i = 0; i < result.length; i++) {
",10,1,0,1,3,0,0,0,0,12,41,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,92,"            result[i] = getFieldType(i);
",0,0,1,2,4,0,4,0,0,9,28,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,94,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,105,"        return getField(index, getChronology());
",0,0,0,2,4,1,6,0,0,6,40,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,116,"        DateTimeField[] result = new DateTimeField[size()];
",2,0,0,3,6,0,2,4,0,8,51,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,117,"        for (int i = 0; i < result.length; i++) {
",10,1,0,1,3,0,0,0,0,12,41,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,118,"            result[i] = getField(i);
",0,0,1,2,4,0,4,0,0,9,24,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,120,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,132,"        int[] result = new int[size()];
",2,0,0,3,6,0,2,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,133,"        for (int i = 0; i < result.length; i++) {
",10,1,0,1,3,0,0,0,0,12,41,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,134,"            result[i] = getValue(i);
",0,0,1,2,4,0,4,0,0,9,24,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,136,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,150,"        return getValue(indexOfSupported(type));
",0,0,0,2,4,1,6,0,0,6,40,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,160,"        return (indexOf(type) != -1);
",0,1,0,2,4,1,4,0,0,6,29,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,170,"        for (int i = 0, isize = size(); i < isize; i++) {
",10,1,0,2,5,0,2,0,0,14,49,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,171,"            if (getFieldType(i) == type) {
",2,1,0,2,5,0,4,0,0,7,30,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,172,"                return i;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,175,"        return -1;
",0,0,0,0,0,1,0,0,0,1,10,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,187,"        int index = indexOf(type);
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,188,"        if (index == -1) {
",2,1,0,1,3,0,0,0,0,4,18,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,189,"            throw new IllegalArgumentException(""Field '"" + type + ""' is not supported"");
",2,1,0,1,2,0,0,2,0,7,76,7,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,191,"        return index;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,202,"        for (int i = 0, isize = size(); i < isize; i++) {
",10,1,0,2,5,0,2,0,0,14,49,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,203,"            if (getFieldType(i).getDurationType() == type) {
",2,1,0,3,7,0,6,0,0,9,48,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,204,"                return i;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,207,"        return -1;
",0,0,0,0,0,1,0,0,0,1,10,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,219,"        int index = indexOf(type);
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,220,"        if (index == -1) {
",2,1,0,1,3,0,0,0,0,4,18,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,221,"            throw new IllegalArgumentException(""Field '"" + type + ""' is not supported"");
",2,1,0,1,2,0,0,2,0,7,76,7,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,223,"        return index;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,240,"        Chronology chrono = DateTimeUtils.getInstantChronology(baseInstant);
",2,0,0,1,2,0,6,2,0,10,68,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,241,"        long instantMillis = DateTimeUtils.getInstantMillis(baseInstant);
",2,0,0,1,2,0,6,0,0,8,65,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,242,"        long resolved = chrono.set(this, instantMillis);
",2,0,0,1,2,0,6,0,0,8,48,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,243,"        return new DateTime(resolved, chrono);
",4,0,0,1,2,1,0,2,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,255,"        if (this == partial) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,256,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,258,"        if (partial instanceof ReadablePartial == false) {
",2,1,0,1,3,0,0,2,0,6,50,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,259,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,261,"        ReadablePartial other = (ReadablePartial) partial;
",4,0,0,1,2,0,0,4,0,8,50,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,262,"        if (size() != other.size()) {
",0,1,0,3,7,0,6,0,0,7,29,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,263,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,265,"        for (int i = 0, isize = size(); i < isize; i++) {
",10,1,0,2,5,0,2,0,0,14,49,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,266,"            if (getValue(i) != other.getValue(i) || getFieldType(i) != other.getFieldType(i)) {
",0,3,0,5,11,0,20,0,0,23,83,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,267,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,270,"        return FieldUtils.equals(getChronology(), other.getChronology());
",0,0,0,3,6,1,10,0,0,10,65,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,280,"        int total = 157;
",2,0,0,0,0,0,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,281,"        for (int i = 0, isize = size(); i < isize; i++) {
",10,1,0,2,5,0,2,0,0,14,49,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,282,"            total = 23 * total + getValue(i);
",4,2,0,1,2,0,4,0,0,11,33,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,283,"            total = 23 * total + getFieldType(i).hashCode();
",4,2,0,2,4,0,6,0,0,13,48,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,285,"        total += getChronology().hashCode();
",2,0,0,2,4,0,4,0,0,7,36,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,286,"        return total;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,311,"        if (this == other) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,312,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,314,"        if (size() != other.size()) {
",0,1,0,3,7,0,6,0,0,7,29,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,315,"            throw new ClassCastException(""ReadablePartial objects must have matching field types"");
",0,0,0,1,2,0,0,2,0,3,87,7,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,317,"        for (int i = 0, isize = size(); i < isize; i++) {
",10,1,0,2,5,0,2,0,0,14,49,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,318,"            if (getFieldType(i) != other.getFieldType(i)) {
",0,1,0,3,7,0,10,0,0,11,47,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,319,"                throw new ClassCastException(""ReadablePartial objects must have matching field types"");
",0,0,0,1,2,0,0,2,0,3,87,9,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,323,"        for (int i = 0, isize = size(); i < isize; i++) {
",10,1,0,2,5,0,2,0,0,14,49,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,324,"            if (getValue(i) > other.getValue(i)) {
",0,1,0,3,7,0,10,0,0,11,38,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,325,"                return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,327,"            if (getValue(i) < other.getValue(i)) {
",0,1,0,3,7,0,10,0,0,11,38,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,328,"                return -1;
",0,0,0,0,0,1,0,0,0,1,10,8,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,331,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,350,"        if (partial == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,351,"            throw new IllegalArgumentException(""Partial cannot be null"");
",0,0,0,1,2,0,0,2,0,4,61,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,353,"        return compareTo(partial) > 0;
",0,1,0,1,2,1,4,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,372,"        if (partial == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,373,"            throw new IllegalArgumentException(""Partial cannot be null"");
",0,0,0,1,2,0,0,2,0,4,61,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,375,"        return compareTo(partial) < 0;
",0,1,0,1,2,1,4,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,394,"        if (partial == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,395,"            throw new IllegalArgumentException(""Partial cannot be null"");
",0,0,0,1,2,0,0,2,0,4,61,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,397,"        return compareTo(partial) == 0;
",0,1,0,1,2,1,4,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,409,"        if (formatter == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,410,"            return toString();
",0,0,0,1,2,1,2,0,0,2,18,7,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,412,"        return formatter.print(this);
",0,0,0,1,2,1,4,0,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,12,46,"public abstract class AbstractPartial
",2,0,0,0,0,2,0,0,0,4,37,1,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,71,"        return getChronology().getZone();
",0,0,0,2,4,1,4,0,0,4,33,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,89,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,90,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");
",0,0,0,1,2,0,0,2,0,4,77,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,92,"        return type.getField(getChronology()).get(getMillis());
",0,0,0,4,8,1,10,0,0,10,55,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,103,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,104,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,106,"        return type.getField(getChronology()).isSupported();
",0,0,0,3,6,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,124,"        if (field == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,125,"            throw new IllegalArgumentException(""The DateTimeField must not be null"");
",0,0,0,1,2,0,0,2,0,4,73,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,127,"        return field.get(getMillis());
",0,0,0,2,4,1,6,0,0,6,30,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,137,"        return new Instant(getMillis());
",0,0,0,2,4,1,2,2,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,146,"        return new DateTime(getMillis(), getZone());
",0,0,0,3,6,1,4,2,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,155,"        return new DateTime(getMillis(), ISOChronology.getInstance(getZone()));
",0,0,0,4,8,1,8,2,0,10,71,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,165,"        Chronology chrono = DateTimeUtils.getChronology(getChronology());
",2,0,0,2,4,0,6,2,0,10,65,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,166,"        chrono = chrono.withZone(zone);
",2,0,0,1,2,0,6,0,0,9,31,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,167,"        return new DateTime(getMillis(), chrono);
",2,0,0,2,4,1,2,2,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,177,"        return new DateTime(getMillis(), chronology);
",2,0,0,2,4,1,2,2,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,191,"        return new MutableDateTime(getMillis(), getZone());
",0,0,0,3,6,1,4,2,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,200,"        return new MutableDateTime(getMillis(), ISOChronology.getInstance(getZone()));
",0,0,0,4,8,1,8,2,0,10,78,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,210,"        Chronology chrono = DateTimeUtils.getChronology(getChronology());
",2,0,0,2,4,0,6,2,0,10,65,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,211,"        chrono = chrono.withZone(zone);
",2,0,0,1,2,0,6,0,0,9,31,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,212,"        return new MutableDateTime(getMillis(), chrono);
",2,0,0,2,4,1,2,2,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,222,"        return new MutableDateTime(getMillis(), chronology);
",2,0,0,2,4,1,2,2,0,6,52,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,235,"        return new Date(getMillis());
",0,0,0,2,4,1,2,2,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,259,"        if (this == readableInstant) {
",2,1,0,1,3,0,0,0,0,3,30,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,260,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,262,"        if (readableInstant instanceof ReadableInstant == false) {
",2,1,0,1,3,0,0,2,0,6,58,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,263,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,265,"        ReadableInstant otherInstant = (ReadableInstant) readableInstant;
",4,0,0,1,2,0,0,4,0,8,65,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,266,"        return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,278,"        return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,296,"        if (this == other) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,297,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,300,"        long otherMillis = other.getMillis();
",2,0,0,1,2,0,4,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,301,"        long thisMillis = getMillis();
",2,0,0,1,2,0,2,0,0,4,30,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,304,"        if (thisMillis == otherMillis) {
",4,1,0,1,3,0,0,0,0,5,32,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,305,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,307,"        if (thisMillis < otherMillis) {
",4,1,0,1,3,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,308,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,310,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,323,"        return (getMillis() > instant);
",2,1,0,2,4,1,2,0,0,5,31,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,333,"        return isAfter(DateTimeUtils.currentTimeMillis());
",0,0,0,2,4,1,6,0,0,6,50,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,344,"        long instantMillis = DateTimeUtils.getInstantMillis(instant);
",2,0,0,1,2,0,6,0,0,8,61,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,345,"        return isAfter(instantMillis);
",0,0,0,1,2,1,4,0,0,4,30,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,357,"        return (getMillis() < instant);
",2,1,0,2,4,1,2,0,0,5,31,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,367,"        return isBefore(DateTimeUtils.currentTimeMillis());
",0,0,0,2,4,1,6,0,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,378,"        long instantMillis = DateTimeUtils.getInstantMillis(instant);
",2,0,0,1,2,0,6,0,0,8,61,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,379,"        return isBefore(instantMillis);
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,391,"        return (getMillis() == instant);
",2,1,0,2,4,1,2,0,0,5,32,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,401,"        return isEqual(DateTimeUtils.currentTimeMillis());
",0,0,0,2,4,1,6,0,0,6,50,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,412,"        long instantMillis = DateTimeUtils.getInstantMillis(instant);
",2,0,0,1,2,0,6,0,0,8,61,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,413,"        return isEqual(instantMillis);
",0,0,0,1,2,1,4,0,0,4,30,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,424,"        return ISODateTimeFormat.dateTime().print(this);
",0,0,0,2,4,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,436,"        if (formatter == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,437,"            return toString();
",0,0,0,1,2,1,2,0,0,2,18,7,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,439,"        return formatter.print(this);
",0,0,0,1,2,1,4,0,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,12,55,"public abstract class AbstractInstant implements ReadableInstant {
",2,0,0,0,1,2,0,2,0,6,66,1,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,12,66,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,12,67,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");
",0,0,0,1,2,0,0,2,0,4,77,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,12,69,"        return type.getField(getChronology()).get(getMillis());
",0,0,0,4,8,1,10,0,0,10,55,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,12,79,"        return getChronology().era().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,12,88,"        return getChronology().centuryOfEra().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,55,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,12,97,"        return getChronology().yearOfEra().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,12,106,"        return getChronology().yearOfCentury().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,56,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,12,115,"        return getChronology().year().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,47,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,12,130,"        return getChronology().weekyear().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,12,139,"        return getChronology().monthOfYear().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,12,153,"        return getChronology().weekOfWeekyear().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,57,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,12,162,"        return getChronology().dayOfYear().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,12,173,"        return getChronology().dayOfMonth().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,53,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,12,184,"        return getChronology().dayOfWeek().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,12,194,"        return getChronology().hourOfDay().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,12,203,"        return getChronology().minuteOfDay().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,12,212,"        return getChronology().minuteOfHour().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,55,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,12,221,"        return getChronology().secondOfDay().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,12,230,"        return getChronology().secondOfMinute().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,57,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,12,239,"        return getChronology().millisOfDay().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,12,248,"        return getChronology().millisOfSecond().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,57,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,12,270,"        if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,12,271,"            locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,12,273,"        DateTimeZone zone = getZone();
",2,0,0,1,2,0,2,2,0,6,30,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,12,274,"        Calendar cal = Calendar.getInstance(zone.toTimeZone(), locale);
",2,0,0,2,4,0,10,2,0,14,63,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,12,275,"        cal.setTime(toDate());
",0,0,0,2,4,0,6,0,0,6,22,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,12,276,"        return cal;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,12,294,"        DateTimeZone zone = getZone();
",2,0,0,1,2,0,2,2,0,6,30,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,12,295,"        GregorianCalendar cal = new GregorianCalendar(zone.toTimeZone());
",2,0,0,2,4,0,4,4,0,10,65,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,12,296,"        cal.setTime(toDate());
",0,0,0,2,4,0,6,0,0,6,22,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,12,297,"        return cal;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,12,308,"        if (pattern == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,12,309,"            return toString();
",0,0,0,1,2,1,2,0,0,2,18,7,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,12,311,"        return DateTimeFormat.forPattern(pattern).print(this);
",0,0,0,2,4,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,12,322,"        if (pattern == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,12,323,"            return toString();
",0,0,0,1,2,1,2,0,0,2,18,7,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,12,325,"        return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);
",0,0,0,3,6,1,12,0,0,12,73,5,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,12,61,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());
",0,0,0,3,6,0,8,0,0,8,69,5,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,12,62,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,12,73,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));
",0,0,0,3,6,0,10,0,0,10,73,5,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,12,74,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,12,86,"        this(DateTimeUtils.currentTimeMillis(), chronology);
",2,0,0,2,4,0,4,0,0,6,52,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,12,87,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,12,97,"        this(instant, ISOChronology.getInstance());
",2,0,0,2,4,0,4,0,0,6,43,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,12,98,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,12,110,"        this(instant, ISOChronology.getInstance(zone));
",2,0,0,2,4,0,6,0,0,8,47,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,12,111,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,12,124,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,12,125,"        iChronology = checkChronology(chronology);
",2,0,0,1,2,0,4,0,0,7,42,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,12,126,"        iMillis = checkInstant(instant, iChronology);
",2,0,0,1,2,0,6,0,0,9,45,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,12,127,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,12,146,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,12,147,"        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
",2,0,0,2,4,0,8,2,0,12,89,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,12,148,"        Chronology chrono = checkChronology(converter.getChronology(instant, zone));
",2,0,0,2,4,0,10,2,0,14,76,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,12,149,"        iChronology = chrono;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,12,150,"        iMillis = checkInstant(converter.getInstantMillis(instant, chrono), chrono);
",2,0,0,2,4,0,12,0,0,15,76,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,12,151,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,12,168,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,12,169,"        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
",2,0,0,2,4,0,8,2,0,12,89,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,12,170,"        iChronology = checkChronology(converter.getChronology(instant, chronology));
",2,0,0,2,4,0,10,0,0,13,76,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,12,171,"        iMillis = checkInstant(converter.getInstantMillis(instant, chronology), iChronology);
",2,0,0,2,4,0,12,0,0,15,85,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,12,172,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,12,195,"        this(year, monthOfYear, dayOfMonth, hourOfDay,
",8,0,0,0,1,0,0,0,0,8,46,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,12,197,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,12,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,
",8,0,0,0,1,0,0,0,0,8,46,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,12,225,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,12,295,"        return iMillis;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,12,304,"        return iChronology;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,12,317,"        iMillis = checkInstant(instant, iChronology);
",2,0,0,1,2,0,6,0,0,9,45,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,12,318,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,12,329,"        iChronology = checkChronology(chronology);
",2,0,0,1,2,0,4,0,0,7,42,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,12,330,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,2092,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,2093,"            iInstant = instant;
",4,0,0,0,0,0,0,0,0,5,19,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,2094,"            iField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,2095,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,2101,"            oos.writeObject(iInstant);
",0,0,0,1,2,0,6,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,2102,"            oos.writeObject(iField.getType());
",0,0,0,2,4,0,8,0,0,8,34,6,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,2103,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,2109,"            iInstant = (LocalDateTime) oos.readObject();
",2,0,0,2,4,0,4,2,0,9,44,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,2110,"            DateTimeFieldType type = (DateTimeFieldType) oos.readObject();
",2,0,0,2,4,0,4,4,0,10,62,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,2111,"            iField = type.getField(iInstant.getChronology());
",2,0,0,2,4,0,8,0,0,11,49,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,2112,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,2121,"            return iField;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,2130,"            return iInstant.getLocalMillis();
",0,0,0,1,2,1,4,0,0,4,33,6,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,2140,"            return iInstant.getChronology();
",0,0,0,1,2,1,4,0,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,2149,"            return iInstant;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,2163,"            return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));
",0,0,0,3,6,1,14,0,0,14,78,6,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,2176,"            return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));
",0,0,0,3,6,1,14,0,0,14,78,6,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,2191,"            return iInstant.withLocalMillis(iField.addWrapField(iInstant.getLocalMillis(), value));
",0,0,0,3,6,1,14,0,0,14,87,6,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,2205,"            return iInstant.withLocalMillis(iField.set(iInstant.getLocalMillis(), value));
",0,0,0,3,6,1,14,0,0,14,78,6,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,2219,"            return iInstant.withLocalMillis(iField.set(iInstant.getLocalMillis(), text, locale));
",0,0,0,3,6,1,16,0,0,16,85,6,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,2232,"            return setCopy(text, null);
",0,0,0,1,2,1,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,2251,"            return setCopy(getMaximumValue());
",0,0,0,2,4,1,4,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,2263,"            return setCopy(getMinimumValue());
",0,0,0,2,4,1,4,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,2278,"            return iInstant.withLocalMillis(iField.roundFloor(iInstant.getLocalMillis()));
",0,0,0,3,6,1,12,0,0,12,78,6,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,2292,"            return iInstant.withLocalMillis(iField.roundCeiling(iInstant.getLocalMillis()));
",0,0,0,3,6,1,12,0,0,12,80,6,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,2302,"            return iInstant.withLocalMillis(iField.roundHalfFloor(iInstant.getLocalMillis()));
",0,0,0,3,6,1,12,0,0,12,82,6,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,2312,"            return iInstant.withLocalMillis(iField.roundHalfCeiling(iInstant.getLocalMillis()));
",0,0,0,3,6,1,12,0,0,12,84,6,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,2323,"            return iInstant.withLocalMillis(iField.roundHalfEven(iInstant.getLocalMillis()));
",0,0,0,3,6,1,12,0,0,12,81,6,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,258,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());
",0,0,0,3,6,0,8,0,0,8,69,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,259,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,272,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));
",0,0,0,3,6,0,10,0,0,10,73,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,273,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,286,"        this(DateTimeUtils.currentTimeMillis(), chronology);
",2,0,0,2,4,0,4,0,0,6,52,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,287,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,299,"        this(instant, ISOChronology.getInstance());
",2,0,0,2,4,0,4,0,0,6,43,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,300,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,313,"        this(instant, ISOChronology.getInstance(zone));
",2,0,0,2,4,0,6,0,0,8,47,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,314,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,326,"    public LocalDateTime(long instant, Chronology chronology) {
",6,0,0,1,3,1,0,2,0,9,59,2,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,327,"        chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,329,"        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);
",6,0,0,2,4,0,8,0,0,14,86,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,330,"        iLocalMillis = localMillis;
",4,0,0,0,0,0,0,0,0,5,27,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,331,"        iChronology = chronology.withUTC();
",2,0,0,1,2,0,4,0,0,7,35,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,332,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,352,"        this(instant, (Chronology) null);
",2,0,0,2,4,0,0,2,0,4,33,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,353,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,373,"    public LocalDateTime(Object instant, DateTimeZone zone) {
",6,0,0,1,3,1,0,4,0,11,57,2,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,374,"        PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);
",2,0,0,2,4,0,8,2,0,12,89,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,375,"        Chronology chronology = converter.getChronology(instant, zone);
",2,0,0,1,2,0,8,2,0,12,63,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,376,"        chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,377,"        iChronology = chronology.withUTC();
",2,0,0,1,2,0,4,0,0,7,35,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,378,"        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.localDateOptionalTimeParser());
",2,0,0,3,6,0,12,0,0,14,118,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,379,"        iLocalMillis = iChronology.getDateTimeMillis(values[0], values[1], values[2], values[3]);
",2,0,1,5,10,0,4,0,0,15,89,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,380,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,399,"    public LocalDateTime(Object instant, Chronology chronology) {
",6,0,0,1,3,1,0,4,0,11,61,2,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,400,"        PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);
",2,0,0,2,4,0,8,2,0,12,89,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,401,"        chronology = converter.getChronology(instant, chronology);
",2,0,0,1,2,0,8,0,0,11,58,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,402,"        chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,403,"        iChronology = chronology.withUTC();
",2,0,0,1,2,0,4,0,0,7,35,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,404,"        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.localDateOptionalTimeParser());
",2,0,0,3,6,0,12,0,0,14,118,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,405,"        iLocalMillis = iChronology.getDateTimeMillis(values[0], values[1], values[2], values[3]);
",2,0,1,5,10,0,4,0,0,15,89,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,406,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,425,"        this(year, monthOfYear, dayOfMonth, hourOfDay,
",8,0,0,0,1,0,0,0,0,8,46,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,427,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,447,"        this(year, monthOfYear, dayOfMonth, hourOfDay,
",8,0,0,0,1,0,0,0,0,8,46,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,449,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,111,"        return new LocalDateTime();
",0,0,0,1,2,1,0,2,0,2,27,6,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,124,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,125,"            throw new NullPointerException(""Zone must not be null"");
",0,0,0,1,2,0,0,2,0,4,56,6,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,127,"        return new LocalDateTime(zone);
",2,0,0,1,2,1,0,2,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,140,"        if (chronology == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,141,"            throw new NullPointerException(""Chronology must not be null"");
",0,0,0,1,2,0,0,2,0,4,62,6,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,143,"        return new LocalDateTime(chronology);
",2,0,0,1,2,1,0,2,0,4,37,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,157,"        return parse(str, ISODateTimeFormat.localDateOptionalTimeParser());
",0,0,0,2,4,1,8,0,0,8,67,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,168,"        return formatter.parseLocalDateTime(str);
",0,0,0,1,2,1,6,0,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,197,"            throw new IllegalArgumentException(""The calendar must not be null"");
",0,0,0,1,2,0,0,2,0,4,68,6,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,234,"            throw new IllegalArgumentException(""The date must not be null"");
",0,0,0,1,2,0,0,2,0,4,64,6,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,512,"        if (iChronology == null) {
",2,1,0,1,3,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,513,"            return new LocalDateTime(iLocalMillis, ISOChronology.getInstanceUTC());
",2,0,0,2,4,1,4,2,0,8,71,7,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,515,"        if (DateTimeZone.UTC.equals(iChronology.getZone()) == false) {
",4,1,0,3,7,0,6,0,0,12,62,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,516,"            return new LocalDateTime(iLocalMillis, iChronology.withUTC());
",2,0,0,2,4,1,4,2,0,8,62,7,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,518,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,552,"                throw new IndexOutOfBoundsException(""Invalid index: "" + index);
",2,1,0,1,2,0,0,2,0,6,63,6,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,577,"                throw new IndexOutOfBoundsException(""Invalid index: "" + index);
",2,1,0,1,2,0,0,2,0,6,63,6,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,598,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");
",0,0,0,1,2,0,0,2,0,4,77,6,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,613,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,626,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,627,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,629,"        return type.getField(getChronology()).isSupported();
",0,0,0,3,6,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,664,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,672,"        return super.equals(partial);
",4,0,0,1,2,1,0,0,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,693,"        if (this == partial) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,694,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,696,"        if (partial instanceof LocalDateTime) {
",2,0,0,1,3,0,0,2,0,4,39,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,697,"            LocalDateTime other = (LocalDateTime) partial;
",4,0,0,1,2,0,0,4,0,8,46,6,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,698,"            if (iChronology.equals(other.iChronology)) {
",4,0,0,2,5,0,4,0,0,8,44,7,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,699,"                return (iLocalMillis < other.iLocalMillis ? -1 :
",6,1,0,0,1,1,0,0,0,8,48,10,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,704,"        return super.compareTo(partial);
",4,0,0,1,2,1,0,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,717,"        return toDateTime((DateTimeZone) null);
",0,0,0,2,4,1,2,2,0,5,39,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,730,"        zone = DateTimeUtils.getZone(zone);
",2,0,0,1,2,0,6,0,0,9,35,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,731,"        Chronology chrono = iChronology.withZone(zone);
",2,0,0,1,2,0,6,2,0,10,47,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,732,"        return new DateTime(
",0,0,0,0,1,1,0,2,0,2,20,6,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,745,"        return new LocalDate(getLocalMillis(), getChronology());
",0,0,0,3,6,1,4,2,0,6,56,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,754,"        return new LocalTime(getLocalMillis(), getChronology());
",0,0,0,3,6,1,4,2,0,6,56,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,777,"        int dom = getDayOfMonth();
",2,0,0,1,2,0,2,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,778,"        Date date = new Date(getYear() - 1900, getMonthOfYear() - 1, dom,
",4,2,0,2,5,0,4,4,0,14,65,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,780,"        date.setTime(date.getTime() + getMillisOfSecond());
",0,1,0,3,6,0,10,0,0,11,51,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,781,"        LocalDateTime check = LocalDateTime.fromDateFields(date);
",2,0,0,1,2,0,6,2,0,10,57,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,782,"        if (check.isBefore(this)) {
",0,0,0,2,5,0,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,785,"            while (check.isBefore(this)) {
",0,0,0,2,5,0,4,0,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,786,"                date.setTime(date.getTime() + 60000);
",0,1,0,2,4,0,8,0,0,9,37,9,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,787,"                check = LocalDateTime.fromDateFields(date);
",2,0,0,1,2,0,6,0,0,9,43,8,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,790,"            while (check.isBefore(this) == false) {
",0,1,0,2,5,0,4,0,0,6,39,6,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,791,"                date.setTime(date.getTime() - 1000);
",0,1,0,2,4,0,8,0,0,9,36,9,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,792,"                check = LocalDateTime.fromDateFields(date);
",2,0,0,1,2,0,6,0,0,9,43,8,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,794,"            date.setTime(date.getTime() + 1000);
",0,1,0,2,4,0,8,0,0,9,36,7,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,795,"        } else if (check.equals(this)) {
",0,0,0,2,6,0,4,0,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,797,"            Date earlier = new Date(date.getTime() - TimeZone.getDefault().getDSTSavings());
",2,1,0,4,8,0,10,4,0,17,80,7,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,798,"            check = LocalDateTime.fromDateFields(earlier);
",2,0,0,1,2,0,6,0,0,9,46,7,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,799,"            if (check.equals(this)) {
",0,0,0,2,5,0,4,0,0,4,25,8,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,800,"                date = earlier;
",4,0,0,0,0,0,0,0,0,5,15,9,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,803,"        return date;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,818,"        return (newMillis == getLocalMillis() ? this : new LocalDateTime(newMillis, getChronology()));
",4,1,0,4,8,1,4,2,0,11,94,6,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,840,"        Chronology chrono = getChronology();
",2,0,0,1,2,0,2,2,0,6,36,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,841,"        long instant = getLocalMillis();
",2,0,0,1,2,0,2,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,842,"        instant = chrono.year().set(instant, year);
",2,0,0,2,4,0,10,0,0,13,43,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,843,"        instant = chrono.monthOfYear().set(instant, monthOfYear);
",2,0,0,2,4,0,10,0,0,13,57,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,844,"        instant = chrono.dayOfMonth().set(instant, dayOfMonth);
",2,0,0,2,4,0,10,0,0,13,55,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,845,"        return withLocalMillis(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,867,"        Chronology chrono = getChronology();
",2,0,0,1,2,0,2,2,0,6,36,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,868,"        long instant = getLocalMillis();
",2,0,0,1,2,0,2,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,869,"        instant = chrono.hourOfDay().set(instant, hourOfDay);
",2,0,0,2,4,0,10,0,0,13,53,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,870,"        instant = chrono.minuteOfHour().set(instant, minuteOfHour);
",2,0,0,2,4,0,10,0,0,13,59,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,871,"        instant = chrono.secondOfMinute().set(instant, secondOfMinute);
",2,0,0,2,4,0,10,0,0,13,63,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,872,"        instant = chrono.millisOfSecond().set(instant, millisOfSecond);
",2,0,0,2,4,0,10,0,0,13,63,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,873,"        return withLocalMillis(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,890,"        if (partial == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,891,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,893,"        return withLocalMillis(getChronology().set(partial, getLocalMillis()));
",0,0,0,4,8,1,10,0,0,10,71,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,916,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,917,"            throw new IllegalArgumentException(""Field must not be null"");
",0,0,0,1,2,0,0,2,0,4,61,6,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,919,"        long instant = fieldType.getField(getChronology()).set(getLocalMillis(), value);
",2,0,0,4,8,0,12,0,0,14,80,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,920,"        return withLocalMillis(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,943,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,944,"            throw new IllegalArgumentException(""Field must not be null"");
",0,0,0,1,2,0,0,2,0,4,61,6,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,946,"        if (amount == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,947,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,949,"        long instant = fieldType.getField(getChronology()).add(getLocalMillis(), amount);
",2,0,0,4,8,0,12,0,0,14,81,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,950,"        return withLocalMillis(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,965,"        if (durationToAdd == null || scalar == 0) {
",4,3,0,1,3,0,0,0,0,7,43,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,966,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,968,"        long instant = getChronology().add(getLocalMillis(), durationToAdd.getMillis(), scalar);
",2,0,0,4,8,0,12,0,0,14,88,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,969,"        return withLocalMillis(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,988,"        if (period == null || scalar == 0) {
",4,3,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,989,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,991,"        long instant = getChronology().add(period, getLocalMillis(), scalar);
",2,0,0,3,6,0,10,0,0,12,69,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,992,"        return withLocalMillis(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1006,"        return withDurationAdded(duration, 1);
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1023,"        return withPeriodAdded(period, 1);
",0,0,0,1,2,1,4,0,0,4,34,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1043,"        if (years == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1044,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1046,"        long instant = getChronology().years().add(getLocalMillis(), years);
",2,0,0,4,8,0,10,0,0,12,68,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1047,"        return withLocalMillis(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1066,"        if (months == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1067,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1069,"        long instant = getChronology().months().add(getLocalMillis(), months);
",2,0,0,4,8,0,10,0,0,12,70,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1070,"        return withLocalMillis(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1089,"        if (weeks == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1090,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1092,"        long instant = getChronology().weeks().add(getLocalMillis(), weeks);
",2,0,0,4,8,0,10,0,0,12,68,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1093,"        return withLocalMillis(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1112,"        if (days == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1113,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1115,"        long instant = getChronology().days().add(getLocalMillis(), days);
",2,0,0,4,8,0,10,0,0,12,66,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1116,"        return withLocalMillis(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1136,"        if (hours == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1137,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1139,"        long instant = getChronology().hours().add(getLocalMillis(), hours);
",2,0,0,4,8,0,10,0,0,12,68,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1140,"        return withLocalMillis(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1159,"        if (minutes == 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1160,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1162,"        long instant = getChronology().minutes().add(getLocalMillis(), minutes);
",2,0,0,4,8,0,10,0,0,12,72,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1163,"        return withLocalMillis(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1182,"        if (seconds == 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1183,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1185,"        long instant = getChronology().seconds().add(getLocalMillis(), seconds);
",2,0,0,4,8,0,10,0,0,12,72,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1186,"        return withLocalMillis(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1205,"        if (millis == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1206,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1208,"        long instant = getChronology().millis().add(getLocalMillis(), millis);
",2,0,0,4,8,0,10,0,0,12,70,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1209,"        return withLocalMillis(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1223,"        return withDurationAdded(duration, -1);
",0,0,0,1,2,1,4,0,0,5,39,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1240,"        return withPeriodAdded(period, -1);
",0,0,0,1,2,1,4,0,0,5,35,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1260,"        if (years == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1261,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1263,"        long instant = getChronology().years().subtract(getLocalMillis(), years);
",2,0,0,4,8,0,10,0,0,12,73,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1264,"        return withLocalMillis(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1283,"        if (months == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1284,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1286,"        long instant = getChronology().months().subtract(getLocalMillis(), months);
",2,0,0,4,8,0,10,0,0,12,75,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1287,"        return withLocalMillis(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1306,"        if (weeks == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1307,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1309,"        long instant = getChronology().weeks().subtract(getLocalMillis(), weeks);
",2,0,0,4,8,0,10,0,0,12,73,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1310,"        return withLocalMillis(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1329,"        if (days == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1330,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1332,"        long instant = getChronology().days().subtract(getLocalMillis(), days);
",2,0,0,4,8,0,10,0,0,12,71,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1333,"        return withLocalMillis(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1353,"        if (hours == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1354,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1356,"        long instant = getChronology().hours().subtract(getLocalMillis(), hours);
",2,0,0,4,8,0,10,0,0,12,73,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1357,"        return withLocalMillis(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1376,"        if (minutes == 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1377,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1379,"        long instant = getChronology().minutes().subtract(getLocalMillis(), minutes);
",2,0,0,4,8,0,10,0,0,12,77,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1380,"        return withLocalMillis(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1399,"        if (seconds == 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1400,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1402,"        long instant = getChronology().seconds().subtract(getLocalMillis(), seconds);
",2,0,0,4,8,0,10,0,0,12,77,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1403,"        return withLocalMillis(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1422,"        if (millis == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1423,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1425,"        long instant = getChronology().millis().subtract(getLocalMillis(), millis);
",2,0,0,4,8,0,10,0,0,12,75,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1426,"        return withLocalMillis(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1439,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1440,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");
",0,0,0,1,2,0,0,2,0,4,77,6,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1442,"        if (isSupported(fieldType) == false) {
",0,1,0,2,5,0,4,0,0,6,38,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1443,"            throw new IllegalArgumentException(""Field '"" + fieldType + ""' is not supported"");
",2,1,0,1,2,0,0,2,0,7,81,7,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1445,"        return new Property(this, fieldType.getField(getChronology()));
",0,0,0,3,6,1,6,2,0,8,63,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1455,"        return getChronology().era().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1464,"        return getChronology().centuryOfEra().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,60,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1473,"        return getChronology().yearOfEra().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,57,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1482,"        return getChronology().yearOfCentury().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,61,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1491,"        return getChronology().year().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1506,"        return getChronology().weekyear().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,56,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1515,"        return getChronology().monthOfYear().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,59,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1529,"        return getChronology().weekOfWeekyear().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,62,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1538,"        return getChronology().dayOfYear().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,57,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1549,"        return getChronology().dayOfMonth().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,58,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1560,"        return getChronology().dayOfWeek().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,57,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1570,"        return getChronology().hourOfDay().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,57,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1579,"        return getChronology().minuteOfHour().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,60,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1588,"        return getChronology().secondOfMinute().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,62,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1597,"        return getChronology().millisOfSecond().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,62,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1606,"        return getChronology().millisOfDay().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,59,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1622,"        return withLocalMillis(getChronology().era().set(getLocalMillis(), era));
",0,0,0,5,10,1,12,0,0,12,73,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1637,"        return withLocalMillis(getChronology().centuryOfEra().set(getLocalMillis(), centuryOfEra));
",0,0,0,5,10,1,12,0,0,12,91,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1652,"        return withLocalMillis(getChronology().yearOfEra().set(getLocalMillis(), yearOfEra));
",0,0,0,5,10,1,12,0,0,12,85,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1667,"        return withLocalMillis(getChronology().yearOfCentury().set(getLocalMillis(), yearOfCentury));
",0,0,0,5,10,1,12,0,0,12,93,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1682,"        return withLocalMillis(getChronology().year().set(getLocalMillis(), year));
",0,0,0,5,10,1,12,0,0,12,75,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1703,"        return withLocalMillis(getChronology().weekyear().set(getLocalMillis(), weekyear));
",0,0,0,5,10,1,12,0,0,12,83,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1718,"        return withLocalMillis(getChronology().monthOfYear().set(getLocalMillis(), monthOfYear));
",0,0,0,5,10,1,12,0,0,12,89,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1738,"        return withLocalMillis(getChronology().weekOfWeekyear().set(getLocalMillis(), weekOfWeekyear));
",0,0,0,5,10,1,12,0,0,12,95,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1753,"        return withLocalMillis(getChronology().dayOfYear().set(getLocalMillis(), dayOfYear));
",0,0,0,5,10,1,12,0,0,12,85,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1768,"        return withLocalMillis(getChronology().dayOfMonth().set(getLocalMillis(), dayOfMonth));
",0,0,0,5,10,1,12,0,0,12,87,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1783,"        return withLocalMillis(getChronology().dayOfWeek().set(getLocalMillis(), dayOfWeek));
",0,0,0,5,10,1,12,0,0,12,85,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1799,"        return withLocalMillis(getChronology().hourOfDay().set(getLocalMillis(), hour));
",0,0,0,5,10,1,12,0,0,12,80,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1814,"        return withLocalMillis(getChronology().minuteOfHour().set(getLocalMillis(), minute));
",0,0,0,5,10,1,12,0,0,12,85,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1829,"        return withLocalMillis(getChronology().secondOfMinute().set(getLocalMillis(), second));
",0,0,0,5,10,1,12,0,0,12,87,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1844,"        return withLocalMillis(getChronology().millisOfSecond().set(getLocalMillis(), millis));
",0,0,0,5,10,1,12,0,0,12,87,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1859,"        return withLocalMillis(getChronology().millisOfDay().set(getLocalMillis(), millis));
",0,0,0,5,10,1,12,0,0,12,84,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1869,"        return new Property(this, getChronology().era());
",0,0,0,3,6,1,4,2,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1878,"        return new Property(this, getChronology().centuryOfEra());
",0,0,0,3,6,1,4,2,0,6,58,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1887,"        return new Property(this, getChronology().yearOfCentury());
",0,0,0,3,6,1,4,2,0,6,59,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1896,"        return new Property(this, getChronology().yearOfEra());
",0,0,0,3,6,1,4,2,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1905,"        return new Property(this, getChronology().year());
",0,0,0,3,6,1,4,2,0,6,50,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1914,"        return new Property(this, getChronology().weekyear());
",0,0,0,3,6,1,4,2,0,6,54,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1923,"        return new Property(this, getChronology().monthOfYear());
",0,0,0,3,6,1,4,2,0,6,57,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1932,"        return new Property(this, getChronology().weekOfWeekyear());
",0,0,0,3,6,1,4,2,0,6,60,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1941,"        return new Property(this, getChronology().dayOfYear());
",0,0,0,3,6,1,4,2,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1950,"        return new Property(this, getChronology().dayOfMonth());
",0,0,0,3,6,1,4,2,0,6,56,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1959,"        return new Property(this, getChronology().dayOfWeek());
",0,0,0,3,6,1,4,2,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1969,"        return new Property(this, getChronology().hourOfDay());
",0,0,0,3,6,1,4,2,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1978,"        return new Property(this, getChronology().minuteOfHour());
",0,0,0,3,6,1,4,2,0,6,58,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1987,"        return new Property(this, getChronology().secondOfMinute());
",0,0,0,3,6,1,4,2,0,6,60,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,1996,"        return new Property(this, getChronology().millisOfSecond());
",0,0,0,3,6,1,4,2,0,6,60,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,2005,"        return new Property(this, getChronology().millisOfDay());
",0,0,0,3,6,1,4,2,0,6,57,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,2026,"        if (pattern == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,2027,"            return toString();
",0,0,0,1,2,1,2,0,0,2,18,7,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,2029,"        return DateTimeFormat.forPattern(pattern).print(this);
",0,0,0,2,4,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,2040,"        if (pattern == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,2041,"            return toString();
",0,0,0,1,2,1,2,0,0,2,18,7,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,2043,"        return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);
",0,0,0,3,6,1,12,0,0,12,73,5,0.00000,0
defect4j,time,org/joda/time/LocalDateTime,12,80,"public final class LocalDateTime
",2,0,0,0,0,2,0,0,0,4,32,1,0.00000,0
defect4j,time,org/joda/time/DurationField,12,209,"        if (value == Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/DurationField,12,210,"            return subtract(instant, (long) value);
",2,0,0,2,4,1,4,0,0,6,39,7,0.00000,0
defect4j,time,org/joda/time/DurationField,12,212,"        return add(instant, -value);
",2,0,0,1,2,1,4,0,0,7,28,5,0.00000,0
defect4j,time,org/joda/time/DurationField,12,224,"        if (value == Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,30,4,0.00000,0
defect4j,time,org/joda/time/DurationField,12,225,"            throw new ArithmeticException(""Long.MIN_VALUE cannot be negated"");
",0,0,0,1,2,0,0,2,0,3,66,7,0.00000,0
defect4j,time,org/joda/time/DurationField,12,227,"        return add(instant, -value);
",2,0,0,1,2,1,4,0,0,7,28,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,73,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,74,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,64,"        } catch (RuntimeException ex) {
",2,0,0,1,4,0,0,2,0,4,31,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,86,"        return cMillisProvider.getMillis();
",0,0,0,1,2,1,4,0,0,4,35,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,127,"        checkPermission();
",0,0,0,1,2,0,2,0,0,2,18,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,128,"        if (offsetMillis == 0) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,129,"            cMillisProvider = SYSTEM_MILLIS_PROVIDER;
",4,0,0,0,0,0,0,0,0,5,41,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,131,"            cMillisProvider = new OffsetMillisProvider(offsetMillis);
",4,0,0,1,2,0,0,2,0,7,57,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,133,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,146,"        if (millisProvider == null) {
",2,1,0,1,3,0,0,0,0,3,29,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,147,"            throw new IllegalArgumentException(""The MillisProvider must not be null"");
",0,0,0,1,2,0,0,2,0,4,74,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,149,"        checkPermission();
",0,0,0,1,2,0,2,0,0,2,18,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,150,"        cMillisProvider = millisProvider;
",4,0,0,0,0,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,151,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,161,"            sm.checkPermission(new JodaTimePermission(""CurrentTime.setProvider""));
",0,0,0,2,4,0,4,2,0,7,70,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,176,"        if (instant == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,177,"            return DateTimeUtils.currentTimeMillis();
",0,0,0,1,2,1,4,0,0,4,41,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,179,"        return instant.getMillis();
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,194,"        if (instant == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,195,"            return ISOChronology.getInstance();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,197,"        Chronology chrono = instant.getChronology();
",2,0,0,1,2,0,4,2,0,8,44,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,198,"        if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,199,"            return ISOChronology.getInstance();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,201,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,217,"        Chronology chrono = null;
",2,0,0,0,0,0,0,2,0,4,25,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,218,"        if (start != null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,219,"            chrono = start.getChronology();
",2,0,0,1,2,0,4,0,0,7,31,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,220,"        } else if (end != null) {
",2,1,0,1,4,0,0,0,0,3,25,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,221,"            chrono = end.getChronology();
",2,0,0,1,2,0,4,0,0,7,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,223,"        if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,224,"            chrono = ISOChronology.getInstance();
",2,0,0,1,2,0,4,0,0,7,37,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,226,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,241,"        if (interval == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,242,"            return ISOChronology.getInstance();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,244,"        Chronology chrono = interval.getChronology();
",2,0,0,1,2,0,4,2,0,8,45,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,245,"        if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,246,"            return ISOChronology.getInstance();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,248,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,264,"        if (interval == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,265,"            long now = DateTimeUtils.currentTimeMillis();
",2,0,0,1,2,0,4,0,0,6,45,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,266,"            interval = new Interval(now, now);
",6,0,0,1,2,0,0,2,0,9,34,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,268,"        return interval;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,283,"            return ISOChronology.getInstance();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,300,"            return DateTimeZone.getDefault();
",0,0,0,1,2,1,4,0,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,316,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,317,"            return PeriodType.standard();
",0,0,0,1,2,1,4,0,0,4,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,319,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,333,"        if (duration == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,334,"            return 0L;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,336,"        return duration.getMillis();
",0,0,0,1,2,1,4,0,0,4,28,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,364,"        if (partial == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,365,"            throw new IllegalArgumentException(""Partial must not be null"");
",0,0,0,1,2,0,0,2,0,4,63,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,367,"        DurationFieldType lastType = null;
",2,0,0,0,0,0,0,2,0,4,34,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,368,"        for (int i = 0; i < partial.size(); i++) {
",6,1,0,2,5,0,4,0,0,12,42,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,369,"            DateTimeField loopField = partial.getField(i);
",2,0,0,1,2,0,6,2,0,10,46,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,370,"            if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,371,"                if (loopField.getRangeDurationField().getType() != lastType) {
",2,1,0,3,7,0,6,0,0,9,62,8,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,372,"                    return false;
",0,0,0,0,0,1,0,0,0,1,13,10,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,375,"            lastType = loopField.getDurationField().getType();
",2,0,0,2,4,0,6,0,0,9,50,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,377,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,395,"            Method method = DateFormatSymbols.class.getMethod(""getInstance"", new Class[] {Locale.class});
",2,0,0,3,6,0,2,8,0,13,93,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,396,"            return (DateFormatSymbols) method.invoke(null, new Object[] {locale});
",2,0,0,4,8,1,4,4,0,10,70,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,397,"        } catch (Exception ex) {
",2,0,0,1,4,0,0,2,0,4,24,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,398,"            return new DateFormatSymbols(locale);
",2,0,0,1,2,1,0,2,0,4,37,8,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,412,"        return cZoneNames;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,424,"        cZoneNames = Collections.unmodifiableMap(new HashMap<String, DateTimeZone>(names));
",4,0,0,2,4,0,4,6,0,15,83,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,425,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,451,"        double epochDay = epochMillis / 86400000d;
",4,1,0,0,0,0,0,0,0,5,42,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,452,"        return epochDay + 2440587.5d;
",2,1,0,0,0,1,0,0,0,3,29,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,471,"        return (long) Math.floor(toJulianDay(epochMillis) + 0.5d);
",0,1,0,3,6,1,8,0,0,9,58,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,484,"        double epochDay = julianDay - 2440587.5d;
",4,1,0,0,0,0,0,0,0,5,41,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,485,"        return (long) (epochDay * 86400000d);
",2,1,0,2,4,1,0,0,0,3,37,6,0.00000,0
defect4j,time,org/joda/time/JodaTimePermission,12,57,"        super(name);
",2,0,0,1,2,0,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/JodaTimePermission,12,58,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,86,"        return getInstance(DateTimeZone.getDefault());
",0,0,0,2,4,1,6,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,96,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,97,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,99,"        int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);
",4,2,0,2,4,0,6,0,0,12,66,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,100,"        ISOChronology chrono = cFastCache[index];
",2,0,1,1,2,0,0,2,0,8,41,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,101,"        if (chrono != null && chrono.getZone() == zone) {
",4,3,0,2,5,0,4,0,0,11,49,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,102,"            return chrono;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,104,"        synchronized (cCache) {
",2,0,0,1,3,0,0,0,0,2,23,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,105,"            chrono = cCache.get(zone);
",2,0,0,1,2,0,6,0,0,9,26,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,106,"            if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,107,"                chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));
",2,0,0,2,4,0,8,2,0,13,76,8,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,108,"                cCache.put(zone, chrono);
",0,0,0,1,2,0,8,0,0,8,25,9,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,110,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,111,"        cFastCache[index] = chrono;
",2,0,1,1,2,0,0,0,0,7,27,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,112,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,143,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,144,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,146,"        if (zone == getZone()) {
",2,1,0,2,5,0,2,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,147,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,149,"        return getInstance(zone);
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,160,"        String str = ""ISOChronology"";
",2,0,0,0,0,0,0,2,0,5,29,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,161,"        DateTimeZone zone = getZone();
",2,0,0,1,2,0,2,2,0,6,30,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,162,"        if (zone != null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,163,"            str = str + '[' + zone.getID() + ']';
",4,1,0,2,4,0,4,0,0,12,37,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,165,"        return str;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,200,"        return ""ISO"".hashCode() * 11 + getZone().hashCode();
",0,2,0,3,6,1,6,0,0,9,52,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,208,"        return new Stub(getZone());
",0,0,0,2,4,1,2,2,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,107,"        if ((base = iBase) != null) {
",4,1,0,2,5,0,0,0,0,6,29,4,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,108,"            return base.getZone();
",0,0,0,1,2,1,4,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,110,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,122,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);
",10,0,0,1,2,1,0,0,0,10,75,5,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,146,"        if ((base = iBase) != null && (iBaseFlags & 1) == 1) {
",6,4,0,3,7,0,0,0,0,11,54,4,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,148,"            return base.getDateTimeMillis
",0,0,0,0,0,1,4,0,0,4,29,7,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,151,"        return super.getDateTimeMillis
",2,0,0,0,0,1,0,0,0,2,30,5,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,389,"        in.defaultReadObject();
",0,0,0,1,2,0,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,390,"        setFields();
",0,0,0,1,2,0,2,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,391,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,102,"        long instant = year().set(0, year);
",2,0,0,2,4,0,6,0,0,8,35,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,103,"        instant = monthOfYear().set(instant, monthOfYear);
",2,0,0,2,4,0,8,0,0,11,50,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,104,"        instant = dayOfMonth().set(instant, dayOfMonth);
",2,0,0,2,4,0,8,0,0,11,48,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,105,"        return millisOfDay().set(instant, millisOfDay);
",0,0,0,2,4,1,8,0,0,8,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,163,"        instant = hourOfDay().set(instant, hourOfDay);
",2,0,0,2,4,0,8,0,0,11,46,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,164,"        instant = minuteOfHour().set(instant, minuteOfHour);
",2,0,0,2,4,0,8,0,0,11,52,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,165,"        instant = secondOfMinute().set(instant, secondOfMinute);
",2,0,0,2,4,0,8,0,0,11,56,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,166,"        return millisOfSecond().set(instant, millisOfSecond);
",0,0,0,2,4,1,8,0,0,8,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,183,"        int size = partial.size();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,184,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,185,"            int value = values[i];
",2,0,1,1,2,0,0,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,186,"            DateTimeField field = partial.getField(i);
",2,0,0,1,2,0,6,2,0,10,42,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,187,"            if (value < field.getMinimumValue()) {
",2,1,0,2,5,0,4,0,0,7,38,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,188,"                throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,192,"            if (value > field.getMaximumValue()) {
",2,1,0,2,5,0,4,0,0,7,38,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,193,"                throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,199,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,200,"            int value = values[i];
",2,0,1,1,2,0,0,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,201,"            DateTimeField field = partial.getField(i);
",2,0,0,1,2,0,6,2,0,10,42,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,202,"            if (value < field.getMinimumValue(partial, values)) {
",2,1,0,2,5,0,8,0,0,11,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,203,"                throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,207,"            if (value > field.getMaximumValue(partial, values)) {
",2,1,0,2,5,0,8,0,0,11,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,208,"                throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,213,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,223,"        int size = partial.size();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,224,"        int[] values = new int[size];
",2,0,1,2,4,0,0,0,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,225,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,226,"            values[i] = partial.getFieldType(i).getField(this).get(instant);
",0,0,1,4,8,0,12,0,0,17,64,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,228,"        return values;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,255,"        int size = period.size();
",2,0,0,1,2,0,4,0,0,6,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,256,"        int[] values = new int[size];
",2,0,1,2,4,0,0,0,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,257,"        if (startInstant != endInstant) {
",4,1,0,1,3,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,258,"            for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,259,"                DurationField field = period.getFieldType(i).getField(this);
",2,0,0,2,4,0,8,2,0,12,60,8,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,260,"                int value = field.getDifference(endInstant, startInstant);
",2,0,0,1,2,0,8,0,0,10,58,9,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,261,"                startInstant = field.add(startInstant, value);
",2,0,0,1,2,0,8,0,0,11,46,8,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,262,"                values[i] = value;
",2,0,1,1,2,0,0,0,0,7,18,8,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,265,"        return values;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,276,"        int size = period.size();
",2,0,0,1,2,0,4,0,0,6,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,277,"        int[] values = new int[size];
",2,0,1,2,4,0,0,0,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,278,"        if (duration != 0) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,279,"            long current = 0;
",2,0,0,0,0,0,0,0,0,2,17,7,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,280,"            for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,281,"                DurationField field = period.getFieldType(i).getField(this);
",2,0,0,2,4,0,8,2,0,12,60,8,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,282,"                if (field.isPrecise()) {
",0,0,0,2,5,0,4,0,0,4,24,9,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,283,"                    int value = field.getDifference(duration, current);
",2,0,0,1,2,0,8,0,0,10,51,11,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,284,"                    current = field.add(current, value);
",2,0,0,1,2,0,8,0,0,11,36,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,285,"                    values[i] = value;
",2,0,1,1,2,0,0,0,0,7,18,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,289,"        return values;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,301,"        if (scalar != 0 && period != null) {
",4,3,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,302,"            for (int i = 0, isize = period.size(); i < isize; i++) {
",10,1,0,2,5,0,4,0,0,16,56,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,303,"                long value = period.getValue(i); // use long to allow for multiplication (fits OK)
",2,0,0,2,4,0,6,0,0,8,82,9,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,304,"                if (value != 0) {
",2,1,0,1,3,0,0,0,0,3,17,8,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,305,"                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);
",6,1,0,3,6,0,12,0,0,20,77,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,309,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,322,"        if (duration == 0 || scalar == 0) {
",4,3,0,1,3,0,0,0,0,7,35,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,323,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,325,"        long add = FieldUtils.safeMultiply(duration, scalar);
",2,0,0,1,2,0,8,0,0,10,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,326,"        return FieldUtils.safeAdd(instant, add);
",0,0,0,1,2,1,8,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,337,"        return UnsupportedDurationField.getInstance(DurationFieldType.millis());
",0,0,0,2,4,1,8,0,0,8,72,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,346,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfSecond(), millis());
",0,0,0,3,6,1,10,0,0,10,90,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,355,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfDay(), millis());
",0,0,0,3,6,1,10,0,0,10,87,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,366,"        return UnsupportedDurationField.getInstance(DurationFieldType.seconds());
",0,0,0,2,4,1,8,0,0,8,73,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,375,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfMinute(), seconds());
",0,0,0,3,6,1,10,0,0,10,91,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,384,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfDay(), seconds());
",0,0,0,3,6,1,10,0,0,10,88,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,395,"        return UnsupportedDurationField.getInstance(DurationFieldType.minutes());
",0,0,0,2,4,1,8,0,0,8,73,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,404,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfHour(), minutes());
",0,0,0,3,6,1,10,0,0,10,89,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,413,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfDay(), minutes());
",0,0,0,3,6,1,10,0,0,10,88,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,424,"        return UnsupportedDurationField.getInstance(DurationFieldType.hours());
",0,0,0,2,4,1,8,0,0,8,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,433,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfDay(), hours());
",0,0,0,3,6,1,10,0,0,10,84,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,442,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfDay(), hours());
",0,0,0,3,6,1,10,0,0,10,89,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,453,"        return UnsupportedDurationField.getInstance(DurationFieldType.halfdays());
",0,0,0,2,4,1,8,0,0,8,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,462,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfHalfday(), hours());
",0,0,0,3,6,1,10,0,0,10,88,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,471,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfHalfday(), hours());
",0,0,0,3,6,1,10,0,0,10,93,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,480,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.halfdayOfDay(), halfdays());
",0,0,0,3,6,1,10,0,0,10,90,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,491,"        return UnsupportedDurationField.getInstance(DurationFieldType.days());
",0,0,0,2,4,1,8,0,0,8,70,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,504,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfWeek(), days());
",0,0,0,3,6,1,10,0,0,10,83,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,513,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfMonth(), days());
",0,0,0,3,6,1,10,0,0,10,84,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,522,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfYear(), days());
",0,0,0,3,6,1,10,0,0,10,83,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,533,"        return UnsupportedDurationField.getInstance(DurationFieldType.weeks());
",0,0,0,2,4,1,8,0,0,8,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,542,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekOfWeekyear(), weeks());
",0,0,0,3,6,1,10,0,0,10,89,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,553,"        return UnsupportedDurationField.getInstance(DurationFieldType.weekyears());
",0,0,0,2,4,1,8,0,0,8,75,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,562,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyear(), weekyears());
",0,0,0,3,6,1,10,0,0,10,87,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,571,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyearOfCentury(), weekyears());
",0,0,0,3,6,1,10,0,0,10,96,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,582,"        return UnsupportedDurationField.getInstance(DurationFieldType.months());
",0,0,0,2,4,1,8,0,0,8,72,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,591,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.monthOfYear(), months());
",0,0,0,3,6,1,10,0,0,10,87,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,602,"        return UnsupportedDurationField.getInstance(DurationFieldType.years());
",0,0,0,2,4,1,8,0,0,8,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,611,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.year(), years());
",0,0,0,3,6,1,10,0,0,10,79,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,620,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfEra(), years());
",0,0,0,3,6,1,10,0,0,10,84,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,629,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfCentury(), years());
",0,0,0,3,6,1,10,0,0,10,88,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,640,"        return UnsupportedDurationField.getInstance(DurationFieldType.centuries());
",0,0,0,2,4,1,8,0,0,8,75,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,649,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.centuryOfEra(), centuries());
",0,0,0,3,6,1,10,0,0,10,91,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,12,669,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.era(), eras());
",0,0,0,3,6,1,10,0,0,10,77,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,691,"            throw new IllegalArgumentException(""Id must not be null"");
",0,0,0,1,2,0,0,2,0,4,58,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,145,"                        } catch (RuntimeException ex) {
",2,0,0,1,4,0,0,2,0,4,31,14,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,149,"                            temp = forTimeZone(TimeZone.getDefault());
",2,0,0,2,4,0,6,0,0,9,42,14,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,151,"                    } catch (IllegalArgumentException ex) {
",2,0,0,1,4,0,0,2,0,4,39,12,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,155,"                        temp = UTC;
",4,0,0,0,0,0,0,0,0,5,11,12,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,176,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setDefault""));
",0,0,0,2,4,0,4,2,0,7,70,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,179,"            throw new IllegalArgumentException(""The datetime zone must not be null"");
",0,0,0,1,2,0,0,2,0,4,73,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,205,"            return getDefault();
",0,0,0,1,2,1,2,0,0,2,20,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,208,"            return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,214,"        if (id.startsWith(""+"") || id.startsWith(""-"")) {
",0,1,0,3,7,0,8,0,0,11,47,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,215,"            int offset = parseOffset(id);
",2,0,0,1,2,0,4,0,0,6,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,216,"            if (offset == 0L) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,217,"                return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,219,"                id = printOffset(offset);
",2,0,0,1,2,0,4,0,0,7,25,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,220,"                return fixedOffsetZone(id, offset);
",0,0,0,1,2,1,6,0,0,6,35,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,223,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");
",2,1,0,1,2,0,0,2,0,7,90,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,237,"        return forOffsetHoursMinutes(hoursOffset, 0);
",0,0,0,1,2,1,4,0,0,4,45,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,254,"        if (hoursOffset == 0 && minutesOffset == 0) {
",4,3,0,1,3,0,0,0,0,7,45,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,255,"            return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,257,"        if (minutesOffset < 0 || minutesOffset > 59) {
",4,3,0,1,3,0,0,0,0,7,46,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,258,"            throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);
",2,1,0,1,2,0,0,2,0,6,77,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,260,"        int offset = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,262,"            int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);
",2,0,0,1,2,0,6,0,0,8,62,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,263,"            if (hoursInMinutes < 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,264,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);
",4,0,0,1,2,0,6,0,0,12,67,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,266,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);
",2,0,0,1,2,0,8,0,0,11,66,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,268,"            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
",6,0,0,1,2,0,6,0,0,13,85,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,271,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,269,"        } catch (ArithmeticException ex) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,270,"            throw new IllegalArgumentException(""Offset is too large"");
",0,0,0,1,2,0,0,2,0,3,58,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,272,"        return forOffsetMillis(offset);
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,282,"        String id = printOffset(millisOffset);
",2,0,0,1,2,0,4,2,0,8,38,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,283,"        return fixedOffsetZone(id, millisOffset);
",0,0,0,1,2,1,6,0,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,302,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,303,"            return getDefault();
",0,0,0,1,2,1,2,0,0,2,20,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,305,"        final String id = zone.getID();
",2,0,0,1,2,1,4,2,0,9,31,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,306,"        if (id.equals(""UTC"")) {
",0,0,0,2,5,0,4,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,307,"            return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,311,"        DateTimeZone dtz = null;
",2,0,0,0,0,0,0,2,0,4,24,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,312,"        String convId = getConvertedId(id);
",2,0,0,1,2,0,4,2,0,8,35,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,313,"        if (convId != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,314,"            dtz = cProvider.getZone(convId);
",2,0,0,1,2,0,6,0,0,9,32,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,316,"        if (dtz == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,317,"            dtz = cProvider.getZone(id);
",2,0,0,1,2,0,6,0,0,9,28,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,319,"        if (dtz != null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,320,"            return dtz;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,324,"        if (convId == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,325,"            convId = zone.getID();
",2,0,0,1,2,0,4,0,0,7,22,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,326,"            if (convId.startsWith(""GMT+"") || convId.startsWith(""GMT-"")) {
",0,1,0,3,7,0,8,0,0,11,61,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,327,"                convId = convId.substring(3);
",2,0,0,1,2,0,4,0,0,7,29,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,328,"                int offset = parseOffset(convId);
",2,0,0,1,2,0,4,0,0,6,33,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,329,"                if (offset == 0L) {
",2,1,0,1,3,0,0,0,0,3,19,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,330,"                    return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,11,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,332,"                    convId = printOffset(offset);
",2,0,0,1,2,0,4,0,0,7,29,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,333,"                    return fixedOffsetZone(convId, offset);
",0,0,0,1,2,1,6,0,0,6,39,11,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,337,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");
",2,1,0,1,2,0,0,2,0,7,90,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,349,"        if (offset == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,350,"            return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,352,"        if (iFixedOffsetCache == null) {
",2,1,0,1,3,0,0,0,0,3,32,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,353,"            iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();
",2,0,0,1,2,0,0,8,0,11,71,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,356,"        Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);
",2,0,0,1,2,0,6,4,0,12,56,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,357,"        if (ref != null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,358,"            zone = ref.get();
",2,0,0,1,2,0,4,0,0,7,17,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,359,"            if (zone != null) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,360,"                return zone;
",2,0,0,0,0,1,0,0,0,2,12,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,363,"        zone = new FixedDateTimeZone(id, null, offset, offset);
",8,0,0,1,2,0,0,2,0,12,55,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,364,"        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));
",2,0,0,2,4,0,6,4,0,12,65,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,365,"        return zone;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,374,"        return cAvailableIDs;
",2,0,0,0,0,1,0,0,0,2,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,387,"        return cProvider;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,401,"        SecurityManager sm = System.getSecurityManager();
",2,0,0,1,2,0,4,2,0,8,49,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,402,"        if (sm != null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,403,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setProvider""));
",0,0,0,2,4,0,4,2,0,7,71,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,405,"        setProvider0(provider);
",0,0,0,1,2,0,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,406,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,420,"            throw new IllegalArgumentException
",0,0,0,0,0,0,0,2,0,2,34,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,424,"            throw new IllegalArgumentException(""The provider doesn't support UTC"");
",0,0,0,1,2,0,0,2,0,3,71,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,427,"            throw new IllegalArgumentException(""Invalid UTC zone provided"");
",0,0,0,1,2,0,0,2,0,3,64,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,450,"                    provider = (Provider) Class.forName(providerClass).newInstance();
",2,0,0,3,6,0,8,2,0,13,65,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,454,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,451,"                } catch (Exception ex) {
",2,0,0,1,4,0,0,2,0,4,24,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,452,"                    Thread thread = Thread.currentThread();
",2,0,0,1,2,0,4,2,0,8,39,11,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,453,"                    thread.getThreadGroup().uncaughtException(thread, ex);
",0,0,0,2,4,0,10,0,0,10,54,12,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,456,"        } catch (SecurityException ex) {
",2,0,0,1,4,0,0,2,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,463,"            } catch (Exception ex) {
",2,0,0,1,4,0,0,2,0,4,24,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,464,"                Thread thread = Thread.currentThread();
",2,0,0,1,2,0,4,2,0,8,39,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,465,"                thread.getThreadGroup().uncaughtException(thread, ex);
",0,0,0,2,4,0,10,0,0,10,54,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,470,"            provider = new UTCProvider();
",2,0,0,1,2,0,0,2,0,5,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,486,"        return cNameProvider;
",2,0,0,0,0,1,0,0,0,2,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,500,"        SecurityManager sm = System.getSecurityManager();
",2,0,0,1,2,0,4,2,0,8,49,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,501,"        if (sm != null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,502,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setNameProvider""));
",0,0,0,2,4,0,4,2,0,7,75,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,504,"        setNameProvider0(nameProvider);
",0,0,0,1,2,0,4,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,505,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,534,"                    nameProvider = (NameProvider) Class.forName(providerClass).newInstance();
",2,0,0,3,6,0,8,2,0,13,73,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,538,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,535,"                } catch (Exception ex) {
",2,0,0,1,4,0,0,2,0,4,24,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,536,"                    Thread thread = Thread.currentThread();
",2,0,0,1,2,0,4,2,0,8,39,11,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,537,"                    thread.getThreadGroup().uncaughtException(thread, ex);
",0,0,0,2,4,0,10,0,0,10,54,12,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,540,"        } catch (SecurityException ex) {
",2,0,0,1,4,0,0,2,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,559,"        Map<String, String> map = cZoneIdConversion;
",4,0,0,0,0,0,0,6,0,10,44,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,560,"        if (map == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,562,"            map = new HashMap<String, String>();
",2,0,0,1,2,0,0,6,0,9,36,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,563,"            map.put(""GMT"", ""UTC"");
",0,0,0,1,2,0,4,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,564,"            map.put(""WET"", ""WET"");
",0,0,0,1,2,0,4,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,565,"            map.put(""CET"", ""CET"");
",0,0,0,1,2,0,4,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,566,"            map.put(""MET"", ""CET"");
",0,0,0,1,2,0,4,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,567,"            map.put(""ECT"", ""CET"");
",0,0,0,1,2,0,4,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,568,"            map.put(""EET"", ""EET"");
",0,0,0,1,2,0,4,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,569,"            map.put(""MIT"", ""Pacific/Apia"");
",0,0,0,1,2,0,4,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,570,"            map.put(""HST"", ""Pacific/Honolulu"");  // JDK 1.1 compatible
",0,0,0,1,2,0,4,0,0,6,58,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,571,"            map.put(""AST"", ""America/Anchorage"");
",0,0,0,1,2,0,4,0,0,6,36,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,572,"            map.put(""PST"", ""America/Los_Angeles"");
",0,0,0,1,2,0,4,0,0,6,38,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,573,"            map.put(""MST"", ""America/Denver"");  // JDK 1.1 compatible
",0,0,0,1,2,0,4,0,0,6,56,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,574,"            map.put(""PNT"", ""America/Phoenix"");
",0,0,0,1,2,0,4,0,0,6,34,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,575,"            map.put(""CST"", ""America/Chicago"");
",0,0,0,1,2,0,4,0,0,6,34,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,576,"            map.put(""EST"", ""America/New_York"");  // JDK 1.1 compatible
",0,0,0,1,2,0,4,0,0,6,58,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,577,"            map.put(""IET"", ""America/Indiana/Indianapolis"");
",0,0,0,1,2,0,4,0,0,6,47,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,578,"            map.put(""PRT"", ""America/Puerto_Rico"");
",0,0,0,1,2,0,4,0,0,6,38,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,579,"            map.put(""CNT"", ""America/St_Johns"");
",0,0,0,1,2,0,4,0,0,6,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,580,"            map.put(""AGT"", ""America/Argentina/Buenos_Aires"");
",0,0,0,1,2,0,4,0,0,6,49,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,581,"            map.put(""BET"", ""America/Sao_Paulo"");
",0,0,0,1,2,0,4,0,0,6,36,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,582,"            map.put(""ART"", ""Africa/Cairo"");
",0,0,0,1,2,0,4,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,583,"            map.put(""CAT"", ""Africa/Harare"");
",0,0,0,1,2,0,4,0,0,6,32,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,584,"            map.put(""EAT"", ""Africa/Addis_Ababa"");
",0,0,0,1,2,0,4,0,0,6,37,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,585,"            map.put(""NET"", ""Asia/Yerevan"");
",0,0,0,1,2,0,4,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,586,"            map.put(""PLT"", ""Asia/Karachi"");
",0,0,0,1,2,0,4,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,587,"            map.put(""IST"", ""Asia/Kolkata"");
",0,0,0,1,2,0,4,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,588,"            map.put(""BST"", ""Asia/Dhaka"");
",0,0,0,1,2,0,4,0,0,6,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,589,"            map.put(""VST"", ""Asia/Ho_Chi_Minh"");
",0,0,0,1,2,0,4,0,0,6,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,590,"            map.put(""CTT"", ""Asia/Shanghai"");
",0,0,0,1,2,0,4,0,0,6,32,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,591,"            map.put(""JST"", ""Asia/Tokyo"");
",0,0,0,1,2,0,4,0,0,6,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,592,"            map.put(""ACT"", ""Australia/Darwin"");
",0,0,0,1,2,0,4,0,0,6,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,593,"            map.put(""AET"", ""Australia/Sydney"");
",0,0,0,1,2,0,4,0,0,6,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,594,"            map.put(""SST"", ""Pacific/Guadalcanal"");
",0,0,0,1,2,0,4,0,0,6,38,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,595,"            map.put(""NST"", ""Pacific/Auckland"");
",0,0,0,1,2,0,4,0,0,6,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,596,"            cZoneIdConversion = map;
",4,0,0,0,0,0,0,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,598,"        return map.get(id);
",0,0,0,1,2,1,6,0,0,6,19,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,604,"        Chronology chrono = new BaseChronology() {
",2,0,0,1,3,0,0,4,0,6,42,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,618,"        return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);
",0,0,0,4,8,1,10,0,0,11,72,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,631,"        StringBuffer buf = new StringBuffer();
",2,0,0,1,2,0,0,4,0,6,38,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,632,"        if (offset >= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,633,"            buf.append('+');
",0,0,0,1,2,0,4,0,0,5,16,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,635,"            buf.append('-');
",0,0,0,1,2,0,4,0,0,5,16,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,636,"            offset = -offset;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,639,"        int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,0,0,0,0,0,0,9,55,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,640,"        FormatUtils.appendPaddedInteger(buf, hours, 2);
",0,0,0,1,2,0,8,0,0,8,47,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,641,"        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,1,2,0,0,0,0,10,58,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,643,"        int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,9,59,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,644,"        buf.append(':');
",0,0,0,1,2,0,4,0,0,5,16,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,645,"        FormatUtils.appendPaddedInteger(buf, minutes, 2);
",0,0,0,1,2,0,8,0,0,8,49,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,646,"        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,10,56,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,647,"        if (offset == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,648,"            return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,651,"        int seconds = offset / DateTimeConstants.MILLIS_PER_SECOND;
",8,1,0,0,0,0,0,0,0,9,59,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,652,"        buf.append(':');
",0,0,0,1,2,0,4,0,0,5,16,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,653,"        FormatUtils.appendPaddedInteger(buf, seconds, 2);
",0,0,0,1,2,0,8,0,0,8,49,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,654,"        offset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;
",8,1,0,0,0,0,0,0,0,10,56,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,655,"        if (offset == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,656,"            return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,659,"        buf.append('.');
",0,0,0,1,2,0,4,0,0,5,16,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,660,"        FormatUtils.appendPaddedInteger(buf, offset, 3);
",0,0,0,1,2,0,8,0,0,8,48,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,661,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,670,"        if (cOffsetFormatter == null) {
",2,1,0,1,3,0,0,0,0,3,31,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,671,"            cOffsetFormatter = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,49,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,675,"        return cOffsetFormatter;
",2,0,0,0,0,1,0,0,0,2,24,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,729,"        return getShortName(instant, null);
",0,0,0,1,2,1,4,0,0,5,35,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,744,"        if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,745,"            locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,747,"        String nameKey = getNameKey(instant);
",2,0,0,1,2,0,4,2,0,8,37,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,748,"        if (nameKey == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,749,"            return iID;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,751,"        String name = cNameProvider.getShortName(locale, iID, nameKey);
",2,0,0,1,2,0,10,2,0,14,63,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,752,"        if (name != null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,753,"            return name;
",2,0,0,0,0,1,0,0,0,2,12,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,755,"        return printOffset(getOffset(instant));
",0,0,0,2,4,1,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,769,"        return getName(instant, null);
",0,0,0,1,2,1,4,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,784,"        if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,785,"            locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,787,"        String nameKey = getNameKey(instant);
",2,0,0,1,2,0,4,2,0,8,37,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,788,"        if (nameKey == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,789,"            return iID;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,791,"        String name = cNameProvider.getName(locale, iID, nameKey);
",2,0,0,1,2,0,10,2,0,14,58,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,792,"        if (name != null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,793,"            return name;
",2,0,0,0,0,1,0,0,0,2,12,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,795,"        return printOffset(getOffset(instant));
",0,0,0,2,4,1,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,813,"        if (instant == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,814,"            return getOffset(DateTimeUtils.currentTimeMillis());
",0,0,0,2,4,1,6,0,0,6,52,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,816,"        return getOffset(instant.getMillis());
",0,0,0,2,4,1,6,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,844,"        return getOffset(instant) == getStandardOffset(instant);
",0,1,0,2,4,1,8,0,0,9,56,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,882,"        final int offsetLocal = getOffset(instantLocal);
",2,0,0,1,2,1,4,0,0,7,48,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,884,"        final long instantAdjusted = instantLocal - offsetLocal;
",6,1,0,0,0,1,0,0,0,8,56,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,885,"        final int offsetAdjusted = getOffset(instantAdjusted);
",2,0,0,1,2,1,4,0,0,7,54,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,887,"        if (offsetLocal != offsetAdjusted) {
",4,1,0,1,3,0,0,0,0,5,36,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,890,"            if ((offsetLocal - offsetAdjusted) < 0) {
",4,2,0,2,5,0,0,0,0,6,41,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,894,"                long nextLocal = nextTransition(instantAdjusted);
",2,0,0,1,2,0,4,0,0,6,49,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,895,"                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
",6,1,0,1,2,0,2,0,0,9,66,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,896,"                if (nextLocal != nextAdjusted) {
",4,1,0,1,3,0,0,0,0,5,32,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,897,"                    return offsetLocal;
",2,0,0,0,0,1,0,0,0,2,19,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,899,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,900,"        } else if (offsetLocal >= 0) {
",2,1,0,1,4,0,0,0,0,3,30,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,901,"            long prev = previousTransition(instantAdjusted);
",2,0,0,1,2,0,4,0,0,6,48,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,902,"            if (prev < instantAdjusted) {
",4,1,0,1,3,0,0,0,0,5,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,903,"                int offsetPrev = getOffset(prev);
",2,0,0,1,2,0,4,0,0,6,33,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,904,"                int diff = offsetPrev - offsetLocal;
",6,1,0,0,0,0,0,0,0,7,36,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,905,"                if (instantAdjusted - prev <= diff) {
",6,2,0,1,3,0,0,0,0,8,37,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,906,"                    return offsetPrev;
",2,0,0,0,0,1,0,0,0,2,18,11,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,910,"        return offsetAdjusted;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,924,"        int offset = getOffset(instantUTC);
",2,0,0,1,2,0,4,0,0,6,35,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,925,"        long instantLocal = instantUTC + offset;
",6,1,0,0,0,0,0,0,0,7,40,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,927,"        if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {
",8,5,0,3,7,0,0,0,0,13,68,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,928,"            throw new ArithmeticException(""Adding time zone offset caused overflow"");
",0,0,0,1,2,0,0,2,0,3,73,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,930,"        return instantLocal;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,951,"        int offsetOriginal = getOffset(originalInstantUTC);
",2,0,0,1,2,0,4,0,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,952,"        long instantUTC = instantLocal - offsetOriginal;
",6,1,0,0,0,0,0,0,0,7,48,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,953,"        int offsetLocalFromOriginal = getOffset(instantUTC);
",2,0,0,1,2,0,4,0,0,6,52,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,954,"        if (offsetLocalFromOriginal == offsetOriginal) {
",4,1,0,1,3,0,0,0,0,5,48,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,955,"            return instantUTC;
",2,0,0,0,0,1,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,957,"        return convertLocalToUTC(instantLocal, strict);
",0,0,0,1,2,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,974,"        int offsetLocal = getOffset(instantLocal);
",2,0,0,1,2,0,4,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,976,"        int offset = getOffset(instantLocal - offsetLocal);
",6,1,0,1,2,0,2,0,0,9,51,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,978,"        if (offsetLocal != offset) {
",4,1,0,1,3,0,0,0,0,5,28,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,982,"            if (strict || offsetLocal < 0) {
",4,2,0,1,3,0,0,0,0,6,32,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,984,"                long nextLocal = nextTransition(instantLocal - offsetLocal);
",6,1,0,1,2,0,2,0,0,9,60,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,985,"                if (nextLocal == (instantLocal - offsetLocal)) {
",6,2,0,2,5,0,0,0,0,8,48,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,986,"                    nextLocal = Long.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,7,27,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,988,"                long nextAdjusted = nextTransition(instantLocal - offset);
",6,1,0,1,2,0,2,0,0,9,58,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,989,"                if (nextAdjusted == (instantLocal - offset)) {
",6,2,0,2,5,0,0,0,0,8,46,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,990,"                    nextAdjusted = Long.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,7,30,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,992,"                if (nextLocal != nextAdjusted) {
",4,1,0,1,3,0,0,0,0,5,32,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,994,"                    if (strict) {
",2,0,0,1,3,0,0,0,0,2,13,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,996,"                        throw new IllegalArgumentException(""Illegal instant due to time zone offset transition: "" +
",0,1,0,0,1,0,0,2,0,4,91,13,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,1003,"                        offset = offsetLocal;
",4,0,0,0,0,0,0,0,0,5,21,12,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,1009,"        long instantUTC = instantLocal - offset;
",6,1,0,0,0,0,0,0,0,7,40,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,1011,"        if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {
",8,5,0,3,7,0,0,0,0,13,69,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,1012,"            throw new ArithmeticException(""Subtracting time zone offset caused overflow"");
",0,0,0,1,2,0,0,2,0,3,78,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,1014,"        return instantUTC;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,1028,"        if (newZone == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,1029,"            newZone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,36,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,1031,"        if (newZone == this) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,1032,"            return oldInstant;
",2,0,0,0,0,1,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,1034,"        long instantLocal = convertUTCToLocal(oldInstant);
",2,0,0,1,2,0,4,0,0,6,50,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,1035,"        return newZone.convertLocalToUTC(instantLocal, false, oldInstant);
",0,0,0,1,2,1,8,0,0,9,66,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,1145,"        if (isFixed()) {
",0,0,0,2,5,0,2,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,1146,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,1149,"            localDateTime.toDateTime(this);
",0,0,0,1,2,0,4,0,0,4,31,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,1150,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,1151,"        } catch (IllegalArgumentException ex) {
",2,0,0,1,4,0,0,2,0,4,39,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,1152,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,1167,"        long instantBefore = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;
",8,2,0,0,0,0,0,0,0,10,69,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,1168,"        long instantAfter = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;
",8,2,0,0,0,0,0,0,0,10,68,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,1169,"        long offsetBefore = getOffset(instantBefore);
",2,0,0,1,2,0,4,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,1170,"        long offsetAfter = getOffset(instantAfter);
",2,0,0,1,2,0,4,0,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,1171,"        if (offsetBefore <= offsetAfter) {
",4,1,0,1,3,0,0,0,0,5,34,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,1172,"            return instant;  // not an overlap (less than is a gap, equal is normal case)
",2,0,0,1,2,1,0,0,0,2,77,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,1176,"        long diff = offsetBefore - offsetAfter;
",6,1,0,0,0,0,0,0,0,7,39,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,1177,"        long transition = nextTransition(instantBefore);
",2,0,0,1,2,0,4,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,1178,"        long overlapStart = transition - diff;
",6,1,0,0,0,0,0,0,0,7,38,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,1179,"        long overlapEnd = transition + diff;
",6,1,0,0,0,0,0,0,0,7,36,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,1180,"        if (instant < overlapStart || instant >= overlapEnd) {
",8,3,0,1,3,0,0,0,0,11,54,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,1181,"          return instant;  // not an overlap
",2,0,0,0,0,1,0,0,0,2,34,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,1185,"        long afterStart = instant - overlapStart;
",6,1,0,0,0,0,0,0,0,7,41,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,1186,"        if (afterStart >= diff) {
",4,1,0,1,3,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,1188,"          return earlierOrLater ? instant : instant - diff;
",8,1,0,0,0,1,0,0,0,9,49,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,1191,"          return earlierOrLater ? instant + diff : instant;
",8,1,0,0,0,1,0,0,0,9,49,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,1233,"        return java.util.TimeZone.getTimeZone(iID);
",6,0,0,1,2,1,4,0,0,10,43,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,1258,"        return getID();
",0,0,0,1,2,1,2,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,1268,"        return new Stub(iID);
",2,0,0,1,2,1,0,2,0,4,21,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,515,"            return System.currentTimeMillis();
",0,0,0,1,2,1,4,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/DateTime,12,2045,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,2046,"            iInstant = instant;
",4,0,0,0,0,0,0,0,0,5,19,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,2047,"            iField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,2048,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,2054,"            oos.writeObject(iInstant);
",0,0,0,1,2,0,6,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/DateTime,12,2055,"            oos.writeObject(iField.getType());
",0,0,0,2,4,0,8,0,0,8,34,6,0.00000,0
defect4j,time,org/joda/time/DateTime,12,2056,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,2062,"            iInstant = (DateTime) oos.readObject();
",2,0,0,2,4,0,4,2,0,9,39,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,2063,"            DateTimeFieldType type = (DateTimeFieldType) oos.readObject();
",2,0,0,2,4,0,4,4,0,10,62,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,2064,"            iField = type.getField(iInstant.getChronology());
",2,0,0,2,4,0,8,0,0,11,49,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,2065,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,2074,"            return iField;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,2083,"            return iInstant.getMillis();
",0,0,0,1,2,1,4,0,0,4,28,6,0.00000,0
defect4j,time,org/joda/time/DateTime,12,2093,"            return iInstant.getChronology();
",0,0,0,1,2,1,4,0,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/DateTime,12,2102,"            return iInstant;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,2119,"            return iInstant.withMillis(iField.add(iInstant.getMillis(), value));
",0,0,0,3,6,1,14,0,0,14,68,6,0.00000,0
defect4j,time,org/joda/time/DateTime,12,2135,"            return iInstant.withMillis(iField.add(iInstant.getMillis(), value));
",0,0,0,3,6,1,14,0,0,14,68,6,0.00000,0
defect4j,time,org/joda/time/DateTime,12,2153,"            return iInstant.withMillis(iField.addWrapField(iInstant.getMillis(), value));
",0,0,0,3,6,1,14,0,0,14,77,6,0.00000,0
defect4j,time,org/joda/time/DateTime,12,2170,"            return iInstant.withMillis(iField.set(iInstant.getMillis(), value));
",0,0,0,3,6,1,14,0,0,14,68,6,0.00000,0
defect4j,time,org/joda/time/DateTime,12,2187,"            return iInstant.withMillis(iField.set(iInstant.getMillis(), text, locale));
",0,0,0,3,6,1,16,0,0,16,75,6,0.00000,0
defect4j,time,org/joda/time/DateTime,12,2203,"            return setCopy(text, null);
",0,0,0,1,2,1,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,2227,"            return setCopy(getMaximumValue());
",0,0,0,2,4,1,4,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/DateTime,12,2244,"            return setCopy(getMinimumValue());
",0,0,0,2,4,1,4,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/DateTime,12,2254,"            return iInstant.withMillis(iField.roundFloor(iInstant.getMillis()));
",0,0,0,3,6,1,12,0,0,12,68,6,0.00000,0
defect4j,time,org/joda/time/DateTime,12,2263,"            return iInstant.withMillis(iField.roundCeiling(iInstant.getMillis()));
",0,0,0,3,6,1,12,0,0,12,70,6,0.00000,0
defect4j,time,org/joda/time/DateTime,12,2273,"            return iInstant.withMillis(iField.roundHalfFloor(iInstant.getMillis()));
",0,0,0,3,6,1,12,0,0,12,72,6,0.00000,0
defect4j,time,org/joda/time/DateTime,12,2283,"            return iInstant.withMillis(iField.roundHalfCeiling(iInstant.getMillis()));
",0,0,0,3,6,1,12,0,0,12,74,6,0.00000,0
defect4j,time,org/joda/time/DateTime,12,2294,"            return iInstant.withMillis(iField.roundHalfEven(iInstant.getMillis()));
",0,0,0,3,6,1,12,0,0,12,71,6,0.00000,0
defect4j,time,org/joda/time/DateTime,12,155,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,156,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,168,"        super(zone);
",2,0,0,1,2,0,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,169,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,182,"        super(chronology);
",2,0,0,1,2,0,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,183,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,193,"        super(instant);
",2,0,0,1,2,0,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,194,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,206,"        super(instant, zone);
",4,0,0,1,2,0,0,0,0,4,21,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,207,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,220,"        super(instant, chronology);
",4,0,0,1,2,0,0,0,0,4,27,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,221,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,241,"        super(instant, (Chronology) null);
",2,0,0,2,4,0,0,2,0,5,34,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,242,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,265,"        super(instant, zone);
",4,0,0,1,2,0,0,0,0,4,21,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,266,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,286,"        super(instant, DateTimeUtils.getChronology(chronology));
",2,0,0,2,4,0,6,0,0,8,56,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,287,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,307,"        super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, 0, 0);
",10,0,0,1,2,0,0,0,0,10,68,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,308,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,331,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,333,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,357,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,359,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,381,"        super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, 0);
",12,0,0,1,2,0,0,0,0,12,81,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,382,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,407,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,409,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,435,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,437,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,460,"        super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
",14,0,0,1,2,0,0,0,0,14,94,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,461,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,487,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,489,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,89,"        return new DateTime();
",0,0,0,1,2,1,0,2,0,2,22,6,0.00000,0
defect4j,time,org/joda/time/DateTime,12,101,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,102,"            throw new NullPointerException(""Zone must not be null"");
",0,0,0,1,2,0,0,2,0,4,56,6,0.00000,0
defect4j,time,org/joda/time/DateTime,12,104,"        return new DateTime(zone);
",2,0,0,1,2,1,0,2,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,116,"        if (chronology == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,117,"            throw new NullPointerException(""Chronology must not be null"");
",0,0,0,1,2,0,0,2,0,4,62,6,0.00000,0
defect4j,time,org/joda/time/DateTime,12,119,"        return new DateTime(chronology);
",2,0,0,1,2,1,0,2,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,133,"        return parse(str, ISODateTimeFormat.dateTimeParser().withOffsetParsed());
",0,0,0,3,6,1,10,0,0,10,73,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,144,"        return formatter.parseDateTime(str);
",0,0,0,1,2,1,6,0,0,6,36,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,537,"        if (getChronology() == ISOChronology.getInstance()) {
",0,1,0,3,7,0,6,0,0,7,53,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,538,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,540,"        return super.toDateTimeISO();
",2,0,0,1,2,1,0,0,0,2,29,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,550,"        zone = DateTimeUtils.getZone(zone);
",2,0,0,1,2,0,6,0,0,9,35,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,551,"        if (getZone() == zone) {
",2,1,0,2,5,0,2,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,552,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,554,"        return super.toDateTime(zone);
",4,0,0,1,2,1,0,0,0,4,30,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,564,"        chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,565,"        if (getChronology() == chronology) {
",2,1,0,2,5,0,2,0,0,5,36,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,566,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,568,"        return super.toDateTime(chronology);
",4,0,0,1,2,1,0,0,0,4,36,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,582,"        return (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));
",4,1,0,4,8,1,4,2,0,11,84,6,0.00000,0
defect4j,time,org/joda/time/DateTime,12,595,"        newChronology = DateTimeUtils.getChronology(newChronology);
",2,0,0,1,2,0,6,0,0,9,59,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,596,"        return (newChronology == getChronology() ? this : new DateTime(getMillis(), newChronology));
",4,1,0,4,8,1,4,2,0,11,92,6,0.00000,0
defect4j,time,org/joda/time/DateTime,12,618,"        return withChronology(getChronology().withZone(newZone));
",0,0,0,3,6,1,8,0,0,8,57,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,639,"        newZone = DateTimeUtils.getZone(newZone);
",2,0,0,1,2,0,6,0,0,9,41,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,640,"        DateTimeZone originalZone = DateTimeUtils.getZone(getZone());
",2,0,0,2,4,0,6,2,0,10,61,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,641,"        if (newZone == originalZone) {
",4,1,0,1,3,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,642,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,645,"        long millis = originalZone.getMillisKeepLocal(newZone, getMillis());
",2,0,0,2,4,0,8,0,0,10,68,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,646,"        return new DateTime(millis, getChronology().withZone(newZone));
",2,0,0,3,6,1,6,2,0,10,63,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,665,"        long newMillis = getZone().adjustOffset(getMillis(), false);
",2,0,0,3,6,0,6,0,0,9,60,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,666,"        return withMillis(newMillis);
",0,0,0,1,2,1,4,0,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,685,"        long newMillis = getZone().adjustOffset(getMillis(), true);
",2,0,0,3,6,0,6,0,0,9,59,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,686,"        return withMillis(newMillis);
",0,0,0,1,2,1,4,0,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,709,"        Chronology chrono = getChronology();
",2,0,0,1,2,0,2,2,0,6,36,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,710,"        long instant = getMillis();
",2,0,0,1,2,0,2,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,711,"        instant = chrono.year().set(instant, year);
",2,0,0,2,4,0,10,0,0,13,43,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,712,"        instant = chrono.monthOfYear().set(instant, monthOfYear);
",2,0,0,2,4,0,10,0,0,13,57,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,713,"        instant = chrono.dayOfMonth().set(instant, dayOfMonth);
",2,0,0,2,4,0,10,0,0,13,55,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,714,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,737,"        Chronology chrono = getChronology();
",2,0,0,1,2,0,2,2,0,6,36,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,738,"        long instant = getMillis();
",2,0,0,1,2,0,2,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,739,"        instant = chrono.hourOfDay().set(instant, hourOfDay);
",2,0,0,2,4,0,10,0,0,13,53,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,740,"        instant = chrono.minuteOfHour().set(instant, minuteOfHour);
",2,0,0,2,4,0,10,0,0,13,59,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,741,"        instant = chrono.secondOfMinute().set(instant, secondOfMinute);
",2,0,0,2,4,0,10,0,0,13,63,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,742,"        instant = chrono.millisOfSecond().set(instant, millisOfSecond);
",2,0,0,2,4,0,10,0,0,13,63,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,743,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,759,"        return toLocalDate().toDateTimeAtStartOfDay(getZone());
",0,0,0,3,6,1,6,0,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,776,"        if (partial == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,777,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,779,"        return withMillis(getChronology().set(partial, getMillis()));
",0,0,0,4,8,1,10,0,0,10,61,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,802,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,803,"            throw new IllegalArgumentException(""Field must not be null"");
",0,0,0,1,2,0,0,2,0,4,61,6,0.00000,0
defect4j,time,org/joda/time/DateTime,12,805,"        long instant = fieldType.getField(getChronology()).set(getMillis(), value);
",2,0,0,4,8,0,12,0,0,14,75,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,806,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,828,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,829,"            throw new IllegalArgumentException(""Field must not be null"");
",0,0,0,1,2,0,0,2,0,4,61,6,0.00000,0
defect4j,time,org/joda/time/DateTime,12,831,"        if (amount == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,832,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,834,"        long instant = fieldType.getField(getChronology()).add(getMillis(), amount);
",2,0,0,4,8,0,12,0,0,14,76,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,835,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,850,"        if (durationToAdd == 0 || scalar == 0) {
",4,3,0,1,3,0,0,0,0,7,40,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,851,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,853,"        long instant = getChronology().add(getMillis(), durationToAdd, scalar);
",2,0,0,3,6,0,10,0,0,12,71,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,854,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,868,"        if (durationToAdd == null || scalar == 0) {
",4,3,0,1,3,0,0,0,0,7,43,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,869,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,871,"        return withDurationAdded(durationToAdd.getMillis(), scalar);
",0,0,0,2,4,1,8,0,0,8,60,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,890,"        if (period == null || scalar == 0) {
",4,3,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,891,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,893,"        long instant = getChronology().add(period, getMillis(), scalar);
",2,0,0,3,6,0,10,0,0,12,64,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,894,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,909,"        return withDurationAdded(duration, 1);
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,923,"        return withDurationAdded(duration, 1);
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,949,"        return withPeriodAdded(period, 1);
",0,0,0,1,2,1,4,0,0,4,34,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,976,"        if (years == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,977,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,979,"        long instant = getChronology().years().add(getMillis(), years);
",2,0,0,4,8,0,10,0,0,12,63,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,980,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1006,"        if (months == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1007,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1009,"        long instant = getChronology().months().add(getMillis(), months);
",2,0,0,4,8,0,10,0,0,12,65,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1010,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1032,"        if (weeks == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1033,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1035,"        long instant = getChronology().weeks().add(getMillis(), weeks);
",2,0,0,4,8,0,10,0,0,12,63,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1036,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1067,"        if (days == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1068,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1070,"        long instant = getChronology().days().add(getMillis(), days);
",2,0,0,4,8,0,10,0,0,12,61,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1071,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1098,"        if (hours == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1099,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1101,"        long instant = getChronology().hours().add(getMillis(), hours);
",2,0,0,4,8,0,10,0,0,12,63,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1102,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1125,"        if (minutes == 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1126,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1128,"        long instant = getChronology().minutes().add(getMillis(), minutes);
",2,0,0,4,8,0,10,0,0,12,67,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1129,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1152,"        if (seconds == 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1153,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1155,"        long instant = getChronology().seconds().add(getMillis(), seconds);
",2,0,0,4,8,0,10,0,0,12,67,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1156,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1178,"        if (millis == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1179,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1181,"        long instant = getChronology().millis().add(getMillis(), millis);
",2,0,0,4,8,0,10,0,0,12,65,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1182,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1197,"        return withDurationAdded(duration, -1);
",0,0,0,1,2,1,4,0,0,5,39,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1211,"        return withDurationAdded(duration, -1);
",0,0,0,1,2,1,4,0,0,5,39,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1238,"        return withPeriodAdded(period, -1);
",0,0,0,1,2,1,4,0,0,5,35,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1265,"        if (years == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1266,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1268,"        long instant = getChronology().years().subtract(getMillis(), years);
",2,0,0,4,8,0,10,0,0,12,68,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1269,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1295,"        if (months == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1296,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1298,"        long instant = getChronology().months().subtract(getMillis(), months);
",2,0,0,4,8,0,10,0,0,12,70,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1299,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1321,"        if (weeks == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1322,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1324,"        long instant = getChronology().weeks().subtract(getMillis(), weeks);
",2,0,0,4,8,0,10,0,0,12,68,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1325,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1356,"        if (days == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1357,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1359,"        long instant = getChronology().days().subtract(getMillis(), days);
",2,0,0,4,8,0,10,0,0,12,66,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1360,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1388,"        if (hours == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1389,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1391,"        long instant = getChronology().hours().subtract(getMillis(), hours);
",2,0,0,4,8,0,10,0,0,12,68,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1392,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1415,"        if (minutes == 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1416,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1418,"        long instant = getChronology().minutes().subtract(getMillis(), minutes);
",2,0,0,4,8,0,10,0,0,12,72,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1419,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1442,"        if (seconds == 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1443,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1445,"        long instant = getChronology().seconds().subtract(getMillis(), seconds);
",2,0,0,4,8,0,10,0,0,12,72,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1446,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1469,"        if (millis == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1470,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1472,"        long instant = getChronology().millis().subtract(getMillis(), millis);
",2,0,0,4,8,0,10,0,0,12,70,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1473,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1485,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1486,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");
",0,0,0,1,2,0,0,2,0,4,77,6,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1488,"        DateTimeField field = type.getField(getChronology());
",2,0,0,2,4,0,6,2,0,10,53,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1489,"        if (field.isSupported() == false) {
",0,1,0,2,5,0,4,0,0,6,35,4,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1490,"            throw new IllegalArgumentException(""Field '"" + type + ""' is not supported"");
",2,1,0,1,2,0,0,2,0,7,76,7,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1492,"        return new Property(this, field);
",2,0,0,1,2,1,0,2,0,4,33,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1503,"        return new DateMidnight(getMillis(), getChronology());
",0,0,0,3,6,1,4,2,0,6,54,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1515,"        return new YearMonthDay(getMillis(), getChronology());
",0,0,0,3,6,1,4,2,0,6,54,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1527,"        return new TimeOfDay(getMillis(), getChronology());
",0,0,0,3,6,1,4,2,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1538,"        return new LocalDateTime(getMillis(), getChronology());
",0,0,0,3,6,1,4,2,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1549,"        return new LocalDate(getMillis(), getChronology());
",0,0,0,3,6,1,4,2,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1560,"        return new LocalTime(getMillis(), getChronology());
",0,0,0,3,6,1,4,2,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1577,"        return withMillis(getChronology().era().set(getMillis(), era));
",0,0,0,5,10,1,12,0,0,12,63,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1593,"        return withMillis(getChronology().centuryOfEra().set(getMillis(), centuryOfEra));
",0,0,0,5,10,1,12,0,0,12,81,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1609,"        return withMillis(getChronology().yearOfEra().set(getMillis(), yearOfEra));
",0,0,0,5,10,1,12,0,0,12,75,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1625,"        return withMillis(getChronology().yearOfCentury().set(getMillis(), yearOfCentury));
",0,0,0,5,10,1,12,0,0,12,83,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1641,"        return withMillis(getChronology().year().set(getMillis(), year));
",0,0,0,5,10,1,12,0,0,12,65,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1663,"        return withMillis(getChronology().weekyear().set(getMillis(), weekyear));
",0,0,0,5,10,1,12,0,0,12,73,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1679,"        return withMillis(getChronology().monthOfYear().set(getMillis(), monthOfYear));
",0,0,0,5,10,1,12,0,0,12,79,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1700,"        return withMillis(getChronology().weekOfWeekyear().set(getMillis(), weekOfWeekyear));
",0,0,0,5,10,1,12,0,0,12,85,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1716,"        return withMillis(getChronology().dayOfYear().set(getMillis(), dayOfYear));
",0,0,0,5,10,1,12,0,0,12,75,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1732,"        return withMillis(getChronology().dayOfMonth().set(getMillis(), dayOfMonth));
",0,0,0,5,10,1,12,0,0,12,77,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1748,"        return withMillis(getChronology().dayOfWeek().set(getMillis(), dayOfWeek));
",0,0,0,5,10,1,12,0,0,12,75,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1765,"        return withMillis(getChronology().hourOfDay().set(getMillis(), hour));
",0,0,0,5,10,1,12,0,0,12,70,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1781,"        return withMillis(getChronology().minuteOfHour().set(getMillis(), minute));
",0,0,0,5,10,1,12,0,0,12,75,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1797,"        return withMillis(getChronology().secondOfMinute().set(getMillis(), second));
",0,0,0,5,10,1,12,0,0,12,77,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1813,"        return withMillis(getChronology().millisOfSecond().set(getMillis(), millis));
",0,0,0,5,10,1,12,0,0,12,77,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1829,"        return withMillis(getChronology().millisOfDay().set(getMillis(), millis));
",0,0,0,5,10,1,12,0,0,12,74,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1840,"        return new Property(this, getChronology().era());
",0,0,0,3,6,1,4,2,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1849,"        return new Property(this, getChronology().centuryOfEra());
",0,0,0,3,6,1,4,2,0,6,58,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1858,"        return new Property(this, getChronology().yearOfCentury());
",0,0,0,3,6,1,4,2,0,6,59,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1867,"        return new Property(this, getChronology().yearOfEra());
",0,0,0,3,6,1,4,2,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1876,"        return new Property(this, getChronology().year());
",0,0,0,3,6,1,4,2,0,6,50,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1885,"        return new Property(this, getChronology().weekyear());
",0,0,0,3,6,1,4,2,0,6,54,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1894,"        return new Property(this, getChronology().monthOfYear());
",0,0,0,3,6,1,4,2,0,6,57,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1903,"        return new Property(this, getChronology().weekOfWeekyear());
",0,0,0,3,6,1,4,2,0,6,60,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1912,"        return new Property(this, getChronology().dayOfYear());
",0,0,0,3,6,1,4,2,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1921,"        return new Property(this, getChronology().dayOfMonth());
",0,0,0,3,6,1,4,2,0,6,56,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1930,"        return new Property(this, getChronology().dayOfWeek());
",0,0,0,3,6,1,4,2,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1941,"        return new Property(this, getChronology().hourOfDay());
",0,0,0,3,6,1,4,2,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1950,"        return new Property(this, getChronology().minuteOfDay());
",0,0,0,3,6,1,4,2,0,6,57,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1959,"        return new Property(this, getChronology().minuteOfHour());
",0,0,0,3,6,1,4,2,0,6,58,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1968,"        return new Property(this, getChronology().secondOfDay());
",0,0,0,3,6,1,4,2,0,6,57,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1977,"        return new Property(this, getChronology().secondOfMinute());
",0,0,0,3,6,1,4,2,0,6,60,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1986,"        return new Property(this, getChronology().millisOfDay());
",0,0,0,3,6,1,4,2,0,6,57,5,0.00000,0
defect4j,time,org/joda/time/DateTime,12,1995,"        return new Property(this, getChronology().millisOfSecond());
",0,0,0,3,6,1,4,2,0,6,60,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,554,"        OffsetMillisProvider(long offsetMillis) {
",4,0,0,1,3,0,0,0,0,4,41,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,555,"            iMillis = offsetMillis;
",4,0,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,556,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,563,"            return System.currentTimeMillis() + iMillis;
",2,1,0,1,2,1,4,0,0,7,44,5,0.00000,0
defect4j,time,org/joda/time/Instant,12,108,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/Instant,12,109,"        iMillis = DateTimeUtils.currentTimeMillis();
",2,0,0,1,2,0,4,0,0,7,44,4,0.00000,0
defect4j,time,org/joda/time/Instant,12,110,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/Instant,12,132,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/Instant,12,133,"        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
",2,0,0,2,4,0,8,2,0,12,89,4,0.00000,0
defect4j,time,org/joda/time/Instant,12,134,"        iMillis = converter.getInstantMillis(instant, ISOChronology.getInstanceUTC());
",2,0,0,2,4,0,10,0,0,13,78,4,0.00000,0
defect4j,time,org/joda/time/Instant,12,135,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/Instant,12,73,"        return new Instant();
",0,0,0,1,2,1,0,2,0,2,21,6,0.00000,0
defect4j,time,org/joda/time/Instant,12,87,"        return parse(str, ISODateTimeFormat.dateTimeParser());
",0,0,0,2,4,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/Instant,12,98,"        return formatter.parseDateTime(str).toInstant();
",0,0,0,2,4,1,8,0,0,8,48,5,0.00000,0
defect4j,time,org/joda/time/Instant,12,144,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/Instant,12,157,"        return (newMillis == iMillis ? this : new Instant(newMillis));
",6,1,0,2,4,1,0,2,0,9,62,6,0.00000,0
defect4j,time,org/joda/time/Instant,12,171,"        if (durationToAdd == 0 || scalar == 0) {
",4,3,0,1,3,0,0,0,0,7,40,4,0.00000,0
defect4j,time,org/joda/time/Instant,12,172,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/Instant,12,174,"        long instant = getChronology().add(getMillis(), durationToAdd, scalar);
",2,0,0,3,6,0,10,0,0,12,71,5,0.00000,0
defect4j,time,org/joda/time/Instant,12,175,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/Instant,12,189,"        if (durationToAdd == null || scalar == 0) {
",4,3,0,1,3,0,0,0,0,7,43,4,0.00000,0
defect4j,time,org/joda/time/Instant,12,190,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/Instant,12,192,"        return withDurationAdded(durationToAdd.getMillis(), scalar);
",0,0,0,2,4,1,8,0,0,8,60,5,0.00000,0
defect4j,time,org/joda/time/Instant,12,206,"        return withDurationAdded(duration, 1);
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/Instant,12,219,"        return withDurationAdded(duration, 1);
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/Instant,12,233,"        return withDurationAdded(duration, -1);
",0,0,0,1,2,1,4,0,0,5,39,5,0.00000,0
defect4j,time,org/joda/time/Instant,12,246,"        return withDurationAdded(duration, -1);
",0,0,0,1,2,1,4,0,0,5,39,5,0.00000,0
defect4j,time,org/joda/time/Instant,12,268,"        return ISOChronology.getInstanceUTC();
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/Instant,12,288,"        return new DateTime(getMillis(), ISOChronology.getInstance());
",0,0,0,3,6,1,6,2,0,8,62,5,0.00000,0
defect4j,time,org/joda/time/Instant,12,315,"        return toDateTime();
",0,0,0,1,2,1,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/Instant,12,334,"        return new MutableDateTime(getMillis(), ISOChronology.getInstance());
",0,0,0,3,6,1,6,2,0,8,69,5,0.00000,0
defect4j,time,org/joda/time/Instant,12,361,"        return toMutableDateTime();
",0,0,0,1,2,1,2,0,0,2,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,12,42,"        return GJLocaleSymbols.forLocale(locale).monthOfYearValueToText(fieldValue);
",0,0,0,2,4,1,10,0,0,10,76,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,12,47,"        return GJLocaleSymbols.forLocale(locale).monthOfYearValueToShortText(fieldValue);
",0,0,0,2,4,1,10,0,0,10,81,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,12,52,"        return GJLocaleSymbols.forLocale(locale).monthOfYearTextToValue(text);
",0,0,0,2,4,1,10,0,0,10,70,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,12,57,"        return GJLocaleSymbols.forLocale(locale).getMonthMaxTextLength();
",0,0,0,2,4,1,8,0,0,8,65,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,12,62,"        return GJLocaleSymbols.forLocale(locale).getMonthMaxShortTextLength();
",0,0,0,2,4,1,8,0,0,8,70,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,59,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,92,"        if (months == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,93,"            return instant; // the easy case
",2,0,0,0,0,1,0,0,0,2,32,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,98,"        long timePart = iChronology.getMillisOfDay(instant);
",2,0,0,1,2,0,6,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,103,"        int thisYear = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,104,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);
",2,0,0,1,2,0,8,0,0,10,62,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,112,"        int monthToUse = thisMonth - 1 + months;
",6,2,0,0,0,0,0,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,113,"        if (monthToUse >= 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,114,"            yearToUse = thisYear + (monthToUse / iMax);
",8,2,0,1,2,0,0,0,0,11,43,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,115,"            monthToUse = (monthToUse % iMax) + 1;
",6,2,0,1,2,0,0,0,0,9,37,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,117,"            yearToUse = thisYear + (monthToUse / iMax) - 1;
",8,3,0,1,2,0,0,0,0,12,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,118,"            monthToUse = Math.abs(monthToUse);
",2,0,0,1,2,0,6,0,0,9,34,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,119,"            int remMonthToUse = monthToUse % iMax;
",6,1,0,0,0,0,0,0,0,7,38,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,121,"            if (remMonthToUse == 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,122,"                remMonthToUse = iMax;
",4,0,0,0,0,0,0,0,0,5,21,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,124,"            monthToUse = iMax - remMonthToUse + 1;
",6,2,0,0,0,0,0,0,0,9,38,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,126,"            if (monthToUse == 1) {
",2,1,0,1,3,0,0,0,0,3,22,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,127,"                yearToUse += 1;
",2,0,0,0,0,0,0,0,0,3,15,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,136,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);
",2,0,0,1,2,0,10,0,0,12,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,137,"        int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);
",2,0,0,1,2,0,8,0,0,10,67,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,138,"        if (dayToUse > maxDay) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,139,"            dayToUse = maxDay;
",4,0,0,0,0,0,0,0,0,5,18,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,144,"        long datePart =
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,146,"        return datePart + timePart;
",4,1,0,0,0,1,0,0,0,5,27,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,151,"        int i_months = (int)months;
",4,0,0,1,2,0,0,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,152,"        if (i_months == months) {
",4,1,0,1,3,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,153,"            return add(instant, i_months);
",0,0,0,1,2,1,6,0,0,6,30,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,158,"        long timePart = iChronology.getMillisOfDay(instant);
",2,0,0,1,2,0,6,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,160,"        int thisYear = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,161,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);
",2,0,0,1,2,0,8,0,0,10,62,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,164,"        long monthToUse = thisMonth - 1 + months;
",6,2,0,0,0,0,0,0,0,8,41,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,165,"        if (monthToUse >= 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,166,"            yearToUse = thisYear + (monthToUse / iMax);
",8,2,0,1,2,0,0,0,0,11,43,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,167,"            monthToUse = (monthToUse % iMax) + 1;
",6,2,0,1,2,0,0,0,0,9,37,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,169,"            yearToUse = thisYear + (monthToUse / iMax) - 1;
",8,3,0,1,2,0,0,0,0,12,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,170,"            monthToUse = Math.abs(monthToUse);
",2,0,0,1,2,0,6,0,0,9,34,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,171,"            int remMonthToUse = (int)(monthToUse % iMax);
",6,1,0,2,4,0,0,0,0,7,45,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,172,"            if (remMonthToUse == 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,173,"                remMonthToUse = iMax;
",4,0,0,0,0,0,0,0,0,5,21,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,175,"            monthToUse = iMax - remMonthToUse + 1;
",6,2,0,0,0,0,0,0,0,9,38,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,176,"            if (monthToUse == 1) {
",2,1,0,1,3,0,0,0,0,3,22,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,177,"                yearToUse += 1;
",2,0,0,0,0,0,0,0,0,3,15,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,181,"        if (yearToUse < iChronology.getMinYear() ||
",2,2,0,1,3,0,4,0,0,8,43,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,184,"            throw new IllegalArgumentException
",0,0,0,0,0,0,0,2,0,2,34,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,188,"        int i_yearToUse = (int)yearToUse;
",4,0,0,1,2,0,0,0,0,4,33,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,189,"        int i_monthToUse = (int)monthToUse;
",4,0,0,1,2,0,0,0,0,4,35,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,191,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);
",2,0,0,1,2,0,10,0,0,12,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,192,"        int maxDay = iChronology.getDaysInYearMonth(i_yearToUse, i_monthToUse);
",2,0,0,1,2,0,8,0,0,10,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,193,"        if (dayToUse > maxDay) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,194,"            dayToUse = maxDay;
",4,0,0,0,0,0,0,0,0,5,18,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,197,"        long datePart =
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,199,"        return datePart + timePart;
",4,1,0,0,0,1,0,0,0,5,27,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,206,"        if (valueToAdd == 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,207,"            return values;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,209,"        if (partial.size() > 0 && partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear()) && fieldIndex == 0) {
",2,4,0,5,11,0,14,0,0,20,111,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,211,"            int curMonth0 = partial.getValue(0) - 1;
",2,1,0,1,2,0,4,0,0,7,40,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,212,"            int newMonth = ((curMonth0 + (valueToAdd % 12) + 12) % 12) + 1;
",6,4,0,3,6,0,0,0,0,10,63,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,213,"            return set(partial, 0, values, newMonth);
",0,0,0,1,2,1,8,0,0,8,41,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,215,"        if (DateTimeUtils.isContiguous(partial)) {
",0,0,0,2,5,0,6,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,216,"            long instant = 0L;
",2,0,0,0,0,0,0,0,0,2,18,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,217,"            for (int i = 0, isize = partial.size(); i < isize; i++) {
",10,1,0,2,5,0,4,0,0,16,57,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,218,"                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
",2,0,1,4,8,0,14,0,0,21,80,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,220,"            instant = add(instant, valueToAdd);
",2,0,0,1,2,0,6,0,0,9,35,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,221,"            return iChronology.get(partial, instant);
",0,0,0,1,2,1,8,0,0,8,41,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,223,"            return super.add(partial, fieldIndex, values, valueToAdd);
",10,0,0,1,2,1,0,0,0,10,58,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,238,"        return set(instant, FieldUtils.getWrappedValue(get(instant), months, MIN, iMax));
",0,0,0,3,6,1,18,0,0,18,81,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,243,"        if (minuendInstant < subtrahendInstant) {
",4,1,0,1,3,0,0,0,0,5,41,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,244,"            return -getDifference(subtrahendInstant, minuendInstant);
",0,0,0,1,2,1,6,0,0,7,57,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,247,"        int minuendYear = iChronology.getYear(minuendInstant);
",2,0,0,1,2,0,6,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,248,"        int minuendMonth = iChronology.getMonthOfYear(minuendInstant, minuendYear);
",2,0,0,1,2,0,8,0,0,10,75,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,249,"        int subtrahendYear = iChronology.getYear(subtrahendInstant);
",2,0,0,1,2,0,6,0,0,8,60,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,250,"        int subtrahendMonth = iChronology.getMonthOfYear(subtrahendInstant, subtrahendYear);
",2,0,0,1,2,0,8,0,0,10,84,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,252,"        long difference = (minuendYear - subtrahendYear) * ((long) iMax) + minuendMonth - subtrahendMonth;
",12,4,0,3,6,0,0,0,0,16,98,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,256,"        int minuendDom = iChronology.getDayOfMonth
",2,0,0,0,0,0,4,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,258,"        if (minuendDom == iChronology.getDaysInYearMonth(minuendYear, minuendMonth)) {
",2,1,0,2,5,0,8,0,0,11,78,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,260,"            int subtrahendDom = iChronology.getDayOfMonth
",2,0,0,0,0,0,4,0,0,6,45,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,262,"            if (subtrahendDom > minuendDom) {
",4,1,0,1,3,0,0,0,0,5,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,266,"                subtrahendInstant = iChronology.dayOfMonth().set(subtrahendInstant, minuendDom);
",2,0,0,2,4,0,10,0,0,13,80,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,271,"        long minuendRem = minuendInstant
",4,0,0,0,0,0,0,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,273,"        long subtrahendRem = subtrahendInstant
",4,0,0,0,0,0,0,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,276,"        if (minuendRem < subtrahendRem) {
",4,1,0,1,3,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,277,"            difference--;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,280,"        return difference;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,306,"            thisDom = maxDom;
",4,0,0,0,0,0,0,0,0,5,17,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,320,"        int thisYear = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,321,"        if (iChronology.isLeapYear(thisYear)) {
",0,0,0,2,5,0,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,322,"            return (iChronology.getMonthOfYear(instant, thisYear) == iLeapMonth);
",2,1,0,2,4,1,8,0,0,11,69,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,324,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,329,"        return isLeap(instant) ? 1 : 0;
",0,0,0,1,2,1,4,0,0,4,31,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,339,"        return MIN;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,344,"        return iMax;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,349,"        int year = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,350,"        int month = iChronology.getMonthOfYear(instant, year);
",2,0,0,1,2,0,8,0,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,351,"        return iChronology.getYearMonthMillis(year, month);
",0,0,0,1,2,1,8,0,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,356,"        return instant - roundFloor(instant);
",2,1,0,1,2,1,4,0,0,7,37,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,12,364,"        return iChronology.monthOfYear();
",0,0,0,1,2,1,4,0,0,4,33,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,12,91,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));
",0,0,0,2,4,1,10,0,0,10,84,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,12,118,"        if (minuendInstant < subtrahendInstant) {
",4,1,0,1,3,0,0,0,0,5,41,4,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,12,119,"            return -getDifferenceAsLong(subtrahendInstant, minuendInstant);
",0,0,0,1,2,1,6,0,0,7,63,6,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,12,122,"        long difference = (minuendInstant - subtrahendInstant) / iUnitMillis;
",8,2,0,1,2,0,0,0,0,10,69,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,12,123,"        if (add(subtrahendInstant, difference) < minuendInstant) {
",2,1,0,2,5,0,6,0,0,9,58,4,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,12,125,"                difference++;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,12,126,"            } while (add(subtrahendInstant, difference) <= minuendInstant);
",2,1,0,2,5,0,6,0,0,9,63,6,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,12,127,"            difference--;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,12,128,"        } else if (add(subtrahendInstant, difference) > minuendInstant) {
",2,1,0,2,6,0,6,0,0,9,65,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,12,130,"                difference--;
",2,0,0,0,0,0,0,0,0,3,13,9,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,12,131,"            } while (add(subtrahendInstant, difference) > minuendInstant);
",2,1,0,2,5,0,6,0,0,9,62,7,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,12,133,"        return difference;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,12,145,"        return iUnitMillis;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,52,"            throw new IllegalArgumentException(""The type must not be null"");
",0,0,0,1,2,0,0,2,0,4,64,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,62,"        return iType.getName();
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,94,"        return getAsText(get(instant), locale);
",0,0,0,2,4,1,8,0,0,8,39,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,106,"        return getAsText(instant, null);
",0,0,0,1,2,1,4,0,0,5,32,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,121,"        return getAsText(fieldValue, locale);
",0,0,0,1,2,1,6,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,136,"        return getAsText(partial, partial.get(getType()), locale);
",0,0,0,3,6,1,12,0,0,12,58,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,153,"        return Integer.toString(fieldValue);
",0,0,0,1,2,1,6,0,0,6,36,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,168,"        return getAsShortText(get(instant), locale);
",0,0,0,2,4,1,8,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,180,"        return getAsShortText(instant, null);
",0,0,0,1,2,1,4,0,0,5,37,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,195,"        return getAsShortText(fieldValue, locale);
",0,0,0,1,2,1,6,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,210,"        return getAsShortText(partial, partial.get(getType()), locale);
",0,0,0,3,6,1,12,0,0,12,63,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,227,"        return getAsText(fieldValue, locale);
",0,0,0,1,2,1,6,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,253,"        return getDurationField().add(instant, value);
",0,0,0,2,4,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,267,"        return getDurationField().add(instant, value);
",0,0,0,2,4,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,298,"        if (valueToAdd == 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,299,"            return values;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,304,"        DateTimeField nextField = null;
",2,0,0,0,0,0,0,2,0,4,31,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,306,"        while (valueToAdd > 0) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,307,"            int max = getMaximumValue(instant, values);
",2,0,0,1,2,0,6,0,0,8,43,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,308,"            long proposed = values[fieldIndex] + valueToAdd;
",4,1,1,1,2,0,0,0,0,9,48,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,309,"            if (proposed <= max) {
",4,1,0,1,3,0,0,0,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,310,"                values[fieldIndex] = (int) proposed;
",2,0,1,2,4,0,0,0,0,7,36,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,311,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,313,"            if (nextField == null) {
",2,1,0,1,3,0,0,0,0,3,24,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,314,"                if (fieldIndex == 0) {
",2,1,0,1,3,0,0,0,0,3,22,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,315,"                    throw new IllegalArgumentException(""Maximum value exceeded for add"");
",0,0,0,1,2,0,0,2,0,3,69,11,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,317,"                nextField = instant.getField(fieldIndex - 1);
",4,1,0,1,2,0,4,0,0,10,45,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,319,"                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {
",0,1,0,5,11,0,10,0,0,11,82,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,320,"                    throw new IllegalArgumentException(""Fields invalid for add"");
",0,0,0,1,2,0,0,2,0,3,61,11,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,323,"            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add
",4,2,1,2,4,0,0,0,0,11,74,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,324,"            values = nextField.add(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field
",4,1,0,1,2,0,8,0,0,14,90,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,325,"            values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero
",0,0,1,2,4,0,6,0,0,11,83,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,326,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,327,"        while (valueToAdd < 0) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,328,"            int min = getMinimumValue(instant, values);
",2,0,0,1,2,0,6,0,0,8,43,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,329,"            long proposed = values[fieldIndex] + valueToAdd;
",4,1,1,1,2,0,0,0,0,9,48,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,330,"            if (proposed >= min) {
",4,1,0,1,3,0,0,0,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,331,"                values[fieldIndex] = (int) proposed;
",2,0,1,2,4,0,0,0,0,7,36,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,332,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,334,"            if (nextField == null) {
",2,1,0,1,3,0,0,0,0,3,24,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,335,"                if (fieldIndex == 0) {
",2,1,0,1,3,0,0,0,0,3,22,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,336,"                    throw new IllegalArgumentException(""Maximum value exceeded for add"");
",0,0,0,1,2,0,0,2,0,3,69,11,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,338,"                nextField = instant.getField(fieldIndex - 1);
",4,1,0,1,2,0,4,0,0,10,45,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,339,"                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {
",0,1,0,5,11,0,10,0,0,11,82,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,340,"                    throw new IllegalArgumentException(""Fields invalid for add"");
",0,0,0,1,2,0,0,2,0,3,61,11,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,343,"            valueToAdd -= (min - 1) - values[fieldIndex];  // reduce the amount to add
",4,2,1,2,4,0,0,0,0,11,74,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,344,"            values = nextField.add(instant, fieldIndex - 1, values, -1);  // subtract 1 from next bigger field
",4,1,0,1,2,0,8,0,0,15,98,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,345,"            values[fieldIndex] = getMaximumValue(instant, values);  // reset this field to max value
",0,0,1,2,4,0,6,0,0,11,88,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,346,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,348,"        return set(instant, fieldIndex, values, values[fieldIndex]);  // adjusts smaller fields
",0,0,1,2,4,1,8,0,0,12,87,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,379,"        if (valueToAdd == 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,380,"            return values;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,385,"        DateTimeField nextField = null;
",2,0,0,0,0,0,0,2,0,4,31,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,387,"        while (valueToAdd > 0) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,388,"            int max = getMaximumValue(instant, values);
",2,0,0,1,2,0,6,0,0,8,43,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,389,"            long proposed = values[fieldIndex] + valueToAdd;
",4,1,1,1,2,0,0,0,0,9,48,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,390,"            if (proposed <= max) {
",4,1,0,1,3,0,0,0,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,391,"                values[fieldIndex] = (int) proposed;
",2,0,1,2,4,0,0,0,0,7,36,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,392,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,394,"            if (nextField == null) {
",2,1,0,1,3,0,0,0,0,3,24,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,395,"                if (fieldIndex == 0) {
",2,1,0,1,3,0,0,0,0,3,22,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,396,"                    valueToAdd -= (max + 1) - values[fieldIndex];
",4,2,1,2,4,0,0,0,0,11,45,10,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,397,"                    values[fieldIndex] = getMinimumValue(instant, values);
",0,0,1,2,4,0,6,0,0,11,54,10,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,398,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,400,"                nextField = instant.getField(fieldIndex - 1);
",4,1,0,1,2,0,4,0,0,10,45,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,402,"                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {
",0,1,0,5,11,0,10,0,0,11,82,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,403,"                    throw new IllegalArgumentException(""Fields invalid for add"");
",0,0,0,1,2,0,0,2,0,3,61,11,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,406,"            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add
",4,2,1,2,4,0,0,0,0,11,74,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,407,"            values = nextField.addWrapPartial(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field
",4,1,0,1,2,0,8,0,0,14,101,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,408,"            values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero
",0,0,1,2,4,0,6,0,0,11,83,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,409,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,410,"        while (valueToAdd < 0) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,411,"            int min = getMinimumValue(instant, values);
",2,0,0,1,2,0,6,0,0,8,43,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,412,"            long proposed = values[fieldIndex] + valueToAdd;
",4,1,1,1,2,0,0,0,0,9,48,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,413,"            if (proposed >= min) {
",4,1,0,1,3,0,0,0,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,414,"                values[fieldIndex] = (int) proposed;
",2,0,1,2,4,0,0,0,0,7,36,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,415,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,417,"            if (nextField == null) {
",2,1,0,1,3,0,0,0,0,3,24,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,418,"                if (fieldIndex == 0) {
",2,1,0,1,3,0,0,0,0,3,22,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,419,"                    valueToAdd -= (min - 1) - values[fieldIndex];
",4,2,1,2,4,0,0,0,0,11,45,10,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,420,"                    values[fieldIndex] = getMaximumValue(instant, values);
",0,0,1,2,4,0,6,0,0,11,54,10,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,421,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,423,"                nextField = instant.getField(fieldIndex - 1);
",4,1,0,1,2,0,4,0,0,10,45,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,424,"                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {
",0,1,0,5,11,0,10,0,0,11,82,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,425,"                    throw new IllegalArgumentException(""Fields invalid for add"");
",0,0,0,1,2,0,0,2,0,3,61,11,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,428,"            valueToAdd -= (min - 1) - values[fieldIndex];  // reduce the amount to add
",4,2,1,2,4,0,0,0,0,11,74,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,429,"            values = nextField.addWrapPartial(instant, fieldIndex - 1, values, -1);  // subtract 1 from next bigger field
",4,1,0,1,2,0,8,0,0,15,109,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,430,"            values[fieldIndex] = getMaximumValue(instant, values);  // reset this field to max value
",0,0,1,2,4,0,6,0,0,11,88,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,431,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,433,"        return set(instant, fieldIndex, values, values[fieldIndex]);  // adjusts smaller fields
",0,0,1,2,4,1,8,0,0,12,87,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,461,"        int current = get(instant);
",2,0,0,1,2,0,4,0,0,6,27,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,462,"        int wrapped = FieldUtils.getWrappedValue
",2,0,0,0,0,0,4,0,0,6,40,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,464,"        return set(instant, wrapped);
",0,0,0,1,2,1,6,0,0,6,29,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,495,"        int current = values[fieldIndex];
",2,0,1,1,2,0,0,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,496,"        int wrapped = FieldUtils.getWrappedValue
",2,0,0,0,0,0,4,0,0,6,40,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,498,"        return set(instant, fieldIndex, values, wrapped);  // adjusts smaller fields
",0,0,0,1,2,1,10,0,0,10,76,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,522,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,75,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,545,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,81,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,585,"        FieldUtils.verifyValueBounds(this, newValue, getMinimumValue(partial, values), getMaximumValue(partial, values));
",0,0,0,3,6,0,18,0,0,18,113,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,586,"        values[fieldIndex] = newValue;
",2,0,1,1,2,0,0,0,0,7,30,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,589,"        for (int i = fieldIndex + 1; i < partial.size(); i++) {
",8,2,0,2,5,0,4,0,0,15,55,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,590,"            DateTimeField field = partial.getField(i);
",2,0,0,1,2,0,6,2,0,10,42,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,591,"            if (values[i] > field.getMaximumValue(partial, values)) {
",0,1,1,3,7,0,8,0,0,13,57,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,592,"                values[i] = field.getMaximumValue(partial, values);
",0,0,1,2,4,0,8,0,0,13,51,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,594,"            if (values[i] < field.getMinimumValue(partial, values)) {
",0,1,1,3,7,0,8,0,0,13,57,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,595,"                values[i] = field.getMinimumValue(partial, values);
",0,0,1,2,4,0,8,0,0,13,51,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,598,"        return values;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,618,"        int value = convertText(text, locale);
",2,0,0,1,2,0,6,0,0,8,38,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,619,"        return set(instant, value);
",0,0,0,1,2,1,6,0,0,6,27,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,635,"        return set(instant, text, null);
",0,0,0,1,2,1,6,0,0,7,32,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,654,"        int value = convertText(text, locale);
",2,0,0,1,2,0,6,0,0,8,38,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,655,"        return set(instant, fieldIndex, values, value);
",0,0,0,1,2,1,10,0,0,10,47,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,668,"            return Integer.parseInt(text);
",0,0,0,1,2,1,6,0,0,6,30,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,669,"        } catch (NumberFormatException ex) {
",2,0,0,1,4,0,0,2,0,4,36,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,670,"            throw new IllegalFieldValueException(getType(), text);
",2,0,0,2,4,0,2,2,0,6,54,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,704,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,716,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,746,"        return getMinimumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,758,"        return getMinimumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,772,"        return getMinimumValue(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,804,"        return getMaximumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,818,"        return getMaximumValue(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,829,"        int max = getMaximumValue();
",2,0,0,1,2,0,2,0,0,4,28,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,830,"        if (max >= 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,831,"            if (max < 10) {
",2,1,0,1,3,0,0,0,0,3,15,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,832,"                return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,833,"            } else if (max < 100) {
",2,1,0,1,4,0,0,0,0,3,23,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,834,"                return 2;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,835,"            } else if (max < 1000) {
",2,1,0,1,4,0,0,0,0,3,24,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,836,"                return 3;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,839,"        return Integer.toString(max).length();
",0,0,0,2,4,1,8,0,0,8,38,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,850,"        return getMaximumTextLength(locale);
",0,0,0,1,2,1,4,0,0,4,36,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,903,"        long floor = roundFloor(instant);
",2,0,0,1,2,0,4,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,904,"        long ceiling = roundCeiling(instant);
",2,0,0,1,2,0,4,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,906,"        long diffFromFloor = instant - floor;
",6,1,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,907,"        long diffToCeiling = ceiling - instant;
",6,1,0,0,0,0,0,0,0,7,39,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,909,"        if (diffFromFloor <= diffToCeiling) {
",4,1,0,1,3,0,0,0,0,5,37,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,911,"            return floor;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,913,"            return ceiling;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,927,"        long floor = roundFloor(instant);
",2,0,0,1,2,0,4,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,928,"        long ceiling = roundCeiling(instant);
",2,0,0,1,2,0,4,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,930,"        long diffFromFloor = instant - floor;
",6,1,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,931,"        long diffToCeiling = ceiling - instant;
",6,1,0,0,0,0,0,0,0,7,39,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,933,"        if (diffToCeiling <= diffFromFloor) {
",4,1,0,1,3,0,0,0,0,5,37,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,935,"            return ceiling;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,937,"            return floor;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,955,"        long floor = roundFloor(instant);
",2,0,0,1,2,0,4,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,956,"        long ceiling = roundCeiling(instant);
",2,0,0,1,2,0,4,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,958,"        long diffFromFloor = instant - floor;
",6,1,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,959,"        long diffToCeiling = ceiling - instant;
",6,1,0,0,0,0,0,0,0,7,39,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,961,"        if (diffFromFloor < diffToCeiling) {
",4,1,0,1,3,0,0,0,0,5,36,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,963,"            return floor;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,964,"        } else if (diffToCeiling < diffFromFloor) {
",4,1,0,1,4,0,0,0,0,5,43,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,966,"            return ceiling;
",2,0,0,0,0,1,0,0,0,2,15,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,970,"            if ((get(ceiling) & 1) == 0) {
",0,2,0,3,7,0,4,0,0,6,30,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,971,"                return ceiling;
",2,0,0,0,0,1,0,0,0,2,15,9,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,973,"            return floor;
",2,0,0,0,0,1,0,0,0,2,13,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,994,"        return instant - roundFloor(instant);
",2,1,0,1,2,1,4,0,0,7,37,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,12,1003,"        return ""DateTimeField["" + getName() + ']';
",0,1,0,2,4,1,2,0,0,5,42,4,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,12,156,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,12,164,"            return ImpreciseDateTimeField.this
",2,0,0,0,0,1,0,0,0,2,34,7,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,12,169,"            return ImpreciseDateTimeField.this
",2,0,0,0,0,1,0,0,0,2,34,7,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,12,174,"            return ImpreciseDateTimeField.this.add(instant, value) - instant;
",4,1,0,1,2,1,6,0,0,11,65,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,12,178,"            return ImpreciseDateTimeField.this.add(instant, value) - instant;
",4,1,0,1,2,1,6,0,0,11,65,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,12,182,"            return ImpreciseDateTimeField.this.add(instant, value);
",2,0,0,1,2,1,6,0,0,8,55,6,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,12,186,"            return ImpreciseDateTimeField.this.add(instant, value);
",2,0,0,1,2,1,6,0,0,8,55,6,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,12,190,"            return ImpreciseDateTimeField.this
",2,0,0,0,0,1,0,0,0,2,34,7,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,12,195,"            return ImpreciseDateTimeField.this
",2,0,0,0,0,1,0,0,0,2,34,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,12,49,"            throw new IllegalArgumentException(""The type must not be null"");
",0,0,0,1,2,0,0,2,0,4,64,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,12,59,"        return iType.getName();
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,12,79,"        return FieldUtils.safeToInt(getValueAsLong(duration));
",0,0,0,2,4,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,12,91,"        return duration / getUnitMillis();
",2,1,0,1,2,1,2,0,0,5,34,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,12,111,"        return FieldUtils.safeToInt(getValueAsLong(duration, instant));
",0,0,0,2,4,1,10,0,0,10,63,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,12,123,"        return value * getUnitMillis();  // safe
",2,1,0,1,2,1,2,0,0,5,40,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,12,135,"        return FieldUtils.safeMultiply(value, getUnitMillis());
",0,0,0,2,4,1,8,0,0,8,55,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,12,141,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));
",0,0,0,2,4,1,10,0,0,10,84,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,12,146,"        long otherMillis = otherField.getUnitMillis();
",2,0,0,1,2,0,4,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,12,147,"        long thisMillis = getUnitMillis();
",2,0,0,1,2,0,2,0,0,4,34,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,12,149,"        if (thisMillis == otherMillis) {
",4,1,0,1,3,0,0,0,0,5,32,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,12,150,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,12,152,"        if (thisMillis < otherMillis) {
",4,1,0,1,3,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,12,153,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,12,155,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,12,165,"        return ""DurationField["" + getName() + ']';
",0,1,0,2,4,1,2,0,0,5,42,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,12,38,"public abstract class BaseDurationField extends DurationField implements Serializable {
",2,0,0,0,1,2,0,4,0,8,87,1,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,134,"            throw new IllegalArgumentException
",0,0,0,0,0,0,0,2,0,2,34,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,144,"            return base.getZone();
",0,0,0,1,2,1,4,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,154,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);
",0,0,0,1,2,1,12,0,0,12,74,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,168,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,
",0,0,0,0,1,1,10,0,0,10,60,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,196,"        return super.equals(obj);
",4,0,0,1,2,1,0,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,206,"        return getClass().getName().hashCode() * 11 + getZone().hashCode() + getMinimumDaysInFirstWeek();
",0,3,0,6,12,1,12,0,0,15,97,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,217,"        StringBuilder sb = new StringBuilder(60);
",2,0,0,1,2,0,0,4,0,6,41,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,218,"        String name = getClass().getName();
",2,0,0,2,4,0,4,2,0,8,35,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,219,"        int index = name.lastIndexOf('.');
",2,0,0,1,2,0,4,0,0,7,34,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,220,"        if (index >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,221,"            name = name.substring(index + 1);
",4,1,0,1,2,0,4,0,0,10,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,223,"        sb.append(name);
",0,0,0,1,2,0,6,0,0,6,16,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,224,"        sb.append('[');
",0,0,0,1,3,0,4,0,0,5,15,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,225,"        DateTimeZone zone = getZone();
",2,0,0,1,2,0,2,2,0,6,30,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,226,"        if (zone != null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,227,"            sb.append(zone.getID());
",0,0,0,2,4,0,8,0,0,8,24,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,229,"        if (getMinimumDaysInFirstWeek() != 4) {
",0,1,0,2,5,0,2,0,0,3,39,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,230,"            sb.append("",mdfw="");
",0,0,0,1,2,0,4,0,0,5,20,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,231,"            sb.append(getMinimumDaysInFirstWeek());
",0,0,0,2,4,0,6,0,0,6,39,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,233,"        sb.append(']');
",0,0,0,1,3,0,4,0,0,5,15,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,234,"        return sb.toString();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,307,"        return 366;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,317,"        return isLeapYear(year) ? 366 : 365;
",0,0,0,1,2,1,4,0,0,4,36,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,348,"            return jan1millis - (jan1dayOfWeek - 1)
",4,2,0,1,2,1,0,0,0,6,39,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,371,"        long millis = getYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,34,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,372,"        millis += getTotalMillisByYearMonth(year, month);
",2,0,0,1,2,0,6,0,0,9,49,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,373,"        return millis;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,410,"            year--;
",2,0,0,0,0,0,0,0,0,3,7,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,415,"                oneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;
",6,1,0,0,0,0,0,0,0,8,50,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,477,"        return getDayOfYear(instant, getYear(instant));
",0,0,0,2,4,1,8,0,0,8,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,497,"        } else if (week > 51) {
",2,1,0,1,4,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,498,"            return getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));
",6,2,0,2,4,1,2,0,0,10,66,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,500,"            return year;
",2,0,0,0,0,1,0,0,0,2,12,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,518,"            return getWeeksInYear(year - 1);
",2,1,0,1,2,1,2,0,0,5,32,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,522,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,535,"            daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;
",8,1,0,0,0,0,0,0,0,10,63,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,544,"        return 1 + (int) ((daysSince19700101 + 3) % 7);
",2,3,0,3,6,1,0,0,0,5,47,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,565,"        return 31;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,575,"        int thisYear = getYear(instant);
",2,0,0,1,2,0,4,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,576,"        int thisMonth = getMonthOfYear(instant, thisYear);
",2,0,0,1,2,0,6,0,0,8,50,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,577,"        return getDaysInYearMonth(thisYear, thisMonth);
",0,0,0,1,2,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,590,"        return getDaysInMonthMax(instant);
",0,0,0,1,2,1,4,0,0,4,34,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,50,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,58,"        if (years == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,59,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,61,"        int thisYear = get(instant);
",2,0,0,1,2,0,4,0,0,6,28,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,62,"        int newYear = FieldUtils.safeAdd(thisYear, years);
",2,0,0,1,2,0,8,0,0,10,50,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,63,"        return set(instant, newYear);
",0,0,0,1,2,1,6,0,0,6,29,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,67,"        return add(instant, FieldUtils.safeToInt(years));
",0,0,0,2,4,1,10,0,0,10,49,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,71,"        if (years == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,72,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,75,"        int thisYear = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,76,"        int wrappedYear = FieldUtils.getWrappedValue
",2,0,0,0,0,0,4,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,78,"        return set(instant, wrappedYear);
",0,0,0,1,2,1,6,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,88,"        if (minuendInstant < subtrahendInstant) {
",4,1,0,1,3,0,0,0,0,5,41,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,89,"            return -iChronology.getYearDifference(subtrahendInstant, minuendInstant);
",0,0,0,1,2,1,8,0,0,9,73,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,91,"        return iChronology.getYearDifference(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,72,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,99,"        return iChronology.isLeapYear(get(instant));
",0,0,0,2,4,1,8,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,103,"        if (iChronology.isLeapYear(get(instant))) {
",0,0,0,3,7,0,8,0,0,8,43,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,104,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,106,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,123,"        return iChronology.getYearMillis(get(instant));
",0,0,0,2,4,1,8,0,0,8,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,137,"        return instant - roundFloor(instant);
",2,1,0,1,2,1,4,0,0,7,37,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,12,144,"        return iChronology.year();
",0,0,0,1,2,1,4,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,12,51,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,12,60,"        if (iChronology.getYear(instant) <= 0) {
",0,1,0,2,5,0,6,0,0,7,40,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,12,61,"            return DateTimeConstants.BCE;
",4,0,0,0,0,1,0,0,0,4,29,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,12,63,"            return DateTimeConstants.CE;
",4,0,0,0,0,1,0,0,0,4,28,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,12,68,"        return GJLocaleSymbols.forLocale(locale).eraValueToText(fieldValue);
",0,0,0,2,4,1,10,0,0,10,68,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,12,80,"        FieldUtils.verifyValueBounds(this, era, DateTimeConstants.BCE, DateTimeConstants.CE);
",8,0,0,1,2,0,6,0,0,14,85,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,12,82,"        int oldEra = get(instant);
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,12,83,"        if (oldEra != era) {
",4,1,0,1,3,0,0,0,0,5,20,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,12,84,"            int year = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,40,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,12,85,"            return iChronology.setYear(instant, -year);
",2,0,0,1,2,1,6,0,0,9,43,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,12,87,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,12,92,"        return set(instant, GJLocaleSymbols.forLocale(locale).eraTextToValue(text));
",0,0,0,3,6,1,14,0,0,14,76,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,12,96,"        if (get(instant) == DateTimeConstants.CE) {
",4,1,0,2,5,0,4,0,0,9,43,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,12,97,"            return iChronology.setYear(0, 1);
",0,0,0,1,2,1,4,0,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,12,99,"            return Long.MIN_VALUE;
",4,0,0,0,0,1,0,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,12,104,"        if (get(instant) == DateTimeConstants.BCE) {
",4,1,0,2,5,0,4,0,0,9,44,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,12,105,"            return iChronology.setYear(0, 1);
",0,0,0,1,2,1,4,0,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,12,107,"            return Long.MAX_VALUE;
",4,0,0,0,0,1,0,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,12,113,"        return roundFloor(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,12,118,"        return roundFloor(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,12,123,"        return roundFloor(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,12,135,"        return DateTimeConstants.BCE;
",4,0,0,0,0,1,0,0,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,12,139,"        return DateTimeConstants.CE;
",4,0,0,0,0,1,0,0,0,4,28,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,12,143,"        return GJLocaleSymbols.forLocale(locale).getEraMaxTextLength();
",0,0,0,2,4,1,8,0,0,8,63,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,12,150,"        return iChronology.era();
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,12,79,"        return iType;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,12,83,"        return iType.getName();
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,12,101,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,12,110,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,12,119,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,12,128,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,12,137,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,12,146,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,12,155,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,12,164,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,12,173,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,12,182,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,12,191,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,12,200,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,12,209,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,12,227,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,12,238,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,12,239,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,12,240,"        } else if (obj instanceof UnsupportedDurationField) {
",2,0,0,1,4,0,0,2,0,4,53,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,12,241,"            UnsupportedDurationField other = (UnsupportedDurationField) obj;
",4,0,0,1,2,0,0,4,0,8,64,7,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,12,242,"            if (other.getName() == null) {
",0,1,0,2,5,0,4,0,0,5,30,7,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,12,243,"                return (getName() == null);
",0,1,0,2,4,1,2,0,0,4,27,10,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,12,245,"            return (other.getName().equals(getName()));
",0,0,0,4,8,1,8,0,0,8,43,9,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,12,247,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,12,256,"        return getName().hashCode();
",0,0,0,2,4,1,4,0,0,4,28,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,12,265,"        return ""UnsupportedDurationField["" + getName() + ']';
",0,1,0,2,4,1,2,0,0,5,53,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,12,272,"        return getInstance(iType);
",0,0,0,1,2,1,4,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,12,276,"        return new UnsupportedOperationException(iType + "" field is unsupported"");
",2,1,0,1,2,1,0,2,0,6,74,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,12,32,"public final class UnsupportedDurationField extends DurationField implements Serializable {
",2,0,0,0,1,2,0,4,0,8,91,1,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,90,"        return getInstance(DateTimeZone.getDefault(), 4);
",0,0,0,2,4,1,6,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,112,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,123,"            } catch (ArrayIndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,44,8,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,124,"                throw new IllegalArgumentException
",0,0,0,0,0,0,0,2,0,2,34,11,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,155,"        Chronology base = getBase();
",2,0,0,1,2,0,2,2,0,6,28,4,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,156,"        int minDays = getMinimumDaysInFirstWeek();
",2,0,0,1,2,0,2,0,0,4,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,157,"        minDays = (minDays == 0 ? 4 : minDays);  // handle rename of BaseGJChronology
",6,1,0,1,2,0,0,0,0,8,77,4,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,158,"        return base == null ?
",2,1,0,0,0,1,0,0,0,3,21,5,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,181,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,182,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,184,"        if (zone == getZone()) {
",2,1,0,2,5,0,2,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,185,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,12,187,"        return getInstance(zone);
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,129,"        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];
",2,1,1,1,2,1,0,0,0,5,43,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,148,"        int minuendYear = getYear(minuendInstant);
",2,0,0,1,2,0,4,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,149,"        int subtrahendYear = getYear(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,152,"        long minuendRem = minuendInstant - getYearMillis(minuendYear);
",4,1,0,1,2,0,4,0,0,9,62,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,153,"        long subtrahendRem = subtrahendInstant - getYearMillis(subtrahendYear);
",4,1,0,1,2,0,4,0,0,9,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,156,"        if (subtrahendRem >= FEB_29) {
",4,1,0,1,3,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,157,"            if (isLeapYear(subtrahendYear)) {
",0,0,0,2,5,0,4,0,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,158,"                if (!isLeapYear(minuendYear)) {
",0,0,0,2,5,0,4,0,0,5,31,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,159,"                    subtrahendRem -= DateTimeConstants.MILLIS_PER_DAY;
",6,0,0,0,0,0,0,0,0,7,50,10,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,161,"            } else if (minuendRem >= FEB_29 && isLeapYear(minuendYear)) {
",4,2,0,2,6,0,4,0,0,10,61,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,162,"                minuendRem -= DateTimeConstants.MILLIS_PER_DAY;
",6,0,0,0,0,0,0,0,0,7,47,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,166,"        int difference = minuendYear - subtrahendYear;
",6,1,0,0,0,0,0,0,0,7,46,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,167,"        if (minuendRem < subtrahendRem) {
",4,1,0,1,3,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,168,"            difference--;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,170,"        return difference;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,180,"            if (isLeapYear(thisYear)) {
",0,0,0,2,5,0,4,0,0,4,27,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,182,"                if (!isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,5,24,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,184,"                    dayOfYear--;
",2,0,0,0,0,0,0,0,0,3,12,10,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,188,"                if (isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,4,23,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,12,190,"                    dayOfYear++;
",2,0,0,0,0,0,0,0,0,3,12,10,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,82,"    private UnsupportedDateTimeField(DateTimeFieldType type, DurationField durationField) {
",6,0,0,1,3,1,0,4,0,11,87,2,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,83,"        if (type == null || durationField == null) {
",4,3,0,1,3,0,0,0,0,7,44,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,84,"            throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,8,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,86,"        iType = type;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,87,"        iDurationField = durationField;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,88,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,55,"        if (cCache == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,56,"            cCache = new HashMap<DateTimeFieldType, UnsupportedDateTimeField>(7);
",2,0,0,1,2,0,0,6,0,9,69,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,57,"            field = null;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,59,"            field = cCache.get(type);
",2,0,0,1,2,0,6,0,0,9,25,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,60,"            if (field != null && field.getDurationField() != durationField) {
",4,3,0,2,5,0,4,0,0,11,65,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,61,"                field = null;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,64,"        if (field == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,65,"            field = new UnsupportedDateTimeField(type, durationField);
",6,0,0,1,2,0,0,2,0,9,58,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,66,"            cCache.put(type, field);
",0,0,0,1,2,0,8,0,0,8,24,7,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,68,"        return field;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,95,"        return iType;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,99,"        return iType.getName();
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,108,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,117,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,126,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,135,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,144,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,153,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,162,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,171,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,180,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,189,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,198,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,207,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,216,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,225,"        return getDurationField().add(instant, value);
",0,0,0,2,4,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,234,"        return getDurationField().add(instant, value);
",0,0,0,2,4,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,243,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,252,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,261,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,270,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,279,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,75,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,288,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,81,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,297,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,306,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,315,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,324,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,333,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,343,"        return iDurationField;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,352,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,361,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,370,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,379,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,388,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,397,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,406,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,415,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,424,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,433,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,442,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,451,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,460,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,469,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,478,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,487,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,496,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,505,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,514,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,523,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,533,"        return ""UnsupportedDateTimeField"";
",0,0,0,0,0,1,0,0,0,1,34,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,540,"        return getInstance(iType, iDurationField);
",0,0,0,1,2,1,6,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,12,544,"        return new UnsupportedOperationException(iType + "" field is unsupported"");
",2,1,0,1,2,1,0,2,0,6,74,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,12,76,"        return duration / iUnitMillis;  // safe
",4,1,0,0,0,1,0,0,0,5,39,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,12,88,"        return value * iUnitMillis;  // safe
",4,1,0,0,0,1,0,0,0,5,36,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,12,100,"        return FieldUtils.safeMultiply(value, iUnitMillis);
",0,0,0,1,2,1,8,0,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,12,104,"        long addition = value * iUnitMillis;  // safe
",6,1,0,0,0,0,0,0,0,7,45,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,12,105,"        return FieldUtils.safeAdd(instant, addition);
",0,0,0,1,2,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,12,109,"        long addition = FieldUtils.safeMultiply(value, iUnitMillis);
",2,0,0,1,2,0,8,0,0,10,60,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,12,110,"        return FieldUtils.safeAdd(instant, addition);
",0,0,0,1,2,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,12,114,"        long difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);
",2,0,0,1,2,0,8,0,0,10,77,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,12,115,"        return difference / iUnitMillis;
",4,1,0,0,0,1,0,0,0,5,32,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,12,127,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,12,128,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,12,129,"        } else if (obj instanceof PreciseDurationField) {
",2,0,0,1,4,0,0,2,0,4,49,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,12,130,"            PreciseDurationField other = (PreciseDurationField) obj;
",4,0,0,1,2,0,0,4,0,8,56,7,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,12,131,"            return (getType() == other.getType()) && (iUnitMillis == other.iUnitMillis);
",6,3,0,4,8,1,6,0,0,15,76,7,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,12,133,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,12,60,"            throw new IllegalArgumentException(""Range duration field must be precise"");
",0,0,0,1,2,0,0,2,0,3,75,7,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,12,66,"            throw new IllegalArgumentException(""The effective range must be at least 2"");
",0,0,0,1,2,0,0,2,0,3,77,7,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,12,80,"            return (int) ((instant / getUnitMillis()) % iRange);
",4,2,0,4,8,1,2,0,0,8,52,8,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,12,95,"        int thisValue = get(instant);
",2,0,0,1,2,0,4,0,0,6,29,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,12,96,"        int wrappedValue = FieldUtils.getWrappedValue
",2,0,0,0,0,0,4,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,12,99,"        return instant + (wrappedValue - thisValue) * getUnitMillis();
",6,3,0,2,4,1,2,0,0,11,62,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,12,143,"        return iRange;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,51,"            throw new IllegalArgumentException(""Unit duration field must be precise"");
",0,0,0,1,2,0,0,2,0,3,74,7,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,56,"            throw new IllegalArgumentException(""The unit milliseconds must be at least 1"");
",0,0,0,1,2,0,0,2,0,3,79,7,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,66,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,93,"            return instant - instant % iUnitMillis;
",6,2,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,109,"        if (instant > 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,110,"            instant -= 1;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,111,"            return instant - instant % iUnitMillis + iUnitMillis;
",8,3,0,0,0,1,0,0,0,11,53,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,113,"            return instant - instant % iUnitMillis;
",6,2,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,12,127,"            return instant % iUnitMillis;
",4,1,0,0,0,1,0,0,0,5,29,6,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,12,47,"            throw new IllegalArgumentException(""Wrapped field's minumum value must be zero"");
",0,0,0,1,2,0,0,2,0,3,81,7,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,12,52,"        int value = getWrappedField().get(instant);
",2,0,0,2,4,0,6,0,0,8,43,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,12,53,"        if (value == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,12,54,"            value = getMaximumValue();
",2,0,0,1,2,0,2,0,0,5,26,6,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,12,56,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,12,60,"        return getWrappedField().add(instant, value);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,12,64,"        return getWrappedField().add(instant, value);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,12,68,"        return getWrappedField().addWrapField(instant, value);
",0,0,0,2,4,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,12,72,"        return getWrappedField().addWrapField(instant, fieldIndex, values, valueToAdd);
",0,0,0,2,4,1,12,0,0,12,79,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,12,76,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,74,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,12,80,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,80,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,12,84,"        int max = getMaximumValue();
",2,0,0,1,2,0,2,0,0,4,28,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,12,85,"        FieldUtils.verifyValueBounds(this, value, 1, max);
",0,0,0,1,2,0,8,0,0,8,50,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,12,86,"        if (value == max) {
",4,1,0,1,3,0,0,0,0,5,19,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,12,87,"            value = 0;
",2,0,0,0,0,0,0,0,0,3,10,6,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,12,89,"        return getWrappedField().set(instant, value);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,12,93,"        return getWrappedField().isLeap(instant);
",0,0,0,2,4,1,6,0,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,12,97,"        return getWrappedField().getLeapAmount(instant);
",0,0,0,2,4,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,12,110,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,12,119,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,12,128,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,12,137,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,12,147,"        return getWrappedField().getMaximumValue() + 1;
",0,1,0,2,4,1,4,0,0,5,47,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,12,157,"        return getWrappedField().getMaximumValue(instant) + 1;
",0,1,0,2,4,1,6,0,0,7,54,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,12,167,"        return getWrappedField().getMaximumValue(instant) + 1;
",0,1,0,2,4,1,6,0,0,7,54,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,12,177,"        return getWrappedField().getMaximumValue(instant, values) + 1;
",0,1,0,2,4,1,8,0,0,9,62,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,12,181,"        return getWrappedField().roundFloor(instant);
",0,0,0,2,4,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,12,185,"        return getWrappedField().roundCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,12,189,"        return getWrappedField().roundHalfFloor(instant);
",0,0,0,2,4,1,6,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,12,193,"        return getWrappedField().roundHalfCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,12,197,"        return getWrappedField().roundHalfEven(instant);
",0,0,0,2,4,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,12,201,"        return getWrappedField().remainder(instant);
",0,0,0,2,4,1,6,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,12,56,"            throw new IllegalArgumentException(""The field must not be null"");
",0,0,0,1,2,0,0,2,0,4,65,6,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,12,59,"            throw new IllegalArgumentException(""The field must be supported"");
",0,0,0,1,2,0,0,2,0,3,66,7,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,12,74,"        return iField.isLenient();
",0,0,0,1,2,1,4,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,12,78,"        return iField.get(instant);
",0,0,0,1,2,1,6,0,0,6,27,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,12,94,"        return iField.getMinimumValue();
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,12,98,"        return iField.getMaximumValue();
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,12,102,"        return iField.roundFloor(instant);
",0,0,0,1,2,1,6,0,0,6,34,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,754,"            return GJLocaleSymbols.forLocale(locale).halfdayValueToText(fieldValue);
",0,0,0,2,4,1,10,0,0,10,72,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,758,"            return set(millis, GJLocaleSymbols.forLocale(locale).halfdayTextToValue(text));
",0,0,0,3,6,1,14,0,0,14,79,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,12,762,"            return GJLocaleSymbols.forLocale(locale).getHalfdayMaxTextLength();
",0,0,0,2,4,1,8,0,0,8,67,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,12,45,"        int year = getWrappedField().get(instant);
",2,0,0,2,4,0,6,0,0,8,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,12,46,"        if (year <= 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,12,47,"            year = 1 - year;
",4,1,0,0,0,0,0,0,0,6,16,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,12,49,"        return year;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,12,53,"        return getWrappedField().add(instant, years);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,12,57,"        return getWrappedField().add(instant, years);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,12,61,"        return getWrappedField().addWrapField(instant, years);
",0,0,0,2,4,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,12,65,"        return getWrappedField().addWrapField(instant, fieldIndex, values, years);
",0,0,0,2,4,1,12,0,0,12,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,12,69,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,12,73,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,80,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,12,85,"        FieldUtils.verifyValueBounds(this, year, 1, getMaximumValue());
",0,0,0,2,4,0,8,0,0,8,63,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,12,86,"        if (iChronology.getYear(instant) <= 0) {
",0,1,0,2,5,0,6,0,0,7,40,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,12,87,"            year = 1 - year;
",4,1,0,0,0,0,0,0,0,6,16,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,12,89,"        return super.set(instant, year);
",6,0,0,1,2,1,0,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,12,101,"        return getWrappedField().roundFloor(instant);
",0,0,0,2,4,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,12,105,"        return getWrappedField().roundCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,12,109,"        return getWrappedField().remainder(instant);
",0,0,0,2,4,1,6,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,12,116,"        return iChronology.yearOfEra();
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,12,76,"            throw new IllegalArgumentException(""The offset cannot be zero"");
",0,0,0,1,2,0,0,2,0,3,64,7,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,12,84,"            iMin = minValue;
",4,0,0,0,0,0,0,0,0,5,16,6,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,12,89,"            iMax = maxValue;
",4,0,0,0,0,0,0,0,0,5,16,6,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,12,100,"        return super.get(instant) + iOffset;
",6,1,0,1,2,1,0,0,0,7,36,4,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,12,112,"        instant = super.add(instant, amount);
",8,0,0,1,2,0,0,0,0,9,37,4,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,12,113,"        FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);
",0,0,0,2,4,0,12,0,0,12,61,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,12,114,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,12,126,"        instant = super.add(instant, amount);
",8,0,0,1,2,0,0,0,0,9,37,4,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,12,127,"        FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);
",0,0,0,2,4,0,12,0,0,12,61,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,12,128,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,12,140,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));
",0,0,0,3,6,1,18,0,0,18,82,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,12,157,"        return getWrappedField().isLeap(instant);
",0,0,0,2,4,1,6,0,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,12,161,"        return getWrappedField().getLeapAmount(instant);
",0,0,0,2,4,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,12,187,"        return getWrappedField().roundFloor(instant);
",0,0,0,2,4,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,12,191,"        return getWrappedField().roundCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,12,195,"        return getWrappedField().roundHalfFloor(instant);
",0,0,0,2,4,1,6,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,12,199,"        return getWrappedField().roundHalfCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,12,203,"        return getWrappedField().roundHalfEven(instant);
",0,0,0,2,4,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,12,207,"        return getWrappedField().remainder(instant);
",0,0,0,2,4,1,6,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,12,216,"        return iOffset;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,59,"            throw new IllegalArgumentException(""The divisor must be at least 2"");
",0,0,0,1,2,0,0,2,0,3,69,7,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,64,"            iDurationField = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,90,"        super(remainderField.getWrappedField(), type);
",2,0,0,2,4,0,4,0,0,6,46,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,91,"        int divisor = iDivisor = remainderField.iDivisor;
",8,0,0,0,0,0,0,0,0,9,49,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,92,"        iDurationField = remainderField.iRangeField;
",6,0,0,0,0,0,0,0,0,7,44,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,94,"        DateTimeField field = getWrappedField();
",2,0,0,1,2,0,2,2,0,6,40,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,95,"        int i = field.getMinimumValue();
",2,0,0,1,2,0,4,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,96,"        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);
",12,5,0,3,6,0,0,0,0,17,59,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,98,"        int j = field.getMaximumValue();
",2,0,0,1,2,0,4,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,99,"        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);
",12,5,0,3,6,0,0,0,0,17,59,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,101,"        iMin = min;
",4,0,0,0,0,0,0,0,0,5,11,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,102,"        iMax = max;
",4,0,0,0,0,0,0,0,0,5,11,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,103,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,112,"        int value = getWrappedField().get(instant);
",2,0,0,2,4,0,6,0,0,8,43,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,113,"        if (value >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,114,"            return value / iDivisor;
",4,1,0,0,0,1,0,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,116,"            return ((value + 1) / iDivisor) - 1;
",4,3,0,2,4,1,0,0,0,7,36,6,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,129,"        return getWrappedField().add(instant, amount * iDivisor);
",4,1,0,2,4,1,6,0,0,11,57,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,141,"        return getWrappedField().add(instant, amount * iDivisor);
",4,1,0,2,4,1,6,0,0,11,57,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,153,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));
",0,0,0,3,6,1,18,0,0,18,82,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,157,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iDivisor;
",2,1,0,2,4,1,8,0,0,11,85,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,161,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iDivisor;
",2,1,0,2,4,1,8,0,0,11,91,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,173,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);
",0,0,0,1,2,0,10,0,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,174,"        int remainder = getRemainder(getWrappedField().get(instant));
",2,0,0,3,6,0,8,0,0,10,61,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,175,"        return getWrappedField().set(instant, value * iDivisor + remainder);
",6,2,0,2,4,1,6,0,0,14,68,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,191,"        return iMin;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,200,"        return iMax;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,204,"        DateTimeField field = getWrappedField();
",2,0,0,1,2,0,2,2,0,6,40,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,205,"        return field.roundFloor(field.set(instant, get(instant) * iDivisor));
",2,1,0,3,6,1,14,0,0,17,69,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,209,"        return set(instant, get(getWrappedField().remainder(instant)));
",0,0,0,4,8,1,12,0,0,12,63,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,218,"        return iDivisor;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,222,"        if (value >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,223,"            return value % iDivisor;
",4,1,0,0,0,1,0,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,12,225,"            return (iDivisor - 1) + ((value + 1) % iDivisor);
",6,4,0,3,6,1,0,0,0,10,49,6,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,12,55,"            throw new IllegalArgumentException(""The divisor must be at least 2"");
",0,0,0,1,2,0,0,2,0,3,69,7,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,12,60,"            iRangeField = null;
",2,0,0,0,0,0,0,0,0,3,19,6,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,12,100,"        int value = getWrappedField().get(instant);
",2,0,0,2,4,0,6,0,0,8,43,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,12,101,"        if (value >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,12,102,"            return value % iDivisor;
",4,1,0,0,0,1,0,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,12,104,"            return (iDivisor - 1) + ((value + 1) % iDivisor);
",6,4,0,3,6,1,0,0,0,10,49,6,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,12,118,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, 0, iDivisor - 1));
",2,1,0,3,6,1,14,0,0,17,87,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,12,130,"        FieldUtils.verifyValueBounds(this, value, 0, iDivisor - 1);
",2,1,0,1,2,0,6,0,0,9,59,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,12,131,"        int divided = getDivided(getWrappedField().get(instant));
",2,0,0,3,6,0,8,0,0,10,57,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,12,132,"        return getWrappedField().set(instant, divided * iDivisor + value);
",6,2,0,2,4,1,6,0,0,14,66,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,12,162,"        return getWrappedField().roundFloor(instant);
",0,0,0,2,4,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,12,166,"        return getWrappedField().roundCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,12,170,"        return getWrappedField().roundHalfFloor(instant);
",0,0,0,2,4,1,6,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,12,174,"        return getWrappedField().roundHalfCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,12,178,"        return getWrappedField().roundHalfEven(instant);
",0,0,0,2,4,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,12,182,"        return getWrappedField().remainder(instant);
",0,0,0,2,4,1,6,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,12,191,"        return iDivisor;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,12,195,"        if (value >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,12,196,"            return value / iDivisor;
",4,1,0,0,0,1,0,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,12,198,"            return ((value + 1) / iDivisor) - 1;
",4,3,0,2,4,1,0,0,0,7,36,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,12,67,"        return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToText(fieldValue);
",0,0,0,2,4,1,10,0,0,10,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,12,78,"        return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToShortText(fieldValue);
",0,0,0,2,4,1,10,0,0,10,79,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,12,90,"        return GJLocaleSymbols.forLocale(locale).dayOfWeekTextToValue(text);
",0,0,0,2,4,1,10,0,0,10,68,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,12,122,"        return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxTextLength();
",0,0,0,2,4,1,8,0,0,8,69,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,12,132,"        return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxShortTextLength();
",0,0,0,2,4,1,8,0,0,8,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,12,139,"        return iChronology.dayOfWeek();
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,59,"        return iChronology.getDaysInMonthMax();
",0,0,0,1,2,1,4,0,0,4,39,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,63,"        return iChronology.getDaysInMonthMax(instant);
",0,0,0,1,2,1,6,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,67,"        if (partial.isSupported(DateTimeFieldType.monthOfYear())) {
",0,0,0,3,7,0,8,0,0,8,59,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,68,"            int month = partial.get(DateTimeFieldType.monthOfYear());
",2,0,0,2,4,0,8,0,0,10,57,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,69,"            if (partial.isSupported(DateTimeFieldType.year())) {
",0,0,0,3,7,0,8,0,0,8,52,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,70,"                int year = partial.get(DateTimeFieldType.year());
",2,0,0,2,4,0,8,0,0,10,49,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,71,"                return iChronology.getDaysInYearMonth(year, month);
",0,0,0,1,2,1,8,0,0,8,51,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,73,"            return iChronology.getDaysInMonthMax(month);
",0,0,0,1,2,1,6,0,0,6,44,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,75,"        return getMaximumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,79,"        int size = partial.size();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,80,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,81,"            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {
",0,1,0,3,7,0,10,0,0,11,65,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,82,"                int month = values[i];
",2,0,1,1,2,0,0,0,0,6,22,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,83,"                for (int j = 0; j < size; j++) {
",8,1,0,1,3,0,0,0,0,10,32,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,84,"                    if (partial.getFieldType(j) == DateTimeFieldType.year()) {
",0,1,0,3,7,0,10,0,0,11,58,10,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,85,"                        int year = values[j];
",2,0,1,1,2,0,0,0,0,6,21,13,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,86,"                        return iChronology.getDaysInYearMonth(year, month);
",0,0,0,1,2,1,8,0,0,8,51,13,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,89,"                return iChronology.getDaysInMonthMax(month);
",0,0,0,1,2,1,6,0,0,6,44,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,92,"        return getMaximumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,12,103,"        return iChronology.dayOfMonth();
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,12,52,"        return iChronology.getDayOfYear(instant);
",0,0,0,1,2,1,6,0,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,12,60,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,12,64,"        return iChronology.getDaysInYearMax();
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,12,68,"        int year = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,12,69,"        return iChronology.getDaysInYear(year);
",0,0,0,1,2,1,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,12,73,"        if (partial.isSupported(DateTimeFieldType.year())) {
",0,0,0,3,7,0,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,12,74,"            int year = partial.get(DateTimeFieldType.year());
",2,0,0,2,4,0,8,0,0,10,49,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,12,75,"            return iChronology.getDaysInYear(year);
",0,0,0,1,2,1,6,0,0,6,39,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,12,77,"        return iChronology.getDaysInYearMax();
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,12,81,"        int size = partial.size();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,12,82,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,12,83,"            if (partial.getFieldType(i) == DateTimeFieldType.year()) {
",0,1,0,3,7,0,10,0,0,11,58,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,12,84,"                int year = values[i];
",2,0,1,1,2,0,0,0,0,6,21,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,12,85,"                return iChronology.getDaysInYear(year);
",0,0,0,1,2,1,6,0,0,6,39,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,12,88,"        return iChronology.getDaysInYearMax();
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,12,92,"        int maxLessOne = iChronology.getDaysInYearMax() - 1;
",2,1,0,1,2,0,4,0,0,7,52,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,12,93,"        return (value > maxLessOne || value < 1) ? getMaximumValue(instant) : maxLessOne;
",8,3,0,2,4,1,4,0,0,15,81,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,12,100,"        return iChronology.dayOfYear();
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,49,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,73,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,79,"        return add(instant, FieldUtils.safeToInt(value));
",0,0,0,2,4,1,10,0,0,10,49,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,92,"        return add(instant, years);
",0,0,0,1,2,1,6,0,0,6,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,96,"        if (minuendInstant < subtrahendInstant) {
",4,1,0,1,3,0,0,0,0,5,41,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,97,"            return -getDifference(subtrahendInstant, minuendInstant);
",0,0,0,1,2,1,6,0,0,7,57,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,100,"        int minuendWeekyear = get(minuendInstant);
",2,0,0,1,2,0,4,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,101,"        int subtrahendWeekyear = get(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,103,"        long minuendRem = remainder(minuendInstant);
",2,0,0,1,2,0,4,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,104,"        long subtrahendRem = remainder(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,50,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,107,"        if (subtrahendRem >= WEEK_53 && iChronology.getWeeksInYear(minuendWeekyear) <= 52) {
",4,3,0,2,5,0,6,0,0,13,84,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,108,"            subtrahendRem -= DateTimeConstants.MILLIS_PER_WEEK;
",6,0,0,0,0,0,0,0,0,7,51,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,111,"        int difference = minuendWeekyear - subtrahendWeekyear;
",6,1,0,0,0,0,0,0,0,7,54,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,112,"        if (minuendRem < subtrahendRem) {
",4,1,0,1,3,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,113,"            difference--;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,115,"        return difference;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,135,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,156,"            setToWeek = maxOutWeeks;
",4,0,0,0,0,0,0,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,180,"            workInstant += DateTimeConstants.MILLIS_PER_WEEK;
",6,0,0,0,0,0,0,0,0,7,49,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,182,"            workInstant -= DateTimeConstants.MILLIS_PER_WEEK;
",6,0,0,0,0,0,0,0,0,7,49,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,212,"        return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) > 52;
",0,1,0,2,4,1,10,0,0,11,73,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,216,"        return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) - 52;
",0,1,0,2,4,1,10,0,0,11,73,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,243,"        return instant - roundFloor(instant);
",2,1,0,1,2,1,4,0,0,7,37,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,12,250,"        return iChronology.weekyear();
",0,0,0,1,2,1,4,0,0,4,30,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,54,"        return iChronology.getWeekOfWeekyear(instant);
",0,0,0,1,2,1,6,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,70,"        return super.roundCeiling(instant + 3 * DateTimeConstants.MILLIS_PER_DAY)
",8,2,0,1,2,1,0,0,0,10,73,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,75,"        return super.remainder(instant + 3 * DateTimeConstants.MILLIS_PER_DAY);
",8,2,0,1,2,1,0,0,0,10,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,79,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,83,"        return 53;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,87,"        int weekyear = iChronology.getWeekyear(instant);
",2,0,0,1,2,0,6,0,0,8,48,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,88,"        return iChronology.getWeeksInYear(weekyear);
",0,0,0,1,2,1,6,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,92,"        if (partial.isSupported(DateTimeFieldType.weekyear())) {
",0,0,0,3,7,0,8,0,0,8,56,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,93,"            int weekyear = partial.get(DateTimeFieldType.weekyear());
",2,0,0,2,4,0,8,0,0,10,57,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,94,"            return iChronology.getWeeksInYear(weekyear);
",0,0,0,1,2,1,6,0,0,6,44,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,96,"        return 53;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,100,"        int size = partial.size();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,101,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,102,"            if (partial.getFieldType(i) == DateTimeFieldType.weekyear()) {
",0,1,0,3,7,0,10,0,0,11,62,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,103,"                int weekyear = values[i];
",2,0,1,1,2,0,0,0,0,6,25,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,104,"                return iChronology.getWeeksInYear(weekyear);
",0,0,0,1,2,1,6,0,0,6,44,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,107,"        return 53;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,111,"        return value > 52 ? getMaximumValue(instant) : 52;
",2,1,0,1,2,1,4,0,0,7,50,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,12,118,"        return iChronology.weekOfWeekyear();
",0,0,0,1,2,1,4,0,0,4,36,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,57,"            throw new IllegalArgumentException(""Must supply a chronology"");
",0,0,0,1,2,0,0,2,0,3,63,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,61,"            throw new IllegalArgumentException(""UTC chronology must not be null"");
",0,0,0,1,2,0,0,2,0,4,70,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,64,"            throw new IllegalArgumentException(""DateTimeZone must not be null"");
",0,0,0,1,2,0,0,2,0,4,68,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,90,"        return getBase();
",0,0,0,1,2,1,2,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,94,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,95,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,97,"        if (zone == getParam()) {
",2,1,0,2,5,0,2,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,98,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,100,"        if (zone == DateTimeZone.UTC) {
",6,1,0,1,3,0,0,0,0,7,31,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,101,"            return getBase();
",0,0,0,1,2,1,2,0,0,2,17,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,103,"        return new ZonedChronology(getBase(), zone);
",2,0,0,2,4,1,2,2,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,110,"        return localToUTC(getBase().getDateTimeMillis
",0,0,0,1,3,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,119,"        return localToUTC(getBase().getDateTimeMillis
",0,0,0,1,3,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,129,"        return localToUTC(getBase().getDateTimeMillis
",0,0,0,1,3,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,139,"        DateTimeZone zone = getZone();
",2,0,0,1,2,0,2,2,0,6,30,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,140,"        int offset = zone.getOffsetFromLocal(instant);
",2,0,0,1,2,0,6,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,141,"        instant -= offset;
",4,0,0,0,0,0,0,0,0,5,18,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,142,"        if (offset != zone.getOffset(instant)) {
",2,1,0,2,5,0,6,0,0,9,40,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,143,"            throw new IllegalArgumentException
",0,0,0,0,0,0,0,2,0,2,34,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,147,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,213,"            return field;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,216,"            return (DateTimeField)converted.get(field);
",0,0,0,2,4,1,6,2,0,8,43,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,237,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,238,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,240,"        if (obj instanceof ZonedChronology == false) {
",2,1,0,1,3,0,0,2,0,6,46,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,241,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,243,"        ZonedChronology chrono = (ZonedChronology) obj;
",4,0,0,1,2,0,0,4,0,8,47,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,244,"        return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,256,"        return 326565 + getZone().hashCode() * 11 + getBase().hashCode() * 7;
",0,4,0,4,8,1,8,0,0,12,69,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,265,"        return ""ZonedChronology["" + getBase() + "", "" + getZone().getID() + ']';
",0,1,0,4,8,1,6,0,0,10,71,4,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,12,479,"                    eras = f;
",4,0,0,0,0,0,0,0,0,5,9,8,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,351,"        LimitException(String desc, boolean isLow) {
",6,0,0,1,3,0,0,2,0,8,44,3,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,352,"            super(desc);
",2,0,0,1,2,0,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,353,"            iIsLow = isLow;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,354,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,357,"            StringBuffer buf = new StringBuffer(85);
",2,0,0,1,2,0,0,4,0,6,40,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,358,"            buf.append(""The"");
",0,0,0,1,2,0,4,0,0,5,18,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,359,"            String desc = super.getMessage();
",4,0,0,1,2,0,0,2,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,360,"            if (desc != null) {
",2,1,0,1,3,0,0,0,0,3,19,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,361,"                buf.append(' ');
",0,0,0,1,2,0,4,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,362,"                buf.append(desc);
",0,0,0,1,2,0,6,0,0,6,17,8,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,364,"            buf.append("" instant is "");
",0,0,0,1,2,0,4,0,0,5,27,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,366,"            DateTimeFormatter p = ISODateTimeFormat.dateTime();
",2,0,0,1,2,0,4,2,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,367,"            p = p.withChronology(getBase());
",2,0,0,2,4,0,6,0,0,9,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,368,"            if (iIsLow) {
",2,0,0,1,3,0,0,0,0,2,13,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,369,"                buf.append(""below the supported minimum of "");
",0,0,0,1,2,0,4,0,0,5,46,8,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,370,"                p.printTo(buf, getLowerLimit().getMillis());
",0,0,0,3,6,0,10,0,0,10,44,8,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,372,"                buf.append(""above the supported maximum of "");
",0,0,0,1,2,0,4,0,0,5,46,8,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,373,"                p.printTo(buf, getUpperLimit().getMillis());
",0,0,0,3,6,0,10,0,0,10,44,8,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,376,"            buf.append("" ("");
",0,0,0,1,3,0,4,0,0,5,17,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,377,"            buf.append(getBase());
",0,0,0,2,4,0,6,0,0,6,22,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,378,"            buf.append(')');
",0,0,0,1,3,0,4,0,0,5,16,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,380,"            return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,384,"            return ""IllegalArgumentException: "" + getMessage();
",0,1,0,1,2,1,2,0,0,4,51,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,12,50,"        int year = getWrappedField().get(instant);
",2,0,0,2,4,0,6,0,0,8,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,12,51,"        return year < 0 ? -year : year;
",6,1,0,0,0,1,0,0,0,8,31,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,12,55,"        return getWrappedField().add(instant, years);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,12,59,"        return getWrappedField().add(instant, years);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,12,63,"        return getWrappedField().addWrapField(instant, years);
",0,0,0,2,4,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,12,67,"        return getWrappedField().addWrapField(instant, fieldIndex, values, years);
",0,0,0,2,4,1,12,0,0,12,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,12,71,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,12,75,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,80,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,12,79,"        FieldUtils.verifyValueBounds(this, year, 0, getMaximumValue());
",0,0,0,2,4,0,8,0,0,8,63,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,12,80,"        if (getWrappedField().get(instant) < 0) {
",0,1,0,3,7,0,6,0,0,7,41,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,12,81,"            year = -year;
",4,0,0,0,0,0,0,0,0,6,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,12,83,"        return super.set(instant, year);
",6,0,0,1,2,1,0,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,12,95,"        return getWrappedField().roundFloor(instant);
",0,0,0,2,4,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,12,99,"        return getWrappedField().roundCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,12,103,"        return getWrappedField().remainder(instant);
",0,0,0,2,4,1,6,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,12,110,"        return INSTANCE;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,286,"                throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,9,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,294,"            return iTimeField ? iField.isPrecise() : iField.isPrecise() && this.iZone.isFixed();
",4,1,0,3,6,1,10,0,0,15,84,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,302,"            return iField.getValue(duration, addOffset(instant));
",0,0,0,2,4,1,10,0,0,10,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,306,"            return iField.getValueAsLong(duration, addOffset(instant));
",0,0,0,2,4,1,10,0,0,10,59,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,310,"            return iField.getMillis(value, addOffset(instant));
",0,0,0,2,4,1,10,0,0,10,51,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,314,"            return iField.getMillis(value, addOffset(instant));
",0,0,0,2,4,1,10,0,0,10,51,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,318,"            int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,319,"            instant = iField.add(instant + offset, value);
",6,1,0,1,2,0,6,0,0,14,46,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,320,"            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));
",6,1,0,2,4,1,4,0,0,11,79,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,324,"            int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,325,"            instant = iField.add(instant + offset, value);
",6,1,0,1,2,0,6,0,0,14,46,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,326,"            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));
",6,1,0,2,4,1,4,0,0,11,79,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,330,"            int offset = getOffsetToAdd(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,331,"            return iField.getDifference
",0,0,0,0,0,1,4,0,0,4,27,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,337,"            int offset = getOffsetToAdd(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,338,"            return iField.getDifferenceAsLong
",0,0,0,0,0,1,4,0,0,4,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,344,"            int offset = this.iZone.getOffset(instant);
",4,0,0,1,2,0,4,0,0,8,43,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,345,"            long sum = instant + offset;
",6,1,0,0,0,0,0,0,0,7,28,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,347,"            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {
",8,5,0,3,7,0,0,0,0,13,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,348,"                throw new ArithmeticException(""Adding time zone offset caused overflow"");
",0,0,0,1,2,0,0,2,0,3,73,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,350,"            return offset;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,354,"            int offset = this.iZone.getOffsetFromLocal(instant);
",4,0,0,1,2,0,4,0,0,8,52,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,355,"            long diff = instant - offset;
",6,1,0,0,0,0,0,0,0,7,29,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,357,"            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {
",8,5,0,3,7,0,0,0,0,13,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,358,"                throw new ArithmeticException(""Subtracting time zone offset caused overflow"");
",0,0,0,1,2,0,0,2,0,3,78,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,360,"            return offset;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,364,"            return iZone.convertUTCToLocal(instant);
",0,0,0,1,2,1,6,0,0,6,40,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,391,"                throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,9,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,402,"            return iField.isLenient();
",0,0,0,1,2,1,4,0,0,4,26,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,406,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,407,"            return iField.get(localInstant);
",0,0,0,1,2,1,6,0,0,6,32,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,411,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,412,"            return iField.getAsText(localInstant, locale);
",0,0,0,1,2,1,8,0,0,8,46,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,416,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,417,"            return iField.getAsShortText(localInstant, locale);
",0,0,0,1,2,1,8,0,0,8,51,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,421,"            return iField.getAsText(fieldValue, locale);
",0,0,0,1,2,1,8,0,0,8,44,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,425,"            return iField.getAsShortText(fieldValue, locale);
",0,0,0,1,2,1,8,0,0,8,49,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,429,"            if (iTimeField) {
",2,0,0,1,3,0,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,430,"                int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,431,"                long localInstant = iField.add(instant + offset, value);
",6,1,0,1,2,0,6,0,0,13,56,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,432,"                return localInstant - offset;
",4,1,0,0,0,1,0,0,0,5,29,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,434,"               long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,435,"               localInstant = iField.add(localInstant, value);
",2,0,0,1,2,0,8,0,0,11,47,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,436,"               return iZone.convertLocalToUTC(localInstant, false, instant);
",0,0,0,1,2,1,8,0,0,9,61,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,441,"            if (iTimeField) {
",2,0,0,1,3,0,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,442,"                int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,443,"                long localInstant = iField.add(instant + offset, value);
",6,1,0,1,2,0,6,0,0,13,56,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,444,"                return localInstant - offset;
",4,1,0,0,0,1,0,0,0,5,29,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,446,"               long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,447,"               localInstant = iField.add(localInstant, value);
",2,0,0,1,2,0,8,0,0,11,47,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,448,"               return iZone.convertLocalToUTC(localInstant, false, instant);
",0,0,0,1,2,1,8,0,0,9,61,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,453,"            if (iTimeField) {
",2,0,0,1,3,0,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,454,"                int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,455,"                long localInstant = iField.addWrapField(instant + offset, value);
",6,1,0,1,2,0,6,0,0,13,65,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,456,"                return localInstant - offset;
",4,1,0,0,0,1,0,0,0,5,29,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,458,"                long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,459,"                localInstant = iField.addWrapField(localInstant, value);
",2,0,0,1,2,0,8,0,0,11,56,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,460,"                return iZone.convertLocalToUTC(localInstant, false, instant);
",0,0,0,1,2,1,8,0,0,9,61,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,465,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,466,"            localInstant = iField.set(localInstant, value);
",2,0,0,1,2,0,8,0,0,11,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,467,"            long result = iZone.convertLocalToUTC(localInstant, false, instant);
",2,0,0,1,2,0,8,0,0,11,68,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,468,"            if (get(result) != value) {
",2,1,0,2,5,0,4,0,0,7,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,469,"                throw new IllegalFieldValueException(iField.getType(), Integer.valueOf(value),
",0,0,0,2,5,0,10,2,0,12,78,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,474,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,479,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,480,"            localInstant = iField.set(localInstant, text, locale);
",2,0,0,1,2,0,10,0,0,13,54,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,481,"            return iZone.convertLocalToUTC(localInstant, false, instant);
",0,0,0,1,2,1,8,0,0,9,61,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,485,"            int offset = getOffsetToAdd(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,486,"            return iField.getDifference
",0,0,0,0,0,1,4,0,0,4,27,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,492,"            int offset = getOffsetToAdd(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,493,"            return iField.getDifferenceAsLong
",0,0,0,0,0,1,4,0,0,4,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,499,"            return iDurationField;
",2,0,0,0,0,1,0,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,503,"            return iRangeDurationField;
",2,0,0,0,0,1,0,0,0,2,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,507,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,508,"            return iField.isLeap(localInstant);
",0,0,0,1,2,1,6,0,0,6,35,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,512,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,513,"            return iField.getLeapAmount(localInstant);
",0,0,0,1,2,1,6,0,0,6,42,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,517,"            return iLeapDurationField;
",2,0,0,0,0,1,0,0,0,2,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,521,"            if (iTimeField) {
",2,0,0,1,3,0,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,522,"                int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,523,"                instant = iField.roundFloor(instant + offset);
",6,1,0,1,2,0,4,0,0,12,46,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,524,"                return instant - offset;
",4,1,0,0,0,1,0,0,0,5,24,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,526,"                long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,527,"                localInstant = iField.roundFloor(localInstant);
",2,0,0,1,2,0,6,0,0,9,47,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,528,"                return iZone.convertLocalToUTC(localInstant, false, instant);
",0,0,0,1,2,1,8,0,0,9,61,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,533,"            if (iTimeField) {
",2,0,0,1,3,0,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,534,"                int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,535,"                instant = iField.roundCeiling(instant + offset);
",6,1,0,1,2,0,4,0,0,12,48,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,536,"                return instant - offset;
",4,1,0,0,0,1,0,0,0,5,24,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,538,"                long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,539,"                localInstant = iField.roundCeiling(localInstant);
",2,0,0,1,2,0,6,0,0,9,49,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,540,"                return iZone.convertLocalToUTC(localInstant, false, instant);
",0,0,0,1,2,1,8,0,0,9,61,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,545,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,546,"            return iField.remainder(localInstant);
",0,0,0,1,2,1,6,0,0,6,38,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,550,"            return iField.getMinimumValue();
",0,0,0,1,2,1,4,0,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,554,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,555,"            return iField.getMinimumValue(localInstant);
",0,0,0,1,2,1,6,0,0,6,44,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,559,"            return iField.getMinimumValue(instant);
",0,0,0,1,2,1,6,0,0,6,39,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,563,"            return iField.getMinimumValue(instant, values);
",0,0,0,1,2,1,8,0,0,8,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,567,"            return iField.getMaximumValue();
",0,0,0,1,2,1,4,0,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,571,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,572,"            return iField.getMaximumValue(localInstant);
",0,0,0,1,2,1,6,0,0,6,44,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,576,"            return iField.getMaximumValue(instant);
",0,0,0,1,2,1,6,0,0,6,39,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,580,"            return iField.getMaximumValue(instant, values);
",0,0,0,1,2,1,8,0,0,8,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,584,"            return iField.getMaximumTextLength(locale);
",0,0,0,1,2,1,6,0,0,6,43,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,588,"            return iField.getMaximumShortTextLength(locale);
",0,0,0,1,2,1,6,0,0,6,48,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,592,"            int offset = this.iZone.getOffset(instant);
",4,0,0,1,2,0,4,0,0,8,43,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,593,"            long sum = instant + offset;
",6,1,0,0,0,0,0,0,0,7,28,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,595,"            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {
",8,5,0,3,7,0,0,0,0,13,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,596,"                throw new ArithmeticException(""Adding time zone offset caused overflow"");
",0,0,0,1,2,0,0,2,0,3,73,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,12,598,"            return offset;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,396,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,397,"            return getWrappedField().getValue(duration, instant);
",0,0,0,2,4,1,8,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,401,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,402,"            return getWrappedField().getValueAsLong(duration, instant);
",0,0,0,2,4,1,8,0,0,8,59,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,406,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,407,"            return getWrappedField().getMillis(value, instant);
",0,0,0,2,4,1,8,0,0,8,51,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,411,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,412,"            return getWrappedField().getMillis(value, instant);
",0,0,0,2,4,1,8,0,0,8,51,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,416,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,417,"            long result = getWrappedField().add(instant, amount);
",2,0,0,2,4,0,8,0,0,10,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,418,"            checkLimits(result, ""resulting"");
",0,0,0,1,2,0,4,0,0,5,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,419,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,423,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,424,"            long result = getWrappedField().add(instant, amount);
",2,0,0,2,4,0,8,0,0,10,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,425,"            checkLimits(result, ""resulting"");
",0,0,0,1,2,0,4,0,0,5,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,426,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,430,"            checkLimits(minuendInstant, ""minuend"");
",0,0,0,1,2,0,4,0,0,5,39,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,431,"            checkLimits(subtrahendInstant, ""subtrahend"");
",0,0,0,1,2,0,4,0,0,5,45,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,432,"            return getWrappedField().getDifference(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,74,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,436,"            checkLimits(minuendInstant, ""minuend"");
",0,0,0,1,2,0,4,0,0,5,39,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,437,"            checkLimits(subtrahendInstant, ""subtrahend"");
",0,0,0,1,2,0,4,0,0,5,45,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,438,"            return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,80,6,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,12,54,"            throw new IllegalArgumentException(""The field must not be null"");
",0,0,0,1,2,0,0,2,0,4,65,6,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,12,57,"            throw new IllegalArgumentException(""The field must be supported"");
",0,0,0,1,2,0,0,2,0,3,66,7,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,12,73,"        return iField.isPrecise();
",0,0,0,1,2,1,4,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,12,77,"        return iField.getValueAsLong(duration, instant);
",0,0,0,1,2,1,8,0,0,8,48,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,12,81,"        return iField.getMillis(value, instant);
",0,0,0,1,2,1,8,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,12,85,"        return iField.getMillis(value, instant);
",0,0,0,1,2,1,8,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,12,89,"        return iField.add(instant, value);
",0,0,0,1,2,1,8,0,0,8,34,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,12,93,"        return iField.add(instant, value);
",0,0,0,1,2,1,8,0,0,8,34,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,12,97,"        return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,69,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,12,101,"        return iField.getUnitMillis();
",0,0,0,1,2,1,4,0,0,4,30,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,1088,"            return iField.add(instant, value);
",0,0,0,1,2,1,8,0,0,8,34,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,1092,"            return iField.add(instant, value);
",0,0,0,1,2,1,8,0,0,8,34,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,1096,"            return iField.getDifference(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,63,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,1100,"            return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,69,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,640,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,645,"                return iGregorianField.get(instant);
",0,0,0,1,2,1,6,0,0,6,36,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,652,"            if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,653,"                return iGregorianField.getAsText(instant, locale);
",0,0,0,1,2,1,8,0,0,8,50,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,655,"                return iJulianField.getAsText(instant, locale);
",0,0,0,1,2,1,8,0,0,8,47,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,660,"            return iGregorianField.getAsText(fieldValue, locale);
",0,0,0,1,2,1,8,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,664,"            if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,665,"                return iGregorianField.getAsShortText(instant, locale);
",0,0,0,1,2,1,8,0,0,8,55,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,667,"                return iJulianField.getAsShortText(instant, locale);
",0,0,0,1,2,1,8,0,0,8,52,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,672,"            return iGregorianField.getAsShortText(fieldValue, locale);
",0,0,0,1,2,1,8,0,0,8,58,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,676,"            return iGregorianField.add(instant, value);
",0,0,0,1,2,1,8,0,0,8,43,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,680,"            return iGregorianField.add(instant, value);
",0,0,0,1,2,1,8,0,0,8,43,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,686,"            if (valueToAdd == 0) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,687,"                return values;
",2,0,0,0,0,1,0,0,0,2,14,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,689,"            if (DateTimeUtils.isContiguous(partial)) {
",0,0,0,2,5,0,6,0,0,6,42,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,690,"                long instant = 0L;
",2,0,0,0,0,0,0,0,0,2,18,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,691,"                for (int i = 0, isize = partial.size(); i < isize; i++) {
",10,1,0,2,5,0,4,0,0,16,57,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,692,"                    instant = partial.getFieldType(i).getField(GJChronology.this).set(instant, values[i]);
",4,0,1,4,8,0,12,0,0,21,86,9,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,694,"                instant = add(instant, valueToAdd);
",2,0,0,1,2,0,6,0,0,9,35,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,695,"                return GJChronology.this.get(partial, instant);
",2,0,0,1,2,1,6,0,0,8,47,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,697,"                return super.add(partial, fieldIndex, values, valueToAdd);
",10,0,0,1,2,1,0,0,0,10,58,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,702,"            return iGregorianField.getDifference(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,72,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,706,"            return iGregorianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,78,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,719,"                        throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,13,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,727,"                    if (instant - iGapDuration >= iCutover) {
",6,2,0,1,3,0,0,0,0,8,41,9,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,728,"                        instant = julianToGregorian(instant);
",2,0,0,1,2,0,4,0,0,7,37,11,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,731,"                    if (get(instant) != value) {
",2,1,0,2,5,0,4,0,0,7,28,9,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,732,"                       throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,13,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,741,"            if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,742,"                instant = iGregorianField.set(instant, text, locale);
",2,0,0,1,2,0,10,0,0,13,53,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,743,"                if (instant < iCutover) {
",4,1,0,1,3,0,0,0,0,5,25,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,745,"                    if (instant + iGapDuration < iCutover) {
",6,2,0,1,3,0,0,0,0,8,40,9,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,746,"                        instant = gregorianToJulian(instant);
",2,0,0,1,2,0,4,0,0,7,37,11,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,751,"                instant = iJulianField.set(instant, text, locale);
",2,0,0,1,2,0,10,0,0,13,50,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,752,"                if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,754,"                    if (instant - iGapDuration >= iCutover) {
",6,2,0,1,3,0,0,0,0,8,41,9,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,755,"                        instant = julianToGregorian(instant);
",2,0,0,1,2,0,4,0,0,7,37,11,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,760,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,772,"            if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,773,"                return iGregorianField.isLeap(instant);
",0,0,0,1,2,1,6,0,0,6,39,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,775,"                return iJulianField.isLeap(instant);
",0,0,0,1,2,1,6,0,0,6,36,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,780,"            if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,781,"                return iGregorianField.getLeapAmount(instant);
",0,0,0,1,2,1,6,0,0,6,46,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,783,"                return iJulianField.getLeapAmount(instant);
",0,0,0,1,2,1,6,0,0,6,43,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,799,"            return iJulianField.getMinimumValue(partial);
",0,0,0,1,2,1,6,0,0,6,45,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,803,"            return iJulianField.getMinimumValue(partial, values);
",0,0,0,1,2,1,8,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,807,"            if (instant < iCutover) {
",4,1,0,1,3,0,0,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,808,"                return iJulianField.getMinimumValue(instant);
",0,0,0,1,2,1,6,0,0,6,45,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,811,"            int min = iGregorianField.getMinimumValue(instant);
",2,0,0,1,2,0,6,0,0,8,51,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,815,"            instant = iGregorianField.set(instant, min);
",2,0,0,1,2,0,8,0,0,11,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,816,"            if (instant < iCutover) {
",4,1,0,1,3,0,0,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,817,"                min = iGregorianField.get(iCutover);
",2,0,0,1,2,0,6,0,0,9,36,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,820,"            return min;
",2,0,0,0,0,1,0,0,0,2,11,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,830,"            if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,831,"                return iGregorianField.getMaximumValue(instant);
",0,0,0,1,2,1,6,0,0,6,48,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,834,"            int max = iJulianField.getMaximumValue(instant);
",2,0,0,1,2,0,6,0,0,8,48,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,838,"            instant = iJulianField.set(instant, max);
",2,0,0,1,2,0,8,0,0,11,41,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,839,"            if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,840,"                max = iJulianField.get(iJulianField.add(iCutover, -1));
",2,0,0,2,4,0,10,0,0,14,55,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,843,"            return max;
",2,0,0,0,0,1,0,0,0,2,11,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,847,"            long instant = GJChronology.getInstanceUTC().set(partial, 0L);
",2,0,0,2,4,0,8,0,0,10,62,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,848,"            return getMaximumValue(instant);
",0,0,0,1,2,1,4,0,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,852,"            Chronology chrono = GJChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,50,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,853,"            long instant = 0L;
",2,0,0,0,0,0,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,854,"            for (int i = 0, isize = partial.size(); i < isize; i++) {
",10,1,0,2,5,0,4,0,0,16,57,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,855,"                DateTimeField field = partial.getFieldType(i).getField(chrono);
",2,0,0,2,4,0,10,2,0,14,63,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,856,"                if (values[i] <= field.getMaximumValue(instant)) {
",0,1,1,3,7,0,6,0,0,11,50,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,857,"                    instant = field.set(instant, values[i]);
",2,0,1,2,4,0,6,0,0,13,40,9,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,860,"            return getMaximumValue(instant);
",0,0,0,1,2,1,4,0,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,864,"            if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,865,"                instant = iGregorianField.roundFloor(instant);
",2,0,0,1,2,0,6,0,0,9,46,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,866,"                if (instant < iCutover) {
",4,1,0,1,3,0,0,0,0,5,25,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,868,"                    if (instant + iGapDuration < iCutover) {
",6,2,0,1,3,0,0,0,0,8,40,9,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,869,"                        instant = gregorianToJulian(instant);
",2,0,0,1,2,0,4,0,0,7,37,11,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,873,"                instant = iJulianField.roundFloor(instant);
",2,0,0,1,2,0,6,0,0,9,43,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,875,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,879,"            if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,880,"                instant = iGregorianField.roundCeiling(instant);
",2,0,0,1,2,0,6,0,0,9,48,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,882,"                instant = iJulianField.roundCeiling(instant);
",2,0,0,1,2,0,6,0,0,9,45,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,883,"                if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,885,"                    if (instant - iGapDuration >= iCutover) {
",6,2,0,1,3,0,0,0,0,8,41,9,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,886,"                        instant = julianToGregorian(instant);
",2,0,0,1,2,0,4,0,0,7,37,11,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,890,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,894,"            return Math.max(iJulianField.getMaximumTextLength(locale),
",0,0,0,1,3,1,10,0,0,10,58,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,899,"            return Math.max(iJulianField.getMaximumShortTextLength(locale),
",0,0,0,1,3,1,10,0,0,10,63,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,904,"            if (iConvertByWeekyear) {
",2,0,0,1,3,0,0,0,0,2,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,905,"                return julianToGregorianByWeekyear(instant);
",0,0,0,1,2,1,4,0,0,4,44,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,907,"                return julianToGregorianByYear(instant);
",0,0,0,1,2,1,4,0,0,4,40,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,913,"                return gregorianToJulianByWeekyear(instant);
",0,0,0,1,2,1,4,0,0,4,44,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,281,"        super(base, new Object[] {julian, gregorian, cutoverInstant});
",8,0,0,3,6,0,0,2,0,10,62,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,282,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,95,"        newInstant = to.weekyear().set(0, from.weekyear().get(instant));
",2,0,0,4,8,0,14,0,0,17,64,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,96,"        newInstant = to.weekOfWeekyear().set(newInstant, from.weekOfWeekyear().get(instant));
",2,0,0,4,8,0,16,0,0,19,85,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,97,"        newInstant = to.dayOfWeek().set(newInstant, from.dayOfWeek().get(instant));
",2,0,0,4,8,0,16,0,0,19,75,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,98,"        newInstant = to.millisOfDay().set(newInstant, from.millisOfDay().get(instant));
",2,0,0,4,8,0,16,0,0,19,79,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,99,"        return newInstant;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,123,"        return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);
",4,0,0,1,2,1,4,0,0,8,57,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,139,"        return getInstance(DateTimeZone.getDefault(), DEFAULT_CUTOVER, 4);
",0,0,0,2,4,1,8,0,0,8,66,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,155,"        return getInstance(zone, DEFAULT_CUTOVER, 4);
",0,0,0,1,2,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,194,"            cutoverInstant = gregorianCutover.toInstant();
",2,0,0,1,2,0,4,0,0,7,46,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,204,"            for (int i=chronos.size(); --i>=0; ) {
",4,1,0,2,5,0,4,0,0,10,38,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,205,"                chrono = chronos.get(i);
",2,0,0,1,2,0,6,0,0,9,24,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,206,"                if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&
",2,2,0,1,3,0,4,0,0,8,63,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,209,"                    return chrono;
",2,0,0,0,0,1,0,0,0,2,14,10,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,220,"            chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
",6,0,0,1,2,0,6,0,0,13,75,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,221,"            chrono = new GJChronology
",2,0,0,0,0,0,0,2,0,5,25,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,247,"        if (gregorianCutover == DEFAULT_CUTOVER.getMillis()) {
",2,1,0,2,5,0,4,0,0,7,54,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,248,"            cutoverInstant = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,250,"            cutoverInstant = new Instant(gregorianCutover);
",4,0,0,1,2,0,0,2,0,7,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,252,"        return getInstance(zone, cutoverInstant, minDaysInFirstWeek);
",0,0,0,1,2,1,8,0,0,8,61,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,288,"        return getInstance(getZone(), iCutoverInstant, getMinimumDaysInFirstWeek());
",0,0,0,3,6,1,8,0,0,8,76,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,293,"        if ((base = getBase()) != null) {
",2,1,0,3,7,0,2,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,294,"            return base.getZone();
",0,0,0,1,2,1,4,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,296,"        return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,307,"        return withZone(DateTimeZone.UTC);
",4,0,0,1,2,1,2,0,0,6,34,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,317,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,318,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,320,"        if (zone == getZone()) {
",2,1,0,2,5,0,2,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,321,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,323,"        return getInstance(zone, iCutoverInstant, getMinimumDaysInFirstWeek());
",0,0,0,2,4,1,8,0,0,8,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,331,"        if ((base = getBase()) != null) {
",2,1,0,3,7,0,2,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,332,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);
",0,0,0,1,2,1,12,0,0,12,74,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,336,"        long instant = iGregorianChronology.getDateTimeMillis
",2,0,0,0,0,0,4,0,0,6,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,338,"        if (instant < iCutoverMillis) {
",4,1,0,1,3,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,340,"            instant = iJulianChronology.getDateTimeMillis
",2,0,0,0,0,0,4,0,0,7,45,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,342,"            if (instant >= iCutoverMillis) {
",4,1,0,1,3,0,0,0,0,5,32,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,344,"                throw new IllegalArgumentException(""Specified date does not exist"");
",0,0,0,1,2,0,0,2,0,3,68,9,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,347,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,356,"        if ((base = getBase()) != null) {
",2,1,0,3,7,0,2,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,357,"            return base.getDateTimeMillis
",0,0,0,0,0,1,4,0,0,4,29,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,365,"            instant = iGregorianChronology.getDateTimeMillis
",2,0,0,0,0,0,4,0,0,7,48,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,378,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,368,"        } catch (IllegalFieldValueException ex) {
",2,0,0,1,4,0,0,2,0,4,41,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,369,"            if (monthOfYear != 2 || dayOfMonth != 29) {
",4,3,0,1,3,0,0,0,0,7,43,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,370,"                throw ex;
",2,0,0,0,0,0,0,0,0,2,9,9,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,372,"            instant = iGregorianChronology.getDateTimeMillis
",2,0,0,0,0,0,4,0,0,7,48,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,375,"            if (instant >= iCutoverMillis) {
",4,1,0,1,3,0,0,0,0,5,32,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,376,"                throw ex;
",2,0,0,0,0,0,0,0,0,2,9,9,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,379,"        if (instant < iCutoverMillis) {
",4,1,0,1,3,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,381,"            instant = iJulianChronology.getDateTimeMillis
",2,0,0,0,0,0,4,0,0,7,45,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,384,"            if (instant >= iCutoverMillis) {
",4,1,0,1,3,0,0,0,0,5,32,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,386,"                throw new IllegalArgumentException(""Specified date does not exist"");
",0,0,0,1,2,0,0,2,0,3,68,9,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,389,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,397,"        return iCutoverInstant;
",2,0,0,0,0,1,0,0,0,2,23,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,406,"        return iGregorianChronology.getMinimumDaysInFirstWeek();
",0,0,0,1,2,1,4,0,0,4,56,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,417,"        return super.equals(obj);
",4,0,0,1,2,1,0,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,427,"        return ""GJ"".hashCode() * 11 + iJulianChronology.hashCode() +
",0,4,0,2,4,1,6,0,0,11,60,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,439,"        StringBuffer sb = new StringBuffer(60);
",2,0,0,1,2,0,0,4,0,6,39,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,440,"        sb.append(""GJChronology"");
",0,0,0,1,2,0,4,0,0,5,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,441,"        sb.append('[');
",0,0,0,1,3,0,4,0,0,5,15,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,442,"        sb.append(getZone().getID());
",0,0,0,3,6,0,8,0,0,8,29,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,444,"        if (iCutoverMillis != DEFAULT_CUTOVER.getMillis()) {
",2,1,0,2,5,0,4,0,0,7,52,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,445,"            sb.append("",cutover="");
",0,0,0,1,2,0,4,0,0,5,23,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,447,"            if (withUTC().dayOfYear().remainder(iCutoverMillis) == 0) {
",0,1,0,4,9,0,8,0,0,9,59,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,448,"                printer = ISODateTimeFormat.date();
",2,0,0,1,2,0,4,0,0,7,35,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,450,"                printer = ISODateTimeFormat.dateTime();
",2,0,0,1,2,0,4,0,0,7,39,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,452,"            printer.withChronology(withUTC()).printTo(sb, iCutoverMillis);
",0,0,0,3,6,0,12,0,0,12,62,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,455,"        if (getMinimumDaysInFirstWeek() != 4) {
",0,1,0,2,5,0,2,0,0,3,39,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,456,"            sb.append("",mdfw="");
",0,0,0,1,2,0,4,0,0,5,20,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,457,"            sb.append(getMinimumDaysInFirstWeek());
",0,0,0,2,4,0,6,0,0,6,39,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,459,"        sb.append(']');
",0,0,0,1,3,0,4,0,0,5,15,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,461,"        return sb.toString();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,477,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,481,"            throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,583,"        return convertByWeekyear(instant, iJulianChronology, iGregorianChronology);
",0,0,0,1,2,1,8,0,0,8,75,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,587,"        return convertByWeekyear(instant, iGregorianChronology, iJulianChronology);
",0,0,0,1,2,1,8,0,0,8,75,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,965,"            if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,966,"                instant = iGregorianField.add(instant, value);
",2,0,0,1,2,0,8,0,0,11,46,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,967,"                if (instant < iCutover) {
",4,1,0,1,3,0,0,0,0,5,25,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,969,"                    if (instant + iGapDuration < iCutover) {
",6,2,0,1,3,0,0,0,0,8,40,9,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,970,"                        instant = gregorianToJulian(instant);
",2,0,0,1,2,0,4,0,0,7,37,11,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,974,"                instant = iJulianField.add(instant, value);
",2,0,0,1,2,0,8,0,0,11,43,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,975,"                if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,977,"                    if (instant - iGapDuration >= iCutover) {
",6,2,0,1,3,0,0,0,0,8,41,9,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,978,"                        instant = julianToGregorian(instant);
",2,0,0,1,2,0,4,0,0,7,37,11,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,982,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,986,"            if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,987,"                instant = iGregorianField.add(instant, value);
",2,0,0,1,2,0,8,0,0,11,46,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,988,"                if (instant < iCutover) {
",4,1,0,1,3,0,0,0,0,5,25,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,990,"                    if (instant + iGapDuration < iCutover) {
",6,2,0,1,3,0,0,0,0,8,40,9,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,991,"                        instant = gregorianToJulian(instant);
",2,0,0,1,2,0,4,0,0,7,37,11,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,995,"                instant = iJulianField.add(instant, value);
",2,0,0,1,2,0,8,0,0,11,43,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,996,"                if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,998,"                    if (instant - iGapDuration >= iCutover) {
",6,2,0,1,3,0,0,0,0,8,41,9,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,999,"                        instant = julianToGregorian(instant);
",2,0,0,1,2,0,4,0,0,7,37,11,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,1003,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,1007,"            if (minuendInstant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,33,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,1008,"                if (subtrahendInstant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,36,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,1009,"                    return iGregorianField.getDifference(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,72,10,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,1013,"                minuendInstant = gregorianToJulian(minuendInstant);
",2,0,0,1,2,0,4,0,0,7,51,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,1014,"                return iJulianField.getDifference(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,69,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,1016,"                if (subtrahendInstant < iCutover) {
",4,1,0,1,3,0,0,0,0,5,35,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,1017,"                    return iJulianField.getDifference(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,69,10,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,1021,"                minuendInstant = julianToGregorian(minuendInstant);
",2,0,0,1,2,0,4,0,0,7,51,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,1022,"                return iGregorianField.getDifference(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,72,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,1027,"            if (minuendInstant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,33,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,1028,"                if (subtrahendInstant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,36,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,1029,"                    return iGregorianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,78,10,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,1033,"                minuendInstant = gregorianToJulian(minuendInstant);
",2,0,0,1,2,0,4,0,0,7,51,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,1034,"                return iJulianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,75,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,1036,"                if (subtrahendInstant < iCutover) {
",4,1,0,1,3,0,0,0,0,5,35,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,1037,"                    return iJulianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,75,10,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,1041,"                minuendInstant = julianToGregorian(minuendInstant);
",2,0,0,1,2,0,4,0,0,7,51,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,1042,"                return iGregorianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,78,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,1057,"            if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,1058,"                return iGregorianField.getMinimumValue(instant);
",0,0,0,1,2,1,6,0,0,6,48,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,1060,"                return iJulianField.getMinimumValue(instant);
",0,0,0,1,2,1,6,0,0,6,45,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,1065,"            if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,1066,"                return iGregorianField.getMaximumValue(instant);
",0,0,0,1,2,1,6,0,0,6,48,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,12,1068,"                return iJulianField.getMaximumValue(instant);
",0,0,0,1,2,1,6,0,0,6,45,8,0.00000,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,80,"                throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,10,0.00000,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,95,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,104,"        return getInstance(DateTimeZone.getDefault(), 4);
",0,0,0,2,4,1,6,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,126,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,137,"            } catch (ArrayIndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,44,8,0.00000,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,138,"                throw new IllegalArgumentException
",0,0,0,0,0,0,0,2,0,2,34,11,0.00000,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,145,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);
",6,0,0,1,2,0,4,0,0,11,59,10,0.00000,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,146,"                    chrono = new JulianChronology
",2,0,0,0,0,0,0,2,0,5,29,10,0.00000,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,169,"        Chronology base = getBase();
",2,0,0,1,2,0,2,2,0,6,28,4,0.00000,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,170,"        int minDays = getMinimumDaysInFirstWeek();
",2,0,0,1,2,0,2,0,0,4,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,171,"        minDays = (minDays == 0 ? 4 : minDays);  // handle rename of BaseGJChronology
",6,1,0,1,2,0,0,0,0,8,77,4,0.00000,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,172,"        return base == null ?
",2,1,0,0,0,1,0,0,0,3,21,5,0.00000,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,185,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,195,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,196,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,198,"        if (zone == getZone()) {
",2,1,0,2,5,0,2,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,199,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,201,"        return getInstance(zone);
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,226,"            leapYears = relativeYear >> 2;
",4,1,0,0,0,0,0,0,0,6,30,6,0.00000,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,228,"            if (!isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/chrono/JulianChronology,12,229,"                leapYears++;
",2,0,0,0,0,0,0,0,0,3,12,8,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,68,"            throw new IllegalArgumentException(""Must supply a chronology"");
",0,0,0,1,2,0,0,2,0,3,63,7,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,75,"            if (!lowerLimit.isBefore(upperLimit)) {
",0,0,0,2,5,0,6,0,0,7,39,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,76,"                throw new IllegalArgumentException
",0,0,0,0,0,0,0,2,0,2,34,10,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,111,"        return iLowerLimit;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,120,"        return iUpperLimit;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,129,"        return withZone(DateTimeZone.UTC);
",4,0,0,1,2,1,2,0,0,6,34,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,138,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,139,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,141,"        if (zone == getZone()) {
",2,1,0,2,5,0,2,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,142,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,145,"        if (zone == DateTimeZone.UTC && iWithUTC != null) {
",8,3,0,1,3,0,0,0,0,11,51,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,146,"            return iWithUTC;
",2,0,0,0,0,1,0,0,0,2,16,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,149,"        DateTime lowerLimit = iLowerLimit;
",4,0,0,0,0,0,0,2,0,6,34,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,150,"        if (lowerLimit != null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,151,"            MutableDateTime mdt = lowerLimit.toMutableDateTime();
",2,0,0,1,2,0,4,2,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,152,"            mdt.setZoneRetainFields(zone);
",0,0,0,1,2,0,6,0,0,6,30,7,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,153,"            lowerLimit = mdt.toDateTime();
",2,0,0,1,2,0,4,0,0,7,30,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,156,"        DateTime upperLimit = iUpperLimit;
",4,0,0,0,0,0,0,2,0,6,34,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,157,"        if (upperLimit != null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,158,"            MutableDateTime mdt = upperLimit.toMutableDateTime();
",2,0,0,1,2,0,4,2,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,159,"            mdt.setZoneRetainFields(zone);
",0,0,0,1,2,0,6,0,0,6,30,7,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,160,"            upperLimit = mdt.toDateTime();
",2,0,0,1,2,0,4,0,0,7,30,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,163,"        LimitChronology chrono = getInstance
",2,0,0,0,0,0,2,2,0,6,36,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,166,"        if (zone == DateTimeZone.UTC) {
",6,1,0,1,3,0,0,0,0,7,31,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,167,"            iWithUTC = chrono;
",4,0,0,0,0,0,0,0,0,5,18,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,170,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,177,"        long instant = getBase().getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);
",2,0,0,2,4,0,12,0,0,14,87,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,178,"        checkLimits(instant, ""resulting"");
",0,0,0,1,2,0,4,0,0,5,34,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,179,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,187,"        long instant = getBase().getDateTimeMillis
",2,0,0,1,2,0,4,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,190,"        checkLimits(instant, ""resulting"");
",0,0,0,1,2,0,4,0,0,5,34,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,191,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,199,"        checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,200,"        instant = getBase().getDateTimeMillis
",2,0,0,1,2,0,4,0,0,7,37,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,202,"        checkLimits(instant, ""resulting"");
",0,0,0,1,2,0,4,0,0,5,34,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,203,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,269,"            return field;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,272,"            return (DateTimeField)converted.get(field);
",0,0,0,2,4,1,6,2,0,8,43,7,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,285,"        if ((limit = iLowerLimit) != null && instant < limit.getMillis()) {
",6,3,0,3,7,0,4,0,0,14,67,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,286,"            throw new LimitException(desc, true);
",2,0,0,1,2,0,0,2,0,5,37,7,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,288,"        if ((limit = iUpperLimit) != null && instant >= limit.getMillis()) {
",6,3,0,3,7,0,4,0,0,14,68,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,289,"            throw new LimitException(desc, false);
",2,0,0,1,2,0,0,2,0,5,38,7,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,291,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,303,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,304,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,306,"        if (obj instanceof LimitChronology == false) {
",2,1,0,1,3,0,0,2,0,6,46,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,307,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,309,"        LimitChronology chrono = (LimitChronology) obj;
",4,0,0,1,2,0,0,4,0,8,47,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,310,"        return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,323,"        int hash = 317351877;
",2,0,0,0,0,0,0,0,0,2,21,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,324,"        hash += (getLowerLimit() != null ? getLowerLimit().hashCode() : 0);
",2,1,0,4,8,0,6,0,0,12,67,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,325,"        hash += (getUpperLimit() != null ? getUpperLimit().hashCode() : 0);
",2,1,0,4,8,0,6,0,0,12,67,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,326,"        hash += getBase().hashCode() * 7;
",2,1,0,2,4,0,4,0,0,8,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,327,"        return hash;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,336,"        return ""LimitChronology["" + getBase().toString() + "", "" +
",0,1,0,2,5,1,4,0,0,7,57,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,461,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,462,"            return getWrappedField().get(instant);
",0,0,0,2,4,1,6,0,0,6,38,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,466,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,467,"            return getWrappedField().getAsText(instant, locale);
",0,0,0,2,4,1,8,0,0,8,52,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,471,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,472,"            return getWrappedField().getAsShortText(instant, locale);
",0,0,0,2,4,1,8,0,0,8,57,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,476,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,477,"            long result = getWrappedField().add(instant, amount);
",2,0,0,2,4,0,8,0,0,10,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,478,"            checkLimits(result, ""resulting"");
",0,0,0,1,2,0,4,0,0,5,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,479,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,483,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,484,"            long result = getWrappedField().add(instant, amount);
",2,0,0,2,4,0,8,0,0,10,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,485,"            checkLimits(result, ""resulting"");
",0,0,0,1,2,0,4,0,0,5,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,486,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,490,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,491,"            long result = getWrappedField().addWrapField(instant, amount);
",2,0,0,2,4,0,8,0,0,10,62,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,492,"            checkLimits(result, ""resulting"");
",0,0,0,1,2,0,4,0,0,5,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,493,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,497,"            checkLimits(minuendInstant, ""minuend"");
",0,0,0,1,2,0,4,0,0,5,39,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,498,"            checkLimits(subtrahendInstant, ""subtrahend"");
",0,0,0,1,2,0,4,0,0,5,45,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,499,"            return getWrappedField().getDifference(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,74,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,503,"            checkLimits(minuendInstant, ""minuend"");
",0,0,0,1,2,0,4,0,0,5,39,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,504,"            checkLimits(subtrahendInstant, ""subtrahend"");
",0,0,0,1,2,0,4,0,0,5,45,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,505,"            return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,80,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,509,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,510,"            long result = getWrappedField().set(instant, value);
",2,0,0,2,4,0,8,0,0,10,52,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,511,"            checkLimits(result, ""resulting"");
",0,0,0,1,2,0,4,0,0,5,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,512,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,516,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,517,"            long result = getWrappedField().set(instant, text, locale);
",2,0,0,2,4,0,10,0,0,12,59,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,518,"            checkLimits(result, ""resulting"");
",0,0,0,1,2,0,4,0,0,5,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,519,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,523,"            return iDurationField;
",2,0,0,0,0,1,0,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,527,"            return iRangeDurationField;
",2,0,0,0,0,1,0,0,0,2,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,531,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,532,"            return getWrappedField().isLeap(instant);
",0,0,0,2,4,1,6,0,0,6,41,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,536,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,537,"            return getWrappedField().getLeapAmount(instant);
",0,0,0,2,4,1,6,0,0,6,48,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,541,"            return iLeapDurationField;
",2,0,0,0,0,1,0,0,0,2,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,545,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,546,"            long result = getWrappedField().roundFloor(instant);
",2,0,0,2,4,0,6,0,0,8,52,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,547,"            checkLimits(result, ""resulting"");
",0,0,0,1,2,0,4,0,0,5,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,548,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,552,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,553,"            long result = getWrappedField().roundCeiling(instant);
",2,0,0,2,4,0,6,0,0,8,54,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,554,"            checkLimits(result, ""resulting"");
",0,0,0,1,2,0,4,0,0,5,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,555,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,559,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,560,"            long result = getWrappedField().roundHalfFloor(instant);
",2,0,0,2,4,0,6,0,0,8,56,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,561,"            checkLimits(result, ""resulting"");
",0,0,0,1,2,0,4,0,0,5,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,562,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,566,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,567,"            long result = getWrappedField().roundHalfCeiling(instant);
",2,0,0,2,4,0,6,0,0,8,58,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,568,"            checkLimits(result, ""resulting"");
",0,0,0,1,2,0,4,0,0,5,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,569,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,573,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,574,"            long result = getWrappedField().roundHalfEven(instant);
",2,0,0,2,4,0,6,0,0,8,55,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,575,"            checkLimits(result, ""resulting"");
",0,0,0,1,2,0,4,0,0,5,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,576,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,580,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,581,"            long result = getWrappedField().remainder(instant);
",2,0,0,2,4,0,6,0,0,8,51,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,582,"            checkLimits(result, ""resulting"");
",0,0,0,1,2,0,4,0,0,5,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,583,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,587,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,588,"            return getWrappedField().getMinimumValue(instant);
",0,0,0,2,4,1,6,0,0,6,50,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,592,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,593,"            return getWrappedField().getMaximumValue(instant);
",0,0,0,2,4,1,6,0,0,6,50,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,597,"            return getWrappedField().getMaximumTextLength(locale);
",0,0,0,2,4,1,6,0,0,6,54,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,12,601,"            return getWrappedField().getMaximumShortTextLength(locale);
",0,0,0,2,4,1,6,0,0,6,59,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,216,"        Stub(DateTimeZone zone) {
",4,0,0,1,3,0,0,2,0,6,25,3,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,217,"            iZone = zone;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,218,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,221,"            return ISOChronology.getInstance(iZone);
",0,0,0,1,2,1,6,0,0,6,40,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,225,"            out.writeObject(iZone);
",0,0,0,1,2,0,6,0,0,6,23,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,226,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,231,"            iZone = (DateTimeZone)in.readObject();
",2,0,0,2,4,0,4,2,0,9,38,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,12,232,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,93,"        return getInstance(DateTimeZone.getDefault());
",0,0,0,2,4,1,6,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,105,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,135,"        Chronology base = getBase();
",2,0,0,1,2,0,2,2,0,6,28,4,0.00000,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,136,"        return base == null ? getInstanceUTC() : getInstance(base.getZone());
",2,1,0,3,6,1,8,0,0,13,69,5,0.00000,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,147,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,157,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,158,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,160,"        if (zone == getZone()) {
",2,1,0,2,5,0,2,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,161,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,163,"        return getInstance(zone);
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,174,"        return super.equals(obj);
",4,0,0,1,2,1,0,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,184,"        return ""Buddhist"".hashCode() * 11 + getZone().hashCode();
",0,2,0,3,6,1,6,0,0,9,57,4,0.00000,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,195,"        String str = ""BuddhistChronology"";
",2,0,0,0,0,0,0,2,0,5,34,4,0.00000,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,196,"        DateTimeZone zone = getZone();
",2,0,0,1,2,0,2,2,0,6,30,4,0.00000,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,197,"        if (zone != null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,198,"            str = str + '[' + zone.getID() + ']';
",4,1,0,2,4,0,4,0,0,12,37,6,0.00000,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,12,200,"        return str;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,12,57,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,12,62,"        return ERA_VALUE;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,12,67,"        FieldUtils.verifyValueBounds(this, era, ERA_VALUE, ERA_VALUE);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,12,68,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,12,73,"        if (iEraText.equals(text) == false && ""1"".equals(text) == false) {
",0,3,0,3,7,0,10,0,0,16,66,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,12,74,"            throw new IllegalFieldValueException(DateTimeFieldType.era(), text);
",2,0,0,2,4,0,4,2,0,8,68,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,12,76,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,12,81,"        return Long.MIN_VALUE;
",4,0,0,0,0,1,0,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,12,86,"        return Long.MAX_VALUE;
",4,0,0,0,0,1,0,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,12,91,"        return Long.MIN_VALUE;
",4,0,0,0,0,1,0,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,12,96,"        return Long.MIN_VALUE;
",4,0,0,0,0,1,0,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,12,101,"        return Long.MIN_VALUE;
",4,0,0,0,0,1,0,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,12,116,"        return ERA_VALUE;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,12,121,"        return ERA_VALUE;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,12,126,"        return iEraText;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,12,131,"        return iEraText.length();
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,69,"        } else if (min == skip + 1) {
",4,2,0,1,4,0,0,0,0,6,29,5,0.00000,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,70,"            iMinValue = skip;
",4,0,0,0,0,0,0,0,0,5,17,7,0.00000,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,72,"            iMinValue = min;
",4,0,0,0,0,0,0,0,0,5,16,7,0.00000,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,79,"        int value = super.get(millis);
",6,0,0,1,2,0,0,0,0,6,30,5,0.00000,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,80,"        if (value < iSkip) {
",4,1,0,1,3,0,0,0,0,5,20,4,0.00000,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,81,"            value++;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,83,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,12,99,"        return getType().getField(iChronology);
",0,0,0,2,4,1,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,64,"            throw new IllegalArgumentException(""The field must not be null"");
",0,0,0,1,2,0,0,2,0,4,65,6,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,76,"        return iField;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,84,"        return iType.getName();
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,92,"        return iField.isLenient();
",0,0,0,1,2,1,4,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,100,"        return iField.getAsText(instant, locale);
",0,0,0,1,2,1,8,0,0,8,41,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,104,"        return iField.getAsText(instant);
",0,0,0,1,2,1,6,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,108,"        return iField.getAsText(partial, fieldValue, locale);
",0,0,0,1,2,1,10,0,0,10,53,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,112,"        return iField.getAsText(partial, locale);
",0,0,0,1,2,1,8,0,0,8,41,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,116,"        return iField.getAsText(fieldValue, locale);
",0,0,0,1,2,1,8,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,120,"        return iField.getAsShortText(instant, locale);
",0,0,0,1,2,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,124,"        return iField.getAsShortText(instant);
",0,0,0,1,2,1,6,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,128,"        return iField.getAsShortText(partial, fieldValue, locale);
",0,0,0,1,2,1,10,0,0,10,58,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,132,"        return iField.getAsShortText(partial, locale);
",0,0,0,1,2,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,136,"        return iField.getAsShortText(fieldValue, locale);
",0,0,0,1,2,1,8,0,0,8,49,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,140,"        return iField.add(instant, value);
",0,0,0,1,2,1,8,0,0,8,34,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,144,"        return iField.add(instant, value);
",0,0,0,1,2,1,8,0,0,8,34,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,148,"        return iField.add(instant, fieldIndex, values, valueToAdd);
",0,0,0,1,2,1,12,0,0,12,59,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,152,"        return iField.addWrapPartial(instant, fieldIndex, values, valueToAdd);
",0,0,0,1,2,1,12,0,0,12,70,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,156,"        return iField.addWrapField(instant, value);
",0,0,0,1,2,1,8,0,0,8,43,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,160,"        return iField.addWrapField(instant, fieldIndex, values, valueToAdd);
",0,0,0,1,2,1,12,0,0,12,68,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,164,"        return iField.getDifference(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,63,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,168,"        return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,69,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,176,"        return iField.set(instant, text, locale);
",0,0,0,1,2,1,10,0,0,10,41,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,180,"        return iField.set(instant, text);
",0,0,0,1,2,1,8,0,0,8,33,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,184,"        return iField.set(instant, fieldIndex, values, newValue);
",0,0,0,1,2,1,12,0,0,12,57,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,188,"        return iField.set(instant, fieldIndex, values, text, locale);
",0,0,0,1,2,1,14,0,0,14,61,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,200,"        return iField.isLeap(instant);
",0,0,0,1,2,1,6,0,0,6,30,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,204,"        return iField.getLeapAmount(instant);
",0,0,0,1,2,1,6,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,216,"        return iField.getMinimumValue(instant);
",0,0,0,1,2,1,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,220,"        return iField.getMinimumValue(instant);
",0,0,0,1,2,1,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,224,"        return iField.getMinimumValue(instant, values);
",0,0,0,1,2,1,8,0,0,8,47,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,232,"        return iField.getMaximumValue(instant);
",0,0,0,1,2,1,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,236,"        return iField.getMaximumValue(instant);
",0,0,0,1,2,1,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,240,"        return iField.getMaximumValue(instant, values);
",0,0,0,1,2,1,8,0,0,8,47,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,244,"        return iField.getMaximumTextLength(locale);
",0,0,0,1,2,1,6,0,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,248,"        return iField.getMaximumShortTextLength(locale);
",0,0,0,1,2,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,252,"        return iField.roundFloor(instant);
",0,0,0,1,2,1,6,0,0,6,34,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,256,"        return iField.roundCeiling(instant);
",0,0,0,1,2,1,6,0,0,6,36,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,260,"        return iField.roundHalfFloor(instant);
",0,0,0,1,2,1,6,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,264,"        return iField.roundHalfCeiling(instant);
",0,0,0,1,2,1,6,0,0,6,40,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,268,"        return iField.roundHalfEven(instant);
",0,0,0,1,2,1,6,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,272,"        return iField.remainder(instant);
",0,0,0,1,2,1,6,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,12,276,"        return (""DateTimeField["" + getName() + ']');
",0,1,0,3,6,1,2,0,0,5,44,5,0.00000,0
defect4j,time,org/joda/time/field/SkipDateTimeField,12,70,"        } else if (min == skip) {
",4,1,0,1,4,0,0,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/field/SkipDateTimeField,12,71,"            iMinValue = skip + 1;
",4,1,0,0,0,0,0,0,0,6,21,7,0.00000,0
defect4j,time,org/joda/time/field/SkipDateTimeField,12,73,"            iMinValue = min;
",4,0,0,0,0,0,0,0,0,5,16,7,0.00000,0
defect4j,time,org/joda/time/field/SkipDateTimeField,12,88,"        FieldUtils.verifyValueBounds(this, value, iMinValue, getMaximumValue());
",0,0,0,2,4,0,10,0,0,10,72,5,0.00000,0
defect4j,time,org/joda/time/field/SkipDateTimeField,12,89,"        if (value <= iSkip) {
",4,1,0,1,3,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/field/SkipDateTimeField,12,90,"            if (value == iSkip) {
",4,1,0,1,3,0,0,0,0,5,21,6,0.00000,0
defect4j,time,org/joda/time/field/SkipDateTimeField,12,91,"                throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,10,0.00000,0
defect4j,time,org/joda/time/field/SkipDateTimeField,12,94,"            value++;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,time,org/joda/time/field/SkipDateTimeField,12,96,"        return super.set(millis, value);
",6,0,0,1,2,1,0,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/field/SkipDateTimeField,12,104,"        return getType().getField(iChronology);
",0,0,0,2,4,1,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,604,"        Chronology chrono = new BaseChronology() {
",2,0,0,1,3,0,0,4,0,6,42,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,606,"                return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,609,"                return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,612,"                return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,615,"                return getClass().getName();
",0,0,0,2,4,1,4,0,0,4,28,11,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,36,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,37,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,49,"        if (value == Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,50,"            throw new ArithmeticException(""Integer.MIN_VALUE cannot be negated"");
",0,0,0,1,2,0,0,2,0,3,69,7,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,52,"        return -value;
",2,0,0,0,0,1,0,0,0,3,14,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,64,"        int sum = val1 + val2;
",6,1,0,0,0,0,0,0,0,7,22,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,66,"        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {
",8,5,0,3,7,0,0,0,0,13,45,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,67,"            throw new ArithmeticException
",0,0,0,0,0,0,0,2,0,2,29,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,70,"        return sum;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,82,"        long sum = val1 + val2;
",6,1,0,0,0,0,0,0,0,7,23,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,84,"        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {
",8,5,0,3,7,0,0,0,0,13,45,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,85,"            throw new ArithmeticException
",0,0,0,0,0,0,0,2,0,2,29,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,88,"        return sum;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,100,"        long diff = val1 - val2;
",6,1,0,0,0,0,0,0,0,7,24,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,102,"        if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {
",8,5,0,3,7,0,0,0,0,13,45,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,103,"            throw new ArithmeticException
",0,0,0,0,0,0,0,2,0,2,29,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,106,"        return diff;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,119,"        long total = (long) val1 * (long) val2;
",6,1,0,2,4,0,0,0,0,7,39,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,120,"        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {
",12,3,0,1,3,0,0,0,0,15,61,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,121,"          throw new ArithmeticException(""Multiplication overflows an int: "" + val1 + "" * "" + val2);
",4,1,0,1,2,0,0,2,0,9,89,7,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,123,"        return (int) total;
",2,0,0,1,2,1,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,136,"        switch (val2) {
",2,0,0,1,3,0,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,138,"                if (val1 == Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,139,"                    throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);
",4,1,0,1,2,0,0,2,0,9,89,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,141,"                return -val1;
",2,0,0,0,0,1,0,0,0,3,13,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,143,"                return 0L;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,145,"                return val1;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,147,"        long total = val1 * val2;
",6,1,0,0,0,0,0,0,0,7,25,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,148,"        if (total / val2 != val1) {
",6,2,0,1,3,0,0,0,0,8,27,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,149,"          throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);
",4,1,0,1,2,0,0,2,0,9,89,7,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,151,"        return total;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,163,"        if (val2 == 1) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,164,"            return val1;
",2,0,0,0,0,1,0,0,0,2,12,6,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,166,"        if (val1 == 1) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,167,"            return val2;
",2,0,0,0,0,1,0,0,0,2,12,6,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,169,"        if (val1 == 0 || val2 == 0) {
",4,3,0,1,3,0,0,0,0,7,29,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,170,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,172,"        long total = val1 * val2;
",6,1,0,0,0,0,0,0,0,7,25,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,173,"        if (total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1 || val2 == Long.MIN_VALUE && val1 == -1) {
",22,10,0,1,3,0,0,0,0,34,107,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,174,"            throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);
",4,1,0,1,2,0,0,2,0,9,89,7,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,176,"        return total;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,187,"        if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {
",12,3,0,1,3,0,0,0,0,15,63,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,188,"            return (int) value;
",2,0,0,1,2,1,0,0,0,2,19,7,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,190,"        throw new ArithmeticException(""Value cannot fit in an int: "" + value);
",2,1,0,1,2,0,0,2,0,6,70,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,202,"        long val = FieldUtils.safeMultiply(val1, val2);
",2,0,0,1,2,0,8,0,0,10,47,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,203,"        return FieldUtils.safeToInt(val);
",0,0,0,1,2,1,6,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,218,"            throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,236,"            throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,252,"        if ((value < lowerBound) || (value > upperBound)) {
",8,3,0,3,7,0,0,0,0,11,51,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,253,"            throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,257,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,276,"        return getWrappedValue(currentValue + wrapValue, minValue, maxValue);
",4,1,0,1,2,1,6,0,0,11,69,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,292,"        if (minValue >= maxValue) {
",4,1,0,1,3,0,0,0,0,5,27,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,293,"            throw new IllegalArgumentException(""MIN > MAX"");
",0,0,0,1,2,0,0,2,0,3,48,7,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,296,"        int wrapRange = maxValue - minValue + 1;
",6,2,0,0,0,0,0,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,297,"        value -= minValue;
",4,0,0,0,0,0,0,0,0,5,18,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,299,"        if (value >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,300,"            return (value % wrapRange) + minValue;
",6,2,0,1,2,1,0,0,0,8,38,6,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,303,"        int remByRange = (-value) % wrapRange;
",6,1,0,1,2,0,0,0,0,8,38,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,305,"        if (remByRange == 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,306,"            return 0 + minValue;
",2,1,0,0,0,1,0,0,0,3,20,6,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,308,"        return (wrapRange - remByRange) + minValue;
",6,2,0,1,2,1,0,0,0,8,43,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,321,"        if (object1 == object2) {
",4,1,0,1,3,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,322,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,324,"        if (object1 == null || object2 == null) {
",4,3,0,1,3,0,0,0,0,7,41,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,325,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,12,327,"        return object1.equals(object2);
",0,0,0,1,2,1,6,0,0,6,31,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,12,49,"            throw new IllegalArgumentException(""The scalar must not be 0 or 1"");
",0,0,0,1,2,0,0,2,0,3,68,7,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,12,55,"        return getWrappedField().getValue(duration) / iScalar;
",2,1,0,2,4,1,6,0,0,9,54,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,12,59,"        return getWrappedField().getValueAsLong(duration) / iScalar;
",2,1,0,2,4,1,6,0,0,9,60,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,12,63,"        return getWrappedField().getValue(duration, instant) / iScalar;
",2,1,0,2,4,1,8,0,0,11,63,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,12,67,"        return getWrappedField().getValueAsLong(duration, instant) / iScalar;
",2,1,0,2,4,1,8,0,0,11,69,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,12,71,"        long scaled = ((long) value) * ((long) iScalar);
",6,1,0,4,8,0,0,0,0,7,48,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,12,72,"        return getWrappedField().getMillis(scaled);
",0,0,0,2,4,1,6,0,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,12,76,"        long scaled = FieldUtils.safeMultiply(value, iScalar);
",2,0,0,1,2,0,8,0,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,12,77,"        return getWrappedField().getMillis(scaled);
",0,0,0,2,4,1,6,0,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,12,81,"        long scaled = ((long) value) * ((long) iScalar);
",6,1,0,4,8,0,0,0,0,7,48,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,12,82,"        return getWrappedField().getMillis(scaled, instant);
",0,0,0,2,4,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,12,86,"        long scaled = FieldUtils.safeMultiply(value, iScalar);
",2,0,0,1,2,0,8,0,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,12,87,"        return getWrappedField().getMillis(scaled, instant);
",0,0,0,2,4,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,12,91,"        long scaled = ((long) value) * ((long) iScalar);
",6,1,0,4,8,0,0,0,0,7,48,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,12,92,"        return getWrappedField().add(instant, scaled);
",0,0,0,2,4,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,12,96,"        long scaled = FieldUtils.safeMultiply(value, iScalar);
",2,0,0,1,2,0,8,0,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,12,97,"        return getWrappedField().add(instant, scaled);
",0,0,0,2,4,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,12,101,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iScalar;
",2,1,0,2,4,1,8,0,0,11,84,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,12,105,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iScalar;
",2,1,0,2,4,1,8,0,0,11,90,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,12,119,"        return iScalar;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,12,130,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,12,131,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,12,132,"        } else if (obj instanceof ScaledDurationField) {
",2,0,0,1,4,0,0,2,0,4,48,6,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,12,133,"            ScaledDurationField other = (ScaledDurationField) obj;
",4,0,0,1,2,0,0,4,0,8,54,7,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,12,134,"            return (getWrappedField().equals(other.getWrappedField())) &&
",0,1,0,4,8,1,8,0,0,9,61,7,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,12,138,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,12,53,"        return ""millis"";
",0,0,0,0,0,1,0,0,0,1,16,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,12,85,"        return FieldUtils.safeToInt(duration);
",0,0,0,1,2,1,6,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,12,89,"        return duration;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,12,93,"        return FieldUtils.safeToInt(duration);
",0,0,0,1,2,1,6,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,12,97,"        return duration;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,12,101,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,12,105,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,12,109,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,12,113,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,12,117,"        return FieldUtils.safeAdd(instant, value);
",0,0,0,1,2,1,8,0,0,8,42,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,12,121,"        return FieldUtils.safeAdd(instant, value);
",0,0,0,1,2,1,8,0,0,8,42,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,12,125,"        return FieldUtils.safeToInt(FieldUtils.safeSubtract(minuendInstant, subtrahendInstant));
",0,0,0,2,4,1,12,0,0,12,88,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,12,129,"        return FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,66,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,12,134,"        long otherMillis = otherField.getUnitMillis();
",2,0,0,1,2,0,4,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,12,135,"        long thisMillis = getUnitMillis();
",2,0,0,1,2,0,2,0,0,4,34,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,12,137,"        if (thisMillis == otherMillis) {
",4,1,0,1,3,0,0,0,0,5,32,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,12,138,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,12,140,"        if (thisMillis < otherMillis) {
",4,1,0,1,3,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,12,141,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,6,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,12,143,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,12,148,"        if (obj instanceof MillisDurationField) {
",2,0,0,1,3,0,0,2,0,4,41,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,12,149,"            return getUnitMillis() == ((MillisDurationField) obj).getUnitMillis();
",2,1,0,4,8,1,4,2,0,9,70,6,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,12,151,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,12,164,"        return ""DurationField[millis]"";
",0,0,0,1,2,1,0,0,0,1,31,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,12,171,"        return INSTANCE;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,12,32,"public final class MillisDurationField extends DurationField implements Serializable {
",2,0,0,0,1,2,0,4,0,8,86,1,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,12,539,"            return iMillis;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,816,"        Rule(Recurrence recurrence, int fromYear, int toYear) {
",8,0,0,1,3,0,0,2,0,10,55,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,817,"            iRecurrence = recurrence;
",4,0,0,0,0,0,0,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,818,"            iFromYear = fromYear;
",4,0,0,0,0,0,0,0,0,5,21,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,819,"            iToYear = toYear;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,820,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,823,"            return iFromYear;
",2,0,0,0,0,1,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,827,"            return iToYear;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,831,"            return iRecurrence.getOfYear();
",0,0,0,1,2,1,4,0,0,4,31,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,835,"            return iRecurrence.getNameKey();
",0,0,0,1,2,1,4,0,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,839,"            return iRecurrence.getSaveMillis();
",0,0,0,1,2,1,4,0,0,4,35,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,843,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,845,"            final int wallOffset = standardOffset + saveMillis;
",6,1,0,0,0,1,0,0,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,846,"            long testInstant = instant;
",4,0,0,0,0,0,0,0,0,4,27,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,849,"            if (instant == Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,32,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,850,"                year = Integer.MIN_VALUE;
",6,0,0,0,0,0,0,0,0,7,25,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,852,"                year = chrono.year().get(instant + wallOffset);
",6,1,0,2,4,0,6,0,0,14,47,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,855,"            if (year < iFromYear) {
",4,1,0,1,3,0,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,857,"                testInstant = chrono.year().set(0, iFromYear) - wallOffset;
",4,1,0,2,4,0,8,0,0,14,59,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,860,"                testInstant -= 1;
",2,0,0,0,0,0,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,863,"            long next = iRecurrence.next(testInstant, standardOffset, saveMillis);
",2,0,0,1,2,0,10,0,0,12,70,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,865,"            if (next > instant) {
",4,1,0,1,3,0,0,0,0,5,21,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,866,"                year = chrono.year().get(next + wallOffset);
",6,1,0,2,4,0,6,0,0,14,44,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,867,"                if (year > iToYear) {
",4,1,0,1,3,0,0,0,0,5,21,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,869,"                    next = instant;
",4,0,0,0,0,0,0,0,0,5,15,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,873,"            return next;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,506,"                throw new IllegalArgumentException(""Unknown mode: "" + mode);
",2,1,0,1,2,0,0,2,0,6,60,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,522,"            if (iMode == 'w') {
",2,1,0,1,3,0,0,0,0,4,19,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,523,"                offset = standardOffset + saveMillis;
",6,1,0,0,0,0,0,0,0,8,37,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,524,"            } else if (iMode == 's') {
",2,1,0,1,4,0,0,0,0,4,26,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,525,"                offset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,24,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,527,"                offset = 0;
",2,0,0,0,0,0,0,0,0,3,11,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,530,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,531,"            long millis = chrono.year().set(0, year);
",2,0,0,2,4,0,8,0,0,10,41,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,532,"            millis = chrono.monthOfYear().set(millis, iMonthOfYear);
",2,0,0,2,4,0,10,0,0,13,56,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,533,"            millis = chrono.millisOfDay().set(millis, iMillisOfDay);
",2,0,0,2,4,0,10,0,0,13,56,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,534,"            millis = setDayOfMonth(chrono, millis);
",2,0,0,1,2,0,6,0,0,9,39,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,536,"            if (iDayOfWeek != 0) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,537,"                millis = setDayOfWeek(chrono, millis);
",2,0,0,1,2,0,6,0,0,9,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,541,"            return millis - offset;
",4,1,0,0,0,1,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,549,"            if (iMode == 'w') {
",2,1,0,1,3,0,0,0,0,4,19,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,550,"                offset = standardOffset + saveMillis;
",6,1,0,0,0,0,0,0,0,8,37,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,551,"            } else if (iMode == 's') {
",2,1,0,1,4,0,0,0,0,4,26,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,552,"                offset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,24,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,554,"                offset = 0;
",2,0,0,0,0,0,0,0,0,3,11,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,558,"            instant += offset;
",4,0,0,0,0,0,0,0,0,5,18,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,560,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,561,"            long next = chrono.monthOfYear().set(instant, iMonthOfYear);
",2,0,0,2,4,0,10,0,0,12,60,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,563,"            next = chrono.millisOfDay().set(next, 0);
",2,0,0,2,4,0,8,0,0,11,41,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,564,"            next = chrono.millisOfDay().add(next, iMillisOfDay);
",2,0,0,2,4,0,10,0,0,13,52,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,565,"            next = setDayOfMonthNext(chrono, next);
",2,0,0,1,2,0,6,0,0,9,39,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,567,"            if (iDayOfWeek == 0) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,568,"                if (next <= instant) {
",4,1,0,1,3,0,0,0,0,5,22,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,569,"                    next = chrono.year().add(next, 1);
",2,0,0,2,4,0,8,0,0,11,34,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,570,"                    next = setDayOfMonthNext(chrono, next);
",2,0,0,1,2,0,6,0,0,9,39,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,573,"                next = setDayOfWeek(chrono, next);
",2,0,0,1,2,0,6,0,0,9,34,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,574,"                if (next <= instant) {
",4,1,0,1,3,0,0,0,0,5,22,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,575,"                    next = chrono.year().add(next, 1);
",2,0,0,2,4,0,8,0,0,11,34,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,576,"                    next = chrono.monthOfYear().set(next, iMonthOfYear);
",2,0,0,2,4,0,10,0,0,13,52,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,577,"                    next = setDayOfMonthNext(chrono, next);
",2,0,0,1,2,0,6,0,0,9,39,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,578,"                    next = setDayOfWeek(chrono, next);
",2,0,0,1,2,0,6,0,0,9,34,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,583,"            return next - offset;
",4,1,0,0,0,1,0,0,0,5,21,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,591,"            if (iMode == 'w') {
",2,1,0,1,3,0,0,0,0,4,19,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,592,"                offset = standardOffset + saveMillis;
",6,1,0,0,0,0,0,0,0,8,37,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,593,"            } else if (iMode == 's') {
",2,1,0,1,4,0,0,0,0,4,26,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,594,"                offset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,24,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,596,"                offset = 0;
",2,0,0,0,0,0,0,0,0,3,11,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,600,"            instant += offset;
",4,0,0,0,0,0,0,0,0,5,18,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,602,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,603,"            long prev = chrono.monthOfYear().set(instant, iMonthOfYear);
",2,0,0,2,4,0,10,0,0,12,60,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,605,"            prev = chrono.millisOfDay().set(prev, 0);
",2,0,0,2,4,0,8,0,0,11,41,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,606,"            prev = chrono.millisOfDay().add(prev, iMillisOfDay);
",2,0,0,2,4,0,10,0,0,13,52,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,607,"            prev = setDayOfMonthPrevious(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,43,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,609,"            if (iDayOfWeek == 0) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,610,"                if (prev >= instant) {
",4,1,0,1,3,0,0,0,0,5,22,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,611,"                    prev = chrono.year().add(prev, -1);
",2,0,0,2,4,0,8,0,0,12,35,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,612,"                    prev = setDayOfMonthPrevious(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,43,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,615,"                prev = setDayOfWeek(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,34,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,616,"                if (prev >= instant) {
",4,1,0,1,3,0,0,0,0,5,22,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,617,"                    prev = chrono.year().add(prev, -1);
",2,0,0,2,4,0,8,0,0,12,35,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,618,"                    prev = chrono.monthOfYear().set(prev, iMonthOfYear);
",2,0,0,2,4,0,10,0,0,13,52,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,619,"                    prev = setDayOfMonthPrevious(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,43,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,620,"                    prev = setDayOfWeek(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,34,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,625,"            return prev - offset;
",4,1,0,0,0,1,0,0,0,5,21,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,629,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,630,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,632,"            if (obj instanceof OfYear) {
",2,0,0,1,3,0,0,2,0,4,28,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,633,"                OfYear other = (OfYear)obj;
",4,0,0,1,2,0,0,4,0,8,27,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,634,"                return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,642,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,659,"            out.writeByte(iMode);
",0,0,0,1,2,0,6,0,0,6,21,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,660,"            out.writeByte(iMonthOfYear);
",0,0,0,1,2,0,6,0,0,6,28,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,661,"            out.writeByte(iDayOfMonth);
",0,0,0,1,2,0,6,0,0,6,27,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,662,"            out.writeByte(iDayOfWeek);
",0,0,0,1,2,0,6,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,663,"            out.writeBoolean(iAdvance);
",0,0,0,1,2,0,6,0,0,6,27,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,664,"            writeMillis(out, iMillisOfDay);
",0,0,0,1,2,0,6,0,0,6,31,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,665,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,672,"                next = setDayOfMonth(chrono, next);
",2,0,0,1,2,0,6,0,0,9,35,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,682,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,673,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,674,"                if (iMonthOfYear == 2 && iDayOfMonth == 29) {
",4,3,0,1,3,0,0,0,0,7,45,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,675,"                    while (chrono.year().isLeap(next) == false) {
",0,1,0,3,7,0,8,0,0,10,45,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,676,"                        next = chrono.year().add(next, 1);
",2,0,0,2,4,0,8,0,0,11,34,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,678,"                    next = setDayOfMonth(chrono, next);
",2,0,0,1,2,0,6,0,0,9,35,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,680,"                    throw e;
",2,0,0,0,0,0,0,0,0,2,8,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,683,"            return next;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,691,"                prev = setDayOfMonth(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,35,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,701,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,692,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,693,"                if (iMonthOfYear == 2 && iDayOfMonth == 29) {
",4,3,0,1,3,0,0,0,0,7,45,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,694,"                    while (chrono.year().isLeap(prev) == false) {
",0,1,0,3,7,0,8,0,0,10,45,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,695,"                        prev = chrono.year().add(prev, -1);
",2,0,0,2,4,0,8,0,0,12,35,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,697,"                    prev = setDayOfMonth(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,35,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,699,"                    throw e;
",2,0,0,0,0,0,0,0,0,2,8,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,702,"            return prev;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,706,"            if (iDayOfMonth >= 0) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,707,"                instant = chrono.dayOfMonth().set(instant, iDayOfMonth);
",2,0,0,2,4,0,10,0,0,13,56,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,709,"                instant = chrono.dayOfMonth().set(instant, 1);
",2,0,0,2,4,0,8,0,0,11,46,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,710,"                instant = chrono.monthOfYear().add(instant, 1);
",2,0,0,2,4,0,8,0,0,11,47,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,711,"                instant = chrono.dayOfMonth().add(instant, iDayOfMonth);
",2,0,0,2,4,0,10,0,0,13,56,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,713,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,717,"            int dayOfWeek = chrono.dayOfWeek().get(instant);
",2,0,0,2,4,0,8,0,0,10,48,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,718,"            int daysToAdd = iDayOfWeek - dayOfWeek;
",6,1,0,0,0,0,0,0,0,7,39,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,719,"            if (daysToAdd != 0) {
",2,1,0,1,3,0,0,0,0,3,21,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,720,"                if (iAdvance) {
",2,0,0,1,3,0,0,0,0,2,15,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,721,"                    if (daysToAdd < 0) {
",2,1,0,1,3,0,0,0,0,3,20,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,722,"                        daysToAdd += 7;
",2,0,0,0,0,0,0,0,0,3,15,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,725,"                    if (daysToAdd > 0) {
",2,1,0,1,3,0,0,0,0,3,20,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,726,"                        daysToAdd -= 7;
",2,0,0,0,0,0,0,0,0,3,15,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,729,"                instant = chrono.dayOfWeek().add(instant, daysToAdd);
",2,0,0,2,4,0,10,0,0,13,53,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,731,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,963,"        RuleSet() {
",2,0,0,1,3,0,0,0,0,2,11,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,964,"            iRules = new ArrayList<Rule>(10);
",2,0,0,1,2,0,0,4,0,7,33,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,965,"            iUpperYear = Integer.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,7,31,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,966,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,971,"        RuleSet(RuleSet rs) {
",4,0,0,1,3,0,0,2,0,6,21,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,972,"            iStandardOffset = rs.iStandardOffset;
",6,0,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,973,"            iRules = new ArrayList<Rule>(rs.iRules);
",6,0,0,1,2,0,0,4,0,11,40,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,974,"            iInitialNameKey = rs.iInitialNameKey;
",6,0,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,975,"            iInitialSaveMillis = rs.iInitialSaveMillis;
",6,0,0,0,0,0,0,0,0,7,43,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,976,"            iUpperYear = rs.iUpperYear;
",6,0,0,0,0,0,0,0,0,7,27,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,977,"            iUpperOfYear = rs.iUpperOfYear;
",6,0,0,0,0,0,0,0,0,7,31,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,978,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,948,"            long now = DateTimeUtils.currentTimeMillis();
",2,0,0,1,2,0,4,0,0,6,45,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,949,"            YEAR_LIMIT = ISOChronology.getInstanceUTC().year().get(now) + 100;
",2,1,0,3,6,0,10,0,0,14,66,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,950,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,981,"            return iStandardOffset;
",2,0,0,0,0,1,0,0,0,2,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,985,"            iStandardOffset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,33,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,986,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,989,"            iInitialNameKey = nameKey;
",4,0,0,0,0,0,0,0,0,5,26,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,990,"            iInitialSaveMillis = saveMillis;
",4,0,0,0,0,0,0,0,0,5,32,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,991,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,994,"            if (!iRules.contains(rule)) {
",0,0,0,2,5,0,6,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,995,"                iRules.add(rule);
",0,0,0,1,2,0,6,0,0,6,17,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,997,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1000,"            iUpperYear = year;
",4,0,0,0,0,0,0,0,0,5,18,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1001,"            iUpperOfYear = ofYear;
",4,0,0,0,0,0,0,0,0,5,22,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1002,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1011,"            if (iInitialNameKey != null) {
",2,1,0,1,3,0,0,0,0,3,30,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1013,"                return new Transition(firstMillis, iInitialNameKey,
",4,0,0,0,1,1,0,2,0,6,51,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1018,"            ArrayList<Rule> copy = new ArrayList<Rule>(iRules);
",4,0,0,1,2,0,0,8,0,12,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1024,"            long millis = Long.MIN_VALUE;
",6,0,0,0,0,0,0,0,0,6,29,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1025,"            int saveMillis = 0;
",2,0,0,0,0,0,0,0,0,2,19,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1026,"            Transition first = null;
",2,0,0,0,0,0,0,2,0,4,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1029,"            while ((next = nextTransition(millis, saveMillis)) != null) {
",2,1,0,3,7,0,6,0,0,11,61,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1030,"                millis = next.getMillis();
",2,0,0,1,2,0,4,0,0,7,26,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1032,"                if (millis == firstMillis) {
",4,1,0,1,3,0,0,0,0,5,28,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1033,"                    first = new Transition(firstMillis, next);
",6,0,0,1,2,0,0,2,0,9,42,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1034,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1037,"                if (millis > firstMillis) {
",4,1,0,1,3,0,0,0,0,5,27,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1038,"                    if (first == null) {
",2,1,0,1,3,0,0,0,0,3,20,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1042,"                        for (Rule rule : copy) {
",4,0,0,1,3,0,0,2,0,6,24,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1043,"                            if (rule.getSaveMillis() == 0) {
",0,1,0,2,5,0,4,0,0,5,32,13,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1044,"                                first = new Transition(firstMillis, rule, iStandardOffset);
",8,0,0,1,2,0,0,2,0,11,59,15,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1045,"                                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1047,"                        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1049,"                    if (first == null) {
",2,1,0,1,3,0,0,0,0,3,20,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1053,"                        first = new Transition(firstMillis, next.getNameKey(),
",4,0,0,1,3,0,4,2,0,11,54,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1061,"                first = new Transition(firstMillis, next);
",6,0,0,1,2,0,0,2,0,9,42,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1063,"                saveMillis = next.getSaveMillis();
",2,0,0,1,2,0,4,0,0,7,34,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1066,"            iRules = copy;
",4,0,0,0,0,0,0,0,0,5,14,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1067,"            return first;
",2,0,0,0,0,1,0,0,0,2,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1082,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1085,"            Rule nextRule = null;
",2,0,0,0,0,0,0,2,0,4,21,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1086,"            long nextMillis = Long.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,6,33,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1088,"            Iterator<Rule> it = iRules.iterator();
",2,0,0,1,2,0,4,4,0,10,38,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1089,"            while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1090,"                Rule rule = it.next();
",2,0,0,1,2,0,4,2,0,8,22,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1091,"                long next = rule.next(instant, iStandardOffset, saveMillis);
",2,0,0,1,2,0,10,0,0,12,60,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1092,"                if (next <= instant) {
",4,1,0,1,3,0,0,0,0,5,22,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1093,"                    it.remove();
",0,0,0,1,2,0,4,0,0,4,12,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1094,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1098,"                if (next <= nextMillis) {
",4,1,0,1,3,0,0,0,0,5,25,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1100,"                    nextRule = rule;
",4,0,0,0,0,0,0,0,0,5,16,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1101,"                    nextMillis = next;
",4,0,0,0,0,0,0,0,0,5,18,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1103,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1105,"            if (nextRule == null) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1106,"                return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1110,"            if (chrono.year().get(nextMillis) >= YEAR_LIMIT) {
",2,1,0,3,7,0,8,0,0,11,50,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1111,"                return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1115,"            if (iUpperYear < Integer.MAX_VALUE) {
",6,1,0,1,3,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1116,"                long upperMillis =
",2,0,0,0,0,0,0,0,0,2,18,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1118,"                if (nextMillis >= upperMillis) {
",4,1,0,1,3,0,0,0,0,5,32,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1120,"                    return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1124,"            return new Transition(nextMillis, nextRule, iStandardOffset);
",6,0,0,1,2,1,0,2,0,8,61,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1131,"            if (iUpperYear == Integer.MAX_VALUE) {
",6,1,0,1,3,0,0,0,0,7,38,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1132,"                return Long.MAX_VALUE;
",4,0,0,0,0,1,0,0,0,4,22,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1134,"            return iUpperOfYear.setInstant(iUpperYear, iStandardOffset, saveMillis);
",0,0,0,1,2,1,10,0,0,10,72,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1141,"            if (iRules.size() == 2) {
",0,1,0,2,5,0,4,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1142,"                Rule startRule = iRules.get(0);
",2,0,0,1,2,0,4,2,0,8,31,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1143,"                Rule endRule = iRules.get(1);
",2,0,0,1,2,0,4,2,0,8,29,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1144,"                if (startRule.getToYear() == Integer.MAX_VALUE &&
",4,2,0,1,3,0,4,0,0,10,49,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1154,"                    return new DSTZone(id, iStandardOffset,
",4,0,0,0,1,1,0,2,0,6,39,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1158,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,883,"        Transition(long millis, Transition tr) {
",6,0,0,1,3,0,0,2,0,8,40,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,884,"            iMillis = millis;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,885,"            iNameKey = tr.iNameKey;
",6,0,0,0,0,0,0,0,0,7,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,886,"            iWallOffset = tr.iWallOffset;
",6,0,0,0,0,0,0,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,887,"            iStandardOffset = tr.iStandardOffset;
",6,0,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,888,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,890,"        Transition(long millis, Rule rule, int standardOffset) {
",8,0,0,1,3,0,0,2,0,10,56,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,891,"            iMillis = millis;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,892,"            iNameKey = rule.getNameKey();
",2,0,0,1,2,0,4,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,893,"            iWallOffset = standardOffset + rule.getSaveMillis();
",4,1,0,1,2,0,4,0,0,10,52,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,894,"            iStandardOffset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,33,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,895,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,898,"                   int wallOffset, int standardOffset) {
",4,0,0,0,2,0,0,0,0,4,37,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,899,"            iMillis = millis;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,900,"            iNameKey = nameKey;
",4,0,0,0,0,0,0,0,0,5,19,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,901,"            iWallOffset = wallOffset;
",4,0,0,0,0,0,0,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,902,"            iStandardOffset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,33,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,903,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,906,"            return iMillis;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,910,"            return iNameKey;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,914,"            return iWallOffset;
",2,0,0,0,0,1,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,918,"            return iStandardOffset;
",2,0,0,0,0,1,0,0,0,2,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,922,"            return iWallOffset - iStandardOffset;
",4,1,0,0,0,1,0,0,0,5,37,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,929,"            if (other == null) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,930,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,932,"            return iMillis > other.iMillis &&
",6,2,0,0,0,1,0,0,0,8,33,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1183,"            return findMatchingRecurrence(instant).getNameKey();
",0,0,0,2,4,1,6,0,0,6,52,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1187,"            return iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();
",2,1,0,2,4,1,6,0,0,9,73,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1191,"            return iStandardOffset;
",2,0,0,0,0,1,0,0,0,2,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1195,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1199,"            int standardOffset = iStandardOffset;
",4,0,0,0,0,0,0,0,0,4,37,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1200,"            Recurrence startRecurrence = iStartRecurrence;
",4,0,0,0,0,0,0,2,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1201,"            Recurrence endRecurrence = iEndRecurrence;
",4,0,0,0,0,0,0,2,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1206,"                start = startRecurrence.next
",2,0,0,0,0,0,4,0,0,7,28,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1208,"                if (instant > 0 && start < 0) {
",4,3,0,1,3,0,0,0,0,7,31,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1210,"                    start = instant;
",4,0,0,0,0,0,0,0,0,5,16,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1218,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1212,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1214,"                start = instant;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1215,"            } catch (ArithmeticException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1217,"                start = instant;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1221,"                end = endRecurrence.next
",2,0,0,0,0,0,4,0,0,7,24,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1223,"                if (instant > 0 && end < 0) {
",4,3,0,1,3,0,0,0,0,7,29,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1225,"                    end = instant;
",4,0,0,0,0,0,0,0,0,5,14,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1233,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1227,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1229,"                end = instant;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1230,"            } catch (ArithmeticException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1232,"                end = instant;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1235,"            return (start > end) ? end : start;
",8,1,0,1,2,1,0,0,0,9,35,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1241,"            instant++;
",2,0,0,0,0,0,0,0,0,3,10,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1243,"            int standardOffset = iStandardOffset;
",4,0,0,0,0,0,0,0,0,4,37,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1244,"            Recurrence startRecurrence = iStartRecurrence;
",4,0,0,0,0,0,0,2,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1245,"            Recurrence endRecurrence = iEndRecurrence;
",4,0,0,0,0,0,0,2,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1250,"                start = startRecurrence.previous
",2,0,0,0,0,0,4,0,0,7,32,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1252,"                if (instant < 0 && start > 0) {
",4,3,0,1,3,0,0,0,0,7,31,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1254,"                    start = instant;
",4,0,0,0,0,0,0,0,0,5,16,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1262,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1256,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1258,"                start = instant;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1259,"            } catch (ArithmeticException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1261,"                start = instant;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1265,"                end = endRecurrence.previous
",2,0,0,0,0,0,4,0,0,7,28,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1267,"                if (instant < 0 && end > 0) {
",4,3,0,1,3,0,0,0,0,7,29,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1269,"                    end = instant;
",4,0,0,0,0,0,0,0,0,5,14,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1277,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1271,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1273,"                end = instant;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1274,"            } catch (ArithmeticException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1276,"                end = instant;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1279,"            return ((start > end) ? start : end) - 1;
",8,2,0,2,4,1,0,0,0,10,41,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1283,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1284,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1286,"            if (obj instanceof DSTZone) {
",2,0,0,1,3,0,0,2,0,4,29,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1287,"                DSTZone other = (DSTZone)obj;
",4,0,0,1,2,0,0,4,0,8,29,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1288,"                return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1294,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1298,"            writeMillis(out, iStandardOffset);
",0,0,0,1,2,0,6,0,0,6,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1299,"            iStartRecurrence.writeTo(out);
",0,0,0,1,2,0,6,0,0,6,30,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1300,"            iEndRecurrence.writeTo(out);
",0,0,0,1,2,0,6,0,0,6,28,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1301,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1304,"            int standardOffset = iStandardOffset;
",4,0,0,0,0,0,0,0,0,4,37,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1305,"            Recurrence startRecurrence = iStartRecurrence;
",4,0,0,0,0,0,0,2,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1306,"            Recurrence endRecurrence = iEndRecurrence;
",4,0,0,0,0,0,0,2,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1311,"                start = startRecurrence.next
",2,0,0,0,0,0,4,0,0,7,28,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1319,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1313,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1315,"                start = instant;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1316,"            } catch (ArithmeticException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1318,"                start = instant;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1322,"                end = endRecurrence.next
",2,0,0,0,0,0,4,0,0,7,24,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1330,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1324,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1326,"                end = instant;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1327,"            } catch (ArithmeticException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1329,"                end = instant;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1332,"            return (start > end) ? startRecurrence : endRecurrence;
",8,1,0,1,2,1,0,0,0,9,55,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,186,"            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {
",8,3,0,1,3,0,0,0,0,11,59,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,187,"                if (iNameKey == null) {
",2,1,0,1,3,0,0,0,0,3,23,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,188,"                    iNameKey = iZoneRef.getNameKey(iPeriodStart);
",2,0,0,1,2,0,6,0,0,9,45,9,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,190,"                return iNameKey;
",2,0,0,0,0,1,0,0,0,2,16,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,192,"            return iNextInfo.getNameKey(millis);
",0,0,0,1,2,1,6,0,0,6,36,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,202,"            return iNextInfo.getOffset(millis);
",0,0,0,1,2,1,6,0,0,6,35,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,206,"            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {
",8,3,0,1,3,0,0,0,0,11,59,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,207,"                if (iStandardOffset == Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,43,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,208,"                    iStandardOffset = iZoneRef.getStandardOffset(iPeriodStart);
",2,0,0,1,2,0,6,0,0,9,59,9,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,210,"                return iStandardOffset;
",2,0,0,0,0,1,0,0,0,2,23,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,212,"            return iNextInfo.getStandardOffset(millis);
",0,0,0,1,2,1,6,0,0,6,43,6,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,12,45,"        return iNameKey;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,12,49,"        return iWallOffset;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,12,53,"        return iStandardOffset;
",2,0,0,0,0,1,0,0,0,2,23,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,12,57,"        return iWallOffset;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,12,61,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,12,65,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,12,69,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,12,77,"        String id = getID();
",2,0,0,1,2,0,2,2,0,6,20,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,12,78,"        if (id.length() == 6 && (id.startsWith(""+"") || id.startsWith(""-""))) {
",0,3,0,5,11,0,12,0,0,17,69,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,12,81,"            return java.util.TimeZone.getTimeZone(""GMT"" + getID());
",6,1,0,2,4,1,4,0,0,12,55,7,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,12,84,"        return new java.util.SimpleTimeZone(iWallOffset, getID());
",8,0,0,2,4,1,2,0,0,10,58,5,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,12,91,"        if (obj instanceof FixedDateTimeZone) {
",2,0,0,1,3,0,0,2,0,4,39,5,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,12,92,"            FixedDateTimeZone other = (FixedDateTimeZone) obj;
",4,0,0,1,2,0,0,4,0,8,50,6,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,12,93,"            return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,12,98,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,12,43,"        String[] nameSet = getNameSet(locale, id, nameKey);
",2,0,0,2,4,0,8,2,0,12,51,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,12,44,"        return nameSet == null ? null : nameSet[0];
",2,1,1,1,2,1,0,0,0,5,43,5,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,12,48,"        String[] nameSet = getNameSet(locale, id, nameKey);
",2,0,0,2,4,0,8,2,0,12,51,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,12,49,"        return nameSet == null ? null : nameSet[1];
",2,1,1,1,2,1,0,0,0,5,43,5,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,12,53,"        if (locale == null || id == null || nameKey == null) {
",6,5,0,1,3,0,0,0,0,11,54,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,12,54,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,12,57,"        Map<String, Map<String, Object>> byIdCache = iByLocaleCache.get(locale);
",2,0,0,1,2,0,6,10,0,18,72,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,12,58,"        if (byIdCache == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,12,59,"            iByLocaleCache.put(locale, byIdCache = createCache());
",2,0,0,2,4,0,8,0,0,11,54,7,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,12,62,"        Map<String, Object> byNameKeyCache = byIdCache.get(id);
",2,0,0,1,2,0,6,6,0,14,55,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,12,63,"        if (byNameKeyCache == null) {
",2,1,0,1,3,0,0,0,0,3,29,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,12,64,"            byIdCache.put(id, byNameKeyCache = createCache());
",2,0,0,2,4,0,8,0,0,11,50,7,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,12,66,"            String[][] zoneStringsEn = DateTimeUtils.getDateFormatSymbols(Locale.ENGLISH).getZoneStrings();
",6,0,0,4,8,0,6,2,0,14,95,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,12,67,"            String[] setEn = null;
",2,0,0,1,2,0,0,2,0,4,22,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,12,68,"            for (String[] strings : zoneStringsEn) {
",4,0,0,2,5,0,0,2,0,6,40,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,12,69,"              if (strings != null && strings.length == 5 && id.equals(strings[0])) {
",6,4,1,3,7,0,4,0,0,16,70,8,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,12,70,"                setEn = strings;
",4,0,0,0,0,0,0,0,0,5,16,10,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,12,71,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,12,74,"            String[][] zoneStringsLoc = DateTimeUtils.getDateFormatSymbols(locale).getZoneStrings();
",2,0,0,4,8,0,8,2,0,12,88,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,12,75,"            String[] setLoc = null;
",2,0,0,1,2,0,0,2,0,4,23,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,12,76,"            for (String[] strings : zoneStringsLoc) {
",4,0,0,2,5,0,0,2,0,6,41,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,12,77,"              if (strings != null && strings.length == 5 && id.equals(strings[0])) {
",6,4,1,3,7,0,4,0,0,16,70,8,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,12,78,"                setLoc = strings;
",4,0,0,0,0,0,0,0,0,5,17,10,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,12,79,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,12,83,"            if (setEn != null && setLoc != null) {
",4,3,0,1,3,0,0,0,0,7,38,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,12,84,"              byNameKeyCache.put(setEn[2], new String[] {setLoc[2], setLoc[1]});
",0,0,1,6,12,0,4,2,0,12,66,9,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,12,88,"              if (setEn[2].equals(setEn[4])) {
",0,0,1,4,9,0,2,0,0,6,32,9,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,12,89,"                  byNameKeyCache.put(setEn[4] + ""-Summer"", new String[] {setLoc[4], setLoc[3]});
",0,1,1,6,12,0,4,2,0,14,78,11,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,12,91,"                  byNameKeyCache.put(setEn[4], new String[] {setLoc[4], setLoc[3]});
",0,0,1,6,12,0,4,2,0,12,66,11,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,12,95,"        return (String[]) byNameKeyCache.get(nameKey);
",0,0,0,3,6,1,6,2,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,56,"    public ZoneInfoProvider(File fileDir) throws IOException {
",6,0,0,1,3,1,0,2,0,9,58,2,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,57,"        if (fileDir == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,58,"            throw new IllegalArgumentException(""No file directory provided"");
",0,0,0,1,2,0,0,2,0,3,65,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,60,"        if (!fileDir.exists()) {
",0,0,0,2,5,0,4,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,61,"            throw new IOException(""File directory doesn't exist: "" + fileDir);
",2,1,0,1,2,0,0,2,0,6,66,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,63,"        if (!fileDir.isDirectory()) {
",0,0,0,2,5,0,4,0,0,5,29,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,64,"            throw new IOException(""File doesn't refer to a directory: "" + fileDir);
",2,1,0,1,2,0,0,2,0,6,71,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,67,"        iFileDir = fileDir;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,68,"        iResourcePath = null;
",2,0,0,0,0,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,69,"        iLoader = null;
",2,0,0,0,0,0,0,0,0,3,15,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,71,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));
",2,0,0,2,4,0,4,0,0,8,60,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,72,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,96,"        this(resourcePath, loader, true);
",4,0,0,1,2,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,97,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,108,"            throw new IllegalArgumentException(""No resource path provided"");
",0,0,0,1,2,0,0,2,0,3,64,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,137,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,142,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,158,"            return loadZoneData(id);
",0,0,0,1,2,1,4,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,162,"        return getZone((String)obj);
",2,0,0,2,4,1,2,2,0,6,28,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,183,"        Thread t = Thread.currentThread();
",2,0,0,1,2,0,4,2,0,8,34,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,184,"        t.getThreadGroup().uncaughtException(t, ex);
",0,0,0,2,4,0,10,0,0,10,44,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,185,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,197,"            in = new FileInputStream(new File(iFileDir, name));
",6,0,0,2,4,0,0,4,0,11,51,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,203,"                in = ClassLoader.getSystemResourceAsStream(path);
",2,0,0,1,2,0,6,0,0,9,49,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,206,"                StringBuilder buf = new StringBuilder(40)
",2,0,0,1,2,0,0,4,0,6,41,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,211,"                throw new IOException(buf.toString());
",0,0,0,2,4,0,4,2,0,6,38,9,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,239,"            } catch (IOException ex) {
",2,0,0,1,4,0,0,2,0,4,26,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,230,"        } catch (IOException ex) {
",2,0,0,1,4,0,0,2,0,4,26,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,231,"            uncaughtException(ex);
",0,0,0,1,2,0,4,0,0,4,22,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,232,"            iZoneInfoMap.remove(id);
",0,0,0,1,2,0,6,0,0,6,24,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,233,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,235,"            try {
",0,0,0,0,1,0,0,0,0,0,5,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,259,"            } catch (IOException ex) {
",2,0,0,1,4,0,0,2,0,4,26,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,261,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,257,"            try {
",0,0,0,0,1,0,0,0,0,0,5,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,285,"            } catch (ArrayIndexOutOfBoundsException ex) {
",2,0,0,1,4,0,0,2,0,4,45,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,12,286,"                throw new IOException(""Corrupt zone info map"");
",0,0,0,1,2,0,0,2,0,3,47,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,225,"    public DateTimeZoneBuilder() {
",2,0,0,1,3,1,0,0,0,3,30,2,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,226,"        iRuleSets = new ArrayList<RuleSet>(10);
",2,0,0,1,2,0,0,4,0,7,39,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,227,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,96,"            return readFrom((DataInput)in, id);
",2,0,0,2,4,1,4,2,0,8,35,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,112,"            DateTimeZone fixed = new FixedDateTimeZone
",2,0,0,0,0,0,0,4,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,114,"            if (fixed.equals(DateTimeZone.UTC)) {
",4,0,0,2,5,0,4,0,0,8,37,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,115,"                fixed = DateTimeZone.UTC;
",6,0,0,0,0,0,0,0,0,7,25,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,117,"            return fixed;
",2,0,0,0,0,1,0,0,0,2,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,121,"            return PrecalculatedZone.readFrom(in, id);
",0,0,0,1,2,1,8,0,0,8,42,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,123,"            throw new IOException(""Invalid encoding"");
",0,0,0,1,2,0,0,2,0,3,42,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,140,"        if (millis % (30 * 60000L) == 0) {
",2,3,0,2,5,0,0,0,0,5,34,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,142,"            long units = millis / (30 * 60000L);
",4,2,0,1,2,0,0,0,0,6,36,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,143,"            if (((units << (64 - 6)) >> (64 - 6)) == units) {
",4,5,0,5,11,0,0,0,0,9,49,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,145,"                out.writeByte((int)(units & 0x3f));
",2,1,0,3,6,0,4,0,0,7,35,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,146,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,150,"        if (millis % 60000L == 0) {
",2,2,0,1,3,0,0,0,0,4,27,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,152,"            long minutes = millis / 60000L;
",4,1,0,0,0,0,0,0,0,5,31,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,153,"            if (((minutes << (64 - 30)) >> (64 - 30)) == minutes) {
",4,5,0,5,11,0,0,0,0,9,55,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,155,"                out.writeInt(0x40000000 | (int)(minutes & 0x3fffffff));
",2,2,0,3,6,0,4,0,0,8,55,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,156,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,160,"        if (millis % 1000L == 0) {
",2,2,0,1,3,0,0,0,0,4,26,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,162,"            long seconds = millis / 1000L;
",4,1,0,0,0,0,0,0,0,5,30,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,163,"            if (((seconds << (64 - 38)) >> (64 - 38)) == seconds) {
",4,5,0,5,11,0,0,0,0,9,55,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,165,"                out.writeByte(0x80 | (int)((seconds >> 32) & 0x3f));
",2,3,0,4,8,0,4,0,0,9,52,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,166,"                out.writeInt((int)(seconds & 0xffffffff));
",2,1,0,3,6,0,4,0,0,7,42,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,167,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,175,"        out.writeByte(millis < 0 ? 0xff : 0xc0);
",2,1,0,1,2,0,4,0,0,7,40,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,176,"        out.writeLong(millis);
",0,0,0,1,2,0,6,0,0,6,22,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,177,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,215,"        if (""UTC"".equals(id) && id.equals(nameKey) &&
",0,2,0,2,5,0,10,0,0,13,45,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,217,"            return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,219,"        return new FixedDateTimeZone(id, nameKey, wallOffset, standardOffset);
",8,0,0,1,2,1,0,2,0,10,70,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,252,"        if (iRuleSets.size() > 0) {
",0,1,0,2,5,0,4,0,0,5,27,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,253,"            OfYear ofYear = new OfYear
",2,0,0,0,0,0,0,4,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,255,"            RuleSet lastRuleSet = iRuleSets.get(iRuleSets.size() - 1);
",2,1,0,2,4,0,8,2,0,13,58,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,256,"            lastRuleSet.setUpperLimit(year, ofYear);
",0,0,0,1,2,0,8,0,0,8,40,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,258,"        iRuleSets.add(new RuleSet());
",0,0,0,2,4,0,4,2,0,6,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,259,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,268,"        getLastRuleSet().setStandardOffset(standardOffset);
",0,0,0,2,4,0,6,0,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,269,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,276,"        getLastRuleSet().setFixedSavings(nameKey, saveMillis);
",0,0,0,2,4,0,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,277,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,309,"        if (fromYear <= toYear) {
",4,1,0,1,3,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,310,"            OfYear ofYear = new OfYear
",2,0,0,0,0,0,0,4,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,312,"            Recurrence recurrence = new Recurrence(ofYear, nameKey, saveMillis);
",8,0,0,1,2,0,0,4,0,12,68,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,313,"            Rule rule = new Rule(recurrence, fromYear, toYear);
",8,0,0,1,2,0,0,4,0,12,51,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,314,"            getLastRuleSet().addRule(rule);
",0,0,0,2,4,0,6,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,316,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,320,"        if (iRuleSets.size() == 0) {
",0,1,0,2,5,0,4,0,0,5,28,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,321,"            addCutover(Integer.MIN_VALUE, 'w', 1, 1, 0, false, 0);
",4,0,0,1,2,0,2,0,0,8,54,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,323,"        return iRuleSets.get(iRuleSets.size() - 1);
",0,1,0,2,4,1,8,0,0,9,43,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,333,"        if (id == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,334,"            throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,339,"        ArrayList<Transition> transitions = new ArrayList<Transition>();
",2,0,0,1,2,0,0,8,0,10,64,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,343,"        DSTZone tailZone = null;
",2,0,0,0,0,0,0,2,0,4,24,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,345,"        long millis = Long.MIN_VALUE;
",6,0,0,0,0,0,0,0,0,6,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,346,"        int saveMillis = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,348,"        int ruleSetCount = iRuleSets.size();
",2,0,0,1,2,0,4,0,0,6,36,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,349,"        for (int i=0; i<ruleSetCount; i++) {
",8,1,0,1,3,0,0,0,0,10,36,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,350,"            RuleSet rs = iRuleSets.get(i);
",2,0,0,1,2,0,6,2,0,10,30,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,351,"            Transition next = rs.firstTransition(millis);
",2,0,0,1,2,0,6,2,0,10,45,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,352,"            if (next == null) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,353,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,355,"            addTransition(transitions, next);
",0,0,0,1,2,0,6,0,0,6,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,356,"            millis = next.getMillis();
",2,0,0,1,2,0,4,0,0,7,26,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,357,"            saveMillis = next.getSaveMillis();
",2,0,0,1,2,0,4,0,0,7,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,360,"            rs = new RuleSet(rs);
",4,0,0,1,2,0,0,2,0,7,21,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,362,"            while ((next = rs.nextTransition(millis, saveMillis)) != null) {
",2,1,0,3,7,0,8,0,0,12,64,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,363,"                if (addTransition(transitions, next)) {
",0,0,0,2,5,0,6,0,0,6,39,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,364,"                    if (tailZone != null) {
",2,1,0,1,3,0,0,0,0,3,23,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,366,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,369,"                millis = next.getMillis();
",2,0,0,1,2,0,4,0,0,7,26,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,370,"                saveMillis = next.getSaveMillis();
",2,0,0,1,2,0,4,0,0,7,34,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,371,"                if (tailZone == null && i == ruleSetCount - 1) {
",6,4,0,1,3,0,0,0,0,10,48,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,372,"                    tailZone = rs.buildTailZone(id);
",2,0,0,1,2,0,6,0,0,9,32,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,379,"            millis = rs.getUpperLimit(saveMillis);
",2,0,0,1,2,0,6,0,0,9,38,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,383,"        if (transitions.size() == 0) {
",0,1,0,2,5,0,4,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,384,"            if (tailZone != null) {
",2,1,0,1,3,0,0,0,0,3,23,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,386,"                return tailZone;
",2,0,0,0,0,1,0,0,0,2,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,388,"            return buildFixedZone(id, ""UTC"", 0, 0);
",0,0,0,1,2,1,4,0,0,5,39,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,390,"        if (transitions.size() == 1 && tailZone == null) {
",2,3,0,2,5,0,4,0,0,9,50,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,391,"            Transition tr = transitions.get(0);
",2,0,0,1,2,0,4,2,0,8,35,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,392,"            return buildFixedZone(id, tr.getNameKey(),
",0,0,0,1,3,1,8,0,0,8,42,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,396,"        PrecalculatedZone zone = PrecalculatedZone.create(id, outputID, transitions, tailZone);
",2,0,0,1,2,0,12,2,0,16,87,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,397,"        if (zone.isCachable()) {
",0,0,0,2,5,0,4,0,0,4,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,398,"            return CachedDateTimeZone.forZone(zone);
",0,0,0,1,2,1,6,0,0,6,40,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,400,"        return zone;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,404,"        int size = transitions.size();
",2,0,0,1,2,0,4,0,0,6,30,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,405,"        if (size == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,406,"            transitions.add(tr);
",0,0,0,1,2,0,6,0,0,6,20,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,407,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,410,"        Transition last = transitions.get(size - 1);
",4,1,0,1,2,0,4,2,0,11,44,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,411,"        if (!tr.isTransitionFrom(last)) {
",0,0,0,2,5,0,6,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,412,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,417,"        int offsetForLast = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,418,"        if (size >= 2) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,419,"            offsetForLast = transitions.get(size - 2).getWallOffset();
",4,1,0,2,4,0,6,0,0,12,58,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,421,"        int offsetForNew = last.getWallOffset();
",2,0,0,1,2,0,4,0,0,6,40,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,423,"        long lastLocal = last.getMillis() + offsetForLast;
",4,1,0,1,2,0,4,0,0,9,50,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,424,"        long newLocal = tr.getMillis() + offsetForNew;
",4,1,0,1,2,0,4,0,0,9,46,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,426,"        if (newLocal != lastLocal) {
",4,1,0,1,3,0,0,0,0,5,28,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,427,"            transitions.add(tr);
",0,0,0,1,2,0,6,0,0,6,20,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,428,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,431,"        transitions.remove(size - 1);
",2,1,0,1,2,0,4,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,432,"        return addTransition(transitions, tr);
",0,0,0,1,2,1,6,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,443,"        if (out instanceof DataOutput) {
",2,0,0,1,3,0,0,2,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,444,"            writeTo(zoneID, (DataOutput)out);
",2,0,0,2,4,0,4,2,0,8,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,446,"            writeTo(zoneID, (DataOutput)new DataOutputStream(out));
",2,0,0,3,6,0,4,4,0,10,55,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,448,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,459,"        DateTimeZone zone = toDateTimeZone(zoneID, false);
",2,0,0,1,2,0,4,2,0,9,50,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,461,"        if (zone instanceof FixedDateTimeZone) {
",2,0,0,1,3,0,0,2,0,4,40,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,462,"            out.writeByte('F'); // 'F' for fixed
",0,0,0,1,2,0,4,0,0,5,36,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,463,"            out.writeUTF(zone.getNameKey(0));
",0,0,0,2,4,0,8,0,0,8,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,464,"            writeMillis(out, zone.getOffset(0));
",0,0,0,2,4,0,8,0,0,8,36,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,465,"            writeMillis(out, zone.getStandardOffset(0));
",0,0,0,2,4,0,8,0,0,8,44,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,467,"            if (zone instanceof CachedDateTimeZone) {
",2,0,0,1,3,0,0,2,0,4,41,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,468,"                out.writeByte('C'); // 'C' for cached, precalculated
",0,0,0,1,2,0,4,0,0,5,52,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,469,"                zone = ((CachedDateTimeZone)zone).getUncachedZone();
",4,0,0,3,6,0,2,2,0,9,52,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,471,"                out.writeByte('P'); // 'P' for precalculated, uncached
",0,0,0,1,2,0,4,0,0,5,54,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,473,"            ((PrecalculatedZone)zone).writeTo(out);
",2,0,0,3,6,0,4,2,0,8,39,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,475,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1362,"                        index = in.readUnsignedShort();
",2,0,0,1,2,0,4,0,0,7,31,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1365,"                } catch (ArrayIndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,44,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1366,"                    throw new IOException(""Invalid encoding"");
",0,0,0,1,2,0,0,2,0,3,42,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1389,"            int size = transitions.size();
",2,0,0,1,2,0,4,0,0,6,30,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1390,"            if (size == 0) {
",2,1,0,1,3,0,0,0,0,3,16,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1391,"                throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1394,"            long[] trans = new long[size];
",2,0,1,2,4,0,0,0,0,4,30,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1395,"            int[] wallOffsets = new int[size];
",2,0,1,2,4,0,0,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1396,"            int[] standardOffsets = new int[size];
",2,0,1,2,4,0,0,0,0,4,38,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1397,"            String[] nameKeys = new String[size];
",2,0,1,2,4,0,0,4,0,8,37,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1399,"            Transition last = null;
",2,0,0,0,0,0,0,2,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1400,"            for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1401,"                Transition tr = transitions.get(i);
",2,0,0,1,2,0,6,2,0,10,35,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1403,"                if (!tr.isTransitionFrom(last)) {
",0,0,0,2,5,0,6,0,0,7,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1404,"                    throw new IllegalArgumentException(id);
",2,0,0,1,2,0,0,2,0,4,39,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1407,"                trans[i] = tr.getMillis();
",0,0,1,2,4,0,4,0,0,9,26,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1408,"                wallOffsets[i] = tr.getWallOffset();
",0,0,1,2,4,0,4,0,0,9,36,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1409,"                standardOffsets[i] = tr.getStandardOffset();
",0,0,1,2,4,0,4,0,0,9,44,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1410,"                nameKeys[i] = tr.getNameKey();
",0,0,1,2,4,0,4,0,0,9,30,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1412,"                last = tr;
",4,0,0,0,0,0,0,0,0,5,10,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1417,"            String[] zoneNameData = new String[5];
",2,0,0,2,4,0,0,4,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1418,"            String[][] zoneStrings = new DateFormatSymbols(Locale.ENGLISH).getZoneStrings();
",6,0,0,4,8,0,2,4,0,12,80,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1419,"            for (int j = 0; j < zoneStrings.length; j++) {
",10,1,0,1,3,0,0,0,0,12,46,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1420,"                String[] set = zoneStrings[j];
",2,0,1,2,4,0,0,2,0,8,30,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1421,"                if (set != null && set.length == 5 && id.equals(set[0])) {
",6,4,1,3,7,0,4,0,0,16,58,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1422,"                    zoneNameData = set;
",4,0,0,0,0,0,0,0,0,5,19,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1426,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1428,"            for (int i = 0; i < nameKeys.length - 1; i++) {
",10,2,0,1,3,0,0,0,0,13,47,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1429,"                String curNameKey = nameKeys[i];
",2,0,1,1,2,0,0,2,0,8,32,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1430,"                String nextNameKey = nameKeys[i + 1];
",4,1,1,1,2,0,0,2,0,9,37,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1431,"                long curOffset = wallOffsets[i];
",2,0,1,1,2,0,0,0,0,6,32,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1432,"                long nextOffset = wallOffsets[i + 1];
",4,1,1,1,2,0,0,0,0,7,37,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1433,"                long curStdOffset = standardOffsets[i];
",2,0,1,1,2,0,0,0,0,6,39,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1434,"                long nextStdOffset = standardOffsets[i + 1];
",4,1,1,1,2,0,0,0,0,7,44,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1435,"                Period p = new Period(trans[i], trans[i + 1], PeriodType.yearMonthDay(), chrono);
",6,1,1,4,8,0,4,4,0,21,81,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1436,"                if (curOffset != nextOffset &&
",4,8,0,0,1,0,0,0,0,12,30,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1443,"                    if (ZoneInfoCompiler.verbose()) {
",0,0,0,2,5,0,4,0,0,4,33,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1444,"                        System.out.println(""Fixing duplicate name key - "" + nextNameKey);
",6,1,0,1,2,0,2,0,0,10,65,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1445,"                        System.out.println(""     - "" + new DateTime(trans[i], chrono) +
",6,1,1,2,5,0,2,2,0,16,63,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1448,"                    if (curOffset > nextOffset) {
",4,1,0,1,3,0,0,0,0,5,29,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1449,"                        nameKeys[i] = (curNameKey + ""-Summer"").intern();
",2,1,1,3,6,0,2,0,0,11,48,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1450,"                    } else if (curOffset < nextOffset) {
",4,1,0,1,4,0,0,0,0,5,36,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1451,"                        nameKeys[i + 1] = (nextNameKey + ""-Summer"").intern();
",4,2,1,3,6,0,2,0,0,12,53,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1452,"                        i++;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1457,"            if (tailZone != null) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1458,"                if (tailZone.iStartRecurrence.getNameKey()
",4,0,0,1,3,0,2,0,0,6,42,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1460,"                    if (ZoneInfoCompiler.verbose()) {
",0,0,0,2,5,0,4,0,0,4,33,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1461,"                        System.out.println(""Fixing duplicate recurrent name key - "" +
",4,1,0,0,1,0,2,0,0,8,61,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1464,"                    if (tailZone.iStartRecurrence.getSaveMillis() > 0) {
",4,1,0,2,5,0,2,0,0,7,52,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1465,"                        tailZone = new DSTZone(
",2,0,0,0,1,0,0,2,0,5,23,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1471,"                        tailZone = new DSTZone(
",2,0,0,0,1,0,0,2,0,5,23,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1480,"            return new PrecalculatedZone
",0,0,0,0,0,1,0,2,0,2,28,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1509,"            long[] transitions = iTransitions;
",4,0,0,1,2,0,0,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1510,"            int i = Arrays.binarySearch(transitions, instant);
",2,0,0,1,2,0,8,0,0,10,50,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1511,"            if (i >= 0) {
",2,1,0,1,3,0,0,0,0,3,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1512,"                return iNameKeys[i];
",0,0,1,1,2,1,0,0,0,4,20,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1514,"            i = ~i;
",4,0,0,0,0,0,0,0,0,6,7,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1515,"            if (i < transitions.length) {
",6,1,0,1,3,0,0,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1516,"                if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1517,"                    return iNameKeys[i - 1];
",2,1,1,1,2,1,0,0,0,5,24,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1519,"                return ""UTC"";
",0,0,0,0,0,1,0,0,0,1,13,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1521,"            if (iTailZone == null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1522,"                return iNameKeys[i - 1];
",2,1,1,1,2,1,0,0,0,5,24,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1524,"            return iTailZone.getNameKey(instant);
",0,0,0,1,2,1,6,0,0,6,37,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1531,"                return iWallOffsets[i];
",0,0,1,1,2,1,0,0,0,4,23,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1538,"                return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1540,"            if (iTailZone == null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1541,"                return iWallOffsets[i - 1];
",2,1,1,1,2,1,0,0,0,5,27,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1543,"            return iTailZone.getOffset(instant);
",0,0,0,1,2,1,6,0,0,6,36,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1547,"            long[] transitions = iTransitions;
",4,0,0,1,2,0,0,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1548,"            int i = Arrays.binarySearch(transitions, instant);
",2,0,0,1,2,0,8,0,0,10,50,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1549,"            if (i >= 0) {
",2,1,0,1,3,0,0,0,0,3,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1550,"                return iStandardOffsets[i];
",0,0,1,1,2,1,0,0,0,4,27,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1552,"            i = ~i;
",4,0,0,0,0,0,0,0,0,6,7,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1553,"            if (i < transitions.length) {
",6,1,0,1,3,0,0,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1554,"                if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1555,"                    return iStandardOffsets[i - 1];
",2,1,1,1,2,1,0,0,0,5,31,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1557,"                return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1559,"            if (iTailZone == null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1560,"                return iStandardOffsets[i - 1];
",2,1,1,1,2,1,0,0,0,5,31,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1562,"            return iTailZone.getStandardOffset(instant);
",0,0,0,1,2,1,6,0,0,6,44,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1566,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1576,"            if (iTailZone == null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1577,"                return instant;
",2,0,0,0,0,1,0,0,0,2,15,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1579,"            long end = transitions[transitions.length - 1];
",6,1,1,1,2,0,0,0,0,9,47,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1580,"            if (instant < end) {
",4,1,0,1,3,0,0,0,0,5,20,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1581,"                instant = end;
",4,0,0,0,0,0,0,0,0,5,14,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1583,"            return iTailZone.nextTransition(instant);
",0,0,0,1,2,1,6,0,0,6,41,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1587,"            long[] transitions = iTransitions;
",4,0,0,1,2,0,0,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1588,"            int i = Arrays.binarySearch(transitions, instant);
",2,0,0,1,2,0,8,0,0,10,50,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1589,"            if (i >= 0) {
",2,1,0,1,3,0,0,0,0,3,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1590,"                if (instant > Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,31,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1591,"                    return instant - 1;
",2,1,0,0,0,1,0,0,0,3,19,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1593,"                return instant;
",2,0,0,0,0,1,0,0,0,2,15,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1595,"            i = ~i;
",4,0,0,0,0,0,0,0,0,6,7,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1596,"            if (i < transitions.length) {
",6,1,0,1,3,0,0,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1597,"                if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1598,"                    long prev = transitions[i - 1];
",4,1,1,1,2,0,0,0,0,7,31,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1599,"                    if (prev > Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,28,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1600,"                        return prev - 1;
",2,1,0,0,0,1,0,0,0,3,16,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1603,"                return instant;
",2,0,0,0,0,1,0,0,0,2,15,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1605,"            if (iTailZone != null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1606,"                long prev = iTailZone.previousTransition(instant);
",2,0,0,1,2,0,6,0,0,8,50,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1607,"                if (prev < instant) {
",4,1,0,1,3,0,0,0,0,5,21,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1608,"                    return prev;
",2,0,0,0,0,1,0,0,0,2,12,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1611,"            long prev = transitions[i - 1];
",4,1,1,1,2,0,0,0,0,7,31,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1612,"            if (prev > Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,28,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1613,"                return prev - 1;
",2,1,0,0,0,1,0,0,0,3,16,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1615,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1619,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1620,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1622,"            if (obj instanceof PrecalculatedZone) {
",2,0,0,1,3,0,0,2,0,4,39,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1623,"                PrecalculatedZone other = (PrecalculatedZone)obj;
",4,0,0,1,2,0,0,4,0,8,49,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1624,"                return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1634,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1638,"            int size = iTransitions.length;
",6,0,0,0,0,0,0,0,0,6,31,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1641,"            Set<String> poolSet = new HashSet<String>();
",2,0,0,1,2,0,0,8,0,10,44,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1642,"            for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1643,"                poolSet.add(iNameKeys[i]);
",0,0,1,2,4,0,4,0,0,8,26,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1646,"            int poolSize = poolSet.size();
",2,0,0,1,2,0,4,0,0,6,30,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1647,"            if (poolSize > 65535) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1648,"                throw new UnsupportedOperationException(""String pool is too large"");
",0,0,0,1,2,0,0,2,0,3,68,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1650,"            String[] pool = new String[poolSize];
",2,0,1,2,4,0,0,4,0,8,37,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1651,"            Iterator<String> it = poolSet.iterator();
",2,0,0,1,2,0,4,4,0,10,41,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1652,"            for (int i=0; it.hasNext(); i++) {
",4,0,0,2,5,0,4,0,0,9,34,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1653,"                pool[i] = it.next();
",0,0,1,2,4,0,4,0,0,9,20,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1657,"            out.writeShort(poolSize);
",0,0,0,1,2,0,6,0,0,6,25,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1658,"            for (int i=0; i<poolSize; i++) {
",8,1,0,1,3,0,0,0,0,10,32,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1659,"                out.writeUTF(pool[i]);
",0,0,1,2,4,0,4,0,0,8,22,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1662,"            out.writeInt(size);
",0,0,0,1,2,0,6,0,0,6,19,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1664,"            for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1665,"                writeMillis(out, iTransitions[i]);
",0,0,1,2,4,0,4,0,0,8,34,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1666,"                writeMillis(out, iWallOffsets[i]);
",0,0,1,2,4,0,4,0,0,8,34,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1667,"                writeMillis(out, iStandardOffsets[i]);
",0,0,1,2,4,0,4,0,0,8,38,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1670,"                String nameKey = iNameKeys[i];
",2,0,1,1,2,0,0,2,0,8,30,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1671,"                for (int j=0; j<poolSize; j++) {
",8,1,0,1,3,0,0,0,0,10,32,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1672,"                    if (pool[j].equals(nameKey)) {
",0,0,1,3,7,0,4,0,0,8,30,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1673,"                        if (poolSize < 256) {
",2,1,0,1,3,0,0,0,0,3,21,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1674,"                            out.writeByte(j);
",0,0,0,1,2,0,6,0,0,6,17,14,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1676,"                            out.writeShort(j);
",0,0,0,1,2,0,6,0,0,6,18,14,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1678,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1683,"            out.writeBoolean(iTailZone != null);
",2,1,0,1,2,0,4,0,0,7,36,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1684,"            if (iTailZone != null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1685,"                iTailZone.writeTo(out);
",0,0,0,1,2,0,6,0,0,6,23,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1687,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1690,"            if (iTailZone != null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1691,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1693,"            long[] transitions = iTransitions;
",4,0,0,1,2,0,0,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1694,"            if (transitions.length <= 1) {
",4,1,0,1,3,0,0,0,0,5,30,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1695,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1700,"            double distances = 0;
",2,0,0,0,0,0,0,0,0,2,21,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1701,"            int count = 0;
",2,0,0,0,0,0,0,0,0,2,14,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1703,"            for (int i=1; i<transitions.length; i++) {
",10,1,0,1,3,0,0,0,0,12,42,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1704,"                long diff = transitions[i] - transitions[i - 1];
",4,2,1,2,4,0,0,0,0,12,48,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1705,"                if (diff < ((366L + 365) * 24 * 60 * 60 * 1000)) {
",2,3,0,3,7,0,0,0,0,5,50,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1706,"                    distances += (double)diff;
",4,0,0,1,2,0,0,0,0,5,26,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1707,"                    count++;
",2,0,0,0,0,0,0,0,0,3,8,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1711,"            if (count > 0) {
",2,1,0,1,3,0,0,0,0,3,16,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1712,"                double avg = distances / count;
",6,1,0,0,0,0,0,0,0,7,31,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1713,"                avg /= 24 * 60 * 60 * 1000;
",2,1,0,0,0,0,0,0,0,4,27,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1714,"                if (avg >= 25) {
",2,1,0,1,3,0,0,0,0,3,16,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1721,"                    return true;
",0,0,0,0,0,1,0,0,0,1,12,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,1725,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,40,"        } catch (SecurityException e) {
",2,0,0,1,4,0,0,2,0,4,31,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,41,"            i = null;
",2,0,0,0,0,0,0,0,0,3,9,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,50,"            cacheSize = i.intValue();
",2,0,0,1,2,0,4,0,0,7,25,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,52,"            cacheSize--;
",2,0,0,0,0,0,0,0,0,3,12,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,53,"            int shift = 0;
",2,0,0,0,0,0,0,0,0,2,14,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,54,"            while (cacheSize > 0) {
",2,1,0,1,3,0,0,0,0,3,23,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,55,"                shift++;
",2,0,0,0,0,0,0,0,0,3,8,8,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,56,"                cacheSize >>= 1;
",2,0,0,0,0,0,0,0,0,3,16,8,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,58,"            cacheSize = 1 << shift;
",4,1,0,0,0,0,0,0,0,6,23,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,69,"            return (CachedDateTimeZone)zone;
",2,0,0,1,2,1,0,2,0,4,32,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,95,"        return iZone;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,99,"        return getInfo(instant).getNameKey(instant);
",0,0,0,2,4,1,8,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,107,"        return getInfo(instant).getStandardOffset(instant);
",0,0,0,2,4,1,8,0,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,111,"        return iZone.isFixed();
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,115,"        return iZone.nextTransition(instant);
",0,0,0,1,2,1,6,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,119,"        return iZone.previousTransition(instant);
",0,0,0,1,2,1,6,0,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,127,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,128,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,130,"        if (obj instanceof CachedDateTimeZone) {
",2,0,0,1,3,0,0,2,0,4,40,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,131,"            return iZone.equals(((CachedDateTimeZone)obj).iZone);
",4,0,0,3,6,1,4,2,0,10,53,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,133,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,162,"            periodStart = next;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,163,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));
",10,0,0,2,4,0,0,2,0,14,57,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,12,164,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,754,"            return iOfYear;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,761,"            return iOfYear.next(instant, standardOffset, saveMillis);
",0,0,0,1,2,1,10,0,0,10,57,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,768,"            return iOfYear.previous(instant, standardOffset, saveMillis);
",0,0,0,1,2,1,10,0,0,10,61,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,772,"            return iNameKey;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,776,"            return iSaveMillis;
",2,0,0,0,0,1,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,780,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,781,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,783,"            if (obj instanceof Recurrence) {
",2,0,0,1,3,0,0,2,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,784,"                Recurrence other = (Recurrence)obj;
",4,0,0,1,2,0,0,4,0,8,35,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,785,"                return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,790,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,794,"            iOfYear.writeTo(out);
",0,0,0,1,2,0,6,0,0,6,21,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,795,"            out.writeUTF(iNameKey);
",0,0,0,1,2,0,6,0,0,6,23,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,796,"            writeMillis(out, iSaveMillis);
",0,0,0,1,2,0,6,0,0,6,30,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,797,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,800,"            return new Recurrence(iOfYear, nameKey, iSaveMillis);
",6,0,0,1,2,1,0,2,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,12,804,"            return rename((iNameKey + appendNameKey).intern());
",4,1,0,3,6,1,4,0,0,9,51,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,261,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());
",0,0,0,3,6,0,8,0,0,8,69,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,262,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,275,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));
",0,0,0,3,6,0,10,0,0,10,73,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,276,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,289,"        this(DateTimeUtils.currentTimeMillis(), chronology);
",2,0,0,2,4,0,4,0,0,6,52,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,290,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,302,"        this(instant, ISOChronology.getInstance());
",2,0,0,2,4,0,4,0,0,6,43,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,303,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,316,"        this(instant, ISOChronology.getInstance(zone));
",2,0,0,2,4,0,6,0,0,8,47,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,317,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,329,"    public LocalDate(long instant, Chronology chronology) {
",6,0,0,1,3,1,0,2,0,9,55,2,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,330,"        chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,332,"        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);
",6,0,0,2,4,0,8,0,0,14,86,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,333,"        chronology = chronology.withUTC();
",2,0,0,1,2,0,4,0,0,7,34,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,334,"        iLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);
",2,0,0,2,4,0,8,0,0,11,63,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,335,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,336,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,357,"        this(instant, (Chronology) null);
",2,0,0,2,4,0,0,2,0,4,33,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,358,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,378,"    public LocalDate(Object instant, DateTimeZone zone) {
",6,0,0,1,3,1,0,4,0,11,53,2,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,379,"        PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);
",2,0,0,2,4,0,8,2,0,12,89,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,380,"        Chronology chronology = converter.getChronology(instant, zone);
",2,0,0,1,2,0,8,2,0,12,63,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,381,"        chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,382,"        iChronology = chronology.withUTC();
",2,0,0,1,2,0,4,0,0,7,35,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,383,"        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.localDateParser());
",2,0,0,3,6,0,12,0,0,14,106,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,384,"        iLocalMillis = iChronology.getDateTimeMillis(values[0], values[1], values[2], 0);
",2,0,1,4,8,0,4,0,0,13,81,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,385,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,404,"    public LocalDate(Object instant, Chronology chronology) {
",6,0,0,1,3,1,0,4,0,11,57,2,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,405,"        PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);
",2,0,0,2,4,0,8,2,0,12,89,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,406,"        chronology = converter.getChronology(instant, chronology);
",2,0,0,1,2,0,8,0,0,11,58,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,407,"        chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,408,"        iChronology = chronology.withUTC();
",2,0,0,1,2,0,4,0,0,7,35,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,409,"        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.localDateParser());
",2,0,0,3,6,0,12,0,0,14,106,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,410,"        iLocalMillis = iChronology.getDateTimeMillis(values[0], values[1], values[2], 0);
",2,0,1,4,8,0,4,0,0,13,81,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,411,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,124,"        return new LocalDate();
",0,0,0,1,2,1,0,2,0,2,23,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,136,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,137,"            throw new NullPointerException(""Zone must not be null"");
",0,0,0,1,2,0,0,2,0,4,56,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,139,"        return new LocalDate(zone);
",2,0,0,1,2,1,0,2,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,151,"        if (chronology == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,152,"            throw new NullPointerException(""Chronology must not be null"");
",0,0,0,1,2,0,0,2,0,4,62,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,154,"        return new LocalDate(chronology);
",2,0,0,1,2,1,0,2,0,4,33,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,168,"        return parse(str, ISODateTimeFormat.localDateParser());
",0,0,0,2,4,1,8,0,0,8,55,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,179,"        return formatter.parseLocalDate(str);
",0,0,0,1,2,1,6,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,208,"            throw new IllegalArgumentException(""The calendar must not be null"");
",0,0,0,1,2,0,0,2,0,4,68,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,241,"            throw new IllegalArgumentException(""The date must not be null"");
",0,0,0,1,2,0,0,2,0,4,64,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,457,"        if (iChronology == null) {
",2,1,0,1,3,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,458,"            return new LocalDate(iLocalMillis, ISOChronology.getInstanceUTC());
",2,0,0,2,4,1,4,2,0,8,67,7,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,460,"        if (DateTimeZone.UTC.equals(iChronology.getZone()) == false) {
",4,1,0,3,7,0,6,0,0,12,62,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,461,"            return new LocalDate(iLocalMillis, iChronology.withUTC());
",2,0,0,2,4,1,4,2,0,8,58,7,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,463,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,476,"        return 3;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,489,"        switch (index) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,491,"                return chrono.year();
",0,0,0,1,2,1,4,0,0,4,21,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,493,"                return chrono.monthOfYear();
",0,0,0,1,2,1,4,0,0,4,28,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,495,"                return chrono.dayOfMonth();
",0,0,0,1,2,1,4,0,0,4,27,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,497,"                throw new IndexOutOfBoundsException(""Invalid index: "" + index);
",2,1,0,1,2,0,0,2,0,6,63,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,514,"        switch (index) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,516,"                return getChronology().year().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,52,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,518,"                return getChronology().monthOfYear().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,59,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,520,"                return getChronology().dayOfMonth().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,58,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,522,"                throw new IndexOutOfBoundsException(""Invalid index: "" + index);
",2,1,0,1,2,0,0,2,0,6,63,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,543,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");
",0,0,0,1,2,0,0,2,0,4,77,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,546,"            throw new IllegalArgumentException(""Field '"" + fieldType + ""' is not supported"");
",2,1,0,1,2,0,0,2,0,7,81,7,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,561,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,569,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,580,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,581,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,583,"        DurationField field = type.getField(getChronology());
",2,0,0,2,4,0,6,2,0,10,53,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,584,"        if (DATE_DURATION_TYPES.contains(type) ||
",0,1,0,1,3,0,6,0,0,7,41,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,586,"            return field.isSupported();
",0,0,0,1,2,1,4,0,0,4,27,7,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,588,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,623,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,631,"        return super.equals(partial);
",4,0,0,1,2,1,0,0,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,641,"        int hash = iHash;
",4,0,0,0,0,0,0,0,0,4,17,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,642,"        if (hash == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,643,"            hash = iHash = super.hashCode();
",6,0,0,1,2,0,0,0,0,8,32,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,645,"        return hash;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,666,"        if (this == partial) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,667,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,669,"        if (partial instanceof LocalDate) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,670,"            LocalDate other = (LocalDate) partial;
",4,0,0,1,2,0,0,4,0,8,38,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,671,"            if (iChronology.equals(other.iChronology)) {
",4,0,0,2,5,0,4,0,0,8,44,7,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,672,"                return (iLocalMillis < other.iLocalMillis ? -1 :
",6,1,0,0,1,1,0,0,0,8,48,10,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,677,"        return super.compareTo(partial);
",4,0,0,1,2,1,0,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,696,"        return toDateTimeAtStartOfDay(null);
",0,0,0,1,2,1,2,0,0,3,36,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,718,"        zone = DateTimeUtils.getZone(zone);
",2,0,0,1,2,0,6,0,0,9,35,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,719,"        Chronology chrono = getChronology().withZone(zone);
",2,0,0,2,4,0,6,2,0,10,51,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,720,"        long localMillis = getLocalMillis() + 6L * DateTimeConstants.MILLIS_PER_HOUR;
",6,2,0,1,2,0,2,0,0,10,77,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,721,"        long instant = zone.convertLocalToUTC(localMillis, false);
",2,0,0,1,2,0,6,0,0,9,58,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,722,"        instant = chrono.dayOfMonth().roundFloor(instant);
",2,0,0,2,4,0,8,0,0,11,50,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,723,"        return new DateTime(instant, chrono);
",4,0,0,1,2,1,0,2,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,743,"        return toDateTimeAtMidnight(null);
",0,0,0,1,2,1,2,0,0,3,34,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,766,"        zone = DateTimeUtils.getZone(zone);
",2,0,0,1,2,0,6,0,0,9,35,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,767,"        Chronology chrono = getChronology().withZone(zone);
",2,0,0,2,4,0,6,2,0,10,51,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,768,"        return new DateTime(getYear(), getMonthOfYear(), getDayOfMonth(), 0, 0, 0, 0, chrono);
",2,0,0,4,8,1,6,2,0,10,86,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,785,"        return toDateTimeAtCurrentTime(null);
",0,0,0,1,2,1,2,0,0,3,37,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,805,"        zone = DateTimeUtils.getZone(zone);
",2,0,0,1,2,0,6,0,0,9,35,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,806,"        Chronology chrono = getChronology().withZone(zone);
",2,0,0,2,4,0,6,2,0,10,51,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,807,"        long instantMillis = DateTimeUtils.currentTimeMillis();
",2,0,0,1,2,0,4,0,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,808,"        long resolved = chrono.set(this, instantMillis);
",2,0,0,1,2,0,6,0,0,8,48,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,809,"        return new DateTime(resolved, chrono);
",4,0,0,1,2,1,0,2,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,830,"        return toDateMidnight(null);
",0,0,0,1,2,1,2,0,0,3,28,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,851,"        zone = DateTimeUtils.getZone(zone);
",2,0,0,1,2,0,6,0,0,9,35,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,852,"        Chronology chrono = getChronology().withZone(zone);
",2,0,0,2,4,0,6,2,0,10,51,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,853,"        return new DateMidnight(getYear(), getMonthOfYear(), getDayOfMonth(), chrono);
",2,0,0,4,8,1,6,2,0,10,78,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,874,"        if (time == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,875,"            throw new IllegalArgumentException(""The time must not be null"");
",0,0,0,1,2,0,0,2,0,4,64,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,877,"        if (getChronology() != time.getChronology()) {
",0,1,0,3,7,0,6,0,0,7,46,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,878,"            throw new IllegalArgumentException(""The chronology of the time does not match"");
",0,0,0,1,2,0,0,2,0,3,80,7,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,880,"        long localMillis = getLocalMillis() + time.getLocalMillis();
",2,1,0,2,4,0,6,0,0,9,60,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,881,"        return new LocalDateTime(localMillis, getChronology());
",2,0,0,2,4,1,2,2,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,903,"        return toDateTime(time, null);
",0,0,0,1,2,1,4,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,925,"        if (time != null && getChronology() != time.getChronology()) {
",2,3,0,3,7,0,6,0,0,12,62,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,926,"            throw new IllegalArgumentException(""The chronology of the time does not match"");
",0,0,0,1,2,0,0,2,0,3,80,7,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,928,"        Chronology chrono = getChronology().withZone(zone);
",2,0,0,2,4,0,6,2,0,10,51,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,929,"        long instant = DateTimeUtils.currentTimeMillis();
",2,0,0,1,2,0,4,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,930,"        instant = chrono.set(this, instant);
",2,0,0,1,2,0,6,0,0,9,36,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,931,"        if (time != null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,932,"            instant = chrono.set(time, instant);
",2,0,0,1,2,0,8,0,0,11,36,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,934,"        return new DateTime(instant, chrono);
",4,0,0,1,2,1,0,2,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,950,"        return toInterval(null);
",0,0,0,1,2,1,2,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,965,"        zone = DateTimeUtils.getZone(zone);
",2,0,0,1,2,0,6,0,0,9,35,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,966,"        DateTime start = toDateTimeAtStartOfDay(zone);
",2,0,0,1,2,0,4,2,0,8,46,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,967,"        DateTime end = plusDays(1).toDateTimeAtStartOfDay(zone);
",2,0,0,2,4,0,6,2,0,10,56,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,968,"        return new Interval(start, end);
",4,0,0,1,2,1,0,2,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,989,"        int dom = getDayOfMonth();
",2,0,0,1,2,0,2,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,990,"        Date date = new Date(getYear() - 1900, getMonthOfYear() - 1, dom);
",4,2,0,3,6,0,4,4,0,14,66,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,991,"        LocalDate check = LocalDate.fromDateFields(date);
",2,0,0,1,2,0,6,2,0,10,49,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,992,"        if (check.isBefore(this)) {
",0,0,0,2,5,0,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,995,"            while (check.equals(this) == false) {
",0,1,0,2,5,0,4,0,0,6,37,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,996,"                date.setTime(date.getTime() + 3600000);
",0,1,0,2,4,0,8,0,0,9,39,9,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,997,"                check = LocalDate.fromDateFields(date);
",2,0,0,1,2,0,6,0,0,9,39,8,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1000,"            while (date.getDate() == dom) {
",2,1,0,2,5,0,4,0,0,7,31,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1001,"                date.setTime(date.getTime() - 1000);
",0,1,0,2,4,0,8,0,0,9,36,9,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1004,"            date.setTime(date.getTime() + 1000);
",0,1,0,2,4,0,8,0,0,9,36,7,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1005,"        } else if (check.equals(this)) {
",0,0,0,2,6,0,4,0,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1007,"            Date earlier = new Date(date.getTime() - TimeZone.getDefault().getDSTSavings());
",2,1,0,4,8,0,10,4,0,17,80,7,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1008,"            if (earlier.getDate() == dom) {
",2,1,0,2,5,0,4,0,0,7,31,7,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1009,"                date = earlier;
",4,0,0,0,0,0,0,0,0,5,15,9,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1012,"        return date;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1027,"        newMillis = iChronology.dayOfMonth().roundFloor(newMillis);
",2,0,0,2,4,0,8,0,0,11,59,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1028,"        return (newMillis == getLocalMillis() ? this : new LocalDate(newMillis, getChronology()));
",4,1,0,4,8,1,4,2,0,11,90,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1046,"        if (partial == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1047,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1049,"        return withLocalMillis(getChronology().set(partial, getLocalMillis()));
",0,0,0,4,8,1,10,0,0,10,71,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1071,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1072,"            throw new IllegalArgumentException(""Field must not be null"");
",0,0,0,1,2,0,0,2,0,4,61,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1074,"        if (isSupported(fieldType) == false) {
",0,1,0,2,5,0,4,0,0,6,38,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1075,"            throw new IllegalArgumentException(""Field '"" + fieldType + ""' is not supported"");
",2,1,0,1,2,0,0,2,0,7,81,7,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1077,"        long instant = fieldType.getField(getChronology()).set(getLocalMillis(), value);
",2,0,0,4,8,0,12,0,0,14,80,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1078,"        return withLocalMillis(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1100,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1101,"            throw new IllegalArgumentException(""Field must not be null"");
",0,0,0,1,2,0,0,2,0,4,61,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1103,"        if (isSupported(fieldType) == false) {
",0,1,0,2,5,0,4,0,0,6,38,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1104,"            throw new IllegalArgumentException(""Field '"" + fieldType + ""' is not supported"");
",2,1,0,1,2,0,0,2,0,7,81,7,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1106,"        if (amount == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1107,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1109,"        long instant = fieldType.getField(getChronology()).add(getLocalMillis(), amount);
",2,0,0,4,8,0,12,0,0,14,81,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1110,"        return withLocalMillis(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1133,"        if (period == null || scalar == 0) {
",4,3,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1134,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1136,"        long instant = getLocalMillis();
",2,0,0,1,2,0,2,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1137,"        Chronology chrono = getChronology();
",2,0,0,1,2,0,2,2,0,6,36,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1138,"        for (int i = 0; i < period.size(); i++) {
",6,1,0,2,5,0,4,0,0,12,41,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1139,"            long value = FieldUtils.safeMultiply(period.getValue(i), scalar);
",2,0,0,2,4,0,12,0,0,14,65,7,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1140,"            DurationFieldType type = period.getFieldType(i);
",2,0,0,1,2,0,6,2,0,10,48,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1141,"            if (isSupported(type)) {
",0,0,0,2,5,0,4,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1142,"                instant = type.getField(chrono).add(instant, value);
",2,0,0,2,4,0,12,0,0,15,52,8,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1145,"        return withLocalMillis(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1166,"        return withPeriodAdded(period, 1);
",0,0,0,1,2,1,4,0,0,4,34,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1188,"        if (years == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1189,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1191,"        long instant = getChronology().years().add(getLocalMillis(), years);
",2,0,0,4,8,0,10,0,0,12,68,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1192,"        return withLocalMillis(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1214,"        if (months == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1215,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1217,"        long instant = getChronology().months().add(getLocalMillis(), months);
",2,0,0,4,8,0,10,0,0,12,70,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1218,"        return withLocalMillis(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1237,"        if (weeks == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1238,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1240,"        long instant = getChronology().weeks().add(getLocalMillis(), weeks);
",2,0,0,4,8,0,10,0,0,12,68,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1241,"        return withLocalMillis(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1260,"        if (days == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1261,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1263,"        long instant = getChronology().days().add(getLocalMillis(), days);
",2,0,0,4,8,0,10,0,0,12,66,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1264,"        return withLocalMillis(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1285,"        return withPeriodAdded(period, -1);
",0,0,0,1,2,1,4,0,0,5,35,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1307,"        if (years == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1308,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1310,"        long instant = getChronology().years().subtract(getLocalMillis(), years);
",2,0,0,4,8,0,10,0,0,12,73,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1311,"        return withLocalMillis(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1333,"        if (months == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1334,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1336,"        long instant = getChronology().months().subtract(getLocalMillis(), months);
",2,0,0,4,8,0,10,0,0,12,75,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1337,"        return withLocalMillis(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1356,"        if (weeks == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1357,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1359,"        long instant = getChronology().weeks().subtract(getLocalMillis(), weeks);
",2,0,0,4,8,0,10,0,0,12,73,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1360,"        return withLocalMillis(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1379,"        if (days == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1380,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1382,"        long instant = getChronology().days().subtract(getLocalMillis(), days);
",2,0,0,4,8,0,10,0,0,12,71,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1383,"        return withLocalMillis(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1396,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1397,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");
",0,0,0,1,2,0,0,2,0,4,77,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1399,"        if (isSupported(fieldType) == false) {
",0,1,0,2,5,0,4,0,0,6,38,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1400,"            throw new IllegalArgumentException(""Field '"" + fieldType + ""' is not supported"");
",2,1,0,1,2,0,0,2,0,7,81,7,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1402,"        return new Property(this, fieldType.getField(getChronology()));
",0,0,0,3,6,1,6,2,0,8,63,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1412,"        return getChronology().era().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1421,"        return getChronology().centuryOfEra().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,60,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1430,"        return getChronology().yearOfEra().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,57,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1439,"        return getChronology().yearOfCentury().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,61,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1448,"        return getChronology().year().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1463,"        return getChronology().weekyear().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,56,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1472,"        return getChronology().monthOfYear().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,59,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1486,"        return getChronology().weekOfWeekyear().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,62,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1495,"        return getChronology().dayOfYear().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,57,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1506,"        return getChronology().dayOfMonth().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,58,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1517,"        return getChronology().dayOfWeek().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,57,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1533,"        return withLocalMillis(getChronology().era().set(getLocalMillis(), era));
",0,0,0,5,10,1,12,0,0,12,73,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1548,"        return withLocalMillis(getChronology().centuryOfEra().set(getLocalMillis(), centuryOfEra));
",0,0,0,5,10,1,12,0,0,12,91,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1563,"        return withLocalMillis(getChronology().yearOfEra().set(getLocalMillis(), yearOfEra));
",0,0,0,5,10,1,12,0,0,12,85,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1578,"        return withLocalMillis(getChronology().yearOfCentury().set(getLocalMillis(), yearOfCentury));
",0,0,0,5,10,1,12,0,0,12,93,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1593,"        return withLocalMillis(getChronology().year().set(getLocalMillis(), year));
",0,0,0,5,10,1,12,0,0,12,75,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1614,"        return withLocalMillis(getChronology().weekyear().set(getLocalMillis(), weekyear));
",0,0,0,5,10,1,12,0,0,12,83,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1629,"        return withLocalMillis(getChronology().monthOfYear().set(getLocalMillis(), monthOfYear));
",0,0,0,5,10,1,12,0,0,12,89,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1649,"        return withLocalMillis(getChronology().weekOfWeekyear().set(getLocalMillis(), weekOfWeekyear));
",0,0,0,5,10,1,12,0,0,12,95,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1664,"        return withLocalMillis(getChronology().dayOfYear().set(getLocalMillis(), dayOfYear));
",0,0,0,5,10,1,12,0,0,12,85,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1679,"        return withLocalMillis(getChronology().dayOfMonth().set(getLocalMillis(), dayOfMonth));
",0,0,0,5,10,1,12,0,0,12,87,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1694,"        return withLocalMillis(getChronology().dayOfWeek().set(getLocalMillis(), dayOfWeek));
",0,0,0,5,10,1,12,0,0,12,85,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1704,"        return new Property(this, getChronology().era());
",0,0,0,3,6,1,4,2,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1713,"        return new Property(this, getChronology().centuryOfEra());
",0,0,0,3,6,1,4,2,0,6,58,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1722,"        return new Property(this, getChronology().yearOfCentury());
",0,0,0,3,6,1,4,2,0,6,59,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1731,"        return new Property(this, getChronology().yearOfEra());
",0,0,0,3,6,1,4,2,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1740,"        return new Property(this, getChronology().year());
",0,0,0,3,6,1,4,2,0,6,50,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1749,"        return new Property(this, getChronology().weekyear());
",0,0,0,3,6,1,4,2,0,6,54,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1758,"        return new Property(this, getChronology().monthOfYear());
",0,0,0,3,6,1,4,2,0,6,57,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1767,"        return new Property(this, getChronology().weekOfWeekyear());
",0,0,0,3,6,1,4,2,0,6,60,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1776,"        return new Property(this, getChronology().dayOfYear());
",0,0,0,3,6,1,4,2,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1785,"        return new Property(this, getChronology().dayOfMonth());
",0,0,0,3,6,1,4,2,0,6,56,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1794,"        return new Property(this, getChronology().dayOfWeek());
",0,0,0,3,6,1,4,2,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1815,"        if (pattern == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1816,"            return toString();
",0,0,0,1,2,1,2,0,0,2,18,7,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1818,"        return DateTimeFormat.forPattern(pattern).print(this);
",0,0,0,2,4,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1829,"        if (pattern == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1830,"            return toString();
",0,0,0,1,2,1,2,0,0,2,18,7,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1832,"        return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);
",0,0,0,3,6,1,12,0,0,12,73,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,82,"public final class LocalDate
",2,0,0,0,0,2,0,0,0,4,28,1,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,12,266,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,12,267,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,12,269,"            if (obj instanceof StandardDurationFieldType) {
",2,0,0,1,3,0,0,2,0,4,47,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,12,270,"                return iOrdinal == ((StandardDurationFieldType) obj).iOrdinal;
",6,1,0,2,4,1,0,2,0,9,62,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,12,272,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,12,282,"            chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,5,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,12,284,"            switch (iOrdinal) {
",2,0,0,1,3,0,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,12,286,"                    return chronology.eras();
",0,0,0,1,2,1,4,0,0,4,25,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,12,288,"                    return chronology.centuries();
",0,0,0,1,2,1,4,0,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,12,290,"                    return chronology.weekyears();
",0,0,0,1,2,1,4,0,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,12,292,"                    return chronology.years();
",0,0,0,1,2,1,4,0,0,4,26,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,12,294,"                    return chronology.months();
",0,0,0,1,2,1,4,0,0,4,27,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,12,296,"                    return chronology.weeks();
",0,0,0,1,2,1,4,0,0,4,26,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,12,298,"                    return chronology.days();
",0,0,0,1,2,1,4,0,0,4,25,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,12,300,"                    return chronology.halfdays();
",0,0,0,1,2,1,4,0,0,4,29,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,12,302,"                    return chronology.hours();
",0,0,0,1,2,1,4,0,0,4,26,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,12,304,"                    return chronology.minutes();
",0,0,0,1,2,1,4,0,0,4,28,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,12,306,"                    return chronology.seconds();
",0,0,0,1,2,1,4,0,0,4,28,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,12,308,"                    return chronology.millis();
",0,0,0,1,2,1,4,0,0,4,27,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,12,311,"                    throw new InternalError();
",0,0,0,1,2,0,0,2,0,2,26,8,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,12,321,"            switch (iOrdinal) {
",2,0,0,1,3,0,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,12,323,"                    return ERAS_TYPE;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,12,325,"                    return CENTURIES_TYPE;
",2,0,0,0,0,1,0,0,0,2,22,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,12,327,"                    return WEEKYEARS_TYPE;
",2,0,0,0,0,1,0,0,0,2,22,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,12,329,"                    return YEARS_TYPE;
",2,0,0,0,0,1,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,12,331,"                    return MONTHS_TYPE;
",2,0,0,0,0,1,0,0,0,2,19,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,12,333,"                    return WEEKS_TYPE;
",2,0,0,0,0,1,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,12,335,"                    return DAYS_TYPE;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,12,337,"                    return HALFDAYS_TYPE;
",2,0,0,0,0,1,0,0,0,2,21,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,12,339,"                    return HOURS_TYPE;
",2,0,0,0,0,1,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,12,341,"                    return MINUTES_TYPE;
",2,0,0,0,0,1,0,0,0,2,20,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,12,343,"                    return SECONDS_TYPE;
",2,0,0,0,0,1,0,0,0,2,20,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,12,345,"                    return MILLIS_TYPE;
",2,0,0,0,0,1,0,0,0,2,19,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,12,348,"                    return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1880,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1881,"            iInstant = instant;
",4,0,0,0,0,0,0,0,0,5,19,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1882,"            iField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1883,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1889,"            oos.writeObject(iInstant);
",0,0,0,1,2,0,6,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1890,"            oos.writeObject(iField.getType());
",0,0,0,2,4,0,8,0,0,8,34,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1891,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1897,"            iInstant = (LocalDate) oos.readObject();
",2,0,0,2,4,0,4,2,0,9,40,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1898,"            DateTimeFieldType type = (DateTimeFieldType) oos.readObject();
",2,0,0,2,4,0,4,4,0,10,62,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1899,"            iField = type.getField(iInstant.getChronology());
",2,0,0,2,4,0,8,0,0,11,49,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1900,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1909,"            return iField;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1918,"            return iInstant.getLocalMillis();
",0,0,0,1,2,1,4,0,0,4,33,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1928,"            return iInstant.getChronology();
",0,0,0,1,2,1,4,0,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1937,"            return iInstant;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1951,"            return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));
",0,0,0,3,6,1,14,0,0,14,78,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1966,"            return iInstant.withLocalMillis(iField.addWrapField(iInstant.getLocalMillis(), value));
",0,0,0,3,6,1,14,0,0,14,87,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1980,"            return iInstant.withLocalMillis(iField.set(iInstant.getLocalMillis(), value));
",0,0,0,3,6,1,14,0,0,14,78,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,1994,"            return iInstant.withLocalMillis(iField.set(iInstant.getLocalMillis(), text, locale));
",0,0,0,3,6,1,16,0,0,16,85,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,2007,"            return setCopy(text, null);
",0,0,0,1,2,1,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,2026,"            return setCopy(getMaximumValue());
",0,0,0,2,4,1,4,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,2038,"            return setCopy(getMinimumValue());
",0,0,0,2,4,1,4,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,2053,"            return iInstant.withLocalMillis(iField.roundFloor(iInstant.getLocalMillis()));
",0,0,0,3,6,1,12,0,0,12,78,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,2067,"            return iInstant.withLocalMillis(iField.roundCeiling(iInstant.getLocalMillis()));
",0,0,0,3,6,1,12,0,0,12,80,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,2077,"            return iInstant.withLocalMillis(iField.roundHalfFloor(iInstant.getLocalMillis()));
",0,0,0,3,6,1,12,0,0,12,82,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,2087,"            return iInstant.withLocalMillis(iField.roundHalfCeiling(iInstant.getLocalMillis()));
",0,0,0,3,6,1,12,0,0,12,84,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,12,2098,"            return iInstant.withLocalMillis(iField.roundHalfEven(iInstant.getLocalMillis()));
",0,0,0,3,6,1,12,0,0,12,81,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,463,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,464,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,466,"            if (obj instanceof StandardDateTimeFieldType) {
",2,0,0,1,3,0,0,2,0,4,47,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,467,"                return iOrdinal == ((StandardDateTimeFieldType) obj).iOrdinal;
",6,1,0,2,4,1,0,2,0,9,62,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,469,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,475,"            return (1 << iOrdinal);
",2,1,0,1,2,1,0,0,0,3,23,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,484,"                    return chronology.era();
",0,0,0,1,2,1,4,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,486,"                    return chronology.yearOfEra();
",0,0,0,1,2,1,4,0,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,488,"                    return chronology.centuryOfEra();
",0,0,0,1,2,1,4,0,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,490,"                    return chronology.yearOfCentury();
",0,0,0,1,2,1,4,0,0,4,34,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,494,"                    return chronology.dayOfYear();
",0,0,0,1,2,1,4,0,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,500,"                    return chronology.weekyearOfCentury();
",0,0,0,1,2,1,4,0,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,502,"                    return chronology.weekyear();
",0,0,0,1,2,1,4,0,0,4,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,504,"                    return chronology.weekOfWeekyear();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,506,"                    return chronology.dayOfWeek();
",0,0,0,1,2,1,4,0,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,508,"                    return chronology.halfdayOfDay();
",0,0,0,1,2,1,4,0,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,510,"                    return chronology.hourOfHalfday();
",0,0,0,1,2,1,4,0,0,4,34,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,512,"                    return chronology.clockhourOfHalfday();
",0,0,0,1,2,1,4,0,0,4,39,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,514,"                    return chronology.clockhourOfDay();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,518,"                    return chronology.minuteOfDay();
",0,0,0,1,2,1,4,0,0,4,32,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,528,"                    return chronology.millisOfSecond();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,531,"                    throw new InternalError();
",0,0,0,1,2,0,0,2,0,2,26,8,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,541,"            switch (iOrdinal) {
",2,0,0,1,3,0,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,543,"                    return ERA_TYPE;
",2,0,0,0,0,1,0,0,0,2,16,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,545,"                    return YEAR_OF_ERA_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,547,"                    return CENTURY_OF_ERA_TYPE;
",2,0,0,0,0,1,0,0,0,2,27,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,549,"                    return YEAR_OF_CENTURY_TYPE;
",2,0,0,0,0,1,0,0,0,2,28,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,551,"                    return YEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,553,"                    return DAY_OF_YEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,555,"                    return MONTH_OF_YEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,557,"                    return DAY_OF_MONTH_TYPE;
",2,0,0,0,0,1,0,0,0,2,25,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,559,"                    return WEEKYEAR_OF_CENTURY_TYPE;
",2,0,0,0,0,1,0,0,0,2,32,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,561,"                    return WEEKYEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,21,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,563,"                    return WEEK_OF_WEEKYEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,565,"                    return DAY_OF_WEEK_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,567,"                    return HALFDAY_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,27,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,569,"                    return HOUR_OF_HALFDAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,28,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,571,"                    return CLOCKHOUR_OF_HALFDAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,33,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,573,"                    return CLOCKHOUR_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,575,"                    return HOUR_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,577,"                    return MINUTE_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,579,"                    return MINUTE_OF_HOUR_TYPE;
",2,0,0,0,0,1,0,0,0,2,27,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,581,"                    return SECOND_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,583,"                    return SECOND_OF_MINUTE_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,585,"                    return MILLIS_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,587,"                    return MILLIS_OF_SECOND_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,12,590,"                    return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,1284,"        Stub(String id) {
",4,0,0,1,3,0,0,2,0,6,17,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,1285,"            iID = id;
",4,0,0,0,0,0,0,0,0,5,9,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,1286,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,1289,"            out.writeUTF(iID);
",0,0,0,1,2,0,6,0,0,6,18,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,1290,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,1293,"            iID = in.readUTF();
",2,0,0,1,2,0,4,0,0,7,19,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,1294,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,12,1297,"            return forID(iID);
",0,0,0,1,2,1,4,0,0,4,18,6,0.00000,0
