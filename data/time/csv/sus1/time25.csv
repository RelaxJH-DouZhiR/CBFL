dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,552,"                offset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,24,8,1,0
defect4j,time,org/joda/time/DateTime,25,160,"        super(instant, zone);
",4,0,0,1,2,0,0,0,0,4,21,4,0.12500,0
defect4j,time,org/joda/time/DateTime,25,161,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12500,0
defect4j,time,org/joda/time/DateTime,25,285,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,0.10000,0
defect4j,time,org/joda/time/DateTime,25,287,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.10000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,210,"            return iNextInfo.getOffset(millis);
",0,0,0,1,2,1,6,0,0,6,35,6,0.08654,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,190,"                    dayOfYear++;
",2,0,0,0,0,0,0,0,0,3,12,10,0.06618,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,170,"            periodStart = next;
",4,0,0,0,0,0,0,0,0,5,19,6,0.06429,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,171,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));
",10,0,0,2,4,0,0,2,0,14,57,6,0.06429,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,172,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06429,0
defect4j,time,org/joda/time/base/BaseDateTime,25,110,"        this(instant, ISOChronology.getInstance(zone));
",2,0,0,2,4,0,6,0,0,8,47,4,0.04598,0
defect4j,time,org/joda/time/base/BaseDateTime,25,111,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04598,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2091,"                buf.append('+');
",0,0,0,1,2,0,4,0,0,5,16,8,0.04265,0
defect4j,time,org/joda/time/DateTimeZone,25,893,"                long nextLocal = nextTransition(instantAdjusted);
",2,0,0,1,2,0,4,0,0,6,49,9,0.04167,0
defect4j,time,org/joda/time/DateTimeZone,25,894,"                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
",6,1,0,1,2,0,2,0,0,9,66,9,0.04167,0
defect4j,time,org/joda/time/DateTimeZone,25,895,"                if (nextLocal != nextAdjusted) {
",4,1,0,1,3,0,0,0,0,5,32,8,0.04167,0
defect4j,time,org/joda/time/base/AbstractInstant,25,424,"        return ISODateTimeFormat.dateTime().print(this);
",0,0,0,2,4,1,6,0,0,6,48,5,0.04167,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,123,"        return iZone.nextTransition(instant);
",0,0,0,1,2,1,6,0,0,6,37,5,0.04000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1895,"                if (buf != null) {
",2,1,0,1,3,0,0,0,0,3,18,7,0.03930,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1896,"                    while (--minDigits >= 0) {
",2,1,0,1,3,0,0,0,0,4,26,9,0.03930,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1897,"                        buf.append('0');
",0,0,0,1,2,0,4,0,0,5,16,12,0.03930,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1904,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.03930,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2115,"            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,10,63,5,0.03422,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2116,"            if (displayOffset == 0 && iMinFields <= 2) {
",4,3,0,1,3,0,0,0,0,7,44,5,0.03422,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2117,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.03422,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2109,"                buf.append(':');
",0,0,0,1,2,0,4,0,0,5,16,8,0.03409,0
defect4j,time,org/joda/time/base/BaseDateTime,25,225,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03358,0
defect4j,time,org/joda/time/base/BaseDateTime,25,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,
",8,0,0,0,1,0,0,0,0,8,46,4,0.03333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2090,"            if (displayOffset >= 0) {
",2,1,0,1,3,0,0,0,0,3,25,5,0.03273,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2097,"            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,0,0,0,0,0,0,9,62,6,0.03273,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2098,"            FormatUtils.appendPaddedInteger(buf, hours, 2);
",0,0,0,1,2,0,8,0,0,8,47,6,0.03273,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2099,"            if (iMaxFields == 1) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.03273,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2102,"            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,1,2,0,0,0,0,10,64,5,0.03273,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2103,"            if (displayOffset == 0 && iMinFields <= 1) {
",4,3,0,1,3,0,0,0,0,7,44,5,0.03273,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2107,"            int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,9,66,6,0.03273,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2108,"            if (iShowSeparators) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.03273,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2111,"            FormatUtils.appendPaddedInteger(buf, minutes, 2);
",0,0,0,1,2,0,8,0,0,8,49,6,0.03273,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2112,"            if (iMaxFields == 2) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.03273,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,936,"        if (dt == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.02980,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,937,"            dt = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.02980,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,942,"        return dt;
",2,0,0,0,0,1,0,0,0,2,10,4,0.02980,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,901,"        if (tt == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.02885,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,902,"            tt = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.02885,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,907,"        return tt;
",2,0,0,0,0,1,0,0,0,2,10,4,0.02885,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,866,"        if (t == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.02813,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,867,"            t = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,34,6,0.02813,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,872,"        return t;
",2,0,0,0,0,1,0,0,0,2,9,4,0.02813,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1846,"                printTo(buf, null, instant, chrono);
",0,0,0,1,2,0,8,0,0,9,36,7,0.02795,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1849,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02795,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1850,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02795,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2083,"            if (displayZone == null) {
",2,1,0,1,3,0,0,0,0,3,26,5,0.02769,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2086,"            if (displayOffset == 0 && iZeroOffsetPrintText != null) {
",4,3,0,1,3,0,0,0,0,7,57,5,0.02769,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1450,"        if (hmsf == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.02761,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1451,"            hmsf = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,37,6,0.02761,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1458,"        return hmsf;
",2,0,0,0,0,1,0,0,0,2,12,4,0.02761,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1659,"        if (fse == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.02761,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1660,"            fse = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.02761,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1667,"        return fse;
",2,0,0,0,0,1,0,0,0,2,11,4,0.02761,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1879,"            DateTimeField field = iFieldType.getField(chrono);
",2,0,0,1,2,0,6,2,0,10,50,5,0.02671,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1880,"            int minDigits = iMinDigits;
",4,0,0,0,0,0,0,0,0,4,27,6,0.02671,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1884,"                fraction = field.remainder(instant);
",2,0,0,1,2,0,6,0,0,9,36,7,0.02671,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1892,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02671,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1894,"            if (fraction == 0) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.02671,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,25,127,"            return instant % iUnitMillis;
",4,1,0,0,0,1,0,0,0,5,29,6,0.02550,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,25,126,"        if (instant >= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.02528,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,854,"        return yearMonthDay();
",0,0,0,1,2,1,2,0,0,2,22,5,0.02446,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1326,"        if (ymd == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.02413,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1327,"            ymd = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.02413,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1333,"        return ymd;
",2,0,0,0,0,1,0,0,0,2,11,4,0.02413,0
defect4j,time,org/joda/time/DateTimeZone,25,889,"            if ((offsetLocal - offsetAdjusted) < 0) {
",4,2,0,2,5,0,0,0,0,6,41,6,0.02381,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2517,"                locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,7,0.02375,0
defect4j,time,org/joda/time/format/FormatUtils,25,68,"            for (; size > 2; size--) {
",4,1,0,1,3,0,0,0,0,6,26,7,0.02320,0
defect4j,time,org/joda/time/format/FormatUtils,25,74,"            int d = ((value + 1) * 13421772) >> 27;
",4,3,0,2,4,0,0,0,0,7,39,8,0.02320,0
defect4j,time,org/joda/time/format/FormatUtils,25,75,"            buf.append((char) (d + '0'));
",2,1,0,3,6,0,4,0,0,8,29,8,0.02320,0
defect4j,time,org/joda/time/format/FormatUtils,25,77,"            buf.append((char) (value - (d << 3) - (d << 1) + '0'));
",6,4,0,5,10,0,4,0,0,15,55,8,0.02320,0
defect4j,time,org/joda/time/format/FormatUtils,25,78,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.02320,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1151,"            buf.append(iValue);
",0,0,0,1,2,0,6,0,0,6,19,6,0.02308,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1152,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02308,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2510,"            DateTimePrinter[] elements = iPrinters;
",4,0,0,1,2,0,0,2,0,6,39,5,0.02284,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2511,"            if (elements == null) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.02284,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2515,"            if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,5,0.02284,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2520,"            int len = elements.length;
",6,0,0,0,0,0,0,0,0,6,26,6,0.02284,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2521,"            for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,5,0.02284,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2522,"                elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);
",0,0,1,2,4,0,14,0,0,18,78,8,0.02284,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2524,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02284,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1408,"                DateTimeField field = iFieldType.getField(chrono);
",2,0,0,1,2,0,6,2,0,10,50,7,0.02284,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1409,"                FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);
",0,0,0,2,4,0,14,0,0,14,76,8,0.02284,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1412,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02284,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1413,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02284,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,580,"        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());
",2,0,0,3,6,0,4,4,0,10,78,4,0.02267,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,581,"        printTo(buf, instant);
",0,0,0,1,2,0,6,0,0,6,22,5,0.02267,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,582,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.02267,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,457,"        long millis = DateTimeUtils.getInstantMillis(instant);
",2,0,0,1,2,0,6,0,0,8,54,5,0.02261,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,458,"        Chronology chrono = DateTimeUtils.getInstantChronology(instant);
",2,0,0,1,2,0,6,2,0,10,64,4,0.02261,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,459,"        printTo(buf, millis, chrono);
",0,0,0,1,2,0,8,0,0,8,29,5,0.02261,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,460,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02261,0
defect4j,time,org/joda/time/format/FormatUtils,25,83,"                digits = 4;
",2,0,0,0,0,0,0,0,0,3,11,10,0.02239,0
defect4j,time,org/joda/time/format/FormatUtils,25,82,"            } else if (value < 10000) {
",2,1,0,1,4,0,0,0,0,3,27,8,0.02233,0
defect4j,time,org/joda/time/DateTimeFieldType,25,503,"                    return chronology.secondOfDay();
",0,0,0,1,2,1,4,0,0,4,32,7,0.02233,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,616,"        DateTimePrinter printer = requirePrinter();
",2,0,0,1,2,0,2,2,0,6,43,4,0.02228,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,617,"        chrono = selectChronology(chrono);
",2,0,0,1,2,0,4,0,0,7,34,4,0.02228,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,620,"        DateTimeZone zone = chrono.getZone();
",2,0,0,1,2,0,4,2,0,8,37,4,0.02228,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,621,"        int offset = zone.getOffset(instant);
",2,0,0,1,2,0,6,0,0,8,37,5,0.02228,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,622,"        long adjustedInstant = instant + offset;
",6,1,0,0,0,0,0,0,0,7,40,5,0.02228,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,623,"        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {
",8,5,0,3,7,0,0,0,0,13,65,4,0.02228,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,629,"        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);
",0,0,0,2,4,0,18,0,0,18,79,5,0.02228,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,630,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02228,0
defect4j,time,org/joda/time/format/FormatUtils,25,80,"            if (value < 1000) {
",2,1,0,1,3,0,0,0,0,3,19,7,0.02206,0
defect4j,time,org/joda/time/format/FormatUtils,25,87,"            for (; size > digits; size--) {
",6,1,0,1,3,0,0,0,0,8,31,7,0.02206,0
defect4j,time,org/joda/time/format/FormatUtils,25,90,"            buf.append(Integer.toString(value));
",0,0,0,2,4,0,10,0,0,10,36,8,0.02206,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1621,"        if (lte == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.02027,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1622,"            lte = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.02027,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1626,"        return lte;
",2,0,0,0,0,1,0,0,0,2,11,4,0.02027,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2504,"            return iPrintedLengthEstimate;
",2,0,0,0,0,1,0,0,0,2,30,5,0.01863,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1671,"        if (ze == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.01811,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1672,"            ze = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.01811,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1676,"        return ze;
",2,0,0,0,0,1,0,0,0,2,10,4,0.01811,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2072,"                est += iMinFields - 1;
",4,1,0,0,0,0,0,0,0,6,22,7,0.01804,0
defect4j,time,org/joda/time/format/FormatUtils,25,67,"        } else if (value < 100) {
",2,1,0,1,4,0,0,0,0,3,25,5,0.01772,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,655,"        DateTimePrinter printer = iPrinter;
",4,0,0,0,0,0,0,2,0,6,35,4,0.01731,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,656,"        if (printer == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.01731,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,659,"        return printer;
",2,0,0,0,0,1,0,0,0,2,15,4,0.01731,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2070,"            int est = 1 + iMinFields << 1;
",4,2,0,0,0,0,0,0,0,6,30,6,0.01727,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2071,"            if (iShowSeparators) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.01727,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2074,"            if (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {
",4,3,0,2,5,0,4,0,0,11,74,5,0.01727,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2077,"            return est;
",2,0,0,0,0,1,0,0,0,2,11,5,0.01727,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2207,"            return estimatePrintedLength();
",0,0,0,1,2,1,2,0,0,2,31,6,0.01727,0
defect4j,time,org/joda/time/format/FormatUtils,25,64,"                buf.append('0');
",0,0,0,1,2,0,4,0,0,5,16,9,0.01721,0
defect4j,time,org/joda/time/format/FormatUtils,25,63,"            for (; size > 1; size--) {
",4,1,0,1,3,0,0,0,0,6,26,6,0.01718,0
defect4j,time,org/joda/time/format/FormatUtils,25,66,"            buf.append((char)(value + '0'));
",2,1,0,3,6,0,4,0,0,8,32,7,0.01718,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,532,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.01685,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,535,"        if (maxDigits < minDigits) {
",4,1,0,1,3,0,0,0,0,5,28,4,0.01685,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,538,"        if (minDigits < 0 || maxDigits <= 0) {
",4,3,0,1,3,0,0,0,0,7,38,4,0.01685,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,541,"        return append0(new Fraction(fieldType, minDigits, maxDigits));
",6,0,0,2,4,1,2,2,0,10,62,5,0.01685,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,559,"        return appendFraction(DateTimeFieldType.secondOfDay(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,77,5,0.01685,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1828,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.01685,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1829,"            iFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,23,5,0.01685,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1831,"            if (maxDigits > 18) {
",2,1,0,1,3,0,0,0,0,3,21,5,0.01685,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1834,"            iMinDigits = minDigits;
",4,0,0,0,0,0,0,0,0,5,23,5,0.01685,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1835,"            iMaxDigits = maxDigits;
",4,0,0,0,0,0,0,0,0,5,23,5,0.01685,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1836,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01685,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1839,"            return iMaxDigits;
",2,0,0,0,0,1,0,0,0,2,18,5,0.01685,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1997,"            return iMaxDigits;
",2,0,0,0,0,1,0,0,0,2,18,5,0.01685,0
defect4j,time,org/joda/time/DateTime,25,443,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01681,0
defect4j,time,org/joda/time/DateTime,25,441,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,0.01667,0
defect4j,time,org/joda/time/DateTimeUtils,25,167,"        Chronology chrono = instant.getChronology();
",2,0,0,1,2,0,4,2,0,8,44,4,0.01664,0
defect4j,time,org/joda/time/DateTimeUtils,25,168,"        if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.01664,0
defect4j,time,org/joda/time/DateTimeUtils,25,171,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.01664,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1024,"        return append0(new TimeZoneOffset
",0,0,0,0,1,1,2,2,0,4,33,5,0.01651,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2054,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.01639,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2055,"            iZeroOffsetPrintText = zeroOffsetPrintText;
",4,0,0,0,0,0,0,0,0,5,43,5,0.01639,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2056,"            iZeroOffsetParseText = zeroOffsetParseText;
",4,0,0,0,0,0,0,0,0,5,43,5,0.01639,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2057,"            iShowSeparators = showSeparators;
",4,0,0,0,0,0,0,0,0,5,33,5,0.01639,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2058,"            if (minFields <= 0 || maxFields < minFields) {
",6,3,0,1,3,0,0,0,0,9,46,5,0.01639,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2061,"            if (minFields > 4) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.01639,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2065,"            iMinFields = minFields;
",4,0,0,0,0,0,0,0,0,5,23,5,0.01639,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2066,"            iMaxFields = maxFields;
",4,0,0,0,0,0,0,0,0,5,23,5,0.01639,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2067,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01639,0
defect4j,time,org/joda/time/DateTimeUtils,25,164,"        if (instant == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.01587,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1649,"        if (sme == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.01579,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1650,"            sme = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.01579,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1655,"        return sme;
",2,0,0,0,0,1,0,0,0,2,11,4,0.01579,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1639,"        if (mhe == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.01571,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1640,"            mhe = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.01571,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1645,"        return mhe;
",2,0,0,0,0,1,0,0,0,2,11,4,0.01571,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,188,"                if (isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,4,23,9,0.01568,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1630,"        if (hde == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.01565,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1631,"            hde = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.01565,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1635,"        return hde;
",2,0,0,0,0,1,0,0,0,2,11,4,0.01565,0
defect4j,time,org/joda/time/DateTimeUtils,25,149,"        return instant.getMillis();
",0,0,0,1,2,1,4,0,0,4,27,5,0.01552,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,647,"        return appendDecimal(DateTimeFieldType.secondOfMinute(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,71,5,0.01503,0
defect4j,time,org/joda/time/DateTimeUtils,25,146,"        if (instant == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.01480,0
defect4j,time,org/joda/time/format/FormatUtils,25,50,"        if (value < 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.01459,0
defect4j,time,org/joda/time/format/FormatUtils,25,62,"        if (value < 10) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.01459,0
defect4j,time,org/joda/time/format/FormatUtils,25,92,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01459,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1572,"        if (dme == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.01404,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1573,"            dme = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.01404,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1578,"        return dme;
",2,0,0,0,0,1,0,0,0,2,11,4,0.01404,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1562,"        if (mye == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.01393,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1563,"            mye = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.01393,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1568,"        return mye;
",2,0,0,0,0,1,0,0,0,2,11,4,0.01393,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,667,"        return appendDecimal(DateTimeFieldType.minuteOfHour(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,69,5,0.01391,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,687,"        return appendDecimal(DateTimeFieldType.hourOfDay(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,66,5,0.01360,0
defect4j,time,org/joda/time/DateTimeFieldType,25,505,"                    return chronology.secondOfMinute();
",0,0,0,1,2,1,4,0,0,4,35,7,0.01357,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1553,"        if (ye == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.01353,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1554,"            ye = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.01353,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1558,"        return ye;
",2,0,0,0,0,1,0,0,0,2,10,4,0.01353,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,915,"        chrono = DateTimeUtils.getChronology(chrono);
",2,0,0,1,2,0,6,0,0,9,45,4,0.01325,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,916,"        if (iChrono != null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.01325,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,919,"        if (iZone != null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.01325,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,922,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.01325,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,779,"        return appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,68,5,0.01322,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,737,"        return appendDecimal(DateTimeFieldType.dayOfMonth(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,67,5,0.01280,0
defect4j,time,org/joda/time/DateTimeFieldType,25,479,"                    return chronology.dayOfMonth();
",0,0,0,1,2,1,4,0,0,4,31,7,0.01273,0
defect4j,time,org/joda/time/DateTimeZone,25,900,"        return offsetAdjusted;
",2,0,0,0,0,1,0,0,0,2,22,4,0.01261,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,140,"            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];
",2,1,1,1,2,1,0,0,0,5,50,7,0.01252,0
defect4j,time,org/joda/time/DateTimeZone,25,881,"        final int offsetLocal = getOffset(instantLocal);
",2,0,0,1,2,1,4,0,0,7,48,4,0.01248,0
defect4j,time,org/joda/time/DateTimeZone,25,883,"        final long instantAdjusted = instantLocal - offsetLocal;
",6,1,0,0,0,1,0,0,0,8,56,4,0.01248,0
defect4j,time,org/joda/time/DateTimeZone,25,884,"        final int offsetAdjusted = getOffset(instantAdjusted);
",2,0,0,1,2,1,4,0,0,7,54,4,0.01248,0
defect4j,time,org/joda/time/DateTimeZone,25,886,"        if (offsetLocal != offsetAdjusted) {
",4,1,0,1,3,0,0,0,0,5,36,4,0.01248,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,791,"        return appendSignedDecimal(DateTimeFieldType.year(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,75,5,0.01241,0
defect4j,time,org/joda/time/DateTimeFieldType,25,501,"                    return chronology.minuteOfHour();
",0,0,0,1,2,1,4,0,0,4,33,7,0.01224,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,121,"            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];
",2,1,1,1,2,1,0,0,0,5,43,7,0.01213,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,448,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.01210,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,451,"        if (maxDigits < minDigits) {
",4,1,0,1,3,0,0,0,0,5,28,4,0.01210,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,454,"        if (minDigits < 0 || maxDigits <= 0) {
",4,3,0,1,3,0,0,0,0,7,38,4,0.01210,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,457,"        if (minDigits <= 1) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.01210,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,460,"            return append0(new PaddedNumber(fieldType, maxDigits, true, minDigits));
",6,0,0,2,4,1,2,2,0,11,72,7,0.01210,0
defect4j,time,org/joda/time/DateTimeFieldType,25,477,"                    return chronology.monthOfYear();
",0,0,0,1,2,1,4,0,0,4,32,7,0.01205,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2614,"                        addArrayToList(printerList, ((Composite)element).iPrinters);
",4,0,0,3,6,0,4,2,0,10,60,12,0.01189,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2623,"                        addArrayToList(parserList, ((Composite)element).iParsers);
",4,0,0,3,6,0,4,2,0,10,58,12,0.01189,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2632,"            if (array != null) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.01189,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2633,"                for (int i=0; i<array.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,7,0.01189,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2634,"                    list.add(array[i]);
",0,0,1,2,4,0,4,0,0,8,19,10,0.01189,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2637,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01189,0
defect4j,time,org/joda/time/DateTimeFieldType,25,473,"                    return chronology.year();
",0,0,0,1,2,1,4,0,0,4,25,7,0.01189,0
defect4j,time,org/joda/time/DateTimeFieldType,25,497,"                    return chronology.hourOfDay();
",0,0,0,1,2,1,4,0,0,4,30,7,0.01181,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,551,"            } else if (iMode == 's') {
",2,1,0,1,4,0,0,0,0,4,26,6,0.01170,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,709,"                instant = chrono.dayOfMonth().set(instant, 1);
",2,0,0,2,4,0,8,0,0,11,46,7,0.01170,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,710,"                instant = chrono.monthOfYear().add(instant, 1);
",2,0,0,2,4,0,8,0,0,11,47,7,0.01170,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,711,"                instant = chrono.dayOfMonth().add(instant, iDayOfMonth);
",2,0,0,2,4,0,10,0,0,13,56,7,0.01170,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,725,"                    if (daysToAdd > 0) {
",2,1,0,1,3,0,0,0,0,3,20,9,0.01170,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,726,"                        daysToAdd -= 7;
",2,0,0,0,0,0,0,0,0,3,15,11,0.01170,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,209,"        if (formatter == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.01163,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,212,"        return append0(formatter.getPrinter(), formatter.getParser());
",0,0,0,3,6,1,10,0,0,10,62,5,0.01163,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,171,"        return iParser;
",2,0,0,0,0,1,0,0,0,2,15,4,0.01158,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,345,"        iFormatter = null;
",2,0,0,0,0,0,0,0,0,3,18,4,0.01149,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,346,"        iElementPairs.add(printer);
",0,0,0,1,2,0,6,0,0,6,27,5,0.01149,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,347,"        iElementPairs.add(parser);
",0,0,0,1,2,0,6,0,0,6,26,5,0.01149,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,348,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.01149,0
defect4j,time,org/joda/time/format/FormatUtils,25,31,"    private static final double LOG_10 = Math.log(10);
",2,0,0,1,2,3,4,0,0,9,50,2,0.01141,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,153,"        return iPrinter;
",2,0,0,0,0,1,0,0,0,2,16,4,0.01136,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1112,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.01110,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1102,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.01107,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1075,"                Object printer = iElementPairs.get(0);
",2,0,0,1,2,0,4,2,0,8,38,8,0.01104,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1076,"                Object parser = iElementPairs.get(1);
",2,0,0,1,2,0,4,2,0,8,37,8,0.01104,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1078,"                if (printer != null) {
",2,1,0,1,3,0,0,0,0,3,22,8,0.01104,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1079,"                    if (printer == parser || parser == null) {
",6,3,0,1,3,0,0,0,0,9,42,10,0.01104,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1080,"                        f = printer;
",4,0,0,0,0,0,0,0,0,5,12,12,0.01104,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1543,"            return iTailZone.getOffset(instant);
",0,0,0,1,2,1,6,0,0,6,36,6,0.01098,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1187,"            return iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();
",2,1,0,2,4,1,6,0,0,9,73,5,0.01098,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1304,"            int standardOffset = iStandardOffset;
",4,0,0,0,0,0,0,0,0,4,37,6,0.01092,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1305,"            Recurrence startRecurrence = iStartRecurrence;
",4,0,0,0,0,0,0,2,0,6,46,5,0.01092,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1306,"            Recurrence endRecurrence = iEndRecurrence;
",4,0,0,0,0,0,0,2,0,6,42,5,0.01092,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1311,"                start = startRecurrence.next
",2,0,0,0,0,0,4,0,0,7,28,7,0.01092,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1319,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01092,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1322,"                end = endRecurrence.next
",2,0,0,0,0,0,4,0,0,7,24,7,0.01092,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1330,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01092,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1332,"            return (start > end) ? startRecurrence : endRecurrence;
",8,1,0,1,2,1,0,0,0,9,55,6,0.01092,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,575,"                    next = chrono.year().add(next, 1);
",2,0,0,2,4,0,8,0,0,11,34,9,0.01087,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,576,"                    next = chrono.monthOfYear().set(next, iMonthOfYear);
",2,0,0,2,4,0,10,0,0,13,52,9,0.01087,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,577,"                    next = setDayOfMonthNext(chrono, next);
",2,0,0,1,2,0,6,0,0,9,39,9,0.01087,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,578,"                    next = setDayOfWeek(chrono, next);
",2,0,0,1,2,0,6,0,0,9,34,9,0.01087,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,114,"            yearToUse = thisYear + (monthToUse / iMax);
",8,2,0,1,2,0,0,0,0,11,43,6,0.01084,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,115,"            monthToUse = (monthToUse % iMax) + 1;
",6,2,0,1,2,0,0,0,0,9,37,6,0.01084,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,98,"        long timePart = iChronology.getMillisOfDay(instant);
",2,0,0,1,2,0,6,0,0,8,52,5,0.01078,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,103,"        int thisYear = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,44,5,0.01078,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,104,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);
",2,0,0,1,2,0,8,0,0,10,62,5,0.01078,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,112,"        int monthToUse = thisMonth - 1 + months;
",6,2,0,0,0,0,0,0,0,8,40,5,0.01078,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,113,"        if (monthToUse >= 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.01078,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,136,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);
",2,0,0,1,2,0,10,0,0,12,71,5,0.01078,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,137,"        int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);
",2,0,0,1,2,0,8,0,0,10,67,5,0.01078,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,138,"        if (dayToUse > maxDay) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.01078,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,144,"        long datePart =
",2,0,0,0,0,0,0,0,0,2,15,5,0.01078,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,146,"        return datePart + timePart;
",4,1,0,0,0,1,0,0,0,5,27,4,0.01078,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,92,"        if (months == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.01073,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1579,"            long end = transitions[transitions.length - 1];
",6,1,1,1,2,0,0,0,0,9,47,6,0.01063,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1580,"            if (instant < end) {
",4,1,0,1,3,0,0,0,0,5,20,5,0.01063,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1583,"            return iTailZone.nextTransition(instant);
",0,0,0,1,2,1,6,0,0,6,41,6,0.01063,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1199,"            int standardOffset = iStandardOffset;
",4,0,0,0,0,0,0,0,0,4,37,6,0.01063,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1200,"            Recurrence startRecurrence = iStartRecurrence;
",4,0,0,0,0,0,0,2,0,6,46,5,0.01063,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1201,"            Recurrence endRecurrence = iEndRecurrence;
",4,0,0,0,0,0,0,2,0,6,42,5,0.01063,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1206,"                start = startRecurrence.next
",2,0,0,0,0,0,4,0,0,7,28,7,0.01063,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1208,"                if (instant > 0 && start < 0) {
",4,3,0,1,3,0,0,0,0,7,31,7,0.01063,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1218,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01063,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1221,"                end = endRecurrence.next
",2,0,0,0,0,0,4,0,0,7,24,7,0.01063,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1223,"                if (instant > 0 && end < 0) {
",4,3,0,1,3,0,0,0,0,7,29,7,0.01063,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1233,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01063,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1235,"            return (start > end) ? end : start;
",8,1,0,1,2,1,0,0,0,9,35,6,0.01063,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,573,"                next = setDayOfWeek(chrono, next);
",2,0,0,1,2,0,6,0,0,9,34,7,0.01061,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,574,"                if (next <= instant) {
",4,1,0,1,3,0,0,0,0,5,22,7,0.01061,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,717,"            int dayOfWeek = chrono.dayOfWeek().get(instant);
",2,0,0,2,4,0,8,0,0,10,48,6,0.01061,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,718,"            int daysToAdd = iDayOfWeek - dayOfWeek;
",6,1,0,0,0,0,0,0,0,7,39,6,0.01061,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,719,"            if (daysToAdd != 0) {
",2,1,0,1,3,0,0,0,0,3,21,5,0.01061,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,720,"                if (iAdvance) {
",2,0,0,1,3,0,0,0,0,2,15,7,0.01061,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,729,"                instant = chrono.dayOfWeek().add(instant, daysToAdd);
",2,0,0,2,4,0,10,0,0,13,53,7,0.01061,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,731,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,5,0.01061,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,549,"            if (iMode == 'w') {
",2,1,0,1,3,0,0,0,0,4,19,5,0.01060,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,558,"            instant += offset;
",4,0,0,0,0,0,0,0,0,5,18,5,0.01060,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,560,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,0.01060,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,561,"            long next = chrono.monthOfYear().set(instant, iMonthOfYear);
",2,0,0,2,4,0,10,0,0,12,60,6,0.01060,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,563,"            next = chrono.millisOfDay().set(next, 0);
",2,0,0,2,4,0,8,0,0,11,41,5,0.01060,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,564,"            next = chrono.millisOfDay().add(next, iMillisOfDay);
",2,0,0,2,4,0,10,0,0,13,52,5,0.01060,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,565,"            next = setDayOfMonthNext(chrono, next);
",2,0,0,1,2,0,6,0,0,9,39,5,0.01060,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,567,"            if (iDayOfWeek == 0) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.01060,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,583,"            return next - offset;
",4,1,0,0,0,1,0,0,0,5,21,5,0.01060,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,672,"                next = setDayOfMonth(chrono, next);
",2,0,0,1,2,0,6,0,0,9,35,7,0.01060,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,682,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01060,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,683,"            return next;
",2,0,0,0,0,1,0,0,0,2,12,5,0.01060,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,706,"            if (iDayOfMonth >= 0) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.01060,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,713,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,5,0.01060,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,761,"            return iOfYear.next(instant, standardOffset, saveMillis);
",0,0,0,1,2,1,10,0,0,10,57,6,0.01060,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,776,"            return iSaveMillis;
",2,0,0,0,0,1,0,0,0,2,19,5,0.01060,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,408,"            return append0(new PaddedNumber(fieldType, maxDigits, false, minDigits));
",6,0,0,2,4,1,2,2,0,11,73,7,0.01031,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,25,61,"        int thisYear = get(instant);
",2,0,0,1,2,0,4,0,0,6,28,5,0.01030,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,25,62,"        int newYear = FieldUtils.safeAdd(thisYear, years);
",2,0,0,1,2,0,8,0,0,10,50,5,0.01030,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,25,63,"        return set(instant, newYear);
",0,0,0,1,2,1,6,0,0,6,29,5,0.01030,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,396,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.01027,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,399,"        if (maxDigits < minDigits) {
",4,1,0,1,3,0,0,0,0,5,28,4,0.01027,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,402,"        if (minDigits < 0 || maxDigits <= 0) {
",4,3,0,1,3,0,0,0,0,7,38,4,0.01027,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,405,"        if (minDigits <= 1) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.01027,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,253,"        return getDurationField().add(instant, value);
",0,0,0,2,4,1,8,0,0,8,46,5,0.01026,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,25,58,"        if (years == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.01024,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,133,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,
",0,0,0,0,1,1,10,0,0,10,60,7,0.01014,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,180,"            if (isLeapYear(thisYear)) {
",0,0,0,2,5,0,4,0,0,4,27,7,0.01003,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1145,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.01002,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1169,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.01002,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1259,"            return iMaxParsedDigits;
",2,0,0,0,0,1,0,0,0,2,24,5,0.00998,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,535,"            daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;
",8,1,0,0,0,0,0,0,0,10,63,6,0.00996,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,544,"        return 1 + (int) ((daysSince19700101 + 3) % 7);
",2,3,0,3,6,1,0,0,0,5,47,4,0.00996,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,359,"        return append0(new CharacterLiteral(c));
",2,0,0,2,4,1,2,2,0,6,40,5,0.00994,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1140,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00994,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1141,"            iValue = value;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00994,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1142,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00994,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2476,"                int size = printerList.size();
",2,0,0,1,2,0,4,0,0,6,30,8,0.00993,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2477,"                iPrinters = new DateTimePrinter[size];
",2,0,1,1,2,0,0,2,0,7,38,7,0.00993,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2478,"                int printEst = 0;
",2,0,0,0,0,0,0,0,0,2,17,8,0.00993,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2479,"                for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,7,0.00993,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2480,"                    DateTimePrinter printer = (DateTimePrinter) printerList.get(i);
",2,0,0,2,4,0,6,4,0,12,63,9,0.00993,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2481,"                    printEst += printer.estimatePrintedLength();
",2,0,0,1,2,0,4,0,0,7,44,9,0.00993,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2482,"                    iPrinters[i] = printer;
",2,0,1,1,2,0,0,0,0,7,23,9,0.00993,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2484,"                iPrintedLengthEstimate = printEst;
",4,0,0,0,0,0,0,0,0,5,34,7,0.00993,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2491,"                int size = parserList.size();
",2,0,0,1,2,0,4,0,0,6,29,8,0.00993,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2492,"                iParsers = new DateTimeParser[size];
",2,0,1,1,2,0,0,2,0,7,36,7,0.00993,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2493,"                int parseEst = 0;
",2,0,0,0,0,0,0,0,0,2,17,8,0.00993,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2494,"                for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,7,0.00993,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2495,"                    DateTimeParser parser = (DateTimeParser) parserList.get(i);
",2,0,0,2,4,0,6,4,0,12,59,9,0.00993,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2496,"                    parseEst += parser.estimateParsedLength();
",2,0,0,1,2,0,4,0,0,7,42,9,0.00993,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2497,"                    iParsers[i] = parser;
",2,0,1,1,2,0,0,0,0,7,21,9,0.00993,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2499,"                iParsedLengthEstimate = parseEst;
",4,0,0,0,0,0,0,0,0,5,33,7,0.00993,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2611,"                Object element = elementPairs.get(i);
",2,0,0,1,2,0,6,2,0,10,37,7,0.00993,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2612,"                if (element instanceof DateTimePrinter) {
",2,0,0,1,3,0,0,2,0,4,41,8,0.00993,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2613,"                    if (element instanceof Composite) {
",2,0,0,1,3,0,0,2,0,4,35,10,0.00993,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2616,"                        printerList.add(element);
",0,0,0,1,2,0,6,0,0,6,25,12,0.00993,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2620,"                element = elementPairs.get(i + 1);
",4,1,0,1,2,0,4,0,0,10,34,7,0.00993,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2621,"                if (element instanceof DateTimeParser) {
",2,0,0,1,3,0,0,2,0,4,40,8,0.00993,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2622,"                    if (element instanceof Composite) {
",2,0,0,1,3,0,0,2,0,4,35,10,0.00993,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2625,"                        parserList.add(element);
",0,0,0,1,2,0,6,0,0,6,24,12,0.00993,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1401,"            return iMaxParsedDigits;
",2,0,0,0,0,1,0,0,0,2,24,5,0.00991,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1396,"            super(fieldType, maxParsedDigits, signed);
",6,0,0,1,2,0,0,0,0,6,42,5,0.00990,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1397,"            iMinPrintedDigits = minPrintedDigits;
",4,0,0,0,0,0,0,0,0,5,37,5,0.00990,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1398,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00990,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1252,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00989,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1253,"            iFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,23,5,0.00989,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1254,"            iMaxParsedDigits = maxParsedDigits;
",4,0,0,0,0,0,0,0,0,5,35,5,0.00989,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1255,"            iSigned = signed;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00989,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1256,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00989,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1100,"                return ((Composite)f).isPrinter();
",2,0,0,3,6,1,2,2,0,6,34,9,0.00987,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1110,"                return ((Composite)f).isParser();
",2,0,0,3,6,1,2,2,0,6,33,9,0.00987,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2597,"            return iPrinters != null;
",2,1,0,0,0,1,0,0,0,3,25,5,0.00987,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2601,"            return iParsers != null;
",2,1,0,0,0,1,0,0,0,3,24,5,0.00987,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1088,"                f = new Composite(iElementPairs);
",4,0,0,1,2,0,0,2,0,7,33,8,0.00985,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2465,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00985,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2467,"            List<Object> printerList = new ArrayList<Object>();
",2,0,0,1,2,0,0,8,0,10,51,5,0.00985,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2468,"            List<Object> parserList = new ArrayList<Object>();
",2,0,0,1,2,0,0,8,0,10,50,5,0.00985,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2470,"            decompose(elementPairs, printerList, parserList);
",0,0,0,1,2,0,8,0,0,8,49,6,0.00985,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2472,"            if (printerList.size() <= 0) {
",0,1,0,2,5,0,4,0,0,5,30,5,0.00985,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2487,"            if (parserList.size() <= 0) {
",0,1,0,2,5,0,4,0,0,5,29,5,0.00985,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2501,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00985,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2609,"            int size = elementPairs.size();
",2,0,0,1,2,0,4,0,0,6,31,6,0.00985,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2610,"            for (int i=0; i<size; i+=2) {
",8,1,0,1,3,0,0,0,0,10,29,5,0.00985,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2629,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00985,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,104,"        Object f = getFormatter();
",2,0,0,1,2,0,2,2,0,6,26,4,0.00953,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,105,"        DateTimePrinter printer = null;
",2,0,0,0,0,0,0,2,0,4,31,4,0.00953,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,106,"        if (isPrinter(f)) {
",0,0,0,2,5,0,4,0,0,4,19,5,0.00953,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,107,"            printer = (DateTimePrinter) f;
",4,0,0,1,2,0,0,2,0,7,30,6,0.00953,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,109,"        DateTimeParser parser = null;
",2,0,0,0,0,0,0,2,0,4,29,4,0.00953,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,110,"        if (isParser(f)) {
",0,0,0,2,5,0,4,0,0,4,18,5,0.00953,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,111,"            parser = (DateTimeParser) f;
",4,0,0,1,2,0,0,2,0,7,28,6,0.00953,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,113,"        if (printer != null || parser != null) {
",4,3,0,1,3,0,0,0,0,7,40,4,0.00953,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,114,"            return new DateTimeFormatter(printer, parser);
",4,0,0,1,2,1,0,2,0,6,46,7,0.00953,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,107,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00953,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,108,"        iPrinter = printer;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00953,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,109,"        iParser = parser;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00953,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,110,"        iLocale = null;
",2,0,0,0,0,0,0,0,0,3,15,4,0.00953,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,111,"        iOffsetParsed = false;
",2,0,0,0,0,0,0,0,0,4,22,4,0.00953,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,112,"        iChrono = null;
",2,0,0,0,0,0,0,0,0,3,15,4,0.00953,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,113,"        iZone = null;
",2,0,0,0,0,0,0,0,0,3,13,4,0.00953,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,114,"        iPivotYear = null;
",2,0,0,0,0,0,0,0,0,3,18,4,0.00953,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,115,"        iDefaultYear = 2000;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00953,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,116,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00953,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1098,"        if (f instanceof DateTimePrinter) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00948,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1099,"            if (f instanceof Composite) {
",2,0,0,1,3,0,0,2,0,4,29,7,0.00948,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1108,"        if (f instanceof DateTimeParser) {
",2,0,0,1,3,0,0,2,0,4,34,5,0.00948,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1109,"            if (f instanceof Composite) {
",2,0,0,1,3,0,0,2,0,4,29,7,0.00948,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,336,"        iFormatter = null;
",2,0,0,0,0,0,0,0,0,3,18,4,0.00947,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,338,"        iElementPairs.add(element);
",0,0,0,1,2,0,6,0,0,6,27,5,0.00947,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,339,"        iElementPairs.add(element);
",0,0,0,1,2,0,6,0,0,6,27,5,0.00947,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,340,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00947,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1071,"        Object f = iFormatter;
",4,0,0,0,0,0,0,2,0,6,22,4,0.00946,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1073,"        if (f == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00946,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1074,"            if (iElementPairs.size() == 2) {
",0,1,0,2,5,0,4,0,0,5,32,6,0.00946,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1087,"            if (f == null) {
",2,1,0,1,3,0,0,0,0,3,16,6,0.00946,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1091,"            iFormatter = f;
",4,0,0,0,0,0,0,0,0,5,15,6,0.00946,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1094,"        return f;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00946,0
defect4j,time,org/joda/time/field/MillisDurationField,25,117,"        return FieldUtils.safeAdd(instant, value);
",0,0,0,1,2,1,8,0,0,8,42,5,0.00946,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,83,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00945,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,84,"        iElementPairs = new ArrayList<Object>();
",2,0,0,1,2,0,0,4,0,7,40,4,0.00945,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,85,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00945,0
defect4j,time,org/joda/time/field/FieldUtils,25,70,"        return sum;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00925,0
defect4j,time,org/joda/time/field/FieldUtils,25,64,"        int sum = val1 + val2;
",6,1,0,0,0,0,0,0,0,7,22,5,0.00923,0
defect4j,time,org/joda/time/field/FieldUtils,25,66,"        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {
",8,5,0,3,7,0,0,0,0,13,45,4,0.00923,0
defect4j,time,org/joda/time/field/PreciseDurationField,25,104,"        long addition = value * iUnitMillis;  // safe
",6,1,0,0,0,0,0,0,0,7,45,5,0.00877,0
defect4j,time,org/joda/time/field/PreciseDurationField,25,105,"        return FieldUtils.safeAdd(instant, addition);
",0,0,0,1,2,1,8,0,0,8,45,5,0.00877,0
defect4j,time,org/joda/time/base/BaseDateTime,25,304,"        return iChronology;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00809,0
defect4j,time,org/joda/time/DateTimeFieldType,25,461,"            chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,5,0.00780,0
defect4j,time,org/joda/time/DateTimeFieldType,25,463,"            switch (iOrdinal) {
",2,0,0,1,3,0,0,0,0,2,19,5,0.00780,0
defect4j,time,org/joda/time/field/FieldUtils,25,82,"        long sum = val1 + val2;
",6,1,0,0,0,0,0,0,0,7,23,5,0.00773,0
defect4j,time,org/joda/time/field/FieldUtils,25,84,"        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {
",8,5,0,3,7,0,0,0,0,13,45,4,0.00773,0
defect4j,time,org/joda/time/field/FieldUtils,25,88,"        return sum;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00773,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1540,"            if (iTailZone == null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.00731,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1576,"            if (iTailZone == null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.00713,0
defect4j,time,org/joda/time/base/BaseDateTime,25,295,"        return iMillis;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00665,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,25,80,"            return (int) ((instant / getUnitMillis()) % iRange);
",4,2,0,4,8,1,2,0,0,8,52,8,0.00644,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,435,"        return getMonthOfYear(millis, getYear(millis));
",0,0,0,2,4,1,8,0,0,8,47,5,0.00611,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,72,"        return iChronology.getMonthOfYear(instant);
",0,0,0,1,2,1,6,0,0,6,43,5,0.00608,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,213,"                leapYears--;
",2,0,0,0,0,0,0,0,0,3,12,8,0.00590,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,131,"        if ((base = iBase) != null && (iBaseFlags & 5) == 5) {
",6,4,0,3,7,0,0,0,0,11,54,4,0.00559,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,25,56,"        return iChronology.getDayOfWeek(instant);
",0,0,0,1,2,1,6,0,0,6,41,5,0.00544,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,534,"        if (instant >= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00541,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,25,96,"        return iChronology.getDaysInMonthMaxForSet(instant, value);
",0,0,0,1,2,1,8,0,0,8,59,5,0.00535,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,134,"        return (value > 28 ? getDaysInMonthMax(instant) : 28);
",2,1,0,2,4,1,4,0,0,7,54,6,0.00535,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,458,"        int month = getMonthOfYear(millis, year);
",2,0,0,1,2,0,6,0,0,8,41,5,0.00534,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,459,"        return getDayOfMonth(millis, year, month);
",0,0,0,1,2,1,8,0,0,8,42,5,0.00534,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,292,"        FieldUtils.verifyValueBounds(this, month, MIN, iMax);
",0,0,0,1,2,0,10,0,0,10,53,5,0.00534,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,294,"        int thisYear = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,44,5,0.00534,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,296,"        int thisDom = iChronology.getDayOfMonth(instant, thisYear);
",2,0,0,1,2,0,8,0,0,10,59,5,0.00534,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,297,"        int maxDom = iChronology.getDaysInYearMonth(thisYear, month);
",2,0,0,1,2,0,8,0,0,10,61,5,0.00534,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,298,"        if (thisDom > maxDom) {
",4,1,0,1,3,0,0,0,0,5,23,4,0.00534,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,303,"        return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +
",0,1,0,1,2,1,10,0,0,11,68,4,0.00534,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,25,82,"        FieldUtils.verifyValueBounds
",0,0,0,0,0,0,4,0,0,4,28,5,0.00528,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,25,84,"        return iChronology.setYear(instant, year);
",0,0,0,1,2,1,8,0,0,8,42,5,0.00528,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,552,"            return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);
",6,1,0,2,4,1,0,0,0,7,58,8,0.00518,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,25,78,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(),
",0,0,0,1,3,0,8,0,0,8,60,5,0.00518,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,25,80,"        return instant + (value - get(instant)) * iUnitMillis;
",6,3,0,2,4,1,4,0,0,13,54,4,0.00518,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,25,111,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());
",0,0,0,3,6,0,10,0,0,10,80,5,0.00518,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,25,112,"        return instant + (value - get(instant)) * iUnitMillis;
",6,3,0,2,4,1,4,0,0,13,54,4,0.00518,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,167,"        if ((base = getBase()) != null) {
",2,1,0,3,7,0,2,0,0,7,33,4,0.00517,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,172,"        FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);
",0,0,0,2,4,0,10,0,0,10,78,5,0.00517,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,173,"        FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);
",0,0,0,2,4,0,10,0,0,10,84,5,0.00517,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,174,"        FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);
",0,0,0,2,4,0,10,0,0,10,88,5,0.00517,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,175,"        FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);
",0,0,0,2,4,0,10,0,0,10,89,5,0.00517,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,177,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth)
",0,0,0,1,2,1,8,0,0,8,59,9,0.00517,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,175,"        int thisYear = getYear(instant);
",2,0,0,1,2,0,4,0,0,6,32,5,0.00517,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,176,"        int dayOfYear = getDayOfYear(instant, thisYear);
",2,0,0,1,2,0,6,0,0,8,48,5,0.00517,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,177,"        int millisOfDay = getMillisOfDay(instant);
",2,0,0,1,2,0,4,0,0,6,42,5,0.00517,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,179,"        if (dayOfYear > (31 + 28)) { // after Feb 28
",2,2,0,2,5,0,0,0,0,4,44,4,0.00517,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,195,"        instant = getYearMonthDayMillis(year, 1, dayOfYear);
",2,0,0,1,2,0,6,0,0,9,52,4,0.00517,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,196,"        instant += millisOfDay;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00517,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,198,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00517,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,25,55,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00513,0
defect4j,time,org/joda/time/base/BaseDateTime,25,124,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00512,0
defect4j,time,org/joda/time/base/BaseDateTime,25,125,"        iChronology = checkChronology(chronology);
",2,0,0,1,2,0,4,0,0,7,42,4,0.00512,0
defect4j,time,org/joda/time/base/BaseDateTime,25,126,"        iMillis = checkInstant(instant, iChronology);
",2,0,0,1,2,0,6,0,0,9,45,4,0.00512,0
defect4j,time,org/joda/time/base/BaseDateTime,25,127,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00512,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,485,"        long yearStart = getYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,37,5,0.00511,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,486,"        return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;
",8,3,0,3,6,1,0,0,0,11,76,4,0.00511,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,168,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00510,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1533,"            i = ~i;
",4,0,0,0,0,0,0,0,0,6,7,5,0.00510,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1534,"            if (i < transitions.length) {
",6,1,0,1,3,0,0,0,0,7,29,5,0.00510,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,111,"        return getInfo(instant).getOffset(instant);
",0,0,0,2,4,1,8,0,0,8,43,5,0.00510,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,204,"            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {
",8,3,0,1,3,0,0,0,0,11,59,5,0.00510,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,205,"                if (iOffset == Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,35,7,0.00510,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,206,"                    iOffset = iZoneRef.getOffset(iPeriodStart);
",2,0,0,1,2,0,6,0,0,9,43,9,0.00510,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,208,"                return iOffset;
",2,0,0,0,0,1,0,0,0,2,15,7,0.00510,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1528,"            long[] transitions = iTransitions;
",4,0,0,1,2,0,0,0,0,4,34,6,0.00510,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1529,"            int i = Arrays.binarySearch(transitions, instant);
",2,0,0,1,2,0,8,0,0,10,50,6,0.00510,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1530,"            if (i >= 0) {
",2,1,0,1,3,0,0,0,0,3,13,5,0.00510,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1570,"            long[] transitions = iTransitions;
",4,0,0,1,2,0,0,0,0,4,34,6,0.00509,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1571,"            int i = Arrays.binarySearch(transitions, instant);
",2,0,0,1,2,0,8,0,0,10,50,6,0.00509,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1572,"            i = (i >= 0) ? (i + 1) : ~i;
",8,2,0,2,4,0,0,0,0,12,28,5,0.00509,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1573,"            if (i < transitions.length) {
",6,1,0,1,3,0,0,0,0,7,29,5,0.00509,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,148,"        int period = (int)(millis >> 32);
",4,1,0,2,4,0,0,0,0,5,33,5,0.00509,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,149,"        Info[] cache = iInfoCache;
",4,0,0,1,2,0,0,2,0,6,26,4,0.00509,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,150,"        int index = period & cInfoCacheMask;
",6,1,0,0,0,0,0,0,0,7,36,5,0.00509,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,151,"        Info info = cache[index];
",2,0,1,1,2,0,0,2,0,8,25,4,0.00509,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,152,"        if (info == null || (int)((info.iPeriodStart >> 32)) != period) {
",8,4,0,4,9,0,0,0,0,12,65,4,0.00509,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,153,"            info = createInfo(millis);
",2,0,0,1,2,0,4,0,0,7,26,6,0.00509,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,154,"            cache[index] = info;
",2,0,1,1,2,0,0,0,0,7,20,6,0.00509,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,156,"        return info;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00509,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,160,"        long periodStart = millis & (0xffffffffL << 32);
",4,2,0,1,2,0,0,0,0,6,48,5,0.00509,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,161,"        Info info = new Info(iZone, periodStart);
",6,0,0,1,2,0,0,4,0,10,41,4,0.00509,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,163,"        long end = periodStart | 0xffffffffL;
",4,1,0,0,0,0,0,0,0,5,37,5,0.00509,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,164,"        Info chain = info;
",4,0,0,0,0,0,0,2,0,6,18,4,0.00509,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,166,"            long next = iZone.nextTransition(periodStart);
",2,0,0,1,2,0,6,0,0,8,46,7,0.00509,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,167,"            if (next == periodStart || next > end) {
",8,3,0,1,3,0,0,0,0,11,40,6,0.00509,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,174,"        return info;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00509,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,188,"        Info(DateTimeZone zone, long periodStart) {
",6,0,0,1,3,0,0,2,0,8,43,3,0.00509,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,185,"        private int iOffset = Integer.MIN_VALUE;
",6,0,0,0,0,1,0,0,0,7,40,3,0.00509,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,186,"        private int iStandardOffset = Integer.MIN_VALUE;
",6,0,0,0,0,1,0,0,0,7,48,3,0.00509,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,189,"            iPeriodStart = periodStart;
",4,0,0,0,0,0,0,0,0,5,27,5,0.00509,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,190,"            iZoneRef = zone;
",4,0,0,0,0,0,0,0,0,5,16,5,0.00509,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,191,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00509,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,551,"        if (instant >= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00506,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,123,"            return MIN_DAYS_PER_MONTH_ARRAY[month - 1];
",2,1,1,1,2,1,0,0,0,5,43,7,0.00474,0
defect4j,time,org/joda/time/base/BaseDateTime,25,256,"        iMillis = checkInstant(instant, iChronology);
",2,0,0,1,2,0,6,0,0,9,45,4,0.00469,0
defect4j,time,org/joda/time/base/BaseDateTime,25,257,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00469,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,448,"        int year = getYear(millis);
",2,0,0,1,2,0,4,0,0,6,27,5,0.00468,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,449,"        int month = getMonthOfYear(millis, year);
",2,0,0,1,2,0,6,0,0,8,41,5,0.00468,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,450,"        return getDayOfMonth(millis, year, month);
",0,0,0,1,2,1,8,0,0,8,42,5,0.00468,0
defect4j,time,org/joda/time/base/BaseDateTime,25,252,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00468,0
defect4j,time,org/joda/time/base/BaseDateTime,25,253,"        iChronology = checkChronology(chronology);
",2,0,0,1,2,0,4,0,0,7,42,4,0.00468,0
defect4j,time,org/joda/time/base/BaseDateTime,25,254,"        long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
",2,0,0,0,1,0,10,0,0,12,75,5,0.00468,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,25,131,"        return iRange - 1;
",2,1,0,0,0,1,0,0,0,3,18,4,0.00467,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,25,47,"        return iChronology.getDayOfMonth(instant);
",0,0,0,1,2,1,6,0,0,6,42,5,0.00465,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,25,54,"        return iChronology.getYear(instant);
",0,0,0,1,2,1,6,0,0,6,36,5,0.00464,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,142,"            return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];
",2,1,1,1,2,1,0,0,0,5,50,7,0.00463,0
defect4j,time,org/joda/time/field/FieldUtils,25,219,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00463,0
defect4j,time,org/joda/time/field/FieldUtils,25,214,"        if ((value < lowerBound) || (value > upperBound)) {
",8,3,0,3,7,0,0,0,0,11,51,4,0.00462,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,468,"        long dateMillis = getYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,38,5,0.00462,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,469,"        dateMillis += getTotalMillisByYearMonth(year, month);
",2,0,0,1,2,0,6,0,0,9,53,4,0.00462,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,470,"        return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;
",8,3,0,3,6,1,0,0,0,11,76,4,0.00462,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,88,"        int i = (int)((millis - getYearMillis(year)) >> 10);
",4,2,0,4,8,0,4,0,0,10,52,5,0.00458,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,93,"        return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00458,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,107,"        if ((base = iBase) != null) {
",4,1,0,2,5,0,0,0,0,6,29,4,0.00456,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,108,"            return base.getZone();
",0,0,0,1,2,1,4,0,0,4,22,7,0.00456,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,25,79,"        if (instant >= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00455,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,605,"        FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));
",0,0,0,3,6,0,16,0,0,16,115,5,0.00454,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,606,"        return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);
",0,0,0,1,2,1,8,0,0,8,60,5,0.00454,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,233,"        return MILLIS_PER_YEAR / 2;
",2,1,0,0,0,1,0,0,0,3,27,4,0.00454,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,241,"        return (1970L * MILLIS_PER_YEAR) / 2;
",2,2,0,1,2,1,0,0,0,4,37,4,0.00454,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,603,"        FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());
",0,0,0,4,8,0,14,0,0,14,89,5,0.00454,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,604,"        FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));
",0,0,0,3,6,0,14,0,0,14,97,5,0.00454,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,682,"        return getMaxMonth();
",0,0,0,1,2,1,2,0,0,2,21,5,0.00454,0
defect4j,time,org/joda/time/field/FieldUtils,25,237,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00454,0
defect4j,time,org/joda/time/field/FieldUtils,25,232,"        if ((value < lowerBound) || (value > upperBound)) {
",8,3,0,3,7,0,0,0,0,11,51,4,0.00453,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,120,"        if (isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,4,23,5,0.00453,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,399,"        long unitMillis = getAverageMillisPerYearDividedByTwo();
",2,0,0,1,2,0,2,0,0,4,56,5,0.00451,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,400,"        long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();
",4,2,0,2,4,0,2,0,0,8,64,5,0.00451,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,401,"        if (i2 < 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00451,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,404,"        int year = (int) (i2 / unitMillis);
",6,1,0,2,4,0,0,0,0,7,35,5,0.00451,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,406,"        long yearStart = getYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,37,5,0.00451,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,407,"        long diff = instant - yearStart;
",6,1,0,0,0,0,0,0,0,7,32,5,0.00451,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,409,"        if (diff < 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00451,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,411,"        } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {
",6,2,0,1,4,0,0,0,0,8,61,5,0.00451,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,428,"        return year;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00451,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,77,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00451,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,139,"        if (isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,4,23,5,0.00447,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,221,"        return MIN_YEAR;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00446,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,202,"        int leapYears = year / 100;
",4,1,0,0,0,0,0,0,0,5,27,5,0.00443,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,203,"        if (year < 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00443,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,211,"            leapYears = (year >> 2) - leapYears + (leapYears >> 2);
",8,4,0,2,4,0,0,0,0,13,55,6,0.00443,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,212,"            if (isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,4,23,7,0.00443,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,217,"        return (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;
",10,4,0,2,4,1,0,0,0,14,90,4,0.00443,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,197,"        return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);
",6,8,0,5,10,1,0,0,0,14,69,4,0.00434,0
defect4j,time,org/joda/time/base/BaseDateTime,25,284,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00413,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,385,"        long millis = getYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,34,5,0.00407,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,386,"        millis += getTotalMillisByYearMonth(year, month);
",2,0,0,1,2,0,6,0,0,9,49,4,0.00407,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,387,"        return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;
",8,3,0,2,4,1,0,0,0,11,74,4,0.00407,0
defect4j,time,org/joda/time/base/BaseDateTime,25,270,"        return DateTimeUtils.getChronology(chronology);
",0,0,0,1,2,1,6,0,0,6,47,5,0.00404,0
defect4j,time,org/joda/time/base/AbstractDateTime,25,51,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00403,0
defect4j,time,org/joda/time/base/AbstractDateTime,25,52,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00403,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,360,"        return getYearInfo(year).iFirstDayMillis;
",2,0,0,1,2,1,4,0,0,6,41,5,0.00396,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,738,"        YearInfo info = iYearInfoCache[year & CACHE_MASK];
",6,1,1,1,2,0,0,2,0,11,50,4,0.00396,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,739,"        if (info == null || info.iYear != year) {
",8,3,0,1,3,0,0,0,0,11,41,4,0.00396,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,740,"            info = new YearInfo(year, calculateFirstDayOfYearMillis(year));
",4,0,0,2,4,0,4,2,0,11,63,6,0.00396,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,741,"            iYearInfoCache[year & CACHE_MASK] = info;
",6,1,1,1,2,0,0,0,0,10,41,6,0.00396,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,743,"        return info;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00396,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,770,"        YearInfo(int year, long firstDayMillis) {
",6,0,0,1,3,0,0,0,0,6,41,3,0.00396,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,771,"            iYear = year;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00396,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,772,"            iFirstDayMillis = firstDayMillis;
",4,0,0,0,0,0,0,0,0,5,33,5,0.00396,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,773,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00396,0
defect4j,time,org/joda/time/base/AbstractInstant,25,61,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00386,0
defect4j,time,org/joda/time/base/AbstractInstant,25,62,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00386,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,107,"                chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));
",2,0,0,2,4,0,8,2,0,13,76,8,0.00355,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,108,"                cCache.put(zone, chrono);
",0,0,0,1,2,0,8,0,0,8,25,9,0.00355,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,96,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00339,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,99,"        int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);
",4,2,0,2,4,0,6,0,0,12,66,5,0.00339,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,100,"        ISOChronology chrono = cFastCache[index];
",2,0,1,1,2,0,0,2,0,8,41,4,0.00339,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,101,"        if (chrono != null && chrono.getZone() == zone) {
",4,3,0,2,5,0,4,0,0,11,49,4,0.00339,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,104,"        synchronized (cCache) {
",2,0,0,1,3,0,0,0,0,2,23,4,0.00339,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,105,"            chrono = cCache.get(zone);
",2,0,0,1,2,0,6,0,0,9,26,6,0.00339,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,106,"            if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00339,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,110,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00339,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,111,"        cFastCache[index] = chrono;
",2,0,1,1,2,0,0,0,0,7,27,4,0.00339,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,112,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00339,0
defect4j,time,org/joda/time/DateTimeUtils,25,255,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00336,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,25,127,"        return UnsupportedDurationField.getInstance(DurationFieldType.eras());
",0,0,0,2,4,1,8,0,0,8,70,5,0.00321,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,25,131,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00321,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,131,"        return iZone.hashCode();
",0,0,0,1,2,1,4,0,0,4,24,5,0.00313,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,133,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00312,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,284,"            super(field.getType());
",0,0,0,2,4,0,4,0,0,4,23,6,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,285,"            if (!field.isSupported()) {
",0,0,0,2,5,0,4,0,0,5,27,5,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,288,"            iField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,289,"            iTimeField = useTimeArithmetic(field);
",2,0,0,1,2,0,4,0,0,7,38,5,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,290,"            iZone = zone;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,291,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,298,"            return iField.getUnitMillis();
",0,0,0,1,2,1,4,0,0,4,30,6,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,82,"        super(base, zone);
",4,0,0,1,2,0,0,0,0,4,18,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,83,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,56,"        if (base == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,59,"        base = base.withUTC();
",2,0,0,1,2,0,4,0,0,7,22,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,60,"        if (base == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,63,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,66,"        return new ZonedChronology(base, zone);
",4,0,0,1,2,1,0,2,0,6,39,5,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,72,"        return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;
",6,4,0,1,2,1,4,0,0,14,87,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,86,"        return (DateTimeZone)getParam();
",0,0,0,2,4,1,2,2,0,4,32,5,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,153,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();
",2,0,0,1,2,0,0,12,0,14,66,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,157,"        fields.eras = convertField(fields.eras, converted);
",8,0,0,1,2,0,4,0,0,13,51,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,158,"        fields.centuries = convertField(fields.centuries, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,159,"        fields.years = convertField(fields.years, converted);
",8,0,0,1,2,0,4,0,0,13,53,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,160,"        fields.months = convertField(fields.months, converted);
",8,0,0,1,2,0,4,0,0,13,55,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,161,"        fields.weekyears = convertField(fields.weekyears, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,162,"        fields.weeks = convertField(fields.weeks, converted);
",8,0,0,1,2,0,4,0,0,13,53,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,163,"        fields.days = convertField(fields.days, converted);
",8,0,0,1,2,0,4,0,0,13,51,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,165,"        fields.halfdays = convertField(fields.halfdays, converted);
",8,0,0,1,2,0,4,0,0,13,59,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,166,"        fields.hours = convertField(fields.hours, converted);
",8,0,0,1,2,0,4,0,0,13,53,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,167,"        fields.minutes = convertField(fields.minutes, converted);
",8,0,0,1,2,0,4,0,0,13,57,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,168,"        fields.seconds = convertField(fields.seconds, converted);
",8,0,0,1,2,0,4,0,0,13,57,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,169,"        fields.millis = convertField(fields.millis, converted);
",8,0,0,1,2,0,4,0,0,13,55,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,173,"        fields.year = convertField(fields.year, converted);
",8,0,0,1,2,0,4,0,0,13,51,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,174,"        fields.yearOfEra = convertField(fields.yearOfEra, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,175,"        fields.yearOfCentury = convertField(fields.yearOfCentury, converted);
",8,0,0,1,2,0,4,0,0,13,69,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,176,"        fields.centuryOfEra = convertField(fields.centuryOfEra, converted);
",8,0,0,1,2,0,4,0,0,13,67,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,177,"        fields.era = convertField(fields.era, converted);
",8,0,0,1,2,0,4,0,0,13,49,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,178,"        fields.dayOfWeek = convertField(fields.dayOfWeek, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,179,"        fields.dayOfMonth = convertField(fields.dayOfMonth, converted);
",8,0,0,1,2,0,4,0,0,13,63,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,180,"        fields.dayOfYear = convertField(fields.dayOfYear, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,181,"        fields.monthOfYear = convertField(fields.monthOfYear, converted);
",8,0,0,1,2,0,4,0,0,13,65,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,182,"        fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);
",8,0,0,1,2,0,4,0,0,13,71,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,183,"        fields.weekyear = convertField(fields.weekyear, converted);
",8,0,0,1,2,0,4,0,0,13,59,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,184,"        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);
",8,0,0,1,2,0,4,0,0,13,77,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,186,"        fields.millisOfSecond = convertField(fields.millisOfSecond, converted);
",8,0,0,1,2,0,4,0,0,13,71,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,187,"        fields.millisOfDay = convertField(fields.millisOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,65,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,188,"        fields.secondOfMinute = convertField(fields.secondOfMinute, converted);
",8,0,0,1,2,0,4,0,0,13,71,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,189,"        fields.secondOfDay = convertField(fields.secondOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,65,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,190,"        fields.minuteOfHour = convertField(fields.minuteOfHour, converted);
",8,0,0,1,2,0,4,0,0,13,67,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,191,"        fields.minuteOfDay = convertField(fields.minuteOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,65,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,192,"        fields.hourOfDay = convertField(fields.hourOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,193,"        fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);
",8,0,0,1,2,0,4,0,0,13,69,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,194,"        fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,71,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,195,"        fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);
",8,0,0,1,2,0,4,0,0,13,79,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,196,"        fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,67,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,197,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,200,"        if (field == null || !field.isSupported()) {
",2,2,0,2,5,0,4,0,0,9,44,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,201,"            return field;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,203,"        if (converted.containsKey(field)) {
",0,0,0,2,5,0,6,0,0,6,35,5,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,204,"            return (DurationField)converted.get(field);
",0,0,0,2,4,1,6,2,0,8,43,7,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,206,"        ZonedDurationField zonedField = new ZonedDurationField(field, getZone());
",4,0,0,2,4,0,2,4,0,10,73,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,207,"        converted.put(field, zonedField);
",0,0,0,1,2,0,8,0,0,8,33,5,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,208,"        return zonedField;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,212,"        if (field == null || !field.isSupported()) {
",2,2,0,2,5,0,4,0,0,9,44,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,215,"        if (converted.containsKey(field)) {
",0,0,0,2,5,0,6,0,0,6,35,5,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,218,"        ZonedDateTimeField zonedField =
",2,0,0,0,0,0,0,2,0,4,31,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,223,"        converted.put(field, zonedField);
",0,0,0,1,2,0,8,0,0,8,33,5,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,224,"        return zonedField;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,389,"            super(field.getType());
",0,0,0,2,4,0,4,0,0,4,23,6,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,390,"            if (!field.isSupported()) {
",0,0,0,2,5,0,4,0,0,5,27,5,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,393,"            iField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,394,"            iZone = zone;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,395,"            iDurationField = durationField;
",4,0,0,0,0,0,0,0,0,5,31,5,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,396,"            iTimeField = useTimeArithmetic(durationField);
",2,0,0,1,2,0,4,0,0,7,46,5,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,397,"            iRangeDurationField = rangeDurationField;
",4,0,0,0,0,0,0,0,0,5,41,5,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,398,"            iLeapDurationField = leapDurationField;
",4,0,0,0,0,0,0,0,0,5,39,5,0.00309,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,399,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00309,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,25,218,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00309,0
defect4j,time,org/joda/time/DateTimeZone,25,1200,"        return 57 + getID().hashCode();
",0,1,0,2,4,1,4,0,0,5,31,4,0.00309,0
defect4j,time,org/joda/time/field/ScaledDurationField,25,109,"        return getWrappedField().getUnitMillis() * iScalar;
",2,1,0,2,4,1,4,0,0,7,51,4,0.00309,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,315,"        return iParam;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00307,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,25,160,"            return iUnitMillis;
",2,0,0,0,0,1,0,0,0,2,19,5,0.00304,0
defect4j,time,org/joda/time/DateTimeUtils,25,252,"        if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00298,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,328,"        return iChronology.days();
",0,0,0,1,2,1,4,0,0,4,26,5,0.00295,0
defect4j,time,org/joda/time/field/PreciseDurationField,25,142,"        long millis = iUnitMillis;
",4,0,0,0,0,0,0,0,0,4,26,5,0.00295,0
defect4j,time,org/joda/time/field/PreciseDurationField,25,143,"        int hash = (int) (millis ^ (millis >>> 32));
",6,2,0,3,6,0,0,0,0,8,44,5,0.00295,0
defect4j,time,org/joda/time/field/PreciseDurationField,25,144,"        hash += getType().hashCode();
",2,0,0,2,4,0,4,0,0,7,29,4,0.00295,0
defect4j,time,org/joda/time/field/PreciseDurationField,25,145,"        return hash;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00295,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,25,101,"        return getWrappedField().getLeapDurationField();
",0,0,0,2,4,1,4,0,0,4,48,5,0.00295,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,25,111,"        return iChronology.days();
",0,0,0,1,2,1,4,0,0,4,26,5,0.00295,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,220,"        return iChronology.weeks();
",0,0,0,1,2,1,4,0,0,4,27,5,0.00295,0
defect4j,time,org/joda/time/field/ScaledDurationField,25,147,"        long scalar = iScalar;
",4,0,0,0,0,0,0,0,0,4,22,5,0.00295,0
defect4j,time,org/joda/time/field/ScaledDurationField,25,148,"        int hash = (int) (scalar ^ (scalar >>> 32));
",6,2,0,3,6,0,0,0,0,8,44,5,0.00295,0
defect4j,time,org/joda/time/field/ScaledDurationField,25,149,"        hash += getType().hashCode();
",2,0,0,2,4,0,4,0,0,7,29,4,0.00295,0
defect4j,time,org/joda/time/field/ScaledDurationField,25,150,"        hash += getWrappedField().hashCode();
",2,0,0,2,4,0,4,0,0,7,37,4,0.00295,0
defect4j,time,org/joda/time/field/ScaledDurationField,25,151,"        return hash;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00295,0
defect4j,time,org/joda/time/field/MillisDurationField,25,49,"        return DurationFieldType.millis();
",0,0,0,1,2,1,4,0,0,4,34,5,0.00295,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,726,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00295,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,25,94,"        return iChronology.weeks();
",0,0,0,1,2,1,4,0,0,4,27,5,0.00295,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,25,90,"        return iField.getRangeDurationField();
",0,0,0,1,2,1,4,0,0,4,38,5,0.00295,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,25,139,"        return iRangeField;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00295,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,25,56,"        return iChronology.years();
",0,0,0,1,2,1,4,0,0,4,27,5,0.00294,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,25,58,"        return iChronology.weekyears();
",0,0,0,1,2,1,4,0,0,4,31,5,0.00294,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,208,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00294,0
defect4j,time,org/joda/time/field/DecoratedDurationField,25,69,"        return iField;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00294,0
defect4j,time,org/joda/time/field/BaseDurationField,25,55,"        return iType;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00294,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,25,51,"        return iChronology.months();
",0,0,0,1,2,1,4,0,0,4,28,5,0.00293,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,309,"        return iChronology.years();
",0,0,0,1,2,1,4,0,0,4,27,5,0.00293,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,25,95,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00293,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,25,46,"        super(GregorianChronology.getInstanceUTC().year(), DateTimeFieldType.yearOfEra());
",0,0,0,4,8,0,10,0,0,10,82,5,0.00292,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,25,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00292,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,25,40,"    static final DateTimeField INSTANCE = new ISOYearOfEraDateTimeField();
",2,0,0,1,2,2,0,4,0,8,70,2,0.00292,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,25,87,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00292,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,25,91,"        return getWrappedField().getMaximumValue();
",0,0,0,2,4,1,4,0,0,4,43,5,0.00292,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,122,"        super(base, null);
",2,0,0,1,2,0,0,0,0,3,18,3,0.00292,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,123,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00292,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,63,"    private static final Map<DateTimeZone, ISOChronology> cCache = new HashMap<DateTimeZone, ISOChronology>();
",2,0,0,1,2,3,0,12,0,17,106,2,0.00292,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,65,"        cFastCache = new ISOChronology[FAST_CACHE_SIZE];
",2,0,1,1,2,0,0,2,0,7,48,4,0.00292,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,66,"        INSTANCE_UTC = new ISOChronology(GregorianChronology.getInstanceUTC());
",2,0,0,2,4,0,4,2,0,9,71,4,0.00292,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,67,"        cCache.put(DateTimeZone.UTC, INSTANCE_UTC);
",4,0,0,1,2,0,6,0,0,10,43,5,0.00292,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,68,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00292,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,169,"        if (getBase().getZone() == DateTimeZone.UTC) {
",4,1,0,3,7,0,4,0,0,9,46,4,0.00292,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,171,"            fields.centuryOfEra = new DividedDateTimeField(
",4,0,0,0,1,0,0,2,0,7,47,6,0.00292,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,173,"            fields.yearOfCentury = new RemainderDateTimeField(
",4,0,0,0,1,0,0,2,0,7,50,6,0.00292,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,175,"            fields.weekyearOfCentury = new RemainderDateTimeField(
",4,0,0,0,1,0,0,2,0,7,54,6,0.00292,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,178,"            fields.centuries = fields.centuryOfEra.getDurationField();
",8,0,0,1,2,0,2,0,0,11,58,6,0.00292,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,180,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00292,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,81,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00291,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,25,122,"        return iRangeField;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00291,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,146,"        return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,5,0.00291,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,143,"        if ((base = getBase()) != null) {
",2,1,0,3,7,0,2,0,0,7,33,4,0.00290,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,25,141,"        return iUnitField;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00289,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,45,"public final class GregorianChronology extends BasicGJChronology {
",2,0,0,0,1,2,0,2,0,6,66,1,0.00287,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,148,"        super(base, param, minDaysInFirstWeek);
",6,0,0,1,2,0,0,0,0,6,39,4,0.00285,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,149,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00285,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,68,"    private static final Map<DateTimeZone, GregorianChronology[]> cCache = new HashMap<DateTimeZone, GregorianChronology[]>();
",2,0,0,3,6,3,0,12,0,17,122,2,0.00285,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,71,"        INSTANCE_UTC = getInstance(DateTimeZone.UTC);
",6,0,0,1,2,0,2,0,0,9,45,4,0.00285,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,72,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00285,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,100,"        return getInstance(zone, 4);
",0,0,0,1,2,1,4,0,0,4,28,5,0.00285,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,111,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00285,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,115,"        synchronized (cCache) {
",2,0,0,1,3,0,0,0,0,2,23,4,0.00285,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,116,"            GregorianChronology[] chronos = cCache.get(zone);
",2,0,0,2,4,0,6,2,0,10,49,6,0.00285,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,117,"            if (chronos == null) {
",2,1,0,1,3,0,0,0,0,3,22,6,0.00285,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,118,"                chronos = new GregorianChronology[7];
",2,0,0,1,2,0,0,2,0,5,37,8,0.00285,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,119,"                cCache.put(zone, chronos);
",0,0,0,1,2,0,8,0,0,8,26,9,0.00285,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,122,"                chrono = chronos[minDaysInFirstWeek - 1];
",4,1,1,1,2,0,0,0,0,8,41,8,0.00285,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,126,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00285,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,127,"            if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00285,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,128,"                if (zone == DateTimeZone.UTC) {
",6,1,0,1,3,0,0,0,0,7,31,8,0.00285,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,129,"                    chrono = new GregorianChronology(null, null, minDaysInFirstWeek);
",4,0,0,1,2,0,0,2,0,8,65,10,0.00285,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,135,"                chronos[minDaysInFirstWeek - 1] = chrono;
",4,1,1,1,2,0,0,0,0,8,41,8,0.00285,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,137,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00285,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,138,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00285,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,191,"        if (getBase() == null) {
",0,1,0,2,5,0,2,0,0,4,24,4,0.00285,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,192,"            super.assemble(fields);
",4,0,0,1,2,0,0,0,0,4,23,7,0.00285,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,194,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00285,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,225,"        return MAX_YEAR;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00285,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,229,"        return MILLIS_PER_YEAR;
",2,0,0,0,0,1,0,0,0,2,23,4,0.00285,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,237,"        return MILLIS_PER_MONTH;
",2,0,0,0,0,1,0,0,0,2,24,4,0.00285,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,691,"        return 12;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00284,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,75,"        super(base, param, minDaysInFirstWeek);
",6,0,0,1,2,0,0,0,0,6,39,4,0.00284,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,76,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00284,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,42,"    private static final int[] MIN_DAYS_PER_MONTH_ARRAY = {
",2,0,0,1,3,3,0,0,0,5,55,2,0.00284,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,45,"    private static final int[] MAX_DAYS_PER_MONTH_ARRAY = {
",2,0,0,1,3,3,0,0,0,5,55,2,0.00284,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,53,"        MIN_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];
",2,0,0,1,2,0,0,0,0,3,47,4,0.00284,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,54,"        MAX_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];
",2,0,0,1,2,0,0,0,0,3,47,4,0.00284,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,56,"        long minSum = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.00284,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,57,"        long maxSum = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.00284,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,58,"        for (int i = 0; i < 11; i++) {
",6,1,0,1,3,0,0,0,0,8,30,4,0.00284,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,59,"            long millis = MIN_DAYS_PER_MONTH_ARRAY[i]
",2,0,1,1,2,0,0,0,0,6,41,7,0.00284,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,61,"            minSum += millis;
",4,0,0,0,0,0,0,0,0,5,17,6,0.00284,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,62,"            MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = minSum;
",4,1,1,1,2,0,0,0,0,8,48,6,0.00284,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,64,"            millis = MAX_DAYS_PER_MONTH_ARRAY[i]
",2,0,1,1,2,0,0,0,0,7,36,6,0.00284,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,66,"            maxSum += millis;
",4,0,0,0,0,0,0,0,0,5,17,6,0.00284,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,67,"            MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = maxSum;
",4,1,1,1,2,0,0,0,0,8,48,6,0.00284,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,69,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00284,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,321,"            fields.copyFieldsFrom(iBase);
",0,0,0,1,2,0,6,0,0,6,29,7,0.00281,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,372,"            flags = 
",2,0,0,0,0,0,0,0,0,3,7,6,0.00281,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,156,"        return iMillis;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,160,"        return iMillisOfSecond;
",2,0,0,0,0,1,0,0,0,2,23,4,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,164,"        return iMillisOfDay;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,168,"        return iSeconds;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,172,"        return iSecondOfMinute;
",2,0,0,0,0,1,0,0,0,2,23,4,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,176,"        return iSecondOfDay;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,180,"        return iMinutes;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,184,"        return iMinuteOfHour;
",2,0,0,0,0,1,0,0,0,2,21,4,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,188,"        return iMinuteOfDay;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,192,"        return iHours;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,196,"        return iHourOfDay;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,200,"        return iClockhourOfDay;
",2,0,0,0,0,1,0,0,0,2,23,4,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,204,"        return iHalfdays;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,208,"        return iHourOfHalfday;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,212,"        return iClockhourOfHalfday;
",2,0,0,0,0,1,0,0,0,2,27,4,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,216,"        return iHalfdayOfDay;
",2,0,0,0,0,1,0,0,0,2,21,4,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,220,"        return iDays;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,224,"        return iDayOfWeek;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,228,"        return iDayOfMonth;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,232,"        return iDayOfYear;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,236,"        return iWeeks;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,240,"        return iWeekOfWeekyear;
",2,0,0,0,0,1,0,0,0,2,23,4,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,244,"        return iWeekyears;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,248,"        return iWeekyear;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,252,"        return iWeekyearOfCentury;
",2,0,0,0,0,1,0,0,0,2,26,4,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,256,"        return iMonths;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,260,"        return iMonthOfYear;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,264,"        return iYears;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,272,"        return iYearOfEra;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,276,"        return iYearOfCentury;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,280,"        return iCenturies;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,284,"        return iCenturyOfEra;
",2,0,0,0,0,1,0,0,0,2,21,4,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,288,"        return iEras;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,292,"        return iEra;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,445,"                if (isSupported(f = chrono.millis())) {
",2,0,0,3,7,0,6,0,0,9,39,7,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,446,"                    millis = f;
",4,0,0,0,0,0,0,0,0,5,11,8,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,448,"                if (isSupported(f = chrono.seconds())) {
",2,0,0,3,7,0,6,0,0,9,40,7,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,449,"                    seconds = f;
",4,0,0,0,0,0,0,0,0,5,12,8,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,451,"                if (isSupported(f = chrono.minutes())) {
",2,0,0,3,7,0,6,0,0,9,40,7,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,452,"                    minutes = f;
",4,0,0,0,0,0,0,0,0,5,12,8,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,454,"                if (isSupported(f = chrono.hours())) {
",2,0,0,3,7,0,6,0,0,9,38,7,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,455,"                    hours = f;
",4,0,0,0,0,0,0,0,0,5,10,8,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,457,"                if (isSupported(f = chrono.halfdays())) {
",2,0,0,3,7,0,6,0,0,9,41,7,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,458,"                    halfdays = f;
",4,0,0,0,0,0,0,0,0,5,13,8,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,460,"                if (isSupported(f = chrono.days())) {
",2,0,0,3,7,0,6,0,0,9,37,7,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,461,"                    days = f;
",4,0,0,0,0,0,0,0,0,5,9,8,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,463,"                if (isSupported(f = chrono.weeks())) {
",2,0,0,3,7,0,6,0,0,9,38,7,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,464,"                    weeks = f;
",4,0,0,0,0,0,0,0,0,5,10,8,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,466,"                if (isSupported(f = chrono.weekyears())) {
",2,0,0,3,7,0,6,0,0,9,42,7,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,467,"                    weekyears = f;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,469,"                if (isSupported(f = chrono.months())) {
",2,0,0,3,7,0,6,0,0,9,39,7,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,470,"                    months = f;
",4,0,0,0,0,0,0,0,0,5,11,8,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,472,"                if (isSupported(f = chrono.years())) {
",2,0,0,3,7,0,6,0,0,9,38,7,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,473,"                    years = f;
",4,0,0,0,0,0,0,0,0,5,10,8,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,475,"                if (isSupported(f = chrono.centuries())) {
",2,0,0,3,7,0,6,0,0,9,42,7,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,476,"                    centuries = f;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,478,"                if (isSupported(f = chrono.eras())) {
",2,0,0,3,7,0,6,0,0,9,37,7,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,485,"                if (isSupported(f = chrono.millisOfSecond())) {
",2,0,0,3,7,0,6,0,0,9,47,7,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,486,"                    millisOfSecond = f;
",4,0,0,0,0,0,0,0,0,5,19,8,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,488,"                if (isSupported(f = chrono.millisOfDay())) {
",2,0,0,3,7,0,6,0,0,9,44,7,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,489,"                    millisOfDay = f;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,491,"                if (isSupported(f = chrono.secondOfMinute())) {
",2,0,0,3,7,0,6,0,0,9,47,7,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,492,"                    secondOfMinute = f;
",4,0,0,0,0,0,0,0,0,5,19,8,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,494,"                if (isSupported(f = chrono.secondOfDay())) {
",2,0,0,3,7,0,6,0,0,9,44,7,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,495,"                    secondOfDay = f;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,497,"                if (isSupported(f = chrono.minuteOfHour())) {
",2,0,0,3,7,0,6,0,0,9,45,7,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,498,"                    minuteOfHour = f;
",4,0,0,0,0,0,0,0,0,5,17,8,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,500,"                if (isSupported(f = chrono.minuteOfDay())) {
",2,0,0,3,7,0,6,0,0,9,44,7,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,501,"                    minuteOfDay = f;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,503,"                if (isSupported(f = chrono.hourOfDay())) {
",2,0,0,3,7,0,6,0,0,9,42,7,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,504,"                    hourOfDay = f;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,506,"                if (isSupported(f = chrono.clockhourOfDay())) {
",2,0,0,3,7,0,6,0,0,9,47,7,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,507,"                    clockhourOfDay = f;
",4,0,0,0,0,0,0,0,0,5,19,8,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,509,"                if (isSupported(f = chrono.hourOfHalfday())) {
",2,0,0,3,7,0,6,0,0,9,46,7,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,510,"                    hourOfHalfday = f;
",4,0,0,0,0,0,0,0,0,5,18,8,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,512,"                if (isSupported(f = chrono.clockhourOfHalfday())) {
",2,0,0,3,7,0,6,0,0,9,51,7,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,513,"                    clockhourOfHalfday = f;
",4,0,0,0,0,0,0,0,0,5,23,8,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,515,"                if (isSupported(f = chrono.halfdayOfDay())) {
",2,0,0,3,7,0,6,0,0,9,45,7,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,516,"                    halfdayOfDay = f;
",4,0,0,0,0,0,0,0,0,5,17,8,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,518,"                if (isSupported(f = chrono.dayOfWeek())) {
",2,0,0,3,7,0,6,0,0,9,42,7,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,519,"                    dayOfWeek = f;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,521,"                if (isSupported(f = chrono.dayOfMonth())) {
",2,0,0,3,7,0,6,0,0,9,43,7,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,522,"                    dayOfMonth = f;
",4,0,0,0,0,0,0,0,0,5,15,8,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,524,"                if (isSupported(f = chrono.dayOfYear())) {
",2,0,0,3,7,0,6,0,0,9,42,7,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,525,"                    dayOfYear = f;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,527,"                if (isSupported(f = chrono.weekOfWeekyear())) {
",2,0,0,3,7,0,6,0,0,9,47,7,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,528,"                    weekOfWeekyear = f;
",4,0,0,0,0,0,0,0,0,5,19,8,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,530,"                if (isSupported(f = chrono.weekyear())) {
",2,0,0,3,7,0,6,0,0,9,41,7,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,531,"                    weekyear = f;
",4,0,0,0,0,0,0,0,0,5,13,8,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,533,"                if (isSupported(f = chrono.weekyearOfCentury())) {
",2,0,0,3,7,0,6,0,0,9,50,7,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,534,"                    weekyearOfCentury = f;
",4,0,0,0,0,0,0,0,0,5,22,8,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,536,"                if (isSupported(f = chrono.monthOfYear())) {
",2,0,0,3,7,0,6,0,0,9,44,7,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,537,"                    monthOfYear = f;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,539,"                if (isSupported(f = chrono.year())) {
",2,0,0,3,7,0,6,0,0,9,37,7,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,540,"                    year = f;
",4,0,0,0,0,0,0,0,0,5,9,8,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,542,"                if (isSupported(f = chrono.yearOfEra())) {
",2,0,0,3,7,0,6,0,0,9,42,7,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,543,"                    yearOfEra = f;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,545,"                if (isSupported(f = chrono.yearOfCentury())) {
",2,0,0,3,7,0,6,0,0,9,46,7,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,546,"                    yearOfCentury = f;
",4,0,0,0,0,0,0,0,0,5,18,8,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,548,"                if (isSupported(f = chrono.centuryOfEra())) {
",2,0,0,3,7,0,6,0,0,9,45,7,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,549,"                    centuryOfEra = f;
",4,0,0,0,0,0,0,0,0,5,17,8,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,551,"                if (isSupported(f = chrono.era())) {
",2,0,0,3,7,0,6,0,0,9,36,7,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,552,"                    era = f;
",4,0,0,0,0,0,0,0,0,5,8,8,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,555,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,558,"            return field == null ? false : field.isSupported();
",2,1,0,1,2,1,4,0,0,8,51,6,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,562,"            return field == null ? false : field.isSupported();
",2,1,0,1,2,1,4,0,0,8,51,6,0.00280,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,25,92,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,268,"        return iYear;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00280,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,25,53,"            field = cCache.get(type);
",2,0,0,1,2,0,6,0,0,9,25,6,0.00280,0
defect4j,time,org/joda/time/DateTimeFieldType,25,163,"        return MILLIS_OF_SECOND_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,4,0.00280,0
defect4j,time,org/joda/time/DateTimeFieldType,25,172,"        return MILLIS_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,4,0.00280,0
defect4j,time,org/joda/time/DateTimeFieldType,25,208,"        return MINUTE_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,4,0.00280,0
defect4j,time,org/joda/time/DateTimeFieldType,25,217,"        return HOUR_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,4,0.00280,0
defect4j,time,org/joda/time/DateTimeFieldType,25,235,"        return HOUR_OF_HALFDAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,28,4,0.00280,0
defect4j,time,org/joda/time/DateTimeFieldType,25,244,"        return CLOCKHOUR_OF_HALFDAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,33,4,0.00280,0
defect4j,time,org/joda/time/DateTimeFieldType,25,253,"        return HALFDAY_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,27,4,0.00280,0
defect4j,time,org/joda/time/DateTimeFieldType,25,263,"        return DAY_OF_WEEK_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,4,0.00280,0
defect4j,time,org/joda/time/DateTimeFieldType,25,281,"        return DAY_OF_YEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,4,0.00280,0
defect4j,time,org/joda/time/DateTimeFieldType,25,290,"        return WEEK_OF_WEEKYEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,4,0.00280,0
defect4j,time,org/joda/time/DateTimeFieldType,25,299,"        return WEEKYEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,21,4,0.00280,0
defect4j,time,org/joda/time/DateTimeFieldType,25,308,"        return WEEKYEAR_OF_CENTURY_TYPE;
",2,0,0,0,0,1,0,0,0,2,32,4,0.00280,0
defect4j,time,org/joda/time/DateTimeFieldType,25,317,"        return MONTH_OF_YEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,4,0.00280,0
defect4j,time,org/joda/time/DateTimeFieldType,25,335,"        return YEAR_OF_ERA_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,4,0.00280,0
defect4j,time,org/joda/time/DateTimeFieldType,25,344,"        return YEAR_OF_CENTURY_TYPE;
",2,0,0,0,0,1,0,0,0,2,28,4,0.00280,0
defect4j,time,org/joda/time/DateTimeFieldType,25,353,"        return CENTURY_OF_ERA_TYPE;
",2,0,0,0,0,1,0,0,0,2,27,4,0.00280,0
defect4j,time,org/joda/time/DateTimeFieldType,25,362,"        return ERA_TYPE;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,25,41,"        super(DateTimeFieldType.dayOfMonth(), days);
",2,0,0,2,4,0,4,0,0,6,44,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,25,42,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,25,43,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,131,"        super(base, param);
",4,0,0,1,2,0,0,0,0,4,19,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,126,"    private transient final YearInfo[] iYearInfoCache = new YearInfo[CACHE_SIZE];
",2,0,1,2,4,3,0,4,0,11,77,2,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,133,"        if (minDaysInFirstWeek < 1 || minDaysInFirstWeek > 7) {
",4,3,0,1,3,0,0,0,0,7,55,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,138,"        iMinDaysInFirstWeek = minDaysInFirstWeek;
",4,0,0,0,0,0,0,0,0,5,41,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,139,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,76,"        cMillisField = MillisDurationField.INSTANCE;
",6,0,0,0,0,0,0,0,0,7,44,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,77,"        cSecondsField = new PreciseDurationField
",2,0,0,0,0,0,0,2,0,5,40,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,79,"        cMinutesField = new PreciseDurationField
",2,0,0,0,0,0,0,2,0,5,40,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,81,"        cHoursField = new PreciseDurationField
",2,0,0,0,0,0,0,2,0,5,38,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,83,"        cHalfdaysField = new PreciseDurationField
",2,0,0,0,0,0,0,2,0,5,41,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,85,"        cDaysField = new PreciseDurationField
",2,0,0,0,0,0,0,2,0,5,37,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,87,"        cWeeksField = new PreciseDurationField
",2,0,0,0,0,0,0,2,0,5,38,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,90,"        cMillisOfSecondField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,47,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,93,"        cMillisOfDayField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,44,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,96,"        cSecondOfMinuteField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,47,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,99,"        cSecondOfDayField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,44,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,102,"        cMinuteOfHourField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,45,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,105,"        cMinuteOfDayField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,44,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,108,"        cHourOfDayField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,42,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,111,"        cHourOfHalfdayField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,46,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,114,"        cClockhourOfDayField = new ZeroIsMaxDateTimeField
",2,0,0,0,0,0,0,2,0,5,49,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,117,"        cClockhourOfHalfdayField = new ZeroIsMaxDateTimeField
",2,0,0,0,0,0,0,2,0,5,53,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,120,"        cHalfdayOfDayField = new HalfdayField();
",2,0,0,1,2,0,0,2,0,5,40,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,121,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,241,"        fields.millis = cMillisField;
",6,0,0,0,0,0,0,0,0,7,29,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,242,"        fields.seconds = cSecondsField;
",6,0,0,0,0,0,0,0,0,7,31,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,243,"        fields.minutes = cMinutesField;
",6,0,0,0,0,0,0,0,0,7,31,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,244,"        fields.hours = cHoursField;
",6,0,0,0,0,0,0,0,0,7,27,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,245,"        fields.halfdays = cHalfdaysField;
",6,0,0,0,0,0,0,0,0,7,33,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,246,"        fields.days = cDaysField;
",6,0,0,0,0,0,0,0,0,7,25,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,247,"        fields.weeks = cWeeksField;
",6,0,0,0,0,0,0,0,0,7,27,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,249,"        fields.millisOfSecond = cMillisOfSecondField;
",6,0,0,0,0,0,0,0,0,7,45,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,250,"        fields.millisOfDay = cMillisOfDayField;
",6,0,0,0,0,0,0,0,0,7,39,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,251,"        fields.secondOfMinute = cSecondOfMinuteField;
",6,0,0,0,0,0,0,0,0,7,45,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,252,"        fields.secondOfDay = cSecondOfDayField;
",6,0,0,0,0,0,0,0,0,7,39,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,253,"        fields.minuteOfHour = cMinuteOfHourField;
",6,0,0,0,0,0,0,0,0,7,41,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,254,"        fields.minuteOfDay = cMinuteOfDayField;
",6,0,0,0,0,0,0,0,0,7,39,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,255,"        fields.hourOfDay = cHourOfDayField;
",6,0,0,0,0,0,0,0,0,7,35,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,256,"        fields.hourOfHalfday = cHourOfHalfdayField;
",6,0,0,0,0,0,0,0,0,7,43,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,257,"        fields.clockhourOfDay = cClockhourOfDayField;
",6,0,0,0,0,0,0,0,0,7,45,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,258,"        fields.clockhourOfHalfday = cClockhourOfHalfdayField;
",6,0,0,0,0,0,0,0,0,7,53,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,259,"        fields.halfdayOfDay = cHalfdayOfDayField;
",6,0,0,0,0,0,0,0,0,7,41,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,264,"        fields.year = new BasicYearDateTimeField(this);
",4,0,0,1,2,0,0,2,0,7,47,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,265,"        fields.yearOfEra = new GJYearOfEraDateTimeField(fields.year, this);
",8,0,0,1,2,0,0,2,0,11,67,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,268,"        DateTimeField field = new OffsetDateTimeField(
",2,0,0,0,1,0,0,4,0,6,46,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,270,"        fields.centuryOfEra = new DividedDateTimeField(
",4,0,0,0,1,0,0,2,0,7,47,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,273,"        field = new RemainderDateTimeField(
",2,0,0,0,1,0,0,2,0,5,35,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,275,"        fields.yearOfCentury = new OffsetDateTimeField(
",4,0,0,0,1,0,0,2,0,7,47,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,278,"        fields.era = new GJEraDateTimeField(this);
",4,0,0,1,2,0,0,2,0,7,42,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,279,"        fields.dayOfWeek = new GJDayOfWeekDateTimeField(this, fields.days);
",8,0,0,1,2,0,0,2,0,11,67,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,280,"        fields.dayOfMonth = new BasicDayOfMonthDateTimeField(this, fields.days);
",8,0,0,1,2,0,0,2,0,11,72,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,281,"        fields.dayOfYear = new BasicDayOfYearDateTimeField(this, fields.days);
",8,0,0,1,2,0,0,2,0,11,70,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,282,"        fields.monthOfYear = new GJMonthOfYearDateTimeField(this);
",4,0,0,1,2,0,0,2,0,7,58,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,283,"        fields.weekyear = new BasicWeekyearDateTimeField(this);
",4,0,0,1,2,0,0,2,0,7,55,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,284,"        fields.weekOfWeekyear = new BasicWeekOfWeekyearDateTimeField(this, fields.weeks);
",8,0,0,1,2,0,0,2,0,11,81,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,286,"        field = new RemainderDateTimeField(
",2,0,0,0,1,0,0,2,0,5,35,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,288,"        fields.weekyearOfCentury = new OffsetDateTimeField(
",4,0,0,0,1,0,0,2,0,7,51,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,294,"        fields.years = fields.year.getDurationField();
",8,0,0,1,2,0,2,0,0,11,46,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,295,"        fields.centuries = fields.centuryOfEra.getDurationField();
",8,0,0,1,2,0,2,0,0,11,58,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,296,"        fields.months = fields.monthOfYear.getDurationField();
",8,0,0,1,2,0,2,0,0,11,54,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,297,"        fields.weekyears = fields.weekyear.getDurationField();
",8,0,0,1,2,0,2,0,0,11,54,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,298,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,50,"abstract class BasicChronology extends AssembledChronology {
",2,0,0,0,1,1,0,2,0,5,60,1,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,99,"    protected AssembledChronology(Chronology base, Object param) {
",6,0,0,1,3,1,0,4,0,11,62,2,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,100,"        iBase = base;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,101,"        iParam = param;
",4,0,0,0,0,0,0,0,0,5,15,4,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,102,"        setFields();
",0,0,0,1,2,0,2,0,0,2,12,5,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,103,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,308,"        return iBase;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,319,"        Fields fields = new Fields();
",2,0,0,1,2,0,0,4,0,6,29,4,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,320,"        if (iBase != null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,323,"        assemble(fields);
",0,0,0,1,2,0,4,0,0,4,17,5,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,327,"            iMillis    = (f = fields.millis)    != null ? f : super.millis();
",12,1,0,2,4,0,0,0,0,15,65,5,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,328,"            iSeconds   = (f = fields.seconds)   != null ? f : super.seconds();
",12,1,0,2,4,0,0,0,0,15,66,5,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,329,"            iMinutes   = (f = fields.minutes)   != null ? f : super.minutes();
",12,1,0,2,4,0,0,0,0,15,66,5,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,330,"            iHours     = (f = fields.hours)     != null ? f : super.hours();
",12,1,0,2,4,0,0,0,0,15,64,5,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,331,"            iHalfdays  = (f = fields.halfdays)  != null ? f : super.halfdays();
",12,1,0,2,4,0,0,0,0,15,67,5,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,332,"            iDays      = (f = fields.days)      != null ? f : super.days();
",12,1,0,2,4,0,0,0,0,15,63,5,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,333,"            iWeeks     = (f = fields.weeks)     != null ? f : super.weeks();
",12,1,0,2,4,0,0,0,0,15,64,5,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,334,"            iWeekyears = (f = fields.weekyears) != null ? f : super.weekyears();
",12,1,0,2,4,0,0,0,0,15,68,5,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,335,"            iMonths    = (f = fields.months)    != null ? f : super.months();
",12,1,0,2,4,0,0,0,0,15,65,5,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,336,"            iYears     = (f = fields.years)     != null ? f : super.years();
",12,1,0,2,4,0,0,0,0,15,64,5,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,337,"            iCenturies = (f = fields.centuries) != null ? f : super.centuries();
",12,1,0,2,4,0,0,0,0,15,68,5,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,338,"            iEras      = (f = fields.eras)      != null ? f : super.eras();
",12,1,0,2,4,0,0,0,0,15,63,5,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,343,"            iMillisOfSecond     = (f = fields.millisOfSecond)     != null ? f : super.millisOfSecond();
",12,1,0,2,4,0,0,0,0,15,91,5,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,344,"            iMillisOfDay        = (f = fields.millisOfDay)        != null ? f : super.millisOfDay();
",12,1,0,2,4,0,0,0,0,15,88,5,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,345,"            iSecondOfMinute     = (f = fields.secondOfMinute)     != null ? f : super.secondOfMinute();
",12,1,0,2,4,0,0,0,0,15,91,5,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,346,"            iSecondOfDay        = (f = fields.secondOfDay)        != null ? f : super.secondOfDay();
",12,1,0,2,4,0,0,0,0,15,88,5,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,347,"            iMinuteOfHour       = (f = fields.minuteOfHour)       != null ? f : super.minuteOfHour();
",12,1,0,2,4,0,0,0,0,15,89,5,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,348,"            iMinuteOfDay        = (f = fields.minuteOfDay)        != null ? f : super.minuteOfDay();
",12,1,0,2,4,0,0,0,0,15,88,5,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,349,"            iHourOfDay          = (f = fields.hourOfDay)          != null ? f : super.hourOfDay();
",12,1,0,2,4,0,0,0,0,15,86,5,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,350,"            iClockhourOfDay     = (f = fields.clockhourOfDay)     != null ? f : super.clockhourOfDay();
",12,1,0,2,4,0,0,0,0,15,91,5,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,351,"            iHourOfHalfday      = (f = fields.hourOfHalfday)      != null ? f : super.hourOfHalfday();
",12,1,0,2,4,0,0,0,0,15,90,5,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,352,"            iClockhourOfHalfday = (f = fields.clockhourOfHalfday) != null ? f : super.clockhourOfHalfday();
",12,1,0,2,4,0,0,0,0,15,95,5,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,353,"            iHalfdayOfDay       = (f = fields.halfdayOfDay)       != null ? f : super.halfdayOfDay();
",12,1,0,2,4,0,0,0,0,15,89,5,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,354,"            iDayOfWeek          = (f = fields.dayOfWeek)          != null ? f : super.dayOfWeek();
",12,1,0,2,4,0,0,0,0,15,86,5,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,355,"            iDayOfMonth         = (f = fields.dayOfMonth)         != null ? f : super.dayOfMonth();
",12,1,0,2,4,0,0,0,0,15,87,5,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,356,"            iDayOfYear          = (f = fields.dayOfYear)          != null ? f : super.dayOfYear();
",12,1,0,2,4,0,0,0,0,15,86,5,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,357,"            iWeekOfWeekyear     = (f = fields.weekOfWeekyear)     != null ? f : super.weekOfWeekyear();
",12,1,0,2,4,0,0,0,0,15,91,5,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,358,"            iWeekyear           = (f = fields.weekyear)           != null ? f : super.weekyear();
",12,1,0,2,4,0,0,0,0,15,85,5,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,359,"            iWeekyearOfCentury  = (f = fields.weekyearOfCentury)  != null ? f : super.weekyearOfCentury();
",12,1,0,2,4,0,0,0,0,15,94,5,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,360,"            iMonthOfYear        = (f = fields.monthOfYear)        != null ? f : super.monthOfYear();
",12,1,0,2,4,0,0,0,0,15,88,5,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,361,"            iYear               = (f = fields.year)               != null ? f : super.year();
",12,1,0,2,4,0,0,0,0,15,81,5,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,362,"            iYearOfEra          = (f = fields.yearOfEra)          != null ? f : super.yearOfEra();
",12,1,0,2,4,0,0,0,0,15,86,5,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,363,"            iYearOfCentury      = (f = fields.yearOfCentury)      != null ? f : super.yearOfCentury();
",12,1,0,2,4,0,0,0,0,15,90,5,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,364,"            iCenturyOfEra       = (f = fields.centuryOfEra)       != null ? f : super.centuryOfEra();
",12,1,0,2,4,0,0,0,0,15,89,5,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,365,"            iEra                = (f = fields.era)                != null ? f : super.era();
",12,1,0,2,4,0,0,0,0,15,80,5,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,369,"        if (iBase == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,370,"            flags = 0;
",2,0,0,0,0,0,0,0,0,3,10,6,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,385,"        iBaseFlags = flags;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,386,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00280,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,660,"        return UnsupportedDurationField.getInstance(DurationFieldType.eras());
",0,0,0,2,4,1,8,0,0,8,70,5,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,436,"        Fields() {
",2,0,0,1,3,0,0,0,0,2,10,3,0.00280,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,437,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00280,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,25,41,"        super(DateTimeFieldType.dayOfYear(), days);
",2,0,0,2,4,0,4,0,0,6,43,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,25,42,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,25,43,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00280,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,25,37,"        super(chronology, 2);
",2,0,0,1,2,0,0,0,0,2,21,4,0.00280,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,25,38,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00280,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,51,"        super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth());
",0,0,0,3,6,0,8,0,0,8,78,5,0.00280,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,52,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,53,"        iMax = iChronology.getMaxMonth();
",2,0,0,1,2,0,4,0,0,7,33,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,54,"        iLeapMonth = leapMonth;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,55,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00280,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,25,55,"        super(type);
",2,0,0,1,2,0,0,0,0,2,12,4,0.00280,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,25,56,"        iUnitMillis = unitMillis;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00280,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,25,57,"        iDurationField = new LinkedDurationField(type.getDurationType());
",2,0,0,2,4,0,4,2,0,9,65,4,0.00280,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,25,58,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00280,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,25,137,"        return iDurationField;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00280,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,25,151,"        LinkedDurationField(DurationFieldType type) {
",4,0,0,1,3,0,0,2,0,6,45,3,0.00280,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,25,152,"            super(type);
",2,0,0,1,2,0,0,0,0,2,12,5,0.00280,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,25,153,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00280,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,25,42,"        super(DateTimeFieldType.weekOfWeekyear(), weeks);
",2,0,0,2,4,0,4,0,0,6,49,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,25,43,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,25,44,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00280,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,25,40,"        super(yearField, DateTimeFieldType.yearOfEra());
",2,0,0,2,4,0,4,0,0,6,48,4,0.00280,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,25,41,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00280,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,25,42,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00280,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,25,93,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00280,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,25,97,"        return getWrappedField().getMaximumValue();
",0,0,0,2,4,1,4,0,0,4,43,5,0.00280,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,25,54,"        super(type);
",2,0,0,1,2,0,0,0,0,2,12,4,0.00280,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,25,55,"        if (field == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00280,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,25,58,"        if (!field.isSupported()) {
",0,0,0,2,5,0,4,0,0,5,27,4,0.00280,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,25,61,"        iField = field;
",4,0,0,0,0,0,0,0,0,5,15,4,0.00280,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,25,62,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00280,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,25,70,"        return iField;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00280,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,25,86,"        return iField.getDurationField();
",0,0,0,1,2,1,4,0,0,4,33,5,0.00280,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,25,45,"        super(field, type);
",4,0,0,1,2,0,0,0,0,4,19,4,0.00280,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,25,46,"        if (field.getMinimumValue() != 0) {
",0,1,0,2,5,0,4,0,0,5,35,4,0.00280,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,25,49,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,750,"            super(DateTimeFieldType.halfdayOfDay(), cHalfdaysField, cDaysField);
",4,0,0,2,4,0,4,0,0,8,68,5,0.00280,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,751,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00280,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,25,45,"        super(DateTimeFieldType.year(), chronology.getAverageMillisPerYear());
",0,0,0,3,6,0,8,0,0,8,70,5,0.00280,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,25,46,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,25,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00280,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,25,119,"        return iChronology.getMaxYear();
",0,0,0,1,2,1,4,0,0,4,32,5,0.00280,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,25,46,"        this(field, (field == null ? null : field.getType()), offset, Integer.MIN_VALUE, Integer.MAX_VALUE);
",14,1,0,3,6,0,4,0,0,19,100,4,0.00280,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,25,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00280,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,25,58,"        this(field, type, offset, Integer.MIN_VALUE, Integer.MAX_VALUE);
",14,0,0,1,2,0,0,0,0,14,64,4,0.00280,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,25,59,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00280,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,25,73,"        super(field, type);
",4,0,0,1,2,0,0,0,0,4,19,4,0.00280,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,25,75,"        if (offset == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00280,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,25,79,"        iOffset = offset;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00280,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,25,81,"        if (minValue < (field.getMinimumValue() + offset)) {
",4,2,0,3,7,0,4,0,0,10,52,4,0.00280,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,25,82,"            iMin = field.getMinimumValue() + offset;
",4,1,0,1,2,0,4,0,0,10,40,6,0.00280,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,25,86,"        if (maxValue > (field.getMaximumValue() + offset)) {
",4,2,0,3,7,0,4,0,0,10,52,4,0.00280,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,25,87,"            iMax = field.getMaximumValue() + offset;
",4,1,0,1,2,0,4,0,0,10,40,6,0.00280,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,25,91,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00280,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,25,174,"        return iMin;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00280,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,25,183,"        return iMax;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00280,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,56,"        super(field, type);
",4,0,0,1,2,0,0,0,0,4,19,4,0.00280,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,58,"        if (divisor < 2) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00280,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,62,"        DurationField unitField = field.getDurationField();
",2,0,0,1,2,0,4,2,0,8,51,4,0.00280,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,63,"        if (unitField == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00280,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,66,"            iDurationField = new ScaledDurationField(
",2,0,0,0,1,0,0,2,0,5,41,6,0.00280,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,70,"        iDivisor = divisor;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00280,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,72,"        int i = field.getMinimumValue();
",2,0,0,1,2,0,4,0,0,6,32,5,0.00280,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,73,"        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);
",12,5,0,3,6,0,0,0,0,17,59,5,0.00280,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,75,"        int j = field.getMaximumValue();
",2,0,0,1,2,0,4,0,0,6,32,5,0.00280,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,76,"        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);
",12,5,0,3,6,0,0,0,0,17,59,5,0.00280,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,78,"        iMin = min;
",4,0,0,0,0,0,0,0,0,5,11,4,0.00280,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,79,"        iMax = max;
",4,0,0,0,0,0,0,0,0,5,11,4,0.00280,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,80,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00280,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,182,"        return iDurationField;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00280,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,25,52,"        super(field, type);
",4,0,0,1,2,0,0,0,0,4,19,4,0.00280,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,25,54,"        if (divisor < 2) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00280,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,25,58,"        DurationField rangeField = field.getDurationField();
",2,0,0,1,2,0,4,2,0,8,52,4,0.00280,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,25,59,"        if (rangeField == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00280,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,25,62,"            iRangeField = new ScaledDurationField(
",2,0,0,0,1,0,0,2,0,5,38,6,0.00280,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,25,66,"        iDivisor = divisor;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00280,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,25,67,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00280,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,25,76,"        this(dividedField, dividedField.getType());
",2,0,0,2,4,0,4,0,0,6,43,4,0.00280,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,25,77,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00280,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,25,87,"        super(dividedField.getWrappedField(), type);
",2,0,0,2,4,0,4,0,0,6,44,4,0.00280,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,25,88,"        iDivisor = dividedField.iDivisor;
",6,0,0,0,0,0,0,0,0,7,33,4,0.00280,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,25,89,"        iRangeField = dividedField.iDurationField;
",6,0,0,0,0,0,0,0,0,7,42,4,0.00280,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,25,90,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00280,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,25,148,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00280,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,25,158,"        return iDivisor - 1;
",2,1,0,0,0,1,0,0,0,3,20,4,0.00280,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,25,46,"        super(DateTimeFieldType.era());
",0,0,0,2,4,0,4,0,0,4,31,5,0.00280,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,25,47,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00280,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,25,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00280,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,25,45,"        super(DateTimeFieldType.dayOfWeek(), days);
",2,0,0,2,4,0,4,0,0,6,43,4,0.00280,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,25,46,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00280,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,25,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00280,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,44,"        super(DateTimeFieldType.weekyear(), chronology.getAverageMillisPerYear());
",0,0,0,3,6,0,8,0,0,8,74,5,0.00280,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,45,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00280,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,46,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00280,0
defect4j,time,org/joda/time/DateTimeFieldType,25,451,"            return iUnitType;
",2,0,0,0,0,1,0,0,0,2,17,5,0.00280,0
defect4j,time,org/joda/time/DateTimeFieldType,25,456,"            return iRangeType;
",2,0,0,0,0,1,0,0,0,2,18,5,0.00280,0
defect4j,time,org/joda/time/DateTimeFieldType,25,226,"        return CLOCKHOUR_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,4,0.00280,0
defect4j,time,org/joda/time/DateTimeFieldType,25,272,"        return DAY_OF_MONTH_TYPE;
",2,0,0,0,0,1,0,0,0,2,25,4,0.00280,0
defect4j,time,org/joda/time/DateTimeFieldType,25,326,"        return YEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00280,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,25,70,"    private UnsupportedDurationField(DurationFieldType type) {
",4,0,0,1,3,1,0,2,0,7,58,2,0.00280,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,25,71,"        iType = type;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00280,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,25,72,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00280,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,25,49,"        if (cCache == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00280,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,25,50,"            cCache = new HashMap<DurationFieldType, UnsupportedDurationField>(7);
",2,0,0,1,2,0,0,6,0,9,69,6,0.00280,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,25,51,"            field = null;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00280,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,25,55,"        if (field == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00280,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,25,56,"            field = new UnsupportedDurationField(type);
",4,0,0,1,2,0,0,2,0,7,43,6,0.00280,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,25,57,"            cCache.put(type, field);
",0,0,0,1,2,0,8,0,0,8,24,7,0.00280,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,25,59,"        return field;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00280,0
defect4j,time,org/joda/time/field/PreciseDurationField,25,54,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00280,0
defect4j,time,org/joda/time/DateTimeFieldType,25,199,"        return MINUTE_OF_HOUR_TYPE;
",2,0,0,0,0,1,0,0,0,2,27,4,0.00280,0
defect4j,time,org/joda/time/field/BaseDurationField,25,66,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00280,0
defect4j,time,org/joda/time/field/MillisDurationField,25,71,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00280,0
defect4j,time,org/joda/time/field/MillisDurationField,25,80,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00280,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,25,102,"        return getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;
",4,4,0,2,4,1,4,0,0,12,68,4,0.00280,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,69,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00280,0
defect4j,time,org/joda/time/field/PreciseDurationField,25,63,"        return iUnitMillis;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00279,0
defect4j,time,org/joda/time/DateTimeFieldType,25,190,"        return SECOND_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,4,0.00279,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,58,"        return iType;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00279,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,25,150,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00279,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,54,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00279,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,55,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00279,0
defect4j,time,org/joda/time/Chronology,25,63,"public abstract class Chronology {
",2,0,0,0,1,2,0,0,0,4,34,1,0.00279,0
defect4j,time,org/joda/time/field/MillisDurationField,25,62,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00278,0
defect4j,time,org/joda/time/field/PreciseDurationField,25,43,"        super(type);
",2,0,0,1,2,0,0,0,0,2,12,4,0.00278,0
defect4j,time,org/joda/time/field/PreciseDurationField,25,44,"        iUnitMillis = unitMillis;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00278,0
defect4j,time,org/joda/time/field/PreciseDurationField,25,45,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00278,0
defect4j,time,org/joda/time/field/ScaledDurationField,25,47,"        super(field, type);
",4,0,0,1,2,0,0,0,0,4,19,4,0.00278,0
defect4j,time,org/joda/time/field/ScaledDurationField,25,48,"        if (scalar == 0 || scalar == 1) {
",4,3,0,1,3,0,0,0,0,7,33,4,0.00278,0
defect4j,time,org/joda/time/field/ScaledDurationField,25,51,"        iScalar = scalar;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00278,0
defect4j,time,org/joda/time/field/ScaledDurationField,25,52,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00278,0
defect4j,time,org/joda/time/field/DecoratedDurationField,25,52,"        super(type);
",2,0,0,1,2,0,0,0,0,2,12,4,0.00278,0
defect4j,time,org/joda/time/field/DecoratedDurationField,25,53,"        if (field == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00278,0
defect4j,time,org/joda/time/field/DecoratedDurationField,25,56,"        if (!field.isSupported()) {
",0,0,0,2,5,0,4,0,0,5,27,4,0.00278,0
defect4j,time,org/joda/time/field/DecoratedDurationField,25,59,"        iField = field;
",4,0,0,0,0,0,0,0,0,5,15,4,0.00278,0
defect4j,time,org/joda/time/field/DecoratedDurationField,25,60,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00278,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,25,154,"        return iUnitMillis;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00277,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,25,57,"        super(type, unit);
",4,0,0,1,2,0,0,0,0,4,18,4,0.00277,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,25,59,"        if (!range.isPrecise()) {
",0,0,0,2,5,0,4,0,0,5,25,4,0.00277,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,25,63,"        long rangeMillis = range.getUnitMillis();
",2,0,0,1,2,0,4,0,0,6,41,5,0.00277,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,25,64,"        iRange = (int)(rangeMillis / getUnitMillis());
",4,1,0,3,6,0,2,0,0,8,46,4,0.00277,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,25,65,"        if (iRange < 2) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00277,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,25,69,"        iRangeField = range;
",4,0,0,0,0,0,0,0,0,5,20,4,0.00277,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,25,70,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00277,0
defect4j,time,org/joda/time/field/MillisDurationField,25,44,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00276,0
defect4j,time,org/joda/time/field/MillisDurationField,25,45,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00276,0
defect4j,time,org/joda/time/field/MillisDurationField,25,38,"    public static final DurationField INSTANCE = new MillisDurationField();
",2,0,0,1,2,3,0,4,0,9,71,2,0.00276,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,25,48,"        super(type);
",2,0,0,1,2,0,0,0,0,2,12,4,0.00274,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,25,50,"        if (!unit.isPrecise()) {
",0,0,0,2,5,0,4,0,0,5,24,4,0.00274,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,25,54,"        iUnitMillis = unit.getUnitMillis();
",2,0,0,1,2,0,4,0,0,7,35,4,0.00274,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,25,55,"        if (iUnitMillis < 1) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00274,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,25,59,"        iUnitField = unit;
",4,0,0,0,0,0,0,0,0,5,18,4,0.00274,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,25,60,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00274,0
defect4j,time,org/joda/time/DateTimeUtils,25,35,"    private static final SystemMillisProvider SYSTEM_MILLIS_PROVIDER = new SystemMillisProvider();
",2,0,0,1,2,3,0,4,0,9,94,2,0.00274,0
defect4j,time,org/joda/time/DateTimeUtils,25,37,"    private static volatile MillisProvider cMillisProvider = SYSTEM_MILLIS_PROVIDER;
",4,0,0,0,0,3,0,2,0,9,80,2,0.00274,0
defect4j,time,org/joda/time/DateTimeUtils,25,393,"    static class SystemMillisProvider implements MillisProvider {
",2,0,0,0,1,1,0,2,0,5,61,2,0.00274,0
defect4j,time,org/joda/time/DateTimeFieldType,25,181,"        return SECOND_OF_MINUTE_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,4,0.00271,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,50,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00271,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,51,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00271,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,54,"        iType = type;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00271,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,55,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00271,0
defect4j,time,org/joda/time/DateTimeField,25,33,"public abstract class DateTimeField {
",2,0,0,0,1,2,0,0,0,4,37,1,0.00271,0
defect4j,time,org/joda/time/DateTimeFieldType,25,152,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00271,0
defect4j,time,org/joda/time/DateTimeFieldType,25,153,"        iName = name;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00271,0
defect4j,time,org/joda/time/DateTimeFieldType,25,154,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00271,0
defect4j,time,org/joda/time/DateTimeFieldType,25,72,"    private static final DateTimeFieldType ERA_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,80,2,0.00271,0
defect4j,time,org/joda/time/DateTimeFieldType,25,75,"    private static final DateTimeFieldType YEAR_OF_ERA_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,88,2,0.00271,0
defect4j,time,org/joda/time/DateTimeFieldType,25,78,"    private static final DateTimeFieldType CENTURY_OF_ERA_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,91,2,0.00271,0
defect4j,time,org/joda/time/DateTimeFieldType,25,81,"    private static final DateTimeFieldType YEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,92,2,0.00271,0
defect4j,time,org/joda/time/DateTimeFieldType,25,84,"    private static final DateTimeFieldType YEAR_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,81,2,0.00271,0
defect4j,time,org/joda/time/DateTimeFieldType,25,87,"    private static final DateTimeFieldType DAY_OF_YEAR_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,88,2,0.00271,0
defect4j,time,org/joda/time/DateTimeFieldType,25,90,"    private static final DateTimeFieldType MONTH_OF_YEAR_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,90,2,0.00271,0
defect4j,time,org/joda/time/DateTimeFieldType,25,93,"    private static final DateTimeFieldType DAY_OF_MONTH_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,89,2,0.00271,0
defect4j,time,org/joda/time/DateTimeFieldType,25,96,"    private static final DateTimeFieldType WEEKYEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,96,2,0.00271,0
defect4j,time,org/joda/time/DateTimeFieldType,25,99,"    private static final DateTimeFieldType WEEKYEAR_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,85,2,0.00271,0
defect4j,time,org/joda/time/DateTimeFieldType,25,102,"    private static final DateTimeFieldType WEEK_OF_WEEKYEAR_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,93,2,0.00271,0
defect4j,time,org/joda/time/DateTimeFieldType,25,105,"    private static final DateTimeFieldType DAY_OF_WEEK_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,88,2,0.00271,0
defect4j,time,org/joda/time/DateTimeFieldType,25,109,"    private static final DateTimeFieldType HALFDAY_OF_DAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,91,2,0.00271,0
defect4j,time,org/joda/time/DateTimeFieldType,25,112,"    private static final DateTimeFieldType HOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,92,2,0.00271,0
defect4j,time,org/joda/time/DateTimeFieldType,25,115,"    private static final DateTimeFieldType CLOCKHOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,97,2,0.00271,0
defect4j,time,org/joda/time/DateTimeFieldType,25,118,"    private static final DateTimeFieldType CLOCKHOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,93,2,0.00271,0
defect4j,time,org/joda/time/DateTimeFieldType,25,121,"    private static final DateTimeFieldType HOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,88,2,0.00271,0
defect4j,time,org/joda/time/DateTimeFieldType,25,124,"    private static final DateTimeFieldType MINUTE_OF_DAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,90,2,0.00271,0
defect4j,time,org/joda/time/DateTimeFieldType,25,127,"    private static final DateTimeFieldType MINUTE_OF_HOUR_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,91,2,0.00271,0
defect4j,time,org/joda/time/DateTimeFieldType,25,130,"    private static final DateTimeFieldType SECOND_OF_DAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,90,2,0.00271,0
defect4j,time,org/joda/time/DateTimeFieldType,25,133,"    private static final DateTimeFieldType SECOND_OF_MINUTE_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,93,2,0.00271,0
defect4j,time,org/joda/time/DateTimeFieldType,25,136,"    private static final DateTimeFieldType MILLIS_OF_DAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,90,2,0.00271,0
defect4j,time,org/joda/time/DateTimeFieldType,25,139,"    private static final DateTimeFieldType MILLIS_OF_SECOND_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,93,2,0.00271,0
defect4j,time,org/joda/time/DurationFieldType,25,141,"        return HALFDAYS_TYPE;
",2,0,0,0,0,1,0,0,0,2,21,4,0.00271,0
defect4j,time,org/joda/time/DurationFieldType,25,169,"        return WEEKYEARS_TYPE;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00271,0
defect4j,time,org/joda/time/DurationFieldType,25,205,"        return ERAS_TYPE;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00271,0
defect4j,time,org/joda/time/DateTimeFieldType,25,443,"            super(name);
",2,0,0,1,2,0,0,0,0,2,12,5,0.00271,0
defect4j,time,org/joda/time/DateTimeFieldType,25,444,"            iOrdinal = ordinal;
",4,0,0,0,0,0,0,0,0,5,19,5,0.00271,0
defect4j,time,org/joda/time/DateTimeFieldType,25,445,"            iUnitType = unitType;
",4,0,0,0,0,0,0,0,0,5,21,5,0.00271,0
defect4j,time,org/joda/time/DateTimeFieldType,25,446,"            iRangeType = rangeType;
",4,0,0,0,0,0,0,0,0,5,23,5,0.00271,0
defect4j,time,org/joda/time/DateTimeFieldType,25,447,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00271,0
defect4j,time,org/joda/time/DurationFieldType,25,196,"        return CENTURIES_TYPE;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00271,0
defect4j,time,org/joda/time/field/BaseDurationField,25,47,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00270,0
defect4j,time,org/joda/time/field/BaseDurationField,25,48,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00270,0
defect4j,time,org/joda/time/field/BaseDurationField,25,51,"        iType = type;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00270,0
defect4j,time,org/joda/time/field/BaseDurationField,25,52,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00270,0
defect4j,time,org/joda/time/DurationField,25,30,"public abstract class DurationField implements Comparable<DurationField> {
",2,0,0,0,1,2,0,4,0,8,74,1,0.00268,0
defect4j,time,org/joda/time/DurationFieldType,25,105,"        return MILLIS_TYPE;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00265,0
defect4j,time,org/joda/time/DurationFieldType,25,178,"        return MONTHS_TYPE;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00264,0
defect4j,time,org/joda/time/DurationFieldType,25,187,"        return YEARS_TYPE;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00264,0
defect4j,time,org/joda/time/DurationFieldType,25,160,"        return WEEKS_TYPE;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00264,0
defect4j,time,org/joda/time/DurationFieldType,25,132,"        return HOURS_TYPE;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00263,0
defect4j,time,org/joda/time/DurationFieldType,25,151,"        return DAYS_TYPE;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00263,0
defect4j,time,org/joda/time/DurationFieldType,25,114,"        return SECONDS_TYPE;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00261,0
defect4j,time,org/joda/time/DurationFieldType,25,123,"        return MINUTES_TYPE;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00261,0
defect4j,time,org/joda/time/DateTimeZone,25,212,"            return zone;
",2,0,0,0,0,1,0,0,0,2,12,6,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,95,"        if (in instanceof DataInput) {
",2,0,0,1,3,0,0,2,0,4,30,5,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,98,"            return readFrom((DataInput)new DataInputStream(in), id);
",2,0,0,3,6,1,4,4,0,10,56,7,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,110,"        switch (in.readUnsignedByte()) {
",0,0,0,2,5,0,4,0,0,4,32,5,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,119,"            return CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in, id));
",0,0,0,2,4,1,12,0,0,12,70,6,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,183,"        int v = in.readUnsignedByte();
",2,0,0,1,2,0,4,0,0,6,30,5,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,184,"        switch (v >> 6) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,187,"            v = (v << (32 - 6)) >> (32 - 6);
",4,4,0,3,6,0,0,0,0,9,32,5,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,188,"            return v * (30 * 60000L);
",2,2,0,1,2,1,0,0,0,4,25,5,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,192,"            v = (v << (32 - 6)) >> (32 - 30);
",4,4,0,3,6,0,0,0,0,9,33,5,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,193,"            v |= (in.readUnsignedByte()) << 16;
",2,1,0,2,4,0,4,0,0,8,35,5,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,194,"            v |= (in.readUnsignedByte()) << 8;
",2,1,0,2,4,0,4,0,0,8,34,5,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,195,"            v |= (in.readUnsignedByte());
",2,0,0,2,4,0,4,0,0,7,29,5,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,196,"            return v * 60000L;
",2,1,0,0,0,1,0,0,0,3,18,5,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,200,"            long w = (((long)v) << (64 - 6)) >> (64 - 38);
",4,4,0,5,10,0,0,0,0,8,46,6,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,201,"            w |= (in.readUnsignedByte()) << 24;
",2,1,0,2,4,0,4,0,0,8,35,5,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,202,"            w |= (in.readUnsignedByte()) << 16;
",2,1,0,2,4,0,4,0,0,8,35,5,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,203,"            w |= (in.readUnsignedByte()) << 8;
",2,1,0,2,4,0,4,0,0,8,34,5,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,204,"            w |= (in.readUnsignedByte());
",2,0,0,2,4,0,4,0,0,7,29,5,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,205,"            return w * 1000L;
",2,1,0,0,0,1,0,0,0,3,17,5,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,209,"            return in.readLong();
",0,0,0,1,2,1,4,0,0,4,21,6,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1500,"            super(id);
",2,0,0,1,2,0,0,0,0,2,10,5,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1501,"            iTransitions = transitions;
",4,0,0,0,0,0,0,0,0,5,27,5,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1502,"            iWallOffsets = wallOffsets;
",4,0,0,0,0,0,0,0,0,5,27,5,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1503,"            iStandardOffsets = standardOffsets;
",4,0,0,0,0,0,0,0,0,5,35,5,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1504,"            iNameKeys = nameKeys;
",4,0,0,0,0,0,0,0,0,5,21,5,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1505,"            iTailZone = tailZone;
",4,0,0,0,0,0,0,0,0,5,21,5,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1506,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1341,"            int poolSize = in.readUnsignedShort();
",2,0,0,1,2,0,4,0,0,6,38,6,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1342,"            String[] pool = new String[poolSize];
",2,0,1,2,4,0,0,4,0,8,37,5,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1343,"            for (int i=0; i<poolSize; i++) {
",8,1,0,1,3,0,0,0,0,10,32,5,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1344,"                pool[i] = in.readUTF();
",0,0,1,2,4,0,4,0,0,9,23,7,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1347,"            int size = in.readInt();
",2,0,0,1,2,0,4,0,0,6,24,6,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1348,"            long[] transitions = new long[size];
",2,0,1,2,4,0,0,0,0,4,36,6,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1349,"            int[] wallOffsets = new int[size];
",2,0,1,2,4,0,0,0,0,4,34,6,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1350,"            int[] standardOffsets = new int[size];
",2,0,1,2,4,0,0,0,0,4,38,6,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1351,"            String[] nameKeys = new String[size];
",2,0,1,2,4,0,0,4,0,8,37,5,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1353,"            for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,5,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1354,"                transitions[i] = readMillis(in);
",0,0,1,2,4,0,4,0,0,9,32,7,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1355,"                wallOffsets[i] = (int)readMillis(in);
",0,0,1,3,6,0,4,0,0,9,37,7,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1356,"                standardOffsets[i] = (int)readMillis(in);
",0,0,1,3,6,0,4,0,0,9,41,7,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1359,"                    if (poolSize < 256) {
",2,1,0,1,3,0,0,0,0,3,21,9,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1360,"                        index = in.readUnsignedByte();
",2,0,0,1,2,0,4,0,0,7,30,11,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1364,"                    nameKeys[i] = pool[index];
",0,0,1,2,4,0,0,0,0,9,26,9,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1367,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1370,"            DSTZone tailZone = null;
",2,0,0,0,0,0,0,2,0,4,24,5,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1371,"            if (in.readBoolean()) {
",0,0,0,2,5,0,4,0,0,4,23,6,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1372,"                tailZone = DSTZone.readFrom(in, id);
",2,0,0,1,2,0,8,0,0,11,36,7,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1375,"            return new PrecalculatedZone
",0,0,0,0,0,1,0,2,0,2,28,7,0.00257,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,87,"        super(zone.getID());
",0,0,0,2,4,0,4,0,0,4,20,5,0.00257,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,88,"        iZone = zone;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00257,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,89,"        iInfoCache = new Info[cInfoCacheMask + 1];
",4,1,0,1,2,0,0,2,0,8,42,4,0.00257,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,90,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00257,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,39,"            i = Integer.getInteger(""org.joda.time.tz.CachedDateTimeZone.size"");
",2,0,0,1,2,0,4,0,0,8,67,6,0.00257,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,42,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00257,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,45,"        if (i == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00257,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,48,"            cacheSize = 512; // (1 << 9)
",2,0,0,1,2,0,0,0,0,3,28,6,0.00257,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,61,"        cInfoCacheMask = cacheSize - 1;
",4,1,0,0,0,0,0,0,0,6,31,4,0.00257,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,62,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00257,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,68,"        if (zone instanceof CachedDateTimeZone) {
",2,0,0,1,3,0,0,2,0,4,41,5,0.00257,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,71,"        return new CachedDateTimeZone(zone);
",2,0,0,1,2,1,0,2,0,4,36,5,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1176,"            super(id);
",2,0,0,1,2,0,0,0,0,2,10,5,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1177,"            iStandardOffset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,33,5,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1178,"            iStartRecurrence = startRecurrence;
",4,0,0,0,0,0,0,0,0,5,35,5,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1179,"            iEndRecurrence = endRecurrence;
",4,0,0,0,0,0,0,0,0,5,31,5,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1180,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1166,"            return new DSTZone(id, (int)readMillis(in), 
",2,0,0,2,5,1,4,2,0,8,43,6,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,504,"        {
",0,0,0,0,1,0,0,0,0,0,1,3,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,505,"            if (mode != 'u' && mode != 'w' && mode != 's') {
",6,5,0,1,3,0,0,0,0,14,48,5,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,509,"            iMode = mode;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,510,"            iMonthOfYear = monthOfYear;
",4,0,0,0,0,0,0,0,0,5,27,5,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,511,"            iDayOfMonth = dayOfMonth;
",4,0,0,0,0,0,0,0,0,5,25,5,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,512,"            iDayOfWeek = dayOfWeek;
",4,0,0,0,0,0,0,0,0,5,23,5,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,513,"            iAdvance = advanceDayOfWeek;
",4,0,0,0,0,0,0,0,0,5,28,5,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,514,"            iMillisOfDay = millisOfDay;
",4,0,0,0,0,0,0,0,0,5,27,5,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,515,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,482,"            return new OfYear((char)in.readUnsignedByte(),
",0,0,0,2,5,1,4,2,0,6,46,6,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,747,"        Recurrence(OfYear ofYear, String nameKey, int saveMillis) {
",8,0,0,1,3,0,0,4,0,12,59,3,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,748,"            iOfYear = ofYear;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,749,"            iNameKey = nameKey;
",4,0,0,0,0,0,0,0,0,5,19,5,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,750,"            iSaveMillis = saveMillis;
",4,0,0,0,0,0,0,0,0,5,25,5,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,751,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00257,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,740,"            return new Recurrence(OfYear.readFrom(in), in.readUTF(), (int)readMillis(in));
",0,0,0,5,10,1,14,2,0,16,78,6,0.00257,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,147,"            return loadZoneData(id);
",0,0,0,1,2,1,4,0,0,4,24,7,0.00257,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,224,"        InputStream in = null;
",2,0,0,0,0,0,0,2,0,4,22,4,0.00257,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,226,"            in = openResource(id);
",2,0,0,1,2,0,4,0,0,7,22,6,0.00257,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,227,"            DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);
",2,0,0,1,2,0,8,2,0,12,55,6,0.00257,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,228,"            iZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));
",2,0,0,2,4,0,6,4,0,12,58,7,0.00257,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,229,"            return tz;
",2,0,0,0,0,1,0,0,0,2,10,6,0.00257,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,236,"                if (in != null) {
",2,1,0,1,3,0,0,0,0,3,17,8,0.00257,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,237,"                    in.close();
",0,0,0,1,2,0,4,0,0,4,11,11,0.00257,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,240,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00257,0
defect4j,time,org/joda/time/DateTimeZone,25,204,"        if (id == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00257,0
defect4j,time,org/joda/time/DateTimeZone,25,207,"        if (id.equals(""UTC"")) {
",0,0,0,2,5,0,4,0,0,5,23,5,0.00257,0
defect4j,time,org/joda/time/DateTimeZone,25,210,"        DateTimeZone zone = cProvider.getZone(id);
",2,0,0,1,2,0,6,2,0,10,42,4,0.00257,0
defect4j,time,org/joda/time/DateTimeZone,25,211,"        if (zone != null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00257,0
defect4j,time,org/joda/time/DateTimeZone,25,705,"        return iID;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00254,0
defect4j,time,org/joda/time/DateTimeZone,25,688,"    protected DateTimeZone(String id) {
",4,0,0,1,3,1,0,2,0,7,35,2,0.00253,0
defect4j,time,org/joda/time/DateTimeZone,25,689,"        if (id == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00253,0
defect4j,time,org/joda/time/DateTimeZone,25,692,"        iID = id;
",4,0,0,0,0,0,0,0,0,5,9,4,0.00253,0
defect4j,time,org/joda/time/DateTimeZone,25,693,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00253,0
defect4j,time,org/joda/time/DateTimeZone,25,95,"    public static final DateTimeZone UTC = new FixedDateTimeZone(""UTC"", ""UTC"", 0, 0);
",2,0,0,1,2,3,0,4,0,11,81,2,0.00253,0
defect4j,time,org/joda/time/DateTimeZone,25,115,"        setProvider0(null);
",0,0,0,1,2,0,2,0,0,3,19,4,0.00253,0
defect4j,time,org/joda/time/DateTimeZone,25,116,"        setNameProvider0(null);
",0,0,0,1,2,0,2,0,0,3,23,4,0.00253,0
defect4j,time,org/joda/time/DateTimeZone,25,117,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00253,0
defect4j,time,org/joda/time/DateTimeZone,25,415,"        if (provider == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00253,0
defect4j,time,org/joda/time/DateTimeZone,25,416,"            provider = getDefaultProvider();
",2,0,0,1,2,0,2,0,0,5,32,6,0.00253,0
defect4j,time,org/joda/time/DateTimeZone,25,418,"        Set<String> ids = provider.getAvailableIDs();
",2,0,0,1,2,0,4,4,0,10,45,4,0.00253,0
defect4j,time,org/joda/time/DateTimeZone,25,419,"        if (ids == null || ids.size() == 0) {
",2,3,0,2,5,0,4,0,0,9,37,4,0.00253,0
defect4j,time,org/joda/time/DateTimeZone,25,423,"        if (!ids.contains(""UTC"")) {
",0,0,0,2,5,0,4,0,0,6,27,4,0.00253,0
defect4j,time,org/joda/time/DateTimeZone,25,426,"        if (!UTC.equals(provider.getZone(""UTC""))) {
",0,0,0,3,7,0,8,0,0,10,43,4,0.00253,0
defect4j,time,org/joda/time/DateTimeZone,25,429,"        cProvider = provider;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00253,0
defect4j,time,org/joda/time/DateTimeZone,25,430,"        cAvailableIDs = ids;
",4,0,0,0,0,0,0,0,0,5,20,4,0.00253,0
defect4j,time,org/joda/time/DateTimeZone,25,431,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00253,0
defect4j,time,org/joda/time/DateTimeZone,25,443,"        Provider provider = null;
",2,0,0,0,0,0,0,2,0,4,25,4,0.00253,0
defect4j,time,org/joda/time/DateTimeZone,25,446,"            String providerClass =
",2,0,0,0,0,0,0,2,0,4,22,6,0.00253,0
defect4j,time,org/joda/time/DateTimeZone,25,448,"            if (providerClass != null) {
",2,1,0,1,3,0,0,0,0,3,28,6,0.00253,0
defect4j,time,org/joda/time/DateTimeZone,25,458,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00253,0
defect4j,time,org/joda/time/DateTimeZone,25,460,"        if (provider == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00253,0
defect4j,time,org/joda/time/DateTimeZone,25,462,"                provider = new ZoneInfoProvider(""org/joda/time/tz/data"");
",2,0,0,1,2,0,0,2,0,6,57,8,0.00253,0
defect4j,time,org/joda/time/DateTimeZone,25,466,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00253,0
defect4j,time,org/joda/time/DateTimeZone,25,469,"        if (provider == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00253,0
defect4j,time,org/joda/time/DateTimeZone,25,473,"        return provider;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00253,0
defect4j,time,org/joda/time/DateTimeZone,25,514,"        if (nameProvider == null) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.00253,0
defect4j,time,org/joda/time/DateTimeZone,25,515,"            nameProvider = getDefaultNameProvider();
",2,0,0,1,2,0,2,0,0,5,40,6,0.00253,0
defect4j,time,org/joda/time/DateTimeZone,25,517,"        cNameProvider = nameProvider;
",4,0,0,0,0,0,0,0,0,5,29,4,0.00253,0
defect4j,time,org/joda/time/DateTimeZone,25,518,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00253,0
defect4j,time,org/joda/time/DateTimeZone,25,529,"        NameProvider nameProvider = null;
",2,0,0,0,0,0,0,2,0,4,33,4,0.00253,0
defect4j,time,org/joda/time/DateTimeZone,25,531,"            String providerClass = System.getProperty(""org.joda.time.DateTimeZone.NameProvider"");
",2,0,0,1,2,0,4,2,0,9,85,6,0.00253,0
defect4j,time,org/joda/time/DateTimeZone,25,532,"            if (providerClass != null) {
",2,1,0,1,3,0,0,0,0,3,28,6,0.00253,0
defect4j,time,org/joda/time/DateTimeZone,25,542,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00253,0
defect4j,time,org/joda/time/DateTimeZone,25,544,"        if (nameProvider == null) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.00253,0
defect4j,time,org/joda/time/DateTimeZone,25,545,"            nameProvider = new DefaultNameProvider();
",2,0,0,1,2,0,0,2,0,5,41,6,0.00253,0
defect4j,time,org/joda/time/DateTimeZone,25,548,"        return nameProvider;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00253,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,25,39,"    public DefaultNameProvider() {
",2,0,0,1,3,1,0,0,0,3,30,2,0.00253,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,25,37,"    private HashMap<Locale, Map<String, Map<String, Object>>> iByLocaleCache = createCache();
",2,0,0,1,2,1,2,14,0,19,89,2,0.00253,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,25,40,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00253,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,25,87,"        return new HashMap(7);
",0,0,0,1,2,1,0,2,0,2,22,6,0.00253,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,25,38,"        super(id);
",2,0,0,1,2,0,0,0,0,2,10,4,0.00253,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,25,39,"        iNameKey = nameKey;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00253,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,25,40,"        iWallOffset = wallOffset;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00253,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,25,41,"        iStandardOffset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,33,4,0.00253,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,25,42,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00253,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,25,88,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00253,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,25,89,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00253,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,82,"        this(resourcePath, null, false);
",2,0,0,1,2,0,0,0,0,3,32,4,0.00253,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,83,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00253,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,106,"    {
",0,0,0,0,1,0,0,0,0,0,1,3,0.00253,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,107,"        if (resourcePath == null) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.00253,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,110,"        if (!resourcePath.endsWith(""/"")) {
",0,0,0,2,5,0,4,0,0,6,34,4,0.00253,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,111,"            resourcePath += '/';
",2,0,0,0,0,0,0,0,0,4,20,6,0.00253,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,114,"        iFileDir = null;
",2,0,0,0,0,0,0,0,0,3,16,4,0.00253,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,115,"        iResourcePath = resourcePath;
",4,0,0,0,0,0,0,0,0,5,29,4,0.00253,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,117,"        if (loader == null && !favorSystemLoader) {
",4,2,0,1,3,0,0,0,0,7,43,4,0.00253,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,118,"            loader = getClass().getClassLoader();
",2,0,0,2,4,0,4,0,0,7,37,6,0.00253,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,121,"        iLoader = loader;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00253,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,123,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));
",2,0,0,2,4,0,4,0,0,8,60,4,0.00253,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,124,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00253,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,136,"        if (id == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00253,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,140,"        Object obj = iZoneInfoMap.get(id);
",2,0,0,1,2,0,6,2,0,10,34,4,0.00253,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,141,"        if (obj == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00253,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,145,"        if (id.equals(obj)) {
",0,0,0,2,5,0,6,0,0,6,21,5,0.00253,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,150,"        if (obj instanceof SoftReference<?>) {
",2,0,0,1,3,0,0,2,0,4,38,5,0.00253,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,152,"            SoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;
",4,0,0,1,2,0,0,8,0,12,68,6,0.00253,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,153,"            DateTimeZone tz = ref.get();
",2,0,0,1,2,0,4,2,0,8,28,6,0.00253,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,154,"            if (tz != null) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.00253,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,155,"                return tz;
",2,0,0,0,0,1,0,0,0,2,10,8,0.00253,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,174,"        return new TreeSet<String>(iZoneInfoMap.keySet());
",0,0,0,2,4,1,4,4,0,8,50,5,0.00253,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,196,"        if (iFileDir != null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00253,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,199,"            String path = iResourcePath.concat(name);
",2,0,0,1,2,0,6,2,0,10,41,6,0.00253,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,200,"            if (iLoader != null) {
",2,1,0,1,3,0,0,0,0,3,22,6,0.00253,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,201,"                in = iLoader.getResourceAsStream(path);
",2,0,0,1,2,0,6,0,0,9,39,8,0.00253,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,205,"            if (in == null) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.00253,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,214,"        return in;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00253,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,252,"        Map<String, Object> map = new ConcurrentHashMap<String, Object>();
",2,0,0,1,2,0,0,12,0,14,66,4,0.00253,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,253,"        DataInputStream din = new DataInputStream(in);
",4,0,0,1,2,0,0,4,0,8,46,4,0.00253,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,255,"            readZoneInfoMap(din, map);
",0,0,0,1,2,0,6,0,0,6,26,7,0.00253,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,258,"                din.close();
",0,0,0,1,2,0,4,0,0,4,12,9,0.00253,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,260,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00253,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,262,"        map.put(""UTC"", new SoftReference<DateTimeZone>(DateTimeZone.UTC));
",4,0,0,2,4,0,4,4,0,13,66,5,0.00253,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,263,"        return map;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00253,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,274,"        int size = din.readUnsignedShort();
",2,0,0,1,2,0,4,0,0,6,35,5,0.00253,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,275,"        String[] pool = new String[size];
",2,0,1,2,4,0,0,4,0,8,33,4,0.00253,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,276,"        for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,4,0.00253,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,277,"            pool[i] = din.readUTF().intern();
",0,0,1,3,6,0,6,0,0,11,33,6,0.00253,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,281,"        size = din.readUnsignedShort();
",2,0,0,1,2,0,4,0,0,7,31,4,0.00253,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,282,"        for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,4,0.00253,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,284,"                zimap.put(pool[din.readUnsignedShort()], pool[din.readUnsignedShort()]);
",0,0,1,5,10,0,12,0,0,16,72,9,0.00253,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,287,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00253,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,289,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00253,0
defect4j,time,org/joda/time/DurationFieldType,25,94,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00251,0
defect4j,time,org/joda/time/DurationFieldType,25,95,"        iName = name;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00251,0
defect4j,time,org/joda/time/DurationFieldType,25,96,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00251,0
defect4j,time,org/joda/time/DurationFieldType,25,60,"    static final DurationFieldType ERAS_TYPE = new StandardDurationFieldType(""eras"", ERAS);
",4,0,0,1,2,2,0,4,0,11,87,2,0.00251,0
defect4j,time,org/joda/time/DurationFieldType,25,62,"    static final DurationFieldType CENTURIES_TYPE = new StandardDurationFieldType(""centuries"", CENTURIES);
",4,0,0,1,2,2,0,4,0,11,102,2,0.00251,0
defect4j,time,org/joda/time/DurationFieldType,25,64,"    static final DurationFieldType WEEKYEARS_TYPE = new StandardDurationFieldType(""weekyears"", WEEKYEARS);
",4,0,0,1,2,2,0,4,0,11,102,2,0.00251,0
defect4j,time,org/joda/time/DurationFieldType,25,66,"    static final DurationFieldType YEARS_TYPE = new StandardDurationFieldType(""years"", YEARS);
",4,0,0,1,2,2,0,4,0,11,90,2,0.00251,0
defect4j,time,org/joda/time/DurationFieldType,25,68,"    static final DurationFieldType MONTHS_TYPE = new StandardDurationFieldType(""months"", MONTHS);
",4,0,0,1,2,2,0,4,0,11,93,2,0.00251,0
defect4j,time,org/joda/time/DurationFieldType,25,70,"    static final DurationFieldType WEEKS_TYPE = new StandardDurationFieldType(""weeks"", WEEKS);
",4,0,0,1,2,2,0,4,0,11,90,2,0.00251,0
defect4j,time,org/joda/time/DurationFieldType,25,72,"    static final DurationFieldType DAYS_TYPE = new StandardDurationFieldType(""days"", DAYS);
",4,0,0,1,2,2,0,4,0,11,87,2,0.00251,0
defect4j,time,org/joda/time/DurationFieldType,25,74,"    static final DurationFieldType HALFDAYS_TYPE = new StandardDurationFieldType(""halfdays"", HALFDAYS);
",4,0,0,1,2,2,0,4,0,11,99,2,0.00251,0
defect4j,time,org/joda/time/DurationFieldType,25,76,"    static final DurationFieldType HOURS_TYPE = new StandardDurationFieldType(""hours"", HOURS);
",4,0,0,1,2,2,0,4,0,11,90,2,0.00251,0
defect4j,time,org/joda/time/DurationFieldType,25,78,"    static final DurationFieldType MINUTES_TYPE = new StandardDurationFieldType(""minutes"", MINUTES);
",4,0,0,1,2,2,0,4,0,11,96,2,0.00251,0
defect4j,time,org/joda/time/DurationFieldType,25,80,"    static final DurationFieldType SECONDS_TYPE = new StandardDurationFieldType(""seconds"", SECONDS);
",4,0,0,1,2,2,0,4,0,11,96,2,0.00251,0
defect4j,time,org/joda/time/DurationFieldType,25,82,"    static final DurationFieldType MILLIS_TYPE = new StandardDurationFieldType(""millis"", MILLIS);
",4,0,0,1,2,2,0,4,0,11,93,2,0.00251,0
defect4j,time,org/joda/time/DurationFieldType,25,259,"            super(name);
",2,0,0,1,2,0,0,0,0,2,12,5,0.00251,0
defect4j,time,org/joda/time/DurationFieldType,25,260,"            iOrdinal = ordinal;
",4,0,0,0,0,0,0,0,0,5,19,5,0.00251,0
defect4j,time,org/joda/time/DurationFieldType,25,261,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00251,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,147,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00157,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,139,"        DateTimeZone zone = getZone();
",2,0,0,1,2,0,2,2,0,6,30,4,0.00156,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,140,"        int offset = zone.getOffsetFromLocal(instant);
",2,0,0,1,2,0,6,0,0,8,46,5,0.00156,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,141,"        instant -= offset;
",4,0,0,0,0,0,0,0,0,5,18,4,0.00156,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,142,"        if (offset != zone.getOffset(instant)) {
",2,1,0,2,5,0,6,0,0,9,40,4,0.00156,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,119,"        return localToUTC(getBase().getDateTimeMillis
",0,0,0,1,3,1,6,0,0,6,45,5,0.00156,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,102,"            return chrono;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00074,0
defect4j,time,org/joda/time/DateTimeFieldType,25,377,"        return iName;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,25,409,"        return getField(chronology).isSupported();
",0,0,0,2,4,1,6,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,25,418,"        return getName();
",0,0,0,1,2,1,2,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,25,40,"public abstract class DateTimeFieldType implements Serializable {
",2,0,0,0,1,2,0,2,0,6,65,1,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,25,59,"        return iChronology.getDaysInMonthMax();
",0,0,0,1,2,1,4,0,0,4,39,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,25,63,"        return iChronology.getDaysInMonthMax(instant);
",0,0,0,1,2,1,6,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,25,67,"        if (partial.isSupported(DateTimeFieldType.monthOfYear())) {
",0,0,0,3,7,0,8,0,0,8,59,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,25,68,"            int month = partial.get(DateTimeFieldType.monthOfYear());
",2,0,0,2,4,0,8,0,0,10,57,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,25,69,"            if (partial.isSupported(DateTimeFieldType.year())) {
",0,0,0,3,7,0,8,0,0,8,52,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,25,70,"                int year = partial.get(DateTimeFieldType.year());
",2,0,0,2,4,0,8,0,0,10,49,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,25,71,"                return iChronology.getDaysInYearMonth(year, month);
",0,0,0,1,2,1,8,0,0,8,51,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,25,73,"            return iChronology.getDaysInMonthMax(month);
",0,0,0,1,2,1,6,0,0,6,44,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,25,75,"        return getMaximumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,25,79,"        int size = partial.size();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,25,80,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,25,81,"            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {
",0,1,0,3,7,0,10,0,0,11,65,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,25,82,"                int month = values[i];
",2,0,1,1,2,0,0,0,0,6,22,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,25,83,"                for (int j = 0; j < size; j++) {
",8,1,0,1,3,0,0,0,0,10,32,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,25,84,"                    if (partial.getFieldType(j) == DateTimeFieldType.year()) {
",0,1,0,3,7,0,10,0,0,11,58,10,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,25,85,"                        int year = values[j];
",2,0,1,1,2,0,0,0,0,6,21,13,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,25,86,"                        return iChronology.getDaysInYearMonth(year, month);
",0,0,0,1,2,1,8,0,0,8,51,13,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,25,89,"                return iChronology.getDaysInMonthMax(month);
",0,0,0,1,2,1,6,0,0,6,44,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,25,92,"        return getMaximumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,25,103,"        return iChronology.dayOfMonth();
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,25,51,"            throw new IllegalArgumentException(""Unit duration field must be precise"");
",0,0,0,1,2,0,0,2,0,3,74,7,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,25,56,"            throw new IllegalArgumentException(""The unit milliseconds must be at least 1"");
",0,0,0,1,2,0,0,2,0,3,79,7,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,25,66,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,25,92,"        if (instant >= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,25,93,"            return instant - instant % iUnitMillis;
",6,2,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,25,95,"            instant += 1;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,25,96,"            return instant - instant % iUnitMillis - iUnitMillis;
",8,3,0,0,0,1,0,0,0,11,53,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,25,109,"        if (instant > 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,25,110,"            instant -= 1;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,25,111,"            return instant - instant % iUnitMillis + iUnitMillis;
",8,3,0,0,0,1,0,0,0,11,53,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,25,113,"            return instant - instant % iUnitMillis;
",6,2,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,25,129,"            return (instant + 1) % iUnitMillis + iUnitMillis - 1;
",6,4,0,1,2,1,0,0,0,10,53,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,25,163,"        return getMaximumValue(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,52,"            throw new IllegalArgumentException(""The type must not be null"");
",0,0,0,1,2,0,0,2,0,4,64,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,62,"        return iType.getName();
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,94,"        return getAsText(get(instant), locale);
",0,0,0,2,4,1,8,0,0,8,39,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,106,"        return getAsText(instant, null);
",0,0,0,1,2,1,4,0,0,5,32,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,121,"        return getAsText(fieldValue, locale);
",0,0,0,1,2,1,6,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,136,"        return getAsText(partial, partial.get(getType()), locale);
",0,0,0,3,6,1,12,0,0,12,58,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,153,"        return Integer.toString(fieldValue);
",0,0,0,1,2,1,6,0,0,6,36,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,168,"        return getAsShortText(get(instant), locale);
",0,0,0,2,4,1,8,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,180,"        return getAsShortText(instant, null);
",0,0,0,1,2,1,4,0,0,5,37,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,195,"        return getAsShortText(fieldValue, locale);
",0,0,0,1,2,1,6,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,210,"        return getAsShortText(partial, partial.get(getType()), locale);
",0,0,0,3,6,1,12,0,0,12,63,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,227,"        return getAsText(fieldValue, locale);
",0,0,0,1,2,1,6,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,267,"        return getDurationField().add(instant, value);
",0,0,0,2,4,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,298,"        if (valueToAdd == 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,299,"            return values;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,304,"        DateTimeField nextField = null;
",2,0,0,0,0,0,0,2,0,4,31,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,306,"        while (valueToAdd > 0) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,307,"            int max = getMaximumValue(instant, values);
",2,0,0,1,2,0,6,0,0,8,43,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,308,"            long proposed = values[fieldIndex] + valueToAdd;
",4,1,1,1,2,0,0,0,0,9,48,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,309,"            if (proposed <= max) {
",4,1,0,1,3,0,0,0,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,310,"                values[fieldIndex] = (int) proposed;
",2,0,1,2,4,0,0,0,0,7,36,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,311,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,313,"            if (nextField == null) {
",2,1,0,1,3,0,0,0,0,3,24,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,314,"                if (fieldIndex == 0) {
",2,1,0,1,3,0,0,0,0,3,22,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,315,"                    throw new IllegalArgumentException(""Maximum value exceeded for add"");
",0,0,0,1,2,0,0,2,0,3,69,11,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,317,"                nextField = instant.getField(fieldIndex - 1);
",4,1,0,1,2,0,4,0,0,10,45,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,319,"                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {
",0,1,0,5,11,0,10,0,0,11,82,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,320,"                    throw new IllegalArgumentException(""Fields invalid for add"");
",0,0,0,1,2,0,0,2,0,3,61,11,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,323,"            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add
",4,2,1,2,4,0,0,0,0,11,74,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,324,"            values = nextField.add(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field
",4,1,0,1,2,0,8,0,0,14,90,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,325,"            values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero
",0,0,1,2,4,0,6,0,0,11,83,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,326,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,327,"        while (valueToAdd < 0) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,328,"            int min = getMinimumValue(instant, values);
",2,0,0,1,2,0,6,0,0,8,43,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,329,"            long proposed = values[fieldIndex] + valueToAdd;
",4,1,1,1,2,0,0,0,0,9,48,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,330,"            if (proposed >= min) {
",4,1,0,1,3,0,0,0,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,331,"                values[fieldIndex] = (int) proposed;
",2,0,1,2,4,0,0,0,0,7,36,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,332,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,334,"            if (nextField == null) {
",2,1,0,1,3,0,0,0,0,3,24,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,335,"                if (fieldIndex == 0) {
",2,1,0,1,3,0,0,0,0,3,22,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,336,"                    throw new IllegalArgumentException(""Maximum value exceeded for add"");
",0,0,0,1,2,0,0,2,0,3,69,11,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,338,"                nextField = instant.getField(fieldIndex - 1);
",4,1,0,1,2,0,4,0,0,10,45,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,339,"                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {
",0,1,0,5,11,0,10,0,0,11,82,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,340,"                    throw new IllegalArgumentException(""Fields invalid for add"");
",0,0,0,1,2,0,0,2,0,3,61,11,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,343,"            valueToAdd -= (min - 1) - values[fieldIndex];  // reduce the amount to add
",4,2,1,2,4,0,0,0,0,11,74,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,344,"            values = nextField.add(instant, fieldIndex - 1, values, -1);  // subtract 1 from next bigger field
",4,1,0,1,2,0,8,0,0,15,98,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,345,"            values[fieldIndex] = getMaximumValue(instant, values);  // reset this field to max value
",0,0,1,2,4,0,6,0,0,11,88,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,346,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,348,"        return set(instant, fieldIndex, values, values[fieldIndex]);  // adjusts smaller fields
",0,0,1,2,4,1,8,0,0,12,87,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,379,"        if (valueToAdd == 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,380,"            return values;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,385,"        DateTimeField nextField = null;
",2,0,0,0,0,0,0,2,0,4,31,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,387,"        while (valueToAdd > 0) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,388,"            int max = getMaximumValue(instant, values);
",2,0,0,1,2,0,6,0,0,8,43,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,389,"            long proposed = values[fieldIndex] + valueToAdd;
",4,1,1,1,2,0,0,0,0,9,48,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,390,"            if (proposed <= max) {
",4,1,0,1,3,0,0,0,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,391,"                values[fieldIndex] = (int) proposed;
",2,0,1,2,4,0,0,0,0,7,36,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,392,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,394,"            if (nextField == null) {
",2,1,0,1,3,0,0,0,0,3,24,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,395,"                if (fieldIndex == 0) {
",2,1,0,1,3,0,0,0,0,3,22,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,396,"                    valueToAdd -= (max + 1) - values[fieldIndex];
",4,2,1,2,4,0,0,0,0,11,45,10,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,397,"                    values[fieldIndex] = getMinimumValue(instant, values);
",0,0,1,2,4,0,6,0,0,11,54,10,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,398,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,400,"                nextField = instant.getField(fieldIndex - 1);
",4,1,0,1,2,0,4,0,0,10,45,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,402,"                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {
",0,1,0,5,11,0,10,0,0,11,82,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,403,"                    throw new IllegalArgumentException(""Fields invalid for add"");
",0,0,0,1,2,0,0,2,0,3,61,11,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,406,"            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add
",4,2,1,2,4,0,0,0,0,11,74,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,407,"            values = nextField.addWrapPartial(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field
",4,1,0,1,2,0,8,0,0,14,101,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,408,"            values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero
",0,0,1,2,4,0,6,0,0,11,83,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,409,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,410,"        while (valueToAdd < 0) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,411,"            int min = getMinimumValue(instant, values);
",2,0,0,1,2,0,6,0,0,8,43,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,412,"            long proposed = values[fieldIndex] + valueToAdd;
",4,1,1,1,2,0,0,0,0,9,48,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,413,"            if (proposed >= min) {
",4,1,0,1,3,0,0,0,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,414,"                values[fieldIndex] = (int) proposed;
",2,0,1,2,4,0,0,0,0,7,36,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,415,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,417,"            if (nextField == null) {
",2,1,0,1,3,0,0,0,0,3,24,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,418,"                if (fieldIndex == 0) {
",2,1,0,1,3,0,0,0,0,3,22,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,419,"                    valueToAdd -= (min - 1) - values[fieldIndex];
",4,2,1,2,4,0,0,0,0,11,45,10,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,420,"                    values[fieldIndex] = getMaximumValue(instant, values);
",0,0,1,2,4,0,6,0,0,11,54,10,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,421,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,423,"                nextField = instant.getField(fieldIndex - 1);
",4,1,0,1,2,0,4,0,0,10,45,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,424,"                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {
",0,1,0,5,11,0,10,0,0,11,82,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,425,"                    throw new IllegalArgumentException(""Fields invalid for add"");
",0,0,0,1,2,0,0,2,0,3,61,11,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,428,"            valueToAdd -= (min - 1) - values[fieldIndex];  // reduce the amount to add
",4,2,1,2,4,0,0,0,0,11,74,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,429,"            values = nextField.addWrapPartial(instant, fieldIndex - 1, values, -1);  // subtract 1 from next bigger field
",4,1,0,1,2,0,8,0,0,15,109,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,430,"            values[fieldIndex] = getMaximumValue(instant, values);  // reset this field to max value
",0,0,1,2,4,0,6,0,0,11,88,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,431,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,433,"        return set(instant, fieldIndex, values, values[fieldIndex]);  // adjusts smaller fields
",0,0,1,2,4,1,8,0,0,12,87,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,461,"        int current = get(instant);
",2,0,0,1,2,0,4,0,0,6,27,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,462,"        int wrapped = FieldUtils.getWrappedValue
",2,0,0,0,0,0,4,0,0,6,40,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,464,"        return set(instant, wrapped);
",0,0,0,1,2,1,6,0,0,6,29,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,495,"        int current = values[fieldIndex];
",2,0,1,1,2,0,0,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,496,"        int wrapped = FieldUtils.getWrappedValue
",2,0,0,0,0,0,4,0,0,6,40,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,498,"        return set(instant, fieldIndex, values, wrapped);  // adjusts smaller fields
",0,0,0,1,2,1,10,0,0,10,76,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,522,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,75,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,545,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,81,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,585,"        FieldUtils.verifyValueBounds(this, newValue, getMinimumValue(partial, values), getMaximumValue(partial, values));
",0,0,0,3,6,0,18,0,0,18,113,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,586,"        values[fieldIndex] = newValue;
",2,0,1,1,2,0,0,0,0,7,30,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,589,"        for (int i = fieldIndex + 1; i < partial.size(); i++) {
",8,2,0,2,5,0,4,0,0,15,55,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,590,"            DateTimeField field = partial.getField(i);
",2,0,0,1,2,0,6,2,0,10,42,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,591,"            if (values[i] > field.getMaximumValue(partial, values)) {
",0,1,1,3,7,0,8,0,0,13,57,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,592,"                values[i] = field.getMaximumValue(partial, values);
",0,0,1,2,4,0,8,0,0,13,51,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,594,"            if (values[i] < field.getMinimumValue(partial, values)) {
",0,1,1,3,7,0,8,0,0,13,57,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,595,"                values[i] = field.getMinimumValue(partial, values);
",0,0,1,2,4,0,8,0,0,13,51,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,598,"        return values;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,618,"        int value = convertText(text, locale);
",2,0,0,1,2,0,6,0,0,8,38,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,619,"        return set(instant, value);
",0,0,0,1,2,1,6,0,0,6,27,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,635,"        return set(instant, text, null);
",0,0,0,1,2,1,6,0,0,7,32,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,654,"        int value = convertText(text, locale);
",2,0,0,1,2,0,6,0,0,8,38,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,655,"        return set(instant, fieldIndex, values, value);
",0,0,0,1,2,1,10,0,0,10,47,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,668,"            return Integer.parseInt(text);
",0,0,0,1,2,1,6,0,0,6,30,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,669,"        } catch (NumberFormatException ex) {
",2,0,0,1,4,0,0,2,0,4,36,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,670,"            throw new IllegalFieldValueException(getType(), text);
",2,0,0,2,4,0,2,2,0,6,54,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,704,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,716,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,746,"        return getMinimumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,758,"        return getMinimumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,772,"        return getMinimumValue(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,792,"        return getMaximumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,804,"        return getMaximumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,818,"        return getMaximumValue(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,829,"        int max = getMaximumValue();
",2,0,0,1,2,0,2,0,0,4,28,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,830,"        if (max >= 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,831,"            if (max < 10) {
",2,1,0,1,3,0,0,0,0,3,15,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,832,"                return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,833,"            } else if (max < 100) {
",2,1,0,1,4,0,0,0,0,3,23,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,834,"                return 2;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,835,"            } else if (max < 1000) {
",2,1,0,1,4,0,0,0,0,3,24,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,836,"                return 3;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,839,"        return Integer.toString(max).length();
",0,0,0,2,4,1,8,0,0,8,38,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,850,"        return getMaximumTextLength(locale);
",0,0,0,1,2,1,4,0,0,4,36,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,886,"        long newInstant = roundFloor(instant);
",2,0,0,1,2,0,4,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,887,"        if (newInstant != instant) {
",4,1,0,1,3,0,0,0,0,5,28,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,888,"            instant = add(newInstant, 1);
",2,0,0,1,2,0,4,0,0,7,29,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,890,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,903,"        long floor = roundFloor(instant);
",2,0,0,1,2,0,4,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,904,"        long ceiling = roundCeiling(instant);
",2,0,0,1,2,0,4,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,906,"        long diffFromFloor = instant - floor;
",6,1,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,907,"        long diffToCeiling = ceiling - instant;
",6,1,0,0,0,0,0,0,0,7,39,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,909,"        if (diffFromFloor <= diffToCeiling) {
",4,1,0,1,3,0,0,0,0,5,37,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,911,"            return floor;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,913,"            return ceiling;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,927,"        long floor = roundFloor(instant);
",2,0,0,1,2,0,4,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,928,"        long ceiling = roundCeiling(instant);
",2,0,0,1,2,0,4,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,930,"        long diffFromFloor = instant - floor;
",6,1,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,931,"        long diffToCeiling = ceiling - instant;
",6,1,0,0,0,0,0,0,0,7,39,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,933,"        if (diffToCeiling <= diffFromFloor) {
",4,1,0,1,3,0,0,0,0,5,37,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,935,"            return ceiling;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,937,"            return floor;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,955,"        long floor = roundFloor(instant);
",2,0,0,1,2,0,4,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,956,"        long ceiling = roundCeiling(instant);
",2,0,0,1,2,0,4,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,958,"        long diffFromFloor = instant - floor;
",6,1,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,959,"        long diffToCeiling = ceiling - instant;
",6,1,0,0,0,0,0,0,0,7,39,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,961,"        if (diffFromFloor < diffToCeiling) {
",4,1,0,1,3,0,0,0,0,5,36,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,963,"            return floor;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,964,"        } else if (diffToCeiling < diffFromFloor) {
",4,1,0,1,4,0,0,0,0,5,43,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,966,"            return ceiling;
",2,0,0,0,0,1,0,0,0,2,15,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,970,"            if ((get(ceiling) & 1) == 0) {
",0,2,0,3,7,0,4,0,0,6,30,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,971,"                return ceiling;
",2,0,0,0,0,1,0,0,0,2,15,9,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,973,"            return floor;
",2,0,0,0,0,1,0,0,0,2,13,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,994,"        return instant - roundFloor(instant);
",2,1,0,1,2,1,4,0,0,7,37,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,25,1003,"        return ""DateTimeField["" + getName() + ']';
",0,1,0,2,4,1,2,0,0,5,42,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));
",0,0,0,3,6,0,12,0,0,14,79,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,109,"        iDateTimeFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,110,"        iDurationFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,111,"        iFieldName = fieldType.getName();
",2,0,0,1,2,0,4,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,112,"        iNumberValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,113,"        iStringValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,114,"        iLowerBound = lowerBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,115,"        iUpperBound = upperBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,116,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,117,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,129,"        super(createMessage(fieldType.getName(), value, null, null, explain));
",0,0,0,3,6,0,10,0,0,12,70,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,130,"        iDateTimeFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,131,"        iDurationFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,132,"        iFieldName = fieldType.getName();
",2,0,0,1,2,0,4,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,133,"        iNumberValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,134,"        iStringValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,135,"        iLowerBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,136,"        iUpperBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,137,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,138,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,150,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));
",0,0,0,3,6,0,12,0,0,14,79,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,151,"        iDateTimeFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,152,"        iDurationFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,153,"        iFieldName = fieldType.getName();
",2,0,0,1,2,0,4,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,154,"        iNumberValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,155,"        iStringValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,156,"        iLowerBound = lowerBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,157,"        iUpperBound = upperBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,158,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,159,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,171,"        super(createMessage(fieldName, value, lowerBound, upperBound, null));
",0,0,0,2,4,0,10,0,0,12,69,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,172,"        iDateTimeFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,173,"        iDurationFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,174,"        iFieldName = fieldName;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,175,"        iNumberValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,176,"        iStringValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,177,"        iLowerBound = lowerBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,178,"        iUpperBound = upperBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,179,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,180,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,189,"        super(createMessage(fieldType.getName(), value));
",0,0,0,3,6,0,8,0,0,8,49,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,190,"        iDateTimeFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,191,"        iDurationFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,192,"        iFieldName = fieldType.getName();
",2,0,0,1,2,0,4,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,193,"        iStringValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,194,"        iNumberValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,195,"        iLowerBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,196,"        iUpperBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,197,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,198,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,207,"        super(createMessage(fieldType.getName(), value));
",0,0,0,3,6,0,8,0,0,8,49,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,208,"        iDateTimeFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,209,"        iDurationFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,210,"        iFieldName = fieldType.getName();
",2,0,0,1,2,0,4,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,211,"        iStringValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,212,"        iNumberValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,213,"        iLowerBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,214,"        iUpperBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,215,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,216,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,225,"        super(createMessage(fieldName, value));
",0,0,0,2,4,0,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,226,"        iDateTimeFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,227,"        iDurationFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,228,"        iFieldName = fieldName;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,229,"        iStringValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,230,"        iNumberValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,231,"        iLowerBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,232,"        iUpperBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,233,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,234,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,41,"        StringBuffer buf = new StringBuffer()
",2,0,0,1,2,0,0,4,0,6,37,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,44,"        if (lowerBound == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,45,"            if (upperBound == null) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,46,"                buf.append(""is not supported"");
",0,0,0,1,2,0,4,0,0,5,31,9,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,48,"                buf.append(""must not be larger than "").append(upperBound);
",0,0,0,2,4,0,8,0,0,9,58,9,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,50,"        } else if (upperBound == null) {
",2,1,0,1,4,0,0,0,0,3,32,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,51,"            buf.append(""must not be smaller than "").append(lowerBound);
",0,0,0,2,4,0,8,0,0,9,59,8,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,53,"            buf.append(""must be in the range ["")
",0,0,0,1,3,0,4,0,0,5,36,12,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,59,"        if (explain != null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,60,"            buf.append("": "").append(explain);
",0,0,0,2,4,0,8,0,0,9,33,7,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,63,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,74,"        StringBuffer buf = new StringBuffer().append(""Value "");
",2,0,0,2,4,0,2,4,0,9,55,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,76,"        if (value == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,77,"            buf.append(""null"");
",0,0,0,1,2,0,4,0,0,5,19,7,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,79,"            buf.append('""');
",0,0,0,1,2,0,4,0,0,5,16,7,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,80,"            buf.append(value);
",0,0,0,1,2,0,6,0,0,6,18,7,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,81,"            buf.append('""');
",0,0,0,1,2,0,4,0,0,5,16,7,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,84,"        buf.append("" for "").append(fieldName).append(' ').append(""is not supported"");
",0,0,0,4,8,0,12,0,0,15,77,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,86,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,243,"        return iDateTimeFieldType;
",2,0,0,0,0,1,0,0,0,2,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,252,"        return iDurationFieldType;
",2,0,0,0,0,1,0,0,0,2,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,261,"        return iFieldName;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,270,"        return iNumberValue;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,279,"        return iStringValue;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,288,"        String value = iStringValue;
",4,0,0,0,0,0,0,2,0,6,28,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,289,"        if (value == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,290,"            value = String.valueOf(iNumberValue);
",2,0,0,1,2,0,6,0,0,9,37,6,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,292,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,301,"        return iLowerBound;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,310,"        return iUpperBound;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,314,"        return iMessage;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,323,"        if (iMessage == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,324,"            iMessage = message;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,325,"        } else if (message != null) {
",2,1,0,1,4,0,0,0,0,3,29,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,326,"            iMessage = message + "": "" + iMessage;
",6,1,0,0,0,0,0,0,0,9,37,7,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,25,328,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DurationField,25,209,"        if (value == Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/DurationField,25,210,"            return subtract(instant, (long) value);
",2,0,0,2,4,1,4,0,0,6,39,7,0.00000,0
defect4j,time,org/joda/time/DurationField,25,212,"        return add(instant, -value);
",2,0,0,1,2,1,4,0,0,7,28,5,0.00000,0
defect4j,time,org/joda/time/DurationField,25,224,"        if (value == Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,30,4,0.00000,0
defect4j,time,org/joda/time/DurationField,25,225,"            throw new ArithmeticException(""Long.MIN_VALUE cannot be negated"");
",0,0,0,1,2,0,0,2,0,3,66,7,0.00000,0
defect4j,time,org/joda/time/DurationField,25,227,"        return add(instant, -value);
",2,0,0,1,2,1,4,0,0,7,28,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,134,"            throw new IllegalArgumentException
",0,0,0,0,0,0,0,2,0,2,34,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,144,"            return base.getZone();
",0,0,0,1,2,1,4,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,153,"        if ((base = getBase()) != null) {
",2,1,0,3,7,0,2,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,154,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);
",0,0,0,1,2,1,12,0,0,12,74,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,157,"        FieldUtils.verifyValueBounds
",0,0,0,0,0,0,4,0,0,4,28,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,159,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;
",2,1,0,1,2,1,8,0,0,11,74,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,168,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,
",0,0,0,0,1,1,10,0,0,10,60,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,185,"        return iMinDaysInFirstWeek;
",2,0,0,0,0,1,0,0,0,2,27,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,196,"        return super.equals(obj);
",4,0,0,1,2,1,0,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,206,"        return getClass().getName().hashCode() * 11 + getZone().hashCode() + getMinimumDaysInFirstWeek();
",0,3,0,6,12,1,12,0,0,15,97,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,217,"        StringBuffer sb = new StringBuffer(60);
",2,0,0,1,2,0,0,4,0,6,39,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,218,"        String name = getClass().getName();
",2,0,0,2,4,0,4,2,0,8,35,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,219,"        int index = name.lastIndexOf('.');
",2,0,0,1,2,0,4,0,0,7,34,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,220,"        if (index >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,221,"            name = name.substring(index + 1);
",4,1,0,1,2,0,4,0,0,10,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,223,"        sb.append(name);
",0,0,0,1,2,0,6,0,0,6,16,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,224,"        sb.append('[');
",0,0,0,1,3,0,4,0,0,5,15,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,225,"        DateTimeZone zone = getZone();
",2,0,0,1,2,0,2,2,0,6,30,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,226,"        if (zone != null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,227,"            sb.append(zone.getID());
",0,0,0,2,4,0,8,0,0,8,24,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,229,"        if (getMinimumDaysInFirstWeek() != 4) {
",0,1,0,2,5,0,2,0,0,3,39,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,230,"            sb.append("",mdfw="");
",0,0,0,1,2,0,4,0,0,5,20,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,231,"            sb.append(getMinimumDaysInFirstWeek());
",0,0,0,2,4,0,6,0,0,6,39,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,233,"        sb.append(']');
",0,0,0,1,3,0,4,0,0,5,15,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,234,"        return sb.toString();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,307,"        return 366;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,317,"        return isLeapYear(year) ? 366 : 365;
",0,0,0,1,2,1,4,0,0,4,36,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,327,"        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,328,"        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);
",4,1,0,1,2,0,2,0,0,7,59,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,329,"        return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);
",8,2,0,3,6,1,0,0,0,10,89,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,339,"        long jan1millis = getYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,340,"        int jan1dayOfWeek = getDayOfWeek(jan1millis);
",2,0,0,1,2,0,4,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,342,"        if (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {
",4,2,0,2,5,0,0,0,0,6,48,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,344,"            return jan1millis + (8 - jan1dayOfWeek)
",4,2,0,1,2,1,0,0,0,6,39,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,348,"            return jan1millis - (jan1dayOfWeek - 1)
",4,2,0,1,2,1,0,0,0,6,39,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,371,"        long millis = getYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,34,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,372,"        millis += getTotalMillisByYearMonth(year, month);
",2,0,0,1,2,0,6,0,0,9,49,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,373,"        return millis;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,402,"            i2 = i2 - unitMillis + 1;
",6,2,0,0,0,0,0,0,0,9,25,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,410,"            year--;
",2,0,0,0,0,0,0,0,0,3,7,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,414,"            if (isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,4,23,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,415,"                oneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;
",6,1,0,0,0,0,0,0,0,8,50,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,417,"                oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;
",6,1,0,0,0,0,0,0,0,8,50,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,420,"            yearStart += oneYear;
",4,0,0,0,0,0,0,0,0,5,21,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,422,"            if (yearStart <= instant) {
",4,1,0,1,3,0,0,0,0,5,27,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,424,"                year++;
",2,0,0,0,0,0,0,0,0,3,7,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,477,"        return getDayOfYear(instant, getYear(instant));
",0,0,0,2,4,1,8,0,0,8,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,493,"        int year = getYear(instant);
",2,0,0,1,2,0,4,0,0,6,28,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,494,"        int week = getWeekOfWeekyear(instant, year);
",2,0,0,1,2,0,6,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,495,"        if (week == 1) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,496,"            return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);
",6,1,0,1,2,1,2,0,0,9,60,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,497,"        } else if (week > 51) {
",2,1,0,1,4,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,498,"            return getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));
",6,2,0,2,4,1,2,0,0,10,66,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,500,"            return year;
",2,0,0,0,0,1,0,0,0,2,12,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,508,"        return getWeekOfWeekyear(instant, getYear(instant));
",0,0,0,2,4,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,516,"        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,517,"        if (instant < firstWeekMillis1) {
",4,1,0,1,3,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,518,"            return getWeeksInYear(year - 1);
",2,1,0,1,2,1,2,0,0,5,32,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,520,"        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);
",4,1,0,1,2,0,2,0,0,7,59,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,521,"        if (instant >= firstWeekMillis2) {
",4,1,0,1,3,0,0,0,0,5,34,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,522,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,524,"        return (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;
",8,3,0,3,6,1,0,0,0,11,84,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,537,"            daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1))
",8,2,0,2,4,0,0,0,0,11,70,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,539,"            if (daysSince19700101 < -3) {
",2,1,0,1,3,0,0,0,0,4,29,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,540,"                return 7 + (int) ((daysSince19700101 + 4) % 7);
",2,3,0,3,6,1,0,0,0,5,47,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,554,"            return (DateTimeConstants.MILLIS_PER_DAY - 1)
",4,1,0,1,2,1,0,0,0,5,45,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,565,"        return 31;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,575,"        int thisYear = getYear(instant);
",2,0,0,1,2,0,4,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,576,"        int thisMonth = getMonthOfYear(instant, thisYear);
",2,0,0,1,2,0,6,0,0,8,50,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,577,"        return getDaysInYearMonth(thisYear, thisMonth);
",0,0,0,1,2,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,590,"        return getDaysInMonthMax(instant);
",0,0,0,1,2,1,4,0,0,4,34,5,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,110,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,118,"        if ((base = iBase) != null && (iBaseFlags & 6) == 6) {
",6,4,0,3,7,0,0,0,0,11,54,4,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,120,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);
",0,0,0,1,2,1,12,0,0,12,74,7,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,122,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);
",10,0,0,1,2,1,0,0,0,10,75,5,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,136,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth,
",8,0,0,0,1,1,0,0,0,8,61,5,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,146,"        if ((base = iBase) != null && (iBaseFlags & 1) == 1) {
",6,4,0,3,7,0,0,0,0,11,54,4,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,148,"            return base.getDateTimeMillis
",0,0,0,0,0,1,4,0,0,4,29,7,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,151,"        return super.getDateTimeMillis
",2,0,0,0,0,1,0,0,0,2,30,5,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,389,"        in.defaultReadObject();
",0,0,0,1,2,0,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,390,"        setFields();
",0,0,0,1,2,0,2,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,391,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,102,"        long instant = year().set(0, year);
",2,0,0,2,4,0,6,0,0,8,35,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,103,"        instant = monthOfYear().set(instant, monthOfYear);
",2,0,0,2,4,0,8,0,0,11,50,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,104,"        instant = dayOfMonth().set(instant, dayOfMonth);
",2,0,0,2,4,0,8,0,0,11,48,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,105,"        return millisOfDay().set(instant, millisOfDay);
",0,0,0,2,4,1,8,0,0,8,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,132,"        long instant = year().set(0, year);
",2,0,0,2,4,0,6,0,0,8,35,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,133,"        instant = monthOfYear().set(instant, monthOfYear);
",2,0,0,2,4,0,8,0,0,11,50,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,134,"        instant = dayOfMonth().set(instant, dayOfMonth);
",2,0,0,2,4,0,8,0,0,11,48,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,135,"        instant = hourOfDay().set(instant, hourOfDay);
",2,0,0,2,4,0,8,0,0,11,46,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,136,"        instant = minuteOfHour().set(instant, minuteOfHour);
",2,0,0,2,4,0,8,0,0,11,52,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,137,"        instant = secondOfMinute().set(instant, secondOfMinute);
",2,0,0,2,4,0,8,0,0,11,56,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,138,"        return millisOfSecond().set(instant, millisOfSecond);
",0,0,0,2,4,1,8,0,0,8,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,163,"        instant = hourOfDay().set(instant, hourOfDay);
",2,0,0,2,4,0,8,0,0,11,46,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,164,"        instant = minuteOfHour().set(instant, minuteOfHour);
",2,0,0,2,4,0,8,0,0,11,52,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,165,"        instant = secondOfMinute().set(instant, secondOfMinute);
",2,0,0,2,4,0,8,0,0,11,56,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,166,"        return millisOfSecond().set(instant, millisOfSecond);
",0,0,0,2,4,1,8,0,0,8,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,183,"        int size = partial.size();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,184,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,185,"            int value = values[i];
",2,0,1,1,2,0,0,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,186,"            DateTimeField field = partial.getField(i);
",2,0,0,1,2,0,6,2,0,10,42,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,187,"            if (value < field.getMinimumValue()) {
",2,1,0,2,5,0,4,0,0,7,38,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,188,"                throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,192,"            if (value > field.getMaximumValue()) {
",2,1,0,2,5,0,4,0,0,7,38,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,193,"                throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,199,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,200,"            int value = values[i];
",2,0,1,1,2,0,0,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,201,"            DateTimeField field = partial.getField(i);
",2,0,0,1,2,0,6,2,0,10,42,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,202,"            if (value < field.getMinimumValue(partial, values)) {
",2,1,0,2,5,0,8,0,0,11,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,203,"                throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,207,"            if (value > field.getMaximumValue(partial, values)) {
",2,1,0,2,5,0,8,0,0,11,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,208,"                throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,213,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,223,"        int size = partial.size();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,224,"        int[] values = new int[size];
",2,0,1,2,4,0,0,0,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,225,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,226,"            values[i] = partial.getFieldType(i).getField(this).get(instant);
",0,0,1,4,8,0,12,0,0,17,64,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,228,"        return values;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,239,"        for (int i = 0, isize = partial.size(); i < isize; i++) {
",10,1,0,2,5,0,4,0,0,16,57,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,240,"            instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));
",2,0,0,4,8,0,18,0,0,21,83,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,242,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,255,"        int size = period.size();
",2,0,0,1,2,0,4,0,0,6,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,256,"        int[] values = new int[size];
",2,0,1,2,4,0,0,0,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,257,"        if (startInstant != endInstant) {
",4,1,0,1,3,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,258,"            for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,259,"                DurationField field = period.getFieldType(i).getField(this);
",2,0,0,2,4,0,8,2,0,12,60,8,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,260,"                int value = field.getDifference(endInstant, startInstant);
",2,0,0,1,2,0,8,0,0,10,58,9,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,261,"                startInstant = field.add(startInstant, value);
",2,0,0,1,2,0,8,0,0,11,46,8,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,262,"                values[i] = value;
",2,0,1,1,2,0,0,0,0,7,18,8,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,265,"        return values;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,276,"        int size = period.size();
",2,0,0,1,2,0,4,0,0,6,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,277,"        int[] values = new int[size];
",2,0,1,2,4,0,0,0,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,278,"        if (duration != 0) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,279,"            long current = 0;
",2,0,0,0,0,0,0,0,0,2,17,7,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,280,"            for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,281,"                DurationField field = period.getFieldType(i).getField(this);
",2,0,0,2,4,0,8,2,0,12,60,8,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,282,"                if (field.isPrecise()) {
",0,0,0,2,5,0,4,0,0,4,24,9,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,283,"                    int value = field.getDifference(duration, current);
",2,0,0,1,2,0,8,0,0,10,51,11,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,284,"                    current = field.add(current, value);
",2,0,0,1,2,0,8,0,0,11,36,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,285,"                    values[i] = value;
",2,0,1,1,2,0,0,0,0,7,18,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,289,"        return values;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,301,"        if (scalar != 0 && period != null) {
",4,3,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,302,"            for (int i = 0, isize = period.size(); i < isize; i++) {
",10,1,0,2,5,0,4,0,0,16,56,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,303,"                long value = period.getValue(i); // use long to allow for multiplication (fits OK)
",2,0,0,2,4,0,6,0,0,8,82,9,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,304,"                if (value != 0) {
",2,1,0,1,3,0,0,0,0,3,17,8,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,305,"                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);
",6,1,0,3,6,0,12,0,0,20,77,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,309,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,322,"        if (duration == 0 || scalar == 0) {
",4,3,0,1,3,0,0,0,0,7,35,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,323,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,325,"        long add = FieldUtils.safeMultiply(duration, scalar);
",2,0,0,1,2,0,8,0,0,10,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,326,"        return FieldUtils.safeAdd(instant, add);
",0,0,0,1,2,1,8,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,337,"        return UnsupportedDurationField.getInstance(DurationFieldType.millis());
",0,0,0,2,4,1,8,0,0,8,72,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,346,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfSecond(), millis());
",0,0,0,3,6,1,10,0,0,10,90,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,355,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfDay(), millis());
",0,0,0,3,6,1,10,0,0,10,87,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,366,"        return UnsupportedDurationField.getInstance(DurationFieldType.seconds());
",0,0,0,2,4,1,8,0,0,8,73,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,375,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfMinute(), seconds());
",0,0,0,3,6,1,10,0,0,10,91,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,384,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfDay(), seconds());
",0,0,0,3,6,1,10,0,0,10,88,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,395,"        return UnsupportedDurationField.getInstance(DurationFieldType.minutes());
",0,0,0,2,4,1,8,0,0,8,73,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,404,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfHour(), minutes());
",0,0,0,3,6,1,10,0,0,10,89,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,413,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfDay(), minutes());
",0,0,0,3,6,1,10,0,0,10,88,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,424,"        return UnsupportedDurationField.getInstance(DurationFieldType.hours());
",0,0,0,2,4,1,8,0,0,8,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,433,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfDay(), hours());
",0,0,0,3,6,1,10,0,0,10,84,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,442,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfDay(), hours());
",0,0,0,3,6,1,10,0,0,10,89,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,453,"        return UnsupportedDurationField.getInstance(DurationFieldType.halfdays());
",0,0,0,2,4,1,8,0,0,8,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,462,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfHalfday(), hours());
",0,0,0,3,6,1,10,0,0,10,88,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,471,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfHalfday(), hours());
",0,0,0,3,6,1,10,0,0,10,93,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,480,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.halfdayOfDay(), halfdays());
",0,0,0,3,6,1,10,0,0,10,90,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,491,"        return UnsupportedDurationField.getInstance(DurationFieldType.days());
",0,0,0,2,4,1,8,0,0,8,70,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,504,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfWeek(), days());
",0,0,0,3,6,1,10,0,0,10,83,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,513,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfMonth(), days());
",0,0,0,3,6,1,10,0,0,10,84,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,522,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfYear(), days());
",0,0,0,3,6,1,10,0,0,10,83,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,533,"        return UnsupportedDurationField.getInstance(DurationFieldType.weeks());
",0,0,0,2,4,1,8,0,0,8,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,542,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekOfWeekyear(), weeks());
",0,0,0,3,6,1,10,0,0,10,89,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,553,"        return UnsupportedDurationField.getInstance(DurationFieldType.weekyears());
",0,0,0,2,4,1,8,0,0,8,75,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,562,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyear(), weekyears());
",0,0,0,3,6,1,10,0,0,10,87,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,571,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyearOfCentury(), weekyears());
",0,0,0,3,6,1,10,0,0,10,96,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,582,"        return UnsupportedDurationField.getInstance(DurationFieldType.months());
",0,0,0,2,4,1,8,0,0,8,72,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,591,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.monthOfYear(), months());
",0,0,0,3,6,1,10,0,0,10,87,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,602,"        return UnsupportedDurationField.getInstance(DurationFieldType.years());
",0,0,0,2,4,1,8,0,0,8,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,611,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.year(), years());
",0,0,0,3,6,1,10,0,0,10,79,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,620,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfEra(), years());
",0,0,0,3,6,1,10,0,0,10,84,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,629,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfCentury(), years());
",0,0,0,3,6,1,10,0,0,10,88,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,640,"        return UnsupportedDurationField.getInstance(DurationFieldType.centuries());
",0,0,0,2,4,1,8,0,0,8,75,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,649,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.centuryOfEra(), centuries());
",0,0,0,3,6,1,10,0,0,10,91,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,25,669,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.era(), eras());
",0,0,0,3,6,1,10,0,0,10,77,5,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,25,479,"                    eras = f;
",4,0,0,0,0,0,0,0,0,5,9,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,25,52,"        return iChronology.getDayOfYear(instant);
",0,0,0,1,2,1,6,0,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,25,60,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,25,64,"        return iChronology.getDaysInYearMax();
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,25,68,"        int year = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,25,69,"        return iChronology.getDaysInYear(year);
",0,0,0,1,2,1,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,25,73,"        if (partial.isSupported(DateTimeFieldType.year())) {
",0,0,0,3,7,0,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,25,74,"            int year = partial.get(DateTimeFieldType.year());
",2,0,0,2,4,0,8,0,0,10,49,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,25,75,"            return iChronology.getDaysInYear(year);
",0,0,0,1,2,1,6,0,0,6,39,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,25,77,"        return iChronology.getDaysInYearMax();
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,25,81,"        int size = partial.size();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,25,82,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,25,83,"            if (partial.getFieldType(i) == DateTimeFieldType.year()) {
",0,1,0,3,7,0,10,0,0,11,58,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,25,84,"                int year = values[i];
",2,0,1,1,2,0,0,0,0,6,21,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,25,85,"                return iChronology.getDaysInYear(year);
",0,0,0,1,2,1,6,0,0,6,39,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,25,88,"        return iChronology.getDaysInYearMax();
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,25,92,"        int maxLessOne = iChronology.getDaysInYearMax() - 1;
",2,1,0,1,2,0,4,0,0,7,52,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,25,93,"        return (value > maxLessOne || value < 1) ? getMaximumValue(instant) : maxLessOne;
",8,3,0,2,4,1,4,0,0,15,81,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,25,100,"        return iChronology.dayOfYear();
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,25,42,"        return GJLocaleSymbols.forLocale(locale).monthOfYearValueToText(fieldValue);
",0,0,0,2,4,1,10,0,0,10,76,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,25,47,"        return GJLocaleSymbols.forLocale(locale).monthOfYearValueToShortText(fieldValue);
",0,0,0,2,4,1,10,0,0,10,81,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,25,52,"        return GJLocaleSymbols.forLocale(locale).monthOfYearTextToValue(text);
",0,0,0,2,4,1,10,0,0,10,70,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,25,57,"        return GJLocaleSymbols.forLocale(locale).getMonthMaxTextLength();
",0,0,0,2,4,1,8,0,0,8,65,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,25,62,"        return GJLocaleSymbols.forLocale(locale).getMonthMaxShortTextLength();
",0,0,0,2,4,1,8,0,0,8,70,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,59,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,93,"            return instant; // the easy case
",2,0,0,0,0,1,0,0,0,2,32,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,117,"            yearToUse = thisYear + (monthToUse / iMax) - 1;
",8,3,0,1,2,0,0,0,0,12,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,118,"            monthToUse = Math.abs(monthToUse);
",2,0,0,1,2,0,6,0,0,9,34,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,119,"            int remMonthToUse = monthToUse % iMax;
",6,1,0,0,0,0,0,0,0,7,38,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,121,"            if (remMonthToUse == 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,122,"                remMonthToUse = iMax;
",4,0,0,0,0,0,0,0,0,5,21,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,124,"            monthToUse = iMax - remMonthToUse + 1;
",6,2,0,0,0,0,0,0,0,9,38,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,126,"            if (monthToUse == 1) {
",2,1,0,1,3,0,0,0,0,3,22,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,127,"                yearToUse += 1;
",2,0,0,0,0,0,0,0,0,3,15,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,139,"            dayToUse = maxDay;
",4,0,0,0,0,0,0,0,0,5,18,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,151,"        int i_months = (int)months;
",4,0,0,1,2,0,0,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,152,"        if (i_months == months) {
",4,1,0,1,3,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,153,"            return add(instant, i_months);
",0,0,0,1,2,1,6,0,0,6,30,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,158,"        long timePart = iChronology.getMillisOfDay(instant);
",2,0,0,1,2,0,6,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,160,"        int thisYear = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,161,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);
",2,0,0,1,2,0,8,0,0,10,62,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,164,"        long monthToUse = thisMonth - 1 + months;
",6,2,0,0,0,0,0,0,0,8,41,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,165,"        if (monthToUse >= 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,166,"            yearToUse = thisYear + (monthToUse / iMax);
",8,2,0,1,2,0,0,0,0,11,43,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,167,"            monthToUse = (monthToUse % iMax) + 1;
",6,2,0,1,2,0,0,0,0,9,37,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,169,"            yearToUse = thisYear + (monthToUse / iMax) - 1;
",8,3,0,1,2,0,0,0,0,12,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,170,"            monthToUse = Math.abs(monthToUse);
",2,0,0,1,2,0,6,0,0,9,34,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,171,"            int remMonthToUse = (int)(monthToUse % iMax);
",6,1,0,2,4,0,0,0,0,7,45,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,172,"            if (remMonthToUse == 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,173,"                remMonthToUse = iMax;
",4,0,0,0,0,0,0,0,0,5,21,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,175,"            monthToUse = iMax - remMonthToUse + 1;
",6,2,0,0,0,0,0,0,0,9,38,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,176,"            if (monthToUse == 1) {
",2,1,0,1,3,0,0,0,0,3,22,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,177,"                yearToUse += 1;
",2,0,0,0,0,0,0,0,0,3,15,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,181,"        if (yearToUse < iChronology.getMinYear() ||
",2,2,0,1,3,0,4,0,0,8,43,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,184,"            throw new IllegalArgumentException
",0,0,0,0,0,0,0,2,0,2,34,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,188,"        int i_yearToUse = (int)yearToUse;
",4,0,0,1,2,0,0,0,0,4,33,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,189,"        int i_monthToUse = (int)monthToUse;
",4,0,0,1,2,0,0,0,0,4,35,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,191,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);
",2,0,0,1,2,0,10,0,0,12,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,192,"        int maxDay = iChronology.getDaysInYearMonth(i_yearToUse, i_monthToUse);
",2,0,0,1,2,0,8,0,0,10,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,193,"        if (dayToUse > maxDay) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,194,"            dayToUse = maxDay;
",4,0,0,0,0,0,0,0,0,5,18,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,197,"        long datePart =
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,199,"        return datePart + timePart;
",4,1,0,0,0,1,0,0,0,5,27,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,206,"        if (valueToAdd == 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,207,"            return values;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,209,"        if (DateTimeUtils.isContiguous(partial)) {
",0,0,0,2,5,0,6,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,210,"            long instant = 0L;
",2,0,0,0,0,0,0,0,0,2,18,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,211,"            for (int i = 0, isize = partial.size(); i < isize; i++) {
",10,1,0,2,5,0,4,0,0,16,57,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,212,"                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
",2,0,1,4,8,0,14,0,0,21,80,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,214,"            instant = add(instant, valueToAdd);
",2,0,0,1,2,0,6,0,0,9,35,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,215,"            return iChronology.get(partial, instant);
",0,0,0,1,2,1,8,0,0,8,41,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,217,"            return super.add(partial, fieldIndex, values, valueToAdd);
",10,0,0,1,2,1,0,0,0,10,58,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,232,"        return set(instant, FieldUtils.getWrappedValue(get(instant), months, MIN, iMax));
",0,0,0,3,6,1,18,0,0,18,81,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,237,"        if (minuendInstant < subtrahendInstant) {
",4,1,0,1,3,0,0,0,0,5,41,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,238,"            return -getDifference(subtrahendInstant, minuendInstant);
",0,0,0,1,2,1,6,0,0,7,57,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,241,"        int minuendYear = iChronology.getYear(minuendInstant);
",2,0,0,1,2,0,6,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,242,"        int minuendMonth = iChronology.getMonthOfYear(minuendInstant, minuendYear);
",2,0,0,1,2,0,8,0,0,10,75,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,243,"        int subtrahendYear = iChronology.getYear(subtrahendInstant);
",2,0,0,1,2,0,6,0,0,8,60,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,244,"        int subtrahendMonth = iChronology.getMonthOfYear(subtrahendInstant, subtrahendYear);
",2,0,0,1,2,0,8,0,0,10,84,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,246,"        long difference = (minuendYear - subtrahendYear) * ((long) iMax) + minuendMonth - subtrahendMonth;
",12,4,0,3,6,0,0,0,0,16,98,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,250,"        int minuendDom = iChronology.getDayOfMonth
",2,0,0,0,0,0,4,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,252,"        if (minuendDom == iChronology.getDaysInYearMonth(minuendYear, minuendMonth)) {
",2,1,0,2,5,0,8,0,0,11,78,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,254,"            int subtrahendDom = iChronology.getDayOfMonth
",2,0,0,0,0,0,4,0,0,6,45,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,256,"            if (subtrahendDom > minuendDom) {
",4,1,0,1,3,0,0,0,0,5,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,260,"                subtrahendInstant = iChronology.dayOfMonth().set(subtrahendInstant, minuendDom);
",2,0,0,2,4,0,10,0,0,13,80,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,265,"        long minuendRem = minuendInstant
",4,0,0,0,0,0,0,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,267,"        long subtrahendRem = subtrahendInstant
",4,0,0,0,0,0,0,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,270,"        if (minuendRem < subtrahendRem) {
",4,1,0,1,3,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,271,"            difference--;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,274,"        return difference;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,300,"            thisDom = maxDom;
",4,0,0,0,0,0,0,0,0,5,17,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,314,"        int thisYear = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,315,"        if (iChronology.isLeapYear(thisYear)) {
",0,0,0,2,5,0,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,316,"            return (iChronology.getMonthOfYear(instant, thisYear) == iLeapMonth);
",2,1,0,2,4,1,8,0,0,11,69,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,318,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,323,"        return isLeap(instant) ? 1 : 0;
",0,0,0,1,2,1,4,0,0,4,31,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,333,"        return MIN;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,338,"        return iMax;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,343,"        int year = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,344,"        int month = iChronology.getMonthOfYear(instant, year);
",2,0,0,1,2,0,8,0,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,345,"        return iChronology.getYearMonthMillis(year, month);
",0,0,0,1,2,1,8,0,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,350,"        return instant - roundFloor(instant);
",2,1,0,1,2,1,4,0,0,7,37,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,25,358,"        return iChronology.monthOfYear();
",0,0,0,1,2,1,4,0,0,4,33,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,25,91,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));
",0,0,0,2,4,1,10,0,0,10,84,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,25,118,"        if (minuendInstant < subtrahendInstant) {
",4,1,0,1,3,0,0,0,0,5,41,4,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,25,119,"            return -getDifferenceAsLong(subtrahendInstant, minuendInstant);
",0,0,0,1,2,1,6,0,0,7,63,6,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,25,122,"        long difference = (minuendInstant - subtrahendInstant) / iUnitMillis;
",8,2,0,1,2,0,0,0,0,10,69,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,25,123,"        if (add(subtrahendInstant, difference) < minuendInstant) {
",2,1,0,2,5,0,6,0,0,9,58,4,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,25,125,"                difference++;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,25,126,"            } while (add(subtrahendInstant, difference) <= minuendInstant);
",2,1,0,2,5,0,6,0,0,9,63,6,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,25,127,"            difference--;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,25,128,"        } else if (add(subtrahendInstant, difference) > minuendInstant) {
",2,1,0,2,6,0,6,0,0,9,65,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,25,130,"                difference--;
",2,0,0,0,0,0,0,0,0,3,13,9,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,25,131,"            } while (add(subtrahendInstant, difference) > minuendInstant);
",2,1,0,2,5,0,6,0,0,9,62,7,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,25,133,"        return difference;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,25,145,"        return iUnitMillis;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,25,156,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,25,164,"            return ImpreciseDateTimeField.this
",2,0,0,0,0,1,0,0,0,2,34,7,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,25,169,"            return ImpreciseDateTimeField.this
",2,0,0,0,0,1,0,0,0,2,34,7,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,25,174,"            return ImpreciseDateTimeField.this.add(instant, value) - instant;
",4,1,0,1,2,1,6,0,0,11,65,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,25,178,"            return ImpreciseDateTimeField.this.add(instant, value) - instant;
",4,1,0,1,2,1,6,0,0,11,65,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,25,182,"            return ImpreciseDateTimeField.this.add(instant, value);
",2,0,0,1,2,1,6,0,0,8,55,6,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,25,186,"            return ImpreciseDateTimeField.this.add(instant, value);
",2,0,0,1,2,1,6,0,0,8,55,6,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,25,190,"            return ImpreciseDateTimeField.this
",2,0,0,0,0,1,0,0,0,2,34,7,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,25,195,"            return ImpreciseDateTimeField.this
",2,0,0,0,0,1,0,0,0,2,34,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,25,49,"            throw new IllegalArgumentException(""The type must not be null"");
",0,0,0,1,2,0,0,2,0,4,64,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,25,59,"        return iType.getName();
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,25,79,"        return FieldUtils.safeToInt(getValueAsLong(duration));
",0,0,0,2,4,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,25,91,"        return duration / getUnitMillis();
",2,1,0,1,2,1,2,0,0,5,34,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,25,111,"        return FieldUtils.safeToInt(getValueAsLong(duration, instant));
",0,0,0,2,4,1,10,0,0,10,63,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,25,123,"        return value * getUnitMillis();  // safe
",2,1,0,1,2,1,2,0,0,5,40,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,25,135,"        return FieldUtils.safeMultiply(value, getUnitMillis());
",0,0,0,2,4,1,8,0,0,8,55,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,25,141,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));
",0,0,0,2,4,1,10,0,0,10,84,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,25,146,"        long otherMillis = otherField.getUnitMillis();
",2,0,0,1,2,0,4,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,25,147,"        long thisMillis = getUnitMillis();
",2,0,0,1,2,0,2,0,0,4,34,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,25,149,"        if (thisMillis == otherMillis) {
",4,1,0,1,3,0,0,0,0,5,32,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,25,150,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,25,152,"        if (thisMillis < otherMillis) {
",4,1,0,1,3,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,25,153,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,25,155,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,25,165,"        return ""DurationField["" + getName() + ']';
",0,1,0,2,4,1,2,0,0,5,42,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,25,38,"public abstract class BaseDurationField extends DurationField implements Serializable {
",2,0,0,0,1,2,0,4,0,8,87,1,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,25,54,"        return iChronology.getWeekOfWeekyear(instant);
",0,0,0,1,2,1,6,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,25,65,"        return super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY)
",8,2,0,1,2,1,0,0,0,10,71,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,25,70,"        return super.roundCeiling(instant + 3 * DateTimeConstants.MILLIS_PER_DAY)
",8,2,0,1,2,1,0,0,0,10,73,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,25,75,"        return super.remainder(instant + 3 * DateTimeConstants.MILLIS_PER_DAY);
",8,2,0,1,2,1,0,0,0,10,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,25,79,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,25,83,"        return 53;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,25,87,"        int weekyear = iChronology.getWeekyear(instant);
",2,0,0,1,2,0,6,0,0,8,48,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,25,88,"        return iChronology.getWeeksInYear(weekyear);
",0,0,0,1,2,1,6,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,25,92,"        if (partial.isSupported(DateTimeFieldType.weekyear())) {
",0,0,0,3,7,0,8,0,0,8,56,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,25,93,"            int weekyear = partial.get(DateTimeFieldType.weekyear());
",2,0,0,2,4,0,8,0,0,10,57,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,25,94,"            return iChronology.getWeeksInYear(weekyear);
",0,0,0,1,2,1,6,0,0,6,44,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,25,96,"        return 53;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,25,100,"        int size = partial.size();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,25,101,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,25,102,"            if (partial.getFieldType(i) == DateTimeFieldType.weekyear()) {
",0,1,0,3,7,0,10,0,0,11,62,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,25,103,"                int weekyear = values[i];
",2,0,1,1,2,0,0,0,0,6,25,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,25,104,"                return iChronology.getWeeksInYear(weekyear);
",0,0,0,1,2,1,6,0,0,6,44,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,25,107,"        return 53;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,25,111,"        return value > 52 ? getMaximumValue(instant) : 52;
",2,1,0,1,2,1,4,0,0,7,50,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,25,118,"        return iChronology.weekOfWeekyear();
",0,0,0,1,2,1,4,0,0,4,36,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,286,"                throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,9,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,294,"            return iTimeField ? iField.isPrecise() : iField.isPrecise() && this.iZone.isFixed();
",4,1,0,3,6,1,10,0,0,15,84,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,302,"            return iField.getValue(duration, addOffset(instant));
",0,0,0,2,4,1,10,0,0,10,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,306,"            return iField.getValueAsLong(duration, addOffset(instant));
",0,0,0,2,4,1,10,0,0,10,59,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,310,"            return iField.getMillis(value, addOffset(instant));
",0,0,0,2,4,1,10,0,0,10,51,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,314,"            return iField.getMillis(value, addOffset(instant));
",0,0,0,2,4,1,10,0,0,10,51,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,318,"            int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,319,"            instant = iField.add(instant + offset, value);
",6,1,0,1,2,0,6,0,0,14,46,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,320,"            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));
",6,1,0,2,4,1,4,0,0,11,79,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,324,"            int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,325,"            instant = iField.add(instant + offset, value);
",6,1,0,1,2,0,6,0,0,14,46,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,326,"            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));
",6,1,0,2,4,1,4,0,0,11,79,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,330,"            int offset = getOffsetToAdd(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,331,"            return iField.getDifference
",0,0,0,0,0,1,4,0,0,4,27,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,337,"            int offset = getOffsetToAdd(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,338,"            return iField.getDifferenceAsLong
",0,0,0,0,0,1,4,0,0,4,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,344,"            int offset = this.iZone.getOffset(instant);
",4,0,0,1,2,0,4,0,0,8,43,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,345,"            long sum = instant + offset;
",6,1,0,0,0,0,0,0,0,7,28,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,347,"            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {
",8,5,0,3,7,0,0,0,0,13,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,348,"                throw new ArithmeticException(""Adding time zone offset caused overflow"");
",0,0,0,1,2,0,0,2,0,3,73,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,350,"            return offset;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,354,"            int offset = this.iZone.getOffsetFromLocal(instant);
",4,0,0,1,2,0,4,0,0,8,52,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,355,"            long diff = instant - offset;
",6,1,0,0,0,0,0,0,0,7,29,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,357,"            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {
",8,5,0,3,7,0,0,0,0,13,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,358,"                throw new ArithmeticException(""Subtracting time zone offset caused overflow"");
",0,0,0,1,2,0,0,2,0,3,78,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,360,"            return offset;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,364,"            return iZone.convertUTCToLocal(instant);
",0,0,0,1,2,1,6,0,0,6,40,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,57,"            throw new IllegalArgumentException(""Must supply a chronology"");
",0,0,0,1,2,0,0,2,0,3,63,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,61,"            throw new IllegalArgumentException(""UTC chronology must not be null"");
",0,0,0,1,2,0,0,2,0,4,70,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,64,"            throw new IllegalArgumentException(""DateTimeZone must not be null"");
",0,0,0,1,2,0,0,2,0,4,68,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,90,"        return getBase();
",0,0,0,1,2,1,2,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,94,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,95,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,97,"        if (zone == getParam()) {
",2,1,0,2,5,0,2,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,98,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,100,"        if (zone == DateTimeZone.UTC) {
",6,1,0,1,3,0,0,0,0,7,31,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,101,"            return getBase();
",0,0,0,1,2,1,2,0,0,2,17,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,103,"        return new ZonedChronology(getBase(), zone);
",2,0,0,2,4,1,2,2,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,110,"        return localToUTC(getBase().getDateTimeMillis
",0,0,0,1,3,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,129,"        return localToUTC(getBase().getDateTimeMillis
",0,0,0,1,3,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,143,"            throw new IllegalArgumentException
",0,0,0,0,0,0,0,2,0,2,34,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,213,"            return field;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,216,"            return (DateTimeField)converted.get(field);
",0,0,0,2,4,1,6,2,0,8,43,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,237,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,238,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,240,"        if (obj instanceof ZonedChronology == false) {
",2,1,0,1,3,0,0,2,0,6,46,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,241,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,243,"        ZonedChronology chrono = (ZonedChronology) obj;
",4,0,0,1,2,0,0,4,0,8,47,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,244,"        return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,256,"        return 326565 + getZone().hashCode() * 11 + getBase().hashCode() * 7;
",0,4,0,4,8,1,8,0,0,12,69,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,265,"        return ""ZonedChronology["" + getBase() + "", "" + getZone().getID() + ']';
",0,1,0,4,8,1,6,0,0,10,71,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,391,"                throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,9,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,402,"            return iField.isLenient();
",0,0,0,1,2,1,4,0,0,4,26,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,406,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,407,"            return iField.get(localInstant);
",0,0,0,1,2,1,6,0,0,6,32,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,411,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,412,"            return iField.getAsText(localInstant, locale);
",0,0,0,1,2,1,8,0,0,8,46,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,416,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,417,"            return iField.getAsShortText(localInstant, locale);
",0,0,0,1,2,1,8,0,0,8,51,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,421,"            return iField.getAsText(fieldValue, locale);
",0,0,0,1,2,1,8,0,0,8,44,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,425,"            return iField.getAsShortText(fieldValue, locale);
",0,0,0,1,2,1,8,0,0,8,49,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,429,"            if (iTimeField) {
",2,0,0,1,3,0,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,430,"                int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,431,"                long localInstant = iField.add(instant + offset, value);
",6,1,0,1,2,0,6,0,0,13,56,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,432,"                return localInstant - offset;
",4,1,0,0,0,1,0,0,0,5,29,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,434,"               long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,435,"               localInstant = iField.add(localInstant, value);
",2,0,0,1,2,0,8,0,0,11,47,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,436,"               return iZone.convertLocalToUTC(localInstant, false, instant);
",0,0,0,1,2,1,8,0,0,9,61,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,441,"            if (iTimeField) {
",2,0,0,1,3,0,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,442,"                int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,443,"                long localInstant = iField.add(instant + offset, value);
",6,1,0,1,2,0,6,0,0,13,56,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,444,"                return localInstant - offset;
",4,1,0,0,0,1,0,0,0,5,29,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,446,"               long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,447,"               localInstant = iField.add(localInstant, value);
",2,0,0,1,2,0,8,0,0,11,47,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,448,"               return iZone.convertLocalToUTC(localInstant, false, instant);
",0,0,0,1,2,1,8,0,0,9,61,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,453,"            if (iTimeField) {
",2,0,0,1,3,0,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,454,"                int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,455,"                long localInstant = iField.addWrapField(instant + offset, value);
",6,1,0,1,2,0,6,0,0,13,65,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,456,"                return localInstant - offset;
",4,1,0,0,0,1,0,0,0,5,29,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,458,"                long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,459,"                localInstant = iField.addWrapField(localInstant, value);
",2,0,0,1,2,0,8,0,0,11,56,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,460,"                return iZone.convertLocalToUTC(localInstant, false, instant);
",0,0,0,1,2,1,8,0,0,9,61,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,465,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,466,"            localInstant = iField.set(localInstant, value);
",2,0,0,1,2,0,8,0,0,11,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,467,"            long result = iZone.convertLocalToUTC(localInstant, false, instant);
",2,0,0,1,2,0,8,0,0,11,68,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,468,"            if (get(result) != value) {
",2,1,0,2,5,0,4,0,0,7,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,469,"                throw new IllegalFieldValueException(iField.getType(), new Integer(value),
",2,0,0,2,5,0,4,4,0,10,74,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,474,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,479,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,480,"            localInstant = iField.set(localInstant, text, locale);
",2,0,0,1,2,0,10,0,0,13,54,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,481,"            return iZone.convertLocalToUTC(localInstant, false, instant);
",0,0,0,1,2,1,8,0,0,9,61,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,485,"            int offset = getOffsetToAdd(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,486,"            return iField.getDifference
",0,0,0,0,0,1,4,0,0,4,27,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,492,"            int offset = getOffsetToAdd(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,493,"            return iField.getDifferenceAsLong
",0,0,0,0,0,1,4,0,0,4,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,499,"            return iDurationField;
",2,0,0,0,0,1,0,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,503,"            return iRangeDurationField;
",2,0,0,0,0,1,0,0,0,2,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,507,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,508,"            return iField.isLeap(localInstant);
",0,0,0,1,2,1,6,0,0,6,35,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,512,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,513,"            return iField.getLeapAmount(localInstant);
",0,0,0,1,2,1,6,0,0,6,42,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,517,"            return iLeapDurationField;
",2,0,0,0,0,1,0,0,0,2,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,521,"            if (iTimeField) {
",2,0,0,1,3,0,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,522,"                int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,523,"                instant = iField.roundFloor(instant + offset);
",6,1,0,1,2,0,4,0,0,12,46,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,524,"                return instant - offset;
",4,1,0,0,0,1,0,0,0,5,24,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,526,"                long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,527,"                localInstant = iField.roundFloor(localInstant);
",2,0,0,1,2,0,6,0,0,9,47,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,528,"                return iZone.convertLocalToUTC(localInstant, false, instant);
",0,0,0,1,2,1,8,0,0,9,61,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,533,"            if (iTimeField) {
",2,0,0,1,3,0,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,534,"                int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,535,"                instant = iField.roundCeiling(instant + offset);
",6,1,0,1,2,0,4,0,0,12,48,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,536,"                return instant - offset;
",4,1,0,0,0,1,0,0,0,5,24,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,538,"                long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,539,"                localInstant = iField.roundCeiling(localInstant);
",2,0,0,1,2,0,6,0,0,9,49,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,540,"                return iZone.convertLocalToUTC(localInstant, false, instant);
",0,0,0,1,2,1,8,0,0,9,61,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,545,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,546,"            return iField.remainder(localInstant);
",0,0,0,1,2,1,6,0,0,6,38,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,550,"            return iField.getMinimumValue();
",0,0,0,1,2,1,4,0,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,554,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,555,"            return iField.getMinimumValue(localInstant);
",0,0,0,1,2,1,6,0,0,6,44,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,559,"            return iField.getMinimumValue(instant);
",0,0,0,1,2,1,6,0,0,6,39,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,563,"            return iField.getMinimumValue(instant, values);
",0,0,0,1,2,1,8,0,0,8,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,567,"            return iField.getMaximumValue();
",0,0,0,1,2,1,4,0,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,571,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,572,"            return iField.getMaximumValue(localInstant);
",0,0,0,1,2,1,6,0,0,6,44,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,576,"            return iField.getMaximumValue(instant);
",0,0,0,1,2,1,6,0,0,6,39,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,580,"            return iField.getMaximumValue(instant, values);
",0,0,0,1,2,1,8,0,0,8,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,584,"            return iField.getMaximumTextLength(locale);
",0,0,0,1,2,1,6,0,0,6,43,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,588,"            return iField.getMaximumShortTextLength(locale);
",0,0,0,1,2,1,6,0,0,6,48,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,592,"            int offset = this.iZone.getOffset(instant);
",4,0,0,1,2,0,4,0,0,8,43,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,593,"            long sum = instant + offset;
",6,1,0,0,0,0,0,0,0,7,28,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,595,"            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {
",8,5,0,3,7,0,0,0,0,13,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,596,"                throw new ArithmeticException(""Adding time zone offset caused overflow"");
",0,0,0,1,2,0,0,2,0,3,73,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,25,598,"            return offset;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,690,"            throw new IllegalArgumentException(""Id must not be null"");
",0,0,0,1,2,0,0,2,0,4,58,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,133,"        DateTimeZone zone = cDefault;
",4,0,0,0,0,0,0,2,0,6,29,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,134,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,135,"            synchronized(DateTimeZone.class) {
",0,0,0,1,3,0,0,2,0,2,34,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,136,"                zone = cDefault;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,137,"                if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,138,"                    DateTimeZone temp = null;
",2,0,0,0,0,0,0,2,0,4,25,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,141,"                            String id = System.getProperty(""user.timezone"");
",2,0,0,1,2,0,4,2,0,9,48,14,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,142,"                            if (id != null) {  // null check avoids stack overflow
",2,1,0,1,3,0,0,0,0,3,54,14,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,143,"                                temp = forID(id);
",2,0,0,1,2,0,4,0,0,7,17,16,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,147,"                        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,145,"                        } catch (RuntimeException ex) {
",2,0,0,1,4,0,0,2,0,4,31,14,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,148,"                        if (temp == null) {
",2,1,0,1,3,0,0,0,0,3,19,12,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,149,"                            temp = forTimeZone(TimeZone.getDefault());
",2,0,0,2,4,0,6,0,0,9,42,14,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,153,"                    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,151,"                    } catch (IllegalArgumentException ex) {
",2,0,0,1,4,0,0,2,0,4,39,12,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,154,"                    if (temp == null) {
",2,1,0,1,3,0,0,0,0,3,19,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,155,"                        temp = UTC;
",4,0,0,0,0,0,0,0,0,5,11,12,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,157,"                    cDefault = zone = temp;
",6,0,0,0,0,0,0,0,0,8,23,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,159,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,161,"        return zone;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,174,"        SecurityManager sm = System.getSecurityManager();
",2,0,0,1,2,0,4,2,0,8,49,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,175,"        if (sm != null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,176,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setDefault""));
",0,0,0,2,4,0,4,2,0,7,70,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,178,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,179,"            throw new IllegalArgumentException(""The datetime zone must not be null"");
",0,0,0,1,2,0,0,2,0,4,73,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,181,"        synchronized(DateTimeZone.class) {
",0,0,0,1,3,0,0,2,0,2,34,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,182,"            cDefault = zone;
",4,0,0,0,0,0,0,0,0,5,16,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,183,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,184,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,205,"            return getDefault();
",0,0,0,1,2,1,2,0,0,2,20,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,208,"            return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,214,"        if (id.startsWith(""+"") || id.startsWith(""-"")) {
",0,1,0,3,7,0,8,0,0,11,47,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,215,"            int offset = parseOffset(id);
",2,0,0,1,2,0,4,0,0,6,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,216,"            if (offset == 0L) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,217,"                return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,219,"                id = printOffset(offset);
",2,0,0,1,2,0,4,0,0,7,25,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,220,"                return fixedOffsetZone(id, offset);
",0,0,0,1,2,1,6,0,0,6,35,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,223,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");
",2,1,0,1,2,0,0,2,0,7,90,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,237,"        return forOffsetHoursMinutes(hoursOffset, 0);
",0,0,0,1,2,1,4,0,0,4,45,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,254,"        if (hoursOffset == 0 && minutesOffset == 0) {
",4,3,0,1,3,0,0,0,0,7,45,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,255,"            return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,257,"        if (minutesOffset < 0 || minutesOffset > 59) {
",4,3,0,1,3,0,0,0,0,7,46,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,258,"            throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);
",2,1,0,1,2,0,0,2,0,6,77,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,260,"        int offset = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,262,"            int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);
",2,0,0,1,2,0,6,0,0,8,62,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,263,"            if (hoursInMinutes < 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,264,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);
",4,0,0,1,2,0,6,0,0,12,67,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,266,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);
",2,0,0,1,2,0,8,0,0,11,66,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,268,"            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
",6,0,0,1,2,0,6,0,0,13,85,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,271,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,269,"        } catch (ArithmeticException ex) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,270,"            throw new IllegalArgumentException(""Offset is too large"");
",0,0,0,1,2,0,0,2,0,3,58,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,272,"        return forOffsetMillis(offset);
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,282,"        String id = printOffset(millisOffset);
",2,0,0,1,2,0,4,2,0,8,38,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,283,"        return fixedOffsetZone(id, millisOffset);
",0,0,0,1,2,1,6,0,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,302,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,303,"            return getDefault();
",0,0,0,1,2,1,2,0,0,2,20,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,305,"        final String id = zone.getID();
",2,0,0,1,2,1,4,2,0,9,31,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,306,"        if (id.equals(""UTC"")) {
",0,0,0,2,5,0,4,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,307,"            return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,311,"        DateTimeZone dtz = null;
",2,0,0,0,0,0,0,2,0,4,24,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,312,"        String convId = getConvertedId(id);
",2,0,0,1,2,0,4,2,0,8,35,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,313,"        if (convId != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,314,"            dtz = cProvider.getZone(convId);
",2,0,0,1,2,0,6,0,0,9,32,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,316,"        if (dtz == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,317,"            dtz = cProvider.getZone(id);
",2,0,0,1,2,0,6,0,0,9,28,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,319,"        if (dtz != null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,320,"            return dtz;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,324,"        if (convId == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,325,"            convId = zone.getDisplayName();
",2,0,0,1,2,0,4,0,0,7,31,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,326,"            if (convId.startsWith(""GMT+"") || convId.startsWith(""GMT-"")) {
",0,1,0,3,7,0,8,0,0,11,61,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,327,"                convId = convId.substring(3);
",2,0,0,1,2,0,4,0,0,7,29,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,328,"                int offset = parseOffset(convId);
",2,0,0,1,2,0,4,0,0,6,33,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,329,"                if (offset == 0L) {
",2,1,0,1,3,0,0,0,0,3,19,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,330,"                    return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,11,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,332,"                    convId = printOffset(offset);
",2,0,0,1,2,0,4,0,0,7,29,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,333,"                    return fixedOffsetZone(convId, offset);
",0,0,0,1,2,1,6,0,0,6,39,11,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,337,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");
",2,1,0,1,2,0,0,2,0,7,90,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,349,"        if (offset == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,350,"            return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,352,"        if (iFixedOffsetCache == null) {
",2,1,0,1,3,0,0,0,0,3,32,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,353,"            iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();
",2,0,0,1,2,0,0,8,0,11,71,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,356,"        Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);
",2,0,0,1,2,0,6,4,0,12,56,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,357,"        if (ref != null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,358,"            zone = ref.get();
",2,0,0,1,2,0,4,0,0,7,17,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,359,"            if (zone != null) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,360,"                return zone;
",2,0,0,0,0,1,0,0,0,2,12,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,363,"        zone = new FixedDateTimeZone(id, null, offset, offset);
",8,0,0,1,2,0,0,2,0,12,55,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,364,"        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));
",2,0,0,2,4,0,6,4,0,12,65,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,365,"        return zone;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,374,"        return cAvailableIDs;
",2,0,0,0,0,1,0,0,0,2,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,387,"        return cProvider;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,401,"        SecurityManager sm = System.getSecurityManager();
",2,0,0,1,2,0,4,2,0,8,49,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,402,"        if (sm != null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,403,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setProvider""));
",0,0,0,2,4,0,4,2,0,7,71,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,405,"        setProvider0(provider);
",0,0,0,1,2,0,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,406,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,420,"            throw new IllegalArgumentException
",0,0,0,0,0,0,0,2,0,2,34,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,424,"            throw new IllegalArgumentException(""The provider doesn't support UTC"");
",0,0,0,1,2,0,0,2,0,3,71,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,427,"            throw new IllegalArgumentException(""Invalid UTC zone provided"");
",0,0,0,1,2,0,0,2,0,3,64,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,450,"                    provider = (Provider) Class.forName(providerClass).newInstance();
",2,0,0,3,6,0,8,2,0,13,65,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,454,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,451,"                } catch (Exception ex) {
",2,0,0,1,4,0,0,2,0,4,24,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,452,"                    Thread thread = Thread.currentThread();
",2,0,0,1,2,0,4,2,0,8,39,11,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,453,"                    thread.getThreadGroup().uncaughtException(thread, ex);
",0,0,0,2,4,0,10,0,0,10,54,12,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,456,"        } catch (SecurityException ex) {
",2,0,0,1,4,0,0,2,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,463,"            } catch (Exception ex) {
",2,0,0,1,4,0,0,2,0,4,24,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,464,"                Thread thread = Thread.currentThread();
",2,0,0,1,2,0,4,2,0,8,39,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,465,"                thread.getThreadGroup().uncaughtException(thread, ex);
",0,0,0,2,4,0,10,0,0,10,54,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,470,"            provider = new UTCProvider();
",2,0,0,1,2,0,0,2,0,5,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,486,"        return cNameProvider;
",2,0,0,0,0,1,0,0,0,2,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,500,"        SecurityManager sm = System.getSecurityManager();
",2,0,0,1,2,0,4,2,0,8,49,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,501,"        if (sm != null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,502,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setNameProvider""));
",0,0,0,2,4,0,4,2,0,7,75,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,504,"        setNameProvider0(nameProvider);
",0,0,0,1,2,0,4,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,505,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,534,"                    nameProvider = (NameProvider) Class.forName(providerClass).newInstance();
",2,0,0,3,6,0,8,2,0,13,73,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,538,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,535,"                } catch (Exception ex) {
",2,0,0,1,4,0,0,2,0,4,24,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,536,"                    Thread thread = Thread.currentThread();
",2,0,0,1,2,0,4,2,0,8,39,11,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,537,"                    thread.getThreadGroup().uncaughtException(thread, ex);
",0,0,0,2,4,0,10,0,0,10,54,12,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,540,"        } catch (SecurityException ex) {
",2,0,0,1,4,0,0,2,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,559,"        Map<String, String> map = cZoneIdConversion;
",4,0,0,0,0,0,0,6,0,10,44,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,560,"        if (map == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,562,"            map = new HashMap<String, String>();
",2,0,0,1,2,0,0,6,0,9,36,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,563,"            map.put(""GMT"", ""UTC"");
",0,0,0,1,2,0,4,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,564,"            map.put(""MIT"", ""Pacific/Apia"");
",0,0,0,1,2,0,4,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,565,"            map.put(""HST"", ""Pacific/Honolulu"");
",0,0,0,1,2,0,4,0,0,6,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,566,"            map.put(""AST"", ""America/Anchorage"");
",0,0,0,1,2,0,4,0,0,6,36,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,567,"            map.put(""PST"", ""America/Los_Angeles"");
",0,0,0,1,2,0,4,0,0,6,38,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,568,"            map.put(""MST"", ""America/Denver"");
",0,0,0,1,2,0,4,0,0,6,33,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,569,"            map.put(""PNT"", ""America/Phoenix"");
",0,0,0,1,2,0,4,0,0,6,34,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,570,"            map.put(""CST"", ""America/Chicago"");
",0,0,0,1,2,0,4,0,0,6,34,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,571,"            map.put(""EST"", ""America/New_York"");
",0,0,0,1,2,0,4,0,0,6,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,572,"            map.put(""IET"", ""America/Indianapolis"");
",0,0,0,1,2,0,4,0,0,6,39,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,573,"            map.put(""PRT"", ""America/Puerto_Rico"");
",0,0,0,1,2,0,4,0,0,6,38,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,574,"            map.put(""CNT"", ""America/St_Johns"");
",0,0,0,1,2,0,4,0,0,6,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,575,"            map.put(""AGT"", ""America/Buenos_Aires"");
",0,0,0,1,2,0,4,0,0,6,39,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,576,"            map.put(""BET"", ""America/Sao_Paulo"");
",0,0,0,1,2,0,4,0,0,6,36,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,577,"            map.put(""WET"", ""Europe/London"");
",0,0,0,1,2,0,4,0,0,6,32,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,578,"            map.put(""ECT"", ""Europe/Paris"");
",0,0,0,1,2,0,4,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,579,"            map.put(""ART"", ""Africa/Cairo"");
",0,0,0,1,2,0,4,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,580,"            map.put(""CAT"", ""Africa/Harare"");
",0,0,0,1,2,0,4,0,0,6,32,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,581,"            map.put(""EET"", ""Europe/Bucharest"");
",0,0,0,1,2,0,4,0,0,6,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,582,"            map.put(""EAT"", ""Africa/Addis_Ababa"");
",0,0,0,1,2,0,4,0,0,6,37,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,583,"            map.put(""MET"", ""Asia/Tehran"");
",0,0,0,1,2,0,4,0,0,6,30,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,584,"            map.put(""NET"", ""Asia/Yerevan"");
",0,0,0,1,2,0,4,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,585,"            map.put(""PLT"", ""Asia/Karachi"");
",0,0,0,1,2,0,4,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,586,"            map.put(""IST"", ""Asia/Calcutta"");
",0,0,0,1,2,0,4,0,0,6,32,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,587,"            map.put(""BST"", ""Asia/Dhaka"");
",0,0,0,1,2,0,4,0,0,6,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,588,"            map.put(""VST"", ""Asia/Saigon"");
",0,0,0,1,2,0,4,0,0,6,30,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,589,"            map.put(""CTT"", ""Asia/Shanghai"");
",0,0,0,1,2,0,4,0,0,6,32,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,590,"            map.put(""JST"", ""Asia/Tokyo"");
",0,0,0,1,2,0,4,0,0,6,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,591,"            map.put(""ACT"", ""Australia/Darwin"");
",0,0,0,1,2,0,4,0,0,6,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,592,"            map.put(""AET"", ""Australia/Sydney"");
",0,0,0,1,2,0,4,0,0,6,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,593,"            map.put(""SST"", ""Pacific/Guadalcanal"");
",0,0,0,1,2,0,4,0,0,6,38,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,594,"            map.put(""NST"", ""Pacific/Auckland"");
",0,0,0,1,2,0,4,0,0,6,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,595,"            cZoneIdConversion = map;
",4,0,0,0,0,0,0,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,597,"        return map.get(id);
",0,0,0,1,2,1,6,0,0,6,19,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,603,"        Chronology chrono = new BaseChronology() {
",2,0,0,1,3,0,0,4,0,6,42,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,617,"        return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);
",0,0,0,4,8,1,10,0,0,11,72,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,630,"        StringBuffer buf = new StringBuffer();
",2,0,0,1,2,0,0,4,0,6,38,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,631,"        if (offset >= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,632,"            buf.append('+');
",0,0,0,1,2,0,4,0,0,5,16,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,634,"            buf.append('-');
",0,0,0,1,2,0,4,0,0,5,16,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,635,"            offset = -offset;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,638,"        int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,0,0,0,0,0,0,9,55,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,639,"        FormatUtils.appendPaddedInteger(buf, hours, 2);
",0,0,0,1,2,0,8,0,0,8,47,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,640,"        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,1,2,0,0,0,0,10,58,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,642,"        int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,9,59,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,643,"        buf.append(':');
",0,0,0,1,2,0,4,0,0,5,16,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,644,"        FormatUtils.appendPaddedInteger(buf, minutes, 2);
",0,0,0,1,2,0,8,0,0,8,49,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,645,"        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,10,56,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,646,"        if (offset == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,647,"            return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,650,"        int seconds = offset / DateTimeConstants.MILLIS_PER_SECOND;
",8,1,0,0,0,0,0,0,0,9,59,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,651,"        buf.append(':');
",0,0,0,1,2,0,4,0,0,5,16,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,652,"        FormatUtils.appendPaddedInteger(buf, seconds, 2);
",0,0,0,1,2,0,8,0,0,8,49,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,653,"        offset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;
",8,1,0,0,0,0,0,0,0,10,56,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,654,"        if (offset == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,655,"            return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,658,"        buf.append('.');
",0,0,0,1,2,0,4,0,0,5,16,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,659,"        FormatUtils.appendPaddedInteger(buf, offset, 3);
",0,0,0,1,2,0,8,0,0,8,48,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,660,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,669,"        if (cOffsetFormatter == null) {
",2,1,0,1,3,0,0,0,0,3,31,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,670,"            cOffsetFormatter = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,49,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,674,"        return cOffsetFormatter;
",2,0,0,0,0,1,0,0,0,2,24,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,728,"        return getShortName(instant, null);
",0,0,0,1,2,1,4,0,0,5,35,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,743,"        if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,744,"            locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,746,"        String nameKey = getNameKey(instant);
",2,0,0,1,2,0,4,2,0,8,37,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,747,"        if (nameKey == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,748,"            return iID;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,750,"        String name = cNameProvider.getShortName(locale, iID, nameKey);
",2,0,0,1,2,0,10,2,0,14,63,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,751,"        if (name != null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,752,"            return name;
",2,0,0,0,0,1,0,0,0,2,12,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,754,"        return printOffset(getOffset(instant));
",0,0,0,2,4,1,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,768,"        return getName(instant, null);
",0,0,0,1,2,1,4,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,783,"        if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,784,"            locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,786,"        String nameKey = getNameKey(instant);
",2,0,0,1,2,0,4,2,0,8,37,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,787,"        if (nameKey == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,788,"            return iID;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,790,"        String name = cNameProvider.getName(locale, iID, nameKey);
",2,0,0,1,2,0,10,2,0,14,58,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,791,"        if (name != null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,792,"            return name;
",2,0,0,0,0,1,0,0,0,2,12,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,794,"        return printOffset(getOffset(instant));
",0,0,0,2,4,1,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,812,"        if (instant == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,813,"            return getOffset(DateTimeUtils.currentTimeMillis());
",0,0,0,2,4,1,6,0,0,6,52,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,815,"        return getOffset(instant.getMillis());
",0,0,0,2,4,1,6,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,843,"        return getOffset(instant) == getStandardOffset(instant);
",0,1,0,2,4,1,8,0,0,9,56,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,896,"                    return offsetLocal;
",2,0,0,0,0,1,0,0,0,2,19,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,914,"        int offset = getOffset(instantUTC);
",2,0,0,1,2,0,4,0,0,6,35,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,915,"        long instantLocal = instantUTC + offset;
",6,1,0,0,0,0,0,0,0,7,40,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,917,"        if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {
",8,5,0,3,7,0,0,0,0,13,68,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,918,"            throw new ArithmeticException(""Adding time zone offset caused overflow"");
",0,0,0,1,2,0,0,2,0,3,73,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,920,"        return instantLocal;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,941,"        int offsetOriginal = getOffset(originalInstantUTC);
",2,0,0,1,2,0,4,0,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,942,"        long instantUTC = instantLocal - offsetOriginal;
",6,1,0,0,0,0,0,0,0,7,48,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,943,"        int offsetLocalFromOriginal = getOffset(instantUTC);
",2,0,0,1,2,0,4,0,0,6,52,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,944,"        if (offsetLocalFromOriginal == offsetOriginal) {
",4,1,0,1,3,0,0,0,0,5,48,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,945,"            return instantUTC;
",2,0,0,0,0,1,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,947,"        return convertLocalToUTC(instantLocal, strict);
",0,0,0,1,2,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,964,"        int offsetLocal = getOffset(instantLocal);
",2,0,0,1,2,0,4,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,966,"        int offset = getOffset(instantLocal - offsetLocal);
",6,1,0,1,2,0,2,0,0,9,51,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,968,"        if (offsetLocal != offset) {
",4,1,0,1,3,0,0,0,0,5,28,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,972,"            if (strict || offsetLocal < 0) {
",4,2,0,1,3,0,0,0,0,6,32,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,974,"                long nextLocal = nextTransition(instantLocal - offsetLocal);
",6,1,0,1,2,0,2,0,0,9,60,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,975,"                if (nextLocal == (instantLocal - offsetLocal)) {
",6,2,0,2,5,0,0,0,0,8,48,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,976,"                    nextLocal = Long.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,7,27,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,978,"                long nextAdjusted = nextTransition(instantLocal - offset);
",6,1,0,1,2,0,2,0,0,9,58,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,979,"                if (nextAdjusted == (instantLocal - offset)) {
",6,2,0,2,5,0,0,0,0,8,46,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,980,"                    nextAdjusted = Long.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,7,30,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,982,"                if (nextLocal != nextAdjusted) {
",4,1,0,1,3,0,0,0,0,5,32,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,984,"                    if (strict) {
",2,0,0,1,3,0,0,0,0,2,13,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,986,"                        throw new IllegalArgumentException(""Illegal instant due to time zone offset transition: "" +
",0,1,0,0,1,0,0,2,0,4,91,13,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,993,"                        offset = offsetLocal;
",4,0,0,0,0,0,0,0,0,5,21,12,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,999,"        long instantUTC = instantLocal - offset;
",6,1,0,0,0,0,0,0,0,7,40,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,1001,"        if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {
",8,5,0,3,7,0,0,0,0,13,69,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,1002,"            throw new ArithmeticException(""Subtracting time zone offset caused overflow"");
",0,0,0,1,2,0,0,2,0,3,78,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,1004,"        return instantUTC;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,1018,"        if (newZone == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,1019,"            newZone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,36,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,1021,"        if (newZone == this) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,1022,"            return oldInstant;
",2,0,0,0,0,1,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,1024,"        long instantLocal = oldInstant + getOffset(oldInstant);
",4,1,0,1,2,0,4,0,0,9,55,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,1025,"        return instantLocal - newZone.getOffsetFromLocal(instantLocal);
",2,1,0,1,2,1,6,0,0,9,63,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,1135,"        if (isFixed()) {
",0,0,0,2,5,0,2,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,1136,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,1139,"            localDateTime.toDateTime(this);
",0,0,0,1,2,0,4,0,0,4,31,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,1140,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,1141,"        } catch (IllegalArgumentException ex) {
",2,0,0,1,4,0,0,2,0,4,39,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,1142,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,1183,"        return java.util.TimeZone.getTimeZone(iID);
",6,0,0,1,2,1,4,0,0,10,43,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,1208,"        return getID();
",0,0,0,1,2,1,2,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,1218,"        return new Stub(iID);
",2,0,0,1,2,1,0,2,0,4,21,5,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,25,216,"        return iName;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,25,234,"        return getField(chronology).isSupported();
",0,0,0,2,4,1,6,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,25,243,"        return getName();
",0,0,0,1,2,1,2,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,25,45,"        int year = getWrappedField().get(instant);
",2,0,0,2,4,0,6,0,0,8,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,25,46,"        if (year <= 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,25,47,"            year = 1 - year;
",4,1,0,0,0,0,0,0,0,6,16,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,25,49,"        return year;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,25,53,"        return getWrappedField().add(instant, years);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,25,57,"        return getWrappedField().add(instant, years);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,25,61,"        return getWrappedField().addWrapField(instant, years);
",0,0,0,2,4,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,25,65,"        return getWrappedField().addWrapField(instant, fieldIndex, values, years);
",0,0,0,2,4,1,12,0,0,12,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,25,69,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,25,73,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,80,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,25,85,"        FieldUtils.verifyValueBounds(this, year, 1, getMaximumValue());
",0,0,0,2,4,0,8,0,0,8,63,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,25,86,"        if (iChronology.getYear(instant) <= 0) {
",0,1,0,2,5,0,6,0,0,7,40,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,25,87,"            year = 1 - year;
",4,1,0,0,0,0,0,0,0,6,16,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,25,89,"        return super.set(instant, year);
",6,0,0,1,2,1,0,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,25,101,"        return getWrappedField().roundFloor(instant);
",0,0,0,2,4,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,25,105,"        return getWrappedField().roundCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,25,109,"        return getWrappedField().remainder(instant);
",0,0,0,2,4,1,6,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,25,116,"        return iChronology.yearOfEra();
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,25,56,"            throw new IllegalArgumentException(""The field must not be null"");
",0,0,0,1,2,0,0,2,0,4,65,6,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,25,59,"            throw new IllegalArgumentException(""The field must be supported"");
",0,0,0,1,2,0,0,2,0,3,66,7,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,25,74,"        return iField.isLenient();
",0,0,0,1,2,1,4,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,25,78,"        return iField.get(instant);
",0,0,0,1,2,1,6,0,0,6,27,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,25,82,"        return iField.set(instant, value);
",0,0,0,1,2,1,8,0,0,8,34,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,25,94,"        return iField.getMinimumValue();
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,25,98,"        return iField.getMaximumValue();
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,25,102,"        return iField.roundFloor(instant);
",0,0,0,1,2,1,6,0,0,6,34,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,129,"        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];
",2,1,1,1,2,1,0,0,0,5,43,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,148,"        int minuendYear = getYear(minuendInstant);
",2,0,0,1,2,0,4,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,149,"        int subtrahendYear = getYear(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,152,"        long minuendRem = minuendInstant - getYearMillis(minuendYear);
",4,1,0,1,2,0,4,0,0,9,62,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,153,"        long subtrahendRem = subtrahendInstant - getYearMillis(subtrahendYear);
",4,1,0,1,2,0,4,0,0,9,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,156,"        if (subtrahendRem >= FEB_29) {
",4,1,0,1,3,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,157,"            if (isLeapYear(subtrahendYear)) {
",0,0,0,2,5,0,4,0,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,158,"                if (!isLeapYear(minuendYear)) {
",0,0,0,2,5,0,4,0,0,5,31,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,159,"                    subtrahendRem -= DateTimeConstants.MILLIS_PER_DAY;
",6,0,0,0,0,0,0,0,0,7,50,10,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,161,"            } else if (minuendRem >= FEB_29 && isLeapYear(minuendYear)) {
",4,2,0,2,6,0,4,0,0,10,61,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,162,"                minuendRem -= DateTimeConstants.MILLIS_PER_DAY;
",6,0,0,0,0,0,0,0,0,7,47,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,166,"        int difference = minuendYear - subtrahendYear;
",6,1,0,0,0,0,0,0,0,7,46,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,167,"        if (minuendRem < subtrahendRem) {
",4,1,0,1,3,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,168,"            difference--;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,170,"        return difference;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,182,"                if (!isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,5,24,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,25,184,"                    dayOfYear--;
",2,0,0,0,0,0,0,0,0,3,12,10,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,90,"        return getInstance(DateTimeZone.getDefault(), 4);
",0,0,0,2,4,1,6,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,112,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,123,"            } catch (ArrayIndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,44,8,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,124,"                throw new IllegalArgumentException
",0,0,0,0,0,0,0,2,0,2,34,11,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,131,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);
",6,0,0,1,2,0,4,0,0,11,59,10,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,132,"                    chrono = new GregorianChronology
",2,0,0,0,0,0,0,2,0,5,32,10,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,155,"        Chronology base = getBase();
",2,0,0,1,2,0,2,2,0,6,28,4,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,156,"        int minDays = getMinimumDaysInFirstWeek();
",2,0,0,1,2,0,2,0,0,4,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,157,"        minDays = (minDays == 0 ? 4 : minDays);  // handle rename of BaseGJChronology
",6,1,0,1,2,0,0,0,0,8,77,4,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,158,"        return base == null ?
",2,1,0,0,0,1,0,0,0,3,21,5,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,171,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,181,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,182,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,184,"        if (zone == getZone()) {
",2,1,0,2,5,0,2,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,185,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,187,"        return getInstance(zone);
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,25,209,"            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;
",8,7,0,4,8,0,0,0,0,16,71,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,25,79,"        return iType;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,25,83,"        return iType.getName();
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,25,101,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,25,110,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,25,119,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,25,128,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,25,137,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,25,146,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,25,155,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,25,164,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,25,173,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,25,182,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,25,191,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,25,200,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,25,209,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,25,227,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,25,238,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,25,239,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,25,240,"        } else if (obj instanceof UnsupportedDurationField) {
",2,0,0,1,4,0,0,2,0,4,53,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,25,241,"            UnsupportedDurationField other = (UnsupportedDurationField) obj;
",4,0,0,1,2,0,0,4,0,8,64,7,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,25,242,"            if (other.getName() == null) {
",0,1,0,2,5,0,4,0,0,5,30,7,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,25,243,"                return (getName() == null);
",0,1,0,2,4,1,2,0,0,4,27,10,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,25,245,"            return (other.getName().equals(getName()));
",0,0,0,4,8,1,8,0,0,8,43,9,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,25,247,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,25,256,"        return getName().hashCode();
",0,0,0,2,4,1,4,0,0,4,28,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,25,265,"        return ""UnsupportedDurationField["" + getName() + ']';
",0,1,0,2,4,1,2,0,0,5,53,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,25,272,"        return getInstance(iType);
",0,0,0,1,2,1,4,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,25,276,"        return new UnsupportedOperationException(iType + "" field is unsupported"");
",2,1,0,1,2,1,0,2,0,6,74,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,25,32,"public final class UnsupportedDurationField extends DurationField implements Serializable {
",2,0,0,0,1,2,0,4,0,8,91,1,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,82,"    private UnsupportedDateTimeField(DateTimeFieldType type, DurationField durationField) {
",6,0,0,1,3,1,0,4,0,11,87,2,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,83,"        if (type == null || durationField == null) {
",4,3,0,1,3,0,0,0,0,7,44,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,84,"            throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,8,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,86,"        iType = type;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,87,"        iDurationField = durationField;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,88,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,55,"        if (cCache == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,56,"            cCache = new HashMap<DateTimeFieldType, UnsupportedDateTimeField>(7);
",2,0,0,1,2,0,0,6,0,9,69,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,57,"            field = null;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,59,"            field = cCache.get(type);
",2,0,0,1,2,0,6,0,0,9,25,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,60,"            if (field != null && field.getDurationField() != durationField) {
",4,3,0,2,5,0,4,0,0,11,65,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,61,"                field = null;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,64,"        if (field == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,65,"            field = new UnsupportedDateTimeField(type, durationField);
",6,0,0,1,2,0,0,2,0,9,58,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,66,"            cCache.put(type, field);
",0,0,0,1,2,0,8,0,0,8,24,7,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,68,"        return field;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,95,"        return iType;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,99,"        return iType.getName();
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,108,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,117,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,126,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,135,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,144,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,153,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,162,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,171,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,180,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,189,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,198,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,207,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,216,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,225,"        return getDurationField().add(instant, value);
",0,0,0,2,4,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,234,"        return getDurationField().add(instant, value);
",0,0,0,2,4,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,243,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,252,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,261,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,270,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,279,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,75,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,288,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,81,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,297,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,306,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,315,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,324,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,333,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,343,"        return iDurationField;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,352,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,361,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,370,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,379,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,388,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,397,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,406,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,415,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,424,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,433,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,442,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,451,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,460,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,469,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,478,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,487,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,496,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,505,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,514,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,523,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,533,"        return ""UnsupportedDateTimeField"";
",0,0,0,0,0,1,0,0,0,1,34,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,540,"        return getInstance(iType, iDurationField);
",0,0,0,1,2,1,6,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,25,544,"        return new UnsupportedOperationException(iType + "" field is unsupported"");
",2,1,0,1,2,1,0,2,0,6,74,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,25,76,"        return duration / iUnitMillis;  // safe
",4,1,0,0,0,1,0,0,0,5,39,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,25,88,"        return value * iUnitMillis;  // safe
",4,1,0,0,0,1,0,0,0,5,36,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,25,100,"        return FieldUtils.safeMultiply(value, iUnitMillis);
",0,0,0,1,2,1,8,0,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,25,109,"        long addition = FieldUtils.safeMultiply(value, iUnitMillis);
",2,0,0,1,2,0,8,0,0,10,60,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,25,110,"        return FieldUtils.safeAdd(instant, addition);
",0,0,0,1,2,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,25,114,"        long difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);
",2,0,0,1,2,0,8,0,0,10,77,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,25,115,"        return difference / iUnitMillis;
",4,1,0,0,0,1,0,0,0,5,32,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,25,127,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,25,128,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,25,129,"        } else if (obj instanceof PreciseDurationField) {
",2,0,0,1,4,0,0,2,0,4,49,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,25,130,"            PreciseDurationField other = (PreciseDurationField) obj;
",4,0,0,1,2,0,0,4,0,8,56,7,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,25,131,"            return (getType() == other.getType()) && (iUnitMillis == other.iUnitMillis);
",6,3,0,4,8,1,6,0,0,15,76,7,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,25,133,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,25,60,"            throw new IllegalArgumentException(""Range duration field must be precise"");
",0,0,0,1,2,0,0,2,0,3,75,7,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,25,66,"            throw new IllegalArgumentException(""The effective range must be at least 2"");
",0,0,0,1,2,0,0,2,0,3,77,7,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,25,82,"            return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);
",6,5,0,5,10,1,2,0,0,13,71,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,25,95,"        int thisValue = get(instant);
",2,0,0,1,2,0,4,0,0,6,29,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,25,96,"        int wrappedValue = FieldUtils.getWrappedValue
",2,0,0,0,0,0,4,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,25,99,"        return instant + (wrappedValue - thisValue) * getUnitMillis();
",6,3,0,2,4,1,2,0,0,11,62,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,25,143,"        return iRange;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,25,47,"            throw new IllegalArgumentException(""Wrapped field's minumum value must be zero"");
",0,0,0,1,2,0,0,2,0,3,81,7,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,25,52,"        int value = getWrappedField().get(instant);
",2,0,0,2,4,0,6,0,0,8,43,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,25,53,"        if (value == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,25,54,"            value = getMaximumValue();
",2,0,0,1,2,0,2,0,0,5,26,6,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,25,56,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,25,60,"        return getWrappedField().add(instant, value);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,25,64,"        return getWrappedField().add(instant, value);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,25,68,"        return getWrappedField().addWrapField(instant, value);
",0,0,0,2,4,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,25,72,"        return getWrappedField().addWrapField(instant, fieldIndex, values, valueToAdd);
",0,0,0,2,4,1,12,0,0,12,79,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,25,76,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,74,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,25,80,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,80,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,25,84,"        int max = getMaximumValue();
",2,0,0,1,2,0,2,0,0,4,28,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,25,85,"        FieldUtils.verifyValueBounds(this, value, 1, max);
",0,0,0,1,2,0,8,0,0,8,50,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,25,86,"        if (value == max) {
",4,1,0,1,3,0,0,0,0,5,19,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,25,87,"            value = 0;
",2,0,0,0,0,0,0,0,0,3,10,6,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,25,89,"        return getWrappedField().set(instant, value);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,25,93,"        return getWrappedField().isLeap(instant);
",0,0,0,2,4,1,6,0,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,25,97,"        return getWrappedField().getLeapAmount(instant);
",0,0,0,2,4,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,25,110,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,25,119,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,25,128,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,25,137,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,25,147,"        return getWrappedField().getMaximumValue() + 1;
",0,1,0,2,4,1,4,0,0,5,47,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,25,157,"        return getWrappedField().getMaximumValue(instant) + 1;
",0,1,0,2,4,1,6,0,0,7,54,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,25,167,"        return getWrappedField().getMaximumValue(instant) + 1;
",0,1,0,2,4,1,6,0,0,7,54,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,25,177,"        return getWrappedField().getMaximumValue(instant, values) + 1;
",0,1,0,2,4,1,8,0,0,9,62,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,25,181,"        return getWrappedField().roundFloor(instant);
",0,0,0,2,4,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,25,185,"        return getWrappedField().roundCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,25,189,"        return getWrappedField().roundHalfFloor(instant);
",0,0,0,2,4,1,6,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,25,193,"        return getWrappedField().roundHalfCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,25,197,"        return getWrappedField().roundHalfEven(instant);
",0,0,0,2,4,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,25,201,"        return getWrappedField().remainder(instant);
",0,0,0,2,4,1,6,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,754,"            return GJLocaleSymbols.forLocale(locale).halfdayValueToText(fieldValue);
",0,0,0,2,4,1,10,0,0,10,72,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,758,"            return set(millis, GJLocaleSymbols.forLocale(locale).halfdayTextToValue(text));
",0,0,0,3,6,1,14,0,0,14,79,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,25,762,"            return GJLocaleSymbols.forLocale(locale).getHalfdayMaxTextLength();
",0,0,0,2,4,1,8,0,0,8,67,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,25,50,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,25,59,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,25,67,"        return add(instant, FieldUtils.safeToInt(years));
",0,0,0,2,4,1,10,0,0,10,49,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,25,71,"        if (years == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,25,72,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,25,75,"        int thisYear = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,25,76,"        int wrappedYear = FieldUtils.getWrappedValue
",2,0,0,0,0,0,4,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,25,78,"        return set(instant, wrappedYear);
",0,0,0,1,2,1,6,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,25,88,"        if (minuendInstant < subtrahendInstant) {
",4,1,0,1,3,0,0,0,0,5,41,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,25,89,"            return -iChronology.getYearDifference(subtrahendInstant, minuendInstant);
",0,0,0,1,2,1,8,0,0,9,73,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,25,91,"        return iChronology.getYearDifference(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,72,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,25,99,"        return iChronology.isLeapYear(get(instant));
",0,0,0,2,4,1,8,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,25,103,"        if (iChronology.isLeapYear(get(instant))) {
",0,0,0,3,7,0,8,0,0,8,43,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,25,104,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,25,106,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,25,115,"        return iChronology.getMinYear();
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,25,123,"        return iChronology.getYearMillis(get(instant));
",0,0,0,2,4,1,8,0,0,8,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,25,127,"        int year = get(instant);
",2,0,0,1,2,0,4,0,0,6,24,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,25,128,"        long yearStartMillis = iChronology.getYearMillis(year);
",2,0,0,1,2,0,6,0,0,8,55,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,25,129,"        if (instant != yearStartMillis) {
",4,1,0,1,3,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,25,131,"            instant = iChronology.getYearMillis(year + 1);
",4,1,0,1,2,0,4,0,0,10,46,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,25,133,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,25,137,"        return instant - roundFloor(instant);
",2,1,0,1,2,1,4,0,0,7,37,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,25,144,"        return iChronology.year();
",0,0,0,1,2,1,4,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,25,76,"            throw new IllegalArgumentException(""The offset cannot be zero"");
",0,0,0,1,2,0,0,2,0,3,64,7,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,25,84,"            iMin = minValue;
",4,0,0,0,0,0,0,0,0,5,16,6,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,25,89,"            iMax = maxValue;
",4,0,0,0,0,0,0,0,0,5,16,6,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,25,100,"        return super.get(instant) + iOffset;
",6,1,0,1,2,1,0,0,0,7,36,4,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,25,112,"        instant = super.add(instant, amount);
",8,0,0,1,2,0,0,0,0,9,37,4,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,25,113,"        FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);
",0,0,0,2,4,0,12,0,0,12,61,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,25,114,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,25,126,"        instant = super.add(instant, amount);
",8,0,0,1,2,0,0,0,0,9,37,4,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,25,127,"        FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);
",0,0,0,2,4,0,12,0,0,12,61,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,25,128,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,25,140,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));
",0,0,0,3,6,1,18,0,0,18,82,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,25,152,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);
",0,0,0,1,2,0,10,0,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,25,153,"        return super.set(instant, value - iOffset);
",8,1,0,1,2,1,0,0,0,9,43,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,25,157,"        return getWrappedField().isLeap(instant);
",0,0,0,2,4,1,6,0,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,25,161,"        return getWrappedField().getLeapAmount(instant);
",0,0,0,2,4,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,25,165,"        return getWrappedField().getLeapDurationField();
",0,0,0,2,4,1,4,0,0,4,48,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,25,187,"        return getWrappedField().roundFloor(instant);
",0,0,0,2,4,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,25,191,"        return getWrappedField().roundCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,25,195,"        return getWrappedField().roundHalfFloor(instant);
",0,0,0,2,4,1,6,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,25,199,"        return getWrappedField().roundHalfCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,25,203,"        return getWrappedField().roundHalfEven(instant);
",0,0,0,2,4,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,25,207,"        return getWrappedField().remainder(instant);
",0,0,0,2,4,1,6,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,25,216,"        return iOffset;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,59,"            throw new IllegalArgumentException(""The divisor must be at least 2"");
",0,0,0,1,2,0,0,2,0,3,69,7,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,64,"            iDurationField = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,90,"        super(remainderField.getWrappedField(), type);
",2,0,0,2,4,0,4,0,0,6,46,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,91,"        int divisor = iDivisor = remainderField.iDivisor;
",8,0,0,0,0,0,0,0,0,9,49,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,92,"        iDurationField = remainderField.iRangeField;
",6,0,0,0,0,0,0,0,0,7,44,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,94,"        DateTimeField field = getWrappedField();
",2,0,0,1,2,0,2,2,0,6,40,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,95,"        int i = field.getMinimumValue();
",2,0,0,1,2,0,4,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,96,"        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);
",12,5,0,3,6,0,0,0,0,17,59,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,98,"        int j = field.getMaximumValue();
",2,0,0,1,2,0,4,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,99,"        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);
",12,5,0,3,6,0,0,0,0,17,59,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,101,"        iMin = min;
",4,0,0,0,0,0,0,0,0,5,11,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,102,"        iMax = max;
",4,0,0,0,0,0,0,0,0,5,11,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,103,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,112,"        int value = getWrappedField().get(instant);
",2,0,0,2,4,0,6,0,0,8,43,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,113,"        if (value >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,114,"            return value / iDivisor;
",4,1,0,0,0,1,0,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,116,"            return ((value + 1) / iDivisor) - 1;
",4,3,0,2,4,1,0,0,0,7,36,6,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,129,"        return getWrappedField().add(instant, amount * iDivisor);
",4,1,0,2,4,1,6,0,0,11,57,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,141,"        return getWrappedField().add(instant, amount * iDivisor);
",4,1,0,2,4,1,6,0,0,11,57,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,153,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));
",0,0,0,3,6,1,18,0,0,18,82,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,157,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iDivisor;
",2,1,0,2,4,1,8,0,0,11,85,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,161,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iDivisor;
",2,1,0,2,4,1,8,0,0,11,91,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,173,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);
",0,0,0,1,2,0,10,0,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,174,"        int remainder = getRemainder(getWrappedField().get(instant));
",2,0,0,3,6,0,8,0,0,10,61,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,175,"        return getWrappedField().set(instant, value * iDivisor + remainder);
",6,2,0,2,4,1,6,0,0,14,68,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,191,"        return iMin;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,200,"        return iMax;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,204,"        DateTimeField field = getWrappedField();
",2,0,0,1,2,0,2,2,0,6,40,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,205,"        return field.roundFloor(field.set(instant, get(instant) * iDivisor));
",2,1,0,3,6,1,14,0,0,17,69,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,209,"        return set(instant, get(getWrappedField().remainder(instant)));
",0,0,0,4,8,1,12,0,0,12,63,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,218,"        return iDivisor;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,222,"        if (value >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,223,"            return value % iDivisor;
",4,1,0,0,0,1,0,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,25,225,"            return (iDivisor - 1) + ((value + 1) % iDivisor);
",6,4,0,3,6,1,0,0,0,10,49,6,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,25,55,"            throw new IllegalArgumentException(""The divisor must be at least 2"");
",0,0,0,1,2,0,0,2,0,3,69,7,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,25,60,"            iRangeField = null;
",2,0,0,0,0,0,0,0,0,3,19,6,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,25,100,"        int value = getWrappedField().get(instant);
",2,0,0,2,4,0,6,0,0,8,43,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,25,101,"        if (value >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,25,102,"            return value % iDivisor;
",4,1,0,0,0,1,0,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,25,104,"            return (iDivisor - 1) + ((value + 1) % iDivisor);
",6,4,0,3,6,1,0,0,0,10,49,6,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,25,118,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, 0, iDivisor - 1));
",2,1,0,3,6,1,14,0,0,17,87,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,25,130,"        FieldUtils.verifyValueBounds(this, value, 0, iDivisor - 1);
",2,1,0,1,2,0,6,0,0,9,59,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,25,131,"        int divided = getDivided(getWrappedField().get(instant));
",2,0,0,3,6,0,8,0,0,10,57,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,25,132,"        return getWrappedField().set(instant, divided * iDivisor + value);
",6,2,0,2,4,1,6,0,0,14,66,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,25,162,"        return getWrappedField().roundFloor(instant);
",0,0,0,2,4,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,25,166,"        return getWrappedField().roundCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,25,170,"        return getWrappedField().roundHalfFloor(instant);
",0,0,0,2,4,1,6,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,25,174,"        return getWrappedField().roundHalfCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,25,178,"        return getWrappedField().roundHalfEven(instant);
",0,0,0,2,4,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,25,182,"        return getWrappedField().remainder(instant);
",0,0,0,2,4,1,6,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,25,191,"        return iDivisor;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,25,195,"        if (value >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,25,196,"            return value / iDivisor;
",4,1,0,0,0,1,0,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,25,198,"            return ((value + 1) / iDivisor) - 1;
",4,3,0,2,4,1,0,0,0,7,36,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,25,51,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,25,60,"        if (iChronology.getYear(instant) <= 0) {
",0,1,0,2,5,0,6,0,0,7,40,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,25,61,"            return DateTimeConstants.BCE;
",4,0,0,0,0,1,0,0,0,4,29,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,25,63,"            return DateTimeConstants.CE;
",4,0,0,0,0,1,0,0,0,4,28,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,25,68,"        return GJLocaleSymbols.forLocale(locale).eraValueToText(fieldValue);
",0,0,0,2,4,1,10,0,0,10,68,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,25,80,"        FieldUtils.verifyValueBounds(this, era, DateTimeConstants.BCE, DateTimeConstants.CE);
",8,0,0,1,2,0,6,0,0,14,85,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,25,82,"        int oldEra = get(instant);
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,25,83,"        if (oldEra != era) {
",4,1,0,1,3,0,0,0,0,5,20,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,25,84,"            int year = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,40,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,25,85,"            return iChronology.setYear(instant, -year);
",2,0,0,1,2,1,6,0,0,9,43,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,25,87,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,25,92,"        return set(instant, GJLocaleSymbols.forLocale(locale).eraTextToValue(text));
",0,0,0,3,6,1,14,0,0,14,76,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,25,96,"        if (get(instant) == DateTimeConstants.CE) {
",4,1,0,2,5,0,4,0,0,9,43,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,25,97,"            return iChronology.setYear(0, 1);
",0,0,0,1,2,1,4,0,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,25,99,"            return Long.MIN_VALUE;
",4,0,0,0,0,1,0,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,25,104,"        if (get(instant) == DateTimeConstants.BCE) {
",4,1,0,2,5,0,4,0,0,9,44,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,25,105,"            return iChronology.setYear(0, 1);
",0,0,0,1,2,1,4,0,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,25,107,"            return Long.MAX_VALUE;
",4,0,0,0,0,1,0,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,25,113,"        return roundFloor(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,25,118,"        return roundFloor(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,25,123,"        return roundFloor(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,25,135,"        return DateTimeConstants.BCE;
",4,0,0,0,0,1,0,0,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,25,139,"        return DateTimeConstants.CE;
",4,0,0,0,0,1,0,0,0,4,28,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,25,143,"        return GJLocaleSymbols.forLocale(locale).getEraMaxTextLength();
",0,0,0,2,4,1,8,0,0,8,63,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,25,150,"        return iChronology.era();
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,25,67,"        return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToText(fieldValue);
",0,0,0,2,4,1,10,0,0,10,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,25,78,"        return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToShortText(fieldValue);
",0,0,0,2,4,1,10,0,0,10,79,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,25,90,"        return GJLocaleSymbols.forLocale(locale).dayOfWeekTextToValue(text);
",0,0,0,2,4,1,10,0,0,10,68,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,25,103,"        return DateTimeConstants.MONDAY;
",4,0,0,0,0,1,0,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,25,112,"        return DateTimeConstants.SUNDAY;
",4,0,0,0,0,1,0,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,25,122,"        return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxTextLength();
",0,0,0,2,4,1,8,0,0,8,69,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,25,132,"        return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxShortTextLength();
",0,0,0,2,4,1,8,0,0,8,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,25,139,"        return iChronology.dayOfWeek();
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,49,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,60,"        return iChronology.getWeekyear(instant);
",0,0,0,1,2,1,6,0,0,6,40,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,72,"        if (years == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,73,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,75,"        return set(instant, get(instant) + years);
",2,1,0,2,4,1,8,0,0,11,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,79,"        return add(instant, FieldUtils.safeToInt(value));
",0,0,0,2,4,1,10,0,0,10,49,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,92,"        return add(instant, years);
",0,0,0,1,2,1,6,0,0,6,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,96,"        if (minuendInstant < subtrahendInstant) {
",4,1,0,1,3,0,0,0,0,5,41,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,97,"            return -getDifference(subtrahendInstant, minuendInstant);
",0,0,0,1,2,1,6,0,0,7,57,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,100,"        int minuendWeekyear = get(minuendInstant);
",2,0,0,1,2,0,4,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,101,"        int subtrahendWeekyear = get(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,103,"        long minuendRem = remainder(minuendInstant);
",2,0,0,1,2,0,4,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,104,"        long subtrahendRem = remainder(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,50,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,107,"        if (subtrahendRem >= WEEK_53 && iChronology.getWeeksInYear(minuendWeekyear) <= 52) {
",4,3,0,2,5,0,6,0,0,13,84,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,108,"            subtrahendRem -= DateTimeConstants.MILLIS_PER_WEEK;
",6,0,0,0,0,0,0,0,0,7,51,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,111,"        int difference = minuendWeekyear - subtrahendWeekyear;
",6,1,0,0,0,0,0,0,0,7,54,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,112,"        if (minuendRem < subtrahendRem) {
",4,1,0,1,3,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,113,"            difference--;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,115,"        return difference;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,128,"        FieldUtils.verifyValueBounds(this, Math.abs(year),
",0,0,0,1,3,0,10,0,0,10,50,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,133,"        int thisWeekyear = get( instant );
",2,0,0,1,2,0,4,0,0,6,34,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,134,"        if ( thisWeekyear == year ) {
",4,1,0,1,3,0,0,0,0,5,29,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,135,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,140,"        int thisDow = iChronology.getDayOfWeek(instant);
",2,0,0,1,2,0,6,0,0,8,48,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,144,"        int weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );
",2,0,0,1,2,0,6,0,0,8,65,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,145,"        int weeksInToYear = iChronology.getWeeksInYear( year );
",2,0,0,1,2,0,6,0,0,8,55,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,146,"        int maxOutWeeks = (weeksInToYear < weeksInFromYear) ?
",6,1,0,1,2,0,0,0,0,7,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,154,"        int setToWeek = iChronology.getWeekOfWeekyear(instant);
",2,0,0,1,2,0,6,0,0,8,55,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,155,"        if ( setToWeek > maxOutWeeks ) {
",4,1,0,1,3,0,0,0,0,5,32,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,156,"            setToWeek = maxOutWeeks;
",4,0,0,0,0,0,0,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,162,"        long workInstant = instant; // Get a copy
",4,0,0,0,0,0,0,0,0,4,41,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,168,"        workInstant = iChronology.setYear( workInstant, year );
",2,0,0,1,2,0,8,0,0,11,55,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,173,"        int workWoyYear = get( workInstant );
",2,0,0,1,2,0,4,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,179,"        if ( workWoyYear < year ) {
",4,1,0,1,3,0,0,0,0,5,27,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,180,"            workInstant += DateTimeConstants.MILLIS_PER_WEEK;
",6,0,0,0,0,0,0,0,0,7,49,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,181,"        } else if ( workWoyYear > year ) {
",4,1,0,1,4,0,0,0,0,5,34,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,182,"            workInstant -= DateTimeConstants.MILLIS_PER_WEEK;
",6,0,0,0,0,0,0,0,0,7,49,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,189,"        int currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);
",2,0,0,1,2,0,6,0,0,8,64,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,191,"        workInstant = workInstant + (setToWeek - currentWoyWeek)
",8,2,0,1,2,0,0,0,0,11,56,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,200,"        workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );
",2,0,0,2,4,0,10,0,0,13,66,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,204,"        return workInstant;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,212,"        return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) > 52;
",0,1,0,2,4,1,10,0,0,11,73,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,216,"        return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) - 52;
",0,1,0,2,4,1,10,0,0,11,73,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,224,"        return iChronology.getMinYear();
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,228,"        return iChronology.getMaxYear();
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,234,"        instant = iChronology.weekOfWeekyear().roundFloor(instant);
",2,0,0,2,4,0,8,0,0,11,59,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,235,"        int wow = iChronology.getWeekOfWeekyear(instant);
",2,0,0,1,2,0,6,0,0,8,49,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,236,"        if (wow > 1) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,237,"            instant -= ((long) DateTimeConstants.MILLIS_PER_WEEK) * (wow - 1);
",8,2,0,3,6,0,0,0,0,11,66,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,239,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,243,"        return instant - roundFloor(instant);
",2,1,0,1,2,1,4,0,0,7,37,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,25,250,"        return iChronology.weekyear();
",0,0,0,1,2,1,4,0,0,4,30,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,216,"        Stub(DateTimeZone zone) {
",4,0,0,1,3,0,0,2,0,6,25,3,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,217,"            iZone = zone;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,218,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,221,"            return ISOChronology.getInstance(iZone);
",0,0,0,1,2,1,6,0,0,6,40,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,225,"            out.writeObject(iZone);
",0,0,0,1,2,0,6,0,0,6,23,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,226,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,231,"            iZone = (DateTimeZone)in.readObject();
",2,0,0,2,4,0,4,2,0,9,38,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,232,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,25,50,"        int year = getWrappedField().get(instant);
",2,0,0,2,4,0,6,0,0,8,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,25,51,"        return year < 0 ? -year : year;
",6,1,0,0,0,1,0,0,0,8,31,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,25,55,"        return getWrappedField().add(instant, years);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,25,59,"        return getWrappedField().add(instant, years);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,25,63,"        return getWrappedField().addWrapField(instant, years);
",0,0,0,2,4,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,25,67,"        return getWrappedField().addWrapField(instant, fieldIndex, values, years);
",0,0,0,2,4,1,12,0,0,12,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,25,71,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,25,75,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,80,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,25,79,"        FieldUtils.verifyValueBounds(this, year, 0, getMaximumValue());
",0,0,0,2,4,0,8,0,0,8,63,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,25,80,"        if (getWrappedField().get(instant) < 0) {
",0,1,0,3,7,0,6,0,0,7,41,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,25,81,"            year = -year;
",4,0,0,0,0,0,0,0,0,6,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,25,83,"        return super.set(instant, year);
",6,0,0,1,2,1,0,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,25,95,"        return getWrappedField().roundFloor(instant);
",0,0,0,2,4,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,25,99,"        return getWrappedField().roundCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,25,103,"        return getWrappedField().remainder(instant);
",0,0,0,2,4,1,6,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,25,110,"        return INSTANCE;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,86,"        return getInstance(DateTimeZone.getDefault());
",0,0,0,2,4,1,6,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,97,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,143,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,144,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,146,"        if (zone == getZone()) {
",2,1,0,2,5,0,2,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,147,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,149,"        return getInstance(zone);
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,160,"        String str = ""ISOChronology"";
",2,0,0,0,0,0,0,2,0,5,29,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,161,"        DateTimeZone zone = getZone();
",2,0,0,1,2,0,2,2,0,6,30,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,162,"        if (zone != null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,163,"            str = str + '[' + zone.getID() + ']';
",4,1,0,2,4,0,4,0,0,12,37,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,165,"        return str;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,190,"        return super.equals(obj);
",4,0,0,1,2,1,0,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,200,"        return ""ISO"".hashCode() * 11 + getZone().hashCode();
",0,2,0,3,6,1,6,0,0,9,52,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,25,208,"        return new Stub(getZone());
",0,0,0,2,4,1,2,2,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,36,"    private FormatUtils() {
",2,0,0,1,3,1,0,0,0,3,23,2,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,37,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,51,"            buf.append('-');
",0,0,0,1,2,0,4,0,0,5,16,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,52,"            if (value != Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,53,"                value = -value;
",4,0,0,0,0,0,0,0,0,6,15,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,55,"                for (; size > 10; size--) {
",4,1,0,1,3,0,0,0,0,6,27,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,56,"                    buf.append('0');
",0,0,0,1,2,0,4,0,0,5,16,11,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,58,"                buf.append("""" + -(long)Integer.MIN_VALUE);
",4,1,0,2,4,0,4,0,0,11,42,9,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,59,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,69,"                buf.append('0');
",0,0,0,1,2,0,4,0,0,5,16,10,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,81,"                digits = 3;
",2,0,0,0,0,0,0,0,0,3,11,9,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,85,"                digits = (int)(Math.log(value) / LOG_10) + 1;
",4,2,0,3,6,0,6,0,0,13,45,10,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,88,"                buf.append('0');
",0,0,0,1,2,0,4,0,0,5,16,10,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,105,"        int intValue = (int)value;
",4,0,0,1,2,0,0,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,106,"        if (intValue == value) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,107,"            appendPaddedInteger(buf, intValue, size);
",0,0,0,1,2,0,8,0,0,8,41,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,108,"        } else if (size <= 19) {
",2,1,0,1,4,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,109,"            buf.append(Long.toString(value));
",0,0,0,2,4,0,10,0,0,10,33,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,111,"            if (value < 0) {
",2,1,0,1,3,0,0,0,0,3,16,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,112,"                buf.append('-');
",0,0,0,1,2,0,4,0,0,5,16,10,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,113,"                if (value != Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,30,9,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,114,"                    value = -value;
",4,0,0,0,0,0,0,0,0,6,15,11,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,116,"                    for (; size > 19; size--) {
",4,1,0,1,3,0,0,0,0,6,27,11,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,117,"                        buf.append('0');
",0,0,0,1,2,0,4,0,0,5,16,14,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,119,"                    buf.append(""9223372036854775808"");
",0,0,0,1,2,0,4,0,0,5,34,12,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,120,"                    return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,123,"            int digits = (int)(Math.log(value) / LOG_10) + 1;
",4,2,0,3,6,0,6,0,0,12,49,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,124,"            for (; size > digits; size--) {
",6,1,0,1,3,0,0,0,0,8,31,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,125,"                buf.append('0');
",0,0,0,1,2,0,4,0,0,5,16,10,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,127,"            buf.append(Long.toString(value));
",0,0,0,2,4,0,10,0,0,10,33,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,129,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,144,"        if (value < 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,145,"            out.write('-');
",0,0,0,1,2,0,4,0,0,5,15,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,146,"            if (value != Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,147,"                value = -value;
",4,0,0,0,0,0,0,0,0,6,15,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,149,"                for (; size > 10; size--) {
",4,1,0,1,3,0,0,0,0,6,27,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,150,"                    out.write('0');
",0,0,0,1,2,0,4,0,0,5,15,11,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,152,"                out.write("""" + -(long)Integer.MIN_VALUE);
",4,1,0,2,4,0,4,0,0,11,41,9,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,153,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,156,"        if (value < 10) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,157,"            for (; size > 1; size--) {
",4,1,0,1,3,0,0,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,158,"                out.write('0');
",0,0,0,1,2,0,4,0,0,5,15,9,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,160,"            out.write(value + '0');
",2,1,0,1,2,0,4,0,0,8,23,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,161,"        } else if (value < 100) {
",2,1,0,1,4,0,0,0,0,3,25,5,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,162,"            for (; size > 2; size--) {
",4,1,0,1,3,0,0,0,0,6,26,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,163,"                out.write('0');
",0,0,0,1,2,0,4,0,0,5,15,10,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,168,"            int d = ((value + 1) * 13421772) >> 27;
",4,3,0,2,4,0,0,0,0,7,39,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,169,"            out.write(d + '0');
",2,1,0,1,2,0,4,0,0,8,19,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,171,"            out.write(value - (d << 3) - (d << 1) + '0');
",6,4,0,3,6,0,4,0,0,15,45,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,172,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,174,"            if (value < 1000) {
",2,1,0,1,3,0,0,0,0,3,19,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,175,"                digits = 3;
",2,0,0,0,0,0,0,0,0,3,11,9,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,176,"            } else if (value < 10000) {
",2,1,0,1,4,0,0,0,0,3,27,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,177,"                digits = 4;
",2,0,0,0,0,0,0,0,0,3,11,10,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,179,"                digits = (int)(Math.log(value) / LOG_10) + 1;
",4,2,0,3,6,0,6,0,0,13,45,10,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,181,"            for (; size > digits; size--) {
",6,1,0,1,3,0,0,0,0,8,31,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,182,"                out.write('0');
",0,0,0,1,2,0,4,0,0,5,15,10,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,184,"            out.write(Integer.toString(value));
",0,0,0,2,4,0,10,0,0,10,35,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,186,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,201,"        int intValue = (int)value;
",4,0,0,1,2,0,0,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,202,"        if (intValue == value) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,203,"            writePaddedInteger(out, intValue, size);
",0,0,0,1,2,0,8,0,0,8,40,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,204,"        } else if (size <= 19) {
",2,1,0,1,4,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,205,"            out.write(Long.toString(value));
",0,0,0,2,4,0,10,0,0,10,32,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,207,"            if (value < 0) {
",2,1,0,1,3,0,0,0,0,3,16,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,208,"                out.write('-');
",0,0,0,1,2,0,4,0,0,5,15,10,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,209,"                if (value != Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,30,9,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,210,"                    value = -value;
",4,0,0,0,0,0,0,0,0,6,15,11,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,212,"                    for (; size > 19; size--) {
",4,1,0,1,3,0,0,0,0,6,27,11,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,213,"                        out.write('0');
",0,0,0,1,2,0,4,0,0,5,15,14,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,215,"                    out.write(""9223372036854775808"");
",0,0,0,1,2,0,4,0,0,5,33,12,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,216,"                    return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,219,"            int digits = (int)(Math.log(value) / LOG_10) + 1;
",4,2,0,3,6,0,6,0,0,12,49,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,220,"            for (; size > digits; size--) {
",6,1,0,1,3,0,0,0,0,8,31,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,221,"                out.write('0');
",0,0,0,1,2,0,4,0,0,5,15,10,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,223,"            out.write(Long.toString(value));
",0,0,0,2,4,0,10,0,0,10,32,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,225,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,236,"        if (value < 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,237,"            buf.append('-');
",0,0,0,1,2,0,4,0,0,5,16,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,238,"            if (value != Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,239,"                value = -value;
",4,0,0,0,0,0,0,0,0,6,15,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,241,"                buf.append("""" + -(long)Integer.MIN_VALUE);
",4,1,0,2,4,0,4,0,0,11,42,9,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,242,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,245,"        if (value < 10) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,246,"            buf.append((char)(value + '0'));
",2,1,0,3,6,0,4,0,0,8,32,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,247,"        } else if (value < 100) {
",2,1,0,1,4,0,0,0,0,3,25,5,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,251,"            int d = ((value + 1) * 13421772) >> 27;
",4,3,0,2,4,0,0,0,0,7,39,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,252,"            buf.append((char) (d + '0'));
",2,1,0,3,6,0,4,0,0,8,29,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,254,"            buf.append((char) (value - (d << 3) - (d << 1) + '0'));
",6,4,0,5,10,0,4,0,0,15,55,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,255,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,256,"            buf.append(Integer.toString(value));
",0,0,0,2,4,0,10,0,0,10,36,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,258,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,269,"        int intValue = (int)value;
",4,0,0,1,2,0,0,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,270,"        if (intValue == value) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,271,"            appendUnpaddedInteger(buf, intValue);
",0,0,0,1,2,0,6,0,0,6,37,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,273,"            buf.append(Long.toString(value));
",0,0,0,2,4,0,10,0,0,10,33,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,275,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,288,"        if (value < 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,289,"            out.write('-');
",0,0,0,1,2,0,4,0,0,5,15,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,290,"            if (value != Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,291,"                value = -value;
",4,0,0,0,0,0,0,0,0,6,15,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,293,"                out.write("""" + -(long)Integer.MIN_VALUE);
",4,1,0,2,4,0,4,0,0,11,41,9,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,294,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,297,"        if (value < 10) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,298,"            out.write(value + '0');
",2,1,0,1,2,0,4,0,0,8,23,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,299,"        } else if (value < 100) {
",2,1,0,1,4,0,0,0,0,3,25,5,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,303,"            int d = ((value + 1) * 13421772) >> 27;
",4,3,0,2,4,0,0,0,0,7,39,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,304,"            out.write(d + '0');
",2,1,0,1,2,0,4,0,0,8,19,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,306,"            out.write(value - (d << 3) - (d << 1) + '0');
",6,4,0,3,6,0,4,0,0,15,45,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,307,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,308,"            out.write(Integer.toString(value));
",0,0,0,2,4,0,10,0,0,10,35,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,310,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,323,"        int intValue = (int)value;
",4,0,0,1,2,0,0,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,324,"        if (intValue == value) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,325,"            writeUnpaddedInteger(out, intValue);
",0,0,0,1,2,0,6,0,0,6,36,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,327,"            out.write(Long.toString(value));
",0,0,0,2,4,0,10,0,0,10,32,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,329,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,336,"        if (value < 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,337,"            if (value != Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,30,6,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,338,"                return calculateDigitCount(-value) + 1;
",2,1,0,1,2,1,2,0,0,6,39,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,340,"                return 20;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,343,"        return 
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,352,"        int value = text.charAt(position) - '0';
",2,1,0,1,2,0,6,0,0,10,40,5,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,353,"        return ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';
",6,6,0,4,8,1,4,0,0,17,71,4,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,357,"        int sampleLen = errorPos + 32;
",4,1,0,0,0,0,0,0,0,5,30,5,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,359,"        if (text.length() <= sampleLen + 3) {
",2,2,0,2,5,0,4,0,0,8,37,4,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,360,"            sampleText = text;
",4,0,0,0,0,0,0,0,0,5,18,6,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,362,"            sampleText = text.substring(0, sampleLen).concat(""..."");
",2,0,0,2,4,0,8,0,0,12,56,6,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,365,"        if (errorPos <= 0) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,366,"            return ""Invalid format: \"""" + sampleText + '""';
",2,1,0,0,0,1,0,0,0,5,47,6,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,369,"        if (errorPos >= text.length()) {
",2,1,0,2,5,0,4,0,0,7,32,4,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,370,"            return ""Invalid format: \"""" + sampleText + ""\"" is too short"";
",2,1,0,0,0,1,0,0,0,5,61,6,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,25,373,"        return ""Invalid format: \"""" + sampleText + ""\"" is malformed at \"""" +
",2,1,0,0,0,1,0,0,0,5,68,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1334,"            super(fieldType, maxParsedDigits, signed);
",6,0,0,1,2,0,0,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1335,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1338,"            return iMaxParsedDigits;
",2,0,0,0,0,1,0,0,0,2,24,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1345,"                DateTimeField field = iFieldType.getField(chrono);
",2,0,0,1,2,0,6,2,0,10,50,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1346,"                FormatUtils.appendUnpaddedInteger(buf, field.get(instant));
",0,0,0,2,4,0,12,0,0,12,59,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1349,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1347,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1348,"                buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1350,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1356,"                DateTimeField field = iFieldType.getField(chrono);
",2,0,0,1,2,0,6,2,0,10,50,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1357,"                FormatUtils.writeUnpaddedInteger(out, field.get(instant));
",0,0,0,2,4,0,12,0,0,12,58,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1360,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1358,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1359,"                out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1361,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1364,"            if (partial.isSupported(iFieldType)) {
",0,0,0,2,5,0,6,0,0,6,38,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1366,"                    FormatUtils.appendUnpaddedInteger(buf, partial.get(iFieldType));
",0,0,0,2,4,0,12,0,0,12,64,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1369,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1367,"                } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1368,"                    buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1371,"                buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1373,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1376,"            if (partial.isSupported(iFieldType)) {
",0,0,0,2,5,0,6,0,0,6,38,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1378,"                    FormatUtils.writeUnpaddedInteger(out, partial.get(iFieldType));
",0,0,0,2,4,0,12,0,0,12,63,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1381,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1379,"                } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1380,"                    out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1383,"                out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1385,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1263,"            int limit = Math.min(iMaxParsedDigits, text.length() - position);
",4,1,0,2,4,0,10,0,0,15,65,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1265,"            boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1266,"            int length = 0;
",2,0,0,0,0,0,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1267,"            while (length < limit) {
",4,1,0,1,3,0,0,0,0,5,24,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1268,"                char c = text.charAt(position + length);
",6,1,0,1,2,0,4,0,0,11,40,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1269,"                if (length == 0 && (c == '-' || c == '+') && iSigned) {
",8,6,0,2,5,0,0,0,0,16,55,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1270,"                    negative = c == '-';
",4,1,0,0,0,0,0,0,0,7,20,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1273,"                    if (length + 1 >= limit || 
",4,4,0,0,1,0,0,0,0,8,26,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1276,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1279,"                    if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1280,"                        length++;
",2,0,0,0,0,0,0,0,0,3,9,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1283,"                        position++;
",2,0,0,0,0,0,0,0,0,3,11,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1286,"                    limit = Math.min(limit + 1, text.length() - position);
",6,2,0,2,4,0,8,0,0,17,54,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1287,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1289,"                if (c < '0' || c > '9') {
",4,3,0,1,3,0,0,0,0,9,25,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1290,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1292,"                length++;
",2,0,0,0,0,0,0,0,0,3,9,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1293,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1295,"            if (length == 0) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1296,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1300,"            if (length >= 9) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1303,"                value = Integer.parseInt(text.substring(position, position += length));
",6,0,0,2,4,0,10,0,0,18,71,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1305,"                int i = position;
",4,0,0,0,0,0,0,0,0,4,17,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1306,"                if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1307,"                    i++;
",2,0,0,0,0,0,0,0,0,3,4,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1310,"                    value = text.charAt(i++) - '0';
",4,1,0,1,2,0,4,0,0,12,31,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1313,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1311,"                } catch (StringIndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,45,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1312,"                    return ~position;
",2,0,0,0,0,1,0,0,0,3,17,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1314,"                position += length;
",4,0,0,0,0,0,0,0,0,5,19,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1315,"                while (i < position) {
",4,1,0,1,3,0,0,0,0,5,22,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1316,"                    value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';
",8,5,0,4,8,0,4,0,0,20,63,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1318,"                if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1319,"                    value = -value;
",4,0,0,0,0,0,0,0,0,6,15,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1323,"            bucket.saveField(iFieldType, value);
",0,0,0,1,2,0,8,0,0,8,36,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1324,"            return position;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,116,"        throw new UnsupportedOperationException(""Both printing and parsing not supported"");
",0,0,0,1,2,0,0,2,0,3,83,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,132,"        Object f = getFormatter();
",2,0,0,1,2,0,2,2,0,6,26,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,133,"        if (isPrinter(f)) {
",0,0,0,2,5,0,4,0,0,4,19,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,134,"            return (DateTimePrinter) f;
",2,0,0,1,2,1,0,2,0,4,27,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,136,"        throw new UnsupportedOperationException(""Printing is not supported"");
",0,0,0,1,2,0,0,2,0,3,69,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,152,"        Object f = getFormatter();
",2,0,0,1,2,0,2,2,0,6,26,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,153,"        if (isParser(f)) {
",0,0,0,2,5,0,4,0,0,4,18,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,154,"            return (DateTimeParser) f;
",2,0,0,1,2,1,0,2,0,4,26,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,156,"        throw new UnsupportedOperationException(""Parsing is not supported"");
",0,0,0,1,2,0,0,2,0,3,68,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,167,"        return isFormatter(getFormatter());
",0,0,0,2,4,1,4,0,0,4,35,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,177,"        return isPrinter(getFormatter());
",0,0,0,2,4,1,4,0,0,4,33,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,187,"        return isParser(getFormatter());
",0,0,0,2,4,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,196,"        iFormatter = null;
",2,0,0,0,0,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,197,"        iElementPairs.clear();
",0,0,0,1,2,0,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,198,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,210,"            throw new IllegalArgumentException(""No formatter supplied"");
",0,0,0,1,2,0,0,2,0,3,60,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,224,"        checkPrinter(printer);
",0,0,0,1,2,0,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,225,"        return append0(printer, null);
",0,0,0,1,2,1,4,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,237,"        checkParser(parser);
",0,0,0,1,2,0,4,0,0,4,20,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,238,"        return append0(null, parser);
",0,0,0,1,2,1,4,0,0,5,29,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,250,"        checkPrinter(printer);
",0,0,0,1,2,0,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,251,"        checkParser(parser);
",0,0,0,1,2,0,4,0,0,4,20,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,252,"        return append0(printer, parser);
",0,0,0,1,2,1,6,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,273,"        if (printer != null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,274,"            checkPrinter(printer);
",0,0,0,1,2,0,4,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,276,"        if (parsers == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,277,"            throw new IllegalArgumentException(""No parsers supplied"");
",0,0,0,1,2,0,0,2,0,3,58,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,279,"        int length = parsers.length;
",6,0,0,0,0,0,0,0,0,6,28,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,280,"        if (length == 1) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,281,"            if (parsers[0] == null) {
",0,1,1,2,5,0,0,0,0,3,25,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,282,"                throw new IllegalArgumentException(""No parser supplied"");
",0,0,0,1,2,0,0,2,0,3,57,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,284,"            return append0(printer, parsers[0]);
",0,0,1,2,4,1,4,0,0,6,36,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,287,"        DateTimeParser[] copyOfParsers = new DateTimeParser[length];
",2,0,1,2,4,0,0,4,0,8,60,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,289,"        for (i = 0; i < length - 1; i++) {
",8,2,0,1,3,0,0,0,0,12,34,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,290,"            if ((copyOfParsers[i] = parsers[i]) == null) {
",0,1,1,4,9,0,0,0,0,10,46,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,291,"                throw new IllegalArgumentException(""Incomplete parser array"");
",0,0,0,1,2,0,0,2,0,3,62,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,294,"        copyOfParsers[i] = parsers[i];
",0,0,1,2,4,0,0,0,0,9,30,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,296,"        return append0(printer, new MatchingParser(copyOfParsers));
",2,0,0,2,4,1,4,2,0,8,59,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,307,"        checkParser(parser);
",0,0,0,1,2,0,4,0,0,4,20,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,308,"        DateTimeParser[] parsers = new DateTimeParser[] {parser, null};
",4,0,0,3,6,0,0,4,0,8,63,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,309,"        return append0(null, new MatchingParser(parsers));
",2,0,0,2,4,1,2,2,0,8,50,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,319,"        if (parser == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,320,"            throw new IllegalArgumentException(""No parser supplied"");
",0,0,0,1,2,0,0,2,0,3,57,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,322,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,330,"        if (printer == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,331,"            throw new IllegalArgumentException(""No printer supplied"");
",0,0,0,1,2,0,0,2,0,3,58,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,333,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,370,"        if (text == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,371,"            throw new IllegalArgumentException(""Literal must not be null"");
",0,0,0,1,2,0,0,2,0,4,63,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,373,"        switch (text.length()) {
",0,0,0,2,5,0,4,0,0,4,24,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,375,"                return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,377,"                return append0(new CharacterLiteral(text.charAt(0)));
",0,0,0,3,6,1,6,2,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,379,"                return append0(new StringLiteral(text));
",2,0,0,2,4,1,2,2,0,6,40,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,397,"            throw new IllegalArgumentException(""Field type must not be null"");
",0,0,0,1,2,0,0,2,0,4,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,400,"            maxDigits = minDigits;
",4,0,0,0,0,0,0,0,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,403,"            throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,406,"            return append0(new UnpaddedNumber(fieldType, maxDigits, false));
",4,0,0,2,4,1,2,2,0,9,64,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,426,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,427,"            throw new IllegalArgumentException(""Field type must not be null"");
",0,0,0,1,2,0,0,2,0,4,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,429,"        if (numDigits <= 0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,430,"            throw new IllegalArgumentException(""Illegal number of digits: "" + numDigits);
",2,1,0,1,2,0,0,2,0,6,77,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,432,"        return append0(new FixedNumber(fieldType, numDigits, false));
",4,0,0,2,4,1,2,2,0,9,61,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,449,"            throw new IllegalArgumentException(""Field type must not be null"");
",0,0,0,1,2,0,0,2,0,4,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,452,"            maxDigits = minDigits;
",4,0,0,0,0,0,0,0,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,455,"            throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,458,"            return append0(new UnpaddedNumber(fieldType, maxDigits, true));
",4,0,0,2,4,1,2,2,0,9,63,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,478,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,479,"            throw new IllegalArgumentException(""Field type must not be null"");
",0,0,0,1,2,0,0,2,0,4,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,481,"        if (numDigits <= 0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,482,"            throw new IllegalArgumentException(""Illegal number of digits: "" + numDigits);
",2,1,0,1,2,0,0,2,0,6,77,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,484,"        return append0(new FixedNumber(fieldType, numDigits, true));
",4,0,0,2,4,1,2,2,0,9,60,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,496,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,497,"            throw new IllegalArgumentException(""Field type must not be null"");
",0,0,0,1,2,0,0,2,0,4,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,499,"        return append0(new TextField(fieldType, false));
",2,0,0,2,4,1,2,2,0,7,48,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,511,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,512,"            throw new IllegalArgumentException(""Field type must not be null"");
",0,0,0,1,2,0,0,2,0,4,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,514,"        return append0(new TextField(fieldType, true));
",2,0,0,2,4,1,2,2,0,7,47,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,533,"            throw new IllegalArgumentException(""Field type must not be null"");
",0,0,0,1,2,0,0,2,0,4,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,536,"            maxDigits = minDigits;
",4,0,0,0,0,0,0,0,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,539,"            throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,576,"        return appendFraction(DateTimeFieldType.minuteOfDay(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,77,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,593,"        return appendFraction(DateTimeFieldType.hourOfDay(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,75,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,610,"        return appendFraction(DateTimeFieldType.dayOfYear(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,75,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,627,"        return appendDecimal(DateTimeFieldType.millisOfSecond(), minDigits, 3);
",0,0,0,2,4,1,8,0,0,8,71,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,637,"        return appendDecimal(DateTimeFieldType.millisOfDay(), minDigits, 8);
",0,0,0,2,4,1,8,0,0,8,68,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,657,"        return appendDecimal(DateTimeFieldType.secondOfDay(), minDigits, 5);
",0,0,0,2,4,1,8,0,0,8,68,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,677,"        return appendDecimal(DateTimeFieldType.minuteOfDay(), minDigits, 4);
",0,0,0,2,4,1,8,0,0,8,68,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,697,"        return appendDecimal(DateTimeFieldType.clockhourOfDay(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,71,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,707,"        return appendDecimal(DateTimeFieldType.hourOfHalfday(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,70,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,717,"        return appendDecimal(DateTimeFieldType.clockhourOfHalfday(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,75,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,727,"        return appendDecimal(DateTimeFieldType.dayOfWeek(), minDigits, 1);
",0,0,0,2,4,1,8,0,0,8,66,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,747,"        return appendDecimal(DateTimeFieldType.dayOfYear(), minDigits, 3);
",0,0,0,2,4,1,8,0,0,8,66,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,757,"        return appendDecimal(DateTimeFieldType.weekOfWeekyear(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,71,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,769,"        return appendSignedDecimal(DateTimeFieldType.weekyear(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,79,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,813,"        return appendTwoDigitYear(pivot, false);
",0,0,0,1,2,1,4,0,0,5,40,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,831,"        return append0(new TwoDigitYear(DateTimeFieldType.year(), pivot, lenientParse));
",4,0,0,3,6,1,6,2,0,12,80,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,853,"        return appendTwoDigitWeekyear(pivot, false);
",0,0,0,1,2,1,4,0,0,5,44,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,871,"        return append0(new TwoDigitYear(DateTimeFieldType.weekyear(), pivot, lenientParse));
",4,0,0,3,6,1,6,2,0,12,84,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,883,"        return appendDecimal(DateTimeFieldType.yearOfEra(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,74,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,895,"        return appendDecimal(DateTimeFieldType.yearOfCentury(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,78,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,907,"        return appendSignedDecimal(DateTimeFieldType.centuryOfEra(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,83,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,917,"        return appendText(DateTimeFieldType.halfdayOfDay());
",0,0,0,2,4,1,6,0,0,6,52,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,927,"        return appendText(DateTimeFieldType.dayOfWeek());
",0,0,0,2,4,1,6,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,938,"        return appendShortText(DateTimeFieldType.dayOfWeek());
",0,0,0,2,4,1,6,0,0,6,54,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,949,"        return appendText(DateTimeFieldType.monthOfYear());
",0,0,0,2,4,1,6,0,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,959,"        return appendShortText(DateTimeFieldType.monthOfYear());
",0,0,0,2,4,1,6,0,0,6,56,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,969,"        return appendText(DateTimeFieldType.era());
",0,0,0,2,4,1,6,0,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,980,"        return append0(new TimeZoneName(TimeZoneName.LONG_NAME), null);
",4,0,0,2,4,1,2,2,0,10,63,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,991,"        return append0(new TimeZoneName(TimeZoneName.SHORT_NAME), null);
",4,0,0,2,4,1,2,2,0,10,64,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1001,"        return append0(new TimeZoneName(TimeZoneName.ID), null);
",4,0,0,2,4,1,2,2,0,10,56,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1051,"        return append0(new TimeZoneOffset
",0,0,0,0,1,1,2,2,0,4,33,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1065,"        DateTimeFormat.appendPatternTo(this, pattern);
",0,0,0,1,2,0,6,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1066,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1083,"                    f = parser;
",4,0,0,0,0,0,0,0,0,5,11,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1104,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1114,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1118,"        return (isPrinter(f) || isParser(f));
",0,1,0,3,6,1,8,0,0,9,37,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1122,"        for (int i = len; --i >= 0;) {
",6,1,0,1,3,0,0,0,0,8,30,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1123,"            buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1125,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1128,"        for (int i = len; --i >= 0;) {
",6,1,0,1,3,0,0,0,0,8,30,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1129,"            out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1131,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2648,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2649,"            iParsers = parsers;
",4,0,0,0,0,0,0,0,0,5,19,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2650,"            int est = 0;
",2,0,0,0,0,0,0,0,0,2,12,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2651,"            for (int i=parsers.length; --i>=0 ;) {
",8,1,0,1,3,0,0,0,0,10,38,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2652,"                DateTimeParser parser = parsers[i];
",2,0,1,1,2,0,0,2,0,8,35,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2653,"                if (parser != null) {
",2,1,0,1,3,0,0,0,0,3,21,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2654,"                    int len = parser.estimateParsedLength();
",2,0,0,1,2,0,4,0,0,6,40,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2655,"                    if (len > est) {
",4,1,0,1,3,0,0,0,0,5,16,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2656,"                        est = len;
",4,0,0,0,0,0,0,0,0,5,10,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2659,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2660,"            iParsedLengthEstimate = est;
",4,0,0,0,0,0,0,0,0,5,28,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2661,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2664,"            return iParsedLengthEstimate;
",2,0,0,0,0,1,0,0,0,2,29,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2668,"            DateTimeParser[] parsers = iParsers;
",4,0,0,1,2,0,0,2,0,6,36,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2669,"            int length = parsers.length;
",6,0,0,0,0,0,0,0,0,6,28,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2671,"            final Object originalState = bucket.saveState();
",2,0,0,1,2,1,4,2,0,9,48,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2672,"            boolean isOptional = false;
",2,0,0,0,0,0,0,0,0,3,27,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2674,"            int bestValidPos = position;
",4,0,0,0,0,0,0,0,0,4,28,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2675,"            Object bestValidState = null;
",2,0,0,0,0,0,0,2,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2677,"            int bestInvalidPos = position;
",4,0,0,0,0,0,0,0,0,4,30,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2679,"            for (int i=0; i<length; i++) {
",8,1,0,1,3,0,0,0,0,10,30,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2680,"                DateTimeParser parser = parsers[i];
",2,0,1,1,2,0,0,2,0,8,35,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2681,"                if (parser == null) {
",2,1,0,1,3,0,0,0,0,3,21,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2683,"                    if (bestValidPos <= position) {
",4,1,0,1,3,0,0,0,0,5,31,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2684,"                        return position;
",2,0,0,0,0,1,0,0,0,2,16,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2686,"                    isOptional = true;
",2,0,0,0,0,0,0,0,0,4,18,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2687,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2689,"                int parsePos = parser.parseInto(bucket, text, position);
",2,0,0,1,2,0,10,0,0,12,56,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2690,"                if (parsePos >= position) {
",4,1,0,1,3,0,0,0,0,5,27,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2691,"                    if (parsePos > bestValidPos) {
",4,1,0,1,3,0,0,0,0,5,30,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2692,"                        if (parsePos >= text.length() ||
",2,3,0,1,3,0,4,0,0,9,32,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2697,"                            return parsePos;
",2,0,0,0,0,1,0,0,0,2,16,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2699,"                        bestValidPos = parsePos;
",4,0,0,0,0,0,0,0,0,5,24,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2700,"                        bestValidState = bucket.saveState();
",2,0,0,1,2,0,4,0,0,7,36,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2703,"                    if (parsePos < 0) {
",2,1,0,1,3,0,0,0,0,3,19,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2704,"                        parsePos = ~parsePos;
",4,0,0,0,0,0,0,0,0,6,21,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2705,"                        if (parsePos > bestInvalidPos) {
",4,1,0,1,3,0,0,0,0,5,32,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2706,"                            bestInvalidPos = parsePos;
",4,0,0,0,0,0,0,0,0,5,26,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2710,"                bucket.restoreState(originalState);
",0,0,0,1,2,0,6,0,0,6,35,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2713,"            if (bestValidPos > position || (bestValidPos == position && isOptional)) {
",10,4,0,2,5,0,0,0,0,14,74,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2715,"                if (bestValidState != null) {
",2,1,0,1,3,0,0,0,0,3,29,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2716,"                    bucket.restoreState(bestValidState);
",0,0,0,1,2,0,6,0,0,6,36,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2718,"                return bestValidPos;
",2,0,0,0,0,1,0,0,0,2,20,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2721,"            return ~bestInvalidPos;
",2,0,0,0,0,1,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2473,"                iPrinters = null;
",2,0,0,0,0,0,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2474,"                iPrintedLengthEstimate = 0;
",2,0,0,0,0,0,0,0,0,3,27,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2488,"                iParsers = null;
",2,0,0,0,0,0,0,0,0,3,16,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2489,"                iParsedLengthEstimate = 0;
",2,0,0,0,0,0,0,0,0,3,26,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2512,"                throw new UnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,42,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2529,"            DateTimePrinter[] elements = iPrinters;
",4,0,0,1,2,0,0,2,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2530,"            if (elements == null) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2531,"                throw new UnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,42,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2534,"            if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2536,"                locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2539,"            int len = elements.length;
",6,0,0,0,0,0,0,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2540,"            for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2541,"                elements[i].printTo(out, instant, chrono, displayOffset, displayZone, locale);
",0,0,1,2,4,0,14,0,0,18,78,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2543,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2546,"            DateTimePrinter[] elements = iPrinters;
",4,0,0,1,2,0,0,2,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2547,"            if (elements == null) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2548,"                throw new UnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,42,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2551,"            if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2553,"                locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2556,"            int len = elements.length;
",6,0,0,0,0,0,0,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2557,"            for (int i=0; i<len; i++) {
",8,1,0,1,3,0,0,0,0,10,27,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2558,"                elements[i].printTo(buf, partial, locale);
",0,0,1,2,4,0,8,0,0,12,42,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2560,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2563,"            DateTimePrinter[] elements = iPrinters;
",4,0,0,1,2,0,0,2,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2564,"            if (elements == null) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2565,"                throw new UnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,42,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2568,"            if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2570,"                locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2573,"            int len = elements.length;
",6,0,0,0,0,0,0,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2574,"            for (int i=0; i<len; i++) {
",8,1,0,1,3,0,0,0,0,10,27,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2575,"                elements[i].printTo(out, partial, locale);
",0,0,1,2,4,0,8,0,0,12,42,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2577,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2580,"            return iParsedLengthEstimate;
",2,0,0,0,0,1,0,0,0,2,29,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2584,"            DateTimeParser[] elements = iParsers;
",4,0,0,1,2,0,0,2,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2585,"            if (elements == null) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2586,"                throw new UnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,42,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2589,"            int len = elements.length;
",6,0,0,0,0,0,0,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2590,"            for (int i=0; i<len && position >= 0; i++) {
",10,3,0,1,3,0,0,0,0,14,44,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2591,"                position = elements[i].parseInto(bucket, text, position);
",2,0,1,2,4,0,8,0,0,15,57,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2593,"            return position;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2410,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2411,"            iType = type;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2412,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2415,"            return (iType == SHORT_NAME ? 4 : 20);
",4,1,0,1,2,1,0,0,0,5,38,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2421,"            buf.append(print(instant - displayOffset, displayZone, locale));
",4,1,0,2,4,0,10,0,0,15,64,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2422,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2427,"            out.write(print(instant - displayOffset, displayZone, locale));
",4,1,0,2,4,0,10,0,0,15,63,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2428,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2431,"            if (displayZone == null) {
",2,1,0,1,3,0,0,0,0,3,26,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2432,"                return """";  // no zone
",0,0,0,0,0,1,0,0,0,1,22,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2434,"            switch (iType) {
",2,0,0,1,3,0,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2436,"                    return displayZone.getName(instant, locale);
",0,0,0,1,2,1,8,0,0,8,44,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2438,"                    return displayZone.getShortName(instant, locale);
",0,0,0,1,2,1,8,0,0,8,49,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2440,"                    return displayZone.getID();
",0,0,0,1,2,1,4,0,0,4,27,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2442,"            return """";
",0,0,0,0,0,1,0,0,0,1,10,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2447,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2451,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2059,"                throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2062,"                minFields = 4;
",2,0,0,0,0,0,0,0,0,3,14,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2063,"                maxFields = 4;
",2,0,0,0,0,0,0,0,0,3,14,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2075,"                est = iZeroOffsetPrintText.length();
",2,0,0,1,2,0,4,0,0,7,36,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2084,"                return;  // no zone
",0,0,0,0,0,1,0,0,0,0,19,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2087,"                buf.append(iZeroOffsetPrintText);
",0,0,0,1,2,0,6,0,0,6,33,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2088,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2093,"                buf.append('-');
",0,0,0,1,2,0,4,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2094,"                displayOffset = -displayOffset;
",4,0,0,0,0,0,0,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2100,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2104,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2113,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2120,"            int seconds = displayOffset / DateTimeConstants.MILLIS_PER_SECOND;
",8,1,0,0,0,0,0,0,0,9,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2121,"            if (iShowSeparators) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2122,"                buf.append(':');
",0,0,0,1,2,0,4,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2124,"            FormatUtils.appendPaddedInteger(buf, seconds, 2);
",0,0,0,1,2,0,8,0,0,8,49,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2125,"            if (iMaxFields == 3) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2126,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2128,"            displayOffset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;
",8,1,0,0,0,0,0,0,0,10,63,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2129,"            if (displayOffset == 0 && iMinFields <= 3) {
",4,3,0,1,3,0,0,0,0,7,44,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2130,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2133,"            if (iShowSeparators) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2134,"                buf.append('.');
",0,0,0,1,2,0,4,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2136,"            FormatUtils.appendPaddedInteger(buf, displayOffset, 3);
",0,0,0,1,2,0,8,0,0,8,55,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2137,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2142,"            if (displayZone == null) {
",2,1,0,1,3,0,0,0,0,3,26,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2143,"                return;  // no zone
",0,0,0,0,0,1,0,0,0,0,19,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2145,"            if (displayOffset == 0 && iZeroOffsetPrintText != null) {
",4,3,0,1,3,0,0,0,0,7,57,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2146,"                out.write(iZeroOffsetPrintText);
",0,0,0,1,2,0,6,0,0,6,32,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2147,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2149,"            if (displayOffset >= 0) {
",2,1,0,1,3,0,0,0,0,3,25,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2150,"                out.write('+');
",0,0,0,1,2,0,4,0,0,5,15,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2152,"                out.write('-');
",0,0,0,1,2,0,4,0,0,5,15,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2153,"                displayOffset = -displayOffset;
",4,0,0,0,0,0,0,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2156,"            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,0,0,0,0,0,0,9,62,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2157,"            FormatUtils.writePaddedInteger(out, hours, 2);
",0,0,0,1,2,0,8,0,0,8,46,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2158,"            if (iMaxFields == 1) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2159,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2161,"            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,1,2,0,0,0,0,10,64,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2162,"            if (displayOffset == 0 && iMinFields == 1) {
",4,3,0,1,3,0,0,0,0,7,44,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2163,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2166,"            int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,9,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2167,"            if (iShowSeparators) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2168,"                out.write(':');
",0,0,0,1,2,0,4,0,0,5,15,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2170,"            FormatUtils.writePaddedInteger(out, minutes, 2);
",0,0,0,1,2,0,8,0,0,8,48,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2171,"            if (iMaxFields == 2) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2172,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2174,"            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,10,63,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2175,"            if (displayOffset == 0 && iMinFields == 2) {
",4,3,0,1,3,0,0,0,0,7,44,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2176,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2179,"            int seconds = displayOffset / DateTimeConstants.MILLIS_PER_SECOND;
",8,1,0,0,0,0,0,0,0,9,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2180,"            if (iShowSeparators) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2181,"                out.write(':');
",0,0,0,1,2,0,4,0,0,5,15,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2183,"            FormatUtils.writePaddedInteger(out, seconds, 2);
",0,0,0,1,2,0,8,0,0,8,48,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2184,"            if (iMaxFields == 3) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2185,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2187,"            displayOffset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;
",8,1,0,0,0,0,0,0,0,10,63,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2188,"            if (displayOffset == 0 && iMinFields == 3) {
",4,3,0,1,3,0,0,0,0,7,44,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2189,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2192,"            if (iShowSeparators) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2193,"                out.write('.');
",0,0,0,1,2,0,4,0,0,5,15,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2195,"            FormatUtils.writePaddedInteger(out, displayOffset, 3);
",0,0,0,1,2,0,8,0,0,8,54,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2196,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2200,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2204,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2211,"            int limit = text.length() - position;
",4,1,0,1,2,0,4,0,0,9,37,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2214,"            if (iZeroOffsetParseText != null) {
",2,1,0,1,3,0,0,0,0,3,35,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2215,"                if (iZeroOffsetParseText.length() == 0) {
",0,1,0,2,5,0,4,0,0,5,41,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2217,"                    if (limit > 0) {
",2,1,0,1,3,0,0,0,0,3,16,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2218,"                        char c = text.charAt(position);
",2,0,0,1,2,0,6,0,0,8,31,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2219,"                        if (c == '-' || c == '+') {
",4,3,0,1,3,0,0,0,0,9,27,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2220,"                            break zeroOffset;
",2,0,0,0,0,0,0,0,0,2,17,14,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2223,"                    bucket.setOffset(0);
",0,0,0,1,2,0,4,0,0,4,20,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2224,"                    return position;
",2,0,0,0,0,1,0,0,0,2,16,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2226,"                if (text.regionMatches(true, position, iZeroOffsetParseText, 0, iZeroOffsetParseText.length())) {
",0,0,0,3,7,0,12,0,0,13,97,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2227,"                    bucket.setOffset(0);
",0,0,0,1,2,0,4,0,0,4,20,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2228,"                    return position + iZeroOffsetParseText.length();
",2,1,0,1,2,1,4,0,0,7,48,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2234,"            if (limit <= 1) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2235,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2239,"            char c = text.charAt(position);
",2,0,0,1,2,0,6,0,0,8,31,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2240,"            if (c == '-') {
",2,1,0,1,3,0,0,0,0,4,15,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2241,"                negative = true;
",2,0,0,0,0,0,0,0,0,4,16,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2242,"            } else if (c == '+') {
",2,1,0,1,4,0,0,0,0,4,22,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2243,"                negative = false;
",2,0,0,0,0,0,0,0,0,4,17,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2245,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2248,"            limit--;
",2,0,0,0,0,0,0,0,0,3,8,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2249,"            position++;
",2,0,0,0,0,0,0,0,0,3,11,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2263,"            if (digitCount(text, position, 2) < 2) {
",0,1,0,2,5,0,6,0,0,7,40,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2265,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2270,"            int hours = FormatUtils.parseTwoDigits(text, position);
",2,0,0,1,2,0,8,0,0,10,55,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2271,"            if (hours > 23) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2272,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2274,"            offset = hours * DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,0,0,0,0,0,0,10,51,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2275,"            limit -= 2;
",2,0,0,0,0,0,0,0,0,3,11,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2276,"            position += 2;
",2,0,0,0,0,0,0,0,0,3,14,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2282,"                if (limit <= 0) {
",2,1,0,1,3,0,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2283,"                    break parse;
",2,0,0,0,0,0,0,0,0,2,12,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2287,"                c = text.charAt(position);
",2,0,0,1,2,0,6,0,0,9,26,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2288,"                if (c == ':') {
",2,1,0,1,3,0,0,0,0,4,15,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2289,"                    expectSeparators = true;
",2,0,0,0,0,0,0,0,0,4,24,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2290,"                    limit--;
",2,0,0,0,0,0,0,0,0,3,8,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2291,"                    position++;
",2,0,0,0,0,0,0,0,0,3,11,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2292,"                } else if (c >= '0' && c <= '9') {
",4,3,0,1,4,0,0,0,0,9,34,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2293,"                    expectSeparators = false;
",2,0,0,0,0,0,0,0,0,4,25,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2300,"                int count = digitCount(text, position, 2);
",2,0,0,1,2,0,6,0,0,8,42,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2301,"                if (count == 0 && !expectSeparators) {
",4,2,0,1,3,0,0,0,0,7,38,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2302,"                    break parse;
",2,0,0,0,0,0,0,0,0,2,12,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2303,"                } else if (count < 2) {
",2,1,0,1,4,0,0,0,0,3,23,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2305,"                    return ~position;
",2,0,0,0,0,1,0,0,0,3,17,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2308,"                int minutes = FormatUtils.parseTwoDigits(text, position);
",2,0,0,1,2,0,8,0,0,10,57,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2309,"                if (minutes > 59) {
",2,1,0,1,3,0,0,0,0,3,19,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2310,"                    return ~position;
",2,0,0,0,0,1,0,0,0,3,17,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2312,"                offset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,10,56,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2313,"                limit -= 2;
",2,0,0,0,0,0,0,0,0,3,11,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2314,"                position += 2;
",2,0,0,0,0,0,0,0,0,3,14,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2318,"                if (limit <= 0) {
",2,1,0,1,3,0,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2319,"                    break parse;
",2,0,0,0,0,0,0,0,0,2,12,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2322,"                if (expectSeparators) {
",2,0,0,1,3,0,0,0,0,2,23,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2323,"                    if (text.charAt(position) != ':') {
",0,1,0,2,5,0,6,0,0,8,35,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2324,"                        break parse;
",2,0,0,0,0,0,0,0,0,2,12,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2326,"                    limit--;
",2,0,0,0,0,0,0,0,0,3,8,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2327,"                    position++;
",2,0,0,0,0,0,0,0,0,3,11,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2330,"                count = digitCount(text, position, 2);
",2,0,0,1,2,0,6,0,0,9,38,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2331,"                if (count == 0 && !expectSeparators) {
",4,2,0,1,3,0,0,0,0,7,38,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2332,"                    break parse;
",2,0,0,0,0,0,0,0,0,2,12,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2333,"                } else if (count < 2) {
",2,1,0,1,4,0,0,0,0,3,23,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2335,"                    return ~position;
",2,0,0,0,0,1,0,0,0,3,17,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2338,"                int seconds = FormatUtils.parseTwoDigits(text, position);
",2,0,0,1,2,0,8,0,0,10,57,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2339,"                if (seconds > 59) {
",2,1,0,1,3,0,0,0,0,3,19,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2340,"                    return ~position;
",2,0,0,0,0,1,0,0,0,3,17,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2342,"                offset += seconds * DateTimeConstants.MILLIS_PER_SECOND;
",8,1,0,0,0,0,0,0,0,10,56,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2343,"                limit -= 2;
",2,0,0,0,0,0,0,0,0,3,11,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2344,"                position += 2;
",2,0,0,0,0,0,0,0,0,3,14,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2348,"                if (limit <= 0) {
",2,1,0,1,3,0,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2349,"                    break parse;
",2,0,0,0,0,0,0,0,0,2,12,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2352,"                if (expectSeparators) {
",2,0,0,1,3,0,0,0,0,2,23,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2353,"                    if (text.charAt(position) != '.' && text.charAt(position) != ',') {
",0,3,0,3,7,0,12,0,0,17,67,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2354,"                        break parse;
",2,0,0,0,0,0,0,0,0,2,12,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2356,"                    limit--;
",2,0,0,0,0,0,0,0,0,3,8,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2357,"                    position++;
",2,0,0,0,0,0,0,0,0,3,11,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2360,"                count = digitCount(text, position, 3);
",2,0,0,1,2,0,6,0,0,9,38,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2361,"                if (count == 0 && !expectSeparators) {
",4,2,0,1,3,0,0,0,0,7,38,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2362,"                    break parse;
",2,0,0,0,0,0,0,0,0,2,12,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2363,"                } else if (count < 1) {
",2,1,0,1,4,0,0,0,0,3,23,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2365,"                    return ~position;
",2,0,0,0,0,1,0,0,0,3,17,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2368,"                offset += (text.charAt(position++) - '0') * 100;
",4,2,0,2,4,0,4,0,0,13,48,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2369,"                if (count > 1) {
",2,1,0,1,3,0,0,0,0,3,16,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2370,"                    offset += (text.charAt(position++) - '0') * 10;
",4,2,0,2,4,0,4,0,0,13,47,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2371,"                    if (count > 2) {
",2,1,0,1,3,0,0,0,0,3,16,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2372,"                        offset += text.charAt(position++) - '0';
",4,1,0,1,2,0,4,0,0,12,40,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2377,"            bucket.setOffset(negative ? -offset : offset);
",6,0,0,1,2,0,4,0,0,11,46,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2378,"            return position;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2386,"            int limit = Math.min(text.length() - position, amount);
",4,1,0,2,4,0,10,0,0,15,55,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2387,"            amount = 0;
",2,0,0,0,0,0,0,0,0,3,11,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2388,"            for (; limit > 0; limit--) {
",4,1,0,1,3,0,0,0,0,6,28,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2389,"                char c = text.charAt(position + amount);
",6,1,0,1,2,0,4,0,0,11,40,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2390,"                if (c < '0' || c > '9') {
",4,3,0,1,3,0,0,0,0,9,25,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2391,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2393,"                amount++;
",2,0,0,0,0,0,0,0,0,3,9,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2395,"            return amount;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1832,"                maxDigits = 18;
",2,0,0,0,0,0,0,0,0,3,15,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1847,"            } catch (IOException e) {
",2,0,0,1,4,0,0,2,0,4,25,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1855,"            printTo(null, out, instant, chrono);
",0,0,0,1,2,0,8,0,0,9,36,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1856,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1861,"            long millis = partial.getChronology().set(partial, 0L);
",2,0,0,2,4,0,8,0,0,10,55,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1863,"                printTo(buf, null, millis, partial.getChronology());
",0,0,0,2,4,0,10,0,0,11,52,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1866,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1864,"            } catch (IOException e) {
",2,0,0,1,4,0,0,2,0,4,25,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1867,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1872,"            long millis = partial.getChronology().set(partial, 0L);
",2,0,0,2,4,0,8,0,0,10,55,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1873,"            printTo(null, out, millis, partial.getChronology());
",0,0,0,2,4,0,10,0,0,11,52,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1874,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1885,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1886,"                if (buf != null) {
",2,1,0,1,3,0,0,0,0,3,18,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1887,"                    appendUnknownString(buf, minDigits);
",0,0,0,1,2,0,6,0,0,6,36,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1889,"                    printUnknownString(out, minDigits);
",0,0,0,1,2,0,6,0,0,6,35,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1891,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1900,"                    while (--minDigits >= 0) {
",2,1,0,1,3,0,0,0,0,4,26,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1901,"                        out.write('0');
",0,0,0,1,2,0,4,0,0,5,15,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1908,"            long[] fractionData = getFractionData(fraction, field);
",2,0,0,2,4,0,6,0,0,8,55,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1909,"            long scaled = fractionData[0];
",2,0,1,1,2,0,0,0,0,4,30,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1910,"            int maxDigits = (int) fractionData[1];
",2,0,1,2,4,0,0,0,0,4,38,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1912,"            if ((scaled & 0x7fffffff) == scaled) {
",4,2,0,2,5,0,0,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1913,"                str = Integer.toString((int) scaled);
",4,0,0,2,4,0,4,0,0,9,37,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1915,"                str = Long.toString(scaled);
",2,0,0,1,2,0,6,0,0,9,28,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1918,"            int length = str.length();
",2,0,0,1,2,0,4,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1919,"            int digits = maxDigits;
",4,0,0,0,0,0,0,0,0,4,23,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1920,"            while (length < digits) {
",4,1,0,1,3,0,0,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1921,"                if (buf != null) {
",2,1,0,1,3,0,0,0,0,3,18,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1922,"                    buf.append('0');
",0,0,0,1,2,0,4,0,0,5,16,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1924,"                    out.write('0');
",0,0,0,1,2,0,4,0,0,5,15,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1926,"                minDigits--;
",2,0,0,0,0,0,0,0,0,3,12,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1927,"                digits--;
",2,0,0,0,0,0,0,0,0,3,9,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1930,"            if (minDigits < digits) {
",4,1,0,1,3,0,0,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1932,"                while (minDigits < digits) {
",4,1,0,1,3,0,0,0,0,5,28,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1933,"                    if (length <= 1 || str.charAt(length - 1) != '0') {
",4,4,0,2,5,0,4,0,0,13,51,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1934,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1936,"                    digits--;
",2,0,0,0,0,0,0,0,0,3,9,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1937,"                    length--;
",2,0,0,0,0,0,0,0,0,3,9,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1939,"                if (length < str.length()) {
",2,1,0,2,5,0,4,0,0,7,28,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1940,"                    if (buf != null) {
",2,1,0,1,3,0,0,0,0,3,18,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1941,"                        for (int i=0; i<length; i++) {
",8,1,0,1,3,0,0,0,0,10,30,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1942,"                            buf.append(str.charAt(i));
",0,0,0,2,4,0,10,0,0,10,26,14,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1945,"                        for (int i=0; i<length; i++) {
",8,1,0,1,3,0,0,0,0,10,30,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1946,"                            out.write(str.charAt(i));
",0,0,0,2,4,0,10,0,0,10,25,14,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1949,"                    return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1953,"            if (buf != null) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1954,"                buf.append(str);
",0,0,0,1,2,0,6,0,0,6,16,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1956,"                out.write(str);
",0,0,0,1,2,0,6,0,0,6,15,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1958,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1961,"            long rangeMillis = field.getDurationField().getUnitMillis();
",2,0,0,2,4,0,6,0,0,8,60,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1963,"            int maxDigits = iMaxDigits;
",4,0,0,0,0,0,0,0,0,4,27,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1965,"                switch (maxDigits) {
",2,0,0,1,3,0,0,0,0,2,20,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1966,"                default: scalar = 1L; break;
",2,0,0,0,0,0,0,0,0,3,28,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1967,"                case 1:  scalar = 10L; break;
",2,0,0,0,0,0,0,0,0,3,29,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1968,"                case 2:  scalar = 100L; break;
",2,0,0,0,0,0,0,0,0,3,30,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1969,"                case 3:  scalar = 1000L; break;
",2,0,0,0,0,0,0,0,0,3,31,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1970,"                case 4:  scalar = 10000L; break;
",2,0,0,0,0,0,0,0,0,3,32,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1971,"                case 5:  scalar = 100000L; break;
",2,0,0,0,0,0,0,0,0,3,33,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1972,"                case 6:  scalar = 1000000L; break;
",2,0,0,0,0,0,0,0,0,3,34,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1973,"                case 7:  scalar = 10000000L; break;
",2,0,0,0,0,0,0,0,0,3,35,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1974,"                case 8:  scalar = 100000000L; break;
",2,0,0,0,0,0,0,0,0,3,36,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1975,"                case 9:  scalar = 1000000000L; break;
",2,0,0,0,0,0,0,0,0,3,37,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1976,"                case 10: scalar = 10000000000L; break;
",2,0,0,0,0,0,0,0,0,3,38,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1977,"                case 11: scalar = 100000000000L; break;
",2,0,0,0,0,0,0,0,0,3,39,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1978,"                case 12: scalar = 1000000000000L; break;
",2,0,0,0,0,0,0,0,0,3,40,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1979,"                case 13: scalar = 10000000000000L; break;
",2,0,0,0,0,0,0,0,0,3,41,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1980,"                case 14: scalar = 100000000000000L; break;
",2,0,0,0,0,0,0,0,0,3,42,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1981,"                case 15: scalar = 1000000000000000L; break;
",2,0,0,0,0,0,0,0,0,3,43,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1982,"                case 16: scalar = 10000000000000000L; break;
",2,0,0,0,0,0,0,0,0,3,44,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1983,"                case 17: scalar = 100000000000000000L; break;
",2,0,0,0,0,0,0,0,0,3,45,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1984,"                case 18: scalar = 1000000000000000000L; break;
",2,0,0,0,0,0,0,0,0,3,46,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1986,"                if (((rangeMillis * scalar) / scalar) == rangeMillis) {
",8,3,0,3,7,0,0,0,0,11,55,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1987,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1990,"                maxDigits--;
",2,0,0,0,0,0,0,0,0,3,12,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1993,"            return new long[] {fraction * scalar / rangeMillis, maxDigits};
",8,2,0,2,4,1,0,0,0,10,63,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2001,"            DateTimeField field = iFieldType.getField(bucket.getChronology());
",2,0,0,2,4,0,8,2,0,12,66,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2003,"            int limit = Math.min(iMaxDigits, text.length() - position);
",4,1,0,2,4,0,10,0,0,15,59,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2005,"            long value = 0;
",2,0,0,0,0,0,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2006,"            long n = field.getDurationField().getUnitMillis() * 10;
",2,1,0,2,4,0,6,0,0,9,55,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2007,"            int length = 0;
",2,0,0,0,0,0,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2008,"            while (length < limit) {
",4,1,0,1,3,0,0,0,0,5,24,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2009,"                char c = text.charAt(position + length);
",6,1,0,1,2,0,4,0,0,11,40,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2010,"                if (c < '0' || c > '9') {
",4,3,0,1,3,0,0,0,0,9,25,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2011,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2013,"                length++;
",2,0,0,0,0,0,0,0,0,3,9,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2014,"                long nn = n / 10;
",4,1,0,0,0,0,0,0,0,5,17,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2015,"                value += (c - '0') * nn;
",6,2,0,1,2,0,0,0,0,10,24,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2016,"                n = nn;
",4,0,0,0,0,0,0,0,0,5,7,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2017,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2019,"            value /= 10;
",2,0,0,0,0,0,0,0,0,3,12,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2021,"            if (length == 0) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2022,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2025,"            if (value > Integer.MAX_VALUE) {
",6,1,0,1,3,0,0,0,0,7,32,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2026,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2029,"            DateTimeField parseField = new PreciseDateTimeField(
",2,0,0,0,1,0,0,4,0,6,52,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2034,"            bucket.saveField(parseField, (int) value);
",2,0,0,2,4,0,6,0,0,8,42,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,2036,"            return position + length;
",4,1,0,0,0,1,0,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1687,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1688,"            iFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1689,"            iShort = isShort;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1690,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1681,"        private static Map<Locale, Map<DateTimeFieldType, Object[]>> cParseCache =
",2,0,0,1,2,2,0,10,0,14,74,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1693,"            return iShort ? 6 : 20;
",2,0,0,0,0,1,0,0,0,2,23,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1700,"                buf.append(print(instant, chrono, locale));
",0,0,0,2,4,0,12,0,0,12,43,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1703,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1701,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1702,"                buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1704,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1710,"                out.write(print(instant, chrono, locale));
",0,0,0,2,4,0,12,0,0,12,42,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1713,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1711,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1712,"                out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1714,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1718,"                buf.append(print(partial, locale));
",0,0,0,2,4,0,10,0,0,10,35,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1721,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1719,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1720,"                buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1722,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1726,"                out.write(print(partial, locale));
",0,0,0,2,4,0,10,0,0,10,34,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1729,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1727,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1728,"                out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1730,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1733,"            DateTimeField field = iFieldType.getField(chrono);
",2,0,0,1,2,0,6,2,0,10,50,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1734,"            if (iShort) {
",2,0,0,1,3,0,0,0,0,2,13,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1735,"                return field.getAsShortText(instant, locale);
",0,0,0,1,2,1,8,0,0,8,45,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1737,"                return field.getAsText(instant, locale);
",0,0,0,1,2,1,8,0,0,8,40,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1742,"            if (partial.isSupported(iFieldType)) {
",0,0,0,2,5,0,6,0,0,6,38,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1743,"                DateTimeField field = iFieldType.getField(partial.getChronology());
",2,0,0,2,4,0,8,2,0,12,67,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1744,"                if (iShort) {
",2,0,0,1,3,0,0,0,0,2,13,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1745,"                    return field.getAsShortText(partial, locale);
",0,0,0,1,2,1,8,0,0,8,45,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1747,"                    return field.getAsText(partial, locale);
",0,0,0,1,2,1,8,0,0,8,40,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1750,"                return ""\ufffd"";
",0,0,0,0,0,1,0,0,0,1,16,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1755,"            return estimatePrintedLength();
",0,0,0,1,2,1,2,0,0,2,31,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1760,"            Locale locale = bucket.getLocale();
",2,0,0,1,2,0,4,2,0,8,35,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1763,"            Set<String> validValues = null;
",2,0,0,0,0,0,0,4,0,6,31,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1764,"            int maxLength = 0;
",2,0,0,0,0,0,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1765,"            synchronized (cParseCache) {
",2,0,0,1,3,0,0,0,0,2,28,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1766,"                Map<DateTimeFieldType, Object[]> innerMap = cParseCache.get(locale);
",2,0,0,2,4,0,6,6,0,14,68,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1767,"                if (innerMap == null) {
",2,1,0,1,3,0,0,0,0,3,23,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1768,"                    innerMap = new HashMap<DateTimeFieldType, Object[]>();
",2,0,0,2,4,0,0,6,0,9,54,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1769,"                    cParseCache.put(locale, innerMap);
",0,0,0,1,2,0,8,0,0,8,34,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1771,"                Object[] array = innerMap.get(iFieldType);
",2,0,0,2,4,0,6,2,0,10,42,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1772,"                if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1773,"                    validValues = new HashSet<String>(32);
",2,0,0,1,2,0,0,4,0,7,38,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1774,"                    MutableDateTime dt = new MutableDateTime(0L, DateTimeZone.UTC);
",6,0,0,1,2,0,0,4,0,10,63,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1775,"                    Property property = dt.property(iFieldType);
",2,0,0,1,2,0,6,2,0,10,44,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1776,"                    int min = property.getMinimumValueOverall();
",2,0,0,1,2,0,4,0,0,6,44,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1777,"                    int max = property.getMaximumValueOverall();
",2,0,0,1,2,0,4,0,0,6,44,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1778,"                    if (max - min > 32) {  // protect against invalid fields
",4,2,0,1,3,0,0,0,0,6,56,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1779,"                        return ~position;
",2,0,0,0,0,1,0,0,0,3,17,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1781,"                    maxLength = property.getMaximumTextLength(locale);
",2,0,0,1,2,0,6,0,0,9,50,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1782,"                    for (int i = min; i <= max; i++) {
",10,1,0,1,3,0,0,0,0,12,34,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1783,"                        property.set(i);
",0,0,0,1,2,0,6,0,0,6,16,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1784,"                        validValues.add(property.getAsShortText(locale));
",0,0,0,2,4,0,10,0,0,10,49,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1785,"                        validValues.add(property.getAsShortText(locale).toLowerCase(locale));
",0,0,0,3,6,0,14,0,0,14,69,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1786,"                        validValues.add(property.getAsShortText(locale).toUpperCase(locale));
",0,0,0,3,6,0,14,0,0,14,69,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1787,"                        validValues.add(property.getAsText(locale));
",0,0,0,2,4,0,10,0,0,10,44,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1788,"                        validValues.add(property.getAsText(locale).toLowerCase(locale));
",0,0,0,3,6,0,14,0,0,14,64,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1789,"                        validValues.add(property.getAsText(locale).toUpperCase(locale));
",0,0,0,3,6,0,14,0,0,14,64,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1791,"                    if (""en"".equals(locale.getLanguage()) && iFieldType == DateTimeFieldType.era()) {
",2,2,0,4,9,0,10,0,0,15,81,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1793,"                        validValues.add(""BCE"");
",0,0,0,1,2,0,4,0,0,5,23,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1794,"                        validValues.add(""bce"");
",0,0,0,1,2,0,4,0,0,5,23,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1795,"                        validValues.add(""CE"");
",0,0,0,1,2,0,4,0,0,5,22,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1796,"                        validValues.add(""ce"");
",0,0,0,1,2,0,4,0,0,5,22,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1797,"                        maxLength = 3;
",2,0,0,0,0,0,0,0,0,3,14,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1799,"                    array = new Object[] {validValues, new Integer(maxLength)};
",6,0,0,3,6,0,0,4,0,11,59,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1800,"                    innerMap.put(iFieldType, array);
",0,0,0,1,2,0,8,0,0,8,32,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1801,"                } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1802,"                    validValues = (Set<String>) array[0];
",2,0,1,2,4,0,0,4,0,9,37,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1803,"                    maxLength = ((Integer) array[1]).intValue();
",2,0,1,4,8,0,2,2,0,9,44,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1805,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1807,"            int limit = Math.min(text.length(), position + maxLength);
",6,1,0,2,4,0,8,0,0,15,58,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1808,"            for (int i = limit; i > position; i--) {
",10,1,0,1,3,0,0,0,0,12,40,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1809,"                String match = text.substring(position, i);
",2,0,0,1,2,0,8,2,0,12,43,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1810,"                if (validValues.contains(match)) {
",0,0,0,2,5,0,6,0,0,6,34,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1811,"                    bucket.saveField(iFieldType, match, locale);
",0,0,0,1,2,0,10,0,0,10,44,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1812,"                    return i;
",2,0,0,0,0,1,0,0,0,2,9,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1815,"            return ~position;
",2,0,0,0,0,1,0,0,0,3,17,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1494,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1495,"            iType = type;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1496,"            iPivot = pivot;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1497,"            iLenientParse = lenientParse;
",4,0,0,0,0,0,0,0,0,5,29,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1498,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1501,"            return iLenientParse ? 4 : 2;
",2,0,0,0,0,1,0,0,0,2,29,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1505,"            int limit = text.length() - position;
",4,1,0,1,2,0,4,0,0,9,37,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1507,"            if (!iLenientParse) {
",2,0,0,1,3,0,0,0,0,3,21,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1508,"                limit = Math.min(2, limit);
",2,0,0,1,2,0,6,0,0,9,27,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1509,"                if (limit < 2) {
",2,1,0,1,3,0,0,0,0,3,16,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1510,"                    return ~position;
",2,0,0,0,0,1,0,0,0,3,17,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1513,"                boolean hasSignChar = false;
",2,0,0,0,0,0,0,0,0,3,28,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1514,"                boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1515,"                int length = 0;
",2,0,0,0,0,0,0,0,0,2,15,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1516,"                while (length < limit) {
",4,1,0,1,3,0,0,0,0,5,24,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1517,"                    char c = text.charAt(position + length);
",6,1,0,1,2,0,4,0,0,11,40,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1518,"                    if (length == 0 && (c == '-' || c == '+')) {
",6,5,0,2,5,0,0,0,0,13,44,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1519,"                        hasSignChar = true;
",2,0,0,0,0,0,0,0,0,4,19,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1520,"                        negative = c == '-';
",4,1,0,0,0,0,0,0,0,7,20,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1521,"                        if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1522,"                            length++;
",2,0,0,0,0,0,0,0,0,3,9,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1525,"                            position++;
",2,0,0,0,0,0,0,0,0,3,11,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1526,"                            limit--;
",2,0,0,0,0,0,0,0,0,3,8,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1528,"                        continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1530,"                    if (c < '0' || c > '9') {
",4,3,0,1,3,0,0,0,0,9,25,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1531,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1533,"                    length++;
",2,0,0,0,0,0,0,0,0,3,9,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1534,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1536,"                if (length == 0) {
",2,1,0,1,3,0,0,0,0,3,18,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1537,"                    return ~position;
",2,0,0,0,0,1,0,0,0,3,17,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1540,"                if (hasSignChar || length != 2) {
",4,2,0,1,3,0,0,0,0,6,33,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1542,"                    if (length >= 9) {
",2,1,0,1,3,0,0,0,0,3,18,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1545,"                        value = Integer.parseInt(text.substring(position, position += length));
",6,0,0,2,4,0,10,0,0,18,71,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1547,"                        int i = position;
",4,0,0,0,0,0,0,0,0,4,17,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1548,"                        if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1549,"                            i++;
",2,0,0,0,0,0,0,0,0,3,4,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1552,"                            value = text.charAt(i++) - '0';
",4,1,0,1,2,0,4,0,0,12,31,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1555,"                        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1553,"                        } catch (StringIndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,45,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1554,"                            return ~position;
",2,0,0,0,0,1,0,0,0,3,17,14,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1556,"                        position += length;
",4,0,0,0,0,0,0,0,0,5,19,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1557,"                        while (i < position) {
",4,1,0,1,3,0,0,0,0,5,22,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1558,"                            value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';
",8,5,0,4,8,0,4,0,0,20,63,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1560,"                        if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1561,"                            value = -value;
",4,0,0,0,0,0,0,0,0,6,15,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1565,"                    bucket.saveField(iType, value);
",0,0,0,1,2,0,8,0,0,8,31,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1566,"                    return position;
",2,0,0,0,0,1,0,0,0,2,16,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1571,"            char c = text.charAt(position);
",2,0,0,1,2,0,6,0,0,8,31,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1572,"            if (c < '0' || c > '9') {
",4,3,0,1,3,0,0,0,0,9,25,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1573,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1575,"            year = c - '0';
",4,1,0,0,0,0,0,0,0,7,15,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1576,"            c = text.charAt(position + 1);
",4,1,0,1,2,0,4,0,0,10,30,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1577,"            if (c < '0' || c > '9') {
",4,3,0,1,3,0,0,0,0,9,25,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1578,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1580,"            year = ((year << 3) + (year << 1)) + c - '0';
",8,5,0,3,6,0,0,0,0,15,45,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1582,"            int pivot = iPivot;
",4,0,0,0,0,0,0,0,0,4,19,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1584,"            if (bucket.getPivotYear() != null) {
",0,1,0,2,5,0,4,0,0,5,36,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1585,"                pivot = bucket.getPivotYear().intValue();
",2,0,0,2,4,0,6,0,0,9,41,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1588,"            int low = pivot - 50;
",4,1,0,0,0,0,0,0,0,5,21,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1591,"            if (low >= 0) {
",2,1,0,1,3,0,0,0,0,3,15,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1592,"                t = low % 100;
",4,1,0,0,0,0,0,0,0,6,14,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1594,"                t = 99 + ((low + 1) % 100);
",4,3,0,2,4,0,0,0,0,8,27,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1597,"            year += low + ((year < t) ? 100 : 0) - t;
",10,3,0,2,4,0,0,0,0,14,41,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1599,"            bucket.saveField(iType, year);
",0,0,0,1,2,0,8,0,0,8,30,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1600,"            return position + 2;
",2,1,0,0,0,1,0,0,0,3,20,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1604,"            return 2;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1610,"            int year = getTwoDigitYear(instant, chrono);
",2,0,0,1,2,0,6,0,0,8,44,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1611,"            if (year < 0) {
",2,1,0,1,3,0,0,0,0,3,15,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1612,"                buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1613,"                buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1615,"                FormatUtils.appendPaddedInteger(buf, year, 2);
",0,0,0,1,2,0,8,0,0,8,46,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1617,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1622,"            int year = getTwoDigitYear(instant, chrono);
",2,0,0,1,2,0,6,0,0,8,44,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1623,"            if (year < 0) {
",2,1,0,1,3,0,0,0,0,3,15,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1624,"                out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1625,"                out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1627,"                FormatUtils.writePaddedInteger(out, year, 2);
",0,0,0,1,2,0,8,0,0,8,45,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1629,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1633,"                int year = iType.getField(chrono).get(instant);
",2,0,0,2,4,0,10,0,0,12,47,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1634,"                if (year < 0) {
",2,1,0,1,3,0,0,0,0,3,15,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1635,"                    year = -year;
",4,0,0,0,0,0,0,0,0,6,13,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1637,"                return year % 100;
",2,1,0,0,0,1,0,0,0,3,18,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1638,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1639,"                return -1;
",0,0,0,0,0,1,0,0,0,1,10,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1644,"            int year = getTwoDigitYear(partial);
",2,0,0,1,2,0,4,0,0,6,36,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1645,"            if (year < 0) {
",2,1,0,1,3,0,0,0,0,3,15,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1646,"                buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1647,"                buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1649,"                FormatUtils.appendPaddedInteger(buf, year, 2);
",0,0,0,1,2,0,8,0,0,8,46,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1651,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1654,"            int year = getTwoDigitYear(partial);
",2,0,0,1,2,0,4,0,0,6,36,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1655,"            if (year < 0) {
",2,1,0,1,3,0,0,0,0,3,15,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1656,"                out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1657,"                out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1659,"                FormatUtils.writePaddedInteger(out, year, 2);
",0,0,0,1,2,0,8,0,0,8,45,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1661,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1664,"            if (partial.isSupported(iType)) {
",0,0,0,2,5,0,6,0,0,6,33,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1666,"                    int year = partial.get(iType);
",2,0,0,1,2,0,6,0,0,8,30,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1667,"                    if (year < 0) {
",2,1,0,1,3,0,0,0,0,3,15,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1668,"                        year = -year;
",4,0,0,0,0,0,0,0,0,6,13,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1670,"                    return year % 100;
",2,1,0,0,0,1,0,0,0,3,18,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1671,"                } catch (RuntimeException e) {}
",2,0,0,2,5,0,0,2,0,4,31,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1673,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1455,"            super(fieldType, numDigits, signed, numDigits);
",8,0,0,1,2,0,0,0,0,8,47,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1456,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1459,"            int newPos = super.parseInto(bucket, text, position);
",10,0,0,1,2,0,0,0,0,10,53,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1460,"            if (newPos < 0) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1461,"                return newPos;
",2,0,0,0,0,1,0,0,0,2,14,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1463,"            int expectedPos = position + iMaxParsedDigits;
",6,1,0,0,0,0,0,0,0,7,46,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1464,"            if (newPos != expectedPos) {
",4,1,0,1,3,0,0,0,0,5,28,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1465,"                if (iSigned) {
",2,0,0,1,3,0,0,0,0,2,14,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1466,"                    char c = text.charAt(position);
",2,0,0,1,2,0,6,0,0,8,31,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1467,"                    if (c == '-' || c == '+') {
",4,3,0,1,3,0,0,0,0,9,27,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1468,"                        expectedPos++;
",2,0,0,0,0,0,0,0,0,3,14,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1471,"                if (newPos > expectedPos) {
",4,1,0,1,3,0,0,0,0,5,27,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1473,"                    return ~(expectedPos + 1);
",2,1,0,1,2,1,0,0,0,4,26,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1474,"                } else if (newPos < expectedPos) {
",4,1,0,1,4,0,0,0,0,5,34,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1476,"                    return ~newPos;
",2,0,0,0,0,1,0,0,0,3,15,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1479,"            return newPos;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1410,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1411,"                appendUnknownString(buf, iMinPrintedDigits);
",0,0,0,1,2,0,6,0,0,6,44,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1419,"                DateTimeField field = iFieldType.getField(chrono);
",2,0,0,1,2,0,6,2,0,10,50,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1420,"                FormatUtils.writePaddedInteger(out, field.get(instant), iMinPrintedDigits);
",0,0,0,2,4,0,14,0,0,14,75,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1423,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1421,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1422,"                printUnknownString(out, iMinPrintedDigits);
",0,0,0,1,2,0,6,0,0,6,43,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1424,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1427,"            if (partial.isSupported(iFieldType)) {
",0,0,0,2,5,0,6,0,0,6,38,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1429,"                    FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);
",0,0,0,2,4,0,14,0,0,14,81,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1432,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1430,"                } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1431,"                    appendUnknownString(buf, iMinPrintedDigits);
",0,0,0,1,2,0,6,0,0,6,44,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1434,"                appendUnknownString(buf, iMinPrintedDigits);
",0,0,0,1,2,0,6,0,0,6,44,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1436,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1439,"            if (partial.isSupported(iFieldType)) {
",0,0,0,2,5,0,6,0,0,6,38,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1441,"                    FormatUtils.writePaddedInteger(out, partial.get(iFieldType), iMinPrintedDigits);
",0,0,0,2,4,0,14,0,0,14,80,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1444,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1442,"                } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1443,"                    printUnknownString(out, iMinPrintedDigits);
",0,0,0,1,2,0,6,0,0,6,43,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1446,"                printUnknownString(out, iMinPrintedDigits);
",0,0,0,1,2,0,6,0,0,6,43,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1448,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1157,"            out.write(iValue);
",0,0,0,1,2,0,6,0,0,6,18,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1158,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1161,"            buf.append(iValue);
",0,0,0,1,2,0,6,0,0,6,19,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1162,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1165,"            out.write(iValue);
",0,0,0,1,2,0,6,0,0,6,18,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1166,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1173,"            if (position >= text.length()) {
",2,1,0,2,5,0,4,0,0,7,32,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1174,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1177,"            char a = text.charAt(position);
",2,0,0,1,2,0,6,0,0,8,31,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1178,"            char b = iValue;
",4,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1180,"            if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1181,"                a = Character.toUpperCase(a);
",2,0,0,1,2,0,6,0,0,9,29,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1182,"                b = Character.toUpperCase(b);
",2,0,0,1,2,0,6,0,0,9,29,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1183,"                if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1184,"                    a = Character.toLowerCase(a);
",2,0,0,1,2,0,6,0,0,9,29,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1185,"                    b = Character.toLowerCase(b);
",2,0,0,1,2,0,6,0,0,9,29,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1186,"                    if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1187,"                        return ~position;
",2,0,0,0,0,1,0,0,0,3,17,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1192,"            return position + 1;
",2,1,0,0,0,1,0,0,0,3,20,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1203,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1204,"            iValue = value;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1205,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1208,"            return iValue.length();
",0,0,0,1,2,1,4,0,0,4,23,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1214,"            buf.append(iValue);
",0,0,0,1,2,0,6,0,0,6,19,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1215,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1220,"            out.write(iValue);
",0,0,0,1,2,0,6,0,0,6,18,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1221,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1224,"            buf.append(iValue);
",0,0,0,1,2,0,6,0,0,6,19,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1225,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1228,"            out.write(iValue);
",0,0,0,1,2,0,6,0,0,6,18,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1229,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1232,"            return iValue.length();
",0,0,0,1,2,1,4,0,0,4,23,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1236,"            if (text.regionMatches(true, position, iValue, 0, iValue.length())) {
",0,0,0,3,7,0,12,0,0,13,69,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1237,"                return position + iValue.length();
",2,1,0,1,2,1,4,0,0,7,34,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,25,1239,"            return ~position;
",2,0,0,0,0,1,0,0,0,3,17,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,126,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,127,"        iPrinter = printer;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,128,"        iParser = parser;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,129,"        iLocale = locale;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,130,"        iOffsetParsed = offsetParsed;
",4,0,0,0,0,0,0,0,0,5,29,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,131,"        iChrono = chrono;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,132,"        iZone = zone;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,133,"        iPivotYear = pivotYear;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,134,"        iDefaultYear = defaultYear;
",4,0,0,0,0,0,0,0,0,5,27,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,135,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,144,"        return (iPrinter != null);
",2,1,0,1,2,1,0,0,0,3,26,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,162,"        return (iParser != null);
",2,1,0,1,2,1,0,0,0,3,25,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,187,"        if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {
",4,4,0,5,11,0,8,0,0,18,78,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,188,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,190,"        return new DateTimeFormatter(iPrinter, iParser, locale,
",6,0,0,0,1,1,0,2,0,8,55,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,201,"        return iLocale;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,220,"        if (iOffsetParsed == true) {
",2,1,0,1,3,0,0,0,0,4,28,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,221,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,223,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,
",6,0,0,0,1,1,0,2,0,8,56,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,234,"        return iOffsetParsed;
",2,0,0,0,0,1,0,0,0,2,21,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,255,"        if (iChrono == chrono) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,256,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,258,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,
",6,0,0,0,1,1,0,2,0,8,56,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,268,"        return iChrono;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,278,"        return iChrono;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,298,"        return withZone(DateTimeZone.UTC);
",4,0,0,1,2,1,2,0,0,6,34,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,318,"        if (iZone == zone) {
",4,1,0,1,3,0,0,0,0,5,20,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,319,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,321,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,
",6,0,0,0,1,1,0,2,0,8,56,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,331,"        return iZone;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,365,"        if (iPivotYear == pivotYear || (iPivotYear != null && iPivotYear.equals(pivotYear))) {
",6,4,0,3,7,0,6,0,0,16,86,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,366,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,368,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,
",6,0,0,0,1,1,0,2,0,8,56,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,402,"        return withPivotYear(new Integer(pivotYear));
",2,0,0,2,4,1,2,2,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,412,"      return iPivotYear;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,435,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,
",6,0,0,0,1,1,0,2,0,8,56,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,446,"      return iDefaultYear;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,469,"        long millis = DateTimeUtils.getInstantMillis(instant);
",2,0,0,1,2,0,6,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,470,"        Chronology chrono = DateTimeUtils.getInstantChronology(instant);
",2,0,0,1,2,0,6,2,0,10,64,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,471,"        printTo(out, millis, chrono);
",0,0,0,1,2,0,8,0,0,8,29,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,472,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,482,"        appendable.append(print(instant));
",0,0,0,2,4,0,8,0,0,8,34,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,483,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,494,"        printTo(buf, instant, null);
",0,0,0,1,2,0,6,0,0,7,28,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,495,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,505,"        printTo(out, instant, null);
",0,0,0,1,2,0,6,0,0,7,28,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,506,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,517,"        appendable.append(print(instant));
",0,0,0,2,4,0,8,0,0,8,34,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,518,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,531,"        DateTimePrinter printer = requirePrinter();
",2,0,0,1,2,0,2,2,0,6,43,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,532,"        if (partial == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,533,"            throw new IllegalArgumentException(""The partial must not be null"");
",0,0,0,1,2,0,0,2,0,4,67,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,535,"        printer.printTo(buf, partial, iLocale);
",0,0,0,1,2,0,10,0,0,10,39,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,536,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,548,"        DateTimePrinter printer = requirePrinter();
",2,0,0,1,2,0,2,2,0,6,43,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,549,"        if (partial == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,550,"            throw new IllegalArgumentException(""The partial must not be null"");
",0,0,0,1,2,0,0,2,0,4,67,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,552,"        printer.printTo(out, partial, iLocale);
",0,0,0,1,2,0,10,0,0,10,39,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,553,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,566,"        appendable.append(print(partial));
",0,0,0,2,4,0,8,0,0,8,34,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,567,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,595,"        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());
",2,0,0,3,6,0,4,4,0,10,78,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,596,"        printTo(buf, instant);
",0,0,0,1,2,0,6,0,0,6,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,597,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,610,"        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());
",2,0,0,3,6,0,4,4,0,10,78,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,611,"        printTo(buf, partial);
",0,0,0,1,2,0,6,0,0,6,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,612,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,625,"            zone = DateTimeZone.UTC;
",6,0,0,0,0,0,0,0,0,7,24,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,626,"            offset = 0;
",2,0,0,0,0,0,0,0,0,3,11,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,627,"            adjustedInstant = instant;
",4,0,0,0,0,0,0,0,0,5,26,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,633,"        DateTimePrinter printer = requirePrinter();
",2,0,0,1,2,0,2,2,0,6,43,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,634,"        chrono = selectChronology(chrono);
",2,0,0,1,2,0,4,0,0,7,34,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,637,"        DateTimeZone zone = chrono.getZone();
",2,0,0,1,2,0,4,2,0,8,37,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,638,"        int offset = zone.getOffset(instant);
",2,0,0,1,2,0,6,0,0,8,37,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,639,"        long adjustedInstant = instant + offset;
",6,1,0,0,0,0,0,0,0,7,40,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,640,"        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {
",8,5,0,3,7,0,0,0,0,13,65,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,642,"            zone = DateTimeZone.UTC;
",6,0,0,0,0,0,0,0,0,7,24,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,643,"            offset = 0;
",2,0,0,0,0,0,0,0,0,3,11,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,644,"            adjustedInstant = instant;
",4,0,0,0,0,0,0,0,0,5,26,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,646,"        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);
",0,0,0,2,4,0,18,0,0,18,79,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,647,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,657,"            throw new UnsupportedOperationException(""Printing not supported"");
",0,0,0,1,2,0,0,2,0,3,66,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,693,"        DateTimeParser parser = requireParser();
",2,0,0,1,2,0,2,2,0,6,40,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,694,"        if (instant == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,695,"            throw new IllegalArgumentException(""Instant must not be null"");
",0,0,0,1,2,0,0,2,0,4,63,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,698,"        long instantMillis = instant.getMillis();
",2,0,0,1,2,0,4,0,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,699,"        Chronology chrono = instant.getChronology();
",2,0,0,1,2,0,4,2,0,8,44,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,700,"        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
",4,1,0,2,4,0,8,0,0,13,78,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,701,"        chrono = selectChronology(chrono);
",2,0,0,1,2,0,4,0,0,7,34,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,703,"        DateTimeParserBucket bucket = new DateTimeParserBucket(
",2,0,0,0,1,0,0,4,0,6,55,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,705,"        int newPos = parser.parseInto(bucket, text, position);
",2,0,0,1,2,0,10,0,0,12,54,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,706,"        instant.setMillis(bucket.computeMillis(false, text));
",0,0,0,2,4,0,10,0,0,11,53,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,707,"        if (iOffsetParsed && bucket.getZone() == null) {
",2,2,0,2,5,0,4,0,0,8,48,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,708,"            int parsedOffset = bucket.getOffset();
",2,0,0,1,2,0,4,0,0,6,38,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,709,"            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
",2,0,0,1,2,0,6,2,0,10,69,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,710,"            chrono = chrono.withZone(parsedZone);
",2,0,0,1,2,0,6,0,0,9,37,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,712,"        instant.setChronology(chrono);
",0,0,0,1,2,0,6,0,0,6,30,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,713,"        return newPos;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,729,"        DateTimeParser parser = requireParser();
",2,0,0,1,2,0,2,2,0,6,40,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,731,"        Chronology chrono = selectChronology(iChrono);
",2,0,0,1,2,0,4,2,0,8,46,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,732,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);
",10,0,0,1,2,0,0,4,0,14,101,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,733,"        int newPos = parser.parseInto(bucket, text, 0);
",2,0,0,1,2,0,8,0,0,10,47,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,734,"        if (newPos >= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,735,"            if (newPos >= text.length()) {
",2,1,0,2,5,0,4,0,0,7,30,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,736,"                return bucket.computeMillis(true, text);
",0,0,0,1,2,1,6,0,0,7,40,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,739,"            newPos = ~newPos;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,741,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));
",0,0,0,2,4,0,8,2,0,10,81,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,759,"        return parseLocalDateTime(text).toLocalDate();
",0,0,0,2,4,1,6,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,777,"        return parseLocalDateTime(text).toLocalTime();
",0,0,0,2,4,1,6,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,795,"        DateTimeParser parser = requireParser();
",2,0,0,1,2,0,2,2,0,6,40,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,797,"        Chronology chrono = selectChronology(null).withUTC();  // always use UTC, avoiding DST gaps
",2,0,0,2,4,0,4,2,0,9,91,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,798,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);
",10,0,0,1,2,0,0,4,0,14,101,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,799,"        int newPos = parser.parseInto(bucket, text, 0);
",2,0,0,1,2,0,8,0,0,10,47,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,800,"        if (newPos >= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,801,"            if (newPos >= text.length()) {
",2,1,0,2,5,0,4,0,0,7,30,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,802,"                long millis = bucket.computeMillis(true, text);
",2,0,0,1,2,0,6,0,0,9,47,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,803,"                if (bucket.getZone() == null) {  // treat withOffsetParsed() as being true
",0,1,0,3,7,0,4,0,0,5,74,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,804,"                    int parsedOffset = bucket.getOffset();
",2,0,0,1,2,0,4,0,0,6,38,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,805,"                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
",2,0,0,1,2,0,6,2,0,10,69,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,806,"                    chrono = chrono.withZone(parsedZone);
",2,0,0,1,2,0,6,0,0,9,37,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,808,"                return new LocalDateTime(millis, chrono);
",4,0,0,1,2,1,0,2,0,6,41,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,811,"            newPos = ~newPos;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,813,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));
",0,0,0,2,4,0,8,2,0,10,81,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,834,"        DateTimeParser parser = requireParser();
",2,0,0,1,2,0,2,2,0,6,40,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,836,"        Chronology chrono = selectChronology(null);
",2,0,0,1,2,0,2,2,0,7,43,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,837,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);
",10,0,0,1,2,0,0,4,0,14,101,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,838,"        int newPos = parser.parseInto(bucket, text, 0);
",2,0,0,1,2,0,8,0,0,10,47,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,839,"        if (newPos >= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,840,"            if (newPos >= text.length()) {
",2,1,0,2,5,0,4,0,0,7,30,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,841,"                long millis = bucket.computeMillis(true, text);
",2,0,0,1,2,0,6,0,0,9,47,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,842,"                if (iOffsetParsed && bucket.getZone() == null) {
",2,2,0,2,5,0,4,0,0,8,48,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,843,"                    int parsedOffset = bucket.getOffset();
",2,0,0,1,2,0,4,0,0,6,38,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,844,"                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
",2,0,0,1,2,0,6,2,0,10,69,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,845,"                    chrono = chrono.withZone(parsedZone);
",2,0,0,1,2,0,6,0,0,9,37,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,847,"                return new DateTime(millis, chrono);
",4,0,0,1,2,1,0,2,0,6,36,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,850,"            newPos = ~newPos;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,852,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));
",0,0,0,2,4,0,8,2,0,10,81,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,873,"        DateTimeParser parser = requireParser();
",2,0,0,1,2,0,2,2,0,6,40,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,875,"        Chronology chrono = selectChronology(null);
",2,0,0,1,2,0,2,2,0,7,43,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,876,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);
",10,0,0,1,2,0,0,4,0,14,101,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,877,"        int newPos = parser.parseInto(bucket, text, 0);
",2,0,0,1,2,0,8,0,0,10,47,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,878,"        if (newPos >= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,879,"            if (newPos >= text.length()) {
",2,1,0,2,5,0,4,0,0,7,30,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,880,"                long millis = bucket.computeMillis(true, text);
",2,0,0,1,2,0,6,0,0,9,47,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,881,"                if (iOffsetParsed && bucket.getZone() == null) {
",2,2,0,2,5,0,4,0,0,8,48,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,882,"                    int parsedOffset = bucket.getOffset();
",2,0,0,1,2,0,4,0,0,6,38,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,883,"                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
",2,0,0,1,2,0,6,2,0,10,69,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,884,"                    chrono = chrono.withZone(parsedZone);
",2,0,0,1,2,0,6,0,0,9,37,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,886,"                return new MutableDateTime(millis, chrono);
",4,0,0,1,2,1,0,2,0,6,43,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,889,"            newPos = ~newPos;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,891,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));
",0,0,0,2,4,0,8,2,0,10,81,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,900,"        DateTimeParser parser = iParser;
",4,0,0,0,0,0,0,2,0,6,32,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,901,"        if (parser == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,902,"            throw new UnsupportedOperationException(""Parsing not supported"");
",0,0,0,1,2,0,0,2,0,3,65,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,904,"        return parser;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,917,"            chrono = iChrono;
",4,0,0,0,0,0,0,0,0,5,17,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,25,920,"            chrono = chrono.withZone(iZone);
",2,0,0,1,2,0,6,0,0,9,32,6,0.00000,0
defect4j,time,org/joda/time/DateTime,25,111,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,112,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,123,"        super(zone);
",2,0,0,1,2,0,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,124,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,136,"        super(chronology);
",2,0,0,1,2,0,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,137,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,147,"        super(instant);
",2,0,0,1,2,0,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,148,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,174,"        super(instant, chronology);
",4,0,0,1,2,0,0,0,0,4,27,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,175,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,195,"        super(instant, (Chronology) null);
",2,0,0,2,4,0,0,2,0,5,34,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,196,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,219,"        super(instant, zone);
",4,0,0,1,2,0,0,0,0,4,21,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,220,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,240,"        super(instant, DateTimeUtils.getChronology(chronology));
",2,0,0,2,4,0,6,0,0,8,56,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,241,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,261,"        super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, 0, 0);
",10,0,0,1,2,0,0,0,0,10,68,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,262,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,311,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,313,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,335,"        super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, 0);
",12,0,0,1,2,0,0,0,0,12,81,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,336,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,361,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,363,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,389,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,391,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,414,"        super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
",14,0,0,1,2,0,0,0,0,14,94,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,415,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,470,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,472,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,91,"        return parse(str, ISODateTimeFormat.dateTimeParser().withOffsetParsed());
",0,0,0,3,6,1,10,0,0,10,73,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,102,"        return formatter.parseDateTime(str);
",0,0,0,1,2,1,6,0,0,6,36,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,481,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,491,"        if (getChronology() == ISOChronology.getInstance()) {
",0,1,0,3,7,0,6,0,0,7,53,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,492,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,494,"        return super.toDateTimeISO();
",2,0,0,1,2,1,0,0,0,2,29,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,504,"        zone = DateTimeUtils.getZone(zone);
",2,0,0,1,2,0,6,0,0,9,35,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,505,"        if (getZone() == zone) {
",2,1,0,2,5,0,2,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,506,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,508,"        return super.toDateTime(zone);
",4,0,0,1,2,1,0,0,0,4,30,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,518,"        chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,519,"        if (getChronology() == chronology) {
",2,1,0,2,5,0,2,0,0,5,36,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,520,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,522,"        return super.toDateTime(chronology);
",4,0,0,1,2,1,0,0,0,4,36,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,536,"        return (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));
",4,1,0,4,8,1,4,2,0,11,84,6,0.00000,0
defect4j,time,org/joda/time/DateTime,25,549,"        newChronology = DateTimeUtils.getChronology(newChronology);
",2,0,0,1,2,0,6,0,0,9,59,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,550,"        return (newChronology == getChronology() ? this : new DateTime(getMillis(), newChronology));
",4,1,0,4,8,1,4,2,0,11,92,6,0.00000,0
defect4j,time,org/joda/time/DateTime,25,572,"        return withChronology(getChronology().withZone(newZone));
",0,0,0,3,6,1,8,0,0,8,57,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,593,"        newZone = DateTimeUtils.getZone(newZone);
",2,0,0,1,2,0,6,0,0,9,41,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,594,"        DateTimeZone originalZone = DateTimeUtils.getZone(getZone());
",2,0,0,2,4,0,6,2,0,10,61,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,595,"        if (newZone == originalZone) {
",4,1,0,1,3,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,596,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,599,"        long millis = originalZone.getMillisKeepLocal(newZone, getMillis());
",2,0,0,2,4,0,8,0,0,10,68,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,600,"        return new DateTime(millis, getChronology().withZone(newZone));
",2,0,0,3,6,1,6,2,0,10,63,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,621,"        Chronology chrono = getChronology();
",2,0,0,1,2,0,2,2,0,6,36,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,622,"        long instant = getMillis();
",2,0,0,1,2,0,2,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,623,"        instant = chrono.year().set(instant, year);
",2,0,0,2,4,0,10,0,0,13,43,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,624,"        instant = chrono.monthOfYear().set(instant, monthOfYear);
",2,0,0,2,4,0,10,0,0,13,57,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,625,"        instant = chrono.dayOfMonth().set(instant, dayOfMonth);
",2,0,0,2,4,0,10,0,0,13,55,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,626,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,647,"        Chronology chrono = getChronology();
",2,0,0,1,2,0,2,2,0,6,36,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,648,"        long instant = getMillis();
",2,0,0,1,2,0,2,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,649,"        instant = chrono.hourOfDay().set(instant, hourOfDay);
",2,0,0,2,4,0,10,0,0,13,53,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,650,"        instant = chrono.minuteOfHour().set(instant, minuteOfHour);
",2,0,0,2,4,0,10,0,0,13,59,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,651,"        instant = chrono.secondOfMinute().set(instant, secondOfMinute);
",2,0,0,2,4,0,10,0,0,13,63,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,652,"        instant = chrono.millisOfSecond().set(instant, millisOfSecond);
",2,0,0,2,4,0,10,0,0,13,63,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,653,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,670,"        if (partial == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,671,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,673,"        return withMillis(getChronology().set(partial, getMillis()));
",0,0,0,4,8,1,10,0,0,10,61,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,696,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,697,"            throw new IllegalArgumentException(""Field must not be null"");
",0,0,0,1,2,0,0,2,0,4,61,6,0.00000,0
defect4j,time,org/joda/time/DateTime,25,699,"        long instant = fieldType.getField(getChronology()).set(getMillis(), value);
",2,0,0,4,8,0,12,0,0,14,75,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,700,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,722,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,723,"            throw new IllegalArgumentException(""Field must not be null"");
",0,0,0,1,2,0,0,2,0,4,61,6,0.00000,0
defect4j,time,org/joda/time/DateTime,25,725,"        if (amount == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,726,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,728,"        long instant = fieldType.getField(getChronology()).add(getMillis(), amount);
",2,0,0,4,8,0,12,0,0,14,76,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,729,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,744,"        if (durationToAdd == 0 || scalar == 0) {
",4,3,0,1,3,0,0,0,0,7,40,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,745,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,747,"        long instant = getChronology().add(getMillis(), durationToAdd, scalar);
",2,0,0,3,6,0,10,0,0,12,71,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,748,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,762,"        if (durationToAdd == null || scalar == 0) {
",4,3,0,1,3,0,0,0,0,7,43,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,763,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,765,"        return withDurationAdded(durationToAdd.getMillis(), scalar);
",0,0,0,2,4,1,8,0,0,8,60,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,784,"        if (period == null || scalar == 0) {
",4,3,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,785,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,787,"        long instant = getChronology().add(period, getMillis(), scalar);
",2,0,0,3,6,0,10,0,0,12,64,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,788,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,803,"        return withDurationAdded(duration, 1);
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,817,"        return withDurationAdded(duration, 1);
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,843,"        return withPeriodAdded(period, 1);
",0,0,0,1,2,1,4,0,0,4,34,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,870,"        if (years == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,871,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,873,"        long instant = getChronology().years().add(getMillis(), years);
",2,0,0,4,8,0,10,0,0,12,63,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,874,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,900,"        if (months == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,901,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,903,"        long instant = getChronology().months().add(getMillis(), months);
",2,0,0,4,8,0,10,0,0,12,65,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,904,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,926,"        if (weeks == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,927,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,929,"        long instant = getChronology().weeks().add(getMillis(), weeks);
",2,0,0,4,8,0,10,0,0,12,63,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,930,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,961,"        if (days == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,962,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,964,"        long instant = getChronology().days().add(getMillis(), days);
",2,0,0,4,8,0,10,0,0,12,61,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,965,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,992,"        if (hours == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,993,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,995,"        long instant = getChronology().hours().add(getMillis(), hours);
",2,0,0,4,8,0,10,0,0,12,63,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,996,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1019,"        if (minutes == 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1020,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1022,"        long instant = getChronology().minutes().add(getMillis(), minutes);
",2,0,0,4,8,0,10,0,0,12,67,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1023,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1046,"        if (seconds == 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1047,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1049,"        long instant = getChronology().seconds().add(getMillis(), seconds);
",2,0,0,4,8,0,10,0,0,12,67,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1050,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1072,"        if (millis == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1073,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1075,"        long instant = getChronology().millis().add(getMillis(), millis);
",2,0,0,4,8,0,10,0,0,12,65,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1076,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1091,"        return withDurationAdded(duration, -1);
",0,0,0,1,2,1,4,0,0,5,39,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1105,"        return withDurationAdded(duration, -1);
",0,0,0,1,2,1,4,0,0,5,39,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1132,"        return withPeriodAdded(period, -1);
",0,0,0,1,2,1,4,0,0,5,35,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1159,"        if (years == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1160,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1162,"        long instant = getChronology().years().subtract(getMillis(), years);
",2,0,0,4,8,0,10,0,0,12,68,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1163,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1189,"        if (months == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1190,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1192,"        long instant = getChronology().months().subtract(getMillis(), months);
",2,0,0,4,8,0,10,0,0,12,70,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1193,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1215,"        if (weeks == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1216,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1218,"        long instant = getChronology().weeks().subtract(getMillis(), weeks);
",2,0,0,4,8,0,10,0,0,12,68,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1219,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1250,"        if (days == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1251,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1253,"        long instant = getChronology().days().subtract(getMillis(), days);
",2,0,0,4,8,0,10,0,0,12,66,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1254,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1282,"        if (hours == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1283,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1285,"        long instant = getChronology().hours().subtract(getMillis(), hours);
",2,0,0,4,8,0,10,0,0,12,68,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1286,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1309,"        if (minutes == 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1310,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1312,"        long instant = getChronology().minutes().subtract(getMillis(), minutes);
",2,0,0,4,8,0,10,0,0,12,72,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1313,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1336,"        if (seconds == 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1337,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1339,"        long instant = getChronology().seconds().subtract(getMillis(), seconds);
",2,0,0,4,8,0,10,0,0,12,72,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1340,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1363,"        if (millis == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1364,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1366,"        long instant = getChronology().millis().subtract(getMillis(), millis);
",2,0,0,4,8,0,10,0,0,12,70,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1367,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1379,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1380,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");
",0,0,0,1,2,0,0,2,0,4,77,6,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1382,"        DateTimeField field = type.getField(getChronology());
",2,0,0,2,4,0,6,2,0,10,53,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1383,"        if (field.isSupported() == false) {
",0,1,0,2,5,0,4,0,0,6,35,4,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1384,"            throw new IllegalArgumentException(""Field '"" + type + ""' is not supported"");
",2,1,0,1,2,0,0,2,0,7,76,7,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1386,"        return new Property(this, field);
",2,0,0,1,2,1,0,2,0,4,33,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1397,"        return new DateMidnight(getMillis(), getChronology());
",0,0,0,3,6,1,4,2,0,6,54,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1408,"        return new YearMonthDay(getMillis(), getChronology());
",0,0,0,3,6,1,4,2,0,6,54,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1419,"        return new TimeOfDay(getMillis(), getChronology());
",0,0,0,3,6,1,4,2,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1430,"        return new LocalDateTime(getMillis(), getChronology());
",0,0,0,3,6,1,4,2,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1441,"        return new LocalDate(getMillis(), getChronology());
",0,0,0,3,6,1,4,2,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1452,"        return new LocalTime(getMillis(), getChronology());
",0,0,0,3,6,1,4,2,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1469,"        return withMillis(getChronology().era().set(getMillis(), era));
",0,0,0,5,10,1,12,0,0,12,63,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1485,"        return withMillis(getChronology().centuryOfEra().set(getMillis(), centuryOfEra));
",0,0,0,5,10,1,12,0,0,12,81,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1501,"        return withMillis(getChronology().yearOfEra().set(getMillis(), yearOfEra));
",0,0,0,5,10,1,12,0,0,12,75,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1517,"        return withMillis(getChronology().yearOfCentury().set(getMillis(), yearOfCentury));
",0,0,0,5,10,1,12,0,0,12,83,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1533,"        return withMillis(getChronology().year().set(getMillis(), year));
",0,0,0,5,10,1,12,0,0,12,65,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1549,"        return withMillis(getChronology().weekyear().set(getMillis(), weekyear));
",0,0,0,5,10,1,12,0,0,12,73,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1565,"        return withMillis(getChronology().monthOfYear().set(getMillis(), monthOfYear));
",0,0,0,5,10,1,12,0,0,12,79,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1581,"        return withMillis(getChronology().weekOfWeekyear().set(getMillis(), weekOfWeekyear));
",0,0,0,5,10,1,12,0,0,12,85,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1597,"        return withMillis(getChronology().dayOfYear().set(getMillis(), dayOfYear));
",0,0,0,5,10,1,12,0,0,12,75,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1613,"        return withMillis(getChronology().dayOfMonth().set(getMillis(), dayOfMonth));
",0,0,0,5,10,1,12,0,0,12,77,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1629,"        return withMillis(getChronology().dayOfWeek().set(getMillis(), dayOfWeek));
",0,0,0,5,10,1,12,0,0,12,75,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1646,"        return withMillis(getChronology().hourOfDay().set(getMillis(), hour));
",0,0,0,5,10,1,12,0,0,12,70,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1662,"        return withMillis(getChronology().minuteOfHour().set(getMillis(), minute));
",0,0,0,5,10,1,12,0,0,12,75,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1678,"        return withMillis(getChronology().secondOfMinute().set(getMillis(), second));
",0,0,0,5,10,1,12,0,0,12,77,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1694,"        return withMillis(getChronology().millisOfSecond().set(getMillis(), millis));
",0,0,0,5,10,1,12,0,0,12,77,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1710,"        return withMillis(getChronology().millisOfDay().set(getMillis(), millis));
",0,0,0,5,10,1,12,0,0,12,74,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1721,"        return new Property(this, getChronology().era());
",0,0,0,3,6,1,4,2,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1730,"        return new Property(this, getChronology().centuryOfEra());
",0,0,0,3,6,1,4,2,0,6,58,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1739,"        return new Property(this, getChronology().yearOfCentury());
",0,0,0,3,6,1,4,2,0,6,59,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1748,"        return new Property(this, getChronology().yearOfEra());
",0,0,0,3,6,1,4,2,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1757,"        return new Property(this, getChronology().year());
",0,0,0,3,6,1,4,2,0,6,50,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1766,"        return new Property(this, getChronology().weekyear());
",0,0,0,3,6,1,4,2,0,6,54,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1775,"        return new Property(this, getChronology().monthOfYear());
",0,0,0,3,6,1,4,2,0,6,57,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1784,"        return new Property(this, getChronology().weekOfWeekyear());
",0,0,0,3,6,1,4,2,0,6,60,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1793,"        return new Property(this, getChronology().dayOfYear());
",0,0,0,3,6,1,4,2,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1802,"        return new Property(this, getChronology().dayOfMonth());
",0,0,0,3,6,1,4,2,0,6,56,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1811,"        return new Property(this, getChronology().dayOfWeek());
",0,0,0,3,6,1,4,2,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1822,"        return new Property(this, getChronology().hourOfDay());
",0,0,0,3,6,1,4,2,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1831,"        return new Property(this, getChronology().minuteOfDay());
",0,0,0,3,6,1,4,2,0,6,57,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1840,"        return new Property(this, getChronology().minuteOfHour());
",0,0,0,3,6,1,4,2,0,6,58,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1849,"        return new Property(this, getChronology().secondOfDay());
",0,0,0,3,6,1,4,2,0,6,57,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1858,"        return new Property(this, getChronology().secondOfMinute());
",0,0,0,3,6,1,4,2,0,6,60,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1867,"        return new Property(this, getChronology().millisOfDay());
",0,0,0,3,6,1,4,2,0,6,57,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1876,"        return new Property(this, getChronology().millisOfSecond());
",0,0,0,3,6,1,4,2,0,6,60,5,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,25,61,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());
",0,0,0,3,6,0,8,0,0,8,69,5,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,25,62,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,25,73,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));
",0,0,0,3,6,0,10,0,0,10,73,5,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,25,74,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,25,86,"        this(DateTimeUtils.currentTimeMillis(), chronology);
",2,0,0,2,4,0,4,0,0,6,52,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,25,87,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,25,97,"        this(instant, ISOChronology.getInstance());
",2,0,0,2,4,0,4,0,0,6,43,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,25,98,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,25,146,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,25,147,"        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
",2,0,0,2,4,0,8,2,0,12,89,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,25,148,"        Chronology chrono = checkChronology(converter.getChronology(instant, zone));
",2,0,0,2,4,0,10,2,0,14,76,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,25,149,"        iChronology = chrono;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,25,150,"        iMillis = checkInstant(converter.getInstantMillis(instant, chrono), chrono);
",2,0,0,2,4,0,12,0,0,15,76,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,25,151,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,25,168,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,25,169,"        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
",2,0,0,2,4,0,8,2,0,12,89,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,25,170,"        iChronology = checkChronology(converter.getChronology(instant, chronology));
",2,0,0,2,4,0,10,0,0,13,76,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,25,171,"        iMillis = checkInstant(converter.getInstantMillis(instant, chronology), iChronology);
",2,0,0,2,4,0,12,0,0,15,85,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,25,172,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,25,195,"        this(year, monthOfYear, dayOfMonth, hourOfDay,
",8,0,0,0,1,0,0,0,0,8,46,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,25,197,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,25,317,"        iMillis = checkInstant(instant, iChronology);
",2,0,0,1,2,0,6,0,0,9,45,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,25,318,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,25,329,"        iChronology = checkChronology(chronology);
",2,0,0,1,2,0,4,0,0,7,42,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,25,330,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,25,66,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,25,67,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");
",0,0,0,1,2,0,0,2,0,4,77,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,25,69,"        return type.getField(getChronology()).get(getMillis());
",0,0,0,4,8,1,10,0,0,10,55,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,25,79,"        return getChronology().era().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,25,88,"        return getChronology().centuryOfEra().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,55,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,25,97,"        return getChronology().yearOfEra().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,25,106,"        return getChronology().yearOfCentury().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,56,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,25,115,"        return getChronology().year().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,47,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,25,124,"        return getChronology().weekyear().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,25,133,"        return getChronology().monthOfYear().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,25,142,"        return getChronology().weekOfWeekyear().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,57,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,25,151,"        return getChronology().dayOfYear().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,25,162,"        return getChronology().dayOfMonth().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,53,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,25,173,"        return getChronology().dayOfWeek().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,25,183,"        return getChronology().hourOfDay().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,25,192,"        return getChronology().minuteOfDay().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,25,201,"        return getChronology().minuteOfHour().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,55,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,25,210,"        return getChronology().secondOfDay().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,25,219,"        return getChronology().secondOfMinute().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,57,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,25,228,"        return getChronology().millisOfDay().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,25,237,"        return getChronology().millisOfSecond().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,57,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,25,259,"        if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,25,260,"            locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,25,262,"        DateTimeZone zone = getZone();
",2,0,0,1,2,0,2,2,0,6,30,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,25,263,"        Calendar cal = Calendar.getInstance(zone.toTimeZone(), locale);
",2,0,0,2,4,0,10,2,0,14,63,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,25,264,"        cal.setTime(toDate());
",0,0,0,2,4,0,6,0,0,6,22,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,25,265,"        return cal;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,25,283,"        DateTimeZone zone = getZone();
",2,0,0,1,2,0,2,2,0,6,30,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,25,284,"        GregorianCalendar cal = new GregorianCalendar(zone.toTimeZone());
",2,0,0,2,4,0,4,4,0,10,65,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,25,285,"        cal.setTime(toDate());
",0,0,0,2,4,0,6,0,0,6,22,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,25,286,"        return cal;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,25,297,"        if (pattern == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,25,298,"            return toString();
",0,0,0,1,2,1,2,0,0,2,18,7,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,25,300,"        return DateTimeFormat.forPattern(pattern).print(this);
",0,0,0,2,4,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,25,311,"        if (pattern == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,25,312,"            return toString();
",0,0,0,1,2,1,2,0,0,2,18,7,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,25,314,"        return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);
",0,0,0,3,6,1,12,0,0,12,73,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,71,"        return getChronology().getZone();
",0,0,0,2,4,1,4,0,0,4,33,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,89,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,90,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");
",0,0,0,1,2,0,0,2,0,4,77,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,92,"        return type.getField(getChronology()).get(getMillis());
",0,0,0,4,8,1,10,0,0,10,55,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,103,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,104,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,106,"        return type.getField(getChronology()).isSupported();
",0,0,0,3,6,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,124,"        if (field == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,125,"            throw new IllegalArgumentException(""The DateTimeField must not be null"");
",0,0,0,1,2,0,0,2,0,4,73,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,127,"        return field.get(getMillis());
",0,0,0,2,4,1,6,0,0,6,30,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,137,"        return new Instant(getMillis());
",0,0,0,2,4,1,2,2,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,146,"        return new DateTime(getMillis(), getZone());
",0,0,0,3,6,1,4,2,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,155,"        return new DateTime(getMillis(), ISOChronology.getInstance(getZone()));
",0,0,0,4,8,1,8,2,0,10,71,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,165,"        Chronology chrono = DateTimeUtils.getChronology(getChronology());
",2,0,0,2,4,0,6,2,0,10,65,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,166,"        chrono = chrono.withZone(zone);
",2,0,0,1,2,0,6,0,0,9,31,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,167,"        return new DateTime(getMillis(), chrono);
",2,0,0,2,4,1,2,2,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,177,"        return new DateTime(getMillis(), chronology);
",2,0,0,2,4,1,2,2,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,191,"        return new MutableDateTime(getMillis(), getZone());
",0,0,0,3,6,1,4,2,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,200,"        return new MutableDateTime(getMillis(), ISOChronology.getInstance(getZone()));
",0,0,0,4,8,1,8,2,0,10,78,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,210,"        Chronology chrono = DateTimeUtils.getChronology(getChronology());
",2,0,0,2,4,0,6,2,0,10,65,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,211,"        chrono = chrono.withZone(zone);
",2,0,0,1,2,0,6,0,0,9,31,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,212,"        return new MutableDateTime(getMillis(), chrono);
",2,0,0,2,4,1,2,2,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,222,"        return new MutableDateTime(getMillis(), chronology);
",2,0,0,2,4,1,2,2,0,6,52,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,235,"        return new Date(getMillis());
",0,0,0,2,4,1,2,2,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,259,"        if (this == readableInstant) {
",2,1,0,1,3,0,0,0,0,3,30,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,260,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,262,"        if (readableInstant instanceof ReadableInstant == false) {
",2,1,0,1,3,0,0,2,0,6,58,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,263,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,265,"        ReadableInstant otherInstant = (ReadableInstant) readableInstant;
",4,0,0,1,2,0,0,4,0,8,65,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,266,"        return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,278,"        return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,296,"        if (this == other) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,297,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,300,"        long otherMillis = other.getMillis();
",2,0,0,1,2,0,4,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,301,"        long thisMillis = getMillis();
",2,0,0,1,2,0,2,0,0,4,30,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,304,"        if (thisMillis == otherMillis) {
",4,1,0,1,3,0,0,0,0,5,32,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,305,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,307,"        if (thisMillis < otherMillis) {
",4,1,0,1,3,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,308,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,310,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,323,"        return (getMillis() > instant);
",2,1,0,2,4,1,2,0,0,5,31,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,333,"        return isAfter(DateTimeUtils.currentTimeMillis());
",0,0,0,2,4,1,6,0,0,6,50,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,344,"        long instantMillis = DateTimeUtils.getInstantMillis(instant);
",2,0,0,1,2,0,6,0,0,8,61,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,345,"        return isAfter(instantMillis);
",0,0,0,1,2,1,4,0,0,4,30,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,357,"        return (getMillis() < instant);
",2,1,0,2,4,1,2,0,0,5,31,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,367,"        return isBefore(DateTimeUtils.currentTimeMillis());
",0,0,0,2,4,1,6,0,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,378,"        long instantMillis = DateTimeUtils.getInstantMillis(instant);
",2,0,0,1,2,0,6,0,0,8,61,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,379,"        return isBefore(instantMillis);
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,391,"        return (getMillis() == instant);
",2,1,0,2,4,1,2,0,0,5,32,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,401,"        return isEqual(DateTimeUtils.currentTimeMillis());
",0,0,0,2,4,1,6,0,0,6,50,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,412,"        long instantMillis = DateTimeUtils.getInstantMillis(instant);
",2,0,0,1,2,0,6,0,0,8,61,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,413,"        return isEqual(instantMillis);
",0,0,0,1,2,1,4,0,0,4,30,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,436,"        if (formatter == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,437,"            return toString();
",0,0,0,1,2,1,2,0,0,2,18,7,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,439,"        return formatter.print(this);
",0,0,0,1,2,1,4,0,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,25,55,"public abstract class AbstractInstant implements ReadableInstant {
",2,0,0,0,1,2,0,2,0,6,66,1,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,145,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,146,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,230,"        if (fields == null || fields.size() == 0) {
",2,3,0,2,5,0,4,0,0,9,43,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,231,"            throw new IllegalArgumentException(""The fields must not be null or empty"");
",0,0,0,1,2,0,0,2,0,4,75,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,233,"        Set<DateTimeFieldType> workingFields = new HashSet<DateTimeFieldType>(fields);
",4,0,0,1,2,0,0,8,0,12,78,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,234,"        int inputSize = workingFields.size();
",2,0,0,1,2,0,4,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,235,"        boolean reducedPrec = false;
",2,0,0,0,0,0,0,0,0,3,28,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,236,"        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();
",2,0,0,1,2,0,0,4,0,6,62,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,238,"        if (workingFields.contains(DateTimeFieldType.monthOfYear())) {
",0,0,0,3,7,0,8,0,0,8,62,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,239,"            reducedPrec = dateByMonth(bld, workingFields, extended, strictISO);
",2,0,0,1,2,0,10,0,0,13,67,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,240,"        } else if (workingFields.contains(DateTimeFieldType.dayOfYear())) {
",0,0,0,3,8,0,8,0,0,8,67,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,241,"            reducedPrec = dateByOrdinal(bld, workingFields, extended, strictISO);
",2,0,0,1,2,0,10,0,0,13,69,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,242,"        } else if (workingFields.contains(DateTimeFieldType.weekOfWeekyear())) {
",0,0,0,3,8,0,8,0,0,8,72,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,243,"            reducedPrec = dateByWeek(bld, workingFields, extended, strictISO);
",2,0,0,1,2,0,10,0,0,13,66,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,244,"        } else if (workingFields.contains(DateTimeFieldType.dayOfMonth())) {
",0,0,0,3,8,0,8,0,0,8,68,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,245,"            reducedPrec = dateByMonth(bld, workingFields, extended, strictISO);
",2,0,0,1,2,0,10,0,0,13,67,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,246,"        } else if (workingFields.contains(DateTimeFieldType.dayOfWeek())) {
",0,0,0,3,8,0,8,0,0,8,67,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,247,"            reducedPrec = dateByWeek(bld, workingFields, extended, strictISO);
",2,0,0,1,2,0,10,0,0,13,66,10,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,248,"        } else if (workingFields.remove(DateTimeFieldType.year())) {
",0,0,0,3,8,0,8,0,0,8,60,10,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,249,"            bld.append(yearElement());
",0,0,0,2,4,0,6,0,0,6,26,12,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,250,"            reducedPrec = true;
",2,0,0,0,0,0,0,0,0,4,19,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,251,"        } else if (workingFields.remove(DateTimeFieldType.weekyear())) {
",0,0,0,3,8,0,8,0,0,8,64,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,252,"            bld.append(weekyearElement());
",0,0,0,2,4,0,6,0,0,6,30,13,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,253,"            reducedPrec = true;
",2,0,0,0,0,0,0,0,0,4,19,12,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,255,"        boolean datePresent = (workingFields.size() < inputSize);
",4,1,0,2,4,0,4,0,0,9,57,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,258,"        time(bld, workingFields, extended, strictISO, reducedPrec, datePresent);
",0,0,0,1,2,0,14,0,0,14,72,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,261,"        if (bld.canBuildFormatter() == false) {
",0,1,0,2,5,0,4,0,0,6,39,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,262,"            throw new IllegalArgumentException(""No valid format for fields: "" + fields);
",2,1,0,1,2,0,0,2,0,6,76,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,268,"            fields.retainAll(workingFields);
",0,0,0,1,2,0,6,0,0,6,32,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,271,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,269,"        } catch (UnsupportedOperationException ex) {
",2,0,0,1,4,0,0,2,0,4,44,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,272,"        return bld.toFormatter();
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,293,"        boolean reducedPrec = false;
",2,0,0,0,0,0,0,0,0,3,28,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,294,"        if (fields.remove(DateTimeFieldType.year())) {
",0,0,0,3,7,0,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,295,"            bld.append(yearElement());
",0,0,0,2,4,0,6,0,0,6,26,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,296,"            if (fields.remove(DateTimeFieldType.monthOfYear())) {
",0,0,0,3,7,0,8,0,0,8,53,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,297,"                if (fields.remove(DateTimeFieldType.dayOfMonth())) {
",0,0,0,3,7,0,8,0,0,8,52,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,299,"                    appendSeparator(bld, extended);
",0,0,0,1,2,0,6,0,0,6,31,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,300,"                    bld.appendMonthOfYear(2);
",0,0,0,1,2,0,4,0,0,4,25,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,301,"                    appendSeparator(bld, extended);
",0,0,0,1,2,0,6,0,0,6,31,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,302,"                    bld.appendDayOfMonth(2);
",0,0,0,1,2,0,4,0,0,4,24,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,305,"                    bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,306,"                    bld.appendMonthOfYear(2);
",0,0,0,1,2,0,4,0,0,4,25,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,307,"                    reducedPrec = true;
",2,0,0,0,0,0,0,0,0,4,19,10,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,310,"                if (fields.remove(DateTimeFieldType.dayOfMonth())) {
",0,0,0,3,7,0,8,0,0,8,52,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,312,"                    checkNotStrictISO(fields, strictISO);
",0,0,0,1,2,0,6,0,0,6,37,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,313,"                    bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,314,"                    bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,315,"                    bld.appendDayOfMonth(2);
",0,0,0,1,2,0,4,0,0,4,24,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,318,"                    reducedPrec = true;
",2,0,0,0,0,0,0,0,0,4,19,10,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,322,"        } else if (fields.remove(DateTimeFieldType.monthOfYear())) {
",0,0,0,3,8,0,8,0,0,8,60,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,323,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,324,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,325,"            bld.appendMonthOfYear(2);
",0,0,0,1,2,0,4,0,0,4,25,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,326,"            if (fields.remove(DateTimeFieldType.dayOfMonth())) {
",0,0,0,3,7,0,8,0,0,8,52,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,328,"                appendSeparator(bld, extended);
",0,0,0,1,2,0,6,0,0,6,31,10,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,329,"                bld.appendDayOfMonth(2);
",0,0,0,1,2,0,4,0,0,4,24,10,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,332,"                reducedPrec = true;
",2,0,0,0,0,0,0,0,0,4,19,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,334,"        } else if (fields.remove(DateTimeFieldType.dayOfMonth())) {
",0,0,0,3,8,0,8,0,0,8,59,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,336,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,337,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,338,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,339,"            bld.appendDayOfMonth(2);
",0,0,0,1,2,0,4,0,0,4,24,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,341,"        return reducedPrec;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,361,"        boolean reducedPrec = false;
",2,0,0,0,0,0,0,0,0,3,28,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,362,"        if (fields.remove(DateTimeFieldType.year())) {
",0,0,0,3,7,0,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,363,"            bld.append(yearElement());
",0,0,0,2,4,0,6,0,0,6,26,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,364,"            if (fields.remove(DateTimeFieldType.dayOfYear())) {
",0,0,0,3,7,0,8,0,0,8,51,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,366,"                appendSeparator(bld, extended);
",0,0,0,1,2,0,6,0,0,6,31,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,367,"                bld.appendDayOfYear(3);
",0,0,0,1,2,0,4,0,0,4,23,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,370,"                reducedPrec = true;
",2,0,0,0,0,0,0,0,0,4,19,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,373,"        } else if (fields.remove(DateTimeFieldType.dayOfYear())) {
",0,0,0,3,8,0,8,0,0,8,58,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,375,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,376,"            bld.appendDayOfYear(3);
",0,0,0,1,2,0,4,0,0,4,23,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,378,"        return reducedPrec;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,398,"        boolean reducedPrec = false;
",2,0,0,0,0,0,0,0,0,3,28,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,399,"        if (fields.remove(DateTimeFieldType.weekyear())) {
",0,0,0,3,7,0,8,0,0,8,50,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,400,"            bld.append(weekyearElement());
",0,0,0,2,4,0,6,0,0,6,30,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,401,"            if (fields.remove(DateTimeFieldType.weekOfWeekyear())) {
",0,0,0,3,7,0,8,0,0,8,56,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,402,"                appendSeparator(bld, extended);
",0,0,0,1,2,0,6,0,0,6,31,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,403,"                bld.appendLiteral('W');
",0,0,0,1,2,0,4,0,0,5,23,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,404,"                bld.appendWeekOfWeekyear(2);
",0,0,0,1,2,0,4,0,0,4,28,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,405,"                if (fields.remove(DateTimeFieldType.dayOfWeek())) {
",0,0,0,3,7,0,8,0,0,8,51,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,407,"                    appendSeparator(bld, extended);
",0,0,0,1,2,0,6,0,0,6,31,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,408,"                    bld.appendDayOfWeek(1);
",0,0,0,1,2,0,4,0,0,4,23,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,411,"                    reducedPrec = true;
",2,0,0,0,0,0,0,0,0,4,19,10,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,414,"                if (fields.remove(DateTimeFieldType.dayOfWeek())) {
",0,0,0,3,7,0,8,0,0,8,51,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,416,"                    checkNotStrictISO(fields, strictISO);
",0,0,0,1,2,0,6,0,0,6,37,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,417,"                    appendSeparator(bld, extended);
",0,0,0,1,2,0,6,0,0,6,31,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,418,"                    bld.appendLiteral('W');
",0,0,0,1,2,0,4,0,0,5,23,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,419,"                    bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,420,"                    bld.appendDayOfWeek(1);
",0,0,0,1,2,0,4,0,0,4,23,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,423,"                    reducedPrec = true;
",2,0,0,0,0,0,0,0,0,4,19,10,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,427,"        } else if (fields.remove(DateTimeFieldType.weekOfWeekyear())) {
",0,0,0,3,8,0,8,0,0,8,63,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,428,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,429,"            bld.appendLiteral('W');
",0,0,0,1,2,0,4,0,0,5,23,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,430,"            bld.appendWeekOfWeekyear(2);
",0,0,0,1,2,0,4,0,0,4,28,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,431,"            if (fields.remove(DateTimeFieldType.dayOfWeek())) {
",0,0,0,3,7,0,8,0,0,8,51,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,433,"                appendSeparator(bld, extended);
",0,0,0,1,2,0,6,0,0,6,31,10,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,434,"                bld.appendDayOfWeek(1);
",0,0,0,1,2,0,4,0,0,4,23,10,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,437,"                reducedPrec = true;
",2,0,0,0,0,0,0,0,0,4,19,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,439,"        } else if (fields.remove(DateTimeFieldType.dayOfWeek())) {
",0,0,0,3,8,0,8,0,0,8,58,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,441,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,442,"            bld.appendLiteral('W');
",0,0,0,1,2,0,4,0,0,5,23,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,443,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,444,"            bld.appendDayOfWeek(1);
",0,0,0,1,2,0,4,0,0,4,23,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,446,"        return reducedPrec;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,470,"        boolean hour = fields.remove(DateTimeFieldType.hourOfDay());
",2,0,0,2,4,0,8,0,0,10,60,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,471,"        boolean minute = fields.remove(DateTimeFieldType.minuteOfHour());
",2,0,0,2,4,0,8,0,0,10,65,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,472,"        boolean second = fields.remove(DateTimeFieldType.secondOfMinute());
",2,0,0,2,4,0,8,0,0,10,67,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,473,"        boolean milli = fields.remove(DateTimeFieldType.millisOfSecond());
",2,0,0,2,4,0,8,0,0,10,66,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,474,"        if (!hour && !minute && !second && !milli) {
",8,1,0,1,3,0,0,0,0,13,44,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,475,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,477,"        if (hour || minute || second || milli) {
",8,1,0,1,3,0,0,0,0,9,40,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,478,"            if (strictISO && reducedPrec) {
",4,1,0,1,3,0,0,0,0,5,31,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,479,"                throw new IllegalArgumentException(""No valid ISO8601 format for fields because Date was reduced precision: "" + fields);
",2,1,0,1,2,0,0,2,0,6,119,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,481,"            if (datePresent) {
",2,0,0,1,3,0,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,482,"                bld.appendLiteral('T');
",0,0,0,1,2,0,4,0,0,5,23,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,485,"        if (hour && minute && second || (hour && !second && !milli)) {
",12,3,0,2,5,0,0,0,0,17,62,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,488,"            if (strictISO && datePresent) {
",4,1,0,1,3,0,0,0,0,5,31,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,489,"                throw new IllegalArgumentException(""No valid ISO8601 format for fields because Time was truncated: "" + fields);
",2,1,0,1,2,0,0,2,0,6,111,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,491,"            if (!hour && (minute && second || (minute && !milli) || second)) {
",12,5,0,3,7,0,0,0,0,19,66,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,494,"                if (strictISO) {
",2,0,0,1,3,0,0,0,0,2,16,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,495,"                    throw new IllegalArgumentException(""No valid ISO8601 format for fields: "" + fields);
",2,1,0,1,2,0,0,2,0,6,84,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,499,"        if (hour) {
",2,0,0,1,3,0,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,500,"            bld.appendHourOfDay(2);
",0,0,0,1,2,0,4,0,0,4,23,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,501,"        } else if (minute || second || milli) {
",6,1,0,1,4,0,0,0,0,7,39,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,502,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,504,"        if (extended && hour && minute) {
",6,1,0,1,3,0,0,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,505,"            bld.appendLiteral(':');
",0,0,0,1,2,0,4,0,0,5,23,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,507,"        if (minute) {
",2,0,0,1,3,0,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,508,"            bld.appendMinuteOfHour(2);
",0,0,0,1,2,0,4,0,0,4,26,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,509,"        } else if (second || milli) {
",4,1,0,1,4,0,0,0,0,5,29,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,510,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,512,"        if (extended && minute && second) {
",6,1,0,1,3,0,0,0,0,7,35,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,513,"            bld.appendLiteral(':');
",0,0,0,1,2,0,4,0,0,5,23,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,515,"        if (second) {
",2,0,0,1,3,0,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,516,"            bld.appendSecondOfMinute(2);
",0,0,0,1,2,0,4,0,0,4,28,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,517,"        } else if (milli) {
",2,0,0,1,4,0,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,518,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,520,"        if (milli) {
",2,0,0,1,3,0,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,521,"            bld.appendLiteral('.');
",0,0,0,1,2,0,4,0,0,5,23,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,522,"            bld.appendMillisOfSecond(3);
",0,0,0,1,2,0,4,0,0,4,28,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,524,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,535,"        if (strictISO) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,536,"            throw new IllegalArgumentException(""No valid ISO8601 format for fields: "" + fields);
",2,1,0,1,2,0,0,2,0,6,84,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,538,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,549,"        if (extended) {
",2,0,0,1,3,0,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,550,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,552,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,568,"        if (dp == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,569,"            DateTimeParser tOffset = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,4,0,6,55,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,572,"            dp = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,577,"        return dp;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,594,"        if (ldp == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,595,"            ldp = dateElementParser().withZoneUTC();
",2,0,0,2,4,0,4,0,0,7,40,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,597,"        return ldp;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,611,"        if (dpe == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,612,"            dpe = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,634,"        return dpe;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,650,"        if (tp == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,651,"            tp = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,657,"        return tp;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,675,"        if (ltp == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,676,"            ltp = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,681,"        return ltp;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,695,"        if (tpe == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,697,"            DateTimeParser decimalPoint = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,4,0,6,60,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,708,"            tpe = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,744,"        return tpe;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,766,"        if (dtp == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,769,"            DateTimeParser time = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,4,0,6,52,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,774,"            dtp = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,778,"        return dtp;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,799,"        if (dotp == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,800,"            DateTimeParser timeOrOffset = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,4,0,6,60,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,805,"            dotp = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,37,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,810,"        return dotp;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,833,"        if (ldotp == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,834,"            DateTimeParser time = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,4,0,6,52,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,838,"            ldotp = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,38,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,843,"        return ldotp;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,883,"        if (tx == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,884,"            tx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,889,"        return tx;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,919,"        if (ttx == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,920,"            ttx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,925,"        return ttx;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,953,"        if (dtx == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,954,"            dtx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,959,"        return dtx;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,970,"        if (od == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,971,"            od = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,976,"        return od;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,988,"        if (odt == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,989,"            odt = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,994,"        return odt;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1006,"        if (odtx == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1007,"            odtx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,37,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1012,"        return odtx;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1022,"        return weekyearWeekDay();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1033,"        if (wdt == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1034,"            wdt = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1039,"        return wdt;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1050,"        if (wdtx == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1051,"            wdtx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,37,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1056,"        return wdtx;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1067,"        if (bd == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1068,"            bd = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1074,"        return bd;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1086,"        if (bt == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1087,"            bt = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1096,"        return bt;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1107,"        if (btx == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1108,"            btx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1115,"        return btx;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1127,"        if (btt == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1128,"            btt = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1133,"        return btt;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1145,"        if (bttx == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1146,"            bttx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,37,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1151,"        return bttx;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1162,"        if (bdt == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1163,"            bdt = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1168,"        return bdt;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1179,"        if (bdtx == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1180,"            bdtx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,37,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1185,"        return bdtx;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1196,"        if (bod == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1197,"            bod = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1202,"        return bod;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1214,"        if (bodt == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1215,"            bodt = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,37,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1220,"        return bodt;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1232,"        if (bodtx == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1233,"            bodtx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,38,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1238,"        return bodtx;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1248,"        if (bwd == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1249,"            bwd = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1256,"        return bwd;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1267,"        if (bwdt == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1268,"            bwdt = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,37,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1273,"        return bwdt;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1284,"        if (bwdtx == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1285,"            bwdtx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,38,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1290,"        return bwdtx;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1300,"        return yearElement();
",0,0,0,1,2,1,2,0,0,2,21,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1310,"        if (ym == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1311,"            ym = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1316,"        return ym;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1342,"        return weekyearElement();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1352,"        if (ww == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1353,"            ww = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1358,"        return ww;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1368,"        if (wwd == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1369,"            wwd = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1375,"        return wwd;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1384,"        return hourElement();
",0,0,0,1,2,1,2,0,0,2,21,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1394,"        if (hm == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1395,"            hm = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1400,"        return hm;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1410,"        if (hms == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1411,"            hms = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1417,"        return hms;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1429,"        if (hmsl == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1430,"            hmsl = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,37,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1438,"        return hmsl;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1468,"        if (dh == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1469,"            dh = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1475,"        return dh;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1485,"        if (dhm == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1486,"            dhm = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1492,"        return dhm;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1503,"        if (dhms == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1504,"            dhms = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,37,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1510,"        return dhms;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1522,"        if (dhmsl == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1523,"            dhmsl = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,38,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1529,"        return dhmsl;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1541,"        if (dhmsf == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1542,"            dhmsf = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,38,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1548,"        return dhmsf;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1582,"        if (we == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1583,"            we = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1587,"        return we;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1591,"        if (wwe == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1592,"            wwe = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1597,"        return wwe;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1601,"        if (dwe == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1602,"            dwe = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1607,"        return dwe;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1611,"        if (dye == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1612,"            dye = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,25,1617,"        return dye;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,36,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,37,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,49,"        if (value == Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,50,"            throw new ArithmeticException(""Integer.MIN_VALUE cannot be negated"");
",0,0,0,1,2,0,0,2,0,3,69,7,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,52,"        return -value;
",2,0,0,0,0,1,0,0,0,3,14,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,67,"            throw new ArithmeticException
",0,0,0,0,0,0,0,2,0,2,29,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,85,"            throw new ArithmeticException
",0,0,0,0,0,0,0,2,0,2,29,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,100,"        long diff = val1 - val2;
",6,1,0,0,0,0,0,0,0,7,24,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,102,"        if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {
",8,5,0,3,7,0,0,0,0,13,45,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,103,"            throw new ArithmeticException
",0,0,0,0,0,0,0,2,0,2,29,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,106,"        return diff;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,119,"        long total = (long) val1 * (long) val2;
",6,1,0,2,4,0,0,0,0,7,39,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,120,"        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {
",12,3,0,1,3,0,0,0,0,15,61,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,121,"            throw new ArithmeticException
",0,0,0,0,0,0,0,2,0,2,29,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,124,"        return (int) total;
",2,0,0,1,2,1,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,137,"        switch (scalar) {
",2,0,0,1,3,0,0,0,0,2,17,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,139,"            return -val1;
",2,0,0,0,0,1,0,0,0,3,13,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,141,"            return 0L;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,143,"            return val1;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,145,"        long total = val1 * scalar;
",6,1,0,0,0,0,0,0,0,7,27,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,146,"        if (total / scalar != val1) {
",6,2,0,1,3,0,0,0,0,8,29,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,147,"            throw new ArithmeticException
",0,0,0,0,0,0,0,2,0,2,29,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,150,"        return total;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,162,"        if (val2 == 1) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,163,"            return val1;
",2,0,0,0,0,1,0,0,0,2,12,6,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,165,"        if (val2 == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,166,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,168,"        long total = val1 * val2;
",6,1,0,0,0,0,0,0,0,7,25,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,169,"        if (total / val2 != val1) {
",6,2,0,1,3,0,0,0,0,8,27,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,170,"            throw new ArithmeticException
",0,0,0,0,0,0,0,2,0,2,29,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,173,"        return total;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,184,"        if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {
",12,3,0,1,3,0,0,0,0,15,63,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,185,"            return (int) value;
",2,0,0,1,2,1,0,0,0,2,19,7,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,187,"        throw new ArithmeticException(""Value cannot fit in an int: "" + value);
",2,1,0,1,2,0,0,2,0,6,70,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,199,"        long val = FieldUtils.safeMultiply(val1, val2);
",2,0,0,1,2,0,8,0,0,10,47,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,200,"        return FieldUtils.safeToInt(val);
",0,0,0,1,2,1,6,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,215,"            throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,233,"            throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,249,"        if ((value < lowerBound) || (value > upperBound)) {
",8,3,0,3,7,0,0,0,0,11,51,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,250,"            throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,254,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,273,"        return getWrappedValue(currentValue + wrapValue, minValue, maxValue);
",4,1,0,1,2,1,6,0,0,11,69,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,289,"        if (minValue >= maxValue) {
",4,1,0,1,3,0,0,0,0,5,27,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,290,"            throw new IllegalArgumentException(""MIN > MAX"");
",0,0,0,1,2,0,0,2,0,3,48,7,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,293,"        int wrapRange = maxValue - minValue + 1;
",6,2,0,0,0,0,0,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,294,"        value -= minValue;
",4,0,0,0,0,0,0,0,0,5,18,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,296,"        if (value >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,297,"            return (value % wrapRange) + minValue;
",6,2,0,1,2,1,0,0,0,8,38,6,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,300,"        int remByRange = (-value) % wrapRange;
",6,1,0,1,2,0,0,0,0,8,38,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,302,"        if (remByRange == 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,303,"            return 0 + minValue;
",2,1,0,0,0,1,0,0,0,3,20,6,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,305,"        return (wrapRange - remByRange) + minValue;
",6,2,0,1,2,1,0,0,0,8,43,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,318,"        if (object1 == object2) {
",4,1,0,1,3,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,319,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,321,"        if (object1 == null || object2 == null) {
",4,3,0,1,3,0,0,0,0,7,41,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,322,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,25,324,"        return object1.equals(object2);
",0,0,0,1,2,1,6,0,0,6,31,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,25,49,"            throw new IllegalArgumentException(""The scalar must not be 0 or 1"");
",0,0,0,1,2,0,0,2,0,3,68,7,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,25,55,"        return getWrappedField().getValue(duration) / iScalar;
",2,1,0,2,4,1,6,0,0,9,54,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,25,59,"        return getWrappedField().getValueAsLong(duration) / iScalar;
",2,1,0,2,4,1,6,0,0,9,60,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,25,63,"        return getWrappedField().getValue(duration, instant) / iScalar;
",2,1,0,2,4,1,8,0,0,11,63,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,25,67,"        return getWrappedField().getValueAsLong(duration, instant) / iScalar;
",2,1,0,2,4,1,8,0,0,11,69,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,25,71,"        long scaled = ((long) value) * ((long) iScalar);
",6,1,0,4,8,0,0,0,0,7,48,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,25,72,"        return getWrappedField().getMillis(scaled);
",0,0,0,2,4,1,6,0,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,25,76,"        long scaled = FieldUtils.safeMultiply(value, iScalar);
",2,0,0,1,2,0,8,0,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,25,77,"        return getWrappedField().getMillis(scaled);
",0,0,0,2,4,1,6,0,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,25,81,"        long scaled = ((long) value) * ((long) iScalar);
",6,1,0,4,8,0,0,0,0,7,48,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,25,82,"        return getWrappedField().getMillis(scaled, instant);
",0,0,0,2,4,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,25,86,"        long scaled = FieldUtils.safeMultiply(value, iScalar);
",2,0,0,1,2,0,8,0,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,25,87,"        return getWrappedField().getMillis(scaled, instant);
",0,0,0,2,4,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,25,91,"        long scaled = ((long) value) * ((long) iScalar);
",6,1,0,4,8,0,0,0,0,7,48,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,25,92,"        return getWrappedField().add(instant, scaled);
",0,0,0,2,4,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,25,96,"        long scaled = FieldUtils.safeMultiply(value, iScalar);
",2,0,0,1,2,0,8,0,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,25,97,"        return getWrappedField().add(instant, scaled);
",0,0,0,2,4,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,25,101,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iScalar;
",2,1,0,2,4,1,8,0,0,11,84,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,25,105,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iScalar;
",2,1,0,2,4,1,8,0,0,11,90,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,25,119,"        return iScalar;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,25,130,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,25,131,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,25,132,"        } else if (obj instanceof ScaledDurationField) {
",2,0,0,1,4,0,0,2,0,4,48,6,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,25,133,"            ScaledDurationField other = (ScaledDurationField) obj;
",4,0,0,1,2,0,0,4,0,8,54,7,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,25,134,"            return (getWrappedField().equals(other.getWrappedField())) &&
",0,1,0,4,8,1,8,0,0,9,61,7,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,25,138,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,25,54,"            throw new IllegalArgumentException(""The field must not be null"");
",0,0,0,1,2,0,0,2,0,4,65,6,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,25,57,"            throw new IllegalArgumentException(""The field must be supported"");
",0,0,0,1,2,0,0,2,0,3,66,7,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,25,73,"        return iField.isPrecise();
",0,0,0,1,2,1,4,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,25,77,"        return iField.getValueAsLong(duration, instant);
",0,0,0,1,2,1,8,0,0,8,48,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,25,81,"        return iField.getMillis(value, instant);
",0,0,0,1,2,1,8,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,25,85,"        return iField.getMillis(value, instant);
",0,0,0,1,2,1,8,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,25,89,"        return iField.add(instant, value);
",0,0,0,1,2,1,8,0,0,8,34,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,25,93,"        return iField.add(instant, value);
",0,0,0,1,2,1,8,0,0,8,34,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,25,97,"        return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,69,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,25,101,"        return iField.getUnitMillis();
",0,0,0,1,2,1,4,0,0,4,30,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,25,53,"        return ""millis"";
",0,0,0,0,0,1,0,0,0,1,16,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,25,85,"        return FieldUtils.safeToInt(duration);
",0,0,0,1,2,1,6,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,25,89,"        return duration;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,25,93,"        return FieldUtils.safeToInt(duration);
",0,0,0,1,2,1,6,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,25,97,"        return duration;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,25,101,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,25,105,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,25,109,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,25,113,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,25,121,"        return FieldUtils.safeAdd(instant, value);
",0,0,0,1,2,1,8,0,0,8,42,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,25,125,"        return FieldUtils.safeToInt(FieldUtils.safeSubtract(minuendInstant, subtrahendInstant));
",0,0,0,2,4,1,12,0,0,12,88,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,25,129,"        return FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,66,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,25,134,"        long otherMillis = otherField.getUnitMillis();
",2,0,0,1,2,0,4,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,25,135,"        long thisMillis = getUnitMillis();
",2,0,0,1,2,0,2,0,0,4,34,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,25,137,"        if (thisMillis == otherMillis) {
",4,1,0,1,3,0,0,0,0,5,32,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,25,138,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,25,140,"        if (thisMillis < otherMillis) {
",4,1,0,1,3,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,25,141,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,6,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,25,143,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,25,153,"        return ""DurationField[millis]"";
",0,0,0,1,2,1,0,0,0,1,31,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,25,160,"        return INSTANCE;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,25,32,"public final class MillisDurationField extends DurationField implements Serializable {
",2,0,0,0,1,2,0,4,0,8,86,1,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,603,"        Chronology chrono = new BaseChronology() {
",2,0,0,1,3,0,0,4,0,6,42,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,605,"                return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,608,"                return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,611,"                return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,614,"                return getClass().getName();
",0,0,0,2,4,1,4,0,0,4,28,11,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,43,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,44,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,56,"        return cMillisProvider.getMillis();
",0,0,0,1,2,1,4,0,0,4,35,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,68,"        checkPermission();
",0,0,0,1,2,0,2,0,0,2,18,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,69,"        cMillisProvider = SYSTEM_MILLIS_PROVIDER;
",4,0,0,0,0,0,0,0,0,5,41,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,70,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,82,"        checkPermission();
",0,0,0,1,2,0,2,0,0,2,18,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,83,"        cMillisProvider = new FixedMillisProvider(fixedMillis);
",4,0,0,1,2,0,0,2,0,7,55,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,84,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,97,"        checkPermission();
",0,0,0,1,2,0,2,0,0,2,18,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,98,"        if (offsetMillis == 0) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,99,"            cMillisProvider = SYSTEM_MILLIS_PROVIDER;
",4,0,0,0,0,0,0,0,0,5,41,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,101,"            cMillisProvider = new OffsetMillisProvider(offsetMillis);
",4,0,0,1,2,0,0,2,0,7,57,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,103,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,116,"        if (millisProvider == null) {
",2,1,0,1,3,0,0,0,0,3,29,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,117,"            throw new IllegalArgumentException(""The MillisProvider must not be null"");
",0,0,0,1,2,0,0,2,0,4,74,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,119,"        checkPermission();
",0,0,0,1,2,0,2,0,0,2,18,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,120,"        cMillisProvider = millisProvider;
",4,0,0,0,0,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,121,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,129,"        SecurityManager sm = System.getSecurityManager();
",2,0,0,1,2,0,4,2,0,8,49,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,130,"        if (sm != null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,131,"            sm.checkPermission(new JodaTimePermission(""CurrentTime.setProvider""));
",0,0,0,2,4,0,4,2,0,7,70,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,133,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,147,"            return DateTimeUtils.currentTimeMillis();
",0,0,0,1,2,1,4,0,0,4,41,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,165,"            return ISOChronology.getInstance();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,169,"            return ISOChronology.getInstance();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,187,"        Chronology chrono = null;
",2,0,0,0,0,0,0,2,0,4,25,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,188,"        if (start != null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,189,"            chrono = start.getChronology();
",2,0,0,1,2,0,4,0,0,7,31,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,190,"        } else if (end != null) {
",2,1,0,1,4,0,0,0,0,3,25,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,191,"            chrono = end.getChronology();
",2,0,0,1,2,0,4,0,0,7,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,193,"        if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,194,"            chrono = ISOChronology.getInstance();
",2,0,0,1,2,0,4,0,0,7,37,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,196,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,211,"        if (interval == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,212,"            return ISOChronology.getInstance();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,214,"        Chronology chrono = interval.getChronology();
",2,0,0,1,2,0,4,2,0,8,45,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,215,"        if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,216,"            return ISOChronology.getInstance();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,218,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,234,"        if (interval == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,235,"            long now = DateTimeUtils.currentTimeMillis();
",2,0,0,1,2,0,4,0,0,6,45,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,236,"            interval = new Interval(now, now);
",6,0,0,1,2,0,0,2,0,9,34,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,238,"        return interval;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,253,"            return ISOChronology.getInstance();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,269,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,270,"            return DateTimeZone.getDefault();
",0,0,0,1,2,1,4,0,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,272,"        return zone;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,286,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,287,"            return PeriodType.standard();
",0,0,0,1,2,1,4,0,0,4,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,289,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,303,"        if (duration == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,304,"            return 0L;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,306,"        return duration.getMillis();
",0,0,0,1,2,1,4,0,0,4,28,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,334,"        if (partial == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,335,"            throw new IllegalArgumentException(""Partial must not be null"");
",0,0,0,1,2,0,0,2,0,4,63,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,337,"        DurationFieldType lastType = null;
",2,0,0,0,0,0,0,2,0,4,34,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,338,"        for (int i = 0; i < partial.size(); i++) {
",6,1,0,2,5,0,4,0,0,12,42,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,339,"            DateTimeField loopField = partial.getField(i);
",2,0,0,1,2,0,6,2,0,10,46,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,340,"            if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,341,"                if (loopField.getRangeDurationField().getType() != lastType) {
",2,1,0,3,7,0,6,0,0,9,62,8,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,342,"                    return false;
",0,0,0,0,0,1,0,0,0,1,13,10,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,345,"            lastType = loopField.getDurationField().getType();
",2,0,0,2,4,0,6,0,0,9,50,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,347,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,365,"        	Method method = DateFormatSymbols.class.getMethod(""getInstance"", new Class[] {Locale.class});        	
",2,0,0,3,6,0,2,8,0,13,93,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,366,"        	return (DateFormatSymbols) method.invoke(null, new Object[] {locale});        	
",2,0,0,4,8,1,4,4,0,10,70,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,367,"        } catch (Exception ex) {
",2,0,0,1,4,0,0,2,0,4,24,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,368,"        	return new DateFormatSymbols(locale);
",2,0,0,1,2,1,0,2,0,4,37,8,0.00000,0
defect4j,time,org/joda/time/JodaTimePermission,25,57,"        super(name);
",2,0,0,1,2,0,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/JodaTimePermission,25,58,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,399,"            return System.currentTimeMillis();
",0,0,0,1,2,1,4,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,25,465,"                    return chronology.era();
",0,0,0,1,2,1,4,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,25,467,"                    return chronology.yearOfEra();
",0,0,0,1,2,1,4,0,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,25,469,"                    return chronology.centuryOfEra();
",0,0,0,1,2,1,4,0,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,25,471,"                    return chronology.yearOfCentury();
",0,0,0,1,2,1,4,0,0,4,34,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,25,475,"                    return chronology.dayOfYear();
",0,0,0,1,2,1,4,0,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,25,481,"                    return chronology.weekyearOfCentury();
",0,0,0,1,2,1,4,0,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,25,483,"                    return chronology.weekyear();
",0,0,0,1,2,1,4,0,0,4,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,25,485,"                    return chronology.weekOfWeekyear();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,25,487,"                    return chronology.dayOfWeek();
",0,0,0,1,2,1,4,0,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,25,489,"                    return chronology.halfdayOfDay();
",0,0,0,1,2,1,4,0,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,25,491,"                    return chronology.hourOfHalfday();
",0,0,0,1,2,1,4,0,0,4,34,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,25,493,"                    return chronology.clockhourOfHalfday();
",0,0,0,1,2,1,4,0,0,4,39,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,25,495,"                    return chronology.clockhourOfDay();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,25,499,"                    return chronology.minuteOfDay();
",0,0,0,1,2,1,4,0,0,4,32,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,25,507,"                    return chronology.millisOfDay();
",0,0,0,1,2,1,4,0,0,4,32,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,25,509,"                    return chronology.millisOfSecond();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,25,512,"                    throw new InternalError();
",0,0,0,1,2,0,0,2,0,2,26,8,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,25,522,"            switch (iOrdinal) {
",2,0,0,1,3,0,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,25,524,"                    return ERA_TYPE;
",2,0,0,0,0,1,0,0,0,2,16,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,25,526,"                    return YEAR_OF_ERA_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,25,528,"                    return CENTURY_OF_ERA_TYPE;
",2,0,0,0,0,1,0,0,0,2,27,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,25,530,"                    return YEAR_OF_CENTURY_TYPE;
",2,0,0,0,0,1,0,0,0,2,28,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,25,532,"                    return YEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,25,534,"                    return DAY_OF_YEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,25,536,"                    return MONTH_OF_YEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,25,538,"                    return DAY_OF_MONTH_TYPE;
",2,0,0,0,0,1,0,0,0,2,25,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,25,540,"                    return WEEKYEAR_OF_CENTURY_TYPE;
",2,0,0,0,0,1,0,0,0,2,32,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,25,542,"                    return WEEKYEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,21,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,25,544,"                    return WEEK_OF_WEEKYEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,25,546,"                    return DAY_OF_WEEK_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,25,548,"                    return HALFDAY_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,27,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,25,550,"                    return HOUR_OF_HALFDAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,28,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,25,552,"                    return CLOCKHOUR_OF_HALFDAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,33,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,25,554,"                    return CLOCKHOUR_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,25,556,"                    return HOUR_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,25,558,"                    return MINUTE_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,25,560,"                    return MINUTE_OF_HOUR_TYPE;
",2,0,0,0,0,1,0,0,0,2,27,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,25,562,"                    return SECOND_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,25,564,"                    return SECOND_OF_MINUTE_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,25,566,"                    return MILLIS_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,25,568,"                    return MILLIS_OF_SECOND_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,25,571,"                    return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,438,"        OffsetMillisProvider(long offsetMillis) {
",4,0,0,1,3,0,0,0,0,4,41,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,439,"            iMillis = offsetMillis;
",4,0,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,440,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,447,"            return System.currentTimeMillis() + iMillis;
",2,1,0,1,2,1,4,0,0,7,44,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,414,"        FixedMillisProvider(long fixedMillis) {
",4,0,0,1,3,0,0,0,0,4,39,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,415,"            iMillis = fixedMillis;
",4,0,0,0,0,0,0,0,0,5,22,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,416,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,25,423,"            return iMillis;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,25,43,"        String[] nameSet = getNameSet(locale, id, nameKey);
",2,0,0,2,4,0,8,2,0,12,51,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,25,44,"        return nameSet == null ? null : nameSet[0];
",2,1,1,1,2,1,0,0,0,5,43,5,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,25,48,"        String[] nameSet = getNameSet(locale, id, nameKey);
",2,0,0,2,4,0,8,2,0,12,51,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,25,49,"        return nameSet == null ? null : nameSet[1];
",2,1,1,1,2,1,0,0,0,5,43,5,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,25,53,"        if (locale == null || id == null || nameKey == null) {
",6,5,0,1,3,0,0,0,0,11,54,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,25,54,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,25,57,"        Map<String, Map<String, Object>> byIdCache = iByLocaleCache.get(locale);
",2,0,0,1,2,0,6,10,0,18,72,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,25,58,"        if (byIdCache == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,25,59,"            iByLocaleCache.put(locale, byIdCache = createCache());
",2,0,0,2,4,0,8,0,0,11,54,7,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,25,62,"        Map<String, Object> byNameKeyCache = byIdCache.get(id);
",2,0,0,1,2,0,6,6,0,14,55,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,25,63,"        if (byNameKeyCache == null) {
",2,1,0,1,3,0,0,0,0,3,29,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,25,64,"            byIdCache.put(id, byNameKeyCache = createCache());
",2,0,0,2,4,0,8,0,0,11,50,7,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,25,65,"            String[][] zoneStrings = DateTimeUtils.getDateFormatSymbols(locale).getZoneStrings();
",2,0,0,4,8,0,8,2,0,12,85,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,25,66,"            for (int i=0; i<zoneStrings.length; i++) {
",10,1,0,1,3,0,0,0,0,12,42,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,25,67,"                String[] set = zoneStrings[i];
",2,0,1,2,4,0,0,2,0,8,30,8,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,25,68,"                if (set != null && set.length == 5 && id.equals(set[0])) {
",6,4,1,3,7,0,4,0,0,16,58,8,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,25,69,"                    byNameKeyCache.put(set[2], new String[] {set[2], set[1]});
",0,0,1,6,12,0,4,2,0,12,58,11,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,25,73,"                    if (set[2].equals(set[4])) {
",0,0,1,4,9,0,2,0,0,6,28,11,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,25,74,"                        byNameKeyCache.put(set[4] + ""-Summer"", new String[] {set[4], set[3]});
",0,1,1,6,12,0,4,2,0,14,70,13,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,25,76,"                        byNameKeyCache.put(set[4], new String[] {set[4], set[3]});
",0,0,1,6,12,0,4,2,0,12,58,13,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,25,78,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,25,83,"        return (String[])byNameKeyCache.get(nameKey);
",0,0,0,3,6,1,6,2,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,225,"    public DateTimeZoneBuilder() {
",2,0,0,1,3,1,0,0,0,3,30,2,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,226,"        iRuleSets = new ArrayList<RuleSet>(10);
",2,0,0,1,2,0,0,4,0,7,39,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,227,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,96,"            return readFrom((DataInput)in, id);
",2,0,0,2,4,1,4,2,0,8,35,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,112,"            DateTimeZone fixed = new FixedDateTimeZone
",2,0,0,0,0,0,0,4,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,114,"            if (fixed.equals(DateTimeZone.UTC)) {
",4,0,0,2,5,0,4,0,0,8,37,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,115,"                fixed = DateTimeZone.UTC;
",6,0,0,0,0,0,0,0,0,7,25,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,117,"            return fixed;
",2,0,0,0,0,1,0,0,0,2,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,121,"            return PrecalculatedZone.readFrom(in, id);
",0,0,0,1,2,1,8,0,0,8,42,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,123,"            throw new IOException(""Invalid encoding"");
",0,0,0,1,2,0,0,2,0,3,42,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,140,"        if (millis % (30 * 60000L) == 0) {
",2,3,0,2,5,0,0,0,0,5,34,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,142,"            long units = millis / (30 * 60000L);
",4,2,0,1,2,0,0,0,0,6,36,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,143,"            if (((units << (64 - 6)) >> (64 - 6)) == units) {
",4,5,0,5,11,0,0,0,0,9,49,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,145,"                out.writeByte((int)(units & 0x3f));
",2,1,0,3,6,0,4,0,0,7,35,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,146,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,150,"        if (millis % 60000L == 0) {
",2,2,0,1,3,0,0,0,0,4,27,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,152,"            long minutes = millis / 60000L;
",4,1,0,0,0,0,0,0,0,5,31,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,153,"            if (((minutes << (64 - 30)) >> (64 - 30)) == minutes) {
",4,5,0,5,11,0,0,0,0,9,55,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,155,"                out.writeInt(0x40000000 | (int)(minutes & 0x3fffffff));
",2,2,0,3,6,0,4,0,0,8,55,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,156,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,160,"        if (millis % 1000L == 0) {
",2,2,0,1,3,0,0,0,0,4,26,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,162,"            long seconds = millis / 1000L;
",4,1,0,0,0,0,0,0,0,5,30,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,163,"            if (((seconds << (64 - 38)) >> (64 - 38)) == seconds) {
",4,5,0,5,11,0,0,0,0,9,55,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,165,"                out.writeByte(0x80 | (int)((seconds >> 32) & 0x3f));
",2,3,0,4,8,0,4,0,0,9,52,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,166,"                out.writeInt((int)(seconds & 0xffffffff));
",2,1,0,3,6,0,4,0,0,7,42,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,167,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,175,"        out.writeByte(millis < 0 ? 0xff : 0xc0);
",2,1,0,1,2,0,4,0,0,7,40,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,176,"        out.writeLong(millis);
",0,0,0,1,2,0,6,0,0,6,22,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,177,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,215,"        if (""UTC"".equals(id) && id.equals(nameKey) &&
",0,2,0,2,5,0,10,0,0,13,45,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,217,"            return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,219,"        return new FixedDateTimeZone(id, nameKey, wallOffset, standardOffset);
",8,0,0,1,2,1,0,2,0,10,70,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,252,"        OfYear ofYear = new OfYear
",2,0,0,0,0,0,0,4,0,6,26,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,254,"        if (iRuleSets.size() > 0) {
",0,1,0,2,5,0,4,0,0,5,27,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,255,"            RuleSet lastRuleSet = iRuleSets.get(iRuleSets.size() - 1);
",2,1,0,2,4,0,8,2,0,13,58,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,256,"            lastRuleSet.setUpperLimit(year, ofYear);
",0,0,0,1,2,0,8,0,0,8,40,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,258,"        iRuleSets.add(new RuleSet());
",0,0,0,2,4,0,4,2,0,6,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,259,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,268,"        getLastRuleSet().setStandardOffset(standardOffset);
",0,0,0,2,4,0,6,0,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,269,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,276,"        getLastRuleSet().setFixedSavings(nameKey, saveMillis);
",0,0,0,2,4,0,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,277,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,309,"        if (fromYear <= toYear) {
",4,1,0,1,3,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,310,"            OfYear ofYear = new OfYear
",2,0,0,0,0,0,0,4,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,312,"            Recurrence recurrence = new Recurrence(ofYear, nameKey, saveMillis);
",8,0,0,1,2,0,0,4,0,12,68,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,313,"            Rule rule = new Rule(recurrence, fromYear, toYear);
",8,0,0,1,2,0,0,4,0,12,51,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,314,"            getLastRuleSet().addRule(rule);
",0,0,0,2,4,0,6,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,316,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,320,"        if (iRuleSets.size() == 0) {
",0,1,0,2,5,0,4,0,0,5,28,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,321,"            addCutover(Integer.MIN_VALUE, 'w', 1, 1, 0, false, 0);
",4,0,0,1,2,0,2,0,0,8,54,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,323,"        return iRuleSets.get(iRuleSets.size() - 1);
",0,1,0,2,4,1,8,0,0,9,43,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,333,"        if (id == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,334,"            throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,339,"        ArrayList<Transition> transitions = new ArrayList<Transition>();
",2,0,0,1,2,0,0,8,0,10,64,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,343,"        DSTZone tailZone = null;
",2,0,0,0,0,0,0,2,0,4,24,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,345,"        long millis = Long.MIN_VALUE;
",6,0,0,0,0,0,0,0,0,6,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,346,"        int saveMillis = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,348,"        int ruleSetCount = iRuleSets.size();
",2,0,0,1,2,0,4,0,0,6,36,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,349,"        for (int i=0; i<ruleSetCount; i++) {
",8,1,0,1,3,0,0,0,0,10,36,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,350,"            RuleSet rs = iRuleSets.get(i);
",2,0,0,1,2,0,6,2,0,10,30,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,351,"            Transition next = rs.firstTransition(millis);
",2,0,0,1,2,0,6,2,0,10,45,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,352,"            if (next == null) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,353,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,355,"            addTransition(transitions, next);
",0,0,0,1,2,0,6,0,0,6,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,356,"            millis = next.getMillis();
",2,0,0,1,2,0,4,0,0,7,26,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,357,"            saveMillis = next.getSaveMillis();
",2,0,0,1,2,0,4,0,0,7,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,360,"            rs = new RuleSet(rs);
",4,0,0,1,2,0,0,2,0,7,21,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,362,"            while ((next = rs.nextTransition(millis, saveMillis)) != null) {
",2,1,0,3,7,0,8,0,0,12,64,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,363,"                if (addTransition(transitions, next)) {
",0,0,0,2,5,0,6,0,0,6,39,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,364,"                    if (tailZone != null) {
",2,1,0,1,3,0,0,0,0,3,23,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,366,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,369,"                millis = next.getMillis();
",2,0,0,1,2,0,4,0,0,7,26,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,370,"                saveMillis = next.getSaveMillis();
",2,0,0,1,2,0,4,0,0,7,34,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,371,"                if (tailZone == null && i == ruleSetCount - 1) {
",6,4,0,1,3,0,0,0,0,10,48,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,372,"                    tailZone = rs.buildTailZone(id);
",2,0,0,1,2,0,6,0,0,9,32,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,379,"            millis = rs.getUpperLimit(saveMillis);
",2,0,0,1,2,0,6,0,0,9,38,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,383,"        if (transitions.size() == 0) {
",0,1,0,2,5,0,4,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,384,"            if (tailZone != null) {
",2,1,0,1,3,0,0,0,0,3,23,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,386,"                return tailZone;
",2,0,0,0,0,1,0,0,0,2,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,388,"            return buildFixedZone(id, ""UTC"", 0, 0);
",0,0,0,1,2,1,4,0,0,5,39,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,390,"        if (transitions.size() == 1 && tailZone == null) {
",2,3,0,2,5,0,4,0,0,9,50,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,391,"            Transition tr = transitions.get(0);
",2,0,0,1,2,0,4,2,0,8,35,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,392,"            return buildFixedZone(id, tr.getNameKey(),
",0,0,0,1,3,1,8,0,0,8,42,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,396,"        PrecalculatedZone zone = PrecalculatedZone.create(id, outputID, transitions, tailZone);
",2,0,0,1,2,0,12,2,0,16,87,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,397,"        if (zone.isCachable()) {
",0,0,0,2,5,0,4,0,0,4,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,398,"            return CachedDateTimeZone.forZone(zone);
",0,0,0,1,2,1,6,0,0,6,40,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,400,"        return zone;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,404,"        int size = transitions.size();
",2,0,0,1,2,0,4,0,0,6,30,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,405,"        if (size == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,406,"            transitions.add(tr);
",0,0,0,1,2,0,6,0,0,6,20,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,407,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,410,"        Transition last = transitions.get(size - 1);
",4,1,0,1,2,0,4,2,0,11,44,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,411,"        if (!tr.isTransitionFrom(last)) {
",0,0,0,2,5,0,6,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,412,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,417,"        int offsetForLast = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,418,"        if (size >= 2) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,419,"            offsetForLast = transitions.get(size - 2).getWallOffset();
",4,1,0,2,4,0,6,0,0,12,58,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,421,"        int offsetForNew = last.getWallOffset();
",2,0,0,1,2,0,4,0,0,6,40,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,423,"        long lastLocal = last.getMillis() + offsetForLast;
",4,1,0,1,2,0,4,0,0,9,50,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,424,"        long newLocal = tr.getMillis() + offsetForNew;
",4,1,0,1,2,0,4,0,0,9,46,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,426,"        if (newLocal != lastLocal) {
",4,1,0,1,3,0,0,0,0,5,28,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,427,"            transitions.add(tr);
",0,0,0,1,2,0,6,0,0,6,20,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,428,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,431,"        transitions.remove(size - 1);
",2,1,0,1,2,0,4,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,432,"        return addTransition(transitions, tr);
",0,0,0,1,2,1,6,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,443,"        if (out instanceof DataOutput) {
",2,0,0,1,3,0,0,2,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,444,"            writeTo(zoneID, (DataOutput)out);
",2,0,0,2,4,0,4,2,0,8,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,446,"            writeTo(zoneID, (DataOutput)new DataOutputStream(out));
",2,0,0,3,6,0,4,4,0,10,55,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,448,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,459,"        DateTimeZone zone = toDateTimeZone(zoneID, false);
",2,0,0,1,2,0,4,2,0,9,50,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,461,"        if (zone instanceof FixedDateTimeZone) {
",2,0,0,1,3,0,0,2,0,4,40,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,462,"            out.writeByte('F'); // 'F' for fixed
",0,0,0,1,2,0,4,0,0,5,36,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,463,"            out.writeUTF(zone.getNameKey(0));
",0,0,0,2,4,0,8,0,0,8,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,464,"            writeMillis(out, zone.getOffset(0));
",0,0,0,2,4,0,8,0,0,8,36,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,465,"            writeMillis(out, zone.getStandardOffset(0));
",0,0,0,2,4,0,8,0,0,8,44,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,467,"            if (zone instanceof CachedDateTimeZone) {
",2,0,0,1,3,0,0,2,0,4,41,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,468,"                out.writeByte('C'); // 'C' for cached, precalculated
",0,0,0,1,2,0,4,0,0,5,52,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,469,"                zone = ((CachedDateTimeZone)zone).getUncachedZone();
",4,0,0,3,6,0,2,2,0,9,52,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,471,"                out.writeByte('P'); // 'P' for precalculated, uncached
",0,0,0,1,2,0,4,0,0,5,54,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,473,"            ((PrecalculatedZone)zone).writeTo(out);
",2,0,0,3,6,0,4,2,0,8,39,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,475,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1362,"                        index = in.readUnsignedShort();
",2,0,0,1,2,0,4,0,0,7,31,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1365,"                } catch (ArrayIndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,44,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1366,"                    throw new IOException(""Invalid encoding"");
",0,0,0,1,2,0,0,2,0,3,42,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1389,"            int size = transitions.size();
",2,0,0,1,2,0,4,0,0,6,30,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1390,"            if (size == 0) {
",2,1,0,1,3,0,0,0,0,3,16,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1391,"                throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1394,"            long[] trans = new long[size];
",2,0,1,2,4,0,0,0,0,4,30,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1395,"            int[] wallOffsets = new int[size];
",2,0,1,2,4,0,0,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1396,"            int[] standardOffsets = new int[size];
",2,0,1,2,4,0,0,0,0,4,38,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1397,"            String[] nameKeys = new String[size];
",2,0,1,2,4,0,0,4,0,8,37,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1399,"            Transition last = null;
",2,0,0,0,0,0,0,2,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1400,"            for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1401,"                Transition tr = transitions.get(i);
",2,0,0,1,2,0,6,2,0,10,35,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1403,"                if (!tr.isTransitionFrom(last)) {
",0,0,0,2,5,0,6,0,0,7,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1404,"                    throw new IllegalArgumentException(id);
",2,0,0,1,2,0,0,2,0,4,39,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1407,"                trans[i] = tr.getMillis();
",0,0,1,2,4,0,4,0,0,9,26,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1408,"                wallOffsets[i] = tr.getWallOffset();
",0,0,1,2,4,0,4,0,0,9,36,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1409,"                standardOffsets[i] = tr.getStandardOffset();
",0,0,1,2,4,0,4,0,0,9,44,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1410,"                nameKeys[i] = tr.getNameKey();
",0,0,1,2,4,0,4,0,0,9,30,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1412,"                last = tr;
",4,0,0,0,0,0,0,0,0,5,10,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1417,"            String[] zoneNameData = new String[5];
",2,0,0,2,4,0,0,4,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1418,"            String[][] zoneStrings = new DateFormatSymbols(Locale.ENGLISH).getZoneStrings();
",6,0,0,4,8,0,2,4,0,12,80,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1419,"            for (int j = 0; j < zoneStrings.length; j++) {
",10,1,0,1,3,0,0,0,0,12,46,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1420,"                String[] set = zoneStrings[j];
",2,0,1,2,4,0,0,2,0,8,30,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1421,"                if (set != null && set.length == 5 && id.equals(set[0])) {
",6,4,1,3,7,0,4,0,0,16,58,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1422,"                    zoneNameData = set;
",4,0,0,0,0,0,0,0,0,5,19,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1426,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1428,"            for (int i = 0; i < nameKeys.length - 1; i++) {
",10,2,0,1,3,0,0,0,0,13,47,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1429,"                String curNameKey = nameKeys[i];
",2,0,1,1,2,0,0,2,0,8,32,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1430,"                String nextNameKey = nameKeys[i + 1];
",4,1,1,1,2,0,0,2,0,9,37,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1431,"                long curOffset = wallOffsets[i];
",2,0,1,1,2,0,0,0,0,6,32,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1432,"                long nextOffset = wallOffsets[i + 1];
",4,1,1,1,2,0,0,0,0,7,37,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1433,"                long curStdOffset = standardOffsets[i];
",2,0,1,1,2,0,0,0,0,6,39,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1434,"                long nextStdOffset = standardOffsets[i + 1];
",4,1,1,1,2,0,0,0,0,7,44,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1435,"                Period p = new Period(trans[i], trans[i + 1], PeriodType.yearMonthDay(), chrono);
",6,1,1,4,8,0,4,4,0,21,81,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1436,"                if (curOffset != nextOffset &&
",4,8,0,0,1,0,0,0,0,12,30,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1443,"                    if (ZoneInfoCompiler.verbose()) {
",0,0,0,2,5,0,4,0,0,4,33,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1444,"                        System.out.println(""Fixing duplicate name key - "" + nextNameKey);
",6,1,0,1,2,0,2,0,0,10,65,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1445,"                        System.out.println(""     - "" + new DateTime(trans[i], chrono) +
",6,1,1,2,5,0,2,2,0,16,63,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1448,"                    if (curOffset > nextOffset) {
",4,1,0,1,3,0,0,0,0,5,29,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1449,"                        nameKeys[i] = (curNameKey + ""-Summer"").intern();
",2,1,1,3,6,0,2,0,0,11,48,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1450,"                    } else if (curOffset < nextOffset) {
",4,1,0,1,4,0,0,0,0,5,36,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1451,"                        nameKeys[i + 1] = (nextNameKey + ""-Summer"").intern();
",4,2,1,3,6,0,2,0,0,12,53,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1452,"                        i++;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1457,"            if (tailZone != null) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1458,"                if (tailZone.iStartRecurrence.getNameKey()
",4,0,0,1,3,0,2,0,0,6,42,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1460,"                    if (ZoneInfoCompiler.verbose()) {
",0,0,0,2,5,0,4,0,0,4,33,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1461,"                        System.out.println(""Fixing duplicate recurrent name key - "" +
",4,1,0,0,1,0,2,0,0,8,61,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1464,"                    if (tailZone.iStartRecurrence.getSaveMillis() > 0) {
",4,1,0,2,5,0,2,0,0,7,52,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1465,"                        tailZone = new DSTZone(
",2,0,0,0,1,0,0,2,0,5,23,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1471,"                        tailZone = new DSTZone(
",2,0,0,0,1,0,0,2,0,5,23,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1480,"            return new PrecalculatedZone
",0,0,0,0,0,1,0,2,0,2,28,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1509,"            long[] transitions = iTransitions;
",4,0,0,1,2,0,0,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1510,"            int i = Arrays.binarySearch(transitions, instant);
",2,0,0,1,2,0,8,0,0,10,50,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1511,"            if (i >= 0) {
",2,1,0,1,3,0,0,0,0,3,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1512,"                return iNameKeys[i];
",0,0,1,1,2,1,0,0,0,4,20,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1514,"            i = ~i;
",4,0,0,0,0,0,0,0,0,6,7,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1515,"            if (i < transitions.length) {
",6,1,0,1,3,0,0,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1516,"                if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1517,"                    return iNameKeys[i - 1];
",2,1,1,1,2,1,0,0,0,5,24,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1519,"                return ""UTC"";
",0,0,0,0,0,1,0,0,0,1,13,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1521,"            if (iTailZone == null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1522,"                return iNameKeys[i - 1];
",2,1,1,1,2,1,0,0,0,5,24,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1524,"            return iTailZone.getNameKey(instant);
",0,0,0,1,2,1,6,0,0,6,37,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1531,"                return iWallOffsets[i];
",0,0,1,1,2,1,0,0,0,4,23,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1535,"                if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1536,"                    return iWallOffsets[i - 1];
",2,1,1,1,2,1,0,0,0,5,27,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1538,"                return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1541,"                return iWallOffsets[i - 1];
",2,1,1,1,2,1,0,0,0,5,27,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1547,"            long[] transitions = iTransitions;
",4,0,0,1,2,0,0,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1548,"            int i = Arrays.binarySearch(transitions, instant);
",2,0,0,1,2,0,8,0,0,10,50,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1549,"            if (i >= 0) {
",2,1,0,1,3,0,0,0,0,3,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1550,"                return iStandardOffsets[i];
",0,0,1,1,2,1,0,0,0,4,27,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1552,"            i = ~i;
",4,0,0,0,0,0,0,0,0,6,7,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1553,"            if (i < transitions.length) {
",6,1,0,1,3,0,0,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1554,"                if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1555,"                    return iStandardOffsets[i - 1];
",2,1,1,1,2,1,0,0,0,5,31,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1557,"                return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1559,"            if (iTailZone == null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1560,"                return iStandardOffsets[i - 1];
",2,1,1,1,2,1,0,0,0,5,31,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1562,"            return iTailZone.getStandardOffset(instant);
",0,0,0,1,2,1,6,0,0,6,44,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1566,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1574,"                return transitions[i];
",0,0,1,1,2,1,0,0,0,4,22,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1577,"                return instant;
",2,0,0,0,0,1,0,0,0,2,15,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1581,"                instant = end;
",4,0,0,0,0,0,0,0,0,5,14,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1587,"            long[] transitions = iTransitions;
",4,0,0,1,2,0,0,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1588,"            int i = Arrays.binarySearch(transitions, instant);
",2,0,0,1,2,0,8,0,0,10,50,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1589,"            if (i >= 0) {
",2,1,0,1,3,0,0,0,0,3,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1590,"                if (instant > Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,31,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1591,"                    return instant - 1;
",2,1,0,0,0,1,0,0,0,3,19,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1593,"                return instant;
",2,0,0,0,0,1,0,0,0,2,15,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1595,"            i = ~i;
",4,0,0,0,0,0,0,0,0,6,7,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1596,"            if (i < transitions.length) {
",6,1,0,1,3,0,0,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1597,"                if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1598,"                    long prev = transitions[i - 1];
",4,1,1,1,2,0,0,0,0,7,31,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1599,"                    if (prev > Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,28,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1600,"                        return prev - 1;
",2,1,0,0,0,1,0,0,0,3,16,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1603,"                return instant;
",2,0,0,0,0,1,0,0,0,2,15,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1605,"            if (iTailZone != null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1606,"                long prev = iTailZone.previousTransition(instant);
",2,0,0,1,2,0,6,0,0,8,50,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1607,"                if (prev < instant) {
",4,1,0,1,3,0,0,0,0,5,21,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1608,"                    return prev;
",2,0,0,0,0,1,0,0,0,2,12,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1611,"            long prev = transitions[i - 1];
",4,1,1,1,2,0,0,0,0,7,31,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1612,"            if (prev > Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,28,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1613,"                return prev - 1;
",2,1,0,0,0,1,0,0,0,3,16,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1615,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1619,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1620,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1622,"            if (obj instanceof PrecalculatedZone) {
",2,0,0,1,3,0,0,2,0,4,39,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1623,"                PrecalculatedZone other = (PrecalculatedZone)obj;
",4,0,0,1,2,0,0,4,0,8,49,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1624,"                return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1634,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1638,"            int size = iTransitions.length;
",6,0,0,0,0,0,0,0,0,6,31,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1641,"            Set<String> poolSet = new HashSet<String>();
",2,0,0,1,2,0,0,8,0,10,44,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1642,"            for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1643,"                poolSet.add(iNameKeys[i]);
",0,0,1,2,4,0,4,0,0,8,26,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1646,"            int poolSize = poolSet.size();
",2,0,0,1,2,0,4,0,0,6,30,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1647,"            if (poolSize > 65535) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1648,"                throw new UnsupportedOperationException(""String pool is too large"");
",0,0,0,1,2,0,0,2,0,3,68,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1650,"            String[] pool = new String[poolSize];
",2,0,1,2,4,0,0,4,0,8,37,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1651,"            Iterator<String> it = poolSet.iterator();
",2,0,0,1,2,0,4,4,0,10,41,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1652,"            for (int i=0; it.hasNext(); i++) {
",4,0,0,2,5,0,4,0,0,9,34,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1653,"                pool[i] = it.next();
",0,0,1,2,4,0,4,0,0,9,20,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1657,"            out.writeShort(poolSize);
",0,0,0,1,2,0,6,0,0,6,25,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1658,"            for (int i=0; i<poolSize; i++) {
",8,1,0,1,3,0,0,0,0,10,32,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1659,"                out.writeUTF(pool[i]);
",0,0,1,2,4,0,4,0,0,8,22,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1662,"            out.writeInt(size);
",0,0,0,1,2,0,6,0,0,6,19,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1664,"            for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1665,"                writeMillis(out, iTransitions[i]);
",0,0,1,2,4,0,4,0,0,8,34,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1666,"                writeMillis(out, iWallOffsets[i]);
",0,0,1,2,4,0,4,0,0,8,34,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1667,"                writeMillis(out, iStandardOffsets[i]);
",0,0,1,2,4,0,4,0,0,8,38,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1670,"                String nameKey = iNameKeys[i];
",2,0,1,1,2,0,0,2,0,8,30,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1671,"                for (int j=0; j<poolSize; j++) {
",8,1,0,1,3,0,0,0,0,10,32,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1672,"                    if (pool[j].equals(nameKey)) {
",0,0,1,3,7,0,4,0,0,8,30,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1673,"                        if (poolSize < 256) {
",2,1,0,1,3,0,0,0,0,3,21,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1674,"                            out.writeByte(j);
",0,0,0,1,2,0,6,0,0,6,17,14,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1676,"                            out.writeShort(j);
",0,0,0,1,2,0,6,0,0,6,18,14,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1678,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1683,"            out.writeBoolean(iTailZone != null);
",2,1,0,1,2,0,4,0,0,7,36,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1684,"            if (iTailZone != null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1685,"                iTailZone.writeTo(out);
",0,0,0,1,2,0,6,0,0,6,23,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1687,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1690,"            if (iTailZone != null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1691,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1693,"            long[] transitions = iTransitions;
",4,0,0,1,2,0,0,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1694,"            if (transitions.length <= 1) {
",4,1,0,1,3,0,0,0,0,5,30,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1695,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1700,"            double distances = 0;
",2,0,0,0,0,0,0,0,0,2,21,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1701,"            int count = 0;
",2,0,0,0,0,0,0,0,0,2,14,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1703,"            for (int i=1; i<transitions.length; i++) {
",10,1,0,1,3,0,0,0,0,12,42,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1704,"                long diff = transitions[i] - transitions[i - 1];
",4,2,1,2,4,0,0,0,0,12,48,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1705,"                if (diff < ((366L + 365) * 24 * 60 * 60 * 1000)) {
",2,3,0,3,7,0,0,0,0,5,50,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1706,"                    distances += (double)diff;
",4,0,0,1,2,0,0,0,0,5,26,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1707,"                    count++;
",2,0,0,0,0,0,0,0,0,3,8,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1711,"            if (count > 0) {
",2,1,0,1,3,0,0,0,0,3,16,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1712,"                double avg = distances / count;
",6,1,0,0,0,0,0,0,0,7,31,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1713,"                avg /= 24 * 60 * 60 * 1000;
",2,1,0,0,0,0,0,0,0,4,27,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1714,"                if (avg >= 25) {
",2,1,0,1,3,0,0,0,0,3,16,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1721,"                    return true;
",0,0,0,0,0,1,0,0,0,1,12,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1725,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,40,"        } catch (SecurityException e) {
",2,0,0,1,4,0,0,2,0,4,31,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,41,"            i = null;
",2,0,0,0,0,0,0,0,0,3,9,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,50,"            cacheSize = i.intValue();
",2,0,0,1,2,0,4,0,0,7,25,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,52,"            cacheSize--;
",2,0,0,0,0,0,0,0,0,3,12,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,53,"            int shift = 0;
",2,0,0,0,0,0,0,0,0,2,14,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,54,"            while (cacheSize > 0) {
",2,1,0,1,3,0,0,0,0,3,23,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,55,"                shift++;
",2,0,0,0,0,0,0,0,0,3,8,8,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,56,"                cacheSize >>= 1;
",2,0,0,0,0,0,0,0,0,3,16,8,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,58,"            cacheSize = 1 << shift;
",4,1,0,0,0,0,0,0,0,6,23,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,69,"            return (CachedDateTimeZone)zone;
",2,0,0,1,2,1,0,2,0,4,32,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,95,"        in.defaultReadObject();
",0,0,0,1,2,0,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,96,"        iInfoCache = new Info[cInfoCacheMask + 1];
",4,1,0,1,2,0,0,2,0,8,42,4,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,97,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,103,"        return iZone;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,107,"        return getInfo(instant).getNameKey(instant);
",0,0,0,2,4,1,8,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,115,"        return getInfo(instant).getStandardOffset(instant);
",0,0,0,2,4,1,8,0,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,119,"        return iZone.isFixed();
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,127,"        return iZone.previousTransition(instant);
",0,0,0,1,2,1,6,0,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,135,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,136,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,138,"        if (obj instanceof CachedDateTimeZone) {
",2,0,0,1,3,0,0,2,0,4,40,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,139,"            return iZone.equals(((CachedDateTimeZone)obj).iZone);
",4,0,0,3,6,1,4,2,0,10,53,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,141,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1183,"            return findMatchingRecurrence(instant).getNameKey();
",0,0,0,2,4,1,6,0,0,6,52,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1191,"            return iStandardOffset;
",2,0,0,0,0,1,0,0,0,2,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1195,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1210,"                    start = instant;
",4,0,0,0,0,0,0,0,0,5,16,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1212,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1214,"                start = instant;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1215,"            } catch (ArithmeticException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1217,"                start = instant;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1225,"                    end = instant;
",4,0,0,0,0,0,0,0,0,5,14,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1227,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1229,"                end = instant;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1230,"            } catch (ArithmeticException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1232,"                end = instant;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1241,"            instant++;
",2,0,0,0,0,0,0,0,0,3,10,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1243,"            int standardOffset = iStandardOffset;
",4,0,0,0,0,0,0,0,0,4,37,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1244,"            Recurrence startRecurrence = iStartRecurrence;
",4,0,0,0,0,0,0,2,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1245,"            Recurrence endRecurrence = iEndRecurrence;
",4,0,0,0,0,0,0,2,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1250,"                start = startRecurrence.previous
",2,0,0,0,0,0,4,0,0,7,32,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1252,"                if (instant < 0 && start > 0) {
",4,3,0,1,3,0,0,0,0,7,31,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1254,"                    start = instant;
",4,0,0,0,0,0,0,0,0,5,16,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1262,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1256,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1258,"                start = instant;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1259,"            } catch (ArithmeticException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1261,"                start = instant;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1265,"                end = endRecurrence.previous
",2,0,0,0,0,0,4,0,0,7,28,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1267,"                if (instant < 0 && end > 0) {
",4,3,0,1,3,0,0,0,0,7,29,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1269,"                    end = instant;
",4,0,0,0,0,0,0,0,0,5,14,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1277,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1271,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1273,"                end = instant;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1274,"            } catch (ArithmeticException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1276,"                end = instant;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1279,"            return ((start > end) ? start : end) - 1;
",8,2,0,2,4,1,0,0,0,10,41,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1283,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1284,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1286,"            if (obj instanceof DSTZone) {
",2,0,0,1,3,0,0,2,0,4,29,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1287,"                DSTZone other = (DSTZone)obj;
",4,0,0,1,2,0,0,4,0,8,29,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1288,"                return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1294,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1298,"            writeMillis(out, iStandardOffset);
",0,0,0,1,2,0,6,0,0,6,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1299,"            iStartRecurrence.writeTo(out);
",0,0,0,1,2,0,6,0,0,6,30,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1300,"            iEndRecurrence.writeTo(out);
",0,0,0,1,2,0,6,0,0,6,28,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1301,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1313,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1315,"                start = instant;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1316,"            } catch (ArithmeticException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1318,"                start = instant;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1324,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1326,"                end = instant;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1327,"            } catch (ArithmeticException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1329,"                end = instant;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,25,45,"        return iNameKey;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,25,49,"        return iWallOffset;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,25,53,"        return iStandardOffset;
",2,0,0,0,0,1,0,0,0,2,23,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,25,57,"        return iWallOffset;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,25,61,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,25,65,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,25,69,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,25,77,"        String id = getID();
",2,0,0,1,2,0,2,2,0,6,20,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,25,78,"        if (id.length() == 6 && (id.startsWith(""+"") || id.startsWith(""-""))) {
",0,3,0,5,11,0,12,0,0,17,69,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,25,81,"            return java.util.TimeZone.getTimeZone(""GMT"" + getID());
",6,1,0,2,4,1,4,0,0,12,55,7,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,25,84,"        return new java.util.SimpleTimeZone(iWallOffset, getID());
",8,0,0,2,4,1,2,0,0,10,58,5,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,25,91,"        if (obj instanceof FixedDateTimeZone) {
",2,0,0,1,3,0,0,2,0,4,39,5,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,25,92,"            FixedDateTimeZone other = (FixedDateTimeZone)obj;
",4,0,0,1,2,0,0,4,0,8,49,6,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,25,93,"            return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,25,98,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,963,"        RuleSet() {
",2,0,0,1,3,0,0,0,0,2,11,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,964,"            iRules = new ArrayList<Rule>(10);
",2,0,0,1,2,0,0,4,0,7,33,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,965,"            iUpperYear = Integer.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,7,31,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,966,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,971,"        RuleSet(RuleSet rs) {
",4,0,0,1,3,0,0,2,0,6,21,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,972,"            iStandardOffset = rs.iStandardOffset;
",6,0,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,973,"            iRules = new ArrayList<Rule>(rs.iRules);
",6,0,0,1,2,0,0,4,0,11,40,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,974,"            iInitialNameKey = rs.iInitialNameKey;
",6,0,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,975,"            iInitialSaveMillis = rs.iInitialSaveMillis;
",6,0,0,0,0,0,0,0,0,7,43,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,976,"            iUpperYear = rs.iUpperYear;
",6,0,0,0,0,0,0,0,0,7,27,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,977,"            iUpperOfYear = rs.iUpperOfYear;
",6,0,0,0,0,0,0,0,0,7,31,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,978,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,948,"            long now = DateTimeUtils.currentTimeMillis();
",2,0,0,1,2,0,4,0,0,6,45,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,949,"            YEAR_LIMIT = ISOChronology.getInstanceUTC().year().get(now) + 100;
",2,1,0,3,6,0,10,0,0,14,66,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,950,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,981,"            return iStandardOffset;
",2,0,0,0,0,1,0,0,0,2,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,985,"            iStandardOffset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,33,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,986,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,989,"            iInitialNameKey = nameKey;
",4,0,0,0,0,0,0,0,0,5,26,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,990,"            iInitialSaveMillis = saveMillis;
",4,0,0,0,0,0,0,0,0,5,32,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,991,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,994,"            if (!iRules.contains(rule)) {
",0,0,0,2,5,0,6,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,995,"                iRules.add(rule);
",0,0,0,1,2,0,6,0,0,6,17,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,997,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1000,"            iUpperYear = year;
",4,0,0,0,0,0,0,0,0,5,18,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1001,"            iUpperOfYear = ofYear;
",4,0,0,0,0,0,0,0,0,5,22,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1002,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1011,"            if (iInitialNameKey != null) {
",2,1,0,1,3,0,0,0,0,3,30,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1013,"                return new Transition(firstMillis, iInitialNameKey,
",4,0,0,0,1,1,0,2,0,6,51,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1018,"            ArrayList<Rule> copy = new ArrayList<Rule>(iRules);
",4,0,0,1,2,0,0,8,0,12,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1024,"            long millis = Long.MIN_VALUE;
",6,0,0,0,0,0,0,0,0,6,29,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1025,"            int saveMillis = 0;
",2,0,0,0,0,0,0,0,0,2,19,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1026,"            Transition first = null;
",2,0,0,0,0,0,0,2,0,4,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1029,"            while ((next = nextTransition(millis, saveMillis)) != null) {
",2,1,0,3,7,0,6,0,0,11,61,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1030,"                millis = next.getMillis();
",2,0,0,1,2,0,4,0,0,7,26,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1032,"                if (millis == firstMillis) {
",4,1,0,1,3,0,0,0,0,5,28,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1033,"                    first = new Transition(firstMillis, next);
",6,0,0,1,2,0,0,2,0,9,42,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1034,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1037,"                if (millis > firstMillis) {
",4,1,0,1,3,0,0,0,0,5,27,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1038,"                    if (first == null) {
",2,1,0,1,3,0,0,0,0,3,20,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1042,"                        for (Rule rule : copy) {
",4,0,0,1,3,0,0,2,0,6,24,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1043,"                            if (rule.getSaveMillis() == 0) {
",0,1,0,2,5,0,4,0,0,5,32,13,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1044,"                                first = new Transition(firstMillis, rule, iStandardOffset);
",8,0,0,1,2,0,0,2,0,11,59,15,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1045,"                                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1047,"                        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1049,"                    if (first == null) {
",2,1,0,1,3,0,0,0,0,3,20,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1053,"                        first = new Transition(firstMillis, next.getNameKey(),
",4,0,0,1,3,0,4,2,0,11,54,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1061,"                first = new Transition(firstMillis, next);
",6,0,0,1,2,0,0,2,0,9,42,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1063,"                saveMillis = next.getSaveMillis();
",2,0,0,1,2,0,4,0,0,7,34,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1066,"            iRules = copy;
",4,0,0,0,0,0,0,0,0,5,14,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1067,"            return first;
",2,0,0,0,0,1,0,0,0,2,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1082,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1085,"            Rule nextRule = null;
",2,0,0,0,0,0,0,2,0,4,21,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1086,"            long nextMillis = Long.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,6,33,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1088,"            Iterator<Rule> it = iRules.iterator();
",2,0,0,1,2,0,4,4,0,10,38,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1089,"            while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1090,"                Rule rule = it.next();
",2,0,0,1,2,0,4,2,0,8,22,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1091,"                long next = rule.next(instant, iStandardOffset, saveMillis);
",2,0,0,1,2,0,10,0,0,12,60,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1092,"                if (next <= instant) {
",4,1,0,1,3,0,0,0,0,5,22,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1093,"                    it.remove();
",0,0,0,1,2,0,4,0,0,4,12,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1094,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1098,"                if (next <= nextMillis) {
",4,1,0,1,3,0,0,0,0,5,25,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1100,"                    nextRule = rule;
",4,0,0,0,0,0,0,0,0,5,16,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1101,"                    nextMillis = next;
",4,0,0,0,0,0,0,0,0,5,18,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1103,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1105,"            if (nextRule == null) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1106,"                return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1110,"            if (chrono.year().get(nextMillis) >= YEAR_LIMIT) {
",2,1,0,3,7,0,8,0,0,11,50,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1111,"                return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1115,"            if (iUpperYear < Integer.MAX_VALUE) {
",6,1,0,1,3,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1116,"                long upperMillis =
",2,0,0,0,0,0,0,0,0,2,18,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1118,"                if (nextMillis >= upperMillis) {
",4,1,0,1,3,0,0,0,0,5,32,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1120,"                    return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1124,"            return new Transition(nextMillis, nextRule, iStandardOffset);
",6,0,0,1,2,1,0,2,0,8,61,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1131,"            if (iUpperYear == Integer.MAX_VALUE) {
",6,1,0,1,3,0,0,0,0,7,38,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1132,"                return Long.MAX_VALUE;
",4,0,0,0,0,1,0,0,0,4,22,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1134,"            return iUpperOfYear.setInstant(iUpperYear, iStandardOffset, saveMillis);
",0,0,0,1,2,1,10,0,0,10,72,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1141,"            if (iRules.size() == 2) {
",0,1,0,2,5,0,4,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1142,"                Rule startRule = iRules.get(0);
",2,0,0,1,2,0,4,2,0,8,31,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1143,"                Rule endRule = iRules.get(1);
",2,0,0,1,2,0,4,2,0,8,29,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1144,"                if (startRule.getToYear() == Integer.MAX_VALUE &&
",4,2,0,1,3,0,4,0,0,10,49,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1154,"                    return new DSTZone(id, iStandardOffset,
",4,0,0,0,1,1,0,2,0,6,39,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,1158,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,883,"        Transition(long millis, Transition tr) {
",6,0,0,1,3,0,0,2,0,8,40,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,884,"            iMillis = millis;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,885,"            iNameKey = tr.iNameKey;
",6,0,0,0,0,0,0,0,0,7,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,886,"            iWallOffset = tr.iWallOffset;
",6,0,0,0,0,0,0,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,887,"            iStandardOffset = tr.iStandardOffset;
",6,0,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,888,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,890,"        Transition(long millis, Rule rule, int standardOffset) {
",8,0,0,1,3,0,0,2,0,10,56,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,891,"            iMillis = millis;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,892,"            iNameKey = rule.getNameKey();
",2,0,0,1,2,0,4,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,893,"            iWallOffset = standardOffset + rule.getSaveMillis();
",4,1,0,1,2,0,4,0,0,10,52,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,894,"            iStandardOffset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,33,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,895,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,898,"                   int wallOffset, int standardOffset) {
",4,0,0,0,2,0,0,0,0,4,37,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,899,"            iMillis = millis;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,900,"            iNameKey = nameKey;
",4,0,0,0,0,0,0,0,0,5,19,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,901,"            iWallOffset = wallOffset;
",4,0,0,0,0,0,0,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,902,"            iStandardOffset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,33,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,903,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,906,"            return iMillis;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,910,"            return iNameKey;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,914,"            return iWallOffset;
",2,0,0,0,0,1,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,918,"            return iStandardOffset;
",2,0,0,0,0,1,0,0,0,2,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,922,"            return iWallOffset - iStandardOffset;
",4,1,0,0,0,1,0,0,0,5,37,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,929,"            if (other == null) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,930,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,932,"            return iMillis > other.iMillis &&
",6,2,0,0,0,1,0,0,0,8,33,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,506,"                throw new IllegalArgumentException(""Unknown mode: "" + mode);
",2,1,0,1,2,0,0,2,0,6,60,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,522,"            if (iMode == 'w') {
",2,1,0,1,3,0,0,0,0,4,19,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,523,"                offset = standardOffset + saveMillis;
",6,1,0,0,0,0,0,0,0,8,37,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,524,"            } else if (iMode == 's') {
",2,1,0,1,4,0,0,0,0,4,26,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,525,"                offset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,24,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,527,"                offset = 0;
",2,0,0,0,0,0,0,0,0,3,11,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,530,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,531,"            long millis = chrono.year().set(0, year);
",2,0,0,2,4,0,8,0,0,10,41,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,532,"            millis = chrono.monthOfYear().set(millis, iMonthOfYear);
",2,0,0,2,4,0,10,0,0,13,56,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,533,"            millis = chrono.millisOfDay().set(millis, iMillisOfDay);
",2,0,0,2,4,0,10,0,0,13,56,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,534,"            millis = setDayOfMonth(chrono, millis);
",2,0,0,1,2,0,6,0,0,9,39,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,536,"            if (iDayOfWeek != 0) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,537,"                millis = setDayOfWeek(chrono, millis);
",2,0,0,1,2,0,6,0,0,9,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,541,"            return millis - offset;
",4,1,0,0,0,1,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,550,"                offset = standardOffset + saveMillis;
",6,1,0,0,0,0,0,0,0,8,37,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,554,"                offset = 0;
",2,0,0,0,0,0,0,0,0,3,11,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,568,"                if (next <= instant) {
",4,1,0,1,3,0,0,0,0,5,22,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,569,"                    next = chrono.year().add(next, 1);
",2,0,0,2,4,0,8,0,0,11,34,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,570,"                    next = setDayOfMonthNext(chrono, next);
",2,0,0,1,2,0,6,0,0,9,39,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,591,"            if (iMode == 'w') {
",2,1,0,1,3,0,0,0,0,4,19,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,592,"                offset = standardOffset + saveMillis;
",6,1,0,0,0,0,0,0,0,8,37,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,593,"            } else if (iMode == 's') {
",2,1,0,1,4,0,0,0,0,4,26,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,594,"                offset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,24,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,596,"                offset = 0;
",2,0,0,0,0,0,0,0,0,3,11,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,600,"            instant += offset;
",4,0,0,0,0,0,0,0,0,5,18,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,602,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,603,"            long prev = chrono.monthOfYear().set(instant, iMonthOfYear);
",2,0,0,2,4,0,10,0,0,12,60,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,605,"            prev = chrono.millisOfDay().set(prev, 0);
",2,0,0,2,4,0,8,0,0,11,41,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,606,"            prev = chrono.millisOfDay().add(prev, iMillisOfDay);
",2,0,0,2,4,0,10,0,0,13,52,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,607,"            prev = setDayOfMonthPrevious(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,43,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,609,"            if (iDayOfWeek == 0) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,610,"                if (prev >= instant) {
",4,1,0,1,3,0,0,0,0,5,22,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,611,"                    prev = chrono.year().add(prev, -1);
",2,0,0,2,4,0,8,0,0,12,35,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,612,"                    prev = setDayOfMonthPrevious(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,43,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,615,"                prev = setDayOfWeek(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,34,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,616,"                if (prev >= instant) {
",4,1,0,1,3,0,0,0,0,5,22,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,617,"                    prev = chrono.year().add(prev, -1);
",2,0,0,2,4,0,8,0,0,12,35,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,618,"                    prev = chrono.monthOfYear().set(prev, iMonthOfYear);
",2,0,0,2,4,0,10,0,0,13,52,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,619,"                    prev = setDayOfMonthPrevious(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,43,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,620,"                    prev = setDayOfWeek(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,34,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,625,"            return prev - offset;
",4,1,0,0,0,1,0,0,0,5,21,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,629,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,630,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,632,"            if (obj instanceof OfYear) {
",2,0,0,1,3,0,0,2,0,4,28,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,633,"                OfYear other = (OfYear)obj;
",4,0,0,1,2,0,0,4,0,8,27,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,634,"                return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,642,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,659,"            out.writeByte(iMode);
",0,0,0,1,2,0,6,0,0,6,21,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,660,"            out.writeByte(iMonthOfYear);
",0,0,0,1,2,0,6,0,0,6,28,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,661,"            out.writeByte(iDayOfMonth);
",0,0,0,1,2,0,6,0,0,6,27,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,662,"            out.writeByte(iDayOfWeek);
",0,0,0,1,2,0,6,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,663,"            out.writeBoolean(iAdvance);
",0,0,0,1,2,0,6,0,0,6,27,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,664,"            writeMillis(out, iMillisOfDay);
",0,0,0,1,2,0,6,0,0,6,31,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,665,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,673,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,674,"                if (iMonthOfYear == 2 && iDayOfMonth == 29) {
",4,3,0,1,3,0,0,0,0,7,45,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,675,"                    while (chrono.year().isLeap(next) == false) {
",0,1,0,3,7,0,8,0,0,10,45,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,676,"                        next = chrono.year().add(next, 1);
",2,0,0,2,4,0,8,0,0,11,34,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,678,"                    next = setDayOfMonth(chrono, next);
",2,0,0,1,2,0,6,0,0,9,35,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,680,"                    throw e;
",2,0,0,0,0,0,0,0,0,2,8,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,691,"                prev = setDayOfMonth(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,35,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,701,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,692,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,693,"                if (iMonthOfYear == 2 && iDayOfMonth == 29) {
",4,3,0,1,3,0,0,0,0,7,45,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,694,"                    while (chrono.year().isLeap(prev) == false) {
",0,1,0,3,7,0,8,0,0,10,45,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,695,"                        prev = chrono.year().add(prev, -1);
",2,0,0,2,4,0,8,0,0,12,35,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,697,"                    prev = setDayOfMonth(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,35,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,699,"                    throw e;
",2,0,0,0,0,0,0,0,0,2,8,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,702,"            return prev;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,707,"                instant = chrono.dayOfMonth().set(instant, iDayOfMonth);
",2,0,0,2,4,0,10,0,0,13,56,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,721,"                    if (daysToAdd < 0) {
",2,1,0,1,3,0,0,0,0,3,20,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,722,"                        daysToAdd += 7;
",2,0,0,0,0,0,0,0,0,3,15,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,816,"        Rule(Recurrence recurrence, int fromYear, int toYear) {
",8,0,0,1,3,0,0,2,0,10,55,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,817,"            iRecurrence = recurrence;
",4,0,0,0,0,0,0,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,818,"            iFromYear = fromYear;
",4,0,0,0,0,0,0,0,0,5,21,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,819,"            iToYear = toYear;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,820,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,823,"            return iFromYear;
",2,0,0,0,0,1,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,827,"            return iToYear;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,831,"            return iRecurrence.getOfYear();
",0,0,0,1,2,1,4,0,0,4,31,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,835,"            return iRecurrence.getNameKey();
",0,0,0,1,2,1,4,0,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,839,"            return iRecurrence.getSaveMillis();
",0,0,0,1,2,1,4,0,0,4,35,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,843,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,845,"            final int wallOffset = standardOffset + saveMillis;
",6,1,0,0,0,1,0,0,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,846,"            long testInstant = instant;
",4,0,0,0,0,0,0,0,0,4,27,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,849,"            if (instant == Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,32,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,850,"                year = Integer.MIN_VALUE;
",6,0,0,0,0,0,0,0,0,7,25,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,852,"                year = chrono.year().get(instant + wallOffset);
",6,1,0,2,4,0,6,0,0,14,47,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,855,"            if (year < iFromYear) {
",4,1,0,1,3,0,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,857,"                testInstant = chrono.year().set(0, iFromYear) - wallOffset;
",4,1,0,2,4,0,8,0,0,14,59,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,860,"                testInstant -= 1;
",2,0,0,0,0,0,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,863,"            long next = iRecurrence.next(testInstant, standardOffset, saveMillis);
",2,0,0,1,2,0,10,0,0,12,70,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,865,"            if (next > instant) {
",4,1,0,1,3,0,0,0,0,5,21,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,866,"                year = chrono.year().get(next + wallOffset);
",6,1,0,2,4,0,6,0,0,14,44,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,867,"                if (year > iToYear) {
",4,1,0,1,3,0,0,0,0,5,21,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,869,"                    next = instant;
",4,0,0,0,0,0,0,0,0,5,15,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,873,"            return next;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,194,"            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {
",8,3,0,1,3,0,0,0,0,11,59,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,195,"                if (iNameKey == null) {
",2,1,0,1,3,0,0,0,0,3,23,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,196,"                    iNameKey = iZoneRef.getNameKey(iPeriodStart);
",2,0,0,1,2,0,6,0,0,9,45,9,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,198,"                return iNameKey;
",2,0,0,0,0,1,0,0,0,2,16,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,200,"            return iNextInfo.getNameKey(millis);
",0,0,0,1,2,1,6,0,0,6,36,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,214,"            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {
",8,3,0,1,3,0,0,0,0,11,59,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,215,"                if (iStandardOffset == Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,43,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,216,"                    iStandardOffset = iZoneRef.getStandardOffset(iPeriodStart);
",2,0,0,1,2,0,6,0,0,9,59,9,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,218,"                return iStandardOffset;
",2,0,0,0,0,1,0,0,0,2,23,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,25,220,"            return iNextInfo.getStandardOffset(millis);
",0,0,0,1,2,1,6,0,0,6,43,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,754,"            return iOfYear;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,768,"            return iOfYear.previous(instant, standardOffset, saveMillis);
",0,0,0,1,2,1,10,0,0,10,61,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,772,"            return iNameKey;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,780,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,781,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,783,"            if (obj instanceof Recurrence) {
",2,0,0,1,3,0,0,2,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,784,"                Recurrence other = (Recurrence)obj;
",4,0,0,1,2,0,0,4,0,8,35,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,785,"                return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,790,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,794,"            iOfYear.writeTo(out);
",0,0,0,1,2,0,6,0,0,6,21,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,795,"            out.writeUTF(iNameKey);
",0,0,0,1,2,0,6,0,0,6,23,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,796,"            writeMillis(out, iSaveMillis);
",0,0,0,1,2,0,6,0,0,6,30,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,797,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,800,"            return new Recurrence(iOfYear, nameKey, iSaveMillis);
",6,0,0,1,2,1,0,2,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,25,804,"            return rename((iNameKey + appendNameKey).intern());
",4,1,0,3,6,1,4,0,0,9,51,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,56,"    public ZoneInfoProvider(File fileDir) throws IOException {
",6,0,0,1,3,1,0,2,0,9,58,2,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,57,"        if (fileDir == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,58,"            throw new IllegalArgumentException(""No file directory provided"");
",0,0,0,1,2,0,0,2,0,3,65,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,60,"        if (!fileDir.exists()) {
",0,0,0,2,5,0,4,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,61,"            throw new IOException(""File directory doesn't exist: "" + fileDir);
",2,1,0,1,2,0,0,2,0,6,66,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,63,"        if (!fileDir.isDirectory()) {
",0,0,0,2,5,0,4,0,0,5,29,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,64,"            throw new IOException(""File doesn't refer to a directory: "" + fileDir);
",2,1,0,1,2,0,0,2,0,6,71,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,67,"        iFileDir = fileDir;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,68,"        iResourcePath = null;
",2,0,0,0,0,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,69,"        iLoader = null;
",2,0,0,0,0,0,0,0,0,3,15,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,71,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));
",2,0,0,2,4,0,4,0,0,8,60,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,72,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,96,"        this(resourcePath, loader, true);
",4,0,0,1,2,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,97,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,108,"            throw new IllegalArgumentException(""No resource path provided"");
",0,0,0,1,2,0,0,2,0,3,64,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,137,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,142,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,158,"            return loadZoneData(id);
",0,0,0,1,2,1,4,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,162,"        return getZone((String)obj);
",2,0,0,2,4,1,2,2,0,6,28,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,183,"        Thread t = Thread.currentThread();
",2,0,0,1,2,0,4,2,0,8,34,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,184,"        t.getThreadGroup().uncaughtException(t, ex);
",0,0,0,2,4,0,10,0,0,10,44,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,185,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,197,"            in = new FileInputStream(new File(iFileDir, name));
",6,0,0,2,4,0,0,4,0,11,51,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,203,"                in = ClassLoader.getSystemResourceAsStream(path);
",2,0,0,1,2,0,6,0,0,9,49,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,206,"                StringBuffer buf = new StringBuffer(40)
",2,0,0,1,2,0,0,4,0,6,39,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,211,"                throw new IOException(buf.toString());
",0,0,0,2,4,0,4,2,0,6,38,9,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,239,"            } catch (IOException e) {
",2,0,0,1,4,0,0,2,0,4,25,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,230,"        } catch (IOException e) {
",2,0,0,1,4,0,0,2,0,4,25,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,231,"            uncaughtException(e);
",0,0,0,1,2,0,4,0,0,4,21,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,232,"            iZoneInfoMap.remove(id);
",0,0,0,1,2,0,6,0,0,6,24,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,233,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,235,"            try {
",0,0,0,0,1,0,0,0,0,0,5,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,259,"            } catch (IOException e) {
",2,0,0,1,4,0,0,2,0,4,25,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,261,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,257,"            try {
",0,0,0,0,1,0,0,0,0,0,5,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,285,"            } catch (ArrayIndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,44,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,25,286,"                throw new IOException(""Corrupt zone info map"");
",0,0,0,1,2,0,0,2,0,3,47,10,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1926,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1927,"            iInstant = instant;
",4,0,0,0,0,0,0,0,0,5,19,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1928,"            iField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1929,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1935,"            oos.writeObject(iInstant);
",0,0,0,1,2,0,6,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1936,"            oos.writeObject(iField.getType());
",0,0,0,2,4,0,8,0,0,8,34,6,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1937,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1943,"            iInstant = (DateTime) oos.readObject();
",2,0,0,2,4,0,4,2,0,9,39,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1944,"            DateTimeFieldType type = (DateTimeFieldType) oos.readObject();
",2,0,0,2,4,0,4,4,0,10,62,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1945,"            iField = type.getField(iInstant.getChronology());
",2,0,0,2,4,0,8,0,0,11,49,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1946,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1955,"            return iField;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1964,"            return iInstant.getMillis();
",0,0,0,1,2,1,4,0,0,4,28,6,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1974,"            return iInstant.getChronology();
",0,0,0,1,2,1,4,0,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/DateTime,25,1983,"            return iInstant;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,2000,"            return iInstant.withMillis(iField.add(iInstant.getMillis(), value));
",0,0,0,3,6,1,14,0,0,14,68,6,0.00000,0
defect4j,time,org/joda/time/DateTime,25,2016,"            return iInstant.withMillis(iField.add(iInstant.getMillis(), value));
",0,0,0,3,6,1,14,0,0,14,68,6,0.00000,0
defect4j,time,org/joda/time/DateTime,25,2034,"            return iInstant.withMillis(iField.addWrapField(iInstant.getMillis(), value));
",0,0,0,3,6,1,14,0,0,14,77,6,0.00000,0
defect4j,time,org/joda/time/DateTime,25,2051,"            return iInstant.withMillis(iField.set(iInstant.getMillis(), value));
",0,0,0,3,6,1,14,0,0,14,68,6,0.00000,0
defect4j,time,org/joda/time/DateTime,25,2068,"            return iInstant.withMillis(iField.set(iInstant.getMillis(), text, locale));
",0,0,0,3,6,1,16,0,0,16,75,6,0.00000,0
defect4j,time,org/joda/time/DateTime,25,2084,"            return setCopy(text, null);
",0,0,0,1,2,1,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,25,2104,"            return setCopy(getMaximumValue());
",0,0,0,2,4,1,4,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/DateTime,25,2117,"            return setCopy(getMinimumValue());
",0,0,0,2,4,1,4,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/DateTime,25,2127,"            return iInstant.withMillis(iField.roundFloor(iInstant.getMillis()));
",0,0,0,3,6,1,12,0,0,12,68,6,0.00000,0
defect4j,time,org/joda/time/DateTime,25,2136,"            return iInstant.withMillis(iField.roundCeiling(iInstant.getMillis()));
",0,0,0,3,6,1,12,0,0,12,70,6,0.00000,0
defect4j,time,org/joda/time/DateTime,25,2146,"            return iInstant.withMillis(iField.roundHalfFloor(iInstant.getMillis()));
",0,0,0,3,6,1,12,0,0,12,72,6,0.00000,0
defect4j,time,org/joda/time/DateTime,25,2156,"            return iInstant.withMillis(iField.roundHalfCeiling(iInstant.getMillis()));
",0,0,0,3,6,1,12,0,0,12,74,6,0.00000,0
defect4j,time,org/joda/time/DateTime,25,2167,"            return iInstant.withMillis(iField.roundHalfEven(iInstant.getMillis()));
",0,0,0,3,6,1,12,0,0,12,71,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,25,264,"            chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,5,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,25,266,"            switch (iOrdinal) {
",2,0,0,1,3,0,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,25,268,"                    return chronology.eras();
",0,0,0,1,2,1,4,0,0,4,25,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,25,270,"                    return chronology.centuries();
",0,0,0,1,2,1,4,0,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,25,272,"                    return chronology.weekyears();
",0,0,0,1,2,1,4,0,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,25,274,"                    return chronology.years();
",0,0,0,1,2,1,4,0,0,4,26,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,25,276,"                    return chronology.months();
",0,0,0,1,2,1,4,0,0,4,27,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,25,278,"                    return chronology.weeks();
",0,0,0,1,2,1,4,0,0,4,26,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,25,280,"                    return chronology.days();
",0,0,0,1,2,1,4,0,0,4,25,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,25,282,"                    return chronology.halfdays();
",0,0,0,1,2,1,4,0,0,4,29,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,25,284,"                    return chronology.hours();
",0,0,0,1,2,1,4,0,0,4,26,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,25,286,"                    return chronology.minutes();
",0,0,0,1,2,1,4,0,0,4,28,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,25,288,"                    return chronology.seconds();
",0,0,0,1,2,1,4,0,0,4,28,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,25,290,"                    return chronology.millis();
",0,0,0,1,2,1,4,0,0,4,27,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,25,293,"                    throw new InternalError();
",0,0,0,1,2,0,0,2,0,2,26,8,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,25,303,"            switch (iOrdinal) {
",2,0,0,1,3,0,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,25,305,"                    return ERAS_TYPE;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,25,307,"                    return CENTURIES_TYPE;
",2,0,0,0,0,1,0,0,0,2,22,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,25,309,"                    return WEEKYEARS_TYPE;
",2,0,0,0,0,1,0,0,0,2,22,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,25,311,"                    return YEARS_TYPE;
",2,0,0,0,0,1,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,25,313,"                    return MONTHS_TYPE;
",2,0,0,0,0,1,0,0,0,2,19,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,25,315,"                    return WEEKS_TYPE;
",2,0,0,0,0,1,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,25,317,"                    return DAYS_TYPE;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,25,319,"                    return HALFDAYS_TYPE;
",2,0,0,0,0,1,0,0,0,2,21,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,25,321,"                    return HOURS_TYPE;
",2,0,0,0,0,1,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,25,323,"                    return MINUTES_TYPE;
",2,0,0,0,0,1,0,0,0,2,20,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,25,325,"                    return SECONDS_TYPE;
",2,0,0,0,0,1,0,0,0,2,20,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,25,327,"                    return MILLIS_TYPE;
",2,0,0,0,0,1,0,0,0,2,19,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,25,330,"                    return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,1234,"        Stub(String id) {
",4,0,0,1,3,0,0,2,0,6,17,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,1235,"            iID = id;
",4,0,0,0,0,0,0,0,0,5,9,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,1236,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,1239,"            out.writeUTF(iID);
",0,0,0,1,2,0,6,0,0,6,18,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,1240,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,1243,"            iID = in.readUTF();
",2,0,0,1,2,0,4,0,0,7,19,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,1244,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,25,1247,"            return forID(iID);
",0,0,0,1,2,1,4,0,0,4,18,6,0.00000,0
