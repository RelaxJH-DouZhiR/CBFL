dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2519,"            buf.append(displayZone != null ? displayZone.getID() : """");
",2,1,0,2,4,0,8,0,0,12,59,6,0.14286,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2520,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2537,"            return MAX_LENGTH;
",2,0,0,0,0,1,0,0,0,2,18,5,0.14286,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2541,"            String str = text.substring(position);
",2,0,0,1,2,0,6,2,0,10,38,5,0.12500,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2542,"            for (String id : ALL_IDS) {
",4,0,0,1,3,0,0,2,0,6,27,5,0.12500,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2543,"                if (str.startsWith(id)) {
",0,0,0,2,5,0,6,0,0,6,25,8,0.12500,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2544,"                    bucket.setZone(DateTimeZone.forID(id));
",0,0,0,2,4,0,10,0,0,10,39,10,0.12500,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2545,"                    return position + id.length();
",2,1,0,1,2,1,4,0,0,7,30,9,0.12500,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2547,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12500,1
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1030,"        return append0(TimeZoneId.INSTANCE, TimeZoneId.INSTANCE);
",8,0,0,1,2,1,2,0,0,10,57,5,0.11111,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2498,"    static enum TimeZoneId
",2,0,0,0,0,1,0,0,0,3,22,2,0.11111,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2501,"        INSTANCE;
",2,0,0,0,0,0,0,0,0,2,9,3,0.11111,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2502,"        static final Set<String> ALL_IDS = DateTimeZone.getAvailableIDs();
",2,0,0,1,2,2,4,4,0,12,66,3,0.11111,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2505,"            int max = 0;
",2,0,0,0,0,0,0,0,0,2,12,6,0.11111,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2506,"            for (String id : ALL_IDS) {
",4,0,0,1,3,0,0,2,0,6,27,5,0.11111,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2507,"                max = Math.max(max, id.length());
",2,0,0,2,4,0,10,0,0,13,33,7,0.11111,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2508,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2509,"            MAX_LENGTH = max;
",4,0,0,0,0,0,0,0,0,5,17,5,0.11111,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2510,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2513,"            return MAX_LENGTH;
",2,0,0,0,0,1,0,0,0,2,18,5,0.11111,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,159,"        iSavedState = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.10000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,160,"        iZone = zone;
",4,0,0,0,0,0,0,0,0,5,13,4,0.10000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,161,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.10000,0
defect4j,time,org/joda/time/DateTimeZone,20,374,"        return cAvailableIDs;
",2,0,0,0,0,1,0,0,0,2,21,4,0.09091,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1094,"        DateTimeFormat.appendPatternTo(this, pattern);
",0,0,0,1,2,0,6,0,0,6,46,5,0.07143,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1095,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.07143,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,377,"        parsePatternTo(builder, pattern);
",0,0,0,1,2,0,6,0,0,6,33,5,0.07143,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,378,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07143,0
defect4j,time,org/joda/time/DateTime,20,407,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,0.06250,0
defect4j,time,org/joda/time/DateTime,20,409,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06250,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,866,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));
",0,0,0,2,4,0,8,2,0,10,81,5,0.05556,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,508,"                builder.appendMinuteOfHour(tokenLen);
",0,0,0,1,2,0,6,0,0,6,37,8,0.01639,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,509,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.01639,0
defect4j,time,org/joda/time/format/FormatUtils,20,373,"        return ""Invalid format: \"""" + sampleText + ""\"" is malformed at \"""" +
",2,1,0,0,0,1,0,0,0,5,68,4,0.01316,0
defect4j,time,org/joda/time/format/FormatUtils,20,369,"        if (errorPos >= text.length()) {
",2,1,0,2,5,0,4,0,0,7,32,4,0.01235,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,457,"                        indexRef[0]++;
",0,0,1,1,2,0,0,0,0,3,14,11,0.01220,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,458,"                        if (isNumericToken(parseToken(pattern, indexRef))) {
",0,0,0,3,7,0,8,0,0,8,52,12,0.01220,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,462,"                        indexRef[0]--;
",0,0,1,1,2,0,0,0,0,3,14,11,0.01220,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,499,"                builder.appendHourOfDay(tokenLen);
",0,0,0,1,2,0,6,0,0,6,34,8,0.01163,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,500,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.01163,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,662,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.01149,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,632,"        int tokenLen = token.length();
",2,0,0,1,2,0,4,0,0,6,30,5,0.01136,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,633,"        if (tokenLen > 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.01136,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,634,"            char c = token.charAt(0);
",2,0,0,1,2,0,4,0,0,6,25,7,0.01136,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,635,"            switch (c) {
",2,0,0,1,3,0,0,0,0,2,12,6,0.01136,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,470,"                        builder.appendYear(tokenLen, maxDigits);
",0,0,0,1,2,0,8,0,0,8,40,11,0.01099,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,471,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.01099,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,453,"                    int maxDigits = 9;
",2,0,0,0,0,0,0,0,0,2,18,10,0.01020,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,456,"                    if (i + 1 < length) {
",4,2,0,1,3,0,0,0,0,6,21,9,0.01020,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,465,"                    switch (c) {
",2,0,0,1,3,0,0,0,0,2,12,9,0.01020,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,477,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.01020,0
defect4j,time,org/joda/time/format/FormatUtils,20,357,"        int sampleLen = errorPos + 32;
",4,1,0,0,0,0,0,0,0,5,30,5,0.00990,0
defect4j,time,org/joda/time/format/FormatUtils,20,359,"        if (text.length() <= sampleLen + 3) {
",2,2,0,2,5,0,4,0,0,8,37,4,0.00990,0
defect4j,time,org/joda/time/format/FormatUtils,20,360,"            sampleText = text;
",4,0,0,0,0,0,0,0,0,5,18,6,0.00990,0
defect4j,time,org/joda/time/format/FormatUtils,20,365,"        if (errorPos <= 0) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00990,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,424,"                if (tokenLen == 2) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.00917,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,848,"            if (newPos >= text.length()) {
",2,1,0,2,5,0,4,0,0,7,30,6,0.00901,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,842,"        DateTimeParser parser = requireParser();
",2,0,0,1,2,0,2,2,0,6,40,4,0.00855,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,844,"        Chronology chrono = selectChronology(null);
",2,0,0,1,2,0,2,2,0,7,43,4,0.00855,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,845,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);
",10,0,0,1,2,0,0,4,0,14,101,4,0.00855,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,846,"        int newPos = parser.parseInto(bucket, text, 0);
",2,0,0,1,2,0,8,0,0,10,47,5,0.00855,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,847,"        if (newPos >= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00855,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,486,"                    builder.appendMonthOfYear(tokenLen);
",0,0,0,1,2,0,6,0,0,6,36,10,0.00575,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,488,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00575,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,490,"                builder.appendDayOfMonth(tokenLen);
",0,0,0,1,2,0,6,0,0,6,35,8,0.00546,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,491,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00546,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,479,"                if (tokenLen >= 3) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.00500,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,551,"                    builder.appendLiteral(sub.charAt(0));
",0,0,0,2,4,0,8,0,0,8,37,10,0.00444,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,613,"                    i--;
",2,0,0,0,0,0,0,0,0,3,4,11,0.00442,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,614,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00442,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,549,"                String sub = token.substring(1);
",2,0,0,1,2,0,4,2,0,8,32,7,0.00441,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,550,"                if (sub.length() == 1) {
",0,1,0,2,5,0,4,0,0,5,24,7,0.00441,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,596,"            buf.append('\'');
",0,0,0,1,2,0,4,0,0,5,17,7,0.00441,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,598,"            boolean inLiteral = false;
",2,0,0,0,0,0,0,0,0,3,26,7,0.00441,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,600,"            for (; i < length; i++) {
",6,1,0,1,3,0,0,0,0,8,25,6,0.00441,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,601,"                c = pattern.charAt(i);
",2,0,0,1,2,0,6,0,0,9,22,8,0.00441,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,603,"                if (c == '\'') {
",2,1,0,1,3,0,0,0,0,4,16,8,0.00441,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,611,"                } else if (!inLiteral &&
",2,1,0,0,2,0,0,0,0,4,24,9,0.00441,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,616,"                    buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,12,0.00441,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,588,"                    buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,11,0.00426,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,589,"                    i++;
",2,0,0,0,0,0,0,0,0,3,4,10,0.00426,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,593,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00426,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,586,"                char peek = pattern.charAt(i + 1);
",4,1,0,1,2,0,4,0,0,9,34,9,0.00413,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,587,"                if (peek == c) {
",4,1,0,1,3,0,0,0,0,5,16,8,0.00413,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,563,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00380,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,583,"            buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,7,0.00380,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,585,"            while (i + 1 < length) {
",4,2,0,1,3,0,0,0,0,6,24,6,0.00380,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,400,"        int length = pattern.length();
",2,0,0,1,2,0,4,0,0,6,30,5,0.00379,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,401,"        int[] indexRef = new int[1];
",2,0,0,2,4,0,0,0,0,2,28,5,0.00379,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,403,"        for (int i=0; i<length; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00379,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,404,"            indexRef[0] = i;
",2,0,1,1,2,0,0,0,0,5,16,6,0.00379,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,405,"            String token = parseToken(pattern, indexRef);
",2,0,0,1,2,0,6,2,0,10,45,6,0.00379,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,406,"            i = indexRef[0];
",2,0,1,1,2,0,0,0,0,5,16,6,0.00379,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,408,"            int tokenLen = token.length();
",2,0,0,1,2,0,4,0,0,6,30,7,0.00379,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,409,"            if (tokenLen == 0) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.00379,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,412,"            char c = token.charAt(0);
",2,0,0,1,2,0,4,0,0,6,25,7,0.00379,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,414,"            switch (c) {
",2,0,0,1,3,0,0,0,0,2,12,6,0.00379,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,574,"        StringBuffer buf = new StringBuffer();
",2,0,0,1,2,0,0,4,0,6,38,4,0.00379,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,576,"        int i = indexRef[0];
",2,0,1,1,2,0,0,0,0,4,20,5,0.00379,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,577,"        int length = pattern.length();
",2,0,0,1,2,0,4,0,0,6,30,5,0.00379,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,579,"        char c = pattern.charAt(i);
",2,0,0,1,2,0,6,0,0,8,27,5,0.00379,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,580,"        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {
",8,7,0,1,3,0,0,0,0,19,51,4,0.00379,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,621,"        indexRef[0] = i;
",2,0,1,1,2,0,0,0,0,5,16,4,0.00379,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,622,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00379,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,147,"    private static final Map<String, DateTimeFormatter> cPatternedCache = new HashMap<String, DateTimeFormatter>(7);
",2,0,0,1,2,3,0,12,0,17,112,2,0.00375,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,149,"    private static final DateTimeFormatter[] cStyleCache = new DateTimeFormatter[25];
",2,0,0,2,4,3,0,4,0,9,81,2,0.00375,0
defect4j,time,org/joda/time/base/BaseDateTime,20,225,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00368,0
defect4j,time,org/joda/time/base/BaseDateTime,20,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,
",8,0,0,0,1,0,0,0,0,8,46,4,0.00365,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1221,"            return position + 1;
",2,1,0,0,0,1,0,0,0,3,20,5,0.00362,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1206,"            char a = text.charAt(position);
",2,0,0,1,2,0,6,0,0,8,31,6,0.00333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1207,"            char b = iValue;
",4,0,0,0,0,0,0,0,0,4,16,6,0.00333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1209,"            if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,5,0.00333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1345,"                    value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';
",8,5,0,4,8,0,4,0,0,20,63,9,0.00330,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1202,"            if (position >= text.length()) {
",2,1,0,2,5,0,4,0,0,7,32,5,0.00330,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1321,"                length++;
",2,0,0,0,0,0,0,0,0,3,9,7,0.00329,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1322,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00329,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1329,"            if (length >= 9) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00329,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1334,"                int i = position;
",4,0,0,0,0,0,0,0,0,4,17,8,0.00329,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1335,"                if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,7,0.00329,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1339,"                    value = text.charAt(i++) - '0';
",4,1,0,1,2,0,4,0,0,12,31,9,0.00329,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1342,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00329,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1343,"                position += length;
",4,0,0,0,0,0,0,0,0,5,19,7,0.00329,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1344,"                while (i < position) {
",4,1,0,1,3,0,0,0,0,5,22,7,0.00329,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1347,"                if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,7,0.00329,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1352,"            bucket.saveField(iFieldType, value);
",0,0,0,1,2,0,8,0,0,8,36,6,0.00329,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1353,"            return position;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00329,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,246,"        saveField(new SavedField(fieldType.getField(iChrono), value));
",2,0,0,3,6,0,8,2,0,12,62,5,0.00326,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,247,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00326,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,261,"        SavedField[] savedFields = iSavedFields;
",4,0,0,1,2,0,0,2,0,6,40,4,0.00326,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,262,"        int savedFieldsCount = iSavedFieldsCount;
",4,0,0,0,0,0,0,0,0,4,41,5,0.00326,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,264,"        if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {
",8,2,0,1,3,0,0,0,0,10,67,4,0.00326,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,273,"        iSavedState = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00326,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,274,"        savedFields[savedFieldsCount] = field;
",2,0,1,1,2,0,0,0,0,7,38,4,0.00326,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,275,"        iSavedFieldsCount = savedFieldsCount + 1;
",4,1,0,0,0,0,0,0,0,6,41,4,0.00326,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,276,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00326,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,467,"        SavedField(DateTimeField field, int value) {
",6,0,0,1,3,0,0,2,0,8,44,3,0.00326,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,468,"            iField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00326,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,469,"            iValue = value;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00326,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,470,"            iText = null;
",2,0,0,0,0,0,0,0,0,3,13,5,0.00326,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,471,"            iLocale = null;
",2,0,0,0,0,0,0,0,0,3,15,5,0.00326,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,472,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00326,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1318,"                if (c < '0' || c > '9') {
",4,3,0,1,3,0,0,0,0,9,25,7,0.00317,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1292,"            int limit = Math.min(iMaxParsedDigits, text.length() - position);
",4,1,0,2,4,0,10,0,0,15,65,6,0.00316,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1294,"            boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,6,0.00316,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1295,"            int length = 0;
",2,0,0,0,0,0,0,0,0,2,15,6,0.00316,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1296,"            while (length < limit) {
",4,1,0,1,3,0,0,0,0,5,24,5,0.00316,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1297,"                char c = text.charAt(position + length);
",6,1,0,1,2,0,4,0,0,11,40,8,0.00316,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1298,"                if (length == 0 && (c == '-' || c == '+') && iSigned) {
",8,6,0,2,5,0,0,0,0,16,55,7,0.00316,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1324,"            if (length == 0) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00316,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2682,"            DateTimeParser[] elements = iParsers;
",4,0,0,1,2,0,0,2,0,6,37,5,0.00315,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2683,"            if (elements == null) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00315,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2687,"            int len = elements.length;
",6,0,0,0,0,0,0,0,0,6,26,6,0.00315,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2688,"            for (int i=0; i<len && position >= 0; i++) {
",10,3,0,1,3,0,0,0,0,14,44,5,0.00315,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2689,"                position = elements[i].parseInto(bucket, text, position);
",2,0,1,2,4,0,8,0,0,15,57,7,0.00315,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2691,"            return position;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00315,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,119,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00291,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,72,"    private SavedField[] iSavedFields = new SavedField[8];
",2,0,0,2,4,1,0,4,0,7,54,2,0.00291,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,120,"        chrono = DateTimeUtils.getChronology(chrono);
",2,0,0,1,2,0,6,0,0,9,45,4,0.00291,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,121,"        iMillis = instantLocal;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00291,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,122,"        iZone = chrono.getZone();
",2,0,0,1,2,0,4,0,0,7,25,4,0.00291,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,123,"        iChrono = chrono.withUTC();
",2,0,0,1,2,0,4,0,0,7,27,4,0.00291,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,124,"        iLocale = (locale == null ? Locale.getDefault() : locale);
",6,1,0,2,4,0,4,0,0,12,58,4,0.00291,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,125,"        iPivotYear = pivotYear;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00291,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,126,"        iDefaultYear = defaultYear;
",4,0,0,0,0,0,0,0,0,5,27,4,0.00291,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,127,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00291,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,920,"        DateTimeParser parser = iParser;
",4,0,0,0,0,0,0,2,0,6,32,4,0.00291,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,921,"        if (parser == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00291,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,924,"        return parser;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00291,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2615,"                locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,7,0.00254,0
defect4j,time,org/joda/time/format/FormatUtils,20,68,"            for (; size > 2; size--) {
",4,1,0,1,3,0,0,0,0,6,26,7,0.00247,0
defect4j,time,org/joda/time/format/FormatUtils,20,74,"            int d = ((value + 1) * 13421772) >> 27;
",4,3,0,2,4,0,0,0,0,7,39,8,0.00247,0
defect4j,time,org/joda/time/format/FormatUtils,20,75,"            buf.append((char) (d + '0'));
",2,1,0,3,6,0,4,0,0,8,29,8,0.00247,0
defect4j,time,org/joda/time/format/FormatUtils,20,77,"            buf.append((char) (value - (d << 3) - (d << 1) + '0'));
",6,4,0,5,10,0,4,0,0,15,55,8,0.00247,0
defect4j,time,org/joda/time/format/FormatUtils,20,78,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00247,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1180,"            buf.append(iValue);
",0,0,0,1,2,0,6,0,0,6,19,6,0.00245,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1181,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00245,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2608,"            DateTimePrinter[] elements = iPrinters;
",4,0,0,1,2,0,0,2,0,6,39,5,0.00243,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2609,"            if (elements == null) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00243,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2613,"            if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,5,0.00243,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2618,"            int len = elements.length;
",6,0,0,0,0,0,0,0,0,6,26,6,0.00243,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2619,"            for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,5,0.00243,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2620,"                elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);
",0,0,1,2,4,0,14,0,0,18,78,8,0.00243,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2622,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00243,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1437,"                DateTimeField field = iFieldType.getField(chrono);
",2,0,0,1,2,0,6,2,0,10,50,7,0.00243,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1438,"                FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);
",0,0,0,2,4,0,14,0,0,14,76,8,0.00243,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1441,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00243,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1442,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00243,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,581,"        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());
",2,0,0,3,6,0,4,4,0,10,78,4,0.00241,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,582,"        printTo(buf, instant);
",0,0,0,1,2,0,6,0,0,6,22,5,0.00241,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,583,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00241,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,458,"        long millis = DateTimeUtils.getInstantMillis(instant);
",2,0,0,1,2,0,6,0,0,8,54,5,0.00240,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,459,"        Chronology chrono = DateTimeUtils.getInstantChronology(instant);
",2,0,0,1,2,0,6,2,0,10,64,4,0.00240,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,460,"        printTo(buf, millis, chrono);
",0,0,0,1,2,0,8,0,0,8,29,5,0.00240,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,461,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00240,0
defect4j,time,org/joda/time/format/FormatUtils,20,83,"                digits = 4;
",2,0,0,0,0,0,0,0,0,3,11,10,0.00238,0
defect4j,time,org/joda/time/format/FormatUtils,20,82,"            } else if (value < 10000) {
",2,1,0,1,4,0,0,0,0,3,27,8,0.00238,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,617,"        DateTimePrinter printer = requirePrinter();
",2,0,0,1,2,0,2,2,0,6,43,4,0.00236,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,618,"        chrono = selectChronology(chrono);
",2,0,0,1,2,0,4,0,0,7,34,4,0.00236,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,621,"        DateTimeZone zone = chrono.getZone();
",2,0,0,1,2,0,4,2,0,8,37,4,0.00236,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,622,"        int offset = zone.getOffset(instant);
",2,0,0,1,2,0,6,0,0,8,37,5,0.00236,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,623,"        long adjustedInstant = instant + offset;
",6,1,0,0,0,0,0,0,0,7,40,5,0.00236,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,624,"        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {
",8,5,0,3,7,0,0,0,0,13,65,4,0.00236,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,630,"        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);
",0,0,0,2,4,0,18,0,0,18,79,5,0.00236,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,631,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00236,0
defect4j,time,org/joda/time/format/FormatUtils,20,80,"            if (value < 1000) {
",2,1,0,1,3,0,0,0,0,3,19,7,0.00236,0
defect4j,time,org/joda/time/format/FormatUtils,20,87,"            for (; size > digits; size--) {
",6,1,0,1,3,0,0,0,0,8,31,7,0.00236,0
defect4j,time,org/joda/time/format/FormatUtils,20,90,"            buf.append(Integer.toString(value));
",0,0,0,2,4,0,10,0,0,10,36,8,0.00236,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1541,"                return iWallOffsets[i - 1];
",2,1,1,1,2,1,0,0,0,5,27,8,0.00217,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1577,"                return instant;
",2,0,0,0,0,1,0,0,0,2,15,7,0.00216,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2602,"            return iPrintedLengthEstimate;
",2,0,0,0,0,1,0,0,0,2,30,5,0.00200,0
defect4j,time,org/joda/time/format/FormatUtils,20,64,"                buf.append('0');
",0,0,0,1,2,0,4,0,0,5,16,9,0.00194,0
defect4j,time,org/joda/time/format/FormatUtils,20,63,"            for (; size > 1; size--) {
",4,1,0,1,3,0,0,0,0,6,26,6,0.00193,0
defect4j,time,org/joda/time/format/FormatUtils,20,66,"            buf.append((char)(value + '0'));
",2,1,0,3,6,0,4,0,0,8,32,7,0.00193,0
defect4j,time,org/joda/time/format/FormatUtils,20,67,"        } else if (value < 100) {
",2,1,0,1,4,0,0,0,0,3,25,5,0.00191,0
defect4j,time,org/joda/time/DateTimeUtils,20,167,"        Chronology chrono = instant.getChronology();
",2,0,0,1,2,0,4,2,0,8,44,4,0.00188,0
defect4j,time,org/joda/time/DateTimeUtils,20,168,"        if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00188,0
defect4j,time,org/joda/time/DateTimeUtils,20,171,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00188,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,656,"        DateTimePrinter printer = iPrinter;
",4,0,0,0,0,0,0,2,0,6,35,4,0.00186,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,657,"        if (printer == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00186,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,660,"        return printer;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00186,0
defect4j,time,org/joda/time/DateTimeUtils,20,164,"        if (instant == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00180,0
defect4j,time,org/joda/time/DateTimeUtils,20,149,"        return instant.getMillis();
",0,0,0,1,2,1,4,0,0,4,27,5,0.00179,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,147,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00172,0
defect4j,time,org/joda/time/DateTimeUtils,20,146,"        if (instant == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00170,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,139,"        DateTimeZone zone = getZone();
",2,0,0,1,2,0,2,2,0,6,30,4,0.00170,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,140,"        int offset = zone.getOffsetFromLocal(instant);
",2,0,0,1,2,0,6,0,0,8,46,5,0.00170,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,141,"        instant -= offset;
",4,0,0,0,0,0,0,0,0,5,18,4,0.00170,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,142,"        if (offset != zone.getOffset(instant)) {
",2,1,0,2,5,0,6,0,0,9,40,4,0.00170,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,119,"        return localToUTC(getBase().getDateTimeMillis
",0,0,0,1,3,1,6,0,0,6,45,5,0.00170,0
defect4j,time,org/joda/time/format/FormatUtils,20,50,"        if (value < 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00164,0
defect4j,time,org/joda/time/format/FormatUtils,20,62,"        if (value < 10) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00164,0
defect4j,time,org/joda/time/format/FormatUtils,20,92,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00164,0
defect4j,time,org/joda/time/DateTimeZone,20,900,"        } else if (offsetLocal > 0) {
",2,1,0,1,4,0,0,0,0,3,29,5,0.00156,0
defect4j,time,org/joda/time/DateTimeZone,20,910,"        return offsetAdjusted;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00154,0
defect4j,time,org/joda/time/DateTimeZone,20,882,"        final int offsetLocal = getOffset(instantLocal);
",2,0,0,1,2,1,4,0,0,7,48,4,0.00152,0
defect4j,time,org/joda/time/DateTimeZone,20,884,"        final long instantAdjusted = instantLocal - offsetLocal;
",6,1,0,0,0,1,0,0,0,8,56,4,0.00152,0
defect4j,time,org/joda/time/DateTimeZone,20,885,"        final int offsetAdjusted = getOffset(instantAdjusted);
",2,0,0,1,2,1,4,0,0,7,54,4,0.00152,0
defect4j,time,org/joda/time/DateTimeZone,20,887,"        if (offsetLocal != offsetAdjusted) {
",4,1,0,1,3,0,0,0,0,5,36,4,0.00152,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,667,"        return appendDecimal(DateTimeFieldType.minuteOfHour(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,69,5,0.00147,0
defect4j,time,org/joda/time/DateTimeFieldType,20,520,"                    return chronology.minuteOfHour();
",0,0,0,1,2,1,4,0,0,4,33,7,0.00145,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,687,"        return appendDecimal(DateTimeFieldType.hourOfDay(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,66,5,0.00144,0
defect4j,time,org/joda/time/DateTimeFieldType,20,498,"                    return chronology.dayOfMonth();
",0,0,0,1,2,1,4,0,0,4,31,7,0.00141,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,935,"        chrono = DateTimeUtils.getChronology(chrono);
",2,0,0,1,2,0,6,0,0,9,45,4,0.00140,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,936,"        if (iChrono != null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00140,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,939,"        if (iZone != null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00140,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,942,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00140,0
defect4j,time,org/joda/time/DateTimeFieldType,20,516,"                    return chronology.hourOfDay();
",0,0,0,1,2,1,4,0,0,4,30,7,0.00140,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,779,"        return appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,68,5,0.00140,0
defect4j,time,org/joda/time/format/FormatUtils,20,31,"    private static final double LOG_10 = Math.log(10);
",2,0,0,1,2,3,4,0,0,9,50,2,0.00140,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,737,"        return appendDecimal(DateTimeFieldType.dayOfMonth(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,67,5,0.00136,0
defect4j,time,org/joda/time/DateTimeFieldType,20,496,"                    return chronology.monthOfYear();
",0,0,0,1,2,1,4,0,0,4,32,7,0.00133,0
defect4j,time,org/joda/time/DateTimeFieldType,20,492,"                    return chronology.year();
",0,0,0,1,2,1,4,0,0,4,25,7,0.00133,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,791,"        return appendSignedDecimal(DateTimeFieldType.year(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,75,5,0.00132,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,133,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,
",0,0,0,0,1,1,10,0,0,10,60,7,0.00129,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,448,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00129,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,451,"        if (maxDigits < minDigits) {
",4,1,0,1,3,0,0,0,0,5,28,4,0.00129,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,454,"        if (minDigits < 0 || maxDigits <= 0) {
",4,3,0,1,3,0,0,0,0,7,38,4,0.00129,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,457,"        if (minDigits <= 1) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00129,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,460,"            return append0(new PaddedNumber(fieldType, maxDigits, true, minDigits));
",6,0,0,2,4,1,2,2,0,11,72,7,0.00129,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,345,"        iFormatter = null;
",2,0,0,0,0,0,0,0,0,3,18,4,0.00123,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,346,"        iElementPairs.add(printer);
",0,0,0,1,2,0,6,0,0,6,27,5,0.00123,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,347,"        iElementPairs.add(parser);
",0,0,0,1,2,0,6,0,0,6,26,5,0.00123,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,348,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00123,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,408,"            return append0(new PaddedNumber(fieldType, maxDigits, false, minDigits));
",6,0,0,2,4,1,2,2,0,11,73,7,0.00110,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,396,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00110,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,399,"        if (maxDigits < minDigits) {
",4,1,0,1,3,0,0,0,0,5,28,4,0.00110,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,402,"        if (minDigits < 0 || maxDigits <= 0) {
",4,3,0,1,3,0,0,0,0,7,38,4,0.00110,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,405,"        if (minDigits <= 1) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00110,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1174,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00108,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1198,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00108,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1288,"            return iMaxParsedDigits;
",2,0,0,0,0,1,0,0,0,2,24,5,0.00107,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,359,"        return append0(new CharacterLiteral(c));
",2,0,0,2,4,1,2,2,0,6,40,5,0.00107,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1169,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00107,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1170,"            iValue = value;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00107,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1171,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00107,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2574,"                int size = printerList.size();
",2,0,0,1,2,0,4,0,0,6,30,8,0.00107,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2575,"                iPrinters = new DateTimePrinter[size];
",2,0,1,1,2,0,0,2,0,7,38,7,0.00107,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2576,"                int printEst = 0;
",2,0,0,0,0,0,0,0,0,2,17,8,0.00107,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2577,"                for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,7,0.00107,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2578,"                    DateTimePrinter printer = (DateTimePrinter) printerList.get(i);
",2,0,0,2,4,0,6,4,0,12,63,9,0.00107,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2579,"                    printEst += printer.estimatePrintedLength();
",2,0,0,1,2,0,4,0,0,7,44,9,0.00107,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2580,"                    iPrinters[i] = printer;
",2,0,1,1,2,0,0,0,0,7,23,9,0.00107,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2582,"                iPrintedLengthEstimate = printEst;
",4,0,0,0,0,0,0,0,0,5,34,7,0.00107,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2589,"                int size = parserList.size();
",2,0,0,1,2,0,4,0,0,6,29,8,0.00107,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2590,"                iParsers = new DateTimeParser[size];
",2,0,1,1,2,0,0,2,0,7,36,7,0.00107,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2591,"                int parseEst = 0;
",2,0,0,0,0,0,0,0,0,2,17,8,0.00107,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2592,"                for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,7,0.00107,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2593,"                    DateTimeParser parser = (DateTimeParser) parserList.get(i);
",2,0,0,2,4,0,6,4,0,12,59,9,0.00107,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2594,"                    parseEst += parser.estimateParsedLength();
",2,0,0,1,2,0,4,0,0,7,42,9,0.00107,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2595,"                    iParsers[i] = parser;
",2,0,1,1,2,0,0,0,0,7,21,9,0.00107,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2597,"                iParsedLengthEstimate = parseEst;
",4,0,0,0,0,0,0,0,0,5,33,7,0.00107,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2709,"                Object element = elementPairs.get(i);
",2,0,0,1,2,0,6,2,0,10,37,7,0.00107,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2710,"                if (element instanceof DateTimePrinter) {
",2,0,0,1,3,0,0,2,0,4,41,8,0.00107,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2711,"                    if (element instanceof Composite) {
",2,0,0,1,3,0,0,2,0,4,35,10,0.00107,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2714,"                        printerList.add(element);
",0,0,0,1,2,0,6,0,0,6,25,12,0.00107,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2718,"                element = elementPairs.get(i + 1);
",4,1,0,1,2,0,4,0,0,10,34,7,0.00107,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2719,"                if (element instanceof DateTimeParser) {
",2,0,0,1,3,0,0,2,0,4,40,8,0.00107,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2720,"                    if (element instanceof Composite) {
",2,0,0,1,3,0,0,2,0,4,35,10,0.00107,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2723,"                        parserList.add(element);
",0,0,0,1,2,0,6,0,0,6,24,12,0.00107,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1430,"            return iMaxParsedDigits;
",2,0,0,0,0,1,0,0,0,2,24,5,0.00106,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1425,"            super(fieldType, maxParsedDigits, signed);
",6,0,0,1,2,0,0,0,0,6,42,5,0.00106,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1426,"            iMinPrintedDigits = minPrintedDigits;
",4,0,0,0,0,0,0,0,0,5,37,5,0.00106,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1427,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00106,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1281,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00106,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1282,"            iFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,23,5,0.00106,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1283,"            iMaxParsedDigits = maxParsedDigits;
",4,0,0,0,0,0,0,0,0,5,35,5,0.00106,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1284,"            iSigned = signed;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00106,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1285,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00106,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1129,"                return ((Composite)f).isPrinter();
",2,0,0,3,6,1,2,2,0,6,34,9,0.00106,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1139,"                return ((Composite)f).isParser();
",2,0,0,3,6,1,2,2,0,6,33,9,0.00106,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2695,"            return iPrinters != null;
",2,1,0,0,0,1,0,0,0,3,25,5,0.00106,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2699,"            return iParsers != null;
",2,1,0,0,0,1,0,0,0,3,24,5,0.00106,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1117,"                f = new Composite(iElementPairs);
",4,0,0,1,2,0,0,2,0,7,33,8,0.00106,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2563,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00106,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2565,"            List<Object> printerList = new ArrayList<Object>();
",2,0,0,1,2,0,0,8,0,10,51,5,0.00106,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2566,"            List<Object> parserList = new ArrayList<Object>();
",2,0,0,1,2,0,0,8,0,10,50,5,0.00106,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2568,"            decompose(elementPairs, printerList, parserList);
",0,0,0,1,2,0,8,0,0,8,49,6,0.00106,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2570,"            if (printerList.size() <= 0) {
",0,1,0,2,5,0,4,0,0,5,30,5,0.00106,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2585,"            if (parserList.size() <= 0) {
",0,1,0,2,5,0,4,0,0,5,29,5,0.00106,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2599,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00106,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2707,"            int size = elementPairs.size();
",2,0,0,1,2,0,4,0,0,6,31,6,0.00106,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2708,"            for (int i=0; i<size; i+=2) {
",8,1,0,1,3,0,0,0,0,10,29,5,0.00106,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2727,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00106,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,104,"        Object f = getFormatter();
",2,0,0,1,2,0,2,2,0,6,26,4,0.00102,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,105,"        DateTimePrinter printer = null;
",2,0,0,0,0,0,0,2,0,4,31,4,0.00102,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,106,"        if (isPrinter(f)) {
",0,0,0,2,5,0,4,0,0,4,19,5,0.00102,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,107,"            printer = (DateTimePrinter) f;
",4,0,0,1,2,0,0,2,0,7,30,6,0.00102,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,109,"        DateTimeParser parser = null;
",2,0,0,0,0,0,0,2,0,4,29,4,0.00102,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,110,"        if (isParser(f)) {
",0,0,0,2,5,0,4,0,0,4,18,5,0.00102,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,111,"            parser = (DateTimeParser) f;
",4,0,0,1,2,0,0,2,0,7,28,6,0.00102,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,113,"        if (printer != null || parser != null) {
",4,3,0,1,3,0,0,0,0,7,40,4,0.00102,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,114,"            return new DateTimeFormatter(printer, parser);
",4,0,0,1,2,1,0,2,0,6,46,7,0.00102,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,107,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00102,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,108,"        iPrinter = printer;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00102,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,109,"        iParser = parser;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00102,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,110,"        iLocale = null;
",2,0,0,0,0,0,0,0,0,3,15,4,0.00102,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,111,"        iOffsetParsed = false;
",2,0,0,0,0,0,0,0,0,4,22,4,0.00102,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,112,"        iChrono = null;
",2,0,0,0,0,0,0,0,0,3,15,4,0.00102,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,113,"        iZone = null;
",2,0,0,0,0,0,0,0,0,3,13,4,0.00102,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,114,"        iPivotYear = null;
",2,0,0,0,0,0,0,0,0,3,18,4,0.00102,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,115,"        iDefaultYear = 2000;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00102,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,116,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00102,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,336,"        iFormatter = null;
",2,0,0,0,0,0,0,0,0,3,18,4,0.00102,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,338,"        iElementPairs.add(element);
",0,0,0,1,2,0,6,0,0,6,27,5,0.00102,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,339,"        iElementPairs.add(element);
",0,0,0,1,2,0,6,0,0,6,27,5,0.00102,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,340,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00102,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1127,"        if (f instanceof DateTimePrinter) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00102,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1128,"            if (f instanceof Composite) {
",2,0,0,1,3,0,0,2,0,4,29,7,0.00102,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1137,"        if (f instanceof DateTimeParser) {
",2,0,0,1,3,0,0,2,0,4,34,5,0.00102,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1138,"            if (f instanceof Composite) {
",2,0,0,1,3,0,0,2,0,4,29,7,0.00102,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1100,"        Object f = iFormatter;
",4,0,0,0,0,0,0,2,0,6,22,4,0.00102,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1102,"        if (f == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00102,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1103,"            if (iElementPairs.size() == 2) {
",0,1,0,2,5,0,4,0,0,5,32,6,0.00102,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1116,"            if (f == null) {
",2,1,0,1,3,0,0,0,0,3,16,6,0.00102,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1120,"            iFormatter = f;
",4,0,0,0,0,0,0,0,0,5,15,6,0.00102,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1123,"        return f;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00102,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,83,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00102,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,84,"        iElementPairs = new ArrayList<Object>();
",2,0,0,1,2,0,0,4,0,7,40,4,0.00102,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,85,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00102,0
defect4j,time,org/joda/time/DateTimeUtils,20,253,"            return ISOChronology.getInstance();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00099,0
defect4j,time,org/joda/time/DateTimeFieldType,20,480,"            chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,5,0.00095,0
defect4j,time,org/joda/time/DateTimeFieldType,20,482,"            switch (iOrdinal) {
",2,0,0,1,3,0,0,0,0,2,19,5,0.00095,0
defect4j,time,org/joda/time/base/BaseDateTime,20,304,"        return iChronology;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00095,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1540,"            if (iTailZone == null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.00089,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1576,"            if (iTailZone == null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.00087,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,20,80,"            return (int) ((instant / getUnitMillis()) % iRange);
",4,2,0,4,8,1,2,0,0,8,52,8,0.00084,0
defect4j,time,org/joda/time/base/BaseDateTime,20,295,"        return iMillis;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00079,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,435,"        return getMonthOfYear(millis, getYear(millis));
",0,0,0,2,4,1,8,0,0,8,47,5,0.00072,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,72,"        return iChronology.getMonthOfYear(instant);
",0,0,0,1,2,1,6,0,0,6,43,5,0.00072,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,167,"        if ((base = getBase()) != null) {
",2,1,0,3,7,0,2,0,0,7,33,4,0.00069,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,172,"        FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);
",0,0,0,2,4,0,10,0,0,10,78,5,0.00069,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,173,"        FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);
",0,0,0,2,4,0,10,0,0,10,84,5,0.00069,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,174,"        FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);
",0,0,0,2,4,0,10,0,0,10,88,5,0.00069,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,175,"        FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);
",0,0,0,2,4,0,10,0,0,10,89,5,0.00069,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,177,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth)
",0,0,0,1,2,1,8,0,0,8,59,9,0.00069,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,131,"        if ((base = iBase) != null && (iBaseFlags & 5) == 5) {
",6,4,0,3,7,0,0,0,0,11,54,4,0.00068,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,86,"        return getInstance(DateTimeZone.getDefault());
",0,0,0,2,4,1,6,0,0,6,46,5,0.00064,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1533,"            i = ~i;
",4,0,0,0,0,0,0,0,0,6,7,5,0.00064,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1534,"            if (i < transitions.length) {
",6,1,0,1,3,0,0,0,0,7,29,5,0.00064,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,204,"            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {
",8,3,0,1,3,0,0,0,0,11,59,5,0.00064,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,205,"                if (iOffset == Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,35,7,0.00064,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,206,"                    iOffset = iZoneRef.getOffset(iPeriodStart);
",2,0,0,1,2,0,6,0,0,9,43,9,0.00064,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,208,"                return iOffset;
",2,0,0,0,0,1,0,0,0,2,15,7,0.00064,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,111,"        return getInfo(instant).getOffset(instant);
",0,0,0,2,4,1,8,0,0,8,43,5,0.00064,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,107,"        if ((base = iBase) != null) {
",4,1,0,2,5,0,0,0,0,6,29,4,0.00064,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,108,"            return base.getZone();
",0,0,0,1,2,1,4,0,0,4,22,7,0.00064,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1528,"            long[] transitions = iTransitions;
",4,0,0,1,2,0,0,0,0,4,34,6,0.00064,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1529,"            int i = Arrays.binarySearch(transitions, instant);
",2,0,0,1,2,0,8,0,0,10,50,6,0.00064,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1530,"            if (i >= 0) {
",2,1,0,1,3,0,0,0,0,3,13,5,0.00064,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1570,"            long[] transitions = iTransitions;
",4,0,0,1,2,0,0,0,0,4,34,6,0.00063,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1571,"            int i = Arrays.binarySearch(transitions, instant);
",2,0,0,1,2,0,8,0,0,10,50,6,0.00063,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1572,"            i = (i >= 0) ? (i + 1) : ~i;
",8,2,0,2,4,0,0,0,0,12,28,5,0.00063,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1573,"            if (i < transitions.length) {
",6,1,0,1,3,0,0,0,0,7,29,5,0.00063,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,188,"        Info(DateTimeZone zone, long periodStart) {
",6,0,0,1,3,0,0,2,0,8,43,3,0.00063,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,185,"        private int iOffset = Integer.MIN_VALUE;
",6,0,0,0,0,1,0,0,0,7,40,3,0.00063,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,186,"        private int iStandardOffset = Integer.MIN_VALUE;
",6,0,0,0,0,1,0,0,0,7,48,3,0.00063,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,189,"            iPeriodStart = periodStart;
",4,0,0,0,0,0,0,0,0,5,27,5,0.00063,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,190,"            iZoneRef = zone;
",4,0,0,0,0,0,0,0,0,5,16,5,0.00063,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,191,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00063,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,148,"        int period = (int)(millis >> 32);
",4,1,0,2,4,0,0,0,0,5,33,5,0.00063,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,149,"        Info[] cache = iInfoCache;
",4,0,0,1,2,0,0,2,0,6,26,4,0.00063,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,150,"        int index = period & cInfoCacheMask;
",6,1,0,0,0,0,0,0,0,7,36,5,0.00063,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,151,"        Info info = cache[index];
",2,0,1,1,2,0,0,2,0,8,25,4,0.00063,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,152,"        if (info == null || (int)((info.iPeriodStart >> 32)) != period) {
",8,4,0,4,9,0,0,0,0,12,65,4,0.00063,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,153,"            info = createInfo(millis);
",2,0,0,1,2,0,4,0,0,7,26,6,0.00063,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,154,"            cache[index] = info;
",2,0,1,1,2,0,0,0,0,7,20,6,0.00063,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,156,"        return info;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00063,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,160,"        long periodStart = millis & (0xffffffffL << 32);
",4,2,0,1,2,0,0,0,0,6,48,5,0.00063,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,161,"        Info info = new Info(iZone, periodStart);
",6,0,0,1,2,0,0,4,0,10,41,4,0.00063,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,163,"        long end = periodStart | 0xffffffffL;
",4,1,0,0,0,0,0,0,0,5,37,5,0.00063,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,164,"        Info chain = info;
",4,0,0,0,0,0,0,2,0,6,18,4,0.00063,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,166,"            long next = iZone.nextTransition(periodStart);
",2,0,0,1,2,0,6,0,0,8,46,7,0.00063,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,167,"            if (next == periodStart || next > end) {
",8,3,0,1,3,0,0,0,0,11,40,6,0.00063,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,174,"        return info;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00063,0
defect4j,time,org/joda/time/base/BaseDateTime,20,256,"        iMillis = checkInstant(instant, iChronology);
",2,0,0,1,2,0,6,0,0,9,45,4,0.00062,0
defect4j,time,org/joda/time/base/BaseDateTime,20,257,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00062,0
defect4j,time,org/joda/time/base/BaseDateTime,20,252,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00062,0
defect4j,time,org/joda/time/base/BaseDateTime,20,253,"        iChronology = checkChronology(chronology);
",2,0,0,1,2,0,4,0,0,7,42,4,0.00062,0
defect4j,time,org/joda/time/base/BaseDateTime,20,254,"        long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
",2,0,0,0,1,0,10,0,0,12,75,5,0.00062,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,605,"        FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));
",0,0,0,3,6,0,16,0,0,16,115,5,0.00060,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,606,"        return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);
",0,0,0,1,2,1,8,0,0,8,60,5,0.00060,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,603,"        FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());
",0,0,0,4,8,0,14,0,0,14,89,5,0.00060,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,604,"        FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));
",0,0,0,3,6,0,14,0,0,14,97,5,0.00060,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,682,"        return getMaxMonth();
",0,0,0,1,2,1,2,0,0,2,21,5,0.00060,0
defect4j,time,org/joda/time/field/FieldUtils,20,237,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00060,0
defect4j,time,org/joda/time/field/FieldUtils,20,232,"        if ((value < lowerBound) || (value > upperBound)) {
",8,3,0,3,7,0,0,0,0,11,51,4,0.00060,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,123,"            return MIN_DAYS_PER_MONTH_ARRAY[month - 1];
",2,1,1,1,2,1,0,0,0,5,43,7,0.00059,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,120,"        if (isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,4,23,5,0.00058,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,448,"        int year = getYear(millis);
",2,0,0,1,2,0,4,0,0,6,27,5,0.00058,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,449,"        int month = getMonthOfYear(millis, year);
",2,0,0,1,2,0,6,0,0,8,41,5,0.00058,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,450,"        return getDayOfMonth(millis, year, month);
",0,0,0,1,2,1,8,0,0,8,42,5,0.00058,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,20,47,"        return iChronology.getDayOfMonth(instant);
",0,0,0,1,2,1,6,0,0,6,42,5,0.00058,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,20,79,"        if (instant >= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00058,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,20,54,"        return iChronology.getYear(instant);
",0,0,0,1,2,1,6,0,0,6,36,5,0.00058,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,142,"            return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];
",2,1,1,1,2,1,0,0,0,5,50,7,0.00057,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,221,"        return MIN_YEAR;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00057,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,468,"        long dateMillis = getYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,38,5,0.00057,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,469,"        dateMillis += getTotalMillisByYearMonth(year, month);
",2,0,0,1,2,0,6,0,0,9,53,4,0.00057,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,470,"        return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;
",8,3,0,3,6,1,0,0,0,11,76,4,0.00057,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,88,"        int i = (int)((millis - getYearMillis(year)) >> 10);
",4,2,0,4,8,0,4,0,0,10,52,5,0.00057,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,93,"        return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00057,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,233,"        return MILLIS_PER_YEAR / 2;
",2,1,0,0,0,1,0,0,0,3,27,4,0.00056,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,241,"        return (1970L * MILLIS_PER_YEAR) / 2;
",2,2,0,1,2,1,0,0,0,4,37,4,0.00056,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,399,"        long unitMillis = getAverageMillisPerYearDividedByTwo();
",2,0,0,1,2,0,2,0,0,4,56,5,0.00056,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,400,"        long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();
",4,2,0,2,4,0,2,0,0,8,64,5,0.00056,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,401,"        if (i2 < 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00056,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,404,"        int year = (int) (i2 / unitMillis);
",6,1,0,2,4,0,0,0,0,7,35,5,0.00056,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,406,"        long yearStart = getYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,37,5,0.00056,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,407,"        long diff = instant - yearStart;
",6,1,0,0,0,0,0,0,0,7,32,5,0.00056,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,409,"        if (diff < 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00056,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,411,"        } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {
",6,2,0,1,4,0,0,0,0,8,61,5,0.00056,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,428,"        return year;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00056,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,139,"        if (isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,4,23,5,0.00056,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,202,"        int leapYears = year / 100;
",4,1,0,0,0,0,0,0,0,5,27,5,0.00056,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,203,"        if (year < 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00056,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,211,"            leapYears = (year >> 2) - leapYears + (leapYears >> 2);
",8,4,0,2,4,0,0,0,0,13,55,6,0.00056,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,212,"            if (isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,4,23,7,0.00056,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,217,"        return (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;
",10,4,0,2,4,1,0,0,0,14,90,4,0.00056,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,197,"        return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);
",6,8,0,5,10,1,0,0,0,14,69,4,0.00055,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,385,"        long millis = getYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,34,5,0.00054,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,386,"        millis += getTotalMillisByYearMonth(year, month);
",2,0,0,1,2,0,6,0,0,9,49,4,0.00054,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,387,"        return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;
",8,3,0,2,4,1,0,0,0,11,74,4,0.00054,0
defect4j,time,org/joda/time/base/BaseDateTime,20,284,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00054,0
defect4j,time,org/joda/time/base/BaseDateTime,20,270,"        return DateTimeUtils.getChronology(chronology);
",0,0,0,1,2,1,6,0,0,6,47,5,0.00053,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,360,"        return getYearInfo(year).iFirstDayMillis;
",2,0,0,1,2,1,4,0,0,6,41,5,0.00052,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,738,"        YearInfo info = iYearInfoCache[year & CACHE_MASK];
",6,1,1,1,2,0,0,2,0,11,50,4,0.00052,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,739,"        if (info == null || info.iYear != year) {
",8,3,0,1,3,0,0,0,0,11,41,4,0.00052,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,740,"            info = new YearInfo(year, calculateFirstDayOfYearMillis(year));
",4,0,0,2,4,0,4,2,0,11,63,6,0.00052,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,741,"            iYearInfoCache[year & CACHE_MASK] = info;
",6,1,1,1,2,0,0,0,0,10,41,6,0.00052,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,743,"        return info;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00052,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,770,"        YearInfo(int year, long firstDayMillis) {
",6,0,0,1,3,0,0,0,0,6,41,3,0.00052,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,771,"            iYear = year;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00052,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,772,"            iFirstDayMillis = firstDayMillis;
",4,0,0,0,0,0,0,0,0,5,33,5,0.00052,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,773,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00052,0
defect4j,time,org/joda/time/base/AbstractDateTime,20,51,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00052,0
defect4j,time,org/joda/time/base/AbstractDateTime,20,52,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00052,0
defect4j,time,org/joda/time/base/AbstractInstant,20,61,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00050,0
defect4j,time,org/joda/time/base/AbstractInstant,20,62,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00050,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,107,"                chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));
",2,0,0,2,4,0,8,2,0,13,76,8,0.00049,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,108,"                cCache.put(zone, chrono);
",0,0,0,1,2,0,8,0,0,8,25,9,0.00049,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,96,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00048,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,99,"        int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);
",4,2,0,2,4,0,6,0,0,12,66,5,0.00048,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,100,"        ISOChronology chrono = cFastCache[index];
",2,0,1,1,2,0,0,2,0,8,41,4,0.00048,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,101,"        if (chrono != null && chrono.getZone() == zone) {
",4,3,0,2,5,0,4,0,0,11,49,4,0.00048,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,104,"        synchronized (cCache) {
",2,0,0,1,3,0,0,0,0,2,23,4,0.00048,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,105,"            chrono = cCache.get(zone);
",2,0,0,1,2,0,6,0,0,9,26,6,0.00048,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,106,"            if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00048,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,110,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00048,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,111,"        cFastCache[index] = chrono;
",2,0,1,1,2,0,0,0,0,7,27,4,0.00048,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,112,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00048,0
defect4j,time,org/joda/time/DateTimeUtils,20,255,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00046,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,133,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00046,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,131,"        return iZone.hashCode();
",0,0,0,1,2,1,4,0,0,4,24,5,0.00045,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,20,127,"        return UnsupportedDurationField.getInstance(DurationFieldType.eras());
",0,0,0,2,4,1,8,0,0,8,70,5,0.00044,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,20,131,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00044,0
defect4j,time,org/joda/time/DateTimeZone,20,1227,"        return 57 + getID().hashCode();
",0,1,0,2,4,1,4,0,0,5,31,4,0.00044,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,20,218,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,82,"        super(base, zone);
",4,0,0,1,2,0,0,0,0,4,18,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,83,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,56,"        if (base == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,59,"        base = base.withUTC();
",2,0,0,1,2,0,4,0,0,7,22,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,60,"        if (base == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,63,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,66,"        return new ZonedChronology(base, zone);
",4,0,0,1,2,1,0,2,0,6,39,5,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,72,"        return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;
",6,4,0,1,2,1,4,0,0,14,87,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,86,"        return (DateTimeZone)getParam();
",0,0,0,2,4,1,2,2,0,4,32,5,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,153,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();
",2,0,0,1,2,0,0,12,0,14,66,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,157,"        fields.eras = convertField(fields.eras, converted);
",8,0,0,1,2,0,4,0,0,13,51,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,158,"        fields.centuries = convertField(fields.centuries, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,159,"        fields.years = convertField(fields.years, converted);
",8,0,0,1,2,0,4,0,0,13,53,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,160,"        fields.months = convertField(fields.months, converted);
",8,0,0,1,2,0,4,0,0,13,55,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,161,"        fields.weekyears = convertField(fields.weekyears, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,162,"        fields.weeks = convertField(fields.weeks, converted);
",8,0,0,1,2,0,4,0,0,13,53,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,163,"        fields.days = convertField(fields.days, converted);
",8,0,0,1,2,0,4,0,0,13,51,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,165,"        fields.halfdays = convertField(fields.halfdays, converted);
",8,0,0,1,2,0,4,0,0,13,59,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,166,"        fields.hours = convertField(fields.hours, converted);
",8,0,0,1,2,0,4,0,0,13,53,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,167,"        fields.minutes = convertField(fields.minutes, converted);
",8,0,0,1,2,0,4,0,0,13,57,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,168,"        fields.seconds = convertField(fields.seconds, converted);
",8,0,0,1,2,0,4,0,0,13,57,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,169,"        fields.millis = convertField(fields.millis, converted);
",8,0,0,1,2,0,4,0,0,13,55,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,173,"        fields.year = convertField(fields.year, converted);
",8,0,0,1,2,0,4,0,0,13,51,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,174,"        fields.yearOfEra = convertField(fields.yearOfEra, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,175,"        fields.yearOfCentury = convertField(fields.yearOfCentury, converted);
",8,0,0,1,2,0,4,0,0,13,69,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,176,"        fields.centuryOfEra = convertField(fields.centuryOfEra, converted);
",8,0,0,1,2,0,4,0,0,13,67,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,177,"        fields.era = convertField(fields.era, converted);
",8,0,0,1,2,0,4,0,0,13,49,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,178,"        fields.dayOfWeek = convertField(fields.dayOfWeek, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,179,"        fields.dayOfMonth = convertField(fields.dayOfMonth, converted);
",8,0,0,1,2,0,4,0,0,13,63,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,180,"        fields.dayOfYear = convertField(fields.dayOfYear, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,181,"        fields.monthOfYear = convertField(fields.monthOfYear, converted);
",8,0,0,1,2,0,4,0,0,13,65,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,182,"        fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);
",8,0,0,1,2,0,4,0,0,13,71,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,183,"        fields.weekyear = convertField(fields.weekyear, converted);
",8,0,0,1,2,0,4,0,0,13,59,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,184,"        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);
",8,0,0,1,2,0,4,0,0,13,77,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,186,"        fields.millisOfSecond = convertField(fields.millisOfSecond, converted);
",8,0,0,1,2,0,4,0,0,13,71,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,187,"        fields.millisOfDay = convertField(fields.millisOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,65,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,188,"        fields.secondOfMinute = convertField(fields.secondOfMinute, converted);
",8,0,0,1,2,0,4,0,0,13,71,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,189,"        fields.secondOfDay = convertField(fields.secondOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,65,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,190,"        fields.minuteOfHour = convertField(fields.minuteOfHour, converted);
",8,0,0,1,2,0,4,0,0,13,67,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,191,"        fields.minuteOfDay = convertField(fields.minuteOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,65,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,192,"        fields.hourOfDay = convertField(fields.hourOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,193,"        fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);
",8,0,0,1,2,0,4,0,0,13,69,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,194,"        fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,71,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,195,"        fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);
",8,0,0,1,2,0,4,0,0,13,79,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,196,"        fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,67,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,197,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,200,"        if (field == null || !field.isSupported()) {
",2,2,0,2,5,0,4,0,0,9,44,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,201,"            return field;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,203,"        if (converted.containsKey(field)) {
",0,0,0,2,5,0,6,0,0,6,35,5,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,204,"            return (DurationField)converted.get(field);
",0,0,0,2,4,1,6,2,0,8,43,7,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,206,"        ZonedDurationField zonedField = new ZonedDurationField(field, getZone());
",4,0,0,2,4,0,2,4,0,10,73,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,207,"        converted.put(field, zonedField);
",0,0,0,1,2,0,8,0,0,8,33,5,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,208,"        return zonedField;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,212,"        if (field == null || !field.isSupported()) {
",2,2,0,2,5,0,4,0,0,9,44,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,215,"        if (converted.containsKey(field)) {
",0,0,0,2,5,0,6,0,0,6,35,5,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,218,"        ZonedDateTimeField zonedField =
",2,0,0,0,0,0,0,2,0,4,31,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,223,"        converted.put(field, zonedField);
",0,0,0,1,2,0,8,0,0,8,33,5,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,224,"        return zonedField;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,389,"            super(field.getType());
",0,0,0,2,4,0,4,0,0,4,23,6,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,390,"            if (!field.isSupported()) {
",0,0,0,2,5,0,4,0,0,5,27,5,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,393,"            iField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,394,"            iZone = zone;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,395,"            iDurationField = durationField;
",4,0,0,0,0,0,0,0,0,5,31,5,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,396,"            iTimeField = useTimeArithmetic(durationField);
",2,0,0,1,2,0,4,0,0,7,46,5,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,397,"            iRangeDurationField = rangeDurationField;
",4,0,0,0,0,0,0,0,0,5,41,5,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,398,"            iLeapDurationField = leapDurationField;
",4,0,0,0,0,0,0,0,0,5,39,5,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,399,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,284,"            super(field.getType());
",0,0,0,2,4,0,4,0,0,4,23,6,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,285,"            if (!field.isSupported()) {
",0,0,0,2,5,0,4,0,0,5,27,5,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,288,"            iField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,289,"            iTimeField = useTimeArithmetic(field);
",2,0,0,1,2,0,4,0,0,7,38,5,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,290,"            iZone = zone;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,291,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00044,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,298,"            return iField.getUnitMillis();
",0,0,0,1,2,1,4,0,0,4,30,6,0.00044,0
defect4j,time,org/joda/time/field/ScaledDurationField,20,109,"        return getWrappedField().getUnitMillis() * iScalar;
",2,1,0,2,4,1,4,0,0,7,51,4,0.00044,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,726,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00044,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,328,"        return iChronology.days();
",0,0,0,1,2,1,4,0,0,4,26,5,0.00044,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,220,"        return iChronology.weeks();
",0,0,0,1,2,1,4,0,0,4,27,5,0.00044,0
defect4j,time,org/joda/time/field/PreciseDurationField,20,142,"        long millis = iUnitMillis;
",4,0,0,0,0,0,0,0,0,4,26,5,0.00044,0
defect4j,time,org/joda/time/field/PreciseDurationField,20,143,"        int hash = (int) (millis ^ (millis >>> 32));
",6,2,0,3,6,0,0,0,0,8,44,5,0.00044,0
defect4j,time,org/joda/time/field/PreciseDurationField,20,144,"        hash += getType().hashCode();
",2,0,0,2,4,0,4,0,0,7,29,4,0.00044,0
defect4j,time,org/joda/time/field/PreciseDurationField,20,145,"        return hash;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00044,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,20,101,"        return getWrappedField().getLeapDurationField();
",0,0,0,2,4,1,4,0,0,4,48,5,0.00044,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,20,111,"        return iChronology.days();
",0,0,0,1,2,1,4,0,0,4,26,5,0.00044,0
defect4j,time,org/joda/time/field/ScaledDurationField,20,147,"        long scalar = iScalar;
",4,0,0,0,0,0,0,0,0,4,22,5,0.00044,0
defect4j,time,org/joda/time/field/ScaledDurationField,20,148,"        int hash = (int) (scalar ^ (scalar >>> 32));
",6,2,0,3,6,0,0,0,0,8,44,5,0.00044,0
defect4j,time,org/joda/time/field/ScaledDurationField,20,149,"        hash += getType().hashCode();
",2,0,0,2,4,0,4,0,0,7,29,4,0.00044,0
defect4j,time,org/joda/time/field/ScaledDurationField,20,150,"        hash += getWrappedField().hashCode();
",2,0,0,2,4,0,4,0,0,7,37,4,0.00044,0
defect4j,time,org/joda/time/field/ScaledDurationField,20,151,"        return hash;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00044,0
defect4j,time,org/joda/time/field/DecoratedDurationField,20,69,"        return iField;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00044,0
defect4j,time,org/joda/time/field/MillisDurationField,20,49,"        return DurationFieldType.millis();
",0,0,0,1,2,1,4,0,0,4,34,5,0.00044,0
defect4j,time,org/joda/time/field/MillisDurationField,20,155,"        return (int) getUnitMillis();
",0,0,0,2,4,1,2,0,0,2,29,6,0.00044,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,20,94,"        return iChronology.weeks();
",0,0,0,1,2,1,4,0,0,4,27,5,0.00044,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,315,"        return iParam;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00044,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,20,90,"        return iField.getRangeDurationField();
",0,0,0,1,2,1,4,0,0,4,38,5,0.00044,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,20,139,"        return iRangeField;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00044,0
defect4j,time,org/joda/time/field/BaseDurationField,20,55,"        return iType;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00044,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,208,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00044,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,20,56,"        return iChronology.years();
",0,0,0,1,2,1,4,0,0,4,27,5,0.00044,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,20,58,"        return iChronology.weekyears();
",0,0,0,1,2,1,4,0,0,4,31,5,0.00044,0
defect4j,time,org/joda/time/DateTimeUtils,20,252,"        if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00043,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,309,"        return iChronology.years();
",0,0,0,1,2,1,4,0,0,4,27,5,0.00043,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,20,51,"        return iChronology.months();
",0,0,0,1,2,1,4,0,0,4,28,5,0.00043,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,20,95,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00043,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,20,160,"            return iUnitMillis;
",2,0,0,0,0,1,0,0,0,2,19,5,0.00043,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,20,122,"        return iRangeField;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00043,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,122,"        super(base, null);
",2,0,0,1,2,0,0,0,0,3,18,3,0.00043,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,123,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00043,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,63,"    private static final Map<DateTimeZone, ISOChronology> cCache = new HashMap<DateTimeZone, ISOChronology>();
",2,0,0,1,2,3,0,12,0,17,106,2,0.00043,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,65,"        cFastCache = new ISOChronology[FAST_CACHE_SIZE];
",2,0,1,1,2,0,0,2,0,7,48,4,0.00043,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,66,"        INSTANCE_UTC = new ISOChronology(GregorianChronology.getInstanceUTC());
",2,0,0,2,4,0,4,2,0,9,71,4,0.00043,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,67,"        cCache.put(DateTimeZone.UTC, INSTANCE_UTC);
",4,0,0,1,2,0,6,0,0,10,43,5,0.00043,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,68,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00043,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,169,"        if (getBase().getZone() == DateTimeZone.UTC) {
",4,1,0,3,7,0,4,0,0,9,46,4,0.00043,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,171,"            fields.centuryOfEra = new DividedDateTimeField(
",4,0,0,0,1,0,0,2,0,7,47,6,0.00043,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,173,"            fields.yearOfCentury = new RemainderDateTimeField(
",4,0,0,0,1,0,0,2,0,7,50,6,0.00043,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,175,"            fields.weekyearOfCentury = new RemainderDateTimeField(
",4,0,0,0,1,0,0,2,0,7,54,6,0.00043,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,178,"            fields.centuries = fields.centuryOfEra.getDurationField();
",8,0,0,1,2,0,2,0,0,11,58,6,0.00043,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,180,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00043,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,81,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00043,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,20,46,"        super(GregorianChronology.getInstanceUTC().year(), DateTimeFieldType.yearOfEra());
",0,0,0,4,8,0,10,0,0,10,82,5,0.00043,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,20,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00043,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,20,40,"    static final DateTimeField INSTANCE = new ISOYearOfEraDateTimeField();
",2,0,0,1,2,2,0,4,0,8,70,2,0.00043,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,20,87,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00043,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,20,91,"        return getWrappedField().getMaximumValue();
",0,0,0,2,4,1,4,0,0,4,43,5,0.00043,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,146,"        return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,5,0.00043,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,143,"        if ((base = getBase()) != null) {
",2,1,0,3,7,0,2,0,0,7,33,4,0.00043,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,20,141,"        return iUnitField;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00043,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,45,"public final class GregorianChronology extends BasicGJChronology {
",2,0,0,0,1,2,0,2,0,6,66,1,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,321,"            fields.copyFieldsFrom(iBase);
",0,0,0,1,2,0,6,0,0,6,29,7,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,372,"            flags = 
",2,0,0,0,0,0,0,0,0,3,7,6,0.00042,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,148,"        super(base, param, minDaysInFirstWeek);
",6,0,0,1,2,0,0,0,0,6,39,4,0.00042,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,149,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,68,"    private static final Map<DateTimeZone, GregorianChronology[]> cCache = new HashMap<DateTimeZone, GregorianChronology[]>();
",2,0,0,3,6,3,0,12,0,17,122,2,0.00042,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,71,"        INSTANCE_UTC = getInstance(DateTimeZone.UTC);
",6,0,0,1,2,0,2,0,0,9,45,4,0.00042,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,72,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,100,"        return getInstance(zone, 4);
",0,0,0,1,2,1,4,0,0,4,28,5,0.00042,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,111,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00042,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,115,"        synchronized (cCache) {
",2,0,0,1,3,0,0,0,0,2,23,4,0.00042,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,116,"            GregorianChronology[] chronos = cCache.get(zone);
",2,0,0,2,4,0,6,2,0,10,49,6,0.00042,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,117,"            if (chronos == null) {
",2,1,0,1,3,0,0,0,0,3,22,6,0.00042,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,118,"                chronos = new GregorianChronology[7];
",2,0,0,1,2,0,0,2,0,5,37,8,0.00042,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,119,"                cCache.put(zone, chronos);
",0,0,0,1,2,0,8,0,0,8,26,9,0.00042,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,122,"                chrono = chronos[minDaysInFirstWeek - 1];
",4,1,1,1,2,0,0,0,0,8,41,8,0.00042,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,126,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,127,"            if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00042,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,128,"                if (zone == DateTimeZone.UTC) {
",6,1,0,1,3,0,0,0,0,7,31,8,0.00042,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,129,"                    chrono = new GregorianChronology(null, null, minDaysInFirstWeek);
",4,0,0,1,2,0,0,2,0,8,65,10,0.00042,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,135,"                chronos[minDaysInFirstWeek - 1] = chrono;
",4,1,1,1,2,0,0,0,0,8,41,8,0.00042,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,137,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,138,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00042,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,191,"        if (getBase() == null) {
",0,1,0,2,5,0,2,0,0,4,24,4,0.00042,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,192,"            super.assemble(fields);
",4,0,0,1,2,0,0,0,0,4,23,7,0.00042,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,194,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,225,"        return MAX_YEAR;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00042,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,229,"        return MILLIS_PER_YEAR;
",2,0,0,0,0,1,0,0,0,2,23,4,0.00042,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,237,"        return MILLIS_PER_MONTH;
",2,0,0,0,0,1,0,0,0,2,24,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,691,"        return 12;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00042,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,75,"        super(base, param, minDaysInFirstWeek);
",6,0,0,1,2,0,0,0,0,6,39,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,76,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,42,"    private static final int[] MIN_DAYS_PER_MONTH_ARRAY = {
",2,0,0,1,3,3,0,0,0,5,55,2,0.00042,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,45,"    private static final int[] MAX_DAYS_PER_MONTH_ARRAY = {
",2,0,0,1,3,3,0,0,0,5,55,2,0.00042,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,53,"        MIN_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];
",2,0,0,1,2,0,0,0,0,3,47,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,54,"        MAX_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];
",2,0,0,1,2,0,0,0,0,3,47,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,56,"        long minSum = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.00042,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,57,"        long maxSum = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.00042,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,58,"        for (int i = 0; i < 11; i++) {
",6,1,0,1,3,0,0,0,0,8,30,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,59,"            long millis = MIN_DAYS_PER_MONTH_ARRAY[i]
",2,0,1,1,2,0,0,0,0,6,41,7,0.00042,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,61,"            minSum += millis;
",4,0,0,0,0,0,0,0,0,5,17,6,0.00042,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,62,"            MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = minSum;
",4,1,1,1,2,0,0,0,0,8,48,6,0.00042,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,64,"            millis = MAX_DAYS_PER_MONTH_ARRAY[i]
",2,0,1,1,2,0,0,0,0,7,36,6,0.00042,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,66,"            maxSum += millis;
",4,0,0,0,0,0,0,0,0,5,17,6,0.00042,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,67,"            MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = maxSum;
",4,1,1,1,2,0,0,0,0,8,48,6,0.00042,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,69,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,20,92,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,156,"        return iMillis;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,160,"        return iMillisOfSecond;
",2,0,0,0,0,1,0,0,0,2,23,4,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,164,"        return iMillisOfDay;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,168,"        return iSeconds;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,172,"        return iSecondOfMinute;
",2,0,0,0,0,1,0,0,0,2,23,4,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,176,"        return iSecondOfDay;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,180,"        return iMinutes;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,184,"        return iMinuteOfHour;
",2,0,0,0,0,1,0,0,0,2,21,4,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,188,"        return iMinuteOfDay;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,192,"        return iHours;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,196,"        return iHourOfDay;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,200,"        return iClockhourOfDay;
",2,0,0,0,0,1,0,0,0,2,23,4,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,204,"        return iHalfdays;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,208,"        return iHourOfHalfday;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,212,"        return iClockhourOfHalfday;
",2,0,0,0,0,1,0,0,0,2,27,4,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,216,"        return iHalfdayOfDay;
",2,0,0,0,0,1,0,0,0,2,21,4,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,220,"        return iDays;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,224,"        return iDayOfWeek;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,228,"        return iDayOfMonth;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,232,"        return iDayOfYear;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,236,"        return iWeeks;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,240,"        return iWeekOfWeekyear;
",2,0,0,0,0,1,0,0,0,2,23,4,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,244,"        return iWeekyears;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,248,"        return iWeekyear;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,252,"        return iWeekyearOfCentury;
",2,0,0,0,0,1,0,0,0,2,26,4,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,256,"        return iMonths;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,260,"        return iMonthOfYear;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,264,"        return iYears;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,272,"        return iYearOfEra;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,276,"        return iYearOfCentury;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,280,"        return iCenturies;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,284,"        return iCenturyOfEra;
",2,0,0,0,0,1,0,0,0,2,21,4,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,288,"        return iEras;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,292,"        return iEra;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,445,"                if (isSupported(f = chrono.millis())) {
",2,0,0,3,7,0,6,0,0,9,39,7,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,446,"                    millis = f;
",4,0,0,0,0,0,0,0,0,5,11,8,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,448,"                if (isSupported(f = chrono.seconds())) {
",2,0,0,3,7,0,6,0,0,9,40,7,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,449,"                    seconds = f;
",4,0,0,0,0,0,0,0,0,5,12,8,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,451,"                if (isSupported(f = chrono.minutes())) {
",2,0,0,3,7,0,6,0,0,9,40,7,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,452,"                    minutes = f;
",4,0,0,0,0,0,0,0,0,5,12,8,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,454,"                if (isSupported(f = chrono.hours())) {
",2,0,0,3,7,0,6,0,0,9,38,7,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,455,"                    hours = f;
",4,0,0,0,0,0,0,0,0,5,10,8,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,457,"                if (isSupported(f = chrono.halfdays())) {
",2,0,0,3,7,0,6,0,0,9,41,7,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,458,"                    halfdays = f;
",4,0,0,0,0,0,0,0,0,5,13,8,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,460,"                if (isSupported(f = chrono.days())) {
",2,0,0,3,7,0,6,0,0,9,37,7,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,461,"                    days = f;
",4,0,0,0,0,0,0,0,0,5,9,8,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,463,"                if (isSupported(f = chrono.weeks())) {
",2,0,0,3,7,0,6,0,0,9,38,7,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,464,"                    weeks = f;
",4,0,0,0,0,0,0,0,0,5,10,8,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,466,"                if (isSupported(f = chrono.weekyears())) {
",2,0,0,3,7,0,6,0,0,9,42,7,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,467,"                    weekyears = f;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,469,"                if (isSupported(f = chrono.months())) {
",2,0,0,3,7,0,6,0,0,9,39,7,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,470,"                    months = f;
",4,0,0,0,0,0,0,0,0,5,11,8,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,472,"                if (isSupported(f = chrono.years())) {
",2,0,0,3,7,0,6,0,0,9,38,7,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,473,"                    years = f;
",4,0,0,0,0,0,0,0,0,5,10,8,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,475,"                if (isSupported(f = chrono.centuries())) {
",2,0,0,3,7,0,6,0,0,9,42,7,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,476,"                    centuries = f;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,478,"                if (isSupported(f = chrono.eras())) {
",2,0,0,3,7,0,6,0,0,9,37,7,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,485,"                if (isSupported(f = chrono.millisOfSecond())) {
",2,0,0,3,7,0,6,0,0,9,47,7,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,486,"                    millisOfSecond = f;
",4,0,0,0,0,0,0,0,0,5,19,8,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,488,"                if (isSupported(f = chrono.millisOfDay())) {
",2,0,0,3,7,0,6,0,0,9,44,7,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,489,"                    millisOfDay = f;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,491,"                if (isSupported(f = chrono.secondOfMinute())) {
",2,0,0,3,7,0,6,0,0,9,47,7,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,492,"                    secondOfMinute = f;
",4,0,0,0,0,0,0,0,0,5,19,8,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,494,"                if (isSupported(f = chrono.secondOfDay())) {
",2,0,0,3,7,0,6,0,0,9,44,7,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,495,"                    secondOfDay = f;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,497,"                if (isSupported(f = chrono.minuteOfHour())) {
",2,0,0,3,7,0,6,0,0,9,45,7,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,498,"                    minuteOfHour = f;
",4,0,0,0,0,0,0,0,0,5,17,8,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,500,"                if (isSupported(f = chrono.minuteOfDay())) {
",2,0,0,3,7,0,6,0,0,9,44,7,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,501,"                    minuteOfDay = f;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,503,"                if (isSupported(f = chrono.hourOfDay())) {
",2,0,0,3,7,0,6,0,0,9,42,7,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,504,"                    hourOfDay = f;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,506,"                if (isSupported(f = chrono.clockhourOfDay())) {
",2,0,0,3,7,0,6,0,0,9,47,7,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,507,"                    clockhourOfDay = f;
",4,0,0,0,0,0,0,0,0,5,19,8,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,509,"                if (isSupported(f = chrono.hourOfHalfday())) {
",2,0,0,3,7,0,6,0,0,9,46,7,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,510,"                    hourOfHalfday = f;
",4,0,0,0,0,0,0,0,0,5,18,8,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,512,"                if (isSupported(f = chrono.clockhourOfHalfday())) {
",2,0,0,3,7,0,6,0,0,9,51,7,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,513,"                    clockhourOfHalfday = f;
",4,0,0,0,0,0,0,0,0,5,23,8,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,515,"                if (isSupported(f = chrono.halfdayOfDay())) {
",2,0,0,3,7,0,6,0,0,9,45,7,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,516,"                    halfdayOfDay = f;
",4,0,0,0,0,0,0,0,0,5,17,8,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,518,"                if (isSupported(f = chrono.dayOfWeek())) {
",2,0,0,3,7,0,6,0,0,9,42,7,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,519,"                    dayOfWeek = f;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,521,"                if (isSupported(f = chrono.dayOfMonth())) {
",2,0,0,3,7,0,6,0,0,9,43,7,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,522,"                    dayOfMonth = f;
",4,0,0,0,0,0,0,0,0,5,15,8,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,524,"                if (isSupported(f = chrono.dayOfYear())) {
",2,0,0,3,7,0,6,0,0,9,42,7,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,525,"                    dayOfYear = f;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,527,"                if (isSupported(f = chrono.weekOfWeekyear())) {
",2,0,0,3,7,0,6,0,0,9,47,7,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,528,"                    weekOfWeekyear = f;
",4,0,0,0,0,0,0,0,0,5,19,8,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,530,"                if (isSupported(f = chrono.weekyear())) {
",2,0,0,3,7,0,6,0,0,9,41,7,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,531,"                    weekyear = f;
",4,0,0,0,0,0,0,0,0,5,13,8,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,533,"                if (isSupported(f = chrono.weekyearOfCentury())) {
",2,0,0,3,7,0,6,0,0,9,50,7,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,534,"                    weekyearOfCentury = f;
",4,0,0,0,0,0,0,0,0,5,22,8,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,536,"                if (isSupported(f = chrono.monthOfYear())) {
",2,0,0,3,7,0,6,0,0,9,44,7,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,537,"                    monthOfYear = f;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,539,"                if (isSupported(f = chrono.year())) {
",2,0,0,3,7,0,6,0,0,9,37,7,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,540,"                    year = f;
",4,0,0,0,0,0,0,0,0,5,9,8,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,542,"                if (isSupported(f = chrono.yearOfEra())) {
",2,0,0,3,7,0,6,0,0,9,42,7,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,543,"                    yearOfEra = f;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,545,"                if (isSupported(f = chrono.yearOfCentury())) {
",2,0,0,3,7,0,6,0,0,9,46,7,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,546,"                    yearOfCentury = f;
",4,0,0,0,0,0,0,0,0,5,18,8,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,548,"                if (isSupported(f = chrono.centuryOfEra())) {
",2,0,0,3,7,0,6,0,0,9,45,7,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,549,"                    centuryOfEra = f;
",4,0,0,0,0,0,0,0,0,5,17,8,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,551,"                if (isSupported(f = chrono.era())) {
",2,0,0,3,7,0,6,0,0,9,36,7,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,552,"                    era = f;
",4,0,0,0,0,0,0,0,0,5,8,8,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,555,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,558,"            return field == null ? false : field.isSupported();
",2,1,0,1,2,1,4,0,0,8,51,6,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,562,"            return field == null ? false : field.isSupported();
",2,1,0,1,2,1,4,0,0,8,51,6,0.00042,0
defect4j,time,org/joda/time/field/MillisDurationField,20,62,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00042,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,660,"        return UnsupportedDurationField.getInstance(DurationFieldType.eras());
",0,0,0,2,4,1,8,0,0,8,70,5,0.00042,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,20,53,"            field = cCache.get(type);
",2,0,0,1,2,0,6,0,0,9,25,6,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,164,"        return MILLIS_OF_SECOND_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,4,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,173,"        return MILLIS_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,4,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,182,"        return SECOND_OF_MINUTE_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,4,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,191,"        return SECOND_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,4,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,209,"        return MINUTE_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,4,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,218,"        return HOUR_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,4,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,236,"        return HOUR_OF_HALFDAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,28,4,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,245,"        return CLOCKHOUR_OF_HALFDAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,33,4,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,254,"        return HALFDAY_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,27,4,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,264,"        return DAY_OF_WEEK_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,4,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,282,"        return DAY_OF_YEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,4,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,291,"        return WEEK_OF_WEEKYEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,4,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,300,"        return WEEKYEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,21,4,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,309,"        return WEEKYEAR_OF_CENTURY_TYPE;
",2,0,0,0,0,1,0,0,0,2,32,4,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,318,"        return MONTH_OF_YEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,4,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,336,"        return YEAR_OF_ERA_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,4,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,345,"        return YEAR_OF_CENTURY_TYPE;
",2,0,0,0,0,1,0,0,0,2,28,4,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,354,"        return CENTURY_OF_ERA_TYPE;
",2,0,0,0,0,1,0,0,0,2,27,4,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,363,"        return ERA_TYPE;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00042,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,20,57,"        super(type, unit);
",4,0,0,1,2,0,0,0,0,4,18,4,0.00042,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,20,59,"        if (!range.isPrecise()) {
",0,0,0,2,5,0,4,0,0,5,25,4,0.00042,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,20,63,"        long rangeMillis = range.getUnitMillis();
",2,0,0,1,2,0,4,0,0,6,41,5,0.00042,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,20,64,"        iRange = (int)(rangeMillis / getUnitMillis());
",4,1,0,3,6,0,2,0,0,8,46,4,0.00042,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,20,65,"        if (iRange < 2) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00042,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,20,69,"        iRangeField = range;
",4,0,0,0,0,0,0,0,0,5,20,4,0.00042,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,20,70,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,20,48,"        super(type);
",2,0,0,1,2,0,0,0,0,2,12,4,0.00042,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,20,50,"        if (!unit.isPrecise()) {
",0,0,0,2,5,0,4,0,0,5,24,4,0.00042,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,20,54,"        iUnitMillis = unit.getUnitMillis();
",2,0,0,1,2,0,4,0,0,7,35,4,0.00042,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,20,55,"        if (iUnitMillis < 1) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00042,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,20,59,"        iUnitField = unit;
",4,0,0,0,0,0,0,0,0,5,18,4,0.00042,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,20,60,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,20,150,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00042,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,20,154,"        return iUnitMillis;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00042,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,50,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00042,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,51,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00042,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,54,"        iType = type;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00042,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,55,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,58,"        return iType;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00042,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,69,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,452,"            return iUnitType;
",2,0,0,0,0,1,0,0,0,2,17,5,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,457,"            return iRangeType;
",2,0,0,0,0,1,0,0,0,2,18,5,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,99,"    protected AssembledChronology(Chronology base, Object param) {
",6,0,0,1,3,1,0,4,0,11,62,2,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,100,"        iBase = base;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,101,"        iParam = param;
",4,0,0,0,0,0,0,0,0,5,15,4,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,102,"        setFields();
",0,0,0,1,2,0,2,0,0,2,12,5,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,103,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,268,"        return iYear;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,308,"        return iBase;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,319,"        Fields fields = new Fields();
",2,0,0,1,2,0,0,4,0,6,29,4,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,320,"        if (iBase != null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,323,"        assemble(fields);
",0,0,0,1,2,0,4,0,0,4,17,5,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,327,"            iMillis    = (f = fields.millis)    != null ? f : super.millis();
",12,1,0,2,4,0,0,0,0,15,65,5,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,328,"            iSeconds   = (f = fields.seconds)   != null ? f : super.seconds();
",12,1,0,2,4,0,0,0,0,15,66,5,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,329,"            iMinutes   = (f = fields.minutes)   != null ? f : super.minutes();
",12,1,0,2,4,0,0,0,0,15,66,5,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,330,"            iHours     = (f = fields.hours)     != null ? f : super.hours();
",12,1,0,2,4,0,0,0,0,15,64,5,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,331,"            iHalfdays  = (f = fields.halfdays)  != null ? f : super.halfdays();
",12,1,0,2,4,0,0,0,0,15,67,5,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,332,"            iDays      = (f = fields.days)      != null ? f : super.days();
",12,1,0,2,4,0,0,0,0,15,63,5,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,333,"            iWeeks     = (f = fields.weeks)     != null ? f : super.weeks();
",12,1,0,2,4,0,0,0,0,15,64,5,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,334,"            iWeekyears = (f = fields.weekyears) != null ? f : super.weekyears();
",12,1,0,2,4,0,0,0,0,15,68,5,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,335,"            iMonths    = (f = fields.months)    != null ? f : super.months();
",12,1,0,2,4,0,0,0,0,15,65,5,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,336,"            iYears     = (f = fields.years)     != null ? f : super.years();
",12,1,0,2,4,0,0,0,0,15,64,5,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,337,"            iCenturies = (f = fields.centuries) != null ? f : super.centuries();
",12,1,0,2,4,0,0,0,0,15,68,5,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,338,"            iEras      = (f = fields.eras)      != null ? f : super.eras();
",12,1,0,2,4,0,0,0,0,15,63,5,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,343,"            iMillisOfSecond     = (f = fields.millisOfSecond)     != null ? f : super.millisOfSecond();
",12,1,0,2,4,0,0,0,0,15,91,5,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,344,"            iMillisOfDay        = (f = fields.millisOfDay)        != null ? f : super.millisOfDay();
",12,1,0,2,4,0,0,0,0,15,88,5,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,345,"            iSecondOfMinute     = (f = fields.secondOfMinute)     != null ? f : super.secondOfMinute();
",12,1,0,2,4,0,0,0,0,15,91,5,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,346,"            iSecondOfDay        = (f = fields.secondOfDay)        != null ? f : super.secondOfDay();
",12,1,0,2,4,0,0,0,0,15,88,5,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,347,"            iMinuteOfHour       = (f = fields.minuteOfHour)       != null ? f : super.minuteOfHour();
",12,1,0,2,4,0,0,0,0,15,89,5,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,348,"            iMinuteOfDay        = (f = fields.minuteOfDay)        != null ? f : super.minuteOfDay();
",12,1,0,2,4,0,0,0,0,15,88,5,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,349,"            iHourOfDay          = (f = fields.hourOfDay)          != null ? f : super.hourOfDay();
",12,1,0,2,4,0,0,0,0,15,86,5,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,350,"            iClockhourOfDay     = (f = fields.clockhourOfDay)     != null ? f : super.clockhourOfDay();
",12,1,0,2,4,0,0,0,0,15,91,5,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,351,"            iHourOfHalfday      = (f = fields.hourOfHalfday)      != null ? f : super.hourOfHalfday();
",12,1,0,2,4,0,0,0,0,15,90,5,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,352,"            iClockhourOfHalfday = (f = fields.clockhourOfHalfday) != null ? f : super.clockhourOfHalfday();
",12,1,0,2,4,0,0,0,0,15,95,5,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,353,"            iHalfdayOfDay       = (f = fields.halfdayOfDay)       != null ? f : super.halfdayOfDay();
",12,1,0,2,4,0,0,0,0,15,89,5,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,354,"            iDayOfWeek          = (f = fields.dayOfWeek)          != null ? f : super.dayOfWeek();
",12,1,0,2,4,0,0,0,0,15,86,5,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,355,"            iDayOfMonth         = (f = fields.dayOfMonth)         != null ? f : super.dayOfMonth();
",12,1,0,2,4,0,0,0,0,15,87,5,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,356,"            iDayOfYear          = (f = fields.dayOfYear)          != null ? f : super.dayOfYear();
",12,1,0,2,4,0,0,0,0,15,86,5,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,357,"            iWeekOfWeekyear     = (f = fields.weekOfWeekyear)     != null ? f : super.weekOfWeekyear();
",12,1,0,2,4,0,0,0,0,15,91,5,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,358,"            iWeekyear           = (f = fields.weekyear)           != null ? f : super.weekyear();
",12,1,0,2,4,0,0,0,0,15,85,5,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,359,"            iWeekyearOfCentury  = (f = fields.weekyearOfCentury)  != null ? f : super.weekyearOfCentury();
",12,1,0,2,4,0,0,0,0,15,94,5,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,360,"            iMonthOfYear        = (f = fields.monthOfYear)        != null ? f : super.monthOfYear();
",12,1,0,2,4,0,0,0,0,15,88,5,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,361,"            iYear               = (f = fields.year)               != null ? f : super.year();
",12,1,0,2,4,0,0,0,0,15,81,5,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,362,"            iYearOfEra          = (f = fields.yearOfEra)          != null ? f : super.yearOfEra();
",12,1,0,2,4,0,0,0,0,15,86,5,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,363,"            iYearOfCentury      = (f = fields.yearOfCentury)      != null ? f : super.yearOfCentury();
",12,1,0,2,4,0,0,0,0,15,90,5,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,364,"            iCenturyOfEra       = (f = fields.centuryOfEra)       != null ? f : super.centuryOfEra();
",12,1,0,2,4,0,0,0,0,15,89,5,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,365,"            iEra                = (f = fields.era)                != null ? f : super.era();
",12,1,0,2,4,0,0,0,0,15,80,5,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,369,"        if (iBase == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,370,"            flags = 0;
",2,0,0,0,0,0,0,0,0,3,10,6,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,385,"        iBaseFlags = flags;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,386,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,20,37,"        super(chronology, 2);
",2,0,0,1,2,0,0,0,0,2,21,4,0.00042,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,20,38,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,51,"        super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth());
",0,0,0,3,6,0,8,0,0,8,78,5,0.00042,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,52,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,53,"        iMax = iChronology.getMaxMonth();
",2,0,0,1,2,0,4,0,0,7,33,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,54,"        iLeapMonth = leapMonth;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,55,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,20,55,"        super(type);
",2,0,0,1,2,0,0,0,0,2,12,4,0.00042,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,20,56,"        iUnitMillis = unitMillis;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00042,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,20,57,"        iDurationField = new LinkedDurationField(type.getDurationType());
",2,0,0,2,4,0,4,2,0,9,65,4,0.00042,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,20,58,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,20,137,"        return iDurationField;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00042,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,20,151,"        LinkedDurationField(DurationFieldType type) {
",4,0,0,1,3,0,0,2,0,6,45,3,0.00042,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,20,152,"            super(type);
",2,0,0,1,2,0,0,0,0,2,12,5,0.00042,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,20,153,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/field/BaseDurationField,20,47,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00042,0
defect4j,time,org/joda/time/field/BaseDurationField,20,48,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00042,0
defect4j,time,org/joda/time/field/BaseDurationField,20,51,"        iType = type;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00042,0
defect4j,time,org/joda/time/field/BaseDurationField,20,52,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/field/BaseDurationField,20,66,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,131,"        super(base, param);
",4,0,0,1,2,0,0,0,0,4,19,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,126,"    private transient final YearInfo[] iYearInfoCache = new YearInfo[CACHE_SIZE];
",2,0,1,2,4,3,0,4,0,11,77,2,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,133,"        if (minDaysInFirstWeek < 1 || minDaysInFirstWeek > 7) {
",4,3,0,1,3,0,0,0,0,7,55,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,138,"        iMinDaysInFirstWeek = minDaysInFirstWeek;
",4,0,0,0,0,0,0,0,0,5,41,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,139,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,76,"        cMillisField = MillisDurationField.INSTANCE;
",6,0,0,0,0,0,0,0,0,7,44,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,77,"        cSecondsField = new PreciseDurationField
",2,0,0,0,0,0,0,2,0,5,40,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,79,"        cMinutesField = new PreciseDurationField
",2,0,0,0,0,0,0,2,0,5,40,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,81,"        cHoursField = new PreciseDurationField
",2,0,0,0,0,0,0,2,0,5,38,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,83,"        cHalfdaysField = new PreciseDurationField
",2,0,0,0,0,0,0,2,0,5,41,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,85,"        cDaysField = new PreciseDurationField
",2,0,0,0,0,0,0,2,0,5,37,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,87,"        cWeeksField = new PreciseDurationField
",2,0,0,0,0,0,0,2,0,5,38,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,90,"        cMillisOfSecondField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,47,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,93,"        cMillisOfDayField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,44,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,96,"        cSecondOfMinuteField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,47,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,99,"        cSecondOfDayField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,44,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,102,"        cMinuteOfHourField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,45,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,105,"        cMinuteOfDayField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,44,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,108,"        cHourOfDayField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,42,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,111,"        cHourOfHalfdayField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,46,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,114,"        cClockhourOfDayField = new ZeroIsMaxDateTimeField
",2,0,0,0,0,0,0,2,0,5,49,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,117,"        cClockhourOfHalfdayField = new ZeroIsMaxDateTimeField
",2,0,0,0,0,0,0,2,0,5,53,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,120,"        cHalfdayOfDayField = new HalfdayField();
",2,0,0,1,2,0,0,2,0,5,40,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,121,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,241,"        fields.millis = cMillisField;
",6,0,0,0,0,0,0,0,0,7,29,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,242,"        fields.seconds = cSecondsField;
",6,0,0,0,0,0,0,0,0,7,31,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,243,"        fields.minutes = cMinutesField;
",6,0,0,0,0,0,0,0,0,7,31,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,244,"        fields.hours = cHoursField;
",6,0,0,0,0,0,0,0,0,7,27,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,245,"        fields.halfdays = cHalfdaysField;
",6,0,0,0,0,0,0,0,0,7,33,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,246,"        fields.days = cDaysField;
",6,0,0,0,0,0,0,0,0,7,25,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,247,"        fields.weeks = cWeeksField;
",6,0,0,0,0,0,0,0,0,7,27,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,249,"        fields.millisOfSecond = cMillisOfSecondField;
",6,0,0,0,0,0,0,0,0,7,45,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,250,"        fields.millisOfDay = cMillisOfDayField;
",6,0,0,0,0,0,0,0,0,7,39,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,251,"        fields.secondOfMinute = cSecondOfMinuteField;
",6,0,0,0,0,0,0,0,0,7,45,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,252,"        fields.secondOfDay = cSecondOfDayField;
",6,0,0,0,0,0,0,0,0,7,39,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,253,"        fields.minuteOfHour = cMinuteOfHourField;
",6,0,0,0,0,0,0,0,0,7,41,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,254,"        fields.minuteOfDay = cMinuteOfDayField;
",6,0,0,0,0,0,0,0,0,7,39,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,255,"        fields.hourOfDay = cHourOfDayField;
",6,0,0,0,0,0,0,0,0,7,35,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,256,"        fields.hourOfHalfday = cHourOfHalfdayField;
",6,0,0,0,0,0,0,0,0,7,43,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,257,"        fields.clockhourOfDay = cClockhourOfDayField;
",6,0,0,0,0,0,0,0,0,7,45,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,258,"        fields.clockhourOfHalfday = cClockhourOfHalfdayField;
",6,0,0,0,0,0,0,0,0,7,53,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,259,"        fields.halfdayOfDay = cHalfdayOfDayField;
",6,0,0,0,0,0,0,0,0,7,41,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,264,"        fields.year = new BasicYearDateTimeField(this);
",4,0,0,1,2,0,0,2,0,7,47,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,265,"        fields.yearOfEra = new GJYearOfEraDateTimeField(fields.year, this);
",8,0,0,1,2,0,0,2,0,11,67,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,268,"        DateTimeField field = new OffsetDateTimeField(
",2,0,0,0,1,0,0,4,0,6,46,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,270,"        fields.centuryOfEra = new DividedDateTimeField(
",4,0,0,0,1,0,0,2,0,7,47,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,273,"        field = new RemainderDateTimeField(
",2,0,0,0,1,0,0,2,0,5,35,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,275,"        fields.yearOfCentury = new OffsetDateTimeField(
",4,0,0,0,1,0,0,2,0,7,47,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,278,"        fields.era = new GJEraDateTimeField(this);
",4,0,0,1,2,0,0,2,0,7,42,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,279,"        fields.dayOfWeek = new GJDayOfWeekDateTimeField(this, fields.days);
",8,0,0,1,2,0,0,2,0,11,67,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,280,"        fields.dayOfMonth = new BasicDayOfMonthDateTimeField(this, fields.days);
",8,0,0,1,2,0,0,2,0,11,72,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,281,"        fields.dayOfYear = new BasicDayOfYearDateTimeField(this, fields.days);
",8,0,0,1,2,0,0,2,0,11,70,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,282,"        fields.monthOfYear = new GJMonthOfYearDateTimeField(this);
",4,0,0,1,2,0,0,2,0,7,58,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,283,"        fields.weekyear = new BasicWeekyearDateTimeField(this);
",4,0,0,1,2,0,0,2,0,7,55,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,284,"        fields.weekOfWeekyear = new BasicWeekOfWeekyearDateTimeField(this, fields.weeks);
",8,0,0,1,2,0,0,2,0,11,81,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,286,"        field = new RemainderDateTimeField(
",2,0,0,0,1,0,0,2,0,5,35,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,288,"        fields.weekyearOfCentury = new OffsetDateTimeField(
",4,0,0,0,1,0,0,2,0,7,51,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,294,"        fields.years = fields.year.getDurationField();
",8,0,0,1,2,0,2,0,0,11,46,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,295,"        fields.centuries = fields.centuryOfEra.getDurationField();
",8,0,0,1,2,0,2,0,0,11,58,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,296,"        fields.months = fields.monthOfYear.getDurationField();
",8,0,0,1,2,0,2,0,0,11,54,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,297,"        fields.weekyears = fields.weekyear.getDurationField();
",8,0,0,1,2,0,2,0,0,11,54,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,298,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,50,"abstract class BasicChronology extends AssembledChronology {
",2,0,0,0,1,1,0,2,0,5,60,1,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,750,"            super(DateTimeFieldType.halfdayOfDay(), cHalfdaysField, cDaysField);
",4,0,0,2,4,0,4,0,0,8,68,5,0.00042,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,751,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,44,"        super(DateTimeFieldType.weekyear(), chronology.getAverageMillisPerYear());
",0,0,0,3,6,0,8,0,0,8,74,5,0.00042,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,45,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,46,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,20,45,"        super(DateTimeFieldType.dayOfWeek(), days);
",2,0,0,2,4,0,4,0,0,6,43,4,0.00042,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,20,46,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00042,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,20,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,20,40,"        super(yearField, DateTimeFieldType.yearOfEra());
",2,0,0,2,4,0,4,0,0,6,48,4,0.00042,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,20,41,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00042,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,20,42,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,20,93,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00042,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,20,97,"        return getWrappedField().getMaximumValue();
",0,0,0,2,4,1,4,0,0,4,43,5,0.00042,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,20,54,"        super(type);
",2,0,0,1,2,0,0,0,0,2,12,4,0.00042,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,20,55,"        if (field == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00042,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,20,58,"        if (!field.isSupported()) {
",0,0,0,2,5,0,4,0,0,5,27,4,0.00042,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,20,61,"        iField = field;
",4,0,0,0,0,0,0,0,0,5,15,4,0.00042,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,20,62,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,20,70,"        return iField;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00042,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,20,86,"        return iField.getDurationField();
",0,0,0,1,2,1,4,0,0,4,33,5,0.00042,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,56,"        super(field, type);
",4,0,0,1,2,0,0,0,0,4,19,4,0.00042,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,58,"        if (divisor < 2) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00042,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,62,"        DurationField unitField = field.getDurationField();
",2,0,0,1,2,0,4,2,0,8,51,4,0.00042,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,63,"        if (unitField == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00042,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,66,"            iDurationField = new ScaledDurationField(
",2,0,0,0,1,0,0,2,0,5,41,6,0.00042,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,70,"        iDivisor = divisor;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00042,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,72,"        int i = field.getMinimumValue();
",2,0,0,1,2,0,4,0,0,6,32,5,0.00042,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,73,"        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);
",12,5,0,3,6,0,0,0,0,17,59,5,0.00042,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,75,"        int j = field.getMaximumValue();
",2,0,0,1,2,0,4,0,0,6,32,5,0.00042,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,76,"        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);
",12,5,0,3,6,0,0,0,0,17,59,5,0.00042,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,78,"        iMin = min;
",4,0,0,0,0,0,0,0,0,5,11,4,0.00042,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,79,"        iMax = max;
",4,0,0,0,0,0,0,0,0,5,11,4,0.00042,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,80,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,182,"        return iDurationField;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00042,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,20,52,"        super(field, type);
",4,0,0,1,2,0,0,0,0,4,19,4,0.00042,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,20,54,"        if (divisor < 2) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00042,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,20,58,"        DurationField rangeField = field.getDurationField();
",2,0,0,1,2,0,4,2,0,8,52,4,0.00042,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,20,59,"        if (rangeField == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00042,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,20,62,"            iRangeField = new ScaledDurationField(
",2,0,0,0,1,0,0,2,0,5,38,6,0.00042,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,20,66,"        iDivisor = divisor;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00042,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,20,67,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,20,76,"        this(dividedField, dividedField.getType());
",2,0,0,2,4,0,4,0,0,6,43,4,0.00042,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,20,77,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,20,87,"        super(dividedField.getWrappedField(), type);
",2,0,0,2,4,0,4,0,0,6,44,4,0.00042,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,20,88,"        iDivisor = dividedField.iDivisor;
",6,0,0,0,0,0,0,0,0,7,33,4,0.00042,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,20,89,"        iRangeField = dividedField.iDurationField;
",6,0,0,0,0,0,0,0,0,7,42,4,0.00042,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,20,90,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,20,148,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00042,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,20,158,"        return iDivisor - 1;
",2,1,0,0,0,1,0,0,0,3,20,4,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,436,"        Fields() {
",2,0,0,1,3,0,0,0,0,2,10,3,0.00042,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,437,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/field/PreciseDurationField,20,43,"        super(type);
",2,0,0,1,2,0,0,0,0,2,12,4,0.00042,0
defect4j,time,org/joda/time/field/PreciseDurationField,20,44,"        iUnitMillis = unitMillis;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00042,0
defect4j,time,org/joda/time/field/PreciseDurationField,20,45,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/field/PreciseDurationField,20,54,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00042,0
defect4j,time,org/joda/time/field/PreciseDurationField,20,63,"        return iUnitMillis;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00042,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,20,45,"        super(field, type);
",4,0,0,1,2,0,0,0,0,4,19,4,0.00042,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,20,46,"        if (field.getMinimumValue() != 0) {
",0,1,0,2,5,0,4,0,0,5,35,4,0.00042,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,20,49,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,20,45,"        super(DateTimeFieldType.year(), chronology.getAverageMillisPerYear());
",0,0,0,3,6,0,8,0,0,8,70,5,0.00042,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,20,46,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,20,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,20,119,"        return iChronology.getMaxYear();
",0,0,0,1,2,1,4,0,0,4,32,5,0.00042,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,20,46,"        this(field, (field == null ? null : field.getType()), offset, Integer.MIN_VALUE, Integer.MAX_VALUE);
",14,1,0,3,6,0,4,0,0,19,100,4,0.00042,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,20,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,20,58,"        this(field, type, offset, Integer.MIN_VALUE, Integer.MAX_VALUE);
",14,0,0,1,2,0,0,0,0,14,64,4,0.00042,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,20,59,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,20,73,"        super(field, type);
",4,0,0,1,2,0,0,0,0,4,19,4,0.00042,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,20,75,"        if (offset == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00042,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,20,79,"        iOffset = offset;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00042,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,20,81,"        if (minValue < (field.getMinimumValue() + offset)) {
",4,2,0,3,7,0,4,0,0,10,52,4,0.00042,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,20,82,"            iMin = field.getMinimumValue() + offset;
",4,1,0,1,2,0,4,0,0,10,40,6,0.00042,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,20,86,"        if (maxValue > (field.getMaximumValue() + offset)) {
",4,2,0,3,7,0,4,0,0,10,52,4,0.00042,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,20,87,"            iMax = field.getMaximumValue() + offset;
",4,1,0,1,2,0,4,0,0,10,40,6,0.00042,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,20,91,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,20,174,"        return iMin;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00042,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,20,183,"        return iMax;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00042,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,20,46,"        super(DateTimeFieldType.era());
",0,0,0,2,4,0,4,0,0,4,31,5,0.00042,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,20,47,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00042,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,20,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,20,41,"        super(DateTimeFieldType.dayOfMonth(), days);
",2,0,0,2,4,0,4,0,0,6,44,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,20,42,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,20,43,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,20,41,"        super(DateTimeFieldType.dayOfYear(), days);
",2,0,0,2,4,0,4,0,0,6,43,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,20,42,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,20,43,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,20,42,"        super(DateTimeFieldType.weekOfWeekyear(), weeks);
",2,0,0,2,4,0,4,0,0,6,49,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,20,43,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00042,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,20,44,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/field/ScaledDurationField,20,47,"        super(field, type);
",4,0,0,1,2,0,0,0,0,4,19,4,0.00042,0
defect4j,time,org/joda/time/field/ScaledDurationField,20,48,"        if (scalar == 0 || scalar == 1) {
",4,3,0,1,3,0,0,0,0,7,33,4,0.00042,0
defect4j,time,org/joda/time/field/ScaledDurationField,20,51,"        iScalar = scalar;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00042,0
defect4j,time,org/joda/time/field/ScaledDurationField,20,52,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/field/DecoratedDurationField,20,52,"        super(type);
",2,0,0,1,2,0,0,0,0,2,12,4,0.00042,0
defect4j,time,org/joda/time/field/DecoratedDurationField,20,53,"        if (field == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00042,0
defect4j,time,org/joda/time/field/DecoratedDurationField,20,56,"        if (!field.isSupported()) {
",0,0,0,2,5,0,4,0,0,5,27,4,0.00042,0
defect4j,time,org/joda/time/field/DecoratedDurationField,20,59,"        iField = field;
",4,0,0,0,0,0,0,0,0,5,15,4,0.00042,0
defect4j,time,org/joda/time/field/DecoratedDurationField,20,60,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/field/MillisDurationField,20,44,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00042,0
defect4j,time,org/joda/time/field/MillisDurationField,20,45,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/field/MillisDurationField,20,38,"    public static final DurationField INSTANCE = new MillisDurationField();
",2,0,0,1,2,3,0,4,0,9,71,2,0.00042,0
defect4j,time,org/joda/time/field/MillisDurationField,20,71,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00042,0
defect4j,time,org/joda/time/field/MillisDurationField,20,80,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00042,0
defect4j,time,org/joda/time/DurationField,20,30,"public abstract class DurationField implements Comparable<DurationField> {
",2,0,0,0,1,2,0,4,0,8,74,1,0.00042,0
defect4j,time,org/joda/time/DateTimeField,20,33,"public abstract class DateTimeField {
",2,0,0,0,1,2,0,0,0,4,37,1,0.00042,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,20,70,"    private UnsupportedDurationField(DurationFieldType type) {
",4,0,0,1,3,1,0,2,0,7,58,2,0.00042,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,20,71,"        iType = type;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00042,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,20,72,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,20,49,"        if (cCache == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00042,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,20,50,"            cCache = new HashMap<DurationFieldType, UnsupportedDurationField>(7);
",2,0,0,1,2,0,0,6,0,9,69,6,0.00042,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,20,51,"            field = null;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00042,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,20,55,"        if (field == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00042,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,20,56,"            field = new UnsupportedDurationField(type);
",4,0,0,1,2,0,0,2,0,7,43,6,0.00042,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,20,57,"            cCache.put(type, field);
",0,0,0,1,2,0,8,0,0,8,24,7,0.00042,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,20,59,"        return field;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,200,"        return MINUTE_OF_HOUR_TYPE;
",2,0,0,0,0,1,0,0,0,2,27,4,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,227,"        return CLOCKHOUR_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,4,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,273,"        return DAY_OF_MONTH_TYPE;
",2,0,0,0,0,1,0,0,0,2,25,4,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,327,"        return YEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00042,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,20,102,"        return getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;
",4,4,0,2,4,1,4,0,0,12,68,4,0.00042,0
defect4j,time,org/joda/time/DurationFieldType,20,141,"        return HALFDAYS_TYPE;
",2,0,0,0,0,1,0,0,0,2,21,4,0.00042,0
defect4j,time,org/joda/time/DurationFieldType,20,169,"        return WEEKYEARS_TYPE;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00042,0
defect4j,time,org/joda/time/DurationFieldType,20,205,"        return ERAS_TYPE;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,153,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,154,"        iName = name;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,155,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,73,"    private static final DateTimeFieldType ERA_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,80,2,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,76,"    private static final DateTimeFieldType YEAR_OF_ERA_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,88,2,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,79,"    private static final DateTimeFieldType CENTURY_OF_ERA_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,91,2,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,82,"    private static final DateTimeFieldType YEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,92,2,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,85,"    private static final DateTimeFieldType YEAR_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,81,2,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,88,"    private static final DateTimeFieldType DAY_OF_YEAR_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,88,2,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,91,"    private static final DateTimeFieldType MONTH_OF_YEAR_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,90,2,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,94,"    private static final DateTimeFieldType DAY_OF_MONTH_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,89,2,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,97,"    private static final DateTimeFieldType WEEKYEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,96,2,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,100,"    private static final DateTimeFieldType WEEKYEAR_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,85,2,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,103,"    private static final DateTimeFieldType WEEK_OF_WEEKYEAR_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,93,2,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,106,"    private static final DateTimeFieldType DAY_OF_WEEK_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,88,2,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,110,"    private static final DateTimeFieldType HALFDAY_OF_DAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,91,2,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,113,"    private static final DateTimeFieldType HOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,92,2,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,116,"    private static final DateTimeFieldType CLOCKHOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,97,2,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,119,"    private static final DateTimeFieldType CLOCKHOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,93,2,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,122,"    private static final DateTimeFieldType HOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,88,2,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,125,"    private static final DateTimeFieldType MINUTE_OF_DAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,90,2,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,128,"    private static final DateTimeFieldType MINUTE_OF_HOUR_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,91,2,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,131,"    private static final DateTimeFieldType SECOND_OF_DAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,90,2,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,134,"    private static final DateTimeFieldType SECOND_OF_MINUTE_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,93,2,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,137,"    private static final DateTimeFieldType MILLIS_OF_DAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,90,2,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,140,"    private static final DateTimeFieldType MILLIS_OF_SECOND_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,93,2,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,444,"            super(name);
",2,0,0,1,2,0,0,0,0,2,12,5,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,445,"            iOrdinal = ordinal;
",4,0,0,0,0,0,0,0,0,5,19,5,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,446,"            iUnitType = unitType;
",4,0,0,0,0,0,0,0,0,5,21,5,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,447,"            iRangeType = rangeType;
",4,0,0,0,0,0,0,0,0,5,23,5,0.00042,0
defect4j,time,org/joda/time/DateTimeFieldType,20,448,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/DurationFieldType,20,196,"        return CENTURIES_TYPE;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00042,0
defect4j,time,org/joda/time/Chronology,20,63,"public abstract class Chronology {
",2,0,0,0,1,2,0,0,0,4,34,1,0.00042,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,54,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00042,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,55,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00042,0
defect4j,time,org/joda/time/DateTimeZone,20,147,"                        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00041,0
defect4j,time,org/joda/time/DateTimeZone,20,133,"        DateTimeZone zone = cDefault;
",4,0,0,0,0,0,0,2,0,6,29,4,0.00041,0
defect4j,time,org/joda/time/DateTimeZone,20,134,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00041,0
defect4j,time,org/joda/time/DateTimeZone,20,135,"            synchronized(DateTimeZone.class) {
",0,0,0,1,3,0,0,2,0,2,34,8,0.00041,0
defect4j,time,org/joda/time/DateTimeZone,20,136,"                zone = cDefault;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00041,0
defect4j,time,org/joda/time/DateTimeZone,20,137,"                if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,8,0.00041,0
defect4j,time,org/joda/time/DateTimeZone,20,138,"                    DateTimeZone temp = null;
",2,0,0,0,0,0,0,2,0,4,25,10,0.00041,0
defect4j,time,org/joda/time/DateTimeZone,20,141,"                            String id = System.getProperty(""user.timezone"");
",2,0,0,1,2,0,4,2,0,9,48,14,0.00041,0
defect4j,time,org/joda/time/DateTimeZone,20,142,"                            if (id != null) {  // null check avoids stack overflow
",2,1,0,1,3,0,0,0,0,3,54,14,0.00041,0
defect4j,time,org/joda/time/DateTimeZone,20,143,"                                temp = forID(id);
",2,0,0,1,2,0,4,0,0,7,17,16,0.00041,0
defect4j,time,org/joda/time/DateTimeZone,20,148,"                        if (temp == null) {
",2,1,0,1,3,0,0,0,0,3,19,12,0.00041,0
defect4j,time,org/joda/time/DateTimeZone,20,153,"                    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00041,0
defect4j,time,org/joda/time/DateTimeZone,20,154,"                    if (temp == null) {
",2,1,0,1,3,0,0,0,0,3,19,10,0.00041,0
defect4j,time,org/joda/time/DateTimeZone,20,157,"                    cDefault = zone = temp;
",6,0,0,0,0,0,0,0,0,8,23,10,0.00041,0
defect4j,time,org/joda/time/DateTimeZone,20,159,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00041,0
defect4j,time,org/joda/time/DateTimeZone,20,161,"        return zone;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00041,0
defect4j,time,org/joda/time/DurationFieldType,20,160,"        return WEEKS_TYPE;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00041,0
defect4j,time,org/joda/time/DurationFieldType,20,178,"        return MONTHS_TYPE;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00041,0
defect4j,time,org/joda/time/DurationFieldType,20,187,"        return YEARS_TYPE;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00041,0
defect4j,time,org/joda/time/DurationFieldType,20,114,"        return SECONDS_TYPE;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00041,0
defect4j,time,org/joda/time/DurationFieldType,20,123,"        return MINUTES_TYPE;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00041,0
defect4j,time,org/joda/time/DurationFieldType,20,132,"        return HOURS_TYPE;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00041,0
defect4j,time,org/joda/time/DurationFieldType,20,105,"        return MILLIS_TYPE;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00041,0
defect4j,time,org/joda/time/DurationFieldType,20,151,"        return DAYS_TYPE;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00041,0
defect4j,time,org/joda/time/DurationFieldType,20,259,"            super(name);
",2,0,0,1,2,0,0,0,0,2,12,5,0.00041,0
defect4j,time,org/joda/time/DurationFieldType,20,260,"            iOrdinal = ordinal;
",4,0,0,0,0,0,0,0,0,5,19,5,0.00041,0
defect4j,time,org/joda/time/DurationFieldType,20,261,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00041,0
defect4j,time,org/joda/time/DurationFieldType,20,94,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00041,0
defect4j,time,org/joda/time/DurationFieldType,20,95,"        iName = name;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00041,0
defect4j,time,org/joda/time/DurationFieldType,20,96,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00041,0
defect4j,time,org/joda/time/DurationFieldType,20,60,"    static final DurationFieldType ERAS_TYPE = new StandardDurationFieldType(""eras"", ERAS);
",4,0,0,1,2,2,0,4,0,11,87,2,0.00041,0
defect4j,time,org/joda/time/DurationFieldType,20,62,"    static final DurationFieldType CENTURIES_TYPE = new StandardDurationFieldType(""centuries"", CENTURIES);
",4,0,0,1,2,2,0,4,0,11,102,2,0.00041,0
defect4j,time,org/joda/time/DurationFieldType,20,64,"    static final DurationFieldType WEEKYEARS_TYPE = new StandardDurationFieldType(""weekyears"", WEEKYEARS);
",4,0,0,1,2,2,0,4,0,11,102,2,0.00041,0
defect4j,time,org/joda/time/DurationFieldType,20,66,"    static final DurationFieldType YEARS_TYPE = new StandardDurationFieldType(""years"", YEARS);
",4,0,0,1,2,2,0,4,0,11,90,2,0.00041,0
defect4j,time,org/joda/time/DurationFieldType,20,68,"    static final DurationFieldType MONTHS_TYPE = new StandardDurationFieldType(""months"", MONTHS);
",4,0,0,1,2,2,0,4,0,11,93,2,0.00041,0
defect4j,time,org/joda/time/DurationFieldType,20,70,"    static final DurationFieldType WEEKS_TYPE = new StandardDurationFieldType(""weeks"", WEEKS);
",4,0,0,1,2,2,0,4,0,11,90,2,0.00041,0
defect4j,time,org/joda/time/DurationFieldType,20,72,"    static final DurationFieldType DAYS_TYPE = new StandardDurationFieldType(""days"", DAYS);
",4,0,0,1,2,2,0,4,0,11,87,2,0.00041,0
defect4j,time,org/joda/time/DurationFieldType,20,74,"    static final DurationFieldType HALFDAYS_TYPE = new StandardDurationFieldType(""halfdays"", HALFDAYS);
",4,0,0,1,2,2,0,4,0,11,99,2,0.00041,0
defect4j,time,org/joda/time/DurationFieldType,20,76,"    static final DurationFieldType HOURS_TYPE = new StandardDurationFieldType(""hours"", HOURS);
",4,0,0,1,2,2,0,4,0,11,90,2,0.00041,0
defect4j,time,org/joda/time/DurationFieldType,20,78,"    static final DurationFieldType MINUTES_TYPE = new StandardDurationFieldType(""minutes"", MINUTES);
",4,0,0,1,2,2,0,4,0,11,96,2,0.00041,0
defect4j,time,org/joda/time/DurationFieldType,20,80,"    static final DurationFieldType SECONDS_TYPE = new StandardDurationFieldType(""seconds"", SECONDS);
",4,0,0,1,2,2,0,4,0,11,96,2,0.00041,0
defect4j,time,org/joda/time/DurationFieldType,20,82,"    static final DurationFieldType MILLIS_TYPE = new StandardDurationFieldType(""millis"", MILLIS);
",4,0,0,1,2,2,0,4,0,11,93,2,0.00041,0
defect4j,time,org/joda/time/DateTimeUtils,20,35,"    private static final SystemMillisProvider SYSTEM_MILLIS_PROVIDER = new SystemMillisProvider();
",2,0,0,1,2,3,0,4,0,9,94,2,0.00040,0
defect4j,time,org/joda/time/DateTimeUtils,20,37,"    private static volatile MillisProvider cMillisProvider = SYSTEM_MILLIS_PROVIDER;
",4,0,0,0,0,3,0,2,0,9,80,2,0.00040,0
defect4j,time,org/joda/time/DateTimeUtils,20,393,"    static class SystemMillisProvider implements MillisProvider {
",2,0,0,0,1,1,0,2,0,5,61,2,0.00040,0
defect4j,time,org/joda/time/DateTimeZone,20,212,"            return zone;
",2,0,0,0,0,1,0,0,0,2,12,6,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1500,"            super(id);
",2,0,0,1,2,0,0,0,0,2,10,5,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1501,"            iTransitions = transitions;
",4,0,0,0,0,0,0,0,0,5,27,5,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1502,"            iWallOffsets = wallOffsets;
",4,0,0,0,0,0,0,0,0,5,27,5,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1503,"            iStandardOffsets = standardOffsets;
",4,0,0,0,0,0,0,0,0,5,35,5,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1504,"            iNameKeys = nameKeys;
",4,0,0,0,0,0,0,0,0,5,21,5,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1505,"            iTailZone = tailZone;
",4,0,0,0,0,0,0,0,0,5,21,5,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1506,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1341,"            int poolSize = in.readUnsignedShort();
",2,0,0,1,2,0,4,0,0,6,38,6,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1342,"            String[] pool = new String[poolSize];
",2,0,1,2,4,0,0,4,0,8,37,5,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1343,"            for (int i=0; i<poolSize; i++) {
",8,1,0,1,3,0,0,0,0,10,32,5,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1344,"                pool[i] = in.readUTF();
",0,0,1,2,4,0,4,0,0,9,23,7,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1347,"            int size = in.readInt();
",2,0,0,1,2,0,4,0,0,6,24,6,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1348,"            long[] transitions = new long[size];
",2,0,1,2,4,0,0,0,0,4,36,6,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1349,"            int[] wallOffsets = new int[size];
",2,0,1,2,4,0,0,0,0,4,34,6,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1350,"            int[] standardOffsets = new int[size];
",2,0,1,2,4,0,0,0,0,4,38,6,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1351,"            String[] nameKeys = new String[size];
",2,0,1,2,4,0,0,4,0,8,37,5,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1353,"            for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,5,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1354,"                transitions[i] = readMillis(in);
",0,0,1,2,4,0,4,0,0,9,32,7,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1355,"                wallOffsets[i] = (int)readMillis(in);
",0,0,1,3,6,0,4,0,0,9,37,7,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1356,"                standardOffsets[i] = (int)readMillis(in);
",0,0,1,3,6,0,4,0,0,9,41,7,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1359,"                    if (poolSize < 256) {
",2,1,0,1,3,0,0,0,0,3,21,9,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1360,"                        index = in.readUnsignedByte();
",2,0,0,1,2,0,4,0,0,7,30,11,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1364,"                    nameKeys[i] = pool[index];
",0,0,1,2,4,0,0,0,0,9,26,9,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1367,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1370,"            DSTZone tailZone = null;
",2,0,0,0,0,0,0,2,0,4,24,5,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1371,"            if (in.readBoolean()) {
",0,0,0,2,5,0,4,0,0,4,23,6,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1372,"                tailZone = DSTZone.readFrom(in, id);
",2,0,0,1,2,0,8,0,0,11,36,7,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1375,"            return new PrecalculatedZone
",0,0,0,0,0,1,0,2,0,2,28,7,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,147,"            return loadZoneData(id);
",0,0,0,1,2,1,4,0,0,4,24,7,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,224,"        InputStream in = null;
",2,0,0,0,0,0,0,2,0,4,22,4,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,226,"            in = openResource(id);
",2,0,0,1,2,0,4,0,0,7,22,6,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,227,"            DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);
",2,0,0,1,2,0,8,2,0,12,55,6,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,228,"            iZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));
",2,0,0,2,4,0,6,4,0,12,58,7,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,229,"            return tz;
",2,0,0,0,0,1,0,0,0,2,10,6,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,236,"                if (in != null) {
",2,1,0,1,3,0,0,0,0,3,17,8,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,237,"                    in.close();
",0,0,0,1,2,0,4,0,0,4,11,11,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,240,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,504,"        {
",0,0,0,0,1,0,0,0,0,0,1,3,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,505,"            if (mode != 'u' && mode != 'w' && mode != 's') {
",6,5,0,1,3,0,0,0,0,14,48,5,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,509,"            iMode = mode;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,510,"            iMonthOfYear = monthOfYear;
",4,0,0,0,0,0,0,0,0,5,27,5,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,511,"            iDayOfMonth = dayOfMonth;
",4,0,0,0,0,0,0,0,0,5,25,5,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,512,"            iDayOfWeek = dayOfWeek;
",4,0,0,0,0,0,0,0,0,5,23,5,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,513,"            iAdvance = advanceDayOfWeek;
",4,0,0,0,0,0,0,0,0,5,28,5,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,514,"            iMillisOfDay = millisOfDay;
",4,0,0,0,0,0,0,0,0,5,27,5,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,515,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,482,"            return new OfYear((char)in.readUnsignedByte(),
",0,0,0,2,5,1,4,2,0,6,46,6,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1176,"            super(id);
",2,0,0,1,2,0,0,0,0,2,10,5,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1177,"            iStandardOffset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,33,5,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1178,"            iStartRecurrence = startRecurrence;
",4,0,0,0,0,0,0,0,0,5,35,5,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1179,"            iEndRecurrence = endRecurrence;
",4,0,0,0,0,0,0,0,0,5,31,5,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1180,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1166,"            return new DSTZone(id, (int)readMillis(in), 
",2,0,0,2,5,1,4,2,0,8,43,6,0.00039,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,87,"        super(zone.getID());
",0,0,0,2,4,0,4,0,0,4,20,5,0.00039,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,88,"        iZone = zone;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00039,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,89,"        iInfoCache = new Info[cInfoCacheMask + 1];
",4,1,0,1,2,0,0,2,0,8,42,4,0.00039,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,90,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00039,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,39,"            i = Integer.getInteger(""org.joda.time.tz.CachedDateTimeZone.size"");
",2,0,0,1,2,0,4,0,0,8,67,6,0.00039,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,42,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00039,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,45,"        if (i == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00039,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,48,"            cacheSize = 512; // (1 << 9)
",2,0,0,1,2,0,0,0,0,3,28,6,0.00039,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,61,"        cInfoCacheMask = cacheSize - 1;
",4,1,0,0,0,0,0,0,0,6,31,4,0.00039,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,62,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00039,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,68,"        if (zone instanceof CachedDateTimeZone) {
",2,0,0,1,3,0,0,2,0,4,41,5,0.00039,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,71,"        return new CachedDateTimeZone(zone);
",2,0,0,1,2,1,0,2,0,4,36,5,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,95,"        if (in instanceof DataInput) {
",2,0,0,1,3,0,0,2,0,4,30,5,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,98,"            return readFrom((DataInput)new DataInputStream(in), id);
",2,0,0,3,6,1,4,4,0,10,56,7,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,110,"        switch (in.readUnsignedByte()) {
",0,0,0,2,5,0,4,0,0,4,32,5,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,119,"            return CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in, id));
",0,0,0,2,4,1,12,0,0,12,70,6,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,183,"        int v = in.readUnsignedByte();
",2,0,0,1,2,0,4,0,0,6,30,5,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,184,"        switch (v >> 6) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,187,"            v = (v << (32 - 6)) >> (32 - 6);
",4,4,0,3,6,0,0,0,0,9,32,5,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,188,"            return v * (30 * 60000L);
",2,2,0,1,2,1,0,0,0,4,25,5,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,192,"            v = (v << (32 - 6)) >> (32 - 30);
",4,4,0,3,6,0,0,0,0,9,33,5,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,193,"            v |= (in.readUnsignedByte()) << 16;
",2,1,0,2,4,0,4,0,0,8,35,5,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,194,"            v |= (in.readUnsignedByte()) << 8;
",2,1,0,2,4,0,4,0,0,8,34,5,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,195,"            v |= (in.readUnsignedByte());
",2,0,0,2,4,0,4,0,0,7,29,5,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,196,"            return v * 60000L;
",2,1,0,0,0,1,0,0,0,3,18,5,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,200,"            long w = (((long)v) << (64 - 6)) >> (64 - 38);
",4,4,0,5,10,0,0,0,0,8,46,6,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,201,"            w |= (in.readUnsignedByte()) << 24;
",2,1,0,2,4,0,4,0,0,8,35,5,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,202,"            w |= (in.readUnsignedByte()) << 16;
",2,1,0,2,4,0,4,0,0,8,35,5,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,203,"            w |= (in.readUnsignedByte()) << 8;
",2,1,0,2,4,0,4,0,0,8,34,5,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,204,"            w |= (in.readUnsignedByte());
",2,0,0,2,4,0,4,0,0,7,29,5,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,205,"            return w * 1000L;
",2,1,0,0,0,1,0,0,0,3,17,5,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,209,"            return in.readLong();
",0,0,0,1,2,1,4,0,0,4,21,6,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,747,"        Recurrence(OfYear ofYear, String nameKey, int saveMillis) {
",8,0,0,1,3,0,0,4,0,12,59,3,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,748,"            iOfYear = ofYear;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,749,"            iNameKey = nameKey;
",4,0,0,0,0,0,0,0,0,5,19,5,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,750,"            iSaveMillis = saveMillis;
",4,0,0,0,0,0,0,0,0,5,25,5,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,751,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00039,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,740,"            return new Recurrence(OfYear.readFrom(in), in.readUTF(), (int)readMillis(in));
",0,0,0,5,10,1,14,2,0,16,78,6,0.00039,0
defect4j,time,org/joda/time/DateTimeZone,20,204,"        if (id == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00039,0
defect4j,time,org/joda/time/DateTimeZone,20,207,"        if (id.equals(""UTC"")) {
",0,0,0,2,5,0,4,0,0,5,23,5,0.00039,0
defect4j,time,org/joda/time/DateTimeZone,20,210,"        DateTimeZone zone = cProvider.getZone(id);
",2,0,0,1,2,0,6,2,0,10,42,4,0.00039,0
defect4j,time,org/joda/time/DateTimeZone,20,211,"        if (zone != null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00039,0
defect4j,time,org/joda/time/DateTimeZone,20,706,"        return iID;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00039,0
defect4j,time,org/joda/time/DateTimeZone,20,689,"    protected DateTimeZone(String id) {
",4,0,0,1,3,1,0,2,0,7,35,2,0.00039,0
defect4j,time,org/joda/time/DateTimeZone,20,690,"        if (id == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00039,0
defect4j,time,org/joda/time/DateTimeZone,20,693,"        iID = id;
",4,0,0,0,0,0,0,0,0,5,9,4,0.00039,0
defect4j,time,org/joda/time/DateTimeZone,20,694,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00039,0
defect4j,time,org/joda/time/DateTimeZone,20,95,"    public static final DateTimeZone UTC = new FixedDateTimeZone(""UTC"", ""UTC"", 0, 0);
",2,0,0,1,2,3,0,4,0,11,81,2,0.00039,0
defect4j,time,org/joda/time/DateTimeZone,20,115,"        setProvider0(null);
",0,0,0,1,2,0,2,0,0,3,19,4,0.00039,0
defect4j,time,org/joda/time/DateTimeZone,20,116,"        setNameProvider0(null);
",0,0,0,1,2,0,2,0,0,3,23,4,0.00039,0
defect4j,time,org/joda/time/DateTimeZone,20,117,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00039,0
defect4j,time,org/joda/time/DateTimeZone,20,415,"        if (provider == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00039,0
defect4j,time,org/joda/time/DateTimeZone,20,416,"            provider = getDefaultProvider();
",2,0,0,1,2,0,2,0,0,5,32,6,0.00039,0
defect4j,time,org/joda/time/DateTimeZone,20,418,"        Set<String> ids = provider.getAvailableIDs();
",2,0,0,1,2,0,4,4,0,10,45,4,0.00039,0
defect4j,time,org/joda/time/DateTimeZone,20,419,"        if (ids == null || ids.size() == 0) {
",2,3,0,2,5,0,4,0,0,9,37,4,0.00039,0
defect4j,time,org/joda/time/DateTimeZone,20,423,"        if (!ids.contains(""UTC"")) {
",0,0,0,2,5,0,4,0,0,6,27,4,0.00039,0
defect4j,time,org/joda/time/DateTimeZone,20,426,"        if (!UTC.equals(provider.getZone(""UTC""))) {
",0,0,0,3,7,0,8,0,0,10,43,4,0.00039,0
defect4j,time,org/joda/time/DateTimeZone,20,429,"        cProvider = provider;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00039,0
defect4j,time,org/joda/time/DateTimeZone,20,430,"        cAvailableIDs = ids;
",4,0,0,0,0,0,0,0,0,5,20,4,0.00039,0
defect4j,time,org/joda/time/DateTimeZone,20,431,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00039,0
defect4j,time,org/joda/time/DateTimeZone,20,443,"        Provider provider = null;
",2,0,0,0,0,0,0,2,0,4,25,4,0.00039,0
defect4j,time,org/joda/time/DateTimeZone,20,446,"            String providerClass =
",2,0,0,0,0,0,0,2,0,4,22,6,0.00039,0
defect4j,time,org/joda/time/DateTimeZone,20,448,"            if (providerClass != null) {
",2,1,0,1,3,0,0,0,0,3,28,6,0.00039,0
defect4j,time,org/joda/time/DateTimeZone,20,458,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00039,0
defect4j,time,org/joda/time/DateTimeZone,20,460,"        if (provider == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00039,0
defect4j,time,org/joda/time/DateTimeZone,20,462,"                provider = new ZoneInfoProvider(""org/joda/time/tz/data"");
",2,0,0,1,2,0,0,2,0,6,57,8,0.00039,0
defect4j,time,org/joda/time/DateTimeZone,20,466,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00039,0
defect4j,time,org/joda/time/DateTimeZone,20,469,"        if (provider == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00039,0
defect4j,time,org/joda/time/DateTimeZone,20,473,"        return provider;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00039,0
defect4j,time,org/joda/time/DateTimeZone,20,514,"        if (nameProvider == null) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.00039,0
defect4j,time,org/joda/time/DateTimeZone,20,515,"            nameProvider = getDefaultNameProvider();
",2,0,0,1,2,0,2,0,0,5,40,6,0.00039,0
defect4j,time,org/joda/time/DateTimeZone,20,517,"        cNameProvider = nameProvider;
",4,0,0,0,0,0,0,0,0,5,29,4,0.00039,0
defect4j,time,org/joda/time/DateTimeZone,20,518,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00039,0
defect4j,time,org/joda/time/DateTimeZone,20,529,"        NameProvider nameProvider = null;
",2,0,0,0,0,0,0,2,0,4,33,4,0.00039,0
defect4j,time,org/joda/time/DateTimeZone,20,531,"            String providerClass = System.getProperty(""org.joda.time.DateTimeZone.NameProvider"");
",2,0,0,1,2,0,4,2,0,9,85,6,0.00039,0
defect4j,time,org/joda/time/DateTimeZone,20,532,"            if (providerClass != null) {
",2,1,0,1,3,0,0,0,0,3,28,6,0.00039,0
defect4j,time,org/joda/time/DateTimeZone,20,542,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00039,0
defect4j,time,org/joda/time/DateTimeZone,20,544,"        if (nameProvider == null) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.00039,0
defect4j,time,org/joda/time/DateTimeZone,20,545,"            nameProvider = new DefaultNameProvider();
",2,0,0,1,2,0,0,2,0,5,41,6,0.00039,0
defect4j,time,org/joda/time/DateTimeZone,20,548,"        return nameProvider;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00039,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,20,38,"        super(id);
",2,0,0,1,2,0,0,0,0,2,10,4,0.00039,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,20,39,"        iNameKey = nameKey;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00039,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,20,40,"        iWallOffset = wallOffset;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00039,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,20,41,"        iStandardOffset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,33,4,0.00039,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,20,42,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00039,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,20,88,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00039,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,20,89,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,82,"        this(resourcePath, null, false);
",2,0,0,1,2,0,0,0,0,3,32,4,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,83,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,106,"    {
",0,0,0,0,1,0,0,0,0,0,1,3,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,107,"        if (resourcePath == null) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,110,"        if (!resourcePath.endsWith(""/"")) {
",0,0,0,2,5,0,4,0,0,6,34,4,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,111,"            resourcePath += '/';
",2,0,0,0,0,0,0,0,0,4,20,6,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,114,"        iFileDir = null;
",2,0,0,0,0,0,0,0,0,3,16,4,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,115,"        iResourcePath = resourcePath;
",4,0,0,0,0,0,0,0,0,5,29,4,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,117,"        if (loader == null && !favorSystemLoader) {
",4,2,0,1,3,0,0,0,0,7,43,4,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,118,"            loader = getClass().getClassLoader();
",2,0,0,2,4,0,4,0,0,7,37,6,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,121,"        iLoader = loader;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,123,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));
",2,0,0,2,4,0,4,0,0,8,60,4,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,124,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,136,"        if (id == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,140,"        Object obj = iZoneInfoMap.get(id);
",2,0,0,1,2,0,6,2,0,10,34,4,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,141,"        if (obj == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,145,"        if (id.equals(obj)) {
",0,0,0,2,5,0,6,0,0,6,21,5,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,150,"        if (obj instanceof SoftReference<?>) {
",2,0,0,1,3,0,0,2,0,4,38,5,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,152,"            SoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;
",4,0,0,1,2,0,0,8,0,12,68,6,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,153,"            DateTimeZone tz = ref.get();
",2,0,0,1,2,0,4,2,0,8,28,6,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,154,"            if (tz != null) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,155,"                return tz;
",2,0,0,0,0,1,0,0,0,2,10,8,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,174,"        return new TreeSet<String>(iZoneInfoMap.keySet());
",0,0,0,2,4,1,4,4,0,8,50,5,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,196,"        if (iFileDir != null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,199,"            String path = iResourcePath.concat(name);
",2,0,0,1,2,0,6,2,0,10,41,6,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,200,"            if (iLoader != null) {
",2,1,0,1,3,0,0,0,0,3,22,6,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,201,"                in = iLoader.getResourceAsStream(path);
",2,0,0,1,2,0,6,0,0,9,39,8,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,205,"            if (in == null) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,214,"        return in;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,252,"        Map<String, Object> map = new ConcurrentHashMap<String, Object>();
",2,0,0,1,2,0,0,12,0,14,66,4,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,253,"        DataInputStream din = new DataInputStream(in);
",4,0,0,1,2,0,0,4,0,8,46,4,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,255,"            readZoneInfoMap(din, map);
",0,0,0,1,2,0,6,0,0,6,26,7,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,258,"                din.close();
",0,0,0,1,2,0,4,0,0,4,12,9,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,260,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,262,"        map.put(""UTC"", new SoftReference<DateTimeZone>(DateTimeZone.UTC));
",4,0,0,2,4,0,4,4,0,13,66,5,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,263,"        return map;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,274,"        int size = din.readUnsignedShort();
",2,0,0,1,2,0,4,0,0,6,35,5,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,275,"        String[] pool = new String[size];
",2,0,1,2,4,0,0,4,0,8,33,4,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,276,"        for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,4,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,277,"            pool[i] = din.readUTF().intern();
",0,0,1,3,6,0,6,0,0,11,33,6,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,281,"        size = din.readUnsignedShort();
",2,0,0,1,2,0,4,0,0,7,31,4,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,282,"        for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,4,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,284,"                zimap.put(pool[din.readUnsignedShort()], pool[din.readUnsignedShort()]);
",0,0,1,5,10,0,12,0,0,16,72,9,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,287,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00039,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,289,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00039,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,20,39,"    public DefaultNameProvider() {
",2,0,0,1,3,1,0,0,0,3,30,2,0.00039,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,20,37,"    private HashMap<Locale, Map<String, Map<String, Object>>> iByLocaleCache = createCache();
",2,0,0,1,2,1,2,14,0,19,89,2,0.00039,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,20,40,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00039,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,20,99,"        return new HashMap(7);
",0,0,0,1,2,1,0,2,0,2,22,6,0.00039,0
defect4j,time,org/joda/time/DurationFieldType,20,264,"            chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,5,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,20,266,"            switch (iOrdinal) {
",2,0,0,1,3,0,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,20,268,"                    return chronology.eras();
",0,0,0,1,2,1,4,0,0,4,25,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,20,270,"                    return chronology.centuries();
",0,0,0,1,2,1,4,0,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,20,272,"                    return chronology.weekyears();
",0,0,0,1,2,1,4,0,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,20,274,"                    return chronology.years();
",0,0,0,1,2,1,4,0,0,4,26,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,20,276,"                    return chronology.months();
",0,0,0,1,2,1,4,0,0,4,27,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,20,278,"                    return chronology.weeks();
",0,0,0,1,2,1,4,0,0,4,26,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,20,280,"                    return chronology.days();
",0,0,0,1,2,1,4,0,0,4,25,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,20,282,"                    return chronology.halfdays();
",0,0,0,1,2,1,4,0,0,4,29,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,20,284,"                    return chronology.hours();
",0,0,0,1,2,1,4,0,0,4,26,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,20,286,"                    return chronology.minutes();
",0,0,0,1,2,1,4,0,0,4,28,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,20,288,"                    return chronology.seconds();
",0,0,0,1,2,1,4,0,0,4,28,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,20,290,"                    return chronology.millis();
",0,0,0,1,2,1,4,0,0,4,27,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,20,293,"                    throw new InternalError();
",0,0,0,1,2,0,0,2,0,2,26,8,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,20,303,"            switch (iOrdinal) {
",2,0,0,1,3,0,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,20,305,"                    return ERAS_TYPE;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,20,307,"                    return CENTURIES_TYPE;
",2,0,0,0,0,1,0,0,0,2,22,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,20,309,"                    return WEEKYEARS_TYPE;
",2,0,0,0,0,1,0,0,0,2,22,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,20,311,"                    return YEARS_TYPE;
",2,0,0,0,0,1,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,20,313,"                    return MONTHS_TYPE;
",2,0,0,0,0,1,0,0,0,2,19,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,20,315,"                    return WEEKS_TYPE;
",2,0,0,0,0,1,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,20,317,"                    return DAYS_TYPE;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,20,319,"                    return HALFDAYS_TYPE;
",2,0,0,0,0,1,0,0,0,2,21,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,20,321,"                    return HOURS_TYPE;
",2,0,0,0,0,1,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,20,323,"                    return MINUTES_TYPE;
",2,0,0,0,0,1,0,0,0,2,20,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,20,325,"                    return SECONDS_TYPE;
",2,0,0,0,0,1,0,0,0,2,20,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,20,327,"                    return MILLIS_TYPE;
",2,0,0,0,0,1,0,0,0,2,19,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,20,330,"                    return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,20,216,"        return iName;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,20,234,"        return getField(chronology).isSupported();
",0,0,0,2,4,1,6,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,20,243,"        return getName();
",0,0,0,1,2,1,2,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/DurationField,20,209,"        if (value == Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/DurationField,20,210,"            return subtract(instant, (long) value);
",2,0,0,2,4,1,4,0,0,6,39,7,0.00000,0
defect4j,time,org/joda/time/DurationField,20,212,"        return add(instant, -value);
",2,0,0,1,2,1,4,0,0,7,28,5,0.00000,0
defect4j,time,org/joda/time/DurationField,20,224,"        if (value == Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,30,4,0.00000,0
defect4j,time,org/joda/time/DurationField,20,225,"            throw new ArithmeticException(""Long.MIN_VALUE cannot be negated"");
",0,0,0,1,2,0,0,2,0,3,66,7,0.00000,0
defect4j,time,org/joda/time/DurationField,20,227,"        return add(instant, -value);
",2,0,0,1,2,1,4,0,0,7,28,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,438,"        OffsetMillisProvider(long offsetMillis) {
",4,0,0,1,3,0,0,0,0,4,41,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,439,"            iMillis = offsetMillis;
",4,0,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,440,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,447,"            return System.currentTimeMillis() + iMillis;
",2,1,0,1,2,1,4,0,0,7,44,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,43,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,44,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,56,"        return cMillisProvider.getMillis();
",0,0,0,1,2,1,4,0,0,4,35,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,68,"        checkPermission();
",0,0,0,1,2,0,2,0,0,2,18,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,69,"        cMillisProvider = SYSTEM_MILLIS_PROVIDER;
",4,0,0,0,0,0,0,0,0,5,41,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,70,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,82,"        checkPermission();
",0,0,0,1,2,0,2,0,0,2,18,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,83,"        cMillisProvider = new FixedMillisProvider(fixedMillis);
",4,0,0,1,2,0,0,2,0,7,55,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,84,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,97,"        checkPermission();
",0,0,0,1,2,0,2,0,0,2,18,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,98,"        if (offsetMillis == 0) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,99,"            cMillisProvider = SYSTEM_MILLIS_PROVIDER;
",4,0,0,0,0,0,0,0,0,5,41,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,101,"            cMillisProvider = new OffsetMillisProvider(offsetMillis);
",4,0,0,1,2,0,0,2,0,7,57,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,103,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,116,"        if (millisProvider == null) {
",2,1,0,1,3,0,0,0,0,3,29,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,117,"            throw new IllegalArgumentException(""The MillisProvider must not be null"");
",0,0,0,1,2,0,0,2,0,4,74,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,119,"        checkPermission();
",0,0,0,1,2,0,2,0,0,2,18,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,120,"        cMillisProvider = millisProvider;
",4,0,0,0,0,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,121,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,129,"        SecurityManager sm = System.getSecurityManager();
",2,0,0,1,2,0,4,2,0,8,49,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,130,"        if (sm != null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,131,"            sm.checkPermission(new JodaTimePermission(""CurrentTime.setProvider""));
",0,0,0,2,4,0,4,2,0,7,70,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,133,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,147,"            return DateTimeUtils.currentTimeMillis();
",0,0,0,1,2,1,4,0,0,4,41,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,165,"            return ISOChronology.getInstance();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,169,"            return ISOChronology.getInstance();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,187,"        Chronology chrono = null;
",2,0,0,0,0,0,0,2,0,4,25,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,188,"        if (start != null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,189,"            chrono = start.getChronology();
",2,0,0,1,2,0,4,0,0,7,31,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,190,"        } else if (end != null) {
",2,1,0,1,4,0,0,0,0,3,25,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,191,"            chrono = end.getChronology();
",2,0,0,1,2,0,4,0,0,7,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,193,"        if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,194,"            chrono = ISOChronology.getInstance();
",2,0,0,1,2,0,4,0,0,7,37,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,196,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,211,"        if (interval == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,212,"            return ISOChronology.getInstance();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,214,"        Chronology chrono = interval.getChronology();
",2,0,0,1,2,0,4,2,0,8,45,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,215,"        if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,216,"            return ISOChronology.getInstance();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,218,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,234,"        if (interval == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,235,"            long now = DateTimeUtils.currentTimeMillis();
",2,0,0,1,2,0,4,0,0,6,45,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,236,"            interval = new Interval(now, now);
",6,0,0,1,2,0,0,2,0,9,34,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,238,"        return interval;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,269,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,270,"            return DateTimeZone.getDefault();
",0,0,0,1,2,1,4,0,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,272,"        return zone;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,286,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,287,"            return PeriodType.standard();
",0,0,0,1,2,1,4,0,0,4,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,289,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,303,"        if (duration == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,304,"            return 0L;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,306,"        return duration.getMillis();
",0,0,0,1,2,1,4,0,0,4,28,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,334,"        if (partial == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,335,"            throw new IllegalArgumentException(""Partial must not be null"");
",0,0,0,1,2,0,0,2,0,4,63,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,337,"        DurationFieldType lastType = null;
",2,0,0,0,0,0,0,2,0,4,34,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,338,"        for (int i = 0; i < partial.size(); i++) {
",6,1,0,2,5,0,4,0,0,12,42,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,339,"            DateTimeField loopField = partial.getField(i);
",2,0,0,1,2,0,6,2,0,10,46,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,340,"            if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,341,"                if (loopField.getRangeDurationField().getType() != lastType) {
",2,1,0,3,7,0,6,0,0,9,62,8,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,342,"                    return false;
",0,0,0,0,0,1,0,0,0,1,13,10,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,345,"            lastType = loopField.getDurationField().getType();
",2,0,0,2,4,0,6,0,0,9,50,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,347,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,365,"        	Method method = DateFormatSymbols.class.getMethod(""getInstance"", new Class[] {Locale.class});        	
",2,0,0,3,6,0,2,8,0,13,93,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,366,"        	return (DateFormatSymbols) method.invoke(null, new Object[] {locale});        	
",2,0,0,4,8,1,4,4,0,10,70,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,367,"        } catch (Exception ex) {
",2,0,0,1,4,0,0,2,0,4,24,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,368,"        	return new DateFormatSymbols(locale);
",2,0,0,1,2,1,0,2,0,4,37,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,1261,"        Stub(String id) {
",4,0,0,1,3,0,0,2,0,6,17,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,1262,"            iID = id;
",4,0,0,0,0,0,0,0,0,5,9,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,1263,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,1266,"            out.writeUTF(iID);
",0,0,0,1,2,0,6,0,0,6,18,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,1267,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,1270,"            iID = in.readUTF();
",2,0,0,1,2,0,4,0,0,7,19,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,1271,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,1274,"            return forID(iID);
",0,0,0,1,2,1,4,0,0,4,18,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,604,"        Chronology chrono = new BaseChronology() {
",2,0,0,1,3,0,0,4,0,6,42,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,606,"                return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,609,"                return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,612,"                return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,615,"                return getClass().getName();
",0,0,0,2,4,1,4,0,0,4,28,11,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,102,"        long instant = year().set(0, year);
",2,0,0,2,4,0,6,0,0,8,35,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,103,"        instant = monthOfYear().set(instant, monthOfYear);
",2,0,0,2,4,0,8,0,0,11,50,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,104,"        instant = dayOfMonth().set(instant, dayOfMonth);
",2,0,0,2,4,0,8,0,0,11,48,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,105,"        return millisOfDay().set(instant, millisOfDay);
",0,0,0,2,4,1,8,0,0,8,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,132,"        long instant = year().set(0, year);
",2,0,0,2,4,0,6,0,0,8,35,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,133,"        instant = monthOfYear().set(instant, monthOfYear);
",2,0,0,2,4,0,8,0,0,11,50,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,134,"        instant = dayOfMonth().set(instant, dayOfMonth);
",2,0,0,2,4,0,8,0,0,11,48,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,135,"        instant = hourOfDay().set(instant, hourOfDay);
",2,0,0,2,4,0,8,0,0,11,46,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,136,"        instant = minuteOfHour().set(instant, minuteOfHour);
",2,0,0,2,4,0,8,0,0,11,52,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,137,"        instant = secondOfMinute().set(instant, secondOfMinute);
",2,0,0,2,4,0,8,0,0,11,56,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,138,"        return millisOfSecond().set(instant, millisOfSecond);
",0,0,0,2,4,1,8,0,0,8,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,163,"        instant = hourOfDay().set(instant, hourOfDay);
",2,0,0,2,4,0,8,0,0,11,46,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,164,"        instant = minuteOfHour().set(instant, minuteOfHour);
",2,0,0,2,4,0,8,0,0,11,52,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,165,"        instant = secondOfMinute().set(instant, secondOfMinute);
",2,0,0,2,4,0,8,0,0,11,56,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,166,"        return millisOfSecond().set(instant, millisOfSecond);
",0,0,0,2,4,1,8,0,0,8,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,183,"        int size = partial.size();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,184,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,185,"            int value = values[i];
",2,0,1,1,2,0,0,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,186,"            DateTimeField field = partial.getField(i);
",2,0,0,1,2,0,6,2,0,10,42,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,187,"            if (value < field.getMinimumValue()) {
",2,1,0,2,5,0,4,0,0,7,38,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,188,"                throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,192,"            if (value > field.getMaximumValue()) {
",2,1,0,2,5,0,4,0,0,7,38,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,193,"                throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,199,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,200,"            int value = values[i];
",2,0,1,1,2,0,0,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,201,"            DateTimeField field = partial.getField(i);
",2,0,0,1,2,0,6,2,0,10,42,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,202,"            if (value < field.getMinimumValue(partial, values)) {
",2,1,0,2,5,0,8,0,0,11,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,203,"                throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,207,"            if (value > field.getMaximumValue(partial, values)) {
",2,1,0,2,5,0,8,0,0,11,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,208,"                throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,213,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,223,"        int size = partial.size();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,224,"        int[] values = new int[size];
",2,0,1,2,4,0,0,0,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,225,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,226,"            values[i] = partial.getFieldType(i).getField(this).get(instant);
",0,0,1,4,8,0,12,0,0,17,64,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,228,"        return values;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,239,"        for (int i = 0, isize = partial.size(); i < isize; i++) {
",10,1,0,2,5,0,4,0,0,16,57,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,240,"            instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));
",2,0,0,4,8,0,18,0,0,21,83,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,242,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,255,"        int size = period.size();
",2,0,0,1,2,0,4,0,0,6,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,256,"        int[] values = new int[size];
",2,0,1,2,4,0,0,0,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,257,"        if (startInstant != endInstant) {
",4,1,0,1,3,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,258,"            for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,259,"                DurationField field = period.getFieldType(i).getField(this);
",2,0,0,2,4,0,8,2,0,12,60,8,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,260,"                int value = field.getDifference(endInstant, startInstant);
",2,0,0,1,2,0,8,0,0,10,58,9,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,261,"                startInstant = field.add(startInstant, value);
",2,0,0,1,2,0,8,0,0,11,46,8,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,262,"                values[i] = value;
",2,0,1,1,2,0,0,0,0,7,18,8,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,265,"        return values;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,276,"        int size = period.size();
",2,0,0,1,2,0,4,0,0,6,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,277,"        int[] values = new int[size];
",2,0,1,2,4,0,0,0,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,278,"        if (duration != 0) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,279,"            long current = 0;
",2,0,0,0,0,0,0,0,0,2,17,7,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,280,"            for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,281,"                DurationField field = period.getFieldType(i).getField(this);
",2,0,0,2,4,0,8,2,0,12,60,8,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,282,"                if (field.isPrecise()) {
",0,0,0,2,5,0,4,0,0,4,24,9,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,283,"                    int value = field.getDifference(duration, current);
",2,0,0,1,2,0,8,0,0,10,51,11,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,284,"                    current = field.add(current, value);
",2,0,0,1,2,0,8,0,0,11,36,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,285,"                    values[i] = value;
",2,0,1,1,2,0,0,0,0,7,18,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,289,"        return values;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,301,"        if (scalar != 0 && period != null) {
",4,3,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,302,"            for (int i = 0, isize = period.size(); i < isize; i++) {
",10,1,0,2,5,0,4,0,0,16,56,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,303,"                long value = period.getValue(i); // use long to allow for multiplication (fits OK)
",2,0,0,2,4,0,6,0,0,8,82,9,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,304,"                if (value != 0) {
",2,1,0,1,3,0,0,0,0,3,17,8,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,305,"                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);
",6,1,0,3,6,0,12,0,0,20,77,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,309,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,322,"        if (duration == 0 || scalar == 0) {
",4,3,0,1,3,0,0,0,0,7,35,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,323,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,325,"        long add = FieldUtils.safeMultiply(duration, scalar);
",2,0,0,1,2,0,8,0,0,10,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,326,"        return FieldUtils.safeAdd(instant, add);
",0,0,0,1,2,1,8,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,337,"        return UnsupportedDurationField.getInstance(DurationFieldType.millis());
",0,0,0,2,4,1,8,0,0,8,72,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,346,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfSecond(), millis());
",0,0,0,3,6,1,10,0,0,10,90,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,355,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfDay(), millis());
",0,0,0,3,6,1,10,0,0,10,87,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,366,"        return UnsupportedDurationField.getInstance(DurationFieldType.seconds());
",0,0,0,2,4,1,8,0,0,8,73,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,375,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfMinute(), seconds());
",0,0,0,3,6,1,10,0,0,10,91,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,384,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfDay(), seconds());
",0,0,0,3,6,1,10,0,0,10,88,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,395,"        return UnsupportedDurationField.getInstance(DurationFieldType.minutes());
",0,0,0,2,4,1,8,0,0,8,73,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,404,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfHour(), minutes());
",0,0,0,3,6,1,10,0,0,10,89,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,413,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfDay(), minutes());
",0,0,0,3,6,1,10,0,0,10,88,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,424,"        return UnsupportedDurationField.getInstance(DurationFieldType.hours());
",0,0,0,2,4,1,8,0,0,8,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,433,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfDay(), hours());
",0,0,0,3,6,1,10,0,0,10,84,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,442,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfDay(), hours());
",0,0,0,3,6,1,10,0,0,10,89,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,453,"        return UnsupportedDurationField.getInstance(DurationFieldType.halfdays());
",0,0,0,2,4,1,8,0,0,8,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,462,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfHalfday(), hours());
",0,0,0,3,6,1,10,0,0,10,88,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,471,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfHalfday(), hours());
",0,0,0,3,6,1,10,0,0,10,93,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,480,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.halfdayOfDay(), halfdays());
",0,0,0,3,6,1,10,0,0,10,90,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,491,"        return UnsupportedDurationField.getInstance(DurationFieldType.days());
",0,0,0,2,4,1,8,0,0,8,70,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,504,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfWeek(), days());
",0,0,0,3,6,1,10,0,0,10,83,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,513,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfMonth(), days());
",0,0,0,3,6,1,10,0,0,10,84,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,522,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfYear(), days());
",0,0,0,3,6,1,10,0,0,10,83,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,533,"        return UnsupportedDurationField.getInstance(DurationFieldType.weeks());
",0,0,0,2,4,1,8,0,0,8,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,542,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekOfWeekyear(), weeks());
",0,0,0,3,6,1,10,0,0,10,89,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,553,"        return UnsupportedDurationField.getInstance(DurationFieldType.weekyears());
",0,0,0,2,4,1,8,0,0,8,75,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,562,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyear(), weekyears());
",0,0,0,3,6,1,10,0,0,10,87,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,571,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyearOfCentury(), weekyears());
",0,0,0,3,6,1,10,0,0,10,96,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,582,"        return UnsupportedDurationField.getInstance(DurationFieldType.months());
",0,0,0,2,4,1,8,0,0,8,72,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,591,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.monthOfYear(), months());
",0,0,0,3,6,1,10,0,0,10,87,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,602,"        return UnsupportedDurationField.getInstance(DurationFieldType.years());
",0,0,0,2,4,1,8,0,0,8,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,611,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.year(), years());
",0,0,0,3,6,1,10,0,0,10,79,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,620,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfEra(), years());
",0,0,0,3,6,1,10,0,0,10,84,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,629,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfCentury(), years());
",0,0,0,3,6,1,10,0,0,10,88,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,640,"        return UnsupportedDurationField.getInstance(DurationFieldType.centuries());
",0,0,0,2,4,1,8,0,0,8,75,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,649,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.centuryOfEra(), centuries());
",0,0,0,3,6,1,10,0,0,10,91,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,20,669,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.era(), eras());
",0,0,0,3,6,1,10,0,0,10,77,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,691,"            throw new IllegalArgumentException(""Id must not be null"");
",0,0,0,1,2,0,0,2,0,4,58,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,145,"                        } catch (RuntimeException ex) {
",2,0,0,1,4,0,0,2,0,4,31,14,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,149,"                            temp = forTimeZone(TimeZone.getDefault());
",2,0,0,2,4,0,6,0,0,9,42,14,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,151,"                    } catch (IllegalArgumentException ex) {
",2,0,0,1,4,0,0,2,0,4,39,12,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,155,"                        temp = UTC;
",4,0,0,0,0,0,0,0,0,5,11,12,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,174,"        SecurityManager sm = System.getSecurityManager();
",2,0,0,1,2,0,4,2,0,8,49,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,175,"        if (sm != null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,176,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setDefault""));
",0,0,0,2,4,0,4,2,0,7,70,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,178,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,179,"            throw new IllegalArgumentException(""The datetime zone must not be null"");
",0,0,0,1,2,0,0,2,0,4,73,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,181,"        synchronized(DateTimeZone.class) {
",0,0,0,1,3,0,0,2,0,2,34,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,182,"            cDefault = zone;
",4,0,0,0,0,0,0,0,0,5,16,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,183,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,184,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,205,"            return getDefault();
",0,0,0,1,2,1,2,0,0,2,20,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,208,"            return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,214,"        if (id.startsWith(""+"") || id.startsWith(""-"")) {
",0,1,0,3,7,0,8,0,0,11,47,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,215,"            int offset = parseOffset(id);
",2,0,0,1,2,0,4,0,0,6,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,216,"            if (offset == 0L) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,217,"                return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,219,"                id = printOffset(offset);
",2,0,0,1,2,0,4,0,0,7,25,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,220,"                return fixedOffsetZone(id, offset);
",0,0,0,1,2,1,6,0,0,6,35,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,223,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");
",2,1,0,1,2,0,0,2,0,7,90,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,237,"        return forOffsetHoursMinutes(hoursOffset, 0);
",0,0,0,1,2,1,4,0,0,4,45,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,254,"        if (hoursOffset == 0 && minutesOffset == 0) {
",4,3,0,1,3,0,0,0,0,7,45,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,255,"            return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,257,"        if (minutesOffset < 0 || minutesOffset > 59) {
",4,3,0,1,3,0,0,0,0,7,46,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,258,"            throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);
",2,1,0,1,2,0,0,2,0,6,77,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,260,"        int offset = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,262,"            int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);
",2,0,0,1,2,0,6,0,0,8,62,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,263,"            if (hoursInMinutes < 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,264,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);
",4,0,0,1,2,0,6,0,0,12,67,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,266,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);
",2,0,0,1,2,0,8,0,0,11,66,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,268,"            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
",6,0,0,1,2,0,6,0,0,13,85,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,271,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,269,"        } catch (ArithmeticException ex) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,270,"            throw new IllegalArgumentException(""Offset is too large"");
",0,0,0,1,2,0,0,2,0,3,58,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,272,"        return forOffsetMillis(offset);
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,282,"        String id = printOffset(millisOffset);
",2,0,0,1,2,0,4,2,0,8,38,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,283,"        return fixedOffsetZone(id, millisOffset);
",0,0,0,1,2,1,6,0,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,302,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,303,"            return getDefault();
",0,0,0,1,2,1,2,0,0,2,20,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,305,"        final String id = zone.getID();
",2,0,0,1,2,1,4,2,0,9,31,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,306,"        if (id.equals(""UTC"")) {
",0,0,0,2,5,0,4,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,307,"            return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,311,"        DateTimeZone dtz = null;
",2,0,0,0,0,0,0,2,0,4,24,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,312,"        String convId = getConvertedId(id);
",2,0,0,1,2,0,4,2,0,8,35,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,313,"        if (convId != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,314,"            dtz = cProvider.getZone(convId);
",2,0,0,1,2,0,6,0,0,9,32,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,316,"        if (dtz == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,317,"            dtz = cProvider.getZone(id);
",2,0,0,1,2,0,6,0,0,9,28,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,319,"        if (dtz != null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,320,"            return dtz;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,324,"        if (convId == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,325,"            convId = zone.getDisplayName();
",2,0,0,1,2,0,4,0,0,7,31,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,326,"            if (convId.startsWith(""GMT+"") || convId.startsWith(""GMT-"")) {
",0,1,0,3,7,0,8,0,0,11,61,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,327,"                convId = convId.substring(3);
",2,0,0,1,2,0,4,0,0,7,29,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,328,"                int offset = parseOffset(convId);
",2,0,0,1,2,0,4,0,0,6,33,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,329,"                if (offset == 0L) {
",2,1,0,1,3,0,0,0,0,3,19,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,330,"                    return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,11,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,332,"                    convId = printOffset(offset);
",2,0,0,1,2,0,4,0,0,7,29,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,333,"                    return fixedOffsetZone(convId, offset);
",0,0,0,1,2,1,6,0,0,6,39,11,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,337,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");
",2,1,0,1,2,0,0,2,0,7,90,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,349,"        if (offset == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,350,"            return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,352,"        if (iFixedOffsetCache == null) {
",2,1,0,1,3,0,0,0,0,3,32,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,353,"            iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();
",2,0,0,1,2,0,0,8,0,11,71,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,356,"        Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);
",2,0,0,1,2,0,6,4,0,12,56,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,357,"        if (ref != null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,358,"            zone = ref.get();
",2,0,0,1,2,0,4,0,0,7,17,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,359,"            if (zone != null) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,360,"                return zone;
",2,0,0,0,0,1,0,0,0,2,12,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,363,"        zone = new FixedDateTimeZone(id, null, offset, offset);
",8,0,0,1,2,0,0,2,0,12,55,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,364,"        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));
",2,0,0,2,4,0,6,4,0,12,65,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,365,"        return zone;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,387,"        return cProvider;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,401,"        SecurityManager sm = System.getSecurityManager();
",2,0,0,1,2,0,4,2,0,8,49,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,402,"        if (sm != null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,403,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setProvider""));
",0,0,0,2,4,0,4,2,0,7,71,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,405,"        setProvider0(provider);
",0,0,0,1,2,0,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,406,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,420,"            throw new IllegalArgumentException
",0,0,0,0,0,0,0,2,0,2,34,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,424,"            throw new IllegalArgumentException(""The provider doesn't support UTC"");
",0,0,0,1,2,0,0,2,0,3,71,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,427,"            throw new IllegalArgumentException(""Invalid UTC zone provided"");
",0,0,0,1,2,0,0,2,0,3,64,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,450,"                    provider = (Provider) Class.forName(providerClass).newInstance();
",2,0,0,3,6,0,8,2,0,13,65,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,454,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,451,"                } catch (Exception ex) {
",2,0,0,1,4,0,0,2,0,4,24,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,452,"                    Thread thread = Thread.currentThread();
",2,0,0,1,2,0,4,2,0,8,39,11,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,453,"                    thread.getThreadGroup().uncaughtException(thread, ex);
",0,0,0,2,4,0,10,0,0,10,54,12,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,456,"        } catch (SecurityException ex) {
",2,0,0,1,4,0,0,2,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,463,"            } catch (Exception ex) {
",2,0,0,1,4,0,0,2,0,4,24,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,464,"                Thread thread = Thread.currentThread();
",2,0,0,1,2,0,4,2,0,8,39,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,465,"                thread.getThreadGroup().uncaughtException(thread, ex);
",0,0,0,2,4,0,10,0,0,10,54,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,470,"            provider = new UTCProvider();
",2,0,0,1,2,0,0,2,0,5,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,486,"        return cNameProvider;
",2,0,0,0,0,1,0,0,0,2,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,500,"        SecurityManager sm = System.getSecurityManager();
",2,0,0,1,2,0,4,2,0,8,49,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,501,"        if (sm != null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,502,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setNameProvider""));
",0,0,0,2,4,0,4,2,0,7,75,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,504,"        setNameProvider0(nameProvider);
",0,0,0,1,2,0,4,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,505,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,534,"                    nameProvider = (NameProvider) Class.forName(providerClass).newInstance();
",2,0,0,3,6,0,8,2,0,13,73,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,538,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,535,"                } catch (Exception ex) {
",2,0,0,1,4,0,0,2,0,4,24,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,536,"                    Thread thread = Thread.currentThread();
",2,0,0,1,2,0,4,2,0,8,39,11,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,537,"                    thread.getThreadGroup().uncaughtException(thread, ex);
",0,0,0,2,4,0,10,0,0,10,54,12,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,540,"        } catch (SecurityException ex) {
",2,0,0,1,4,0,0,2,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,559,"        Map<String, String> map = cZoneIdConversion;
",4,0,0,0,0,0,0,6,0,10,44,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,560,"        if (map == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,562,"            map = new HashMap<String, String>();
",2,0,0,1,2,0,0,6,0,9,36,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,563,"            map.put(""GMT"", ""UTC"");
",0,0,0,1,2,0,4,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,564,"            map.put(""WET"", ""WET"");
",0,0,0,1,2,0,4,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,565,"            map.put(""CET"", ""CET"");
",0,0,0,1,2,0,4,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,566,"            map.put(""MET"", ""CET"");
",0,0,0,1,2,0,4,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,567,"            map.put(""ECT"", ""CET"");
",0,0,0,1,2,0,4,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,568,"            map.put(""EET"", ""EET"");
",0,0,0,1,2,0,4,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,569,"            map.put(""MIT"", ""Pacific/Apia"");
",0,0,0,1,2,0,4,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,570,"            map.put(""HST"", ""Pacific/Honolulu"");  // JDK 1.1 compatible
",0,0,0,1,2,0,4,0,0,6,58,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,571,"            map.put(""AST"", ""America/Anchorage"");
",0,0,0,1,2,0,4,0,0,6,36,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,572,"            map.put(""PST"", ""America/Los_Angeles"");
",0,0,0,1,2,0,4,0,0,6,38,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,573,"            map.put(""MST"", ""America/Denver"");  // JDK 1.1 compatible
",0,0,0,1,2,0,4,0,0,6,56,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,574,"            map.put(""PNT"", ""America/Phoenix"");
",0,0,0,1,2,0,4,0,0,6,34,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,575,"            map.put(""CST"", ""America/Chicago"");
",0,0,0,1,2,0,4,0,0,6,34,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,576,"            map.put(""EST"", ""America/New_York"");  // JDK 1.1 compatible
",0,0,0,1,2,0,4,0,0,6,58,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,577,"            map.put(""IET"", ""America/Indiana/Indianapolis"");
",0,0,0,1,2,0,4,0,0,6,47,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,578,"            map.put(""PRT"", ""America/Puerto_Rico"");
",0,0,0,1,2,0,4,0,0,6,38,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,579,"            map.put(""CNT"", ""America/St_Johns"");
",0,0,0,1,2,0,4,0,0,6,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,580,"            map.put(""AGT"", ""America/Argentina/Buenos_Aires"");
",0,0,0,1,2,0,4,0,0,6,49,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,581,"            map.put(""BET"", ""America/Sao_Paulo"");
",0,0,0,1,2,0,4,0,0,6,36,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,582,"            map.put(""ART"", ""Africa/Cairo"");
",0,0,0,1,2,0,4,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,583,"            map.put(""CAT"", ""Africa/Harare"");
",0,0,0,1,2,0,4,0,0,6,32,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,584,"            map.put(""EAT"", ""Africa/Addis_Ababa"");
",0,0,0,1,2,0,4,0,0,6,37,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,585,"            map.put(""NET"", ""Asia/Yerevan"");
",0,0,0,1,2,0,4,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,586,"            map.put(""PLT"", ""Asia/Karachi"");
",0,0,0,1,2,0,4,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,587,"            map.put(""IST"", ""Asia/Kolkata"");
",0,0,0,1,2,0,4,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,588,"            map.put(""BST"", ""Asia/Dhaka"");
",0,0,0,1,2,0,4,0,0,6,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,589,"            map.put(""VST"", ""Asia/Ho_Chi_Minh"");
",0,0,0,1,2,0,4,0,0,6,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,590,"            map.put(""CTT"", ""Asia/Shanghai"");
",0,0,0,1,2,0,4,0,0,6,32,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,591,"            map.put(""JST"", ""Asia/Tokyo"");
",0,0,0,1,2,0,4,0,0,6,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,592,"            map.put(""ACT"", ""Australia/Darwin"");
",0,0,0,1,2,0,4,0,0,6,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,593,"            map.put(""AET"", ""Australia/Sydney"");
",0,0,0,1,2,0,4,0,0,6,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,594,"            map.put(""SST"", ""Pacific/Guadalcanal"");
",0,0,0,1,2,0,4,0,0,6,38,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,595,"            map.put(""NST"", ""Pacific/Auckland"");
",0,0,0,1,2,0,4,0,0,6,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,596,"            cZoneIdConversion = map;
",4,0,0,0,0,0,0,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,598,"        return map.get(id);
",0,0,0,1,2,1,6,0,0,6,19,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,604,"        Chronology chrono = new BaseChronology() {
",2,0,0,1,3,0,0,4,0,6,42,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,618,"        return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);
",0,0,0,4,8,1,10,0,0,11,72,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,631,"        StringBuffer buf = new StringBuffer();
",2,0,0,1,2,0,0,4,0,6,38,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,632,"        if (offset >= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,633,"            buf.append('+');
",0,0,0,1,2,0,4,0,0,5,16,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,635,"            buf.append('-');
",0,0,0,1,2,0,4,0,0,5,16,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,636,"            offset = -offset;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,639,"        int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,0,0,0,0,0,0,9,55,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,640,"        FormatUtils.appendPaddedInteger(buf, hours, 2);
",0,0,0,1,2,0,8,0,0,8,47,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,641,"        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,1,2,0,0,0,0,10,58,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,643,"        int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,9,59,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,644,"        buf.append(':');
",0,0,0,1,2,0,4,0,0,5,16,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,645,"        FormatUtils.appendPaddedInteger(buf, minutes, 2);
",0,0,0,1,2,0,8,0,0,8,49,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,646,"        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,10,56,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,647,"        if (offset == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,648,"            return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,651,"        int seconds = offset / DateTimeConstants.MILLIS_PER_SECOND;
",8,1,0,0,0,0,0,0,0,9,59,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,652,"        buf.append(':');
",0,0,0,1,2,0,4,0,0,5,16,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,653,"        FormatUtils.appendPaddedInteger(buf, seconds, 2);
",0,0,0,1,2,0,8,0,0,8,49,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,654,"        offset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;
",8,1,0,0,0,0,0,0,0,10,56,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,655,"        if (offset == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,656,"            return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,659,"        buf.append('.');
",0,0,0,1,2,0,4,0,0,5,16,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,660,"        FormatUtils.appendPaddedInteger(buf, offset, 3);
",0,0,0,1,2,0,8,0,0,8,48,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,661,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,670,"        if (cOffsetFormatter == null) {
",2,1,0,1,3,0,0,0,0,3,31,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,671,"            cOffsetFormatter = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,49,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,675,"        return cOffsetFormatter;
",2,0,0,0,0,1,0,0,0,2,24,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,729,"        return getShortName(instant, null);
",0,0,0,1,2,1,4,0,0,5,35,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,744,"        if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,745,"            locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,747,"        String nameKey = getNameKey(instant);
",2,0,0,1,2,0,4,2,0,8,37,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,748,"        if (nameKey == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,749,"            return iID;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,751,"        String name = cNameProvider.getShortName(locale, iID, nameKey);
",2,0,0,1,2,0,10,2,0,14,63,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,752,"        if (name != null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,753,"            return name;
",2,0,0,0,0,1,0,0,0,2,12,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,755,"        return printOffset(getOffset(instant));
",0,0,0,2,4,1,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,769,"        return getName(instant, null);
",0,0,0,1,2,1,4,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,784,"        if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,785,"            locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,787,"        String nameKey = getNameKey(instant);
",2,0,0,1,2,0,4,2,0,8,37,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,788,"        if (nameKey == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,789,"            return iID;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,791,"        String name = cNameProvider.getName(locale, iID, nameKey);
",2,0,0,1,2,0,10,2,0,14,58,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,792,"        if (name != null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,793,"            return name;
",2,0,0,0,0,1,0,0,0,2,12,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,795,"        return printOffset(getOffset(instant));
",0,0,0,2,4,1,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,813,"        if (instant == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,814,"            return getOffset(DateTimeUtils.currentTimeMillis());
",0,0,0,2,4,1,6,0,0,6,52,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,816,"        return getOffset(instant.getMillis());
",0,0,0,2,4,1,6,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,844,"        return getOffset(instant) == getStandardOffset(instant);
",0,1,0,2,4,1,8,0,0,9,56,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,890,"            if ((offsetLocal - offsetAdjusted) < 0) {
",4,2,0,2,5,0,0,0,0,6,41,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,894,"                long nextLocal = nextTransition(instantAdjusted);
",2,0,0,1,2,0,4,0,0,6,49,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,895,"                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
",6,1,0,1,2,0,2,0,0,9,66,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,896,"                if (nextLocal != nextAdjusted) {
",4,1,0,1,3,0,0,0,0,5,32,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,897,"                    return offsetLocal;
",2,0,0,0,0,1,0,0,0,2,19,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,899,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,901,"            long prev = previousTransition(instantAdjusted);
",2,0,0,1,2,0,4,0,0,6,48,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,902,"            if (prev < instantAdjusted) {
",4,1,0,1,3,0,0,0,0,5,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,903,"                int offsetPrev = getOffset(prev);
",2,0,0,1,2,0,4,0,0,6,33,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,904,"                int diff = offsetPrev - offsetLocal;
",6,1,0,0,0,0,0,0,0,7,36,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,905,"                if (instantAdjusted - prev <= diff) {
",6,2,0,1,3,0,0,0,0,8,37,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,906,"                    return offsetPrev;
",2,0,0,0,0,1,0,0,0,2,18,11,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,924,"        int offset = getOffset(instantUTC);
",2,0,0,1,2,0,4,0,0,6,35,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,925,"        long instantLocal = instantUTC + offset;
",6,1,0,0,0,0,0,0,0,7,40,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,927,"        if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {
",8,5,0,3,7,0,0,0,0,13,68,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,928,"            throw new ArithmeticException(""Adding time zone offset caused overflow"");
",0,0,0,1,2,0,0,2,0,3,73,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,930,"        return instantLocal;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,951,"        int offsetOriginal = getOffset(originalInstantUTC);
",2,0,0,1,2,0,4,0,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,952,"        long instantUTC = instantLocal - offsetOriginal;
",6,1,0,0,0,0,0,0,0,7,48,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,953,"        int offsetLocalFromOriginal = getOffset(instantUTC);
",2,0,0,1,2,0,4,0,0,6,52,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,954,"        if (offsetLocalFromOriginal == offsetOriginal) {
",4,1,0,1,3,0,0,0,0,5,48,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,955,"            return instantUTC;
",2,0,0,0,0,1,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,957,"        return convertLocalToUTC(instantLocal, strict);
",0,0,0,1,2,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,974,"        int offsetLocal = getOffset(instantLocal);
",2,0,0,1,2,0,4,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,976,"        int offset = getOffset(instantLocal - offsetLocal);
",6,1,0,1,2,0,2,0,0,9,51,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,978,"        if (offsetLocal != offset) {
",4,1,0,1,3,0,0,0,0,5,28,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,982,"            if (strict || offsetLocal < 0) {
",4,2,0,1,3,0,0,0,0,6,32,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,984,"                long nextLocal = nextTransition(instantLocal - offsetLocal);
",6,1,0,1,2,0,2,0,0,9,60,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,985,"                if (nextLocal == (instantLocal - offsetLocal)) {
",6,2,0,2,5,0,0,0,0,8,48,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,986,"                    nextLocal = Long.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,7,27,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,988,"                long nextAdjusted = nextTransition(instantLocal - offset);
",6,1,0,1,2,0,2,0,0,9,58,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,989,"                if (nextAdjusted == (instantLocal - offset)) {
",6,2,0,2,5,0,0,0,0,8,46,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,990,"                    nextAdjusted = Long.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,7,30,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,992,"                if (nextLocal != nextAdjusted) {
",4,1,0,1,3,0,0,0,0,5,32,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,994,"                    if (strict) {
",2,0,0,1,3,0,0,0,0,2,13,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,996,"                        throw new IllegalArgumentException(""Illegal instant due to time zone offset transition: "" +
",0,1,0,0,1,0,0,2,0,4,91,13,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,1003,"                        offset = offsetLocal;
",4,0,0,0,0,0,0,0,0,5,21,12,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,1009,"        long instantUTC = instantLocal - offset;
",6,1,0,0,0,0,0,0,0,7,40,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,1011,"        if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {
",8,5,0,3,7,0,0,0,0,13,69,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,1012,"            throw new ArithmeticException(""Subtracting time zone offset caused overflow"");
",0,0,0,1,2,0,0,2,0,3,78,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,1014,"        return instantUTC;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,1028,"        if (newZone == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,1029,"            newZone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,36,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,1031,"        if (newZone == this) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,1032,"            return oldInstant;
",2,0,0,0,0,1,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,1034,"        long instantLocal = convertUTCToLocal(oldInstant);
",2,0,0,1,2,0,4,0,0,6,50,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,1035,"        return newZone.convertLocalToUTC(instantLocal, false, oldInstant);
",0,0,0,1,2,1,8,0,0,9,66,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,1145,"        if (isFixed()) {
",0,0,0,2,5,0,2,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,1146,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,1149,"            localDateTime.toDateTime(this);
",0,0,0,1,2,0,4,0,0,4,31,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,1150,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,1151,"        } catch (IllegalArgumentException ex) {
",2,0,0,1,4,0,0,2,0,4,39,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,1152,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,1164,"        long before = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
",8,2,0,1,2,0,2,0,0,12,81,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,1165,"        long after = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
",8,2,0,1,2,0,2,0,0,12,80,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,1166,"        if (before == after) {
",4,1,0,1,3,0,0,0,0,5,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,1167,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,1169,"        long local = convertUTCToLocal(instant);
",2,0,0,1,2,0,4,0,0,6,40,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,1170,"        return convertLocalToUTC(local, false, earlierOrLater ? after : before);
",6,0,0,1,2,1,4,0,0,11,72,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,1210,"        return java.util.TimeZone.getTimeZone(iID);
",6,0,0,1,2,1,4,0,0,10,43,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,1235,"        return getID();
",0,0,0,1,2,1,2,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,20,1245,"        return new Stub(iID);
",2,0,0,1,2,1,0,2,0,4,21,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,82,"    private UnsupportedDateTimeField(DateTimeFieldType type, DurationField durationField) {
",6,0,0,1,3,1,0,4,0,11,87,2,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,83,"        if (type == null || durationField == null) {
",4,3,0,1,3,0,0,0,0,7,44,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,84,"            throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,8,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,86,"        iType = type;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,87,"        iDurationField = durationField;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,88,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,55,"        if (cCache == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,56,"            cCache = new HashMap<DateTimeFieldType, UnsupportedDateTimeField>(7);
",2,0,0,1,2,0,0,6,0,9,69,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,57,"            field = null;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,59,"            field = cCache.get(type);
",2,0,0,1,2,0,6,0,0,9,25,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,60,"            if (field != null && field.getDurationField() != durationField) {
",4,3,0,2,5,0,4,0,0,11,65,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,61,"                field = null;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,64,"        if (field == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,65,"            field = new UnsupportedDateTimeField(type, durationField);
",6,0,0,1,2,0,0,2,0,9,58,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,66,"            cCache.put(type, field);
",0,0,0,1,2,0,8,0,0,8,24,7,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,68,"        return field;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,95,"        return iType;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,99,"        return iType.getName();
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,108,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,117,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,126,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,135,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,144,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,153,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,162,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,171,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,180,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,189,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,198,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,207,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,216,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,225,"        return getDurationField().add(instant, value);
",0,0,0,2,4,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,234,"        return getDurationField().add(instant, value);
",0,0,0,2,4,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,243,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,252,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,261,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,270,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,279,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,75,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,288,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,81,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,297,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,306,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,315,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,324,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,333,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,343,"        return iDurationField;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,352,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,361,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,370,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,379,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,388,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,397,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,406,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,415,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,424,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,433,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,442,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,451,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,460,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,469,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,478,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,487,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,496,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,505,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,514,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,523,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,533,"        return ""UnsupportedDateTimeField"";
",0,0,0,0,0,1,0,0,0,1,34,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,540,"        return getInstance(iType, iDurationField);
",0,0,0,1,2,1,6,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,20,544,"        return new UnsupportedOperationException(iType + "" field is unsupported"");
",2,1,0,1,2,1,0,2,0,6,74,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,20,79,"        return iType;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,20,83,"        return iType.getName();
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,20,101,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,20,110,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,20,119,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,20,128,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,20,137,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,20,146,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,20,155,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,20,164,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,20,173,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,20,182,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,20,191,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,20,200,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,20,209,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,20,227,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,20,238,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,20,239,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,20,240,"        } else if (obj instanceof UnsupportedDurationField) {
",2,0,0,1,4,0,0,2,0,4,53,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,20,241,"            UnsupportedDurationField other = (UnsupportedDurationField) obj;
",4,0,0,1,2,0,0,4,0,8,64,7,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,20,242,"            if (other.getName() == null) {
",0,1,0,2,5,0,4,0,0,5,30,7,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,20,243,"                return (getName() == null);
",0,1,0,2,4,1,2,0,0,4,27,10,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,20,245,"            return (other.getName().equals(getName()));
",0,0,0,4,8,1,8,0,0,8,43,9,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,20,247,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,20,256,"        return getName().hashCode();
",0,0,0,2,4,1,4,0,0,4,28,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,20,265,"        return ""UnsupportedDurationField["" + getName() + ']';
",0,1,0,2,4,1,2,0,0,5,53,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,20,272,"        return getInstance(iType);
",0,0,0,1,2,1,4,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,20,276,"        return new UnsupportedOperationException(iType + "" field is unsupported"");
",2,1,0,1,2,1,0,2,0,6,74,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,20,32,"public final class UnsupportedDurationField extends DurationField implements Serializable {
",2,0,0,0,1,2,0,4,0,8,91,1,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));
",0,0,0,3,6,0,12,0,0,14,79,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,109,"        iDateTimeFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,110,"        iDurationFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,111,"        iFieldName = fieldType.getName();
",2,0,0,1,2,0,4,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,112,"        iNumberValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,113,"        iStringValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,114,"        iLowerBound = lowerBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,115,"        iUpperBound = upperBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,116,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,117,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,129,"        super(createMessage(fieldType.getName(), value, null, null, explain));
",0,0,0,3,6,0,10,0,0,12,70,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,130,"        iDateTimeFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,131,"        iDurationFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,132,"        iFieldName = fieldType.getName();
",2,0,0,1,2,0,4,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,133,"        iNumberValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,134,"        iStringValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,135,"        iLowerBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,136,"        iUpperBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,137,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,138,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,150,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));
",0,0,0,3,6,0,12,0,0,14,79,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,151,"        iDateTimeFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,152,"        iDurationFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,153,"        iFieldName = fieldType.getName();
",2,0,0,1,2,0,4,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,154,"        iNumberValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,155,"        iStringValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,156,"        iLowerBound = lowerBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,157,"        iUpperBound = upperBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,158,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,159,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,171,"        super(createMessage(fieldName, value, lowerBound, upperBound, null));
",0,0,0,2,4,0,10,0,0,12,69,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,172,"        iDateTimeFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,173,"        iDurationFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,174,"        iFieldName = fieldName;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,175,"        iNumberValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,176,"        iStringValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,177,"        iLowerBound = lowerBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,178,"        iUpperBound = upperBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,179,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,180,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,189,"        super(createMessage(fieldType.getName(), value));
",0,0,0,3,6,0,8,0,0,8,49,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,190,"        iDateTimeFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,191,"        iDurationFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,192,"        iFieldName = fieldType.getName();
",2,0,0,1,2,0,4,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,193,"        iStringValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,194,"        iNumberValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,195,"        iLowerBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,196,"        iUpperBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,197,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,198,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,207,"        super(createMessage(fieldType.getName(), value));
",0,0,0,3,6,0,8,0,0,8,49,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,208,"        iDateTimeFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,209,"        iDurationFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,210,"        iFieldName = fieldType.getName();
",2,0,0,1,2,0,4,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,211,"        iStringValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,212,"        iNumberValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,213,"        iLowerBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,214,"        iUpperBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,215,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,216,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,225,"        super(createMessage(fieldName, value));
",0,0,0,2,4,0,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,226,"        iDateTimeFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,227,"        iDurationFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,228,"        iFieldName = fieldName;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,229,"        iStringValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,230,"        iNumberValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,231,"        iLowerBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,232,"        iUpperBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,233,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,234,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,41,"        StringBuffer buf = new StringBuffer()
",2,0,0,1,2,0,0,4,0,6,37,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,44,"        if (lowerBound == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,45,"            if (upperBound == null) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,46,"                buf.append(""is not supported"");
",0,0,0,1,2,0,4,0,0,5,31,9,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,48,"                buf.append(""must not be larger than "").append(upperBound);
",0,0,0,2,4,0,8,0,0,9,58,9,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,50,"        } else if (upperBound == null) {
",2,1,0,1,4,0,0,0,0,3,32,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,51,"            buf.append(""must not be smaller than "").append(lowerBound);
",0,0,0,2,4,0,8,0,0,9,59,8,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,53,"            buf.append(""must be in the range ["")
",0,0,0,1,3,0,4,0,0,5,36,12,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,59,"        if (explain != null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,60,"            buf.append("": "").append(explain);
",0,0,0,2,4,0,8,0,0,9,33,7,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,63,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,74,"        StringBuffer buf = new StringBuffer().append(""Value "");
",2,0,0,2,4,0,2,4,0,9,55,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,76,"        if (value == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,77,"            buf.append(""null"");
",0,0,0,1,2,0,4,0,0,5,19,7,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,79,"            buf.append('""');
",0,0,0,1,2,0,4,0,0,5,16,7,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,80,"            buf.append(value);
",0,0,0,1,2,0,6,0,0,6,18,7,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,81,"            buf.append('""');
",0,0,0,1,2,0,4,0,0,5,16,7,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,84,"        buf.append("" for "").append(fieldName).append(' ').append(""is not supported"");
",0,0,0,4,8,0,12,0,0,15,77,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,86,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,243,"        return iDateTimeFieldType;
",2,0,0,0,0,1,0,0,0,2,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,252,"        return iDurationFieldType;
",2,0,0,0,0,1,0,0,0,2,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,261,"        return iFieldName;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,270,"        return iNumberValue;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,279,"        return iStringValue;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,288,"        String value = iStringValue;
",4,0,0,0,0,0,0,2,0,6,28,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,289,"        if (value == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,290,"            value = String.valueOf(iNumberValue);
",2,0,0,1,2,0,6,0,0,9,37,6,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,292,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,301,"        return iLowerBound;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,310,"        return iUpperBound;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,314,"        return iMessage;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,323,"        if (iMessage == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,324,"            iMessage = message;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,325,"        } else if (message != null) {
",2,1,0,1,4,0,0,0,0,3,29,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,326,"            iMessage = message + "": "" + iMessage;
",6,1,0,0,0,0,0,0,0,9,37,7,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,20,328,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1232,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1233,"            iValue = value;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1234,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1237,"            return iValue.length();
",0,0,0,1,2,1,4,0,0,4,23,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1243,"            buf.append(iValue);
",0,0,0,1,2,0,6,0,0,6,19,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1244,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1249,"            out.write(iValue);
",0,0,0,1,2,0,6,0,0,6,18,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1250,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1253,"            buf.append(iValue);
",0,0,0,1,2,0,6,0,0,6,19,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1254,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1257,"            out.write(iValue);
",0,0,0,1,2,0,6,0,0,6,18,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1258,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1261,"            return iValue.length();
",0,0,0,1,2,1,4,0,0,4,23,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1265,"            if (text.regionMatches(true, position, iValue, 0, iValue.length())) {
",0,0,0,3,7,0,12,0,0,13,69,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1266,"                return position + iValue.length();
",2,1,0,1,2,1,4,0,0,7,34,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1268,"            return ~position;
",2,0,0,0,0,1,0,0,0,3,17,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,116,"        throw new UnsupportedOperationException(""Both printing and parsing not supported"");
",0,0,0,1,2,0,0,2,0,3,83,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,132,"        Object f = getFormatter();
",2,0,0,1,2,0,2,2,0,6,26,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,133,"        if (isPrinter(f)) {
",0,0,0,2,5,0,4,0,0,4,19,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,134,"            return (DateTimePrinter) f;
",2,0,0,1,2,1,0,2,0,4,27,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,136,"        throw new UnsupportedOperationException(""Printing is not supported"");
",0,0,0,1,2,0,0,2,0,3,69,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,152,"        Object f = getFormatter();
",2,0,0,1,2,0,2,2,0,6,26,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,153,"        if (isParser(f)) {
",0,0,0,2,5,0,4,0,0,4,18,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,154,"            return (DateTimeParser) f;
",2,0,0,1,2,1,0,2,0,4,26,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,156,"        throw new UnsupportedOperationException(""Parsing is not supported"");
",0,0,0,1,2,0,0,2,0,3,68,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,167,"        return isFormatter(getFormatter());
",0,0,0,2,4,1,4,0,0,4,35,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,177,"        return isPrinter(getFormatter());
",0,0,0,2,4,1,4,0,0,4,33,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,187,"        return isParser(getFormatter());
",0,0,0,2,4,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,196,"        iFormatter = null;
",2,0,0,0,0,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,197,"        iElementPairs.clear();
",0,0,0,1,2,0,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,198,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,209,"        if (formatter == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,210,"            throw new IllegalArgumentException(""No formatter supplied"");
",0,0,0,1,2,0,0,2,0,3,60,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,212,"        return append0(formatter.getPrinter(), formatter.getParser());
",0,0,0,3,6,1,10,0,0,10,62,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,224,"        checkPrinter(printer);
",0,0,0,1,2,0,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,225,"        return append0(printer, null);
",0,0,0,1,2,1,4,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,237,"        checkParser(parser);
",0,0,0,1,2,0,4,0,0,4,20,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,238,"        return append0(null, parser);
",0,0,0,1,2,1,4,0,0,5,29,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,250,"        checkPrinter(printer);
",0,0,0,1,2,0,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,251,"        checkParser(parser);
",0,0,0,1,2,0,4,0,0,4,20,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,252,"        return append0(printer, parser);
",0,0,0,1,2,1,6,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,273,"        if (printer != null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,274,"            checkPrinter(printer);
",0,0,0,1,2,0,4,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,276,"        if (parsers == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,277,"            throw new IllegalArgumentException(""No parsers supplied"");
",0,0,0,1,2,0,0,2,0,3,58,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,279,"        int length = parsers.length;
",6,0,0,0,0,0,0,0,0,6,28,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,280,"        if (length == 1) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,281,"            if (parsers[0] == null) {
",0,1,1,2,5,0,0,0,0,3,25,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,282,"                throw new IllegalArgumentException(""No parser supplied"");
",0,0,0,1,2,0,0,2,0,3,57,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,284,"            return append0(printer, parsers[0]);
",0,0,1,2,4,1,4,0,0,6,36,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,287,"        DateTimeParser[] copyOfParsers = new DateTimeParser[length];
",2,0,1,2,4,0,0,4,0,8,60,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,289,"        for (i = 0; i < length - 1; i++) {
",8,2,0,1,3,0,0,0,0,12,34,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,290,"            if ((copyOfParsers[i] = parsers[i]) == null) {
",0,1,1,4,9,0,0,0,0,10,46,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,291,"                throw new IllegalArgumentException(""Incomplete parser array"");
",0,0,0,1,2,0,0,2,0,3,62,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,294,"        copyOfParsers[i] = parsers[i];
",0,0,1,2,4,0,0,0,0,9,30,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,296,"        return append0(printer, new MatchingParser(copyOfParsers));
",2,0,0,2,4,1,4,2,0,8,59,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,307,"        checkParser(parser);
",0,0,0,1,2,0,4,0,0,4,20,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,308,"        DateTimeParser[] parsers = new DateTimeParser[] {parser, null};
",4,0,0,3,6,0,0,4,0,8,63,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,309,"        return append0(null, new MatchingParser(parsers));
",2,0,0,2,4,1,2,2,0,8,50,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,319,"        if (parser == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,320,"            throw new IllegalArgumentException(""No parser supplied"");
",0,0,0,1,2,0,0,2,0,3,57,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,322,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,330,"        if (printer == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,331,"            throw new IllegalArgumentException(""No printer supplied"");
",0,0,0,1,2,0,0,2,0,3,58,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,333,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,370,"        if (text == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,371,"            throw new IllegalArgumentException(""Literal must not be null"");
",0,0,0,1,2,0,0,2,0,4,63,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,373,"        switch (text.length()) {
",0,0,0,2,5,0,4,0,0,4,24,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,375,"                return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,377,"                return append0(new CharacterLiteral(text.charAt(0)));
",0,0,0,3,6,1,6,2,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,379,"                return append0(new StringLiteral(text));
",2,0,0,2,4,1,2,2,0,6,40,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,397,"            throw new IllegalArgumentException(""Field type must not be null"");
",0,0,0,1,2,0,0,2,0,4,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,400,"            maxDigits = minDigits;
",4,0,0,0,0,0,0,0,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,403,"            throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,406,"            return append0(new UnpaddedNumber(fieldType, maxDigits, false));
",4,0,0,2,4,1,2,2,0,9,64,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,426,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,427,"            throw new IllegalArgumentException(""Field type must not be null"");
",0,0,0,1,2,0,0,2,0,4,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,429,"        if (numDigits <= 0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,430,"            throw new IllegalArgumentException(""Illegal number of digits: "" + numDigits);
",2,1,0,1,2,0,0,2,0,6,77,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,432,"        return append0(new FixedNumber(fieldType, numDigits, false));
",4,0,0,2,4,1,2,2,0,9,61,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,449,"            throw new IllegalArgumentException(""Field type must not be null"");
",0,0,0,1,2,0,0,2,0,4,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,452,"            maxDigits = minDigits;
",4,0,0,0,0,0,0,0,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,455,"            throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,458,"            return append0(new UnpaddedNumber(fieldType, maxDigits, true));
",4,0,0,2,4,1,2,2,0,9,63,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,478,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,479,"            throw new IllegalArgumentException(""Field type must not be null"");
",0,0,0,1,2,0,0,2,0,4,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,481,"        if (numDigits <= 0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,482,"            throw new IllegalArgumentException(""Illegal number of digits: "" + numDigits);
",2,1,0,1,2,0,0,2,0,6,77,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,484,"        return append0(new FixedNumber(fieldType, numDigits, true));
",4,0,0,2,4,1,2,2,0,9,60,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,496,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,497,"            throw new IllegalArgumentException(""Field type must not be null"");
",0,0,0,1,2,0,0,2,0,4,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,499,"        return append0(new TextField(fieldType, false));
",2,0,0,2,4,1,2,2,0,7,48,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,511,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,512,"            throw new IllegalArgumentException(""Field type must not be null"");
",0,0,0,1,2,0,0,2,0,4,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,514,"        return append0(new TextField(fieldType, true));
",2,0,0,2,4,1,2,2,0,7,47,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,532,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,533,"            throw new IllegalArgumentException(""Field type must not be null"");
",0,0,0,1,2,0,0,2,0,4,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,535,"        if (maxDigits < minDigits) {
",4,1,0,1,3,0,0,0,0,5,28,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,536,"            maxDigits = minDigits;
",4,0,0,0,0,0,0,0,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,538,"        if (minDigits < 0 || maxDigits <= 0) {
",4,3,0,1,3,0,0,0,0,7,38,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,539,"            throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,541,"        return append0(new Fraction(fieldType, minDigits, maxDigits));
",6,0,0,2,4,1,2,2,0,10,62,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,559,"        return appendFraction(DateTimeFieldType.secondOfDay(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,77,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,576,"        return appendFraction(DateTimeFieldType.minuteOfDay(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,77,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,593,"        return appendFraction(DateTimeFieldType.hourOfDay(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,75,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,610,"        return appendFraction(DateTimeFieldType.dayOfYear(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,75,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,627,"        return appendDecimal(DateTimeFieldType.millisOfSecond(), minDigits, 3);
",0,0,0,2,4,1,8,0,0,8,71,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,637,"        return appendDecimal(DateTimeFieldType.millisOfDay(), minDigits, 8);
",0,0,0,2,4,1,8,0,0,8,68,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,647,"        return appendDecimal(DateTimeFieldType.secondOfMinute(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,71,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,657,"        return appendDecimal(DateTimeFieldType.secondOfDay(), minDigits, 5);
",0,0,0,2,4,1,8,0,0,8,68,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,677,"        return appendDecimal(DateTimeFieldType.minuteOfDay(), minDigits, 4);
",0,0,0,2,4,1,8,0,0,8,68,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,697,"        return appendDecimal(DateTimeFieldType.clockhourOfDay(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,71,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,707,"        return appendDecimal(DateTimeFieldType.hourOfHalfday(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,70,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,717,"        return appendDecimal(DateTimeFieldType.clockhourOfHalfday(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,75,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,727,"        return appendDecimal(DateTimeFieldType.dayOfWeek(), minDigits, 1);
",0,0,0,2,4,1,8,0,0,8,66,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,747,"        return appendDecimal(DateTimeFieldType.dayOfYear(), minDigits, 3);
",0,0,0,2,4,1,8,0,0,8,66,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,757,"        return appendDecimal(DateTimeFieldType.weekOfWeekyear(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,71,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,769,"        return appendSignedDecimal(DateTimeFieldType.weekyear(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,79,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,813,"        return appendTwoDigitYear(pivot, false);
",0,0,0,1,2,1,4,0,0,5,40,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,831,"        return append0(new TwoDigitYear(DateTimeFieldType.year(), pivot, lenientParse));
",4,0,0,3,6,1,6,2,0,12,80,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,853,"        return appendTwoDigitWeekyear(pivot, false);
",0,0,0,1,2,1,4,0,0,5,44,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,871,"        return append0(new TwoDigitYear(DateTimeFieldType.weekyear(), pivot, lenientParse));
",4,0,0,3,6,1,6,2,0,12,84,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,883,"        return appendDecimal(DateTimeFieldType.yearOfEra(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,74,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,895,"        return appendDecimal(DateTimeFieldType.yearOfCentury(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,78,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,907,"        return appendSignedDecimal(DateTimeFieldType.centuryOfEra(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,83,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,917,"        return appendText(DateTimeFieldType.halfdayOfDay());
",0,0,0,2,4,1,6,0,0,6,52,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,927,"        return appendText(DateTimeFieldType.dayOfWeek());
",0,0,0,2,4,1,6,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,938,"        return appendShortText(DateTimeFieldType.dayOfWeek());
",0,0,0,2,4,1,6,0,0,6,54,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,949,"        return appendText(DateTimeFieldType.monthOfYear());
",0,0,0,2,4,1,6,0,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,959,"        return appendShortText(DateTimeFieldType.monthOfYear());
",0,0,0,2,4,1,6,0,0,6,56,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,969,"        return appendText(DateTimeFieldType.era());
",0,0,0,2,4,1,6,0,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,980,"        return append0(new TimeZoneName(TimeZoneName.LONG_NAME, null), null);
",4,0,0,2,4,1,2,2,0,10,69,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,993,"        TimeZoneName pp = new TimeZoneName(TimeZoneName.LONG_NAME, parseLookup);
",8,0,0,1,2,0,0,4,0,12,72,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,994,"        return append0(pp, pp);
",0,0,0,1,2,1,6,0,0,6,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1005,"        return append0(new TimeZoneName(TimeZoneName.SHORT_NAME, null), null);
",4,0,0,2,4,1,2,2,0,10,70,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1019,"        TimeZoneName pp = new TimeZoneName(TimeZoneName.SHORT_NAME, parseLookup);
",8,0,0,1,2,0,0,4,0,12,73,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1020,"        return append0(pp, pp);
",0,0,0,1,2,1,6,0,0,6,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1053,"        return append0(new TimeZoneOffset
",0,0,0,0,1,1,2,2,0,4,33,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1080,"        return append0(new TimeZoneOffset
",0,0,0,0,1,1,2,2,0,4,33,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1104,"                Object printer = iElementPairs.get(0);
",2,0,0,1,2,0,4,2,0,8,38,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1105,"                Object parser = iElementPairs.get(1);
",2,0,0,1,2,0,4,2,0,8,37,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1107,"                if (printer != null) {
",2,1,0,1,3,0,0,0,0,3,22,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1108,"                    if (printer == parser || parser == null) {
",6,3,0,1,3,0,0,0,0,9,42,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1109,"                        f = printer;
",4,0,0,0,0,0,0,0,0,5,12,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1112,"                    f = parser;
",4,0,0,0,0,0,0,0,0,5,11,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1131,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1133,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1141,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1143,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1147,"        return (isPrinter(f) || isParser(f));
",0,1,0,3,6,1,8,0,0,9,37,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1151,"        for (int i = len; --i >= 0;) {
",6,1,0,1,3,0,0,0,0,8,30,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1152,"            buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1154,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1157,"        for (int i = len; --i >= 0;) {
",6,1,0,1,3,0,0,0,0,8,30,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1158,"            out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1160,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2746,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2747,"            iParsers = parsers;
",4,0,0,0,0,0,0,0,0,5,19,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2748,"            int est = 0;
",2,0,0,0,0,0,0,0,0,2,12,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2749,"            for (int i=parsers.length; --i>=0 ;) {
",8,1,0,1,3,0,0,0,0,10,38,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2750,"                DateTimeParser parser = parsers[i];
",2,0,1,1,2,0,0,2,0,8,35,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2751,"                if (parser != null) {
",2,1,0,1,3,0,0,0,0,3,21,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2752,"                    int len = parser.estimateParsedLength();
",2,0,0,1,2,0,4,0,0,6,40,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2753,"                    if (len > est) {
",4,1,0,1,3,0,0,0,0,5,16,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2754,"                        est = len;
",4,0,0,0,0,0,0,0,0,5,10,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2757,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2758,"            iParsedLengthEstimate = est;
",4,0,0,0,0,0,0,0,0,5,28,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2759,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2762,"            return iParsedLengthEstimate;
",2,0,0,0,0,1,0,0,0,2,29,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2766,"            DateTimeParser[] parsers = iParsers;
",4,0,0,1,2,0,0,2,0,6,36,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2767,"            int length = parsers.length;
",6,0,0,0,0,0,0,0,0,6,28,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2769,"            final Object originalState = bucket.saveState();
",2,0,0,1,2,1,4,2,0,9,48,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2770,"            boolean isOptional = false;
",2,0,0,0,0,0,0,0,0,3,27,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2772,"            int bestValidPos = position;
",4,0,0,0,0,0,0,0,0,4,28,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2773,"            Object bestValidState = null;
",2,0,0,0,0,0,0,2,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2775,"            int bestInvalidPos = position;
",4,0,0,0,0,0,0,0,0,4,30,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2777,"            for (int i=0; i<length; i++) {
",8,1,0,1,3,0,0,0,0,10,30,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2778,"                DateTimeParser parser = parsers[i];
",2,0,1,1,2,0,0,2,0,8,35,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2779,"                if (parser == null) {
",2,1,0,1,3,0,0,0,0,3,21,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2781,"                    if (bestValidPos <= position) {
",4,1,0,1,3,0,0,0,0,5,31,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2782,"                        return position;
",2,0,0,0,0,1,0,0,0,2,16,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2784,"                    isOptional = true;
",2,0,0,0,0,0,0,0,0,4,18,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2785,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2787,"                int parsePos = parser.parseInto(bucket, text, position);
",2,0,0,1,2,0,10,0,0,12,56,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2788,"                if (parsePos >= position) {
",4,1,0,1,3,0,0,0,0,5,27,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2789,"                    if (parsePos > bestValidPos) {
",4,1,0,1,3,0,0,0,0,5,30,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2790,"                        if (parsePos >= text.length() ||
",2,3,0,1,3,0,4,0,0,9,32,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2795,"                            return parsePos;
",2,0,0,0,0,1,0,0,0,2,16,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2797,"                        bestValidPos = parsePos;
",4,0,0,0,0,0,0,0,0,5,24,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2798,"                        bestValidState = bucket.saveState();
",2,0,0,1,2,0,4,0,0,7,36,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2801,"                    if (parsePos < 0) {
",2,1,0,1,3,0,0,0,0,3,19,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2802,"                        parsePos = ~parsePos;
",4,0,0,0,0,0,0,0,0,6,21,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2803,"                        if (parsePos > bestInvalidPos) {
",4,1,0,1,3,0,0,0,0,5,32,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2804,"                            bestInvalidPos = parsePos;
",4,0,0,0,0,0,0,0,0,5,26,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2808,"                bucket.restoreState(originalState);
",0,0,0,1,2,0,6,0,0,6,35,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2811,"            if (bestValidPos > position || (bestValidPos == position && isOptional)) {
",10,4,0,2,5,0,0,0,0,14,74,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2813,"                if (bestValidState != null) {
",2,1,0,1,3,0,0,0,0,3,29,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2814,"                    bucket.restoreState(bestValidState);
",0,0,0,1,2,0,6,0,0,6,36,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2816,"                return bestValidPos;
",2,0,0,0,0,1,0,0,0,2,20,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2819,"            return ~bestInvalidPos;
",2,0,0,0,0,1,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2571,"                iPrinters = null;
",2,0,0,0,0,0,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2572,"                iPrintedLengthEstimate = 0;
",2,0,0,0,0,0,0,0,0,3,27,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2586,"                iParsers = null;
",2,0,0,0,0,0,0,0,0,3,16,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2587,"                iParsedLengthEstimate = 0;
",2,0,0,0,0,0,0,0,0,3,26,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2610,"                throw new UnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,42,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2627,"            DateTimePrinter[] elements = iPrinters;
",4,0,0,1,2,0,0,2,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2628,"            if (elements == null) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2629,"                throw new UnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,42,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2632,"            if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2634,"                locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2637,"            int len = elements.length;
",6,0,0,0,0,0,0,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2638,"            for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2639,"                elements[i].printTo(out, instant, chrono, displayOffset, displayZone, locale);
",0,0,1,2,4,0,14,0,0,18,78,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2641,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2644,"            DateTimePrinter[] elements = iPrinters;
",4,0,0,1,2,0,0,2,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2645,"            if (elements == null) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2646,"                throw new UnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,42,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2649,"            if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2651,"                locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2654,"            int len = elements.length;
",6,0,0,0,0,0,0,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2655,"            for (int i=0; i<len; i++) {
",8,1,0,1,3,0,0,0,0,10,27,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2656,"                elements[i].printTo(buf, partial, locale);
",0,0,1,2,4,0,8,0,0,12,42,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2658,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2661,"            DateTimePrinter[] elements = iPrinters;
",4,0,0,1,2,0,0,2,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2662,"            if (elements == null) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2663,"                throw new UnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,42,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2666,"            if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2668,"                locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2671,"            int len = elements.length;
",6,0,0,0,0,0,0,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2672,"            for (int i=0; i<len; i++) {
",8,1,0,1,3,0,0,0,0,10,27,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2673,"                elements[i].printTo(out, partial, locale);
",0,0,1,2,4,0,8,0,0,12,42,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2675,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2678,"            return iParsedLengthEstimate;
",2,0,0,0,0,1,0,0,0,2,29,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2684,"                throw new UnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,42,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2712,"                        addArrayToList(printerList, ((Composite)element).iPrinters);
",4,0,0,3,6,0,4,2,0,10,60,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2721,"                        addArrayToList(parserList, ((Composite)element).iParsers);
",4,0,0,3,6,0,4,2,0,10,58,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2730,"            if (array != null) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2731,"                for (int i=0; i<array.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2732,"                    list.add(array[i]);
",0,0,1,2,4,0,4,0,0,8,19,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2735,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2525,"            out.write(displayZone != null ? displayZone.getID() : """");
",2,1,0,2,4,0,8,0,0,12,58,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2526,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2530,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2534,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2548,"            return ~position;
",2,0,0,0,0,1,0,0,0,3,17,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2439,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2440,"            iType = type;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2441,"            iParseLookup = parseLookup;
",4,0,0,0,0,0,0,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2442,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2445,"            return (iType == SHORT_NAME ? 4 : 20);
",4,1,0,1,2,1,0,0,0,5,38,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2451,"            buf.append(print(instant - displayOffset, displayZone, locale));
",4,1,0,2,4,0,10,0,0,15,64,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2452,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2457,"            out.write(print(instant - displayOffset, displayZone, locale));
",4,1,0,2,4,0,10,0,0,15,63,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2458,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2461,"            if (displayZone == null) {
",2,1,0,1,3,0,0,0,0,3,26,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2462,"                return """";  // no zone
",0,0,0,0,0,1,0,0,0,1,22,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2464,"            switch (iType) {
",2,0,0,1,3,0,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2466,"                    return displayZone.getName(instant, locale);
",0,0,0,1,2,1,8,0,0,8,44,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2468,"                    return displayZone.getShortName(instant, locale);
",0,0,0,1,2,1,8,0,0,8,49,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2470,"            return """";
",0,0,0,0,0,1,0,0,0,1,10,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2475,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2479,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2482,"            return (iType == SHORT_NAME ? 4 : 20);
",4,1,0,1,2,1,0,0,0,5,38,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2486,"            String str = text.substring(position);
",2,0,0,1,2,0,6,2,0,10,38,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2487,"            for (String name : iParseLookup.keySet()) {
",2,0,0,2,5,0,4,2,0,8,43,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2488,"                if (str.startsWith(name)) {
",0,0,0,2,5,0,6,0,0,6,27,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2489,"                    bucket.setZone(iParseLookup.get(name));
",0,0,0,2,4,0,10,0,0,10,39,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2490,"                    return position + name.length();
",2,1,0,1,2,1,4,0,0,7,32,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2492,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2493,"            return ~position;
",2,0,0,0,0,1,0,0,0,3,17,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2083,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2084,"            iZeroOffsetPrintText = zeroOffsetPrintText;
",4,0,0,0,0,0,0,0,0,5,43,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2085,"            iZeroOffsetParseText = zeroOffsetParseText;
",4,0,0,0,0,0,0,0,0,5,43,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2086,"            iShowSeparators = showSeparators;
",4,0,0,0,0,0,0,0,0,5,33,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2087,"            if (minFields <= 0 || maxFields < minFields) {
",6,3,0,1,3,0,0,0,0,9,46,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2088,"                throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2090,"            if (minFields > 4) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2091,"                minFields = 4;
",2,0,0,0,0,0,0,0,0,3,14,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2092,"                maxFields = 4;
",2,0,0,0,0,0,0,0,0,3,14,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2094,"            iMinFields = minFields;
",4,0,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2095,"            iMaxFields = maxFields;
",4,0,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2096,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2099,"            int est = 1 + iMinFields << 1;
",4,2,0,0,0,0,0,0,0,6,30,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2100,"            if (iShowSeparators) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2101,"                est += iMinFields - 1;
",4,1,0,0,0,0,0,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2103,"            if (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {
",4,3,0,2,5,0,4,0,0,11,74,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2104,"                est = iZeroOffsetPrintText.length();
",2,0,0,1,2,0,4,0,0,7,36,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2106,"            return est;
",2,0,0,0,0,1,0,0,0,2,11,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2112,"            if (displayZone == null) {
",2,1,0,1,3,0,0,0,0,3,26,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2113,"                return;  // no zone
",0,0,0,0,0,1,0,0,0,0,19,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2115,"            if (displayOffset == 0 && iZeroOffsetPrintText != null) {
",4,3,0,1,3,0,0,0,0,7,57,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2116,"                buf.append(iZeroOffsetPrintText);
",0,0,0,1,2,0,6,0,0,6,33,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2117,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2119,"            if (displayOffset >= 0) {
",2,1,0,1,3,0,0,0,0,3,25,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2120,"                buf.append('+');
",0,0,0,1,2,0,4,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2122,"                buf.append('-');
",0,0,0,1,2,0,4,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2123,"                displayOffset = -displayOffset;
",4,0,0,0,0,0,0,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2126,"            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,0,0,0,0,0,0,9,62,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2127,"            FormatUtils.appendPaddedInteger(buf, hours, 2);
",0,0,0,1,2,0,8,0,0,8,47,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2128,"            if (iMaxFields == 1) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2129,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2131,"            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,1,2,0,0,0,0,10,64,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2132,"            if (displayOffset == 0 && iMinFields <= 1) {
",4,3,0,1,3,0,0,0,0,7,44,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2133,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2136,"            int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,9,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2137,"            if (iShowSeparators) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2138,"                buf.append(':');
",0,0,0,1,2,0,4,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2140,"            FormatUtils.appendPaddedInteger(buf, minutes, 2);
",0,0,0,1,2,0,8,0,0,8,49,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2141,"            if (iMaxFields == 2) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2142,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2144,"            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,10,63,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2145,"            if (displayOffset == 0 && iMinFields <= 2) {
",4,3,0,1,3,0,0,0,0,7,44,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2146,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2149,"            int seconds = displayOffset / DateTimeConstants.MILLIS_PER_SECOND;
",8,1,0,0,0,0,0,0,0,9,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2150,"            if (iShowSeparators) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2151,"                buf.append(':');
",0,0,0,1,2,0,4,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2153,"            FormatUtils.appendPaddedInteger(buf, seconds, 2);
",0,0,0,1,2,0,8,0,0,8,49,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2154,"            if (iMaxFields == 3) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2155,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2157,"            displayOffset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;
",8,1,0,0,0,0,0,0,0,10,63,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2158,"            if (displayOffset == 0 && iMinFields <= 3) {
",4,3,0,1,3,0,0,0,0,7,44,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2159,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2162,"            if (iShowSeparators) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2163,"                buf.append('.');
",0,0,0,1,2,0,4,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2165,"            FormatUtils.appendPaddedInteger(buf, displayOffset, 3);
",0,0,0,1,2,0,8,0,0,8,55,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2166,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2171,"            if (displayZone == null) {
",2,1,0,1,3,0,0,0,0,3,26,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2172,"                return;  // no zone
",0,0,0,0,0,1,0,0,0,0,19,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2174,"            if (displayOffset == 0 && iZeroOffsetPrintText != null) {
",4,3,0,1,3,0,0,0,0,7,57,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2175,"                out.write(iZeroOffsetPrintText);
",0,0,0,1,2,0,6,0,0,6,32,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2176,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2178,"            if (displayOffset >= 0) {
",2,1,0,1,3,0,0,0,0,3,25,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2179,"                out.write('+');
",0,0,0,1,2,0,4,0,0,5,15,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2181,"                out.write('-');
",0,0,0,1,2,0,4,0,0,5,15,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2182,"                displayOffset = -displayOffset;
",4,0,0,0,0,0,0,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2185,"            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,0,0,0,0,0,0,9,62,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2186,"            FormatUtils.writePaddedInteger(out, hours, 2);
",0,0,0,1,2,0,8,0,0,8,46,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2187,"            if (iMaxFields == 1) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2188,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2190,"            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,1,2,0,0,0,0,10,64,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2191,"            if (displayOffset == 0 && iMinFields == 1) {
",4,3,0,1,3,0,0,0,0,7,44,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2192,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2195,"            int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,9,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2196,"            if (iShowSeparators) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2197,"                out.write(':');
",0,0,0,1,2,0,4,0,0,5,15,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2199,"            FormatUtils.writePaddedInteger(out, minutes, 2);
",0,0,0,1,2,0,8,0,0,8,48,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2200,"            if (iMaxFields == 2) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2201,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2203,"            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,10,63,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2204,"            if (displayOffset == 0 && iMinFields == 2) {
",4,3,0,1,3,0,0,0,0,7,44,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2205,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2208,"            int seconds = displayOffset / DateTimeConstants.MILLIS_PER_SECOND;
",8,1,0,0,0,0,0,0,0,9,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2209,"            if (iShowSeparators) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2210,"                out.write(':');
",0,0,0,1,2,0,4,0,0,5,15,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2212,"            FormatUtils.writePaddedInteger(out, seconds, 2);
",0,0,0,1,2,0,8,0,0,8,48,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2213,"            if (iMaxFields == 3) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2214,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2216,"            displayOffset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;
",8,1,0,0,0,0,0,0,0,10,63,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2217,"            if (displayOffset == 0 && iMinFields == 3) {
",4,3,0,1,3,0,0,0,0,7,44,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2218,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2221,"            if (iShowSeparators) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2222,"                out.write('.');
",0,0,0,1,2,0,4,0,0,5,15,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2224,"            FormatUtils.writePaddedInteger(out, displayOffset, 3);
",0,0,0,1,2,0,8,0,0,8,54,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2225,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2229,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2233,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2236,"            return estimatePrintedLength();
",0,0,0,1,2,1,2,0,0,2,31,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2240,"            int limit = text.length() - position;
",4,1,0,1,2,0,4,0,0,9,37,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2243,"            if (iZeroOffsetParseText != null) {
",2,1,0,1,3,0,0,0,0,3,35,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2244,"                if (iZeroOffsetParseText.length() == 0) {
",0,1,0,2,5,0,4,0,0,5,41,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2246,"                    if (limit > 0) {
",2,1,0,1,3,0,0,0,0,3,16,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2247,"                        char c = text.charAt(position);
",2,0,0,1,2,0,6,0,0,8,31,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2248,"                        if (c == '-' || c == '+') {
",4,3,0,1,3,0,0,0,0,9,27,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2249,"                            break zeroOffset;
",2,0,0,0,0,0,0,0,0,2,17,14,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2252,"                    bucket.setOffset(Integer.valueOf(0));
",0,0,0,2,4,0,8,0,0,8,37,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2253,"                    return position;
",2,0,0,0,0,1,0,0,0,2,16,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2255,"                if (text.regionMatches(true, position, iZeroOffsetParseText, 0, iZeroOffsetParseText.length())) {
",0,0,0,3,7,0,12,0,0,13,97,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2256,"                    bucket.setOffset(Integer.valueOf(0));
",0,0,0,2,4,0,8,0,0,8,37,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2257,"                    return position + iZeroOffsetParseText.length();
",2,1,0,1,2,1,4,0,0,7,48,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2263,"            if (limit <= 1) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2264,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2268,"            char c = text.charAt(position);
",2,0,0,1,2,0,6,0,0,8,31,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2269,"            if (c == '-') {
",2,1,0,1,3,0,0,0,0,4,15,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2270,"                negative = true;
",2,0,0,0,0,0,0,0,0,4,16,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2271,"            } else if (c == '+') {
",2,1,0,1,4,0,0,0,0,4,22,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2272,"                negative = false;
",2,0,0,0,0,0,0,0,0,4,17,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2274,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2277,"            limit--;
",2,0,0,0,0,0,0,0,0,3,8,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2278,"            position++;
",2,0,0,0,0,0,0,0,0,3,11,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2292,"            if (digitCount(text, position, 2) < 2) {
",0,1,0,2,5,0,6,0,0,7,40,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2294,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2299,"            int hours = FormatUtils.parseTwoDigits(text, position);
",2,0,0,1,2,0,8,0,0,10,55,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2300,"            if (hours > 23) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2301,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2303,"            offset = hours * DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,0,0,0,0,0,0,10,51,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2304,"            limit -= 2;
",2,0,0,0,0,0,0,0,0,3,11,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2305,"            position += 2;
",2,0,0,0,0,0,0,0,0,3,14,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2311,"                if (limit <= 0) {
",2,1,0,1,3,0,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2312,"                    break parse;
",2,0,0,0,0,0,0,0,0,2,12,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2316,"                c = text.charAt(position);
",2,0,0,1,2,0,6,0,0,9,26,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2317,"                if (c == ':') {
",2,1,0,1,3,0,0,0,0,4,15,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2318,"                    expectSeparators = true;
",2,0,0,0,0,0,0,0,0,4,24,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2319,"                    limit--;
",2,0,0,0,0,0,0,0,0,3,8,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2320,"                    position++;
",2,0,0,0,0,0,0,0,0,3,11,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2321,"                } else if (c >= '0' && c <= '9') {
",4,3,0,1,4,0,0,0,0,9,34,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2322,"                    expectSeparators = false;
",2,0,0,0,0,0,0,0,0,4,25,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2329,"                int count = digitCount(text, position, 2);
",2,0,0,1,2,0,6,0,0,8,42,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2330,"                if (count == 0 && !expectSeparators) {
",4,2,0,1,3,0,0,0,0,7,38,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2331,"                    break parse;
",2,0,0,0,0,0,0,0,0,2,12,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2332,"                } else if (count < 2) {
",2,1,0,1,4,0,0,0,0,3,23,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2334,"                    return ~position;
",2,0,0,0,0,1,0,0,0,3,17,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2337,"                int minutes = FormatUtils.parseTwoDigits(text, position);
",2,0,0,1,2,0,8,0,0,10,57,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2338,"                if (minutes > 59) {
",2,1,0,1,3,0,0,0,0,3,19,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2339,"                    return ~position;
",2,0,0,0,0,1,0,0,0,3,17,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2341,"                offset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,10,56,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2342,"                limit -= 2;
",2,0,0,0,0,0,0,0,0,3,11,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2343,"                position += 2;
",2,0,0,0,0,0,0,0,0,3,14,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2347,"                if (limit <= 0) {
",2,1,0,1,3,0,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2348,"                    break parse;
",2,0,0,0,0,0,0,0,0,2,12,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2351,"                if (expectSeparators) {
",2,0,0,1,3,0,0,0,0,2,23,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2352,"                    if (text.charAt(position) != ':') {
",0,1,0,2,5,0,6,0,0,8,35,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2353,"                        break parse;
",2,0,0,0,0,0,0,0,0,2,12,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2355,"                    limit--;
",2,0,0,0,0,0,0,0,0,3,8,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2356,"                    position++;
",2,0,0,0,0,0,0,0,0,3,11,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2359,"                count = digitCount(text, position, 2);
",2,0,0,1,2,0,6,0,0,9,38,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2360,"                if (count == 0 && !expectSeparators) {
",4,2,0,1,3,0,0,0,0,7,38,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2361,"                    break parse;
",2,0,0,0,0,0,0,0,0,2,12,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2362,"                } else if (count < 2) {
",2,1,0,1,4,0,0,0,0,3,23,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2364,"                    return ~position;
",2,0,0,0,0,1,0,0,0,3,17,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2367,"                int seconds = FormatUtils.parseTwoDigits(text, position);
",2,0,0,1,2,0,8,0,0,10,57,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2368,"                if (seconds > 59) {
",2,1,0,1,3,0,0,0,0,3,19,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2369,"                    return ~position;
",2,0,0,0,0,1,0,0,0,3,17,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2371,"                offset += seconds * DateTimeConstants.MILLIS_PER_SECOND;
",8,1,0,0,0,0,0,0,0,10,56,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2372,"                limit -= 2;
",2,0,0,0,0,0,0,0,0,3,11,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2373,"                position += 2;
",2,0,0,0,0,0,0,0,0,3,14,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2377,"                if (limit <= 0) {
",2,1,0,1,3,0,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2378,"                    break parse;
",2,0,0,0,0,0,0,0,0,2,12,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2381,"                if (expectSeparators) {
",2,0,0,1,3,0,0,0,0,2,23,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2382,"                    if (text.charAt(position) != '.' && text.charAt(position) != ',') {
",0,3,0,3,7,0,12,0,0,17,67,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2383,"                        break parse;
",2,0,0,0,0,0,0,0,0,2,12,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2385,"                    limit--;
",2,0,0,0,0,0,0,0,0,3,8,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2386,"                    position++;
",2,0,0,0,0,0,0,0,0,3,11,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2389,"                count = digitCount(text, position, 3);
",2,0,0,1,2,0,6,0,0,9,38,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2390,"                if (count == 0 && !expectSeparators) {
",4,2,0,1,3,0,0,0,0,7,38,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2391,"                    break parse;
",2,0,0,0,0,0,0,0,0,2,12,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2392,"                } else if (count < 1) {
",2,1,0,1,4,0,0,0,0,3,23,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2394,"                    return ~position;
",2,0,0,0,0,1,0,0,0,3,17,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2397,"                offset += (text.charAt(position++) - '0') * 100;
",4,2,0,2,4,0,4,0,0,13,48,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2398,"                if (count > 1) {
",2,1,0,1,3,0,0,0,0,3,16,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2399,"                    offset += (text.charAt(position++) - '0') * 10;
",4,2,0,2,4,0,4,0,0,13,47,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2400,"                    if (count > 2) {
",2,1,0,1,3,0,0,0,0,3,16,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2401,"                        offset += text.charAt(position++) - '0';
",4,1,0,1,2,0,4,0,0,12,40,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2406,"            bucket.setOffset(Integer.valueOf(negative ? -offset : offset));
",6,0,0,2,4,0,8,0,0,15,63,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2407,"            return position;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2415,"            int limit = Math.min(text.length() - position, amount);
",4,1,0,2,4,0,10,0,0,15,55,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2416,"            amount = 0;
",2,0,0,0,0,0,0,0,0,3,11,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2417,"            for (; limit > 0; limit--) {
",4,1,0,1,3,0,0,0,0,6,28,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2418,"                char c = text.charAt(position + amount);
",6,1,0,1,2,0,4,0,0,11,40,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2419,"                if (c < '0' || c > '9') {
",4,3,0,1,3,0,0,0,0,9,25,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2420,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2422,"                amount++;
",2,0,0,0,0,0,0,0,0,3,9,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2424,"            return amount;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1857,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1858,"            iFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1860,"            if (maxDigits > 18) {
",2,1,0,1,3,0,0,0,0,3,21,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1861,"                maxDigits = 18;
",2,0,0,0,0,0,0,0,0,3,15,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1863,"            iMinDigits = minDigits;
",4,0,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1864,"            iMaxDigits = maxDigits;
",4,0,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1865,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1868,"            return iMaxDigits;
",2,0,0,0,0,1,0,0,0,2,18,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1875,"                printTo(buf, null, instant, chrono);
",0,0,0,1,2,0,8,0,0,9,36,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1878,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1876,"            } catch (IOException e) {
",2,0,0,1,4,0,0,2,0,4,25,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1879,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1884,"            printTo(null, out, instant, chrono);
",0,0,0,1,2,0,8,0,0,9,36,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1885,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1890,"            long millis = partial.getChronology().set(partial, 0L);
",2,0,0,2,4,0,8,0,0,10,55,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1892,"                printTo(buf, null, millis, partial.getChronology());
",0,0,0,2,4,0,10,0,0,11,52,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1895,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1893,"            } catch (IOException e) {
",2,0,0,1,4,0,0,2,0,4,25,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1896,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1901,"            long millis = partial.getChronology().set(partial, 0L);
",2,0,0,2,4,0,8,0,0,10,55,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1902,"            printTo(null, out, millis, partial.getChronology());
",0,0,0,2,4,0,10,0,0,11,52,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1903,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1908,"            DateTimeField field = iFieldType.getField(chrono);
",2,0,0,1,2,0,6,2,0,10,50,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1909,"            int minDigits = iMinDigits;
",4,0,0,0,0,0,0,0,0,4,27,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1913,"                fraction = field.remainder(instant);
",2,0,0,1,2,0,6,0,0,9,36,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1921,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1914,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1915,"                if (buf != null) {
",2,1,0,1,3,0,0,0,0,3,18,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1916,"                    appendUnknownString(buf, minDigits);
",0,0,0,1,2,0,6,0,0,6,36,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1918,"                    printUnknownString(out, minDigits);
",0,0,0,1,2,0,6,0,0,6,35,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1920,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1923,"            if (fraction == 0) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1924,"                if (buf != null) {
",2,1,0,1,3,0,0,0,0,3,18,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1925,"                    while (--minDigits >= 0) {
",2,1,0,1,3,0,0,0,0,4,26,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1926,"                        buf.append('0');
",0,0,0,1,2,0,4,0,0,5,16,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1929,"                    while (--minDigits >= 0) {
",2,1,0,1,3,0,0,0,0,4,26,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1930,"                        out.write('0');
",0,0,0,1,2,0,4,0,0,5,15,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1933,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1937,"            long[] fractionData = getFractionData(fraction, field);
",2,0,0,2,4,0,6,0,0,8,55,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1938,"            long scaled = fractionData[0];
",2,0,1,1,2,0,0,0,0,4,30,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1939,"            int maxDigits = (int) fractionData[1];
",2,0,1,2,4,0,0,0,0,4,38,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1941,"            if ((scaled & 0x7fffffff) == scaled) {
",4,2,0,2,5,0,0,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1942,"                str = Integer.toString((int) scaled);
",4,0,0,2,4,0,4,0,0,9,37,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1944,"                str = Long.toString(scaled);
",2,0,0,1,2,0,6,0,0,9,28,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1947,"            int length = str.length();
",2,0,0,1,2,0,4,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1948,"            int digits = maxDigits;
",4,0,0,0,0,0,0,0,0,4,23,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1949,"            while (length < digits) {
",4,1,0,1,3,0,0,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1950,"                if (buf != null) {
",2,1,0,1,3,0,0,0,0,3,18,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1951,"                    buf.append('0');
",0,0,0,1,2,0,4,0,0,5,16,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1953,"                    out.write('0');
",0,0,0,1,2,0,4,0,0,5,15,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1955,"                minDigits--;
",2,0,0,0,0,0,0,0,0,3,12,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1956,"                digits--;
",2,0,0,0,0,0,0,0,0,3,9,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1959,"            if (minDigits < digits) {
",4,1,0,1,3,0,0,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1961,"                while (minDigits < digits) {
",4,1,0,1,3,0,0,0,0,5,28,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1962,"                    if (length <= 1 || str.charAt(length - 1) != '0') {
",4,4,0,2,5,0,4,0,0,13,51,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1963,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1965,"                    digits--;
",2,0,0,0,0,0,0,0,0,3,9,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1966,"                    length--;
",2,0,0,0,0,0,0,0,0,3,9,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1968,"                if (length < str.length()) {
",2,1,0,2,5,0,4,0,0,7,28,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1969,"                    if (buf != null) {
",2,1,0,1,3,0,0,0,0,3,18,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1970,"                        for (int i=0; i<length; i++) {
",8,1,0,1,3,0,0,0,0,10,30,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1971,"                            buf.append(str.charAt(i));
",0,0,0,2,4,0,10,0,0,10,26,14,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1974,"                        for (int i=0; i<length; i++) {
",8,1,0,1,3,0,0,0,0,10,30,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1975,"                            out.write(str.charAt(i));
",0,0,0,2,4,0,10,0,0,10,25,14,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1978,"                    return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1982,"            if (buf != null) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1983,"                buf.append(str);
",0,0,0,1,2,0,6,0,0,6,16,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1985,"                out.write(str);
",0,0,0,1,2,0,6,0,0,6,15,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1987,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1990,"            long rangeMillis = field.getDurationField().getUnitMillis();
",2,0,0,2,4,0,6,0,0,8,60,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1992,"            int maxDigits = iMaxDigits;
",4,0,0,0,0,0,0,0,0,4,27,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1994,"                switch (maxDigits) {
",2,0,0,1,3,0,0,0,0,2,20,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1995,"                default: scalar = 1L; break;
",2,0,0,0,0,0,0,0,0,3,28,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1996,"                case 1:  scalar = 10L; break;
",2,0,0,0,0,0,0,0,0,3,29,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1997,"                case 2:  scalar = 100L; break;
",2,0,0,0,0,0,0,0,0,3,30,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1998,"                case 3:  scalar = 1000L; break;
",2,0,0,0,0,0,0,0,0,3,31,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1999,"                case 4:  scalar = 10000L; break;
",2,0,0,0,0,0,0,0,0,3,32,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2000,"                case 5:  scalar = 100000L; break;
",2,0,0,0,0,0,0,0,0,3,33,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2001,"                case 6:  scalar = 1000000L; break;
",2,0,0,0,0,0,0,0,0,3,34,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2002,"                case 7:  scalar = 10000000L; break;
",2,0,0,0,0,0,0,0,0,3,35,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2003,"                case 8:  scalar = 100000000L; break;
",2,0,0,0,0,0,0,0,0,3,36,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2004,"                case 9:  scalar = 1000000000L; break;
",2,0,0,0,0,0,0,0,0,3,37,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2005,"                case 10: scalar = 10000000000L; break;
",2,0,0,0,0,0,0,0,0,3,38,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2006,"                case 11: scalar = 100000000000L; break;
",2,0,0,0,0,0,0,0,0,3,39,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2007,"                case 12: scalar = 1000000000000L; break;
",2,0,0,0,0,0,0,0,0,3,40,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2008,"                case 13: scalar = 10000000000000L; break;
",2,0,0,0,0,0,0,0,0,3,41,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2009,"                case 14: scalar = 100000000000000L; break;
",2,0,0,0,0,0,0,0,0,3,42,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2010,"                case 15: scalar = 1000000000000000L; break;
",2,0,0,0,0,0,0,0,0,3,43,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2011,"                case 16: scalar = 10000000000000000L; break;
",2,0,0,0,0,0,0,0,0,3,44,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2012,"                case 17: scalar = 100000000000000000L; break;
",2,0,0,0,0,0,0,0,0,3,45,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2013,"                case 18: scalar = 1000000000000000000L; break;
",2,0,0,0,0,0,0,0,0,3,46,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2015,"                if (((rangeMillis * scalar) / scalar) == rangeMillis) {
",8,3,0,3,7,0,0,0,0,11,55,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2016,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2019,"                maxDigits--;
",2,0,0,0,0,0,0,0,0,3,12,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2022,"            return new long[] {fraction * scalar / rangeMillis, maxDigits};
",8,2,0,2,4,1,0,0,0,10,63,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2026,"            return iMaxDigits;
",2,0,0,0,0,1,0,0,0,2,18,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2030,"            DateTimeField field = iFieldType.getField(bucket.getChronology());
",2,0,0,2,4,0,8,2,0,12,66,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2032,"            int limit = Math.min(iMaxDigits, text.length() - position);
",4,1,0,2,4,0,10,0,0,15,59,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2034,"            long value = 0;
",2,0,0,0,0,0,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2035,"            long n = field.getDurationField().getUnitMillis() * 10;
",2,1,0,2,4,0,6,0,0,9,55,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2036,"            int length = 0;
",2,0,0,0,0,0,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2037,"            while (length < limit) {
",4,1,0,1,3,0,0,0,0,5,24,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2038,"                char c = text.charAt(position + length);
",6,1,0,1,2,0,4,0,0,11,40,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2039,"                if (c < '0' || c > '9') {
",4,3,0,1,3,0,0,0,0,9,25,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2040,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2042,"                length++;
",2,0,0,0,0,0,0,0,0,3,9,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2043,"                long nn = n / 10;
",4,1,0,0,0,0,0,0,0,5,17,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2044,"                value += (c - '0') * nn;
",6,2,0,1,2,0,0,0,0,10,24,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2045,"                n = nn;
",4,0,0,0,0,0,0,0,0,5,7,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2046,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2048,"            value /= 10;
",2,0,0,0,0,0,0,0,0,3,12,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2050,"            if (length == 0) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2051,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2054,"            if (value > Integer.MAX_VALUE) {
",6,1,0,1,3,0,0,0,0,7,32,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2055,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2058,"            DateTimeField parseField = new PreciseDateTimeField(
",2,0,0,0,1,0,0,4,0,6,52,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2063,"            bucket.saveField(parseField, (int) value);
",2,0,0,2,4,0,6,0,0,8,42,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,2065,"            return position + length;
",4,1,0,0,0,1,0,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1716,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1717,"            iFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1718,"            iShort = isShort;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1719,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1710,"        private static Map<Locale, Map<DateTimeFieldType, Object[]>> cParseCache =
",2,0,0,1,2,2,0,10,0,14,74,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1722,"            return iShort ? 6 : 20;
",2,0,0,0,0,1,0,0,0,2,23,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1729,"                buf.append(print(instant, chrono, locale));
",0,0,0,2,4,0,12,0,0,12,43,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1732,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1730,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1731,"                buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1733,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1739,"                out.write(print(instant, chrono, locale));
",0,0,0,2,4,0,12,0,0,12,42,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1742,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1740,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1741,"                out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1743,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1747,"                buf.append(print(partial, locale));
",0,0,0,2,4,0,10,0,0,10,35,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1750,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1748,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1749,"                buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1751,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1755,"                out.write(print(partial, locale));
",0,0,0,2,4,0,10,0,0,10,34,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1758,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1756,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1757,"                out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1759,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1762,"            DateTimeField field = iFieldType.getField(chrono);
",2,0,0,1,2,0,6,2,0,10,50,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1763,"            if (iShort) {
",2,0,0,1,3,0,0,0,0,2,13,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1764,"                return field.getAsShortText(instant, locale);
",0,0,0,1,2,1,8,0,0,8,45,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1766,"                return field.getAsText(instant, locale);
",0,0,0,1,2,1,8,0,0,8,40,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1771,"            if (partial.isSupported(iFieldType)) {
",0,0,0,2,5,0,6,0,0,6,38,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1772,"                DateTimeField field = iFieldType.getField(partial.getChronology());
",2,0,0,2,4,0,8,2,0,12,67,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1773,"                if (iShort) {
",2,0,0,1,3,0,0,0,0,2,13,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1774,"                    return field.getAsShortText(partial, locale);
",0,0,0,1,2,1,8,0,0,8,45,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1776,"                    return field.getAsText(partial, locale);
",0,0,0,1,2,1,8,0,0,8,40,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1779,"                return ""\ufffd"";
",0,0,0,0,0,1,0,0,0,1,16,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1784,"            return estimatePrintedLength();
",0,0,0,1,2,1,2,0,0,2,31,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1789,"            Locale locale = bucket.getLocale();
",2,0,0,1,2,0,4,2,0,8,35,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1792,"            Set<String> validValues = null;
",2,0,0,0,0,0,0,4,0,6,31,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1793,"            int maxLength = 0;
",2,0,0,0,0,0,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1794,"            synchronized (cParseCache) {
",2,0,0,1,3,0,0,0,0,2,28,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1795,"                Map<DateTimeFieldType, Object[]> innerMap = cParseCache.get(locale);
",2,0,0,2,4,0,6,6,0,14,68,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1796,"                if (innerMap == null) {
",2,1,0,1,3,0,0,0,0,3,23,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1797,"                    innerMap = new HashMap<DateTimeFieldType, Object[]>();
",2,0,0,2,4,0,0,6,0,9,54,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1798,"                    cParseCache.put(locale, innerMap);
",0,0,0,1,2,0,8,0,0,8,34,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1800,"                Object[] array = innerMap.get(iFieldType);
",2,0,0,2,4,0,6,2,0,10,42,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1801,"                if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1802,"                    validValues = new HashSet<String>(32);
",2,0,0,1,2,0,0,4,0,7,38,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1803,"                    MutableDateTime dt = new MutableDateTime(0L, DateTimeZone.UTC);
",6,0,0,1,2,0,0,4,0,10,63,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1804,"                    Property property = dt.property(iFieldType);
",2,0,0,1,2,0,6,2,0,10,44,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1805,"                    int min = property.getMinimumValueOverall();
",2,0,0,1,2,0,4,0,0,6,44,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1806,"                    int max = property.getMaximumValueOverall();
",2,0,0,1,2,0,4,0,0,6,44,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1807,"                    if (max - min > 32) {  // protect against invalid fields
",4,2,0,1,3,0,0,0,0,6,56,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1808,"                        return ~position;
",2,0,0,0,0,1,0,0,0,3,17,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1810,"                    maxLength = property.getMaximumTextLength(locale);
",2,0,0,1,2,0,6,0,0,9,50,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1811,"                    for (int i = min; i <= max; i++) {
",10,1,0,1,3,0,0,0,0,12,34,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1812,"                        property.set(i);
",0,0,0,1,2,0,6,0,0,6,16,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1813,"                        validValues.add(property.getAsShortText(locale));
",0,0,0,2,4,0,10,0,0,10,49,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1814,"                        validValues.add(property.getAsShortText(locale).toLowerCase(locale));
",0,0,0,3,6,0,14,0,0,14,69,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1815,"                        validValues.add(property.getAsShortText(locale).toUpperCase(locale));
",0,0,0,3,6,0,14,0,0,14,69,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1816,"                        validValues.add(property.getAsText(locale));
",0,0,0,2,4,0,10,0,0,10,44,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1817,"                        validValues.add(property.getAsText(locale).toLowerCase(locale));
",0,0,0,3,6,0,14,0,0,14,64,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1818,"                        validValues.add(property.getAsText(locale).toUpperCase(locale));
",0,0,0,3,6,0,14,0,0,14,64,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1820,"                    if (""en"".equals(locale.getLanguage()) && iFieldType == DateTimeFieldType.era()) {
",2,2,0,4,9,0,10,0,0,15,81,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1822,"                        validValues.add(""BCE"");
",0,0,0,1,2,0,4,0,0,5,23,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1823,"                        validValues.add(""bce"");
",0,0,0,1,2,0,4,0,0,5,23,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1824,"                        validValues.add(""CE"");
",0,0,0,1,2,0,4,0,0,5,22,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1825,"                        validValues.add(""ce"");
",0,0,0,1,2,0,4,0,0,5,22,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1826,"                        maxLength = 3;
",2,0,0,0,0,0,0,0,0,3,14,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1828,"                    array = new Object[] {validValues, Integer.valueOf(maxLength)};
",4,0,0,3,6,0,6,2,0,13,63,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1829,"                    innerMap.put(iFieldType, array);
",0,0,0,1,2,0,8,0,0,8,32,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1830,"                } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1831,"                    validValues = (Set<String>) array[0];
",2,0,1,2,4,0,0,4,0,9,37,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1832,"                    maxLength = ((Integer) array[1]).intValue();
",2,0,1,4,8,0,2,2,0,9,44,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1834,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1836,"            int limit = Math.min(text.length(), position + maxLength);
",6,1,0,2,4,0,8,0,0,15,58,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1837,"            for (int i = limit; i > position; i--) {
",10,1,0,1,3,0,0,0,0,12,40,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1838,"                String match = text.substring(position, i);
",2,0,0,1,2,0,8,2,0,12,43,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1839,"                if (validValues.contains(match)) {
",0,0,0,2,5,0,6,0,0,6,34,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1840,"                    bucket.saveField(iFieldType, match, locale);
",0,0,0,1,2,0,10,0,0,10,44,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1841,"                    return i;
",2,0,0,0,0,1,0,0,0,2,9,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1844,"            return ~position;
",2,0,0,0,0,1,0,0,0,3,17,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1523,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1524,"            iType = type;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1525,"            iPivot = pivot;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1526,"            iLenientParse = lenientParse;
",4,0,0,0,0,0,0,0,0,5,29,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1527,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1530,"            return iLenientParse ? 4 : 2;
",2,0,0,0,0,1,0,0,0,2,29,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1534,"            int limit = text.length() - position;
",4,1,0,1,2,0,4,0,0,9,37,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1536,"            if (!iLenientParse) {
",2,0,0,1,3,0,0,0,0,3,21,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1537,"                limit = Math.min(2, limit);
",2,0,0,1,2,0,6,0,0,9,27,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1538,"                if (limit < 2) {
",2,1,0,1,3,0,0,0,0,3,16,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1539,"                    return ~position;
",2,0,0,0,0,1,0,0,0,3,17,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1542,"                boolean hasSignChar = false;
",2,0,0,0,0,0,0,0,0,3,28,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1543,"                boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1544,"                int length = 0;
",2,0,0,0,0,0,0,0,0,2,15,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1545,"                while (length < limit) {
",4,1,0,1,3,0,0,0,0,5,24,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1546,"                    char c = text.charAt(position + length);
",6,1,0,1,2,0,4,0,0,11,40,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1547,"                    if (length == 0 && (c == '-' || c == '+')) {
",6,5,0,2,5,0,0,0,0,13,44,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1548,"                        hasSignChar = true;
",2,0,0,0,0,0,0,0,0,4,19,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1549,"                        negative = c == '-';
",4,1,0,0,0,0,0,0,0,7,20,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1550,"                        if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1551,"                            length++;
",2,0,0,0,0,0,0,0,0,3,9,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1554,"                            position++;
",2,0,0,0,0,0,0,0,0,3,11,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1555,"                            limit--;
",2,0,0,0,0,0,0,0,0,3,8,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1557,"                        continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1559,"                    if (c < '0' || c > '9') {
",4,3,0,1,3,0,0,0,0,9,25,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1560,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1562,"                    length++;
",2,0,0,0,0,0,0,0,0,3,9,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1563,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1565,"                if (length == 0) {
",2,1,0,1,3,0,0,0,0,3,18,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1566,"                    return ~position;
",2,0,0,0,0,1,0,0,0,3,17,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1569,"                if (hasSignChar || length != 2) {
",4,2,0,1,3,0,0,0,0,6,33,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1571,"                    if (length >= 9) {
",2,1,0,1,3,0,0,0,0,3,18,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1574,"                        value = Integer.parseInt(text.substring(position, position += length));
",6,0,0,2,4,0,10,0,0,18,71,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1576,"                        int i = position;
",4,0,0,0,0,0,0,0,0,4,17,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1577,"                        if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1578,"                            i++;
",2,0,0,0,0,0,0,0,0,3,4,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1581,"                            value = text.charAt(i++) - '0';
",4,1,0,1,2,0,4,0,0,12,31,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1584,"                        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1582,"                        } catch (StringIndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,45,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1583,"                            return ~position;
",2,0,0,0,0,1,0,0,0,3,17,14,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1585,"                        position += length;
",4,0,0,0,0,0,0,0,0,5,19,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1586,"                        while (i < position) {
",4,1,0,1,3,0,0,0,0,5,22,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1587,"                            value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';
",8,5,0,4,8,0,4,0,0,20,63,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1589,"                        if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1590,"                            value = -value;
",4,0,0,0,0,0,0,0,0,6,15,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1594,"                    bucket.saveField(iType, value);
",0,0,0,1,2,0,8,0,0,8,31,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1595,"                    return position;
",2,0,0,0,0,1,0,0,0,2,16,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1600,"            char c = text.charAt(position);
",2,0,0,1,2,0,6,0,0,8,31,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1601,"            if (c < '0' || c > '9') {
",4,3,0,1,3,0,0,0,0,9,25,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1602,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1604,"            year = c - '0';
",4,1,0,0,0,0,0,0,0,7,15,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1605,"            c = text.charAt(position + 1);
",4,1,0,1,2,0,4,0,0,10,30,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1606,"            if (c < '0' || c > '9') {
",4,3,0,1,3,0,0,0,0,9,25,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1607,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1609,"            year = ((year << 3) + (year << 1)) + c - '0';
",8,5,0,3,6,0,0,0,0,15,45,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1611,"            int pivot = iPivot;
",4,0,0,0,0,0,0,0,0,4,19,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1613,"            if (bucket.getPivotYear() != null) {
",0,1,0,2,5,0,4,0,0,5,36,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1614,"                pivot = bucket.getPivotYear().intValue();
",2,0,0,2,4,0,6,0,0,9,41,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1617,"            int low = pivot - 50;
",4,1,0,0,0,0,0,0,0,5,21,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1620,"            if (low >= 0) {
",2,1,0,1,3,0,0,0,0,3,15,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1621,"                t = low % 100;
",4,1,0,0,0,0,0,0,0,6,14,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1623,"                t = 99 + ((low + 1) % 100);
",4,3,0,2,4,0,0,0,0,8,27,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1626,"            year += low + ((year < t) ? 100 : 0) - t;
",10,3,0,2,4,0,0,0,0,14,41,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1628,"            bucket.saveField(iType, year);
",0,0,0,1,2,0,8,0,0,8,30,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1629,"            return position + 2;
",2,1,0,0,0,1,0,0,0,3,20,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1633,"            return 2;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1639,"            int year = getTwoDigitYear(instant, chrono);
",2,0,0,1,2,0,6,0,0,8,44,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1640,"            if (year < 0) {
",2,1,0,1,3,0,0,0,0,3,15,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1641,"                buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1642,"                buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1644,"                FormatUtils.appendPaddedInteger(buf, year, 2);
",0,0,0,1,2,0,8,0,0,8,46,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1646,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1651,"            int year = getTwoDigitYear(instant, chrono);
",2,0,0,1,2,0,6,0,0,8,44,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1652,"            if (year < 0) {
",2,1,0,1,3,0,0,0,0,3,15,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1653,"                out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1654,"                out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1656,"                FormatUtils.writePaddedInteger(out, year, 2);
",0,0,0,1,2,0,8,0,0,8,45,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1658,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1662,"                int year = iType.getField(chrono).get(instant);
",2,0,0,2,4,0,10,0,0,12,47,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1663,"                if (year < 0) {
",2,1,0,1,3,0,0,0,0,3,15,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1664,"                    year = -year;
",4,0,0,0,0,0,0,0,0,6,13,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1666,"                return year % 100;
",2,1,0,0,0,1,0,0,0,3,18,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1667,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1668,"                return -1;
",0,0,0,0,0,1,0,0,0,1,10,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1673,"            int year = getTwoDigitYear(partial);
",2,0,0,1,2,0,4,0,0,6,36,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1674,"            if (year < 0) {
",2,1,0,1,3,0,0,0,0,3,15,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1675,"                buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1676,"                buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1678,"                FormatUtils.appendPaddedInteger(buf, year, 2);
",0,0,0,1,2,0,8,0,0,8,46,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1680,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1683,"            int year = getTwoDigitYear(partial);
",2,0,0,1,2,0,4,0,0,6,36,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1684,"            if (year < 0) {
",2,1,0,1,3,0,0,0,0,3,15,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1685,"                out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1686,"                out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1688,"                FormatUtils.writePaddedInteger(out, year, 2);
",0,0,0,1,2,0,8,0,0,8,45,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1690,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1693,"            if (partial.isSupported(iType)) {
",0,0,0,2,5,0,6,0,0,6,33,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1695,"                    int year = partial.get(iType);
",2,0,0,1,2,0,6,0,0,8,30,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1696,"                    if (year < 0) {
",2,1,0,1,3,0,0,0,0,3,15,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1697,"                        year = -year;
",4,0,0,0,0,0,0,0,0,6,13,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1699,"                    return year % 100;
",2,1,0,0,0,1,0,0,0,3,18,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1700,"                } catch (RuntimeException e) {}
",2,0,0,2,5,0,0,2,0,4,31,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1702,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1484,"            super(fieldType, numDigits, signed, numDigits);
",8,0,0,1,2,0,0,0,0,8,47,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1485,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1488,"            int newPos = super.parseInto(bucket, text, position);
",10,0,0,1,2,0,0,0,0,10,53,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1489,"            if (newPos < 0) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1490,"                return newPos;
",2,0,0,0,0,1,0,0,0,2,14,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1492,"            int expectedPos = position + iMaxParsedDigits;
",6,1,0,0,0,0,0,0,0,7,46,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1493,"            if (newPos != expectedPos) {
",4,1,0,1,3,0,0,0,0,5,28,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1494,"                if (iSigned) {
",2,0,0,1,3,0,0,0,0,2,14,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1495,"                    char c = text.charAt(position);
",2,0,0,1,2,0,6,0,0,8,31,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1496,"                    if (c == '-' || c == '+') {
",4,3,0,1,3,0,0,0,0,9,27,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1497,"                        expectedPos++;
",2,0,0,0,0,0,0,0,0,3,14,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1500,"                if (newPos > expectedPos) {
",4,1,0,1,3,0,0,0,0,5,27,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1502,"                    return ~(expectedPos + 1);
",2,1,0,1,2,1,0,0,0,4,26,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1503,"                } else if (newPos < expectedPos) {
",4,1,0,1,4,0,0,0,0,5,34,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1505,"                    return ~newPos;
",2,0,0,0,0,1,0,0,0,3,15,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1508,"            return newPos;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1439,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1440,"                appendUnknownString(buf, iMinPrintedDigits);
",0,0,0,1,2,0,6,0,0,6,44,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1448,"                DateTimeField field = iFieldType.getField(chrono);
",2,0,0,1,2,0,6,2,0,10,50,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1449,"                FormatUtils.writePaddedInteger(out, field.get(instant), iMinPrintedDigits);
",0,0,0,2,4,0,14,0,0,14,75,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1452,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1450,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1451,"                printUnknownString(out, iMinPrintedDigits);
",0,0,0,1,2,0,6,0,0,6,43,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1453,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1456,"            if (partial.isSupported(iFieldType)) {
",0,0,0,2,5,0,6,0,0,6,38,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1458,"                    FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);
",0,0,0,2,4,0,14,0,0,14,81,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1461,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1459,"                } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1460,"                    appendUnknownString(buf, iMinPrintedDigits);
",0,0,0,1,2,0,6,0,0,6,44,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1463,"                appendUnknownString(buf, iMinPrintedDigits);
",0,0,0,1,2,0,6,0,0,6,44,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1465,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1468,"            if (partial.isSupported(iFieldType)) {
",0,0,0,2,5,0,6,0,0,6,38,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1470,"                    FormatUtils.writePaddedInteger(out, partial.get(iFieldType), iMinPrintedDigits);
",0,0,0,2,4,0,14,0,0,14,80,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1473,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1471,"                } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1472,"                    printUnknownString(out, iMinPrintedDigits);
",0,0,0,1,2,0,6,0,0,6,43,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1475,"                printUnknownString(out, iMinPrintedDigits);
",0,0,0,1,2,0,6,0,0,6,43,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1477,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1299,"                    negative = c == '-';
",4,1,0,0,0,0,0,0,0,7,20,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1302,"                    if (length + 1 >= limit || 
",4,4,0,0,1,0,0,0,0,8,26,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1305,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1308,"                    if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1309,"                        length++;
",2,0,0,0,0,0,0,0,0,3,9,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1312,"                        position++;
",2,0,0,0,0,0,0,0,0,3,11,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1315,"                    limit = Math.min(limit + 1, text.length() - position);
",6,2,0,2,4,0,8,0,0,17,54,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1316,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1319,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1325,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1332,"                value = Integer.parseInt(text.substring(position, position += length));
",6,0,0,2,4,0,10,0,0,18,71,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1336,"                    i++;
",2,0,0,0,0,0,0,0,0,3,4,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1340,"                } catch (StringIndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,45,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1341,"                    return ~position;
",2,0,0,0,0,1,0,0,0,3,17,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1348,"                    value = -value;
",4,0,0,0,0,0,0,0,0,6,15,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1363,"            super(fieldType, maxParsedDigits, signed);
",6,0,0,1,2,0,0,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1364,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1367,"            return iMaxParsedDigits;
",2,0,0,0,0,1,0,0,0,2,24,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1374,"                DateTimeField field = iFieldType.getField(chrono);
",2,0,0,1,2,0,6,2,0,10,50,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1375,"                FormatUtils.appendUnpaddedInteger(buf, field.get(instant));
",0,0,0,2,4,0,12,0,0,12,59,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1378,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1376,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1377,"                buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1379,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1385,"                DateTimeField field = iFieldType.getField(chrono);
",2,0,0,1,2,0,6,2,0,10,50,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1386,"                FormatUtils.writeUnpaddedInteger(out, field.get(instant));
",0,0,0,2,4,0,12,0,0,12,58,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1389,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1387,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1388,"                out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1390,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1393,"            if (partial.isSupported(iFieldType)) {
",0,0,0,2,5,0,6,0,0,6,38,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1395,"                    FormatUtils.appendUnpaddedInteger(buf, partial.get(iFieldType));
",0,0,0,2,4,0,12,0,0,12,64,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1398,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1396,"                } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1397,"                    buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1400,"                buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1402,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1405,"            if (partial.isSupported(iFieldType)) {
",0,0,0,2,5,0,6,0,0,6,38,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1407,"                    FormatUtils.writeUnpaddedInteger(out, partial.get(iFieldType));
",0,0,0,2,4,0,12,0,0,12,63,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1410,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1408,"                } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1409,"                    out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1412,"                out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1414,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,88,"        this(instantLocal, chrono, locale, null, 2000);
",6,0,0,1,2,0,0,0,0,6,47,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,89,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,104,"        this(instantLocal, chrono, locale, pivotYear, 2000);
",8,0,0,1,2,0,0,0,0,8,52,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,105,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,134,"        return iChrono;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,144,"        return iLocale;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,152,"        return iZone;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,170,"        return (iOffset != null ? iOffset : 0);
",4,1,0,1,2,1,0,0,0,5,39,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,177,"        return iOffset;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,186,"        iSavedState = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,187,"        iOffset = offset;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,188,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,194,"        iSavedState = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,195,"        iOffset = offset;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,196,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,212,"        return iPivotYear;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,225,"        iPivotYear = pivotYear;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,226,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,236,"        saveField(new SavedField(field, value));
",4,0,0,2,4,0,2,2,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,237,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,257,"        saveField(new SavedField(fieldType.getField(iChrono), text, locale));
",4,0,0,3,6,0,8,2,0,14,69,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,258,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,266,"            SavedField[] newArray = new SavedField
",2,0,0,1,2,0,0,4,0,6,38,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,268,"            System.arraycopy(savedFields, 0, newArray, 0, savedFieldsCount);
",0,0,0,1,2,0,10,0,0,10,64,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,269,"            iSavedFields = savedFields = newArray;
",6,0,0,0,0,0,0,0,0,8,38,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,270,"            iSavedFieldsShared = false;
",2,0,0,0,0,0,0,0,0,4,27,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,286,"        if (iSavedState == null) {
",2,1,0,1,3,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,287,"            iSavedState = new SavedState();
",2,0,0,1,2,0,0,2,0,5,31,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,289,"        return iSavedState;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,301,"        if (savedState instanceof SavedState) {
",2,0,0,1,3,0,0,2,0,4,39,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,302,"            if (((SavedState) savedState).restoreState(this)) {
",2,0,0,4,9,0,2,2,0,6,51,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,303,"                iSavedState = savedState;
",4,0,0,0,0,0,0,0,0,5,25,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,304,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,307,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,318,"        return computeMillis(false, null);
",0,0,0,1,2,1,2,0,0,4,34,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,330,"        return computeMillis(resetFields, null);
",0,0,0,1,2,1,4,0,0,5,40,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,344,"        SavedField[] savedFields = iSavedFields;
",4,0,0,1,2,0,0,2,0,6,40,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,345,"        int count = iSavedFieldsCount;
",4,0,0,0,0,0,0,0,0,4,30,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,346,"        if (iSavedFieldsShared) {
",2,0,0,1,3,0,0,0,0,2,25,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,347,"            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
",4,0,0,3,6,0,4,2,0,12,64,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,348,"            iSavedFieldsShared = false;
",2,0,0,0,0,0,0,0,0,4,27,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,350,"        sort(savedFields, count);
",0,0,0,1,2,0,6,0,0,6,25,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,351,"        if (count > 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,353,"            DurationField months = DurationFieldType.months().getField(iChrono);
",2,0,0,2,4,0,8,2,0,12,68,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,354,"            DurationField days = DurationFieldType.days().getField(iChrono);
",2,0,0,2,4,0,8,2,0,12,64,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,355,"            DurationField first = savedFields[0].iField.getDurationField();
",4,0,1,2,4,0,2,2,0,10,63,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,356,"            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
",0,3,0,3,7,0,12,0,0,15,77,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,357,"                saveField(DateTimeFieldType.year(), iDefaultYear);
",0,0,0,2,4,0,8,0,0,8,50,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,358,"                return computeMillis(resetFields, text);
",0,0,0,1,2,1,6,0,0,6,40,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,362,"        long millis = iMillis;
",4,0,0,0,0,0,0,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,364,"            for (int i = 0; i < count; i++) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,365,"                millis = savedFields[i].set(millis, resetFields);
",2,0,1,2,4,0,6,0,0,13,49,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,367,"            if (resetFields) {
",2,0,0,1,3,0,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,368,"                for (int i = 0; i < count; i++) {
",8,1,0,1,3,0,0,0,0,10,33,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,369,"                    millis = savedFields[i].set(millis, i == (count - 1));
",6,2,1,3,6,0,4,0,0,17,54,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,377,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,372,"        } catch (IllegalFieldValueException e) {
",2,0,0,1,4,0,0,2,0,4,40,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,373,"            if (text != null) {
",2,1,0,1,3,0,0,0,0,3,19,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,374,"                e.prependMessage(""Cannot parse \"""" + text + '""');
",2,1,0,1,2,0,4,0,0,9,49,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,376,"            throw e;
",2,0,0,0,0,0,0,0,0,2,8,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,379,"        if (iOffset != null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,380,"            millis -= iOffset;
",4,0,0,0,0,0,0,0,0,5,18,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,381,"        } else if (iZone != null) {
",2,1,0,1,4,0,0,0,0,3,27,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,382,"            int offset = iZone.getOffsetFromLocal(millis);
",2,0,0,1,2,0,6,0,0,8,46,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,383,"            millis -= offset;
",4,0,0,0,0,0,0,0,0,5,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,384,"            if (offset != iZone.getOffset(millis)) {
",2,1,0,2,5,0,6,0,0,9,40,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,385,"                String message =
",2,0,0,0,0,0,0,2,0,4,16,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,387,"                if (text != null) {
",2,1,0,1,3,0,0,0,0,3,19,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,388,"                    message = ""Cannot parse \"""" + text + ""\"": "" + message;
",6,1,0,0,0,0,0,0,0,10,54,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,390,"                throw new IllegalArgumentException(message);
",2,0,0,1,2,0,0,2,0,4,44,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,394,"        return millis;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,416,"        if (high > 10) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,417,"            Arrays.sort(array, 0, high);
",0,0,0,1,2,0,8,0,0,8,28,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,419,"            for (int i=0; i<high; i++) {
",8,1,0,1,3,0,0,0,0,10,28,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,420,"                for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {
",10,4,1,5,11,0,2,0,0,23,63,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,421,"                    SavedField t = array[j];
",2,0,1,1,2,0,0,2,0,8,24,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,422,"                    array[j] = array[j-1];
",2,1,1,2,4,0,0,0,0,10,22,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,423,"                    array[j-1] = t;
",4,1,1,1,2,0,0,0,0,8,15,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,427,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,511,"        if (a == null || !a.isSupported()) {
",2,2,0,2,5,0,4,0,0,9,36,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,512,"            if (b == null || !b.isSupported()) {
",2,2,0,2,5,0,4,0,0,9,36,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,513,"                return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,515,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,517,"        if (b == null || !b.isSupported()) {
",2,2,0,2,5,0,4,0,0,9,36,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,518,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,520,"        return -a.compareTo(b);
",0,0,0,1,2,1,6,0,0,7,23,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,55,"public class DateTimeParserBucket {
",2,0,0,0,1,1,0,0,0,3,35,1,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,378,"        return iName;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,410,"        return getField(chronology).isSupported();
",0,0,0,2,4,1,6,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,419,"        return getName();
",0,0,0,1,2,1,2,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,41,"public abstract class DateTimeFieldType implements Serializable {
",2,0,0,0,1,2,0,2,0,6,65,1,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,774,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,775,"            iDateStyle = dateStyle;
",4,0,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,776,"            iTimeStyle = timeStyle;
",4,0,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,777,"            iType = type;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,778,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,767,"        private static final Map<String, DateTimeFormatter> cCache = new HashMap<String, DateTimeFormatter>();  // manual sync
",2,0,0,1,2,3,0,12,0,17,118,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,781,"            return 40;  // guess
",0,0,0,0,0,1,0,0,0,0,20,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,787,"            DateTimePrinter p = getFormatter(locale).getPrinter();
",2,0,0,2,4,0,6,2,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,788,"            p.printTo(buf, instant, chrono, displayOffset, displayZone, locale);
",0,0,0,1,2,0,16,0,0,16,68,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,789,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,794,"            DateTimePrinter p = getFormatter(locale).getPrinter();
",2,0,0,2,4,0,6,2,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,795,"            p.printTo(out, instant, chrono, displayOffset, displayZone, locale);
",0,0,0,1,2,0,16,0,0,16,68,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,796,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,799,"            DateTimePrinter p = getFormatter(locale).getPrinter();
",2,0,0,2,4,0,6,2,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,800,"            p.printTo(buf, partial, locale);
",0,0,0,1,2,0,10,0,0,10,32,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,801,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,804,"            DateTimePrinter p = getFormatter(locale).getPrinter();
",2,0,0,2,4,0,6,2,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,805,"            p.printTo(out, partial, locale);
",0,0,0,1,2,0,10,0,0,10,32,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,806,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,809,"            return 40;  // guess
",0,0,0,0,0,1,0,0,0,0,20,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,813,"            DateTimeParser p = getFormatter(bucket.getLocale()).getParser();
",2,0,0,3,6,0,8,2,0,12,64,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,814,"            return p.parseInto(bucket, text, position);
",0,0,0,1,2,1,10,0,0,10,43,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,818,"            locale = (locale == null ? Locale.getDefault() : locale);
",6,1,0,2,4,0,4,0,0,12,57,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,819,"            String key = Integer.toString(iType + (iDateStyle << 4) + (iTimeStyle << 8)) + locale.toString();
",8,4,0,4,8,0,8,2,0,22,97,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,820,"            DateTimeFormatter f = null;
",2,0,0,0,0,0,0,2,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,821,"            synchronized (cCache) {
",2,0,0,1,3,0,0,0,0,2,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,822,"                f = cCache.get(key);
",2,0,0,1,2,0,6,0,0,9,20,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,823,"                if (f == null) {
",2,1,0,1,3,0,0,0,0,3,16,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,824,"                    String pattern = getPattern(locale);
",2,0,0,1,2,0,4,2,0,8,36,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,825,"                    f = DateTimeFormat.forPattern(pattern);
",2,0,0,1,2,0,6,0,0,9,39,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,826,"                    cCache.put(key, f);
",0,0,0,1,2,0,8,0,0,8,19,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,828,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,829,"            return f;
",2,0,0,0,0,1,0,0,0,2,9,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,833,"            DateFormat f = null;
",2,0,0,0,0,0,0,2,0,4,20,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,834,"            switch (iType) {
",2,0,0,1,3,0,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,836,"                    f = DateFormat.getDateInstance(iDateStyle, locale);
",2,0,0,1,2,0,8,0,0,11,51,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,837,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,839,"                    f = DateFormat.getTimeInstance(iTimeStyle, locale);
",2,0,0,1,2,0,8,0,0,11,51,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,840,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,842,"                    f = DateFormat.getDateTimeInstance(iDateStyle, iTimeStyle, locale);
",2,0,0,1,2,0,10,0,0,13,67,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,845,"            if (f instanceof SimpleDateFormat == false) {
",2,1,0,1,3,0,0,2,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,846,"                throw new IllegalArgumentException(""No datetime pattern for locale: "" + locale);
",2,1,0,1,2,0,0,2,0,6,80,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,848,"            return ((SimpleDateFormat) f).toPattern();
",2,0,0,3,6,1,2,2,0,6,42,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,387,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,388,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,170,"        return createFormatterForPattern(pattern);
",0,0,0,1,2,1,4,0,0,4,42,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,194,"        return createFormatterForStyle(style);
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,212,"        DateTimeFormatter formatter = createFormatterForStyle(style);
",2,0,0,1,2,0,4,2,0,8,61,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,213,"        if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,214,"            locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,217,"        return ((StyleFormatter) formatter.getPrinter()).getPattern(locale);
",0,0,0,4,8,1,8,2,0,10,68,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,230,"        return createFormatterForStyleIndex(SHORT, NONE);
",0,0,0,1,2,1,6,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,242,"        return createFormatterForStyleIndex(NONE, SHORT);
",0,0,0,1,2,1,6,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,254,"        return createFormatterForStyleIndex(SHORT, SHORT);
",0,0,0,1,2,1,6,0,0,6,50,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,267,"        return createFormatterForStyleIndex(MEDIUM, NONE);
",0,0,0,1,2,1,6,0,0,6,50,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,279,"        return createFormatterForStyleIndex(NONE, MEDIUM);
",0,0,0,1,2,1,6,0,0,6,50,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,291,"        return createFormatterForStyleIndex(MEDIUM, MEDIUM);
",0,0,0,1,2,1,6,0,0,6,52,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,304,"        return createFormatterForStyleIndex(LONG, NONE);
",0,0,0,1,2,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,316,"        return createFormatterForStyleIndex(NONE, LONG);
",0,0,0,1,2,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,328,"        return createFormatterForStyleIndex(LONG, LONG);
",0,0,0,1,2,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,341,"        return createFormatterForStyleIndex(FULL, NONE);
",0,0,0,1,2,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,353,"        return createFormatterForStyleIndex(NONE, FULL);
",0,0,0,1,2,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,365,"        return createFormatterForStyleIndex(FULL, FULL);
",0,0,0,1,2,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,410,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,416,"                builder.appendEraText();
",0,0,0,1,2,0,4,0,0,4,24,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,417,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,419,"                builder.appendCenturyOfEra(tokenLen, tokenLen);
",0,0,0,1,2,0,8,0,0,8,47,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,420,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,425,"                    boolean lenientParse = true;
",2,0,0,0,0,0,0,0,0,3,28,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,428,"                    if (i + 1 < length) {
",4,2,0,1,3,0,0,0,0,6,21,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,429,"                        indexRef[0]++;
",0,0,1,1,2,0,0,0,0,3,14,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,430,"                        if (isNumericToken(parseToken(pattern, indexRef))) {
",0,0,0,3,7,0,8,0,0,8,52,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,434,"                            lenientParse = false;
",2,0,0,0,0,0,0,0,0,4,21,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,436,"                        indexRef[0]--;
",0,0,1,1,2,0,0,0,0,3,14,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,440,"                    switch (c) {
",2,0,0,1,3,0,0,0,0,2,12,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,442,"                        builder.appendTwoDigitWeekyear
",0,0,0,0,0,0,4,0,0,4,30,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,444,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,448,"                        builder.appendTwoDigitYear(new DateTime().getYear() - 30, lenientParse);
",0,1,0,3,6,0,8,2,0,11,72,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,451,"                } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,460,"                            maxDigits = tokenLen;
",4,0,0,0,0,0,0,0,0,5,21,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,467,"                        builder.appendWeekyear(tokenLen, maxDigits);
",0,0,0,1,2,0,8,0,0,8,44,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,468,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,473,"                        builder.appendYearOfEra(tokenLen, maxDigits);
",0,0,0,1,2,0,8,0,0,8,45,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,480,"                    if (tokenLen >= 4) {
",2,1,0,1,3,0,0,0,0,3,20,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,481,"                        builder.appendMonthOfYearText();
",0,0,0,1,2,0,4,0,0,4,32,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,483,"                        builder.appendMonthOfYearShortText();
",0,0,0,1,2,0,4,0,0,4,37,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,493,"                builder.appendHalfdayOfDayText();
",0,0,0,1,2,0,4,0,0,4,33,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,494,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,496,"                builder.appendClockhourOfHalfday(tokenLen);
",0,0,0,1,2,0,6,0,0,6,43,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,497,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,502,"                builder.appendClockhourOfDay(tokenLen);
",0,0,0,1,2,0,6,0,0,6,39,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,503,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,505,"                builder.appendHourOfHalfday(tokenLen);
",0,0,0,1,2,0,6,0,0,6,38,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,506,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,511,"                builder.appendSecondOfMinute(tokenLen);
",0,0,0,1,2,0,6,0,0,6,39,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,512,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,514,"                builder.appendFractionOfSecond(tokenLen, tokenLen);
",0,0,0,1,2,0,8,0,0,8,51,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,515,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,517,"                builder.appendDayOfWeek(tokenLen);
",0,0,0,1,2,0,6,0,0,6,34,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,518,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,520,"                if (tokenLen >= 4) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,521,"                    builder.appendDayOfWeekText();
",0,0,0,1,2,0,4,0,0,4,30,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,523,"                    builder.appendDayOfWeekShortText();
",0,0,0,1,2,0,4,0,0,4,35,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,525,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,527,"                builder.appendDayOfYear(tokenLen);
",0,0,0,1,2,0,6,0,0,6,34,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,528,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,530,"                builder.appendWeekOfWeekyear(tokenLen);
",0,0,0,1,2,0,6,0,0,6,39,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,531,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,533,"                if (tokenLen >= 4) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,534,"                    builder.appendTimeZoneName();
",0,0,0,1,2,0,4,0,0,4,29,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,536,"                    builder.appendTimeZoneShortName();
",0,0,0,1,2,0,4,0,0,4,34,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,538,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,540,"                if (tokenLen == 1) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,541,"                    builder.appendTimeZoneOffset(null, ""Z"", false, 2, 2);
",0,0,0,1,2,0,4,0,0,6,53,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,542,"                } else if (tokenLen == 2) {
",2,1,0,1,4,0,0,0,0,3,27,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,543,"                    builder.appendTimeZoneOffset(null, ""Z"", true, 2, 2);
",0,0,0,1,2,0,4,0,0,6,52,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,545,"                    builder.appendTimeZoneId();
",0,0,0,1,2,0,4,0,0,4,27,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,547,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,555,"                    builder.appendLiteral(new String(sub));
",2,0,0,2,4,0,4,2,0,8,39,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,557,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,559,"                throw new IllegalArgumentException
",0,0,0,0,0,0,0,2,0,2,34,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,604,"                    if (i + 1 < length && pattern.charAt(i + 1) == '\'') {
",6,5,0,2,5,0,4,0,0,16,54,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,606,"                        i++;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,607,"                        buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,609,"                        inLiteral = !inLiteral;
",4,0,0,0,0,0,0,0,0,6,23,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,654,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,656,"                if (tokenLen <= 2) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,657,"                    return true;
",0,0,0,0,0,1,0,0,0,1,12,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,674,"        if (pattern == null || pattern.length() == 0) {
",2,3,0,2,5,0,4,0,0,9,47,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,675,"            throw new IllegalArgumentException(""Invalid pattern specification"");
",0,0,0,1,2,0,0,2,0,3,68,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,677,"        DateTimeFormatter formatter = null;
",2,0,0,0,0,0,0,2,0,4,35,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,678,"        synchronized (cPatternedCache) {
",2,0,0,1,3,0,0,0,0,2,32,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,679,"            formatter = cPatternedCache.get(pattern);
",2,0,0,1,2,0,6,0,0,9,41,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,680,"            if (formatter == null) {
",2,1,0,1,3,0,0,0,0,3,24,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,681,"                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();
",2,0,0,1,2,0,0,4,0,6,66,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,682,"                parsePatternTo(builder, pattern);
",0,0,0,1,2,0,6,0,0,6,33,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,683,"                formatter = builder.toFormatter();
",2,0,0,1,2,0,4,0,0,7,34,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,685,"                cPatternedCache.put(pattern, formatter);
",0,0,0,1,2,0,8,0,0,8,40,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,687,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,688,"        return formatter;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,701,"        if (style == null || style.length() != 2) {
",2,3,0,2,5,0,4,0,0,9,43,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,702,"            throw new IllegalArgumentException(""Invalid style specification: "" + style);
",2,1,0,1,2,0,0,2,0,6,76,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,704,"        int dateStyle = selectStyle(style.charAt(0));
",2,0,0,2,4,0,6,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,705,"        int timeStyle = selectStyle(style.charAt(1));
",2,0,0,2,4,0,6,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,706,"        if (dateStyle == NONE && timeStyle == NONE) {
",8,3,0,1,3,0,0,0,0,11,45,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,707,"            throw new IllegalArgumentException(""Style '--' is invalid"");
",0,0,0,1,2,0,0,2,0,3,60,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,709,"        return createFormatterForStyleIndex(dateStyle, timeStyle);
",0,0,0,1,2,1,6,0,0,6,58,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,720,"        int index = ((dateStyle << 2) + dateStyle) + timeStyle;
",8,3,0,2,4,0,0,0,0,11,55,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,721,"        DateTimeFormatter f = null;
",2,0,0,0,0,0,0,2,0,4,27,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,722,"        synchronized (cStyleCache) {
",2,0,0,1,3,0,0,0,0,2,28,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,723,"            f = cStyleCache[index];
",2,0,1,1,2,0,0,0,0,7,23,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,724,"            if (f == null) {
",2,1,0,1,3,0,0,0,0,3,16,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,725,"                int type = DATETIME;
",4,0,0,0,0,0,0,0,0,4,20,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,726,"                if (dateStyle == NONE) {
",4,1,0,1,3,0,0,0,0,5,24,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,727,"                    type = TIME;
",4,0,0,0,0,0,0,0,0,5,12,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,728,"                } else if (timeStyle == NONE) {
",4,1,0,1,4,0,0,0,0,5,31,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,729,"                    type = DATE;
",4,0,0,0,0,0,0,0,0,5,12,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,731,"                StyleFormatter llf = new StyleFormatter(
",2,0,0,0,1,0,0,4,0,6,40,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,733,"                f = new DateTimeFormatter(llf, llf);
",6,0,0,1,2,0,0,2,0,9,36,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,734,"                cStyleCache[index] = f;
",2,0,1,1,2,0,0,0,0,7,23,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,736,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,737,"        return f;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,747,"        switch (ch) {
",2,0,0,1,3,0,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,749,"            return SHORT;
",2,0,0,0,0,1,0,0,0,2,13,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,751,"            return MEDIUM;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,753,"            return LONG;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,755,"            return FULL;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,757,"            return NONE;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,20,759,"            throw new IllegalArgumentException(""Invalid style character: "" + ch);
",2,1,0,1,2,0,0,2,0,6,69,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,126,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,127,"        iPrinter = printer;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,128,"        iParser = parser;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,129,"        iLocale = locale;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,130,"        iOffsetParsed = offsetParsed;
",4,0,0,0,0,0,0,0,0,5,29,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,131,"        iChrono = chrono;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,132,"        iZone = zone;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,133,"        iPivotYear = pivotYear;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,134,"        iDefaultYear = defaultYear;
",4,0,0,0,0,0,0,0,0,5,27,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,135,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,144,"        return (iPrinter != null);
",2,1,0,1,2,1,0,0,0,3,26,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,153,"        return iPrinter;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,162,"        return (iParser != null);
",2,1,0,1,2,1,0,0,0,3,25,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,171,"        return iParser;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,187,"        if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {
",4,4,0,5,11,0,8,0,0,18,78,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,188,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,190,"        return new DateTimeFormatter(iPrinter, iParser, locale,
",6,0,0,0,1,1,0,2,0,8,55,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,201,"        return iLocale;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,220,"        if (iOffsetParsed == true) {
",2,1,0,1,3,0,0,0,0,4,28,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,221,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,223,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,
",6,0,0,0,1,1,0,2,0,8,56,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,234,"        return iOffsetParsed;
",2,0,0,0,0,1,0,0,0,2,21,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,255,"        if (iChrono == chrono) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,256,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,258,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,
",6,0,0,0,1,1,0,2,0,8,56,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,268,"        return iChrono;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,279,"        return iChrono;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,299,"        return withZone(DateTimeZone.UTC);
",4,0,0,1,2,1,2,0,0,6,34,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,319,"        if (iZone == zone) {
",4,1,0,1,3,0,0,0,0,5,20,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,320,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,322,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,
",6,0,0,0,1,1,0,2,0,8,56,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,332,"        return iZone;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,366,"        if (iPivotYear == pivotYear || (iPivotYear != null && iPivotYear.equals(pivotYear))) {
",6,4,0,3,7,0,6,0,0,16,86,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,367,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,369,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,
",6,0,0,0,1,1,0,2,0,8,56,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,403,"        return withPivotYear(Integer.valueOf(pivotYear));
",0,0,0,2,4,1,8,0,0,8,49,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,413,"      return iPivotYear;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,436,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,
",6,0,0,0,1,1,0,2,0,8,56,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,447,"      return iDefaultYear;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,470,"        long millis = DateTimeUtils.getInstantMillis(instant);
",2,0,0,1,2,0,6,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,471,"        Chronology chrono = DateTimeUtils.getInstantChronology(instant);
",2,0,0,1,2,0,6,2,0,10,64,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,472,"        printTo(out, millis, chrono);
",0,0,0,1,2,0,8,0,0,8,29,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,473,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,483,"        appendable.append(print(instant));
",0,0,0,2,4,0,8,0,0,8,34,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,484,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,495,"        printTo(buf, instant, null);
",0,0,0,1,2,0,6,0,0,7,28,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,496,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,506,"        printTo(out, instant, null);
",0,0,0,1,2,0,6,0,0,7,28,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,507,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,518,"        appendable.append(print(instant));
",0,0,0,2,4,0,8,0,0,8,34,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,519,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,532,"        DateTimePrinter printer = requirePrinter();
",2,0,0,1,2,0,2,2,0,6,43,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,533,"        if (partial == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,534,"            throw new IllegalArgumentException(""The partial must not be null"");
",0,0,0,1,2,0,0,2,0,4,67,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,536,"        printer.printTo(buf, partial, iLocale);
",0,0,0,1,2,0,10,0,0,10,39,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,537,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,549,"        DateTimePrinter printer = requirePrinter();
",2,0,0,1,2,0,2,2,0,6,43,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,550,"        if (partial == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,551,"            throw new IllegalArgumentException(""The partial must not be null"");
",0,0,0,1,2,0,0,2,0,4,67,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,553,"        printer.printTo(out, partial, iLocale);
",0,0,0,1,2,0,10,0,0,10,39,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,554,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,567,"        appendable.append(print(partial));
",0,0,0,2,4,0,8,0,0,8,34,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,568,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,596,"        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());
",2,0,0,3,6,0,4,4,0,10,78,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,597,"        printTo(buf, instant);
",0,0,0,1,2,0,6,0,0,6,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,598,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,611,"        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());
",2,0,0,3,6,0,4,4,0,10,78,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,612,"        printTo(buf, partial);
",0,0,0,1,2,0,6,0,0,6,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,613,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,626,"            zone = DateTimeZone.UTC;
",6,0,0,0,0,0,0,0,0,7,24,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,627,"            offset = 0;
",2,0,0,0,0,0,0,0,0,3,11,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,628,"            adjustedInstant = instant;
",4,0,0,0,0,0,0,0,0,5,26,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,634,"        DateTimePrinter printer = requirePrinter();
",2,0,0,1,2,0,2,2,0,6,43,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,635,"        chrono = selectChronology(chrono);
",2,0,0,1,2,0,4,0,0,7,34,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,638,"        DateTimeZone zone = chrono.getZone();
",2,0,0,1,2,0,4,2,0,8,37,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,639,"        int offset = zone.getOffset(instant);
",2,0,0,1,2,0,6,0,0,8,37,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,640,"        long adjustedInstant = instant + offset;
",6,1,0,0,0,0,0,0,0,7,40,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,641,"        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {
",8,5,0,3,7,0,0,0,0,13,65,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,643,"            zone = DateTimeZone.UTC;
",6,0,0,0,0,0,0,0,0,7,24,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,644,"            offset = 0;
",2,0,0,0,0,0,0,0,0,3,11,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,645,"            adjustedInstant = instant;
",4,0,0,0,0,0,0,0,0,5,26,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,647,"        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);
",0,0,0,2,4,0,18,0,0,18,79,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,648,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,658,"            throw new UnsupportedOperationException(""Printing not supported"");
",0,0,0,1,2,0,0,2,0,3,66,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,694,"        DateTimeParser parser = requireParser();
",2,0,0,1,2,0,2,2,0,6,40,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,695,"        if (instant == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,696,"            throw new IllegalArgumentException(""Instant must not be null"");
",0,0,0,1,2,0,0,2,0,4,63,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,699,"        long instantMillis = instant.getMillis();
",2,0,0,1,2,0,4,0,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,700,"        Chronology chrono = instant.getChronology();
",2,0,0,1,2,0,4,2,0,8,44,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,701,"        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
",4,1,0,2,4,0,8,0,0,13,78,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,702,"        chrono = selectChronology(chrono);
",2,0,0,1,2,0,4,0,0,7,34,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,704,"        DateTimeParserBucket bucket = new DateTimeParserBucket(
",2,0,0,0,1,0,0,4,0,6,55,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,706,"        int newPos = parser.parseInto(bucket, text, position);
",2,0,0,1,2,0,10,0,0,12,54,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,707,"        instant.setMillis(bucket.computeMillis(false, text));
",0,0,0,2,4,0,10,0,0,11,53,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,708,"        if (iOffsetParsed && bucket.getOffsetInteger() != null) {
",2,2,0,2,5,0,4,0,0,8,57,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,709,"            int parsedOffset = bucket.getOffsetInteger();
",2,0,0,1,2,0,4,0,0,6,45,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,710,"            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
",2,0,0,1,2,0,6,2,0,10,69,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,711,"            chrono = chrono.withZone(parsedZone);
",2,0,0,1,2,0,6,0,0,9,37,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,712,"        } else if (bucket.getZone() != null) {
",0,1,0,2,6,0,4,0,0,5,38,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,713,"            chrono = chrono.withZone(bucket.getZone());
",2,0,0,2,4,0,8,0,0,11,43,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,715,"        instant.setChronology(chrono);
",0,0,0,1,2,0,6,0,0,6,30,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,716,"        if (iZone != null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,717,"            instant.setZone(iZone);
",0,0,0,1,2,0,6,0,0,6,23,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,719,"        return newPos;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,735,"        DateTimeParser parser = requireParser();
",2,0,0,1,2,0,2,2,0,6,40,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,737,"        Chronology chrono = selectChronology(iChrono);
",2,0,0,1,2,0,4,2,0,8,46,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,738,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);
",10,0,0,1,2,0,0,4,0,14,101,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,739,"        int newPos = parser.parseInto(bucket, text, 0);
",2,0,0,1,2,0,8,0,0,10,47,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,740,"        if (newPos >= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,741,"            if (newPos >= text.length()) {
",2,1,0,2,5,0,4,0,0,7,30,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,742,"                return bucket.computeMillis(true, text);
",0,0,0,1,2,1,6,0,0,7,40,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,745,"            newPos = ~newPos;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,747,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));
",0,0,0,2,4,0,8,2,0,10,81,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,765,"        return parseLocalDateTime(text).toLocalDate();
",0,0,0,2,4,1,6,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,783,"        return parseLocalDateTime(text).toLocalTime();
",0,0,0,2,4,1,6,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,801,"        DateTimeParser parser = requireParser();
",2,0,0,1,2,0,2,2,0,6,40,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,803,"        Chronology chrono = selectChronology(null).withUTC();  // always use UTC, avoiding DST gaps
",2,0,0,2,4,0,4,2,0,9,91,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,804,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);
",10,0,0,1,2,0,0,4,0,14,101,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,805,"        int newPos = parser.parseInto(bucket, text, 0);
",2,0,0,1,2,0,8,0,0,10,47,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,806,"        if (newPos >= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,807,"            if (newPos >= text.length()) {
",2,1,0,2,5,0,4,0,0,7,30,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,808,"                long millis = bucket.computeMillis(true, text);
",2,0,0,1,2,0,6,0,0,9,47,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,809,"                if (bucket.getOffsetInteger() != null) {  // treat withOffsetParsed() as being true
",0,1,0,3,7,0,4,0,0,5,83,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,810,"                    int parsedOffset = bucket.getOffsetInteger();
",2,0,0,1,2,0,4,0,0,6,45,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,811,"                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
",2,0,0,1,2,0,6,2,0,10,69,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,812,"                    chrono = chrono.withZone(parsedZone);
",2,0,0,1,2,0,6,0,0,9,37,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,813,"                } else if (bucket.getZone() != null) {
",0,1,0,2,6,0,4,0,0,5,38,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,814,"                    chrono = chrono.withZone(bucket.getZone());
",2,0,0,2,4,0,8,0,0,11,43,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,816,"                return new LocalDateTime(millis, chrono);
",4,0,0,1,2,1,0,2,0,6,41,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,819,"            newPos = ~newPos;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,821,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));
",0,0,0,2,4,0,8,2,0,10,81,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,849,"                long millis = bucket.computeMillis(true, text);
",2,0,0,1,2,0,6,0,0,9,47,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,850,"                if (iOffsetParsed && bucket.getOffsetInteger() != null) {
",2,2,0,2,5,0,4,0,0,8,57,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,851,"                    int parsedOffset = bucket.getOffsetInteger();
",2,0,0,1,2,0,4,0,0,6,45,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,852,"                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
",2,0,0,1,2,0,6,2,0,10,69,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,853,"                    chrono = chrono.withZone(parsedZone);
",2,0,0,1,2,0,6,0,0,9,37,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,854,"                } else if (bucket.getZone() != null) {
",0,1,0,2,6,0,4,0,0,5,38,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,855,"                    chrono = chrono.withZone(bucket.getZone());
",2,0,0,2,4,0,8,0,0,11,43,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,857,"                DateTime dt = new DateTime(millis, chrono);
",6,0,0,1,2,0,0,4,0,10,43,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,858,"                if (iZone != null) {
",2,1,0,1,3,0,0,0,0,3,20,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,859,"                    dt = dt.withZone(iZone);
",2,0,0,1,2,0,6,0,0,9,24,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,861,"                return dt;
",2,0,0,0,0,1,0,0,0,2,10,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,864,"            newPos = ~newPos;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,887,"        DateTimeParser parser = requireParser();
",2,0,0,1,2,0,2,2,0,6,40,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,889,"        Chronology chrono = selectChronology(null);
",2,0,0,1,2,0,2,2,0,7,43,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,890,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);
",10,0,0,1,2,0,0,4,0,14,101,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,891,"        int newPos = parser.parseInto(bucket, text, 0);
",2,0,0,1,2,0,8,0,0,10,47,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,892,"        if (newPos >= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,893,"            if (newPos >= text.length()) {
",2,1,0,2,5,0,4,0,0,7,30,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,894,"                long millis = bucket.computeMillis(true, text);
",2,0,0,1,2,0,6,0,0,9,47,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,895,"                if (iOffsetParsed && bucket.getOffsetInteger() != null) {
",2,2,0,2,5,0,4,0,0,8,57,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,896,"                    int parsedOffset = bucket.getOffsetInteger();
",2,0,0,1,2,0,4,0,0,6,45,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,897,"                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
",2,0,0,1,2,0,6,2,0,10,69,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,898,"                    chrono = chrono.withZone(parsedZone);
",2,0,0,1,2,0,6,0,0,9,37,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,899,"                } else if (bucket.getZone() != null) {
",0,1,0,2,6,0,4,0,0,5,38,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,900,"                    chrono = chrono.withZone(bucket.getZone());
",2,0,0,2,4,0,8,0,0,11,43,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,902,"                MutableDateTime dt = new MutableDateTime(millis, chrono);
",6,0,0,1,2,0,0,4,0,10,57,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,903,"                if (iZone != null) {
",2,1,0,1,3,0,0,0,0,3,20,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,904,"                    dt.setZone(iZone);
",0,0,0,1,2,0,6,0,0,6,18,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,906,"                return dt;
",2,0,0,0,0,1,0,0,0,2,10,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,909,"            newPos = ~newPos;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,911,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));
",0,0,0,2,4,0,8,2,0,10,81,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,922,"            throw new UnsupportedOperationException(""Parsing not supported"");
",0,0,0,1,2,0,0,2,0,3,65,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,937,"            chrono = iChrono;
",4,0,0,0,0,0,0,0,0,5,17,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,20,940,"            chrono = chrono.withZone(iZone);
",2,0,0,1,2,0,6,0,0,9,32,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,435,"        SavedState() {
",2,0,0,1,3,0,0,0,0,2,14,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,436,"            this.iZone = DateTimeParserBucket.this.iZone;
",6,0,0,0,0,0,0,0,0,7,45,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,437,"            this.iOffset = DateTimeParserBucket.this.iOffset;
",6,0,0,0,0,0,0,0,0,7,49,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,438,"            this.iSavedFields = DateTimeParserBucket.this.iSavedFields;
",6,0,0,0,0,0,0,0,0,7,59,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,439,"            this.iSavedFieldsCount = DateTimeParserBucket.this.iSavedFieldsCount;
",6,0,0,0,0,0,0,0,0,7,69,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,440,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,443,"            if (enclosing != DateTimeParserBucket.this) {
",4,1,0,1,3,0,0,0,0,5,45,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,444,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,446,"            enclosing.iZone = this.iZone;
",6,0,0,0,0,0,0,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,447,"            enclosing.iOffset = this.iOffset;
",6,0,0,0,0,0,0,0,0,7,33,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,448,"            enclosing.iSavedFields = this.iSavedFields;
",6,0,0,0,0,0,0,0,0,7,43,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,449,"            if (this.iSavedFieldsCount < enclosing.iSavedFieldsCount) {
",6,1,0,1,3,0,0,0,0,7,59,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,454,"                enclosing.iSavedFieldsShared = true;
",4,0,0,0,0,0,0,0,0,6,36,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,456,"            enclosing.iSavedFieldsCount = this.iSavedFieldsCount;
",6,0,0,0,0,0,0,0,0,7,53,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,457,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,474,"        SavedField(DateTimeField field, String text, Locale locale) {
",8,0,0,1,3,0,0,6,0,14,61,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,475,"            iField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,476,"            iValue = 0;
",2,0,0,0,0,0,0,0,0,3,11,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,477,"            iText = text;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,478,"            iLocale = locale;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,479,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,482,"            if (iText == null) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,483,"                millis = iField.set(millis, iValue);
",2,0,0,1,2,0,8,0,0,11,36,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,485,"                millis = iField.set(millis, iText, iLocale);
",2,0,0,1,2,0,10,0,0,13,44,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,487,"            if (reset) {
",2,0,0,1,3,0,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,488,"                millis = iField.roundFloor(millis);
",2,0,0,1,2,0,6,0,0,9,35,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,490,"            return millis;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,499,"            DateTimeField other = obj.iField;
",6,0,0,0,0,0,0,2,0,8,33,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,500,"            int result = compareReverse
",2,0,0,0,0,0,2,0,0,4,27,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,502,"            if (result != 0) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,503,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,505,"            return compareReverse
",0,0,0,0,0,1,2,0,0,2,21,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,20,461,"    static class SavedField implements Comparable<SavedField> {
",2,0,0,0,1,1,0,4,0,7,59,2,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,20,60,"            throw new IllegalArgumentException(""Range duration field must be precise"");
",0,0,0,1,2,0,0,2,0,3,75,7,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,20,66,"            throw new IllegalArgumentException(""The effective range must be at least 2"");
",0,0,0,1,2,0,0,2,0,3,77,7,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,20,82,"            return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);
",6,5,0,5,10,1,2,0,0,13,71,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,20,95,"        int thisValue = get(instant);
",2,0,0,1,2,0,4,0,0,6,29,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,20,96,"        int wrappedValue = FieldUtils.getWrappedValue
",2,0,0,0,0,0,4,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,20,99,"        return instant + (wrappedValue - thisValue) * getUnitMillis();
",6,3,0,2,4,1,2,0,0,11,62,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,20,111,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());
",0,0,0,3,6,0,10,0,0,10,80,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,20,112,"        return instant + (value - get(instant)) * iUnitMillis;
",6,3,0,2,4,1,4,0,0,13,54,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,20,131,"        return iRange - 1;
",2,1,0,0,0,1,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,20,143,"        return iRange;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,20,51,"            throw new IllegalArgumentException(""Unit duration field must be precise"");
",0,0,0,1,2,0,0,2,0,3,74,7,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,20,56,"            throw new IllegalArgumentException(""The unit milliseconds must be at least 1"");
",0,0,0,1,2,0,0,2,0,3,79,7,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,20,66,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,20,78,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(),
",0,0,0,1,3,0,8,0,0,8,60,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,20,80,"        return instant + (value - get(instant)) * iUnitMillis;
",6,3,0,2,4,1,4,0,0,13,54,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,20,92,"        if (instant >= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,20,93,"            return instant - instant % iUnitMillis;
",6,2,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,20,95,"            instant += 1;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,20,96,"            return instant - instant % iUnitMillis - iUnitMillis;
",8,3,0,0,0,1,0,0,0,11,53,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,20,109,"        if (instant > 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,20,110,"            instant -= 1;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,20,111,"            return instant - instant % iUnitMillis + iUnitMillis;
",8,3,0,0,0,1,0,0,0,11,53,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,20,113,"            return instant - instant % iUnitMillis;
",6,2,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,20,126,"        if (instant >= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,20,127,"            return instant % iUnitMillis;
",4,1,0,0,0,1,0,0,0,5,29,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,20,129,"            return (instant + 1) % iUnitMillis + iUnitMillis - 1;
",6,4,0,1,2,1,0,0,0,10,53,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,20,163,"        return getMaximumValue(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,52,"            throw new IllegalArgumentException(""The type must not be null"");
",0,0,0,1,2,0,0,2,0,4,64,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,62,"        return iType.getName();
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,94,"        return getAsText(get(instant), locale);
",0,0,0,2,4,1,8,0,0,8,39,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,106,"        return getAsText(instant, null);
",0,0,0,1,2,1,4,0,0,5,32,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,121,"        return getAsText(fieldValue, locale);
",0,0,0,1,2,1,6,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,136,"        return getAsText(partial, partial.get(getType()), locale);
",0,0,0,3,6,1,12,0,0,12,58,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,153,"        return Integer.toString(fieldValue);
",0,0,0,1,2,1,6,0,0,6,36,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,168,"        return getAsShortText(get(instant), locale);
",0,0,0,2,4,1,8,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,180,"        return getAsShortText(instant, null);
",0,0,0,1,2,1,4,0,0,5,37,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,195,"        return getAsShortText(fieldValue, locale);
",0,0,0,1,2,1,6,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,210,"        return getAsShortText(partial, partial.get(getType()), locale);
",0,0,0,3,6,1,12,0,0,12,63,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,227,"        return getAsText(fieldValue, locale);
",0,0,0,1,2,1,6,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,253,"        return getDurationField().add(instant, value);
",0,0,0,2,4,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,267,"        return getDurationField().add(instant, value);
",0,0,0,2,4,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,298,"        if (valueToAdd == 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,299,"            return values;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,304,"        DateTimeField nextField = null;
",2,0,0,0,0,0,0,2,0,4,31,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,306,"        while (valueToAdd > 0) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,307,"            int max = getMaximumValue(instant, values);
",2,0,0,1,2,0,6,0,0,8,43,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,308,"            long proposed = values[fieldIndex] + valueToAdd;
",4,1,1,1,2,0,0,0,0,9,48,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,309,"            if (proposed <= max) {
",4,1,0,1,3,0,0,0,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,310,"                values[fieldIndex] = (int) proposed;
",2,0,1,2,4,0,0,0,0,7,36,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,311,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,313,"            if (nextField == null) {
",2,1,0,1,3,0,0,0,0,3,24,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,314,"                if (fieldIndex == 0) {
",2,1,0,1,3,0,0,0,0,3,22,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,315,"                    throw new IllegalArgumentException(""Maximum value exceeded for add"");
",0,0,0,1,2,0,0,2,0,3,69,11,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,317,"                nextField = instant.getField(fieldIndex - 1);
",4,1,0,1,2,0,4,0,0,10,45,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,319,"                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {
",0,1,0,5,11,0,10,0,0,11,82,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,320,"                    throw new IllegalArgumentException(""Fields invalid for add"");
",0,0,0,1,2,0,0,2,0,3,61,11,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,323,"            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add
",4,2,1,2,4,0,0,0,0,11,74,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,324,"            values = nextField.add(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field
",4,1,0,1,2,0,8,0,0,14,90,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,325,"            values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero
",0,0,1,2,4,0,6,0,0,11,83,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,326,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,327,"        while (valueToAdd < 0) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,328,"            int min = getMinimumValue(instant, values);
",2,0,0,1,2,0,6,0,0,8,43,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,329,"            long proposed = values[fieldIndex] + valueToAdd;
",4,1,1,1,2,0,0,0,0,9,48,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,330,"            if (proposed >= min) {
",4,1,0,1,3,0,0,0,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,331,"                values[fieldIndex] = (int) proposed;
",2,0,1,2,4,0,0,0,0,7,36,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,332,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,334,"            if (nextField == null) {
",2,1,0,1,3,0,0,0,0,3,24,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,335,"                if (fieldIndex == 0) {
",2,1,0,1,3,0,0,0,0,3,22,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,336,"                    throw new IllegalArgumentException(""Maximum value exceeded for add"");
",0,0,0,1,2,0,0,2,0,3,69,11,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,338,"                nextField = instant.getField(fieldIndex - 1);
",4,1,0,1,2,0,4,0,0,10,45,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,339,"                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {
",0,1,0,5,11,0,10,0,0,11,82,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,340,"                    throw new IllegalArgumentException(""Fields invalid for add"");
",0,0,0,1,2,0,0,2,0,3,61,11,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,343,"            valueToAdd -= (min - 1) - values[fieldIndex];  // reduce the amount to add
",4,2,1,2,4,0,0,0,0,11,74,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,344,"            values = nextField.add(instant, fieldIndex - 1, values, -1);  // subtract 1 from next bigger field
",4,1,0,1,2,0,8,0,0,15,98,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,345,"            values[fieldIndex] = getMaximumValue(instant, values);  // reset this field to max value
",0,0,1,2,4,0,6,0,0,11,88,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,346,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,348,"        return set(instant, fieldIndex, values, values[fieldIndex]);  // adjusts smaller fields
",0,0,1,2,4,1,8,0,0,12,87,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,379,"        if (valueToAdd == 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,380,"            return values;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,385,"        DateTimeField nextField = null;
",2,0,0,0,0,0,0,2,0,4,31,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,387,"        while (valueToAdd > 0) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,388,"            int max = getMaximumValue(instant, values);
",2,0,0,1,2,0,6,0,0,8,43,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,389,"            long proposed = values[fieldIndex] + valueToAdd;
",4,1,1,1,2,0,0,0,0,9,48,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,390,"            if (proposed <= max) {
",4,1,0,1,3,0,0,0,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,391,"                values[fieldIndex] = (int) proposed;
",2,0,1,2,4,0,0,0,0,7,36,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,392,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,394,"            if (nextField == null) {
",2,1,0,1,3,0,0,0,0,3,24,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,395,"                if (fieldIndex == 0) {
",2,1,0,1,3,0,0,0,0,3,22,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,396,"                    valueToAdd -= (max + 1) - values[fieldIndex];
",4,2,1,2,4,0,0,0,0,11,45,10,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,397,"                    values[fieldIndex] = getMinimumValue(instant, values);
",0,0,1,2,4,0,6,0,0,11,54,10,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,398,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,400,"                nextField = instant.getField(fieldIndex - 1);
",4,1,0,1,2,0,4,0,0,10,45,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,402,"                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {
",0,1,0,5,11,0,10,0,0,11,82,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,403,"                    throw new IllegalArgumentException(""Fields invalid for add"");
",0,0,0,1,2,0,0,2,0,3,61,11,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,406,"            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add
",4,2,1,2,4,0,0,0,0,11,74,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,407,"            values = nextField.addWrapPartial(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field
",4,1,0,1,2,0,8,0,0,14,101,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,408,"            values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero
",0,0,1,2,4,0,6,0,0,11,83,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,409,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,410,"        while (valueToAdd < 0) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,411,"            int min = getMinimumValue(instant, values);
",2,0,0,1,2,0,6,0,0,8,43,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,412,"            long proposed = values[fieldIndex] + valueToAdd;
",4,1,1,1,2,0,0,0,0,9,48,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,413,"            if (proposed >= min) {
",4,1,0,1,3,0,0,0,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,414,"                values[fieldIndex] = (int) proposed;
",2,0,1,2,4,0,0,0,0,7,36,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,415,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,417,"            if (nextField == null) {
",2,1,0,1,3,0,0,0,0,3,24,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,418,"                if (fieldIndex == 0) {
",2,1,0,1,3,0,0,0,0,3,22,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,419,"                    valueToAdd -= (min - 1) - values[fieldIndex];
",4,2,1,2,4,0,0,0,0,11,45,10,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,420,"                    values[fieldIndex] = getMaximumValue(instant, values);
",0,0,1,2,4,0,6,0,0,11,54,10,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,421,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,423,"                nextField = instant.getField(fieldIndex - 1);
",4,1,0,1,2,0,4,0,0,10,45,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,424,"                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {
",0,1,0,5,11,0,10,0,0,11,82,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,425,"                    throw new IllegalArgumentException(""Fields invalid for add"");
",0,0,0,1,2,0,0,2,0,3,61,11,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,428,"            valueToAdd -= (min - 1) - values[fieldIndex];  // reduce the amount to add
",4,2,1,2,4,0,0,0,0,11,74,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,429,"            values = nextField.addWrapPartial(instant, fieldIndex - 1, values, -1);  // subtract 1 from next bigger field
",4,1,0,1,2,0,8,0,0,15,109,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,430,"            values[fieldIndex] = getMaximumValue(instant, values);  // reset this field to max value
",0,0,1,2,4,0,6,0,0,11,88,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,431,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,433,"        return set(instant, fieldIndex, values, values[fieldIndex]);  // adjusts smaller fields
",0,0,1,2,4,1,8,0,0,12,87,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,461,"        int current = get(instant);
",2,0,0,1,2,0,4,0,0,6,27,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,462,"        int wrapped = FieldUtils.getWrappedValue
",2,0,0,0,0,0,4,0,0,6,40,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,464,"        return set(instant, wrapped);
",0,0,0,1,2,1,6,0,0,6,29,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,495,"        int current = values[fieldIndex];
",2,0,1,1,2,0,0,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,496,"        int wrapped = FieldUtils.getWrappedValue
",2,0,0,0,0,0,4,0,0,6,40,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,498,"        return set(instant, fieldIndex, values, wrapped);  // adjusts smaller fields
",0,0,0,1,2,1,10,0,0,10,76,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,522,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,75,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,545,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,81,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,585,"        FieldUtils.verifyValueBounds(this, newValue, getMinimumValue(partial, values), getMaximumValue(partial, values));
",0,0,0,3,6,0,18,0,0,18,113,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,586,"        values[fieldIndex] = newValue;
",2,0,1,1,2,0,0,0,0,7,30,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,589,"        for (int i = fieldIndex + 1; i < partial.size(); i++) {
",8,2,0,2,5,0,4,0,0,15,55,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,590,"            DateTimeField field = partial.getField(i);
",2,0,0,1,2,0,6,2,0,10,42,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,591,"            if (values[i] > field.getMaximumValue(partial, values)) {
",0,1,1,3,7,0,8,0,0,13,57,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,592,"                values[i] = field.getMaximumValue(partial, values);
",0,0,1,2,4,0,8,0,0,13,51,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,594,"            if (values[i] < field.getMinimumValue(partial, values)) {
",0,1,1,3,7,0,8,0,0,13,57,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,595,"                values[i] = field.getMinimumValue(partial, values);
",0,0,1,2,4,0,8,0,0,13,51,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,598,"        return values;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,618,"        int value = convertText(text, locale);
",2,0,0,1,2,0,6,0,0,8,38,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,619,"        return set(instant, value);
",0,0,0,1,2,1,6,0,0,6,27,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,635,"        return set(instant, text, null);
",0,0,0,1,2,1,6,0,0,7,32,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,654,"        int value = convertText(text, locale);
",2,0,0,1,2,0,6,0,0,8,38,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,655,"        return set(instant, fieldIndex, values, value);
",0,0,0,1,2,1,10,0,0,10,47,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,668,"            return Integer.parseInt(text);
",0,0,0,1,2,1,6,0,0,6,30,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,669,"        } catch (NumberFormatException ex) {
",2,0,0,1,4,0,0,2,0,4,36,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,670,"            throw new IllegalFieldValueException(getType(), text);
",2,0,0,2,4,0,2,2,0,6,54,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,704,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,716,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,746,"        return getMinimumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,758,"        return getMinimumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,772,"        return getMinimumValue(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,792,"        return getMaximumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,804,"        return getMaximumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,818,"        return getMaximumValue(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,829,"        int max = getMaximumValue();
",2,0,0,1,2,0,2,0,0,4,28,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,830,"        if (max >= 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,831,"            if (max < 10) {
",2,1,0,1,3,0,0,0,0,3,15,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,832,"                return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,833,"            } else if (max < 100) {
",2,1,0,1,4,0,0,0,0,3,23,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,834,"                return 2;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,835,"            } else if (max < 1000) {
",2,1,0,1,4,0,0,0,0,3,24,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,836,"                return 3;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,839,"        return Integer.toString(max).length();
",0,0,0,2,4,1,8,0,0,8,38,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,850,"        return getMaximumTextLength(locale);
",0,0,0,1,2,1,4,0,0,4,36,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,886,"        long newInstant = roundFloor(instant);
",2,0,0,1,2,0,4,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,887,"        if (newInstant != instant) {
",4,1,0,1,3,0,0,0,0,5,28,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,888,"            instant = add(newInstant, 1);
",2,0,0,1,2,0,4,0,0,7,29,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,890,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,903,"        long floor = roundFloor(instant);
",2,0,0,1,2,0,4,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,904,"        long ceiling = roundCeiling(instant);
",2,0,0,1,2,0,4,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,906,"        long diffFromFloor = instant - floor;
",6,1,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,907,"        long diffToCeiling = ceiling - instant;
",6,1,0,0,0,0,0,0,0,7,39,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,909,"        if (diffFromFloor <= diffToCeiling) {
",4,1,0,1,3,0,0,0,0,5,37,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,911,"            return floor;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,913,"            return ceiling;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,927,"        long floor = roundFloor(instant);
",2,0,0,1,2,0,4,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,928,"        long ceiling = roundCeiling(instant);
",2,0,0,1,2,0,4,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,930,"        long diffFromFloor = instant - floor;
",6,1,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,931,"        long diffToCeiling = ceiling - instant;
",6,1,0,0,0,0,0,0,0,7,39,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,933,"        if (diffToCeiling <= diffFromFloor) {
",4,1,0,1,3,0,0,0,0,5,37,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,935,"            return ceiling;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,937,"            return floor;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,955,"        long floor = roundFloor(instant);
",2,0,0,1,2,0,4,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,956,"        long ceiling = roundCeiling(instant);
",2,0,0,1,2,0,4,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,958,"        long diffFromFloor = instant - floor;
",6,1,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,959,"        long diffToCeiling = ceiling - instant;
",6,1,0,0,0,0,0,0,0,7,39,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,961,"        if (diffFromFloor < diffToCeiling) {
",4,1,0,1,3,0,0,0,0,5,36,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,963,"            return floor;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,964,"        } else if (diffToCeiling < diffFromFloor) {
",4,1,0,1,4,0,0,0,0,5,43,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,966,"            return ceiling;
",2,0,0,0,0,1,0,0,0,2,15,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,970,"            if ((get(ceiling) & 1) == 0) {
",0,2,0,3,7,0,4,0,0,6,30,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,971,"                return ceiling;
",2,0,0,0,0,1,0,0,0,2,15,9,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,973,"            return floor;
",2,0,0,0,0,1,0,0,0,2,13,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,994,"        return instant - roundFloor(instant);
",2,1,0,1,2,1,4,0,0,7,37,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,20,1003,"        return ""DateTimeField["" + getName() + ']';
",0,1,0,2,4,1,2,0,0,5,42,4,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,36,"    private FormatUtils() {
",2,0,0,1,3,1,0,0,0,3,23,2,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,37,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,51,"            buf.append('-');
",0,0,0,1,2,0,4,0,0,5,16,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,52,"            if (value != Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,53,"                value = -value;
",4,0,0,0,0,0,0,0,0,6,15,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,55,"                for (; size > 10; size--) {
",4,1,0,1,3,0,0,0,0,6,27,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,56,"                    buf.append('0');
",0,0,0,1,2,0,4,0,0,5,16,11,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,58,"                buf.append("""" + -(long)Integer.MIN_VALUE);
",4,1,0,2,4,0,4,0,0,11,42,9,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,59,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,69,"                buf.append('0');
",0,0,0,1,2,0,4,0,0,5,16,10,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,81,"                digits = 3;
",2,0,0,0,0,0,0,0,0,3,11,9,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,85,"                digits = (int)(Math.log(value) / LOG_10) + 1;
",4,2,0,3,6,0,6,0,0,13,45,10,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,88,"                buf.append('0');
",0,0,0,1,2,0,4,0,0,5,16,10,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,105,"        int intValue = (int)value;
",4,0,0,1,2,0,0,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,106,"        if (intValue == value) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,107,"            appendPaddedInteger(buf, intValue, size);
",0,0,0,1,2,0,8,0,0,8,41,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,108,"        } else if (size <= 19) {
",2,1,0,1,4,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,109,"            buf.append(Long.toString(value));
",0,0,0,2,4,0,10,0,0,10,33,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,111,"            if (value < 0) {
",2,1,0,1,3,0,0,0,0,3,16,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,112,"                buf.append('-');
",0,0,0,1,2,0,4,0,0,5,16,10,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,113,"                if (value != Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,30,9,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,114,"                    value = -value;
",4,0,0,0,0,0,0,0,0,6,15,11,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,116,"                    for (; size > 19; size--) {
",4,1,0,1,3,0,0,0,0,6,27,11,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,117,"                        buf.append('0');
",0,0,0,1,2,0,4,0,0,5,16,14,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,119,"                    buf.append(""9223372036854775808"");
",0,0,0,1,2,0,4,0,0,5,34,12,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,120,"                    return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,123,"            int digits = (int)(Math.log(value) / LOG_10) + 1;
",4,2,0,3,6,0,6,0,0,12,49,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,124,"            for (; size > digits; size--) {
",6,1,0,1,3,0,0,0,0,8,31,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,125,"                buf.append('0');
",0,0,0,1,2,0,4,0,0,5,16,10,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,127,"            buf.append(Long.toString(value));
",0,0,0,2,4,0,10,0,0,10,33,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,129,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,144,"        if (value < 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,145,"            out.write('-');
",0,0,0,1,2,0,4,0,0,5,15,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,146,"            if (value != Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,147,"                value = -value;
",4,0,0,0,0,0,0,0,0,6,15,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,149,"                for (; size > 10; size--) {
",4,1,0,1,3,0,0,0,0,6,27,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,150,"                    out.write('0');
",0,0,0,1,2,0,4,0,0,5,15,11,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,152,"                out.write("""" + -(long)Integer.MIN_VALUE);
",4,1,0,2,4,0,4,0,0,11,41,9,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,153,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,156,"        if (value < 10) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,157,"            for (; size > 1; size--) {
",4,1,0,1,3,0,0,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,158,"                out.write('0');
",0,0,0,1,2,0,4,0,0,5,15,9,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,160,"            out.write(value + '0');
",2,1,0,1,2,0,4,0,0,8,23,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,161,"        } else if (value < 100) {
",2,1,0,1,4,0,0,0,0,3,25,5,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,162,"            for (; size > 2; size--) {
",4,1,0,1,3,0,0,0,0,6,26,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,163,"                out.write('0');
",0,0,0,1,2,0,4,0,0,5,15,10,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,168,"            int d = ((value + 1) * 13421772) >> 27;
",4,3,0,2,4,0,0,0,0,7,39,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,169,"            out.write(d + '0');
",2,1,0,1,2,0,4,0,0,8,19,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,171,"            out.write(value - (d << 3) - (d << 1) + '0');
",6,4,0,3,6,0,4,0,0,15,45,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,172,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,174,"            if (value < 1000) {
",2,1,0,1,3,0,0,0,0,3,19,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,175,"                digits = 3;
",2,0,0,0,0,0,0,0,0,3,11,9,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,176,"            } else if (value < 10000) {
",2,1,0,1,4,0,0,0,0,3,27,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,177,"                digits = 4;
",2,0,0,0,0,0,0,0,0,3,11,10,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,179,"                digits = (int)(Math.log(value) / LOG_10) + 1;
",4,2,0,3,6,0,6,0,0,13,45,10,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,181,"            for (; size > digits; size--) {
",6,1,0,1,3,0,0,0,0,8,31,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,182,"                out.write('0');
",0,0,0,1,2,0,4,0,0,5,15,10,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,184,"            out.write(Integer.toString(value));
",0,0,0,2,4,0,10,0,0,10,35,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,186,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,201,"        int intValue = (int)value;
",4,0,0,1,2,0,0,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,202,"        if (intValue == value) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,203,"            writePaddedInteger(out, intValue, size);
",0,0,0,1,2,0,8,0,0,8,40,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,204,"        } else if (size <= 19) {
",2,1,0,1,4,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,205,"            out.write(Long.toString(value));
",0,0,0,2,4,0,10,0,0,10,32,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,207,"            if (value < 0) {
",2,1,0,1,3,0,0,0,0,3,16,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,208,"                out.write('-');
",0,0,0,1,2,0,4,0,0,5,15,10,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,209,"                if (value != Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,30,9,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,210,"                    value = -value;
",4,0,0,0,0,0,0,0,0,6,15,11,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,212,"                    for (; size > 19; size--) {
",4,1,0,1,3,0,0,0,0,6,27,11,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,213,"                        out.write('0');
",0,0,0,1,2,0,4,0,0,5,15,14,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,215,"                    out.write(""9223372036854775808"");
",0,0,0,1,2,0,4,0,0,5,33,12,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,216,"                    return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,219,"            int digits = (int)(Math.log(value) / LOG_10) + 1;
",4,2,0,3,6,0,6,0,0,12,49,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,220,"            for (; size > digits; size--) {
",6,1,0,1,3,0,0,0,0,8,31,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,221,"                out.write('0');
",0,0,0,1,2,0,4,0,0,5,15,10,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,223,"            out.write(Long.toString(value));
",0,0,0,2,4,0,10,0,0,10,32,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,225,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,236,"        if (value < 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,237,"            buf.append('-');
",0,0,0,1,2,0,4,0,0,5,16,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,238,"            if (value != Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,239,"                value = -value;
",4,0,0,0,0,0,0,0,0,6,15,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,241,"                buf.append("""" + -(long)Integer.MIN_VALUE);
",4,1,0,2,4,0,4,0,0,11,42,9,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,242,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,245,"        if (value < 10) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,246,"            buf.append((char)(value + '0'));
",2,1,0,3,6,0,4,0,0,8,32,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,247,"        } else if (value < 100) {
",2,1,0,1,4,0,0,0,0,3,25,5,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,251,"            int d = ((value + 1) * 13421772) >> 27;
",4,3,0,2,4,0,0,0,0,7,39,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,252,"            buf.append((char) (d + '0'));
",2,1,0,3,6,0,4,0,0,8,29,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,254,"            buf.append((char) (value - (d << 3) - (d << 1) + '0'));
",6,4,0,5,10,0,4,0,0,15,55,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,255,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,256,"            buf.append(Integer.toString(value));
",0,0,0,2,4,0,10,0,0,10,36,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,258,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,269,"        int intValue = (int)value;
",4,0,0,1,2,0,0,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,270,"        if (intValue == value) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,271,"            appendUnpaddedInteger(buf, intValue);
",0,0,0,1,2,0,6,0,0,6,37,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,273,"            buf.append(Long.toString(value));
",0,0,0,2,4,0,10,0,0,10,33,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,275,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,288,"        if (value < 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,289,"            out.write('-');
",0,0,0,1,2,0,4,0,0,5,15,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,290,"            if (value != Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,291,"                value = -value;
",4,0,0,0,0,0,0,0,0,6,15,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,293,"                out.write("""" + -(long)Integer.MIN_VALUE);
",4,1,0,2,4,0,4,0,0,11,41,9,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,294,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,297,"        if (value < 10) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,298,"            out.write(value + '0');
",2,1,0,1,2,0,4,0,0,8,23,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,299,"        } else if (value < 100) {
",2,1,0,1,4,0,0,0,0,3,25,5,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,303,"            int d = ((value + 1) * 13421772) >> 27;
",4,3,0,2,4,0,0,0,0,7,39,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,304,"            out.write(d + '0');
",2,1,0,1,2,0,4,0,0,8,19,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,306,"            out.write(value - (d << 3) - (d << 1) + '0');
",6,4,0,3,6,0,4,0,0,15,45,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,307,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,308,"            out.write(Integer.toString(value));
",0,0,0,2,4,0,10,0,0,10,35,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,310,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,323,"        int intValue = (int)value;
",4,0,0,1,2,0,0,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,324,"        if (intValue == value) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,325,"            writeUnpaddedInteger(out, intValue);
",0,0,0,1,2,0,6,0,0,6,36,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,327,"            out.write(Long.toString(value));
",0,0,0,2,4,0,10,0,0,10,32,7,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,329,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,336,"        if (value < 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,337,"            if (value != Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,30,6,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,338,"                return calculateDigitCount(-value) + 1;
",2,1,0,1,2,1,2,0,0,6,39,8,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,340,"                return 20;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,343,"        return 
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,352,"        int value = text.charAt(position) - '0';
",2,1,0,1,2,0,6,0,0,10,40,5,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,353,"        return ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';
",6,6,0,4,8,1,4,0,0,17,71,4,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,362,"            sampleText = text.substring(0, sampleLen).concat(""..."");
",2,0,0,2,4,0,8,0,0,12,56,6,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,366,"            return ""Invalid format: \"""" + sampleText + '""';
",2,1,0,0,0,1,0,0,0,5,47,6,0.00000,0
defect4j,time,org/joda/time/format/FormatUtils,20,370,"            return ""Invalid format: \"""" + sampleText + ""\"" is too short"";
",2,1,0,0,0,1,0,0,0,5,61,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1186,"            out.write(iValue);
",0,0,0,1,2,0,6,0,0,6,18,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1187,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1190,"            buf.append(iValue);
",0,0,0,1,2,0,6,0,0,6,19,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1191,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1194,"            out.write(iValue);
",0,0,0,1,2,0,6,0,0,6,18,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1195,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1203,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1210,"                a = Character.toUpperCase(a);
",2,0,0,1,2,0,6,0,0,9,29,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1211,"                b = Character.toUpperCase(b);
",2,0,0,1,2,0,6,0,0,9,29,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1212,"                if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1213,"                    a = Character.toLowerCase(a);
",2,0,0,1,2,0,6,0,0,9,29,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1214,"                    b = Character.toLowerCase(b);
",2,0,0,1,2,0,6,0,0,9,29,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1215,"                    if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,20,1216,"                        return ~position;
",2,0,0,0,0,1,0,0,0,3,17,11,0.00000,0
defect4j,time,org/joda/time/DateTime,20,155,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,156,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,168,"        super(zone);
",2,0,0,1,2,0,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,169,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,182,"        super(chronology);
",2,0,0,1,2,0,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,183,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,193,"        super(instant);
",2,0,0,1,2,0,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,194,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,206,"        super(instant, zone);
",4,0,0,1,2,0,0,0,0,4,21,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,207,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,220,"        super(instant, chronology);
",4,0,0,1,2,0,0,0,0,4,27,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,221,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,241,"        super(instant, (Chronology) null);
",2,0,0,2,4,0,0,2,0,5,34,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,242,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,265,"        super(instant, zone);
",4,0,0,1,2,0,0,0,0,4,21,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,266,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,286,"        super(instant, DateTimeUtils.getChronology(chronology));
",2,0,0,2,4,0,6,0,0,8,56,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,287,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,307,"        super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, 0, 0);
",10,0,0,1,2,0,0,0,0,10,68,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,308,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,331,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,333,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,357,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,359,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,381,"        super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, 0);
",12,0,0,1,2,0,0,0,0,12,81,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,382,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,435,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,437,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,460,"        super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
",14,0,0,1,2,0,0,0,0,14,94,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,461,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,487,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,489,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,516,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,518,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,89,"        return new DateTime();
",0,0,0,1,2,1,0,2,0,2,22,6,0.00000,0
defect4j,time,org/joda/time/DateTime,20,101,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,102,"            throw new NullPointerException(""Zone must not be null"");
",0,0,0,1,2,0,0,2,0,4,56,6,0.00000,0
defect4j,time,org/joda/time/DateTime,20,104,"        return new DateTime(zone);
",2,0,0,1,2,1,0,2,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,116,"        if (chronology == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,117,"            throw new NullPointerException(""Chronology must not be null"");
",0,0,0,1,2,0,0,2,0,4,62,6,0.00000,0
defect4j,time,org/joda/time/DateTime,20,119,"        return new DateTime(chronology);
",2,0,0,1,2,1,0,2,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,133,"        return parse(str, ISODateTimeFormat.dateTimeParser().withOffsetParsed());
",0,0,0,3,6,1,10,0,0,10,73,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,144,"        return formatter.parseDateTime(str);
",0,0,0,1,2,1,6,0,0,6,36,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,527,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,537,"        if (getChronology() == ISOChronology.getInstance()) {
",0,1,0,3,7,0,6,0,0,7,53,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,538,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,540,"        return super.toDateTimeISO();
",2,0,0,1,2,1,0,0,0,2,29,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,550,"        zone = DateTimeUtils.getZone(zone);
",2,0,0,1,2,0,6,0,0,9,35,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,551,"        if (getZone() == zone) {
",2,1,0,2,5,0,2,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,552,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,554,"        return super.toDateTime(zone);
",4,0,0,1,2,1,0,0,0,4,30,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,564,"        chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,565,"        if (getChronology() == chronology) {
",2,1,0,2,5,0,2,0,0,5,36,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,566,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,568,"        return super.toDateTime(chronology);
",4,0,0,1,2,1,0,0,0,4,36,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,582,"        return (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));
",4,1,0,4,8,1,4,2,0,11,84,6,0.00000,0
defect4j,time,org/joda/time/DateTime,20,595,"        newChronology = DateTimeUtils.getChronology(newChronology);
",2,0,0,1,2,0,6,0,0,9,59,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,596,"        return (newChronology == getChronology() ? this : new DateTime(getMillis(), newChronology));
",4,1,0,4,8,1,4,2,0,11,92,6,0.00000,0
defect4j,time,org/joda/time/DateTime,20,618,"        return withChronology(getChronology().withZone(newZone));
",0,0,0,3,6,1,8,0,0,8,57,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,639,"        newZone = DateTimeUtils.getZone(newZone);
",2,0,0,1,2,0,6,0,0,9,41,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,640,"        DateTimeZone originalZone = DateTimeUtils.getZone(getZone());
",2,0,0,2,4,0,6,2,0,10,61,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,641,"        if (newZone == originalZone) {
",4,1,0,1,3,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,642,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,645,"        long millis = originalZone.getMillisKeepLocal(newZone, getMillis());
",2,0,0,2,4,0,8,0,0,10,68,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,646,"        return new DateTime(millis, getChronology().withZone(newZone));
",2,0,0,3,6,1,6,2,0,10,63,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,665,"        long newMillis = getZone().adjustOffset(getMillis(), false);
",2,0,0,3,6,0,6,0,0,9,60,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,666,"        return withMillis(newMillis);
",0,0,0,1,2,1,4,0,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,685,"        long newMillis = getZone().adjustOffset(getMillis(), true);
",2,0,0,3,6,0,6,0,0,9,59,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,686,"        return withMillis(newMillis);
",0,0,0,1,2,1,4,0,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,709,"        Chronology chrono = getChronology();
",2,0,0,1,2,0,2,2,0,6,36,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,710,"        long instant = getMillis();
",2,0,0,1,2,0,2,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,711,"        instant = chrono.year().set(instant, year);
",2,0,0,2,4,0,10,0,0,13,43,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,712,"        instant = chrono.monthOfYear().set(instant, monthOfYear);
",2,0,0,2,4,0,10,0,0,13,57,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,713,"        instant = chrono.dayOfMonth().set(instant, dayOfMonth);
",2,0,0,2,4,0,10,0,0,13,55,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,714,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,737,"        Chronology chrono = getChronology();
",2,0,0,1,2,0,2,2,0,6,36,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,738,"        long instant = getMillis();
",2,0,0,1,2,0,2,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,739,"        instant = chrono.hourOfDay().set(instant, hourOfDay);
",2,0,0,2,4,0,10,0,0,13,53,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,740,"        instant = chrono.minuteOfHour().set(instant, minuteOfHour);
",2,0,0,2,4,0,10,0,0,13,59,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,741,"        instant = chrono.secondOfMinute().set(instant, secondOfMinute);
",2,0,0,2,4,0,10,0,0,13,63,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,742,"        instant = chrono.millisOfSecond().set(instant, millisOfSecond);
",2,0,0,2,4,0,10,0,0,13,63,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,743,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,759,"        return toLocalDate().toDateTimeAtStartOfDay(getZone());
",0,0,0,3,6,1,6,0,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,776,"        if (partial == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,777,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,779,"        return withMillis(getChronology().set(partial, getMillis()));
",0,0,0,4,8,1,10,0,0,10,61,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,802,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,803,"            throw new IllegalArgumentException(""Field must not be null"");
",0,0,0,1,2,0,0,2,0,4,61,6,0.00000,0
defect4j,time,org/joda/time/DateTime,20,805,"        long instant = fieldType.getField(getChronology()).set(getMillis(), value);
",2,0,0,4,8,0,12,0,0,14,75,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,806,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,828,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,829,"            throw new IllegalArgumentException(""Field must not be null"");
",0,0,0,1,2,0,0,2,0,4,61,6,0.00000,0
defect4j,time,org/joda/time/DateTime,20,831,"        if (amount == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,832,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,834,"        long instant = fieldType.getField(getChronology()).add(getMillis(), amount);
",2,0,0,4,8,0,12,0,0,14,76,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,835,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,850,"        if (durationToAdd == 0 || scalar == 0) {
",4,3,0,1,3,0,0,0,0,7,40,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,851,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,853,"        long instant = getChronology().add(getMillis(), durationToAdd, scalar);
",2,0,0,3,6,0,10,0,0,12,71,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,854,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,868,"        if (durationToAdd == null || scalar == 0) {
",4,3,0,1,3,0,0,0,0,7,43,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,869,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,871,"        return withDurationAdded(durationToAdd.getMillis(), scalar);
",0,0,0,2,4,1,8,0,0,8,60,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,890,"        if (period == null || scalar == 0) {
",4,3,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,891,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,893,"        long instant = getChronology().add(period, getMillis(), scalar);
",2,0,0,3,6,0,10,0,0,12,64,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,894,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,909,"        return withDurationAdded(duration, 1);
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,923,"        return withDurationAdded(duration, 1);
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,949,"        return withPeriodAdded(period, 1);
",0,0,0,1,2,1,4,0,0,4,34,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,976,"        if (years == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,977,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,979,"        long instant = getChronology().years().add(getMillis(), years);
",2,0,0,4,8,0,10,0,0,12,63,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,980,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1006,"        if (months == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1007,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1009,"        long instant = getChronology().months().add(getMillis(), months);
",2,0,0,4,8,0,10,0,0,12,65,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1010,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1032,"        if (weeks == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1033,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1035,"        long instant = getChronology().weeks().add(getMillis(), weeks);
",2,0,0,4,8,0,10,0,0,12,63,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1036,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1067,"        if (days == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1068,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1070,"        long instant = getChronology().days().add(getMillis(), days);
",2,0,0,4,8,0,10,0,0,12,61,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1071,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1098,"        if (hours == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1099,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1101,"        long instant = getChronology().hours().add(getMillis(), hours);
",2,0,0,4,8,0,10,0,0,12,63,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1102,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1125,"        if (minutes == 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1126,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1128,"        long instant = getChronology().minutes().add(getMillis(), minutes);
",2,0,0,4,8,0,10,0,0,12,67,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1129,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1152,"        if (seconds == 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1153,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1155,"        long instant = getChronology().seconds().add(getMillis(), seconds);
",2,0,0,4,8,0,10,0,0,12,67,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1156,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1178,"        if (millis == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1179,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1181,"        long instant = getChronology().millis().add(getMillis(), millis);
",2,0,0,4,8,0,10,0,0,12,65,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1182,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1197,"        return withDurationAdded(duration, -1);
",0,0,0,1,2,1,4,0,0,5,39,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1211,"        return withDurationAdded(duration, -1);
",0,0,0,1,2,1,4,0,0,5,39,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1238,"        return withPeriodAdded(period, -1);
",0,0,0,1,2,1,4,0,0,5,35,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1265,"        if (years == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1266,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1268,"        long instant = getChronology().years().subtract(getMillis(), years);
",2,0,0,4,8,0,10,0,0,12,68,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1269,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1295,"        if (months == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1296,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1298,"        long instant = getChronology().months().subtract(getMillis(), months);
",2,0,0,4,8,0,10,0,0,12,70,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1299,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1321,"        if (weeks == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1322,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1324,"        long instant = getChronology().weeks().subtract(getMillis(), weeks);
",2,0,0,4,8,0,10,0,0,12,68,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1325,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1356,"        if (days == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1357,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1359,"        long instant = getChronology().days().subtract(getMillis(), days);
",2,0,0,4,8,0,10,0,0,12,66,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1360,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1388,"        if (hours == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1389,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1391,"        long instant = getChronology().hours().subtract(getMillis(), hours);
",2,0,0,4,8,0,10,0,0,12,68,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1392,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1415,"        if (minutes == 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1416,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1418,"        long instant = getChronology().minutes().subtract(getMillis(), minutes);
",2,0,0,4,8,0,10,0,0,12,72,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1419,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1442,"        if (seconds == 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1443,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1445,"        long instant = getChronology().seconds().subtract(getMillis(), seconds);
",2,0,0,4,8,0,10,0,0,12,72,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1446,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1469,"        if (millis == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1470,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1472,"        long instant = getChronology().millis().subtract(getMillis(), millis);
",2,0,0,4,8,0,10,0,0,12,70,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1473,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1485,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1486,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");
",0,0,0,1,2,0,0,2,0,4,77,6,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1488,"        DateTimeField field = type.getField(getChronology());
",2,0,0,2,4,0,6,2,0,10,53,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1489,"        if (field.isSupported() == false) {
",0,1,0,2,5,0,4,0,0,6,35,4,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1490,"            throw new IllegalArgumentException(""Field '"" + type + ""' is not supported"");
",2,1,0,1,2,0,0,2,0,7,76,7,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1492,"        return new Property(this, field);
",2,0,0,1,2,1,0,2,0,4,33,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1503,"        return new DateMidnight(getMillis(), getChronology());
",0,0,0,3,6,1,4,2,0,6,54,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1515,"        return new YearMonthDay(getMillis(), getChronology());
",0,0,0,3,6,1,4,2,0,6,54,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1527,"        return new TimeOfDay(getMillis(), getChronology());
",0,0,0,3,6,1,4,2,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1538,"        return new LocalDateTime(getMillis(), getChronology());
",0,0,0,3,6,1,4,2,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1549,"        return new LocalDate(getMillis(), getChronology());
",0,0,0,3,6,1,4,2,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1560,"        return new LocalTime(getMillis(), getChronology());
",0,0,0,3,6,1,4,2,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1577,"        return withMillis(getChronology().era().set(getMillis(), era));
",0,0,0,5,10,1,12,0,0,12,63,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1593,"        return withMillis(getChronology().centuryOfEra().set(getMillis(), centuryOfEra));
",0,0,0,5,10,1,12,0,0,12,81,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1609,"        return withMillis(getChronology().yearOfEra().set(getMillis(), yearOfEra));
",0,0,0,5,10,1,12,0,0,12,75,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1625,"        return withMillis(getChronology().yearOfCentury().set(getMillis(), yearOfCentury));
",0,0,0,5,10,1,12,0,0,12,83,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1641,"        return withMillis(getChronology().year().set(getMillis(), year));
",0,0,0,5,10,1,12,0,0,12,65,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1663,"        return withMillis(getChronology().weekyear().set(getMillis(), weekyear));
",0,0,0,5,10,1,12,0,0,12,73,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1679,"        return withMillis(getChronology().monthOfYear().set(getMillis(), monthOfYear));
",0,0,0,5,10,1,12,0,0,12,79,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1700,"        return withMillis(getChronology().weekOfWeekyear().set(getMillis(), weekOfWeekyear));
",0,0,0,5,10,1,12,0,0,12,85,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1716,"        return withMillis(getChronology().dayOfYear().set(getMillis(), dayOfYear));
",0,0,0,5,10,1,12,0,0,12,75,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1732,"        return withMillis(getChronology().dayOfMonth().set(getMillis(), dayOfMonth));
",0,0,0,5,10,1,12,0,0,12,77,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1748,"        return withMillis(getChronology().dayOfWeek().set(getMillis(), dayOfWeek));
",0,0,0,5,10,1,12,0,0,12,75,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1765,"        return withMillis(getChronology().hourOfDay().set(getMillis(), hour));
",0,0,0,5,10,1,12,0,0,12,70,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1781,"        return withMillis(getChronology().minuteOfHour().set(getMillis(), minute));
",0,0,0,5,10,1,12,0,0,12,75,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1797,"        return withMillis(getChronology().secondOfMinute().set(getMillis(), second));
",0,0,0,5,10,1,12,0,0,12,77,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1813,"        return withMillis(getChronology().millisOfSecond().set(getMillis(), millis));
",0,0,0,5,10,1,12,0,0,12,77,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1829,"        return withMillis(getChronology().millisOfDay().set(getMillis(), millis));
",0,0,0,5,10,1,12,0,0,12,74,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1840,"        return new Property(this, getChronology().era());
",0,0,0,3,6,1,4,2,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1849,"        return new Property(this, getChronology().centuryOfEra());
",0,0,0,3,6,1,4,2,0,6,58,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1858,"        return new Property(this, getChronology().yearOfCentury());
",0,0,0,3,6,1,4,2,0,6,59,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1867,"        return new Property(this, getChronology().yearOfEra());
",0,0,0,3,6,1,4,2,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1876,"        return new Property(this, getChronology().year());
",0,0,0,3,6,1,4,2,0,6,50,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1885,"        return new Property(this, getChronology().weekyear());
",0,0,0,3,6,1,4,2,0,6,54,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1894,"        return new Property(this, getChronology().monthOfYear());
",0,0,0,3,6,1,4,2,0,6,57,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1903,"        return new Property(this, getChronology().weekOfWeekyear());
",0,0,0,3,6,1,4,2,0,6,60,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1912,"        return new Property(this, getChronology().dayOfYear());
",0,0,0,3,6,1,4,2,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1921,"        return new Property(this, getChronology().dayOfMonth());
",0,0,0,3,6,1,4,2,0,6,56,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1930,"        return new Property(this, getChronology().dayOfWeek());
",0,0,0,3,6,1,4,2,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1941,"        return new Property(this, getChronology().hourOfDay());
",0,0,0,3,6,1,4,2,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1950,"        return new Property(this, getChronology().minuteOfDay());
",0,0,0,3,6,1,4,2,0,6,57,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1959,"        return new Property(this, getChronology().minuteOfHour());
",0,0,0,3,6,1,4,2,0,6,58,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1968,"        return new Property(this, getChronology().secondOfDay());
",0,0,0,3,6,1,4,2,0,6,57,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1977,"        return new Property(this, getChronology().secondOfMinute());
",0,0,0,3,6,1,4,2,0,6,60,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1986,"        return new Property(this, getChronology().millisOfDay());
",0,0,0,3,6,1,4,2,0,6,57,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,1995,"        return new Property(this, getChronology().millisOfSecond());
",0,0,0,3,6,1,4,2,0,6,60,5,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,20,61,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());
",0,0,0,3,6,0,8,0,0,8,69,5,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,20,62,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,20,73,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));
",0,0,0,3,6,0,10,0,0,10,73,5,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,20,74,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,20,86,"        this(DateTimeUtils.currentTimeMillis(), chronology);
",2,0,0,2,4,0,4,0,0,6,52,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,20,87,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,20,97,"        this(instant, ISOChronology.getInstance());
",2,0,0,2,4,0,4,0,0,6,43,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,20,98,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,20,110,"        this(instant, ISOChronology.getInstance(zone));
",2,0,0,2,4,0,6,0,0,8,47,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,20,111,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,20,124,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,20,125,"        iChronology = checkChronology(chronology);
",2,0,0,1,2,0,4,0,0,7,42,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,20,126,"        iMillis = checkInstant(instant, iChronology);
",2,0,0,1,2,0,6,0,0,9,45,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,20,127,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,20,146,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,20,147,"        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
",2,0,0,2,4,0,8,2,0,12,89,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,20,148,"        Chronology chrono = checkChronology(converter.getChronology(instant, zone));
",2,0,0,2,4,0,10,2,0,14,76,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,20,149,"        iChronology = chrono;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,20,150,"        iMillis = checkInstant(converter.getInstantMillis(instant, chrono), chrono);
",2,0,0,2,4,0,12,0,0,15,76,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,20,151,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,20,168,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,20,169,"        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
",2,0,0,2,4,0,8,2,0,12,89,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,20,170,"        iChronology = checkChronology(converter.getChronology(instant, chronology));
",2,0,0,2,4,0,10,0,0,13,76,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,20,171,"        iMillis = checkInstant(converter.getInstantMillis(instant, chronology), iChronology);
",2,0,0,2,4,0,12,0,0,15,85,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,20,172,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,20,195,"        this(year, monthOfYear, dayOfMonth, hourOfDay,
",8,0,0,0,1,0,0,0,0,8,46,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,20,197,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,20,317,"        iMillis = checkInstant(instant, iChronology);
",2,0,0,1,2,0,6,0,0,9,45,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,20,318,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,20,329,"        iChronology = checkChronology(chronology);
",2,0,0,1,2,0,4,0,0,7,42,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,20,330,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,20,66,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,20,67,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");
",0,0,0,1,2,0,0,2,0,4,77,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,20,69,"        return type.getField(getChronology()).get(getMillis());
",0,0,0,4,8,1,10,0,0,10,55,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,20,79,"        return getChronology().era().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,20,88,"        return getChronology().centuryOfEra().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,55,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,20,97,"        return getChronology().yearOfEra().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,20,106,"        return getChronology().yearOfCentury().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,56,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,20,115,"        return getChronology().year().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,47,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,20,130,"        return getChronology().weekyear().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,20,139,"        return getChronology().monthOfYear().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,20,153,"        return getChronology().weekOfWeekyear().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,57,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,20,162,"        return getChronology().dayOfYear().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,20,173,"        return getChronology().dayOfMonth().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,53,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,20,184,"        return getChronology().dayOfWeek().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,20,194,"        return getChronology().hourOfDay().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,20,203,"        return getChronology().minuteOfDay().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,20,212,"        return getChronology().minuteOfHour().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,55,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,20,221,"        return getChronology().secondOfDay().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,20,230,"        return getChronology().secondOfMinute().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,57,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,20,239,"        return getChronology().millisOfDay().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,20,248,"        return getChronology().millisOfSecond().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,57,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,20,270,"        if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,20,271,"            locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,20,273,"        DateTimeZone zone = getZone();
",2,0,0,1,2,0,2,2,0,6,30,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,20,274,"        Calendar cal = Calendar.getInstance(zone.toTimeZone(), locale);
",2,0,0,2,4,0,10,2,0,14,63,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,20,275,"        cal.setTime(toDate());
",0,0,0,2,4,0,6,0,0,6,22,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,20,276,"        return cal;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,20,294,"        DateTimeZone zone = getZone();
",2,0,0,1,2,0,2,2,0,6,30,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,20,295,"        GregorianCalendar cal = new GregorianCalendar(zone.toTimeZone());
",2,0,0,2,4,0,4,4,0,10,65,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,20,296,"        cal.setTime(toDate());
",0,0,0,2,4,0,6,0,0,6,22,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,20,297,"        return cal;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,20,308,"        if (pattern == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,20,309,"            return toString();
",0,0,0,1,2,1,2,0,0,2,18,7,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,20,311,"        return DateTimeFormat.forPattern(pattern).print(this);
",0,0,0,2,4,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,20,322,"        if (pattern == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,20,323,"            return toString();
",0,0,0,1,2,1,2,0,0,2,18,7,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,20,325,"        return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);
",0,0,0,3,6,1,12,0,0,12,73,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,71,"        return getChronology().getZone();
",0,0,0,2,4,1,4,0,0,4,33,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,89,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,90,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");
",0,0,0,1,2,0,0,2,0,4,77,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,92,"        return type.getField(getChronology()).get(getMillis());
",0,0,0,4,8,1,10,0,0,10,55,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,103,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,104,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,106,"        return type.getField(getChronology()).isSupported();
",0,0,0,3,6,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,124,"        if (field == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,125,"            throw new IllegalArgumentException(""The DateTimeField must not be null"");
",0,0,0,1,2,0,0,2,0,4,73,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,127,"        return field.get(getMillis());
",0,0,0,2,4,1,6,0,0,6,30,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,137,"        return new Instant(getMillis());
",0,0,0,2,4,1,2,2,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,146,"        return new DateTime(getMillis(), getZone());
",0,0,0,3,6,1,4,2,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,155,"        return new DateTime(getMillis(), ISOChronology.getInstance(getZone()));
",0,0,0,4,8,1,8,2,0,10,71,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,165,"        Chronology chrono = DateTimeUtils.getChronology(getChronology());
",2,0,0,2,4,0,6,2,0,10,65,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,166,"        chrono = chrono.withZone(zone);
",2,0,0,1,2,0,6,0,0,9,31,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,167,"        return new DateTime(getMillis(), chrono);
",2,0,0,2,4,1,2,2,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,177,"        return new DateTime(getMillis(), chronology);
",2,0,0,2,4,1,2,2,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,191,"        return new MutableDateTime(getMillis(), getZone());
",0,0,0,3,6,1,4,2,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,200,"        return new MutableDateTime(getMillis(), ISOChronology.getInstance(getZone()));
",0,0,0,4,8,1,8,2,0,10,78,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,210,"        Chronology chrono = DateTimeUtils.getChronology(getChronology());
",2,0,0,2,4,0,6,2,0,10,65,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,211,"        chrono = chrono.withZone(zone);
",2,0,0,1,2,0,6,0,0,9,31,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,212,"        return new MutableDateTime(getMillis(), chrono);
",2,0,0,2,4,1,2,2,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,222,"        return new MutableDateTime(getMillis(), chronology);
",2,0,0,2,4,1,2,2,0,6,52,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,235,"        return new Date(getMillis());
",0,0,0,2,4,1,2,2,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,259,"        if (this == readableInstant) {
",2,1,0,1,3,0,0,0,0,3,30,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,260,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,262,"        if (readableInstant instanceof ReadableInstant == false) {
",2,1,0,1,3,0,0,2,0,6,58,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,263,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,265,"        ReadableInstant otherInstant = (ReadableInstant) readableInstant;
",4,0,0,1,2,0,0,4,0,8,65,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,266,"        return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,278,"        return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,296,"        if (this == other) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,297,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,300,"        long otherMillis = other.getMillis();
",2,0,0,1,2,0,4,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,301,"        long thisMillis = getMillis();
",2,0,0,1,2,0,2,0,0,4,30,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,304,"        if (thisMillis == otherMillis) {
",4,1,0,1,3,0,0,0,0,5,32,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,305,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,307,"        if (thisMillis < otherMillis) {
",4,1,0,1,3,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,308,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,310,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,323,"        return (getMillis() > instant);
",2,1,0,2,4,1,2,0,0,5,31,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,333,"        return isAfter(DateTimeUtils.currentTimeMillis());
",0,0,0,2,4,1,6,0,0,6,50,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,344,"        long instantMillis = DateTimeUtils.getInstantMillis(instant);
",2,0,0,1,2,0,6,0,0,8,61,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,345,"        return isAfter(instantMillis);
",0,0,0,1,2,1,4,0,0,4,30,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,357,"        return (getMillis() < instant);
",2,1,0,2,4,1,2,0,0,5,31,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,367,"        return isBefore(DateTimeUtils.currentTimeMillis());
",0,0,0,2,4,1,6,0,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,378,"        long instantMillis = DateTimeUtils.getInstantMillis(instant);
",2,0,0,1,2,0,6,0,0,8,61,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,379,"        return isBefore(instantMillis);
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,391,"        return (getMillis() == instant);
",2,1,0,2,4,1,2,0,0,5,32,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,401,"        return isEqual(DateTimeUtils.currentTimeMillis());
",0,0,0,2,4,1,6,0,0,6,50,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,412,"        long instantMillis = DateTimeUtils.getInstantMillis(instant);
",2,0,0,1,2,0,6,0,0,8,61,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,413,"        return isEqual(instantMillis);
",0,0,0,1,2,1,4,0,0,4,30,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,424,"        return ISODateTimeFormat.dateTime().print(this);
",0,0,0,2,4,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,436,"        if (formatter == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,437,"            return toString();
",0,0,0,1,2,1,2,0,0,2,18,7,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,439,"        return formatter.print(this);
",0,0,0,1,2,1,4,0,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,20,55,"public abstract class AbstractInstant implements ReadableInstant {
",2,0,0,0,1,2,0,2,0,6,66,1,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,463,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,464,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,466,"            if (obj instanceof StandardDateTimeFieldType) {
",2,0,0,1,3,0,0,2,0,4,47,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,467,"                return iOrdinal == ((StandardDateTimeFieldType) obj).iOrdinal;
",6,1,0,2,4,1,0,2,0,9,62,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,469,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,475,"            return iOrdinal;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,484,"                    return chronology.era();
",0,0,0,1,2,1,4,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,486,"                    return chronology.yearOfEra();
",0,0,0,1,2,1,4,0,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,488,"                    return chronology.centuryOfEra();
",0,0,0,1,2,1,4,0,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,490,"                    return chronology.yearOfCentury();
",0,0,0,1,2,1,4,0,0,4,34,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,494,"                    return chronology.dayOfYear();
",0,0,0,1,2,1,4,0,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,500,"                    return chronology.weekyearOfCentury();
",0,0,0,1,2,1,4,0,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,502,"                    return chronology.weekyear();
",0,0,0,1,2,1,4,0,0,4,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,504,"                    return chronology.weekOfWeekyear();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,506,"                    return chronology.dayOfWeek();
",0,0,0,1,2,1,4,0,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,508,"                    return chronology.halfdayOfDay();
",0,0,0,1,2,1,4,0,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,510,"                    return chronology.hourOfHalfday();
",0,0,0,1,2,1,4,0,0,4,34,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,512,"                    return chronology.clockhourOfHalfday();
",0,0,0,1,2,1,4,0,0,4,39,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,514,"                    return chronology.clockhourOfDay();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,518,"                    return chronology.minuteOfDay();
",0,0,0,1,2,1,4,0,0,4,32,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,522,"                    return chronology.secondOfDay();
",0,0,0,1,2,1,4,0,0,4,32,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,524,"                    return chronology.secondOfMinute();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,526,"                    return chronology.millisOfDay();
",0,0,0,1,2,1,4,0,0,4,32,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,528,"                    return chronology.millisOfSecond();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,531,"                    throw new InternalError();
",0,0,0,1,2,0,0,2,0,2,26,8,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,541,"            switch (iOrdinal) {
",2,0,0,1,3,0,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,543,"                    return ERA_TYPE;
",2,0,0,0,0,1,0,0,0,2,16,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,545,"                    return YEAR_OF_ERA_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,547,"                    return CENTURY_OF_ERA_TYPE;
",2,0,0,0,0,1,0,0,0,2,27,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,549,"                    return YEAR_OF_CENTURY_TYPE;
",2,0,0,0,0,1,0,0,0,2,28,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,551,"                    return YEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,553,"                    return DAY_OF_YEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,555,"                    return MONTH_OF_YEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,557,"                    return DAY_OF_MONTH_TYPE;
",2,0,0,0,0,1,0,0,0,2,25,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,559,"                    return WEEKYEAR_OF_CENTURY_TYPE;
",2,0,0,0,0,1,0,0,0,2,32,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,561,"                    return WEEKYEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,21,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,563,"                    return WEEK_OF_WEEKYEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,565,"                    return DAY_OF_WEEK_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,567,"                    return HALFDAY_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,27,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,569,"                    return HOUR_OF_HALFDAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,28,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,571,"                    return CLOCKHOUR_OF_HALFDAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,33,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,573,"                    return CLOCKHOUR_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,575,"                    return HOUR_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,577,"                    return MINUTE_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,579,"                    return MINUTE_OF_HOUR_TYPE;
",2,0,0,0,0,1,0,0,0,2,27,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,581,"                    return SECOND_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,583,"                    return SECOND_OF_MINUTE_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,585,"                    return MILLIS_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,587,"                    return MILLIS_OF_SECOND_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,20,590,"                    return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,2045,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,2046,"            iInstant = instant;
",4,0,0,0,0,0,0,0,0,5,19,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,2047,"            iField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,2048,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,2054,"            oos.writeObject(iInstant);
",0,0,0,1,2,0,6,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/DateTime,20,2055,"            oos.writeObject(iField.getType());
",0,0,0,2,4,0,8,0,0,8,34,6,0.00000,0
defect4j,time,org/joda/time/DateTime,20,2056,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,2062,"            iInstant = (DateTime) oos.readObject();
",2,0,0,2,4,0,4,2,0,9,39,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,2063,"            DateTimeFieldType type = (DateTimeFieldType) oos.readObject();
",2,0,0,2,4,0,4,4,0,10,62,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,2064,"            iField = type.getField(iInstant.getChronology());
",2,0,0,2,4,0,8,0,0,11,49,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,2065,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,20,2074,"            return iField;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,2083,"            return iInstant.getMillis();
",0,0,0,1,2,1,4,0,0,4,28,6,0.00000,0
defect4j,time,org/joda/time/DateTime,20,2093,"            return iInstant.getChronology();
",0,0,0,1,2,1,4,0,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/DateTime,20,2102,"            return iInstant;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,2119,"            return iInstant.withMillis(iField.add(iInstant.getMillis(), value));
",0,0,0,3,6,1,14,0,0,14,68,6,0.00000,0
defect4j,time,org/joda/time/DateTime,20,2135,"            return iInstant.withMillis(iField.add(iInstant.getMillis(), value));
",0,0,0,3,6,1,14,0,0,14,68,6,0.00000,0
defect4j,time,org/joda/time/DateTime,20,2153,"            return iInstant.withMillis(iField.addWrapField(iInstant.getMillis(), value));
",0,0,0,3,6,1,14,0,0,14,77,6,0.00000,0
defect4j,time,org/joda/time/DateTime,20,2170,"            return iInstant.withMillis(iField.set(iInstant.getMillis(), value));
",0,0,0,3,6,1,14,0,0,14,68,6,0.00000,0
defect4j,time,org/joda/time/DateTime,20,2187,"            return iInstant.withMillis(iField.set(iInstant.getMillis(), text, locale));
",0,0,0,3,6,1,16,0,0,16,75,6,0.00000,0
defect4j,time,org/joda/time/DateTime,20,2203,"            return setCopy(text, null);
",0,0,0,1,2,1,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,20,2227,"            return setCopy(getMaximumValue());
",0,0,0,2,4,1,4,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/DateTime,20,2244,"            return setCopy(getMinimumValue());
",0,0,0,2,4,1,4,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/DateTime,20,2254,"            return iInstant.withMillis(iField.roundFloor(iInstant.getMillis()));
",0,0,0,3,6,1,12,0,0,12,68,6,0.00000,0
defect4j,time,org/joda/time/DateTime,20,2263,"            return iInstant.withMillis(iField.roundCeiling(iInstant.getMillis()));
",0,0,0,3,6,1,12,0,0,12,70,6,0.00000,0
defect4j,time,org/joda/time/DateTime,20,2273,"            return iInstant.withMillis(iField.roundHalfFloor(iInstant.getMillis()));
",0,0,0,3,6,1,12,0,0,12,72,6,0.00000,0
defect4j,time,org/joda/time/DateTime,20,2283,"            return iInstant.withMillis(iField.roundHalfCeiling(iInstant.getMillis()));
",0,0,0,3,6,1,12,0,0,12,74,6,0.00000,0
defect4j,time,org/joda/time/DateTime,20,2294,"            return iInstant.withMillis(iField.roundHalfEven(iInstant.getMillis()));
",0,0,0,3,6,1,12,0,0,12,71,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,77,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,97,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,102,"            return chrono;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,143,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,144,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,146,"        if (zone == getZone()) {
",2,1,0,2,5,0,2,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,147,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,149,"        return getInstance(zone);
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,160,"        String str = ""ISOChronology"";
",2,0,0,0,0,0,0,2,0,5,29,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,161,"        DateTimeZone zone = getZone();
",2,0,0,1,2,0,2,2,0,6,30,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,162,"        if (zone != null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,163,"            str = str + '[' + zone.getID() + ']';
",4,1,0,2,4,0,4,0,0,12,37,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,165,"        return str;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,190,"        return super.equals(obj);
",4,0,0,1,2,1,0,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,200,"        return ""ISO"".hashCode() * 11 + getZone().hashCode();
",0,2,0,3,6,1,6,0,0,9,52,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,208,"        return new Stub(getZone());
",0,0,0,2,4,1,2,2,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,110,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,118,"        if ((base = iBase) != null && (iBaseFlags & 6) == 6) {
",6,4,0,3,7,0,0,0,0,11,54,4,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,120,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);
",0,0,0,1,2,1,12,0,0,12,74,7,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,122,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);
",10,0,0,1,2,1,0,0,0,10,75,5,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,136,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth,
",8,0,0,0,1,1,0,0,0,8,61,5,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,146,"        if ((base = iBase) != null && (iBaseFlags & 1) == 1) {
",6,4,0,3,7,0,0,0,0,11,54,4,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,148,"            return base.getDateTimeMillis
",0,0,0,0,0,1,4,0,0,4,29,7,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,151,"        return super.getDateTimeMillis
",2,0,0,0,0,1,0,0,0,2,30,5,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,389,"        in.defaultReadObject();
",0,0,0,1,2,0,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,390,"        setFields();
",0,0,0,1,2,0,2,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,391,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,414,"        FixedMillisProvider(long fixedMillis) {
",4,0,0,1,3,0,0,0,0,4,39,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,415,"            iMillis = fixedMillis;
",4,0,0,0,0,0,0,0,0,5,22,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,416,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,423,"            return iMillis;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1362,"                        index = in.readUnsignedShort();
",2,0,0,1,2,0,4,0,0,7,31,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1365,"                } catch (ArrayIndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,44,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1366,"                    throw new IOException(""Invalid encoding"");
",0,0,0,1,2,0,0,2,0,3,42,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1389,"            int size = transitions.size();
",2,0,0,1,2,0,4,0,0,6,30,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1390,"            if (size == 0) {
",2,1,0,1,3,0,0,0,0,3,16,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1391,"                throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1394,"            long[] trans = new long[size];
",2,0,1,2,4,0,0,0,0,4,30,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1395,"            int[] wallOffsets = new int[size];
",2,0,1,2,4,0,0,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1396,"            int[] standardOffsets = new int[size];
",2,0,1,2,4,0,0,0,0,4,38,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1397,"            String[] nameKeys = new String[size];
",2,0,1,2,4,0,0,4,0,8,37,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1399,"            Transition last = null;
",2,0,0,0,0,0,0,2,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1400,"            for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1401,"                Transition tr = transitions.get(i);
",2,0,0,1,2,0,6,2,0,10,35,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1403,"                if (!tr.isTransitionFrom(last)) {
",0,0,0,2,5,0,6,0,0,7,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1404,"                    throw new IllegalArgumentException(id);
",2,0,0,1,2,0,0,2,0,4,39,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1407,"                trans[i] = tr.getMillis();
",0,0,1,2,4,0,4,0,0,9,26,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1408,"                wallOffsets[i] = tr.getWallOffset();
",0,0,1,2,4,0,4,0,0,9,36,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1409,"                standardOffsets[i] = tr.getStandardOffset();
",0,0,1,2,4,0,4,0,0,9,44,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1410,"                nameKeys[i] = tr.getNameKey();
",0,0,1,2,4,0,4,0,0,9,30,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1412,"                last = tr;
",4,0,0,0,0,0,0,0,0,5,10,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1417,"            String[] zoneNameData = new String[5];
",2,0,0,2,4,0,0,4,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1418,"            String[][] zoneStrings = new DateFormatSymbols(Locale.ENGLISH).getZoneStrings();
",6,0,0,4,8,0,2,4,0,12,80,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1419,"            for (int j = 0; j < zoneStrings.length; j++) {
",10,1,0,1,3,0,0,0,0,12,46,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1420,"                String[] set = zoneStrings[j];
",2,0,1,2,4,0,0,2,0,8,30,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1421,"                if (set != null && set.length == 5 && id.equals(set[0])) {
",6,4,1,3,7,0,4,0,0,16,58,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1422,"                    zoneNameData = set;
",4,0,0,0,0,0,0,0,0,5,19,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1426,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1428,"            for (int i = 0; i < nameKeys.length - 1; i++) {
",10,2,0,1,3,0,0,0,0,13,47,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1429,"                String curNameKey = nameKeys[i];
",2,0,1,1,2,0,0,2,0,8,32,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1430,"                String nextNameKey = nameKeys[i + 1];
",4,1,1,1,2,0,0,2,0,9,37,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1431,"                long curOffset = wallOffsets[i];
",2,0,1,1,2,0,0,0,0,6,32,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1432,"                long nextOffset = wallOffsets[i + 1];
",4,1,1,1,2,0,0,0,0,7,37,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1433,"                long curStdOffset = standardOffsets[i];
",2,0,1,1,2,0,0,0,0,6,39,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1434,"                long nextStdOffset = standardOffsets[i + 1];
",4,1,1,1,2,0,0,0,0,7,44,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1435,"                Period p = new Period(trans[i], trans[i + 1], PeriodType.yearMonthDay(), chrono);
",6,1,1,4,8,0,4,4,0,21,81,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1436,"                if (curOffset != nextOffset &&
",4,8,0,0,1,0,0,0,0,12,30,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1443,"                    if (ZoneInfoCompiler.verbose()) {
",0,0,0,2,5,0,4,0,0,4,33,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1444,"                        System.out.println(""Fixing duplicate name key - "" + nextNameKey);
",6,1,0,1,2,0,2,0,0,10,65,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1445,"                        System.out.println(""     - "" + new DateTime(trans[i], chrono) +
",6,1,1,2,5,0,2,2,0,16,63,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1448,"                    if (curOffset > nextOffset) {
",4,1,0,1,3,0,0,0,0,5,29,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1449,"                        nameKeys[i] = (curNameKey + ""-Summer"").intern();
",2,1,1,3,6,0,2,0,0,11,48,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1450,"                    } else if (curOffset < nextOffset) {
",4,1,0,1,4,0,0,0,0,5,36,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1451,"                        nameKeys[i + 1] = (nextNameKey + ""-Summer"").intern();
",4,2,1,3,6,0,2,0,0,12,53,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1452,"                        i++;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1457,"            if (tailZone != null) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1458,"                if (tailZone.iStartRecurrence.getNameKey()
",4,0,0,1,3,0,2,0,0,6,42,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1460,"                    if (ZoneInfoCompiler.verbose()) {
",0,0,0,2,5,0,4,0,0,4,33,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1461,"                        System.out.println(""Fixing duplicate recurrent name key - "" +
",4,1,0,0,1,0,2,0,0,8,61,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1464,"                    if (tailZone.iStartRecurrence.getSaveMillis() > 0) {
",4,1,0,2,5,0,2,0,0,7,52,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1465,"                        tailZone = new DSTZone(
",2,0,0,0,1,0,0,2,0,5,23,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1471,"                        tailZone = new DSTZone(
",2,0,0,0,1,0,0,2,0,5,23,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1480,"            return new PrecalculatedZone
",0,0,0,0,0,1,0,2,0,2,28,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1509,"            long[] transitions = iTransitions;
",4,0,0,1,2,0,0,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1510,"            int i = Arrays.binarySearch(transitions, instant);
",2,0,0,1,2,0,8,0,0,10,50,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1511,"            if (i >= 0) {
",2,1,0,1,3,0,0,0,0,3,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1512,"                return iNameKeys[i];
",0,0,1,1,2,1,0,0,0,4,20,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1514,"            i = ~i;
",4,0,0,0,0,0,0,0,0,6,7,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1515,"            if (i < transitions.length) {
",6,1,0,1,3,0,0,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1516,"                if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1517,"                    return iNameKeys[i - 1];
",2,1,1,1,2,1,0,0,0,5,24,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1519,"                return ""UTC"";
",0,0,0,0,0,1,0,0,0,1,13,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1521,"            if (iTailZone == null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1522,"                return iNameKeys[i - 1];
",2,1,1,1,2,1,0,0,0,5,24,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1524,"            return iTailZone.getNameKey(instant);
",0,0,0,1,2,1,6,0,0,6,37,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1531,"                return iWallOffsets[i];
",0,0,1,1,2,1,0,0,0,4,23,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1535,"                if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1536,"                    return iWallOffsets[i - 1];
",2,1,1,1,2,1,0,0,0,5,27,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1538,"                return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1543,"            return iTailZone.getOffset(instant);
",0,0,0,1,2,1,6,0,0,6,36,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1547,"            long[] transitions = iTransitions;
",4,0,0,1,2,0,0,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1548,"            int i = Arrays.binarySearch(transitions, instant);
",2,0,0,1,2,0,8,0,0,10,50,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1549,"            if (i >= 0) {
",2,1,0,1,3,0,0,0,0,3,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1550,"                return iStandardOffsets[i];
",0,0,1,1,2,1,0,0,0,4,27,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1552,"            i = ~i;
",4,0,0,0,0,0,0,0,0,6,7,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1553,"            if (i < transitions.length) {
",6,1,0,1,3,0,0,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1554,"                if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1555,"                    return iStandardOffsets[i - 1];
",2,1,1,1,2,1,0,0,0,5,31,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1557,"                return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1559,"            if (iTailZone == null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1560,"                return iStandardOffsets[i - 1];
",2,1,1,1,2,1,0,0,0,5,31,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1562,"            return iTailZone.getStandardOffset(instant);
",0,0,0,1,2,1,6,0,0,6,44,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1566,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1574,"                return transitions[i];
",0,0,1,1,2,1,0,0,0,4,22,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1579,"            long end = transitions[transitions.length - 1];
",6,1,1,1,2,0,0,0,0,9,47,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1580,"            if (instant < end) {
",4,1,0,1,3,0,0,0,0,5,20,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1581,"                instant = end;
",4,0,0,0,0,0,0,0,0,5,14,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1583,"            return iTailZone.nextTransition(instant);
",0,0,0,1,2,1,6,0,0,6,41,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1587,"            long[] transitions = iTransitions;
",4,0,0,1,2,0,0,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1588,"            int i = Arrays.binarySearch(transitions, instant);
",2,0,0,1,2,0,8,0,0,10,50,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1589,"            if (i >= 0) {
",2,1,0,1,3,0,0,0,0,3,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1590,"                if (instant > Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,31,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1591,"                    return instant - 1;
",2,1,0,0,0,1,0,0,0,3,19,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1593,"                return instant;
",2,0,0,0,0,1,0,0,0,2,15,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1595,"            i = ~i;
",4,0,0,0,0,0,0,0,0,6,7,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1596,"            if (i < transitions.length) {
",6,1,0,1,3,0,0,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1597,"                if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1598,"                    long prev = transitions[i - 1];
",4,1,1,1,2,0,0,0,0,7,31,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1599,"                    if (prev > Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,28,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1600,"                        return prev - 1;
",2,1,0,0,0,1,0,0,0,3,16,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1603,"                return instant;
",2,0,0,0,0,1,0,0,0,2,15,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1605,"            if (iTailZone != null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1606,"                long prev = iTailZone.previousTransition(instant);
",2,0,0,1,2,0,6,0,0,8,50,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1607,"                if (prev < instant) {
",4,1,0,1,3,0,0,0,0,5,21,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1608,"                    return prev;
",2,0,0,0,0,1,0,0,0,2,12,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1611,"            long prev = transitions[i - 1];
",4,1,1,1,2,0,0,0,0,7,31,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1612,"            if (prev > Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,28,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1613,"                return prev - 1;
",2,1,0,0,0,1,0,0,0,3,16,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1615,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1619,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1620,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1622,"            if (obj instanceof PrecalculatedZone) {
",2,0,0,1,3,0,0,2,0,4,39,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1623,"                PrecalculatedZone other = (PrecalculatedZone)obj;
",4,0,0,1,2,0,0,4,0,8,49,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1624,"                return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1634,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1638,"            int size = iTransitions.length;
",6,0,0,0,0,0,0,0,0,6,31,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1641,"            Set<String> poolSet = new HashSet<String>();
",2,0,0,1,2,0,0,8,0,10,44,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1642,"            for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1643,"                poolSet.add(iNameKeys[i]);
",0,0,1,2,4,0,4,0,0,8,26,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1646,"            int poolSize = poolSet.size();
",2,0,0,1,2,0,4,0,0,6,30,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1647,"            if (poolSize > 65535) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1648,"                throw new UnsupportedOperationException(""String pool is too large"");
",0,0,0,1,2,0,0,2,0,3,68,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1650,"            String[] pool = new String[poolSize];
",2,0,1,2,4,0,0,4,0,8,37,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1651,"            Iterator<String> it = poolSet.iterator();
",2,0,0,1,2,0,4,4,0,10,41,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1652,"            for (int i=0; it.hasNext(); i++) {
",4,0,0,2,5,0,4,0,0,9,34,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1653,"                pool[i] = it.next();
",0,0,1,2,4,0,4,0,0,9,20,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1657,"            out.writeShort(poolSize);
",0,0,0,1,2,0,6,0,0,6,25,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1658,"            for (int i=0; i<poolSize; i++) {
",8,1,0,1,3,0,0,0,0,10,32,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1659,"                out.writeUTF(pool[i]);
",0,0,1,2,4,0,4,0,0,8,22,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1662,"            out.writeInt(size);
",0,0,0,1,2,0,6,0,0,6,19,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1664,"            for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1665,"                writeMillis(out, iTransitions[i]);
",0,0,1,2,4,0,4,0,0,8,34,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1666,"                writeMillis(out, iWallOffsets[i]);
",0,0,1,2,4,0,4,0,0,8,34,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1667,"                writeMillis(out, iStandardOffsets[i]);
",0,0,1,2,4,0,4,0,0,8,38,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1670,"                String nameKey = iNameKeys[i];
",2,0,1,1,2,0,0,2,0,8,30,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1671,"                for (int j=0; j<poolSize; j++) {
",8,1,0,1,3,0,0,0,0,10,32,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1672,"                    if (pool[j].equals(nameKey)) {
",0,0,1,3,7,0,4,0,0,8,30,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1673,"                        if (poolSize < 256) {
",2,1,0,1,3,0,0,0,0,3,21,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1674,"                            out.writeByte(j);
",0,0,0,1,2,0,6,0,0,6,17,14,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1676,"                            out.writeShort(j);
",0,0,0,1,2,0,6,0,0,6,18,14,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1678,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1683,"            out.writeBoolean(iTailZone != null);
",2,1,0,1,2,0,4,0,0,7,36,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1684,"            if (iTailZone != null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1685,"                iTailZone.writeTo(out);
",0,0,0,1,2,0,6,0,0,6,23,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1687,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1690,"            if (iTailZone != null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1691,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1693,"            long[] transitions = iTransitions;
",4,0,0,1,2,0,0,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1694,"            if (transitions.length <= 1) {
",4,1,0,1,3,0,0,0,0,5,30,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1695,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1700,"            double distances = 0;
",2,0,0,0,0,0,0,0,0,2,21,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1701,"            int count = 0;
",2,0,0,0,0,0,0,0,0,2,14,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1703,"            for (int i=1; i<transitions.length; i++) {
",10,1,0,1,3,0,0,0,0,12,42,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1704,"                long diff = transitions[i] - transitions[i - 1];
",4,2,1,2,4,0,0,0,0,12,48,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1705,"                if (diff < ((366L + 365) * 24 * 60 * 60 * 1000)) {
",2,3,0,3,7,0,0,0,0,5,50,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1706,"                    distances += (double)diff;
",4,0,0,1,2,0,0,0,0,5,26,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1707,"                    count++;
",2,0,0,0,0,0,0,0,0,3,8,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1711,"            if (count > 0) {
",2,1,0,1,3,0,0,0,0,3,16,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1712,"                double avg = distances / count;
",6,1,0,0,0,0,0,0,0,7,31,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1713,"                avg /= 24 * 60 * 60 * 1000;
",2,1,0,0,0,0,0,0,0,4,27,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1714,"                if (avg >= 25) {
",2,1,0,1,3,0,0,0,0,3,16,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1721,"                    return true;
",0,0,0,0,0,1,0,0,0,1,12,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1725,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/JodaTimePermission,20,57,"        super(name);
",2,0,0,1,2,0,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/JodaTimePermission,20,58,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,20,45,"        return iNameKey;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,20,49,"        return iWallOffset;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,20,53,"        return iStandardOffset;
",2,0,0,0,0,1,0,0,0,2,23,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,20,57,"        return iWallOffset;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,20,61,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,20,65,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,20,69,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,20,77,"        String id = getID();
",2,0,0,1,2,0,2,2,0,6,20,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,20,78,"        if (id.length() == 6 && (id.startsWith(""+"") || id.startsWith(""-""))) {
",0,3,0,5,11,0,12,0,0,17,69,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,20,81,"            return java.util.TimeZone.getTimeZone(""GMT"" + getID());
",6,1,0,2,4,1,4,0,0,12,55,7,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,20,84,"        return new java.util.SimpleTimeZone(iWallOffset, getID());
",8,0,0,2,4,1,2,0,0,10,58,5,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,20,91,"        if (obj instanceof FixedDateTimeZone) {
",2,0,0,1,3,0,0,2,0,4,39,5,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,20,92,"            FixedDateTimeZone other = (FixedDateTimeZone)obj;
",4,0,0,1,2,0,0,4,0,8,49,6,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,20,93,"            return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,20,98,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,56,"    public ZoneInfoProvider(File fileDir) throws IOException {
",6,0,0,1,3,1,0,2,0,9,58,2,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,57,"        if (fileDir == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,58,"            throw new IllegalArgumentException(""No file directory provided"");
",0,0,0,1,2,0,0,2,0,3,65,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,60,"        if (!fileDir.exists()) {
",0,0,0,2,5,0,4,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,61,"            throw new IOException(""File directory doesn't exist: "" + fileDir);
",2,1,0,1,2,0,0,2,0,6,66,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,63,"        if (!fileDir.isDirectory()) {
",0,0,0,2,5,0,4,0,0,5,29,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,64,"            throw new IOException(""File doesn't refer to a directory: "" + fileDir);
",2,1,0,1,2,0,0,2,0,6,71,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,67,"        iFileDir = fileDir;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,68,"        iResourcePath = null;
",2,0,0,0,0,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,69,"        iLoader = null;
",2,0,0,0,0,0,0,0,0,3,15,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,71,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));
",2,0,0,2,4,0,4,0,0,8,60,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,72,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,96,"        this(resourcePath, loader, true);
",4,0,0,1,2,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,97,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,108,"            throw new IllegalArgumentException(""No resource path provided"");
",0,0,0,1,2,0,0,2,0,3,64,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,137,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,142,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,158,"            return loadZoneData(id);
",0,0,0,1,2,1,4,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,162,"        return getZone((String)obj);
",2,0,0,2,4,1,2,2,0,6,28,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,183,"        Thread t = Thread.currentThread();
",2,0,0,1,2,0,4,2,0,8,34,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,184,"        t.getThreadGroup().uncaughtException(t, ex);
",0,0,0,2,4,0,10,0,0,10,44,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,185,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,197,"            in = new FileInputStream(new File(iFileDir, name));
",6,0,0,2,4,0,0,4,0,11,51,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,203,"                in = ClassLoader.getSystemResourceAsStream(path);
",2,0,0,1,2,0,6,0,0,9,49,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,206,"                StringBuffer buf = new StringBuffer(40)
",2,0,0,1,2,0,0,4,0,6,39,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,211,"                throw new IOException(buf.toString());
",0,0,0,2,4,0,4,2,0,6,38,9,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,239,"            } catch (IOException e) {
",2,0,0,1,4,0,0,2,0,4,25,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,230,"        } catch (IOException e) {
",2,0,0,1,4,0,0,2,0,4,25,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,231,"            uncaughtException(e);
",0,0,0,1,2,0,4,0,0,4,21,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,232,"            iZoneInfoMap.remove(id);
",0,0,0,1,2,0,6,0,0,6,24,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,233,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,235,"            try {
",0,0,0,0,1,0,0,0,0,0,5,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,259,"            } catch (IOException e) {
",2,0,0,1,4,0,0,2,0,4,25,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,261,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,257,"            try {
",0,0,0,0,1,0,0,0,0,0,5,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,285,"            } catch (ArrayIndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,44,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,20,286,"                throw new IOException(""Corrupt zone info map"");
",0,0,0,1,2,0,0,2,0,3,47,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,506,"                throw new IllegalArgumentException(""Unknown mode: "" + mode);
",2,1,0,1,2,0,0,2,0,6,60,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,522,"            if (iMode == 'w') {
",2,1,0,1,3,0,0,0,0,4,19,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,523,"                offset = standardOffset + saveMillis;
",6,1,0,0,0,0,0,0,0,8,37,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,524,"            } else if (iMode == 's') {
",2,1,0,1,4,0,0,0,0,4,26,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,525,"                offset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,24,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,527,"                offset = 0;
",2,0,0,0,0,0,0,0,0,3,11,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,530,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,531,"            long millis = chrono.year().set(0, year);
",2,0,0,2,4,0,8,0,0,10,41,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,532,"            millis = chrono.monthOfYear().set(millis, iMonthOfYear);
",2,0,0,2,4,0,10,0,0,13,56,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,533,"            millis = chrono.millisOfDay().set(millis, iMillisOfDay);
",2,0,0,2,4,0,10,0,0,13,56,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,534,"            millis = setDayOfMonth(chrono, millis);
",2,0,0,1,2,0,6,0,0,9,39,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,536,"            if (iDayOfWeek != 0) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,537,"                millis = setDayOfWeek(chrono, millis);
",2,0,0,1,2,0,6,0,0,9,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,541,"            return millis - offset;
",4,1,0,0,0,1,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,549,"            if (iMode == 'w') {
",2,1,0,1,3,0,0,0,0,4,19,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,550,"                offset = standardOffset + saveMillis;
",6,1,0,0,0,0,0,0,0,8,37,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,551,"            } else if (iMode == 's') {
",2,1,0,1,4,0,0,0,0,4,26,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,552,"                offset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,24,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,554,"                offset = 0;
",2,0,0,0,0,0,0,0,0,3,11,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,558,"            instant += offset;
",4,0,0,0,0,0,0,0,0,5,18,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,560,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,561,"            long next = chrono.monthOfYear().set(instant, iMonthOfYear);
",2,0,0,2,4,0,10,0,0,12,60,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,563,"            next = chrono.millisOfDay().set(next, 0);
",2,0,0,2,4,0,8,0,0,11,41,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,564,"            next = chrono.millisOfDay().add(next, iMillisOfDay);
",2,0,0,2,4,0,10,0,0,13,52,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,565,"            next = setDayOfMonthNext(chrono, next);
",2,0,0,1,2,0,6,0,0,9,39,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,567,"            if (iDayOfWeek == 0) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,568,"                if (next <= instant) {
",4,1,0,1,3,0,0,0,0,5,22,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,569,"                    next = chrono.year().add(next, 1);
",2,0,0,2,4,0,8,0,0,11,34,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,570,"                    next = setDayOfMonthNext(chrono, next);
",2,0,0,1,2,0,6,0,0,9,39,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,573,"                next = setDayOfWeek(chrono, next);
",2,0,0,1,2,0,6,0,0,9,34,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,574,"                if (next <= instant) {
",4,1,0,1,3,0,0,0,0,5,22,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,575,"                    next = chrono.year().add(next, 1);
",2,0,0,2,4,0,8,0,0,11,34,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,576,"                    next = chrono.monthOfYear().set(next, iMonthOfYear);
",2,0,0,2,4,0,10,0,0,13,52,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,577,"                    next = setDayOfMonthNext(chrono, next);
",2,0,0,1,2,0,6,0,0,9,39,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,578,"                    next = setDayOfWeek(chrono, next);
",2,0,0,1,2,0,6,0,0,9,34,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,583,"            return next - offset;
",4,1,0,0,0,1,0,0,0,5,21,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,591,"            if (iMode == 'w') {
",2,1,0,1,3,0,0,0,0,4,19,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,592,"                offset = standardOffset + saveMillis;
",6,1,0,0,0,0,0,0,0,8,37,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,593,"            } else if (iMode == 's') {
",2,1,0,1,4,0,0,0,0,4,26,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,594,"                offset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,24,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,596,"                offset = 0;
",2,0,0,0,0,0,0,0,0,3,11,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,600,"            instant += offset;
",4,0,0,0,0,0,0,0,0,5,18,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,602,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,603,"            long prev = chrono.monthOfYear().set(instant, iMonthOfYear);
",2,0,0,2,4,0,10,0,0,12,60,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,605,"            prev = chrono.millisOfDay().set(prev, 0);
",2,0,0,2,4,0,8,0,0,11,41,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,606,"            prev = chrono.millisOfDay().add(prev, iMillisOfDay);
",2,0,0,2,4,0,10,0,0,13,52,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,607,"            prev = setDayOfMonthPrevious(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,43,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,609,"            if (iDayOfWeek == 0) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,610,"                if (prev >= instant) {
",4,1,0,1,3,0,0,0,0,5,22,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,611,"                    prev = chrono.year().add(prev, -1);
",2,0,0,2,4,0,8,0,0,12,35,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,612,"                    prev = setDayOfMonthPrevious(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,43,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,615,"                prev = setDayOfWeek(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,34,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,616,"                if (prev >= instant) {
",4,1,0,1,3,0,0,0,0,5,22,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,617,"                    prev = chrono.year().add(prev, -1);
",2,0,0,2,4,0,8,0,0,12,35,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,618,"                    prev = chrono.monthOfYear().set(prev, iMonthOfYear);
",2,0,0,2,4,0,10,0,0,13,52,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,619,"                    prev = setDayOfMonthPrevious(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,43,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,620,"                    prev = setDayOfWeek(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,34,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,625,"            return prev - offset;
",4,1,0,0,0,1,0,0,0,5,21,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,629,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,630,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,632,"            if (obj instanceof OfYear) {
",2,0,0,1,3,0,0,2,0,4,28,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,633,"                OfYear other = (OfYear)obj;
",4,0,0,1,2,0,0,4,0,8,27,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,634,"                return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,642,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,659,"            out.writeByte(iMode);
",0,0,0,1,2,0,6,0,0,6,21,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,660,"            out.writeByte(iMonthOfYear);
",0,0,0,1,2,0,6,0,0,6,28,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,661,"            out.writeByte(iDayOfMonth);
",0,0,0,1,2,0,6,0,0,6,27,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,662,"            out.writeByte(iDayOfWeek);
",0,0,0,1,2,0,6,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,663,"            out.writeBoolean(iAdvance);
",0,0,0,1,2,0,6,0,0,6,27,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,664,"            writeMillis(out, iMillisOfDay);
",0,0,0,1,2,0,6,0,0,6,31,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,665,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,672,"                next = setDayOfMonth(chrono, next);
",2,0,0,1,2,0,6,0,0,9,35,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,682,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,673,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,674,"                if (iMonthOfYear == 2 && iDayOfMonth == 29) {
",4,3,0,1,3,0,0,0,0,7,45,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,675,"                    while (chrono.year().isLeap(next) == false) {
",0,1,0,3,7,0,8,0,0,10,45,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,676,"                        next = chrono.year().add(next, 1);
",2,0,0,2,4,0,8,0,0,11,34,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,678,"                    next = setDayOfMonth(chrono, next);
",2,0,0,1,2,0,6,0,0,9,35,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,680,"                    throw e;
",2,0,0,0,0,0,0,0,0,2,8,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,683,"            return next;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,691,"                prev = setDayOfMonth(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,35,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,701,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,692,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,693,"                if (iMonthOfYear == 2 && iDayOfMonth == 29) {
",4,3,0,1,3,0,0,0,0,7,45,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,694,"                    while (chrono.year().isLeap(prev) == false) {
",0,1,0,3,7,0,8,0,0,10,45,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,695,"                        prev = chrono.year().add(prev, -1);
",2,0,0,2,4,0,8,0,0,12,35,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,697,"                    prev = setDayOfMonth(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,35,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,699,"                    throw e;
",2,0,0,0,0,0,0,0,0,2,8,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,702,"            return prev;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,706,"            if (iDayOfMonth >= 0) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,707,"                instant = chrono.dayOfMonth().set(instant, iDayOfMonth);
",2,0,0,2,4,0,10,0,0,13,56,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,709,"                instant = chrono.dayOfMonth().set(instant, 1);
",2,0,0,2,4,0,8,0,0,11,46,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,710,"                instant = chrono.monthOfYear().add(instant, 1);
",2,0,0,2,4,0,8,0,0,11,47,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,711,"                instant = chrono.dayOfMonth().add(instant, iDayOfMonth);
",2,0,0,2,4,0,10,0,0,13,56,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,713,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,717,"            int dayOfWeek = chrono.dayOfWeek().get(instant);
",2,0,0,2,4,0,8,0,0,10,48,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,718,"            int daysToAdd = iDayOfWeek - dayOfWeek;
",6,1,0,0,0,0,0,0,0,7,39,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,719,"            if (daysToAdd != 0) {
",2,1,0,1,3,0,0,0,0,3,21,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,720,"                if (iAdvance) {
",2,0,0,1,3,0,0,0,0,2,15,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,721,"                    if (daysToAdd < 0) {
",2,1,0,1,3,0,0,0,0,3,20,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,722,"                        daysToAdd += 7;
",2,0,0,0,0,0,0,0,0,3,15,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,725,"                    if (daysToAdd > 0) {
",2,1,0,1,3,0,0,0,0,3,20,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,726,"                        daysToAdd -= 7;
",2,0,0,0,0,0,0,0,0,3,15,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,729,"                instant = chrono.dayOfWeek().add(instant, daysToAdd);
",2,0,0,2,4,0,10,0,0,13,53,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,731,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1183,"            return findMatchingRecurrence(instant).getNameKey();
",0,0,0,2,4,1,6,0,0,6,52,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1187,"            return iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();
",2,1,0,2,4,1,6,0,0,9,73,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1191,"            return iStandardOffset;
",2,0,0,0,0,1,0,0,0,2,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1195,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1199,"            int standardOffset = iStandardOffset;
",4,0,0,0,0,0,0,0,0,4,37,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1200,"            Recurrence startRecurrence = iStartRecurrence;
",4,0,0,0,0,0,0,2,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1201,"            Recurrence endRecurrence = iEndRecurrence;
",4,0,0,0,0,0,0,2,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1206,"                start = startRecurrence.next
",2,0,0,0,0,0,4,0,0,7,28,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1208,"                if (instant > 0 && start < 0) {
",4,3,0,1,3,0,0,0,0,7,31,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1210,"                    start = instant;
",4,0,0,0,0,0,0,0,0,5,16,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1218,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1212,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1214,"                start = instant;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1215,"            } catch (ArithmeticException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1217,"                start = instant;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1221,"                end = endRecurrence.next
",2,0,0,0,0,0,4,0,0,7,24,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1223,"                if (instant > 0 && end < 0) {
",4,3,0,1,3,0,0,0,0,7,29,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1225,"                    end = instant;
",4,0,0,0,0,0,0,0,0,5,14,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1233,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1227,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1229,"                end = instant;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1230,"            } catch (ArithmeticException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1232,"                end = instant;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1235,"            return (start > end) ? end : start;
",8,1,0,1,2,1,0,0,0,9,35,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1241,"            instant++;
",2,0,0,0,0,0,0,0,0,3,10,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1243,"            int standardOffset = iStandardOffset;
",4,0,0,0,0,0,0,0,0,4,37,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1244,"            Recurrence startRecurrence = iStartRecurrence;
",4,0,0,0,0,0,0,2,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1245,"            Recurrence endRecurrence = iEndRecurrence;
",4,0,0,0,0,0,0,2,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1250,"                start = startRecurrence.previous
",2,0,0,0,0,0,4,0,0,7,32,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1252,"                if (instant < 0 && start > 0) {
",4,3,0,1,3,0,0,0,0,7,31,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1254,"                    start = instant;
",4,0,0,0,0,0,0,0,0,5,16,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1262,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1256,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1258,"                start = instant;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1259,"            } catch (ArithmeticException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1261,"                start = instant;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1265,"                end = endRecurrence.previous
",2,0,0,0,0,0,4,0,0,7,28,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1267,"                if (instant < 0 && end > 0) {
",4,3,0,1,3,0,0,0,0,7,29,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1269,"                    end = instant;
",4,0,0,0,0,0,0,0,0,5,14,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1277,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1271,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1273,"                end = instant;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1274,"            } catch (ArithmeticException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1276,"                end = instant;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1279,"            return ((start > end) ? start : end) - 1;
",8,2,0,2,4,1,0,0,0,10,41,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1283,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1284,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1286,"            if (obj instanceof DSTZone) {
",2,0,0,1,3,0,0,2,0,4,29,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1287,"                DSTZone other = (DSTZone)obj;
",4,0,0,1,2,0,0,4,0,8,29,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1288,"                return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1294,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1298,"            writeMillis(out, iStandardOffset);
",0,0,0,1,2,0,6,0,0,6,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1299,"            iStartRecurrence.writeTo(out);
",0,0,0,1,2,0,6,0,0,6,30,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1300,"            iEndRecurrence.writeTo(out);
",0,0,0,1,2,0,6,0,0,6,28,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1301,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1304,"            int standardOffset = iStandardOffset;
",4,0,0,0,0,0,0,0,0,4,37,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1305,"            Recurrence startRecurrence = iStartRecurrence;
",4,0,0,0,0,0,0,2,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1306,"            Recurrence endRecurrence = iEndRecurrence;
",4,0,0,0,0,0,0,2,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1311,"                start = startRecurrence.next
",2,0,0,0,0,0,4,0,0,7,28,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1319,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1313,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1315,"                start = instant;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1316,"            } catch (ArithmeticException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1318,"                start = instant;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1322,"                end = endRecurrence.next
",2,0,0,0,0,0,4,0,0,7,24,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1330,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1324,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1326,"                end = instant;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1327,"            } catch (ArithmeticException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1329,"                end = instant;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1332,"            return (start > end) ? startRecurrence : endRecurrence;
",8,1,0,1,2,1,0,0,0,9,55,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,194,"            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {
",8,3,0,1,3,0,0,0,0,11,59,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,195,"                if (iNameKey == null) {
",2,1,0,1,3,0,0,0,0,3,23,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,196,"                    iNameKey = iZoneRef.getNameKey(iPeriodStart);
",2,0,0,1,2,0,6,0,0,9,45,9,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,198,"                return iNameKey;
",2,0,0,0,0,1,0,0,0,2,16,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,200,"            return iNextInfo.getNameKey(millis);
",0,0,0,1,2,1,6,0,0,6,36,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,210,"            return iNextInfo.getOffset(millis);
",0,0,0,1,2,1,6,0,0,6,35,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,214,"            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {
",8,3,0,1,3,0,0,0,0,11,59,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,215,"                if (iStandardOffset == Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,43,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,216,"                    iStandardOffset = iZoneRef.getStandardOffset(iPeriodStart);
",2,0,0,1,2,0,6,0,0,9,59,9,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,218,"                return iStandardOffset;
",2,0,0,0,0,1,0,0,0,2,23,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,220,"            return iNextInfo.getStandardOffset(millis);
",0,0,0,1,2,1,6,0,0,6,43,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,40,"        } catch (SecurityException e) {
",2,0,0,1,4,0,0,2,0,4,31,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,41,"            i = null;
",2,0,0,0,0,0,0,0,0,3,9,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,50,"            cacheSize = i.intValue();
",2,0,0,1,2,0,4,0,0,7,25,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,52,"            cacheSize--;
",2,0,0,0,0,0,0,0,0,3,12,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,53,"            int shift = 0;
",2,0,0,0,0,0,0,0,0,2,14,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,54,"            while (cacheSize > 0) {
",2,1,0,1,3,0,0,0,0,3,23,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,55,"                shift++;
",2,0,0,0,0,0,0,0,0,3,8,8,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,56,"                cacheSize >>= 1;
",2,0,0,0,0,0,0,0,0,3,16,8,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,58,"            cacheSize = 1 << shift;
",4,1,0,0,0,0,0,0,0,6,23,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,69,"            return (CachedDateTimeZone)zone;
",2,0,0,1,2,1,0,2,0,4,32,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,95,"        in.defaultReadObject();
",0,0,0,1,2,0,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,96,"        iInfoCache = new Info[cInfoCacheMask + 1];
",4,1,0,1,2,0,0,2,0,8,42,4,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,97,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,103,"        return iZone;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,107,"        return getInfo(instant).getNameKey(instant);
",0,0,0,2,4,1,8,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,115,"        return getInfo(instant).getStandardOffset(instant);
",0,0,0,2,4,1,8,0,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,119,"        return iZone.isFixed();
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,123,"        return iZone.nextTransition(instant);
",0,0,0,1,2,1,6,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,127,"        return iZone.previousTransition(instant);
",0,0,0,1,2,1,6,0,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,135,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,136,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,138,"        if (obj instanceof CachedDateTimeZone) {
",2,0,0,1,3,0,0,2,0,4,40,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,139,"            return iZone.equals(((CachedDateTimeZone)obj).iZone);
",4,0,0,3,6,1,4,2,0,10,53,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,141,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,168,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,170,"            periodStart = next;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,171,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));
",10,0,0,2,4,0,0,2,0,14,57,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,20,172,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,883,"        Transition(long millis, Transition tr) {
",6,0,0,1,3,0,0,2,0,8,40,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,884,"            iMillis = millis;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,885,"            iNameKey = tr.iNameKey;
",6,0,0,0,0,0,0,0,0,7,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,886,"            iWallOffset = tr.iWallOffset;
",6,0,0,0,0,0,0,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,887,"            iStandardOffset = tr.iStandardOffset;
",6,0,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,888,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,890,"        Transition(long millis, Rule rule, int standardOffset) {
",8,0,0,1,3,0,0,2,0,10,56,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,891,"            iMillis = millis;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,892,"            iNameKey = rule.getNameKey();
",2,0,0,1,2,0,4,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,893,"            iWallOffset = standardOffset + rule.getSaveMillis();
",4,1,0,1,2,0,4,0,0,10,52,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,894,"            iStandardOffset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,33,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,895,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,898,"                   int wallOffset, int standardOffset) {
",4,0,0,0,2,0,0,0,0,4,37,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,899,"            iMillis = millis;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,900,"            iNameKey = nameKey;
",4,0,0,0,0,0,0,0,0,5,19,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,901,"            iWallOffset = wallOffset;
",4,0,0,0,0,0,0,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,902,"            iStandardOffset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,33,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,903,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,906,"            return iMillis;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,910,"            return iNameKey;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,914,"            return iWallOffset;
",2,0,0,0,0,1,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,918,"            return iStandardOffset;
",2,0,0,0,0,1,0,0,0,2,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,922,"            return iWallOffset - iStandardOffset;
",4,1,0,0,0,1,0,0,0,5,37,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,929,"            if (other == null) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,930,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,932,"            return iMillis > other.iMillis &&
",6,2,0,0,0,1,0,0,0,8,33,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,225,"    public DateTimeZoneBuilder() {
",2,0,0,1,3,1,0,0,0,3,30,2,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,226,"        iRuleSets = new ArrayList<RuleSet>(10);
",2,0,0,1,2,0,0,4,0,7,39,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,227,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,96,"            return readFrom((DataInput)in, id);
",2,0,0,2,4,1,4,2,0,8,35,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,112,"            DateTimeZone fixed = new FixedDateTimeZone
",2,0,0,0,0,0,0,4,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,114,"            if (fixed.equals(DateTimeZone.UTC)) {
",4,0,0,2,5,0,4,0,0,8,37,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,115,"                fixed = DateTimeZone.UTC;
",6,0,0,0,0,0,0,0,0,7,25,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,117,"            return fixed;
",2,0,0,0,0,1,0,0,0,2,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,121,"            return PrecalculatedZone.readFrom(in, id);
",0,0,0,1,2,1,8,0,0,8,42,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,123,"            throw new IOException(""Invalid encoding"");
",0,0,0,1,2,0,0,2,0,3,42,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,140,"        if (millis % (30 * 60000L) == 0) {
",2,3,0,2,5,0,0,0,0,5,34,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,142,"            long units = millis / (30 * 60000L);
",4,2,0,1,2,0,0,0,0,6,36,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,143,"            if (((units << (64 - 6)) >> (64 - 6)) == units) {
",4,5,0,5,11,0,0,0,0,9,49,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,145,"                out.writeByte((int)(units & 0x3f));
",2,1,0,3,6,0,4,0,0,7,35,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,146,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,150,"        if (millis % 60000L == 0) {
",2,2,0,1,3,0,0,0,0,4,27,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,152,"            long minutes = millis / 60000L;
",4,1,0,0,0,0,0,0,0,5,31,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,153,"            if (((minutes << (64 - 30)) >> (64 - 30)) == minutes) {
",4,5,0,5,11,0,0,0,0,9,55,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,155,"                out.writeInt(0x40000000 | (int)(minutes & 0x3fffffff));
",2,2,0,3,6,0,4,0,0,8,55,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,156,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,160,"        if (millis % 1000L == 0) {
",2,2,0,1,3,0,0,0,0,4,26,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,162,"            long seconds = millis / 1000L;
",4,1,0,0,0,0,0,0,0,5,30,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,163,"            if (((seconds << (64 - 38)) >> (64 - 38)) == seconds) {
",4,5,0,5,11,0,0,0,0,9,55,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,165,"                out.writeByte(0x80 | (int)((seconds >> 32) & 0x3f));
",2,3,0,4,8,0,4,0,0,9,52,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,166,"                out.writeInt((int)(seconds & 0xffffffff));
",2,1,0,3,6,0,4,0,0,7,42,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,167,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,175,"        out.writeByte(millis < 0 ? 0xff : 0xc0);
",2,1,0,1,2,0,4,0,0,7,40,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,176,"        out.writeLong(millis);
",0,0,0,1,2,0,6,0,0,6,22,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,177,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,215,"        if (""UTC"".equals(id) && id.equals(nameKey) &&
",0,2,0,2,5,0,10,0,0,13,45,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,217,"            return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,219,"        return new FixedDateTimeZone(id, nameKey, wallOffset, standardOffset);
",8,0,0,1,2,1,0,2,0,10,70,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,252,"        if (iRuleSets.size() > 0) {
",0,1,0,2,5,0,4,0,0,5,27,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,253,"            OfYear ofYear = new OfYear
",2,0,0,0,0,0,0,4,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,255,"            RuleSet lastRuleSet = iRuleSets.get(iRuleSets.size() - 1);
",2,1,0,2,4,0,8,2,0,13,58,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,256,"            lastRuleSet.setUpperLimit(year, ofYear);
",0,0,0,1,2,0,8,0,0,8,40,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,258,"        iRuleSets.add(new RuleSet());
",0,0,0,2,4,0,4,2,0,6,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,259,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,268,"        getLastRuleSet().setStandardOffset(standardOffset);
",0,0,0,2,4,0,6,0,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,269,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,276,"        getLastRuleSet().setFixedSavings(nameKey, saveMillis);
",0,0,0,2,4,0,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,277,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,309,"        if (fromYear <= toYear) {
",4,1,0,1,3,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,310,"            OfYear ofYear = new OfYear
",2,0,0,0,0,0,0,4,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,312,"            Recurrence recurrence = new Recurrence(ofYear, nameKey, saveMillis);
",8,0,0,1,2,0,0,4,0,12,68,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,313,"            Rule rule = new Rule(recurrence, fromYear, toYear);
",8,0,0,1,2,0,0,4,0,12,51,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,314,"            getLastRuleSet().addRule(rule);
",0,0,0,2,4,0,6,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,316,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,320,"        if (iRuleSets.size() == 0) {
",0,1,0,2,5,0,4,0,0,5,28,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,321,"            addCutover(Integer.MIN_VALUE, 'w', 1, 1, 0, false, 0);
",4,0,0,1,2,0,2,0,0,8,54,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,323,"        return iRuleSets.get(iRuleSets.size() - 1);
",0,1,0,2,4,1,8,0,0,9,43,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,333,"        if (id == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,334,"            throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,339,"        ArrayList<Transition> transitions = new ArrayList<Transition>();
",2,0,0,1,2,0,0,8,0,10,64,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,343,"        DSTZone tailZone = null;
",2,0,0,0,0,0,0,2,0,4,24,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,345,"        long millis = Long.MIN_VALUE;
",6,0,0,0,0,0,0,0,0,6,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,346,"        int saveMillis = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,348,"        int ruleSetCount = iRuleSets.size();
",2,0,0,1,2,0,4,0,0,6,36,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,349,"        for (int i=0; i<ruleSetCount; i++) {
",8,1,0,1,3,0,0,0,0,10,36,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,350,"            RuleSet rs = iRuleSets.get(i);
",2,0,0,1,2,0,6,2,0,10,30,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,351,"            Transition next = rs.firstTransition(millis);
",2,0,0,1,2,0,6,2,0,10,45,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,352,"            if (next == null) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,353,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,355,"            addTransition(transitions, next);
",0,0,0,1,2,0,6,0,0,6,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,356,"            millis = next.getMillis();
",2,0,0,1,2,0,4,0,0,7,26,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,357,"            saveMillis = next.getSaveMillis();
",2,0,0,1,2,0,4,0,0,7,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,360,"            rs = new RuleSet(rs);
",4,0,0,1,2,0,0,2,0,7,21,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,362,"            while ((next = rs.nextTransition(millis, saveMillis)) != null) {
",2,1,0,3,7,0,8,0,0,12,64,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,363,"                if (addTransition(transitions, next)) {
",0,0,0,2,5,0,6,0,0,6,39,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,364,"                    if (tailZone != null) {
",2,1,0,1,3,0,0,0,0,3,23,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,366,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,369,"                millis = next.getMillis();
",2,0,0,1,2,0,4,0,0,7,26,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,370,"                saveMillis = next.getSaveMillis();
",2,0,0,1,2,0,4,0,0,7,34,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,371,"                if (tailZone == null && i == ruleSetCount - 1) {
",6,4,0,1,3,0,0,0,0,10,48,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,372,"                    tailZone = rs.buildTailZone(id);
",2,0,0,1,2,0,6,0,0,9,32,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,379,"            millis = rs.getUpperLimit(saveMillis);
",2,0,0,1,2,0,6,0,0,9,38,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,383,"        if (transitions.size() == 0) {
",0,1,0,2,5,0,4,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,384,"            if (tailZone != null) {
",2,1,0,1,3,0,0,0,0,3,23,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,386,"                return tailZone;
",2,0,0,0,0,1,0,0,0,2,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,388,"            return buildFixedZone(id, ""UTC"", 0, 0);
",0,0,0,1,2,1,4,0,0,5,39,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,390,"        if (transitions.size() == 1 && tailZone == null) {
",2,3,0,2,5,0,4,0,0,9,50,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,391,"            Transition tr = transitions.get(0);
",2,0,0,1,2,0,4,2,0,8,35,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,392,"            return buildFixedZone(id, tr.getNameKey(),
",0,0,0,1,3,1,8,0,0,8,42,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,396,"        PrecalculatedZone zone = PrecalculatedZone.create(id, outputID, transitions, tailZone);
",2,0,0,1,2,0,12,2,0,16,87,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,397,"        if (zone.isCachable()) {
",0,0,0,2,5,0,4,0,0,4,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,398,"            return CachedDateTimeZone.forZone(zone);
",0,0,0,1,2,1,6,0,0,6,40,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,400,"        return zone;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,404,"        int size = transitions.size();
",2,0,0,1,2,0,4,0,0,6,30,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,405,"        if (size == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,406,"            transitions.add(tr);
",0,0,0,1,2,0,6,0,0,6,20,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,407,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,410,"        Transition last = transitions.get(size - 1);
",4,1,0,1,2,0,4,2,0,11,44,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,411,"        if (!tr.isTransitionFrom(last)) {
",0,0,0,2,5,0,6,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,412,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,417,"        int offsetForLast = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,418,"        if (size >= 2) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,419,"            offsetForLast = transitions.get(size - 2).getWallOffset();
",4,1,0,2,4,0,6,0,0,12,58,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,421,"        int offsetForNew = last.getWallOffset();
",2,0,0,1,2,0,4,0,0,6,40,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,423,"        long lastLocal = last.getMillis() + offsetForLast;
",4,1,0,1,2,0,4,0,0,9,50,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,424,"        long newLocal = tr.getMillis() + offsetForNew;
",4,1,0,1,2,0,4,0,0,9,46,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,426,"        if (newLocal != lastLocal) {
",4,1,0,1,3,0,0,0,0,5,28,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,427,"            transitions.add(tr);
",0,0,0,1,2,0,6,0,0,6,20,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,428,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,431,"        transitions.remove(size - 1);
",2,1,0,1,2,0,4,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,432,"        return addTransition(transitions, tr);
",0,0,0,1,2,1,6,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,443,"        if (out instanceof DataOutput) {
",2,0,0,1,3,0,0,2,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,444,"            writeTo(zoneID, (DataOutput)out);
",2,0,0,2,4,0,4,2,0,8,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,446,"            writeTo(zoneID, (DataOutput)new DataOutputStream(out));
",2,0,0,3,6,0,4,4,0,10,55,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,448,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,459,"        DateTimeZone zone = toDateTimeZone(zoneID, false);
",2,0,0,1,2,0,4,2,0,9,50,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,461,"        if (zone instanceof FixedDateTimeZone) {
",2,0,0,1,3,0,0,2,0,4,40,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,462,"            out.writeByte('F'); // 'F' for fixed
",0,0,0,1,2,0,4,0,0,5,36,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,463,"            out.writeUTF(zone.getNameKey(0));
",0,0,0,2,4,0,8,0,0,8,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,464,"            writeMillis(out, zone.getOffset(0));
",0,0,0,2,4,0,8,0,0,8,36,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,465,"            writeMillis(out, zone.getStandardOffset(0));
",0,0,0,2,4,0,8,0,0,8,44,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,467,"            if (zone instanceof CachedDateTimeZone) {
",2,0,0,1,3,0,0,2,0,4,41,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,468,"                out.writeByte('C'); // 'C' for cached, precalculated
",0,0,0,1,2,0,4,0,0,5,52,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,469,"                zone = ((CachedDateTimeZone)zone).getUncachedZone();
",4,0,0,3,6,0,2,2,0,9,52,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,471,"                out.writeByte('P'); // 'P' for precalculated, uncached
",0,0,0,1,2,0,4,0,0,5,54,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,473,"            ((PrecalculatedZone)zone).writeTo(out);
",2,0,0,3,6,0,4,2,0,8,39,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,475,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,963,"        RuleSet() {
",2,0,0,1,3,0,0,0,0,2,11,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,964,"            iRules = new ArrayList<Rule>(10);
",2,0,0,1,2,0,0,4,0,7,33,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,965,"            iUpperYear = Integer.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,7,31,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,966,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,971,"        RuleSet(RuleSet rs) {
",4,0,0,1,3,0,0,2,0,6,21,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,972,"            iStandardOffset = rs.iStandardOffset;
",6,0,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,973,"            iRules = new ArrayList<Rule>(rs.iRules);
",6,0,0,1,2,0,0,4,0,11,40,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,974,"            iInitialNameKey = rs.iInitialNameKey;
",6,0,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,975,"            iInitialSaveMillis = rs.iInitialSaveMillis;
",6,0,0,0,0,0,0,0,0,7,43,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,976,"            iUpperYear = rs.iUpperYear;
",6,0,0,0,0,0,0,0,0,7,27,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,977,"            iUpperOfYear = rs.iUpperOfYear;
",6,0,0,0,0,0,0,0,0,7,31,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,978,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,948,"            long now = DateTimeUtils.currentTimeMillis();
",2,0,0,1,2,0,4,0,0,6,45,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,949,"            YEAR_LIMIT = ISOChronology.getInstanceUTC().year().get(now) + 100;
",2,1,0,3,6,0,10,0,0,14,66,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,950,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,981,"            return iStandardOffset;
",2,0,0,0,0,1,0,0,0,2,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,985,"            iStandardOffset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,33,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,986,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,989,"            iInitialNameKey = nameKey;
",4,0,0,0,0,0,0,0,0,5,26,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,990,"            iInitialSaveMillis = saveMillis;
",4,0,0,0,0,0,0,0,0,5,32,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,991,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,994,"            if (!iRules.contains(rule)) {
",0,0,0,2,5,0,6,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,995,"                iRules.add(rule);
",0,0,0,1,2,0,6,0,0,6,17,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,997,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1000,"            iUpperYear = year;
",4,0,0,0,0,0,0,0,0,5,18,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1001,"            iUpperOfYear = ofYear;
",4,0,0,0,0,0,0,0,0,5,22,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1002,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1011,"            if (iInitialNameKey != null) {
",2,1,0,1,3,0,0,0,0,3,30,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1013,"                return new Transition(firstMillis, iInitialNameKey,
",4,0,0,0,1,1,0,2,0,6,51,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1018,"            ArrayList<Rule> copy = new ArrayList<Rule>(iRules);
",4,0,0,1,2,0,0,8,0,12,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1024,"            long millis = Long.MIN_VALUE;
",6,0,0,0,0,0,0,0,0,6,29,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1025,"            int saveMillis = 0;
",2,0,0,0,0,0,0,0,0,2,19,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1026,"            Transition first = null;
",2,0,0,0,0,0,0,2,0,4,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1029,"            while ((next = nextTransition(millis, saveMillis)) != null) {
",2,1,0,3,7,0,6,0,0,11,61,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1030,"                millis = next.getMillis();
",2,0,0,1,2,0,4,0,0,7,26,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1032,"                if (millis == firstMillis) {
",4,1,0,1,3,0,0,0,0,5,28,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1033,"                    first = new Transition(firstMillis, next);
",6,0,0,1,2,0,0,2,0,9,42,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1034,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1037,"                if (millis > firstMillis) {
",4,1,0,1,3,0,0,0,0,5,27,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1038,"                    if (first == null) {
",2,1,0,1,3,0,0,0,0,3,20,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1042,"                        for (Rule rule : copy) {
",4,0,0,1,3,0,0,2,0,6,24,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1043,"                            if (rule.getSaveMillis() == 0) {
",0,1,0,2,5,0,4,0,0,5,32,13,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1044,"                                first = new Transition(firstMillis, rule, iStandardOffset);
",8,0,0,1,2,0,0,2,0,11,59,15,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1045,"                                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1047,"                        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1049,"                    if (first == null) {
",2,1,0,1,3,0,0,0,0,3,20,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1053,"                        first = new Transition(firstMillis, next.getNameKey(),
",4,0,0,1,3,0,4,2,0,11,54,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1061,"                first = new Transition(firstMillis, next);
",6,0,0,1,2,0,0,2,0,9,42,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1063,"                saveMillis = next.getSaveMillis();
",2,0,0,1,2,0,4,0,0,7,34,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1066,"            iRules = copy;
",4,0,0,0,0,0,0,0,0,5,14,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1067,"            return first;
",2,0,0,0,0,1,0,0,0,2,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1082,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1085,"            Rule nextRule = null;
",2,0,0,0,0,0,0,2,0,4,21,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1086,"            long nextMillis = Long.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,6,33,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1088,"            Iterator<Rule> it = iRules.iterator();
",2,0,0,1,2,0,4,4,0,10,38,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1089,"            while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1090,"                Rule rule = it.next();
",2,0,0,1,2,0,4,2,0,8,22,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1091,"                long next = rule.next(instant, iStandardOffset, saveMillis);
",2,0,0,1,2,0,10,0,0,12,60,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1092,"                if (next <= instant) {
",4,1,0,1,3,0,0,0,0,5,22,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1093,"                    it.remove();
",0,0,0,1,2,0,4,0,0,4,12,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1094,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1098,"                if (next <= nextMillis) {
",4,1,0,1,3,0,0,0,0,5,25,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1100,"                    nextRule = rule;
",4,0,0,0,0,0,0,0,0,5,16,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1101,"                    nextMillis = next;
",4,0,0,0,0,0,0,0,0,5,18,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1103,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1105,"            if (nextRule == null) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1106,"                return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1110,"            if (chrono.year().get(nextMillis) >= YEAR_LIMIT) {
",2,1,0,3,7,0,8,0,0,11,50,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1111,"                return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1115,"            if (iUpperYear < Integer.MAX_VALUE) {
",6,1,0,1,3,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1116,"                long upperMillis =
",2,0,0,0,0,0,0,0,0,2,18,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1118,"                if (nextMillis >= upperMillis) {
",4,1,0,1,3,0,0,0,0,5,32,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1120,"                    return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1124,"            return new Transition(nextMillis, nextRule, iStandardOffset);
",6,0,0,1,2,1,0,2,0,8,61,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1131,"            if (iUpperYear == Integer.MAX_VALUE) {
",6,1,0,1,3,0,0,0,0,7,38,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1132,"                return Long.MAX_VALUE;
",4,0,0,0,0,1,0,0,0,4,22,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1134,"            return iUpperOfYear.setInstant(iUpperYear, iStandardOffset, saveMillis);
",0,0,0,1,2,1,10,0,0,10,72,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1141,"            if (iRules.size() == 2) {
",0,1,0,2,5,0,4,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1142,"                Rule startRule = iRules.get(0);
",2,0,0,1,2,0,4,2,0,8,31,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1143,"                Rule endRule = iRules.get(1);
",2,0,0,1,2,0,4,2,0,8,29,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1144,"                if (startRule.getToYear() == Integer.MAX_VALUE &&
",4,2,0,1,3,0,4,0,0,10,49,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1154,"                    return new DSTZone(id, iStandardOffset,
",4,0,0,0,1,1,0,2,0,6,39,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,1158,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,20,43,"        String[] nameSet = getNameSet(locale, id, nameKey);
",2,0,0,2,4,0,8,2,0,12,51,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,20,44,"        return nameSet == null ? null : nameSet[0];
",2,1,1,1,2,1,0,0,0,5,43,5,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,20,48,"        String[] nameSet = getNameSet(locale, id, nameKey);
",2,0,0,2,4,0,8,2,0,12,51,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,20,49,"        return nameSet == null ? null : nameSet[1];
",2,1,1,1,2,1,0,0,0,5,43,5,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,20,53,"        if (locale == null || id == null || nameKey == null) {
",6,5,0,1,3,0,0,0,0,11,54,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,20,54,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,20,57,"        Map<String, Map<String, Object>> byIdCache = iByLocaleCache.get(locale);
",2,0,0,1,2,0,6,10,0,18,72,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,20,58,"        if (byIdCache == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,20,59,"            iByLocaleCache.put(locale, byIdCache = createCache());
",2,0,0,2,4,0,8,0,0,11,54,7,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,20,62,"        Map<String, Object> byNameKeyCache = byIdCache.get(id);
",2,0,0,1,2,0,6,6,0,14,55,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,20,63,"        if (byNameKeyCache == null) {
",2,1,0,1,3,0,0,0,0,3,29,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,20,64,"            byIdCache.put(id, byNameKeyCache = createCache());
",2,0,0,2,4,0,8,0,0,11,50,7,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,20,66,"            String[][] zoneStringsEn = DateTimeUtils.getDateFormatSymbols(Locale.ENGLISH).getZoneStrings();
",6,0,0,4,8,0,6,2,0,14,95,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,20,67,"            String[] setEn = null;
",2,0,0,1,2,0,0,2,0,4,22,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,20,68,"            for (String[] strings : zoneStringsEn) {
",4,0,0,2,5,0,0,2,0,6,40,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,20,69,"              if (strings != null && strings.length == 5 && id.equals(strings[0])) {
",6,4,1,3,7,0,4,0,0,16,70,8,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,20,70,"                setEn = strings;
",4,0,0,0,0,0,0,0,0,5,16,10,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,20,71,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,20,74,"            String[][] zoneStringsLoc = DateTimeUtils.getDateFormatSymbols(locale).getZoneStrings();
",2,0,0,4,8,0,8,2,0,12,88,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,20,75,"            String[] setLoc = null;
",2,0,0,1,2,0,0,2,0,4,23,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,20,76,"            for (String[] strings : zoneStringsLoc) {
",4,0,0,2,5,0,0,2,0,6,41,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,20,77,"              if (strings != null && strings.length == 5 && id.equals(strings[0])) {
",6,4,1,3,7,0,4,0,0,16,70,8,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,20,78,"                setLoc = strings;
",4,0,0,0,0,0,0,0,0,5,17,10,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,20,79,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,20,83,"            if (setEn != null && setLoc != null) {
",4,3,0,1,3,0,0,0,0,7,38,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,20,84,"              byNameKeyCache.put(setEn[2], new String[] {setLoc[2], setLoc[1]});
",0,0,1,6,12,0,4,2,0,12,66,9,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,20,88,"              if (setEn[2].equals(setEn[4])) {
",0,0,1,4,9,0,2,0,0,6,32,9,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,20,89,"                  byNameKeyCache.put(setEn[4] + ""-Summer"", new String[] {setLoc[4], setLoc[3]});
",0,1,1,6,12,0,4,2,0,14,78,11,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,20,91,"                  byNameKeyCache.put(setEn[4], new String[] {setLoc[4], setLoc[3]});
",0,0,1,6,12,0,4,2,0,12,66,11,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,20,95,"        return (String[]) byNameKeyCache.get(nameKey);
",0,0,0,3,6,1,6,2,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,816,"        Rule(Recurrence recurrence, int fromYear, int toYear) {
",8,0,0,1,3,0,0,2,0,10,55,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,817,"            iRecurrence = recurrence;
",4,0,0,0,0,0,0,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,818,"            iFromYear = fromYear;
",4,0,0,0,0,0,0,0,0,5,21,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,819,"            iToYear = toYear;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,820,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,823,"            return iFromYear;
",2,0,0,0,0,1,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,827,"            return iToYear;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,831,"            return iRecurrence.getOfYear();
",0,0,0,1,2,1,4,0,0,4,31,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,835,"            return iRecurrence.getNameKey();
",0,0,0,1,2,1,4,0,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,839,"            return iRecurrence.getSaveMillis();
",0,0,0,1,2,1,4,0,0,4,35,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,843,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,845,"            final int wallOffset = standardOffset + saveMillis;
",6,1,0,0,0,1,0,0,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,846,"            long testInstant = instant;
",4,0,0,0,0,0,0,0,0,4,27,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,849,"            if (instant == Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,32,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,850,"                year = Integer.MIN_VALUE;
",6,0,0,0,0,0,0,0,0,7,25,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,852,"                year = chrono.year().get(instant + wallOffset);
",6,1,0,2,4,0,6,0,0,14,47,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,855,"            if (year < iFromYear) {
",4,1,0,1,3,0,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,857,"                testInstant = chrono.year().set(0, iFromYear) - wallOffset;
",4,1,0,2,4,0,8,0,0,14,59,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,860,"                testInstant -= 1;
",2,0,0,0,0,0,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,863,"            long next = iRecurrence.next(testInstant, standardOffset, saveMillis);
",2,0,0,1,2,0,10,0,0,12,70,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,865,"            if (next > instant) {
",4,1,0,1,3,0,0,0,0,5,21,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,866,"                year = chrono.year().get(next + wallOffset);
",6,1,0,2,4,0,6,0,0,14,44,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,867,"                if (year > iToYear) {
",4,1,0,1,3,0,0,0,0,5,21,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,869,"                    next = instant;
",4,0,0,0,0,0,0,0,0,5,15,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,873,"            return next;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,754,"            return iOfYear;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,761,"            return iOfYear.next(instant, standardOffset, saveMillis);
",0,0,0,1,2,1,10,0,0,10,57,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,768,"            return iOfYear.previous(instant, standardOffset, saveMillis);
",0,0,0,1,2,1,10,0,0,10,61,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,772,"            return iNameKey;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,776,"            return iSaveMillis;
",2,0,0,0,0,1,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,780,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,781,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,783,"            if (obj instanceof Recurrence) {
",2,0,0,1,3,0,0,2,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,784,"                Recurrence other = (Recurrence)obj;
",4,0,0,1,2,0,0,4,0,8,35,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,785,"                return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,790,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,794,"            iOfYear.writeTo(out);
",0,0,0,1,2,0,6,0,0,6,21,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,795,"            out.writeUTF(iNameKey);
",0,0,0,1,2,0,6,0,0,6,23,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,796,"            writeMillis(out, iSaveMillis);
",0,0,0,1,2,0,6,0,0,6,30,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,797,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,800,"            return new Recurrence(iOfYear, nameKey, iSaveMillis);
",6,0,0,1,2,1,0,2,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,20,804,"            return rename((iNameKey + appendNameKey).intern());
",4,1,0,3,6,1,4,0,0,9,51,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,20,42,"        return GJLocaleSymbols.forLocale(locale).monthOfYearValueToText(fieldValue);
",0,0,0,2,4,1,10,0,0,10,76,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,20,47,"        return GJLocaleSymbols.forLocale(locale).monthOfYearValueToShortText(fieldValue);
",0,0,0,2,4,1,10,0,0,10,81,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,20,52,"        return GJLocaleSymbols.forLocale(locale).monthOfYearTextToValue(text);
",0,0,0,2,4,1,10,0,0,10,70,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,20,57,"        return GJLocaleSymbols.forLocale(locale).getMonthMaxTextLength();
",0,0,0,2,4,1,8,0,0,8,65,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,20,62,"        return GJLocaleSymbols.forLocale(locale).getMonthMaxShortTextLength();
",0,0,0,2,4,1,8,0,0,8,70,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,59,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,92,"        if (months == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,93,"            return instant; // the easy case
",2,0,0,0,0,1,0,0,0,2,32,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,98,"        long timePart = iChronology.getMillisOfDay(instant);
",2,0,0,1,2,0,6,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,103,"        int thisYear = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,104,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);
",2,0,0,1,2,0,8,0,0,10,62,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,112,"        int monthToUse = thisMonth - 1 + months;
",6,2,0,0,0,0,0,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,113,"        if (monthToUse >= 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,114,"            yearToUse = thisYear + (monthToUse / iMax);
",8,2,0,1,2,0,0,0,0,11,43,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,115,"            monthToUse = (monthToUse % iMax) + 1;
",6,2,0,1,2,0,0,0,0,9,37,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,117,"            yearToUse = thisYear + (monthToUse / iMax) - 1;
",8,3,0,1,2,0,0,0,0,12,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,118,"            monthToUse = Math.abs(monthToUse);
",2,0,0,1,2,0,6,0,0,9,34,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,119,"            int remMonthToUse = monthToUse % iMax;
",6,1,0,0,0,0,0,0,0,7,38,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,121,"            if (remMonthToUse == 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,122,"                remMonthToUse = iMax;
",4,0,0,0,0,0,0,0,0,5,21,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,124,"            monthToUse = iMax - remMonthToUse + 1;
",6,2,0,0,0,0,0,0,0,9,38,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,126,"            if (monthToUse == 1) {
",2,1,0,1,3,0,0,0,0,3,22,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,127,"                yearToUse += 1;
",2,0,0,0,0,0,0,0,0,3,15,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,136,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);
",2,0,0,1,2,0,10,0,0,12,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,137,"        int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);
",2,0,0,1,2,0,8,0,0,10,67,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,138,"        if (dayToUse > maxDay) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,139,"            dayToUse = maxDay;
",4,0,0,0,0,0,0,0,0,5,18,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,144,"        long datePart =
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,146,"        return datePart + timePart;
",4,1,0,0,0,1,0,0,0,5,27,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,151,"        int i_months = (int)months;
",4,0,0,1,2,0,0,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,152,"        if (i_months == months) {
",4,1,0,1,3,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,153,"            return add(instant, i_months);
",0,0,0,1,2,1,6,0,0,6,30,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,158,"        long timePart = iChronology.getMillisOfDay(instant);
",2,0,0,1,2,0,6,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,160,"        int thisYear = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,161,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);
",2,0,0,1,2,0,8,0,0,10,62,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,164,"        long monthToUse = thisMonth - 1 + months;
",6,2,0,0,0,0,0,0,0,8,41,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,165,"        if (monthToUse >= 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,166,"            yearToUse = thisYear + (monthToUse / iMax);
",8,2,0,1,2,0,0,0,0,11,43,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,167,"            monthToUse = (monthToUse % iMax) + 1;
",6,2,0,1,2,0,0,0,0,9,37,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,169,"            yearToUse = thisYear + (monthToUse / iMax) - 1;
",8,3,0,1,2,0,0,0,0,12,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,170,"            monthToUse = Math.abs(monthToUse);
",2,0,0,1,2,0,6,0,0,9,34,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,171,"            int remMonthToUse = (int)(monthToUse % iMax);
",6,1,0,2,4,0,0,0,0,7,45,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,172,"            if (remMonthToUse == 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,173,"                remMonthToUse = iMax;
",4,0,0,0,0,0,0,0,0,5,21,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,175,"            monthToUse = iMax - remMonthToUse + 1;
",6,2,0,0,0,0,0,0,0,9,38,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,176,"            if (monthToUse == 1) {
",2,1,0,1,3,0,0,0,0,3,22,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,177,"                yearToUse += 1;
",2,0,0,0,0,0,0,0,0,3,15,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,181,"        if (yearToUse < iChronology.getMinYear() ||
",2,2,0,1,3,0,4,0,0,8,43,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,184,"            throw new IllegalArgumentException
",0,0,0,0,0,0,0,2,0,2,34,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,188,"        int i_yearToUse = (int)yearToUse;
",4,0,0,1,2,0,0,0,0,4,33,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,189,"        int i_monthToUse = (int)monthToUse;
",4,0,0,1,2,0,0,0,0,4,35,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,191,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);
",2,0,0,1,2,0,10,0,0,12,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,192,"        int maxDay = iChronology.getDaysInYearMonth(i_yearToUse, i_monthToUse);
",2,0,0,1,2,0,8,0,0,10,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,193,"        if (dayToUse > maxDay) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,194,"            dayToUse = maxDay;
",4,0,0,0,0,0,0,0,0,5,18,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,197,"        long datePart =
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,199,"        return datePart + timePart;
",4,1,0,0,0,1,0,0,0,5,27,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,206,"        if (valueToAdd == 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,207,"            return values;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,209,"        if (DateTimeUtils.isContiguous(partial)) {
",0,0,0,2,5,0,6,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,210,"            long instant = 0L;
",2,0,0,0,0,0,0,0,0,2,18,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,211,"            for (int i = 0, isize = partial.size(); i < isize; i++) {
",10,1,0,2,5,0,4,0,0,16,57,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,212,"                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
",2,0,1,4,8,0,14,0,0,21,80,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,214,"            instant = add(instant, valueToAdd);
",2,0,0,1,2,0,6,0,0,9,35,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,215,"            return iChronology.get(partial, instant);
",0,0,0,1,2,1,8,0,0,8,41,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,217,"            return super.add(partial, fieldIndex, values, valueToAdd);
",10,0,0,1,2,1,0,0,0,10,58,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,232,"        return set(instant, FieldUtils.getWrappedValue(get(instant), months, MIN, iMax));
",0,0,0,3,6,1,18,0,0,18,81,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,237,"        if (minuendInstant < subtrahendInstant) {
",4,1,0,1,3,0,0,0,0,5,41,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,238,"            return -getDifference(subtrahendInstant, minuendInstant);
",0,0,0,1,2,1,6,0,0,7,57,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,241,"        int minuendYear = iChronology.getYear(minuendInstant);
",2,0,0,1,2,0,6,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,242,"        int minuendMonth = iChronology.getMonthOfYear(minuendInstant, minuendYear);
",2,0,0,1,2,0,8,0,0,10,75,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,243,"        int subtrahendYear = iChronology.getYear(subtrahendInstant);
",2,0,0,1,2,0,6,0,0,8,60,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,244,"        int subtrahendMonth = iChronology.getMonthOfYear(subtrahendInstant, subtrahendYear);
",2,0,0,1,2,0,8,0,0,10,84,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,246,"        long difference = (minuendYear - subtrahendYear) * ((long) iMax) + minuendMonth - subtrahendMonth;
",12,4,0,3,6,0,0,0,0,16,98,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,250,"        int minuendDom = iChronology.getDayOfMonth
",2,0,0,0,0,0,4,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,252,"        if (minuendDom == iChronology.getDaysInYearMonth(minuendYear, minuendMonth)) {
",2,1,0,2,5,0,8,0,0,11,78,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,254,"            int subtrahendDom = iChronology.getDayOfMonth
",2,0,0,0,0,0,4,0,0,6,45,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,256,"            if (subtrahendDom > minuendDom) {
",4,1,0,1,3,0,0,0,0,5,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,260,"                subtrahendInstant = iChronology.dayOfMonth().set(subtrahendInstant, minuendDom);
",2,0,0,2,4,0,10,0,0,13,80,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,265,"        long minuendRem = minuendInstant
",4,0,0,0,0,0,0,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,267,"        long subtrahendRem = subtrahendInstant
",4,0,0,0,0,0,0,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,270,"        if (minuendRem < subtrahendRem) {
",4,1,0,1,3,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,271,"            difference--;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,274,"        return difference;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,292,"        FieldUtils.verifyValueBounds(this, month, MIN, iMax);
",0,0,0,1,2,0,10,0,0,10,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,294,"        int thisYear = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,296,"        int thisDom = iChronology.getDayOfMonth(instant, thisYear);
",2,0,0,1,2,0,8,0,0,10,59,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,297,"        int maxDom = iChronology.getDaysInYearMonth(thisYear, month);
",2,0,0,1,2,0,8,0,0,10,61,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,298,"        if (thisDom > maxDom) {
",4,1,0,1,3,0,0,0,0,5,23,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,300,"            thisDom = maxDom;
",4,0,0,0,0,0,0,0,0,5,17,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,303,"        return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +
",0,1,0,1,2,1,10,0,0,11,68,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,314,"        int thisYear = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,315,"        if (iChronology.isLeapYear(thisYear)) {
",0,0,0,2,5,0,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,316,"            return (iChronology.getMonthOfYear(instant, thisYear) == iLeapMonth);
",2,1,0,2,4,1,8,0,0,11,69,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,318,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,323,"        return isLeap(instant) ? 1 : 0;
",0,0,0,1,2,1,4,0,0,4,31,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,333,"        return MIN;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,338,"        return iMax;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,343,"        int year = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,344,"        int month = iChronology.getMonthOfYear(instant, year);
",2,0,0,1,2,0,8,0,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,345,"        return iChronology.getYearMonthMillis(year, month);
",0,0,0,1,2,1,8,0,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,350,"        return instant - roundFloor(instant);
",2,1,0,1,2,1,4,0,0,7,37,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,20,358,"        return iChronology.monthOfYear();
",0,0,0,1,2,1,4,0,0,4,33,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,20,91,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));
",0,0,0,2,4,1,10,0,0,10,84,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,20,118,"        if (minuendInstant < subtrahendInstant) {
",4,1,0,1,3,0,0,0,0,5,41,4,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,20,119,"            return -getDifferenceAsLong(subtrahendInstant, minuendInstant);
",0,0,0,1,2,1,6,0,0,7,63,6,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,20,122,"        long difference = (minuendInstant - subtrahendInstant) / iUnitMillis;
",8,2,0,1,2,0,0,0,0,10,69,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,20,123,"        if (add(subtrahendInstant, difference) < minuendInstant) {
",2,1,0,2,5,0,6,0,0,9,58,4,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,20,125,"                difference++;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,20,126,"            } while (add(subtrahendInstant, difference) <= minuendInstant);
",2,1,0,2,5,0,6,0,0,9,63,6,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,20,127,"            difference--;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,20,128,"        } else if (add(subtrahendInstant, difference) > minuendInstant) {
",2,1,0,2,6,0,6,0,0,9,65,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,20,130,"                difference--;
",2,0,0,0,0,0,0,0,0,3,13,9,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,20,131,"            } while (add(subtrahendInstant, difference) > minuendInstant);
",2,1,0,2,5,0,6,0,0,9,62,7,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,20,133,"        return difference;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,20,145,"        return iUnitMillis;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,20,156,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,20,164,"            return ImpreciseDateTimeField.this
",2,0,0,0,0,1,0,0,0,2,34,7,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,20,169,"            return ImpreciseDateTimeField.this
",2,0,0,0,0,1,0,0,0,2,34,7,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,20,174,"            return ImpreciseDateTimeField.this.add(instant, value) - instant;
",4,1,0,1,2,1,6,0,0,11,65,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,20,178,"            return ImpreciseDateTimeField.this.add(instant, value) - instant;
",4,1,0,1,2,1,6,0,0,11,65,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,20,182,"            return ImpreciseDateTimeField.this.add(instant, value);
",2,0,0,1,2,1,6,0,0,8,55,6,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,20,186,"            return ImpreciseDateTimeField.this.add(instant, value);
",2,0,0,1,2,1,6,0,0,8,55,6,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,20,190,"            return ImpreciseDateTimeField.this
",2,0,0,0,0,1,0,0,0,2,34,7,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,20,195,"            return ImpreciseDateTimeField.this
",2,0,0,0,0,1,0,0,0,2,34,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,20,49,"            throw new IllegalArgumentException(""The type must not be null"");
",0,0,0,1,2,0,0,2,0,4,64,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,20,59,"        return iType.getName();
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,20,79,"        return FieldUtils.safeToInt(getValueAsLong(duration));
",0,0,0,2,4,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,20,91,"        return duration / getUnitMillis();
",2,1,0,1,2,1,2,0,0,5,34,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,20,111,"        return FieldUtils.safeToInt(getValueAsLong(duration, instant));
",0,0,0,2,4,1,10,0,0,10,63,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,20,123,"        return value * getUnitMillis();  // safe
",2,1,0,1,2,1,2,0,0,5,40,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,20,135,"        return FieldUtils.safeMultiply(value, getUnitMillis());
",0,0,0,2,4,1,8,0,0,8,55,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,20,141,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));
",0,0,0,2,4,1,10,0,0,10,84,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,20,146,"        long otherMillis = otherField.getUnitMillis();
",2,0,0,1,2,0,4,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,20,147,"        long thisMillis = getUnitMillis();
",2,0,0,1,2,0,2,0,0,4,34,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,20,149,"        if (thisMillis == otherMillis) {
",4,1,0,1,3,0,0,0,0,5,32,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,20,150,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,20,152,"        if (thisMillis < otherMillis) {
",4,1,0,1,3,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,20,153,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,20,155,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,20,165,"        return ""DurationField["" + getName() + ']';
",0,1,0,2,4,1,2,0,0,5,42,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,20,38,"public abstract class BaseDurationField extends DurationField implements Serializable {
",2,0,0,0,1,2,0,4,0,8,87,1,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,134,"            throw new IllegalArgumentException
",0,0,0,0,0,0,0,2,0,2,34,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,144,"            return base.getZone();
",0,0,0,1,2,1,4,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,153,"        if ((base = getBase()) != null) {
",2,1,0,3,7,0,2,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,154,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);
",0,0,0,1,2,1,12,0,0,12,74,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,157,"        FieldUtils.verifyValueBounds
",0,0,0,0,0,0,4,0,0,4,28,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,159,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;
",2,1,0,1,2,1,8,0,0,11,74,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,168,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,
",0,0,0,0,1,1,10,0,0,10,60,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,185,"        return iMinDaysInFirstWeek;
",2,0,0,0,0,1,0,0,0,2,27,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,196,"        return super.equals(obj);
",4,0,0,1,2,1,0,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,206,"        return getClass().getName().hashCode() * 11 + getZone().hashCode() + getMinimumDaysInFirstWeek();
",0,3,0,6,12,1,12,0,0,15,97,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,217,"        StringBuffer sb = new StringBuffer(60);
",2,0,0,1,2,0,0,4,0,6,39,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,218,"        String name = getClass().getName();
",2,0,0,2,4,0,4,2,0,8,35,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,219,"        int index = name.lastIndexOf('.');
",2,0,0,1,2,0,4,0,0,7,34,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,220,"        if (index >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,221,"            name = name.substring(index + 1);
",4,1,0,1,2,0,4,0,0,10,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,223,"        sb.append(name);
",0,0,0,1,2,0,6,0,0,6,16,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,224,"        sb.append('[');
",0,0,0,1,3,0,4,0,0,5,15,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,225,"        DateTimeZone zone = getZone();
",2,0,0,1,2,0,2,2,0,6,30,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,226,"        if (zone != null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,227,"            sb.append(zone.getID());
",0,0,0,2,4,0,8,0,0,8,24,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,229,"        if (getMinimumDaysInFirstWeek() != 4) {
",0,1,0,2,5,0,2,0,0,3,39,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,230,"            sb.append("",mdfw="");
",0,0,0,1,2,0,4,0,0,5,20,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,231,"            sb.append(getMinimumDaysInFirstWeek());
",0,0,0,2,4,0,6,0,0,6,39,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,233,"        sb.append(']');
",0,0,0,1,3,0,4,0,0,5,15,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,234,"        return sb.toString();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,307,"        return 366;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,317,"        return isLeapYear(year) ? 366 : 365;
",0,0,0,1,2,1,4,0,0,4,36,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,327,"        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,328,"        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);
",4,1,0,1,2,0,2,0,0,7,59,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,329,"        return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);
",8,2,0,3,6,1,0,0,0,10,89,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,339,"        long jan1millis = getYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,340,"        int jan1dayOfWeek = getDayOfWeek(jan1millis);
",2,0,0,1,2,0,4,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,342,"        if (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {
",4,2,0,2,5,0,0,0,0,6,48,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,344,"            return jan1millis + (8 - jan1dayOfWeek)
",4,2,0,1,2,1,0,0,0,6,39,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,348,"            return jan1millis - (jan1dayOfWeek - 1)
",4,2,0,1,2,1,0,0,0,6,39,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,371,"        long millis = getYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,34,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,372,"        millis += getTotalMillisByYearMonth(year, month);
",2,0,0,1,2,0,6,0,0,9,49,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,373,"        return millis;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,402,"            i2 = i2 - unitMillis + 1;
",6,2,0,0,0,0,0,0,0,9,25,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,410,"            year--;
",2,0,0,0,0,0,0,0,0,3,7,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,414,"            if (isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,4,23,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,415,"                oneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;
",6,1,0,0,0,0,0,0,0,8,50,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,417,"                oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;
",6,1,0,0,0,0,0,0,0,8,50,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,420,"            yearStart += oneYear;
",4,0,0,0,0,0,0,0,0,5,21,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,422,"            if (yearStart <= instant) {
",4,1,0,1,3,0,0,0,0,5,27,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,424,"                year++;
",2,0,0,0,0,0,0,0,0,3,7,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,458,"        int month = getMonthOfYear(millis, year);
",2,0,0,1,2,0,6,0,0,8,41,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,459,"        return getDayOfMonth(millis, year, month);
",0,0,0,1,2,1,8,0,0,8,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,477,"        return getDayOfYear(instant, getYear(instant));
",0,0,0,2,4,1,8,0,0,8,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,485,"        long yearStart = getYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,486,"        return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;
",8,3,0,3,6,1,0,0,0,11,76,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,493,"        int year = getYear(instant);
",2,0,0,1,2,0,4,0,0,6,28,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,494,"        int week = getWeekOfWeekyear(instant, year);
",2,0,0,1,2,0,6,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,495,"        if (week == 1) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,496,"            return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);
",6,1,0,1,2,1,2,0,0,9,60,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,497,"        } else if (week > 51) {
",2,1,0,1,4,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,498,"            return getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));
",6,2,0,2,4,1,2,0,0,10,66,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,500,"            return year;
",2,0,0,0,0,1,0,0,0,2,12,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,508,"        return getWeekOfWeekyear(instant, getYear(instant));
",0,0,0,2,4,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,516,"        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,517,"        if (instant < firstWeekMillis1) {
",4,1,0,1,3,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,518,"            return getWeeksInYear(year - 1);
",2,1,0,1,2,1,2,0,0,5,32,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,520,"        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);
",4,1,0,1,2,0,2,0,0,7,59,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,521,"        if (instant >= firstWeekMillis2) {
",4,1,0,1,3,0,0,0,0,5,34,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,522,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,524,"        return (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;
",8,3,0,3,6,1,0,0,0,11,84,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,534,"        if (instant >= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,535,"            daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;
",8,1,0,0,0,0,0,0,0,10,63,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,537,"            daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1))
",8,2,0,2,4,0,0,0,0,11,70,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,539,"            if (daysSince19700101 < -3) {
",2,1,0,1,3,0,0,0,0,4,29,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,540,"                return 7 + (int) ((daysSince19700101 + 4) % 7);
",2,3,0,3,6,1,0,0,0,5,47,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,544,"        return 1 + (int) ((daysSince19700101 + 3) % 7);
",2,3,0,3,6,1,0,0,0,5,47,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,551,"        if (instant >= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,552,"            return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);
",6,1,0,2,4,1,0,0,0,7,58,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,554,"            return (DateTimeConstants.MILLIS_PER_DAY - 1)
",4,1,0,1,2,1,0,0,0,5,45,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,565,"        return 31;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,575,"        int thisYear = getYear(instant);
",2,0,0,1,2,0,4,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,576,"        int thisMonth = getMonthOfYear(instant, thisYear);
",2,0,0,1,2,0,6,0,0,8,50,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,577,"        return getDaysInYearMonth(thisYear, thisMonth);
",0,0,0,1,2,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,590,"        return getDaysInMonthMax(instant);
",0,0,0,1,2,1,4,0,0,4,34,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,216,"        Stub(DateTimeZone zone) {
",4,0,0,1,3,0,0,2,0,6,25,3,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,217,"            iZone = zone;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,218,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,221,"            return ISOChronology.getInstance(iZone);
",0,0,0,1,2,1,6,0,0,6,40,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,225,"            out.writeObject(iZone);
",0,0,0,1,2,0,6,0,0,6,23,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,226,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,231,"            iZone = (DateTimeZone)in.readObject();
",2,0,0,2,4,0,4,2,0,9,38,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,20,232,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,754,"            return GJLocaleSymbols.forLocale(locale).halfdayValueToText(fieldValue);
",0,0,0,2,4,1,10,0,0,10,72,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,758,"            return set(millis, GJLocaleSymbols.forLocale(locale).halfdayTextToValue(text));
",0,0,0,3,6,1,14,0,0,14,79,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,20,762,"            return GJLocaleSymbols.forLocale(locale).getHalfdayMaxTextLength();
",0,0,0,2,4,1,8,0,0,8,67,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,49,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,60,"        return iChronology.getWeekyear(instant);
",0,0,0,1,2,1,6,0,0,6,40,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,72,"        if (years == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,73,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,75,"        return set(instant, get(instant) + years);
",2,1,0,2,4,1,8,0,0,11,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,79,"        return add(instant, FieldUtils.safeToInt(value));
",0,0,0,2,4,1,10,0,0,10,49,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,92,"        return add(instant, years);
",0,0,0,1,2,1,6,0,0,6,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,96,"        if (minuendInstant < subtrahendInstant) {
",4,1,0,1,3,0,0,0,0,5,41,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,97,"            return -getDifference(subtrahendInstant, minuendInstant);
",0,0,0,1,2,1,6,0,0,7,57,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,100,"        int minuendWeekyear = get(minuendInstant);
",2,0,0,1,2,0,4,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,101,"        int subtrahendWeekyear = get(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,103,"        long minuendRem = remainder(minuendInstant);
",2,0,0,1,2,0,4,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,104,"        long subtrahendRem = remainder(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,50,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,107,"        if (subtrahendRem >= WEEK_53 && iChronology.getWeeksInYear(minuendWeekyear) <= 52) {
",4,3,0,2,5,0,6,0,0,13,84,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,108,"            subtrahendRem -= DateTimeConstants.MILLIS_PER_WEEK;
",6,0,0,0,0,0,0,0,0,7,51,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,111,"        int difference = minuendWeekyear - subtrahendWeekyear;
",6,1,0,0,0,0,0,0,0,7,54,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,112,"        if (minuendRem < subtrahendRem) {
",4,1,0,1,3,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,113,"            difference--;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,115,"        return difference;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,128,"        FieldUtils.verifyValueBounds(this, Math.abs(year),
",0,0,0,1,3,0,10,0,0,10,50,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,133,"        int thisWeekyear = get( instant );
",2,0,0,1,2,0,4,0,0,6,34,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,134,"        if ( thisWeekyear == year ) {
",4,1,0,1,3,0,0,0,0,5,29,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,135,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,140,"        int thisDow = iChronology.getDayOfWeek(instant);
",2,0,0,1,2,0,6,0,0,8,48,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,144,"        int weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );
",2,0,0,1,2,0,6,0,0,8,65,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,145,"        int weeksInToYear = iChronology.getWeeksInYear( year );
",2,0,0,1,2,0,6,0,0,8,55,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,146,"        int maxOutWeeks = (weeksInToYear < weeksInFromYear) ?
",6,1,0,1,2,0,0,0,0,7,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,154,"        int setToWeek = iChronology.getWeekOfWeekyear(instant);
",2,0,0,1,2,0,6,0,0,8,55,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,155,"        if ( setToWeek > maxOutWeeks ) {
",4,1,0,1,3,0,0,0,0,5,32,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,156,"            setToWeek = maxOutWeeks;
",4,0,0,0,0,0,0,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,162,"        long workInstant = instant; // Get a copy
",4,0,0,0,0,0,0,0,0,4,41,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,168,"        workInstant = iChronology.setYear( workInstant, year );
",2,0,0,1,2,0,8,0,0,11,55,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,173,"        int workWoyYear = get( workInstant );
",2,0,0,1,2,0,4,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,179,"        if ( workWoyYear < year ) {
",4,1,0,1,3,0,0,0,0,5,27,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,180,"            workInstant += DateTimeConstants.MILLIS_PER_WEEK;
",6,0,0,0,0,0,0,0,0,7,49,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,181,"        } else if ( workWoyYear > year ) {
",4,1,0,1,4,0,0,0,0,5,34,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,182,"            workInstant -= DateTimeConstants.MILLIS_PER_WEEK;
",6,0,0,0,0,0,0,0,0,7,49,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,189,"        int currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);
",2,0,0,1,2,0,6,0,0,8,64,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,191,"        workInstant = workInstant + (setToWeek - currentWoyWeek)
",8,2,0,1,2,0,0,0,0,11,56,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,200,"        workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );
",2,0,0,2,4,0,10,0,0,13,66,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,204,"        return workInstant;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,212,"        return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) > 52;
",0,1,0,2,4,1,10,0,0,11,73,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,216,"        return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) - 52;
",0,1,0,2,4,1,10,0,0,11,73,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,224,"        return iChronology.getMinYear();
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,228,"        return iChronology.getMaxYear();
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,234,"        instant = iChronology.weekOfWeekyear().roundFloor(instant);
",2,0,0,2,4,0,8,0,0,11,59,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,235,"        int wow = iChronology.getWeekOfWeekyear(instant);
",2,0,0,1,2,0,6,0,0,8,49,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,236,"        if (wow > 1) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,237,"            instant -= ((long) DateTimeConstants.MILLIS_PER_WEEK) * (wow - 1);
",8,2,0,3,6,0,0,0,0,11,66,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,239,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,243,"        return instant - roundFloor(instant);
",2,1,0,1,2,1,4,0,0,7,37,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,20,250,"        return iChronology.weekyear();
",0,0,0,1,2,1,4,0,0,4,30,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,20,56,"        return iChronology.getDayOfWeek(instant);
",0,0,0,1,2,1,6,0,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,20,67,"        return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToText(fieldValue);
",0,0,0,2,4,1,10,0,0,10,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,20,78,"        return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToShortText(fieldValue);
",0,0,0,2,4,1,10,0,0,10,79,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,20,90,"        return GJLocaleSymbols.forLocale(locale).dayOfWeekTextToValue(text);
",0,0,0,2,4,1,10,0,0,10,68,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,20,103,"        return DateTimeConstants.MONDAY;
",4,0,0,0,0,1,0,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,20,112,"        return DateTimeConstants.SUNDAY;
",4,0,0,0,0,1,0,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,20,122,"        return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxTextLength();
",0,0,0,2,4,1,8,0,0,8,69,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,20,132,"        return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxShortTextLength();
",0,0,0,2,4,1,8,0,0,8,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,20,139,"        return iChronology.dayOfWeek();
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,20,45,"        int year = getWrappedField().get(instant);
",2,0,0,2,4,0,6,0,0,8,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,20,46,"        if (year <= 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,20,47,"            year = 1 - year;
",4,1,0,0,0,0,0,0,0,6,16,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,20,49,"        return year;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,20,53,"        return getWrappedField().add(instant, years);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,20,57,"        return getWrappedField().add(instant, years);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,20,61,"        return getWrappedField().addWrapField(instant, years);
",0,0,0,2,4,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,20,65,"        return getWrappedField().addWrapField(instant, fieldIndex, values, years);
",0,0,0,2,4,1,12,0,0,12,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,20,69,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,20,73,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,80,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,20,85,"        FieldUtils.verifyValueBounds(this, year, 1, getMaximumValue());
",0,0,0,2,4,0,8,0,0,8,63,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,20,86,"        if (iChronology.getYear(instant) <= 0) {
",0,1,0,2,5,0,6,0,0,7,40,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,20,87,"            year = 1 - year;
",4,1,0,0,0,0,0,0,0,6,16,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,20,89,"        return super.set(instant, year);
",6,0,0,1,2,1,0,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,20,101,"        return getWrappedField().roundFloor(instant);
",0,0,0,2,4,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,20,105,"        return getWrappedField().roundCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,20,109,"        return getWrappedField().remainder(instant);
",0,0,0,2,4,1,6,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,20,116,"        return iChronology.yearOfEra();
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,20,56,"            throw new IllegalArgumentException(""The field must not be null"");
",0,0,0,1,2,0,0,2,0,4,65,6,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,20,59,"            throw new IllegalArgumentException(""The field must be supported"");
",0,0,0,1,2,0,0,2,0,3,66,7,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,20,74,"        return iField.isLenient();
",0,0,0,1,2,1,4,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,20,78,"        return iField.get(instant);
",0,0,0,1,2,1,6,0,0,6,27,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,20,82,"        return iField.set(instant, value);
",0,0,0,1,2,1,8,0,0,8,34,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,20,94,"        return iField.getMinimumValue();
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,20,98,"        return iField.getMaximumValue();
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,20,102,"        return iField.roundFloor(instant);
",0,0,0,1,2,1,6,0,0,6,34,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,57,"            throw new IllegalArgumentException(""Must supply a chronology"");
",0,0,0,1,2,0,0,2,0,3,63,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,61,"            throw new IllegalArgumentException(""UTC chronology must not be null"");
",0,0,0,1,2,0,0,2,0,4,70,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,64,"            throw new IllegalArgumentException(""DateTimeZone must not be null"");
",0,0,0,1,2,0,0,2,0,4,68,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,90,"        return getBase();
",0,0,0,1,2,1,2,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,94,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,95,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,97,"        if (zone == getParam()) {
",2,1,0,2,5,0,2,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,98,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,100,"        if (zone == DateTimeZone.UTC) {
",6,1,0,1,3,0,0,0,0,7,31,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,101,"            return getBase();
",0,0,0,1,2,1,2,0,0,2,17,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,103,"        return new ZonedChronology(getBase(), zone);
",2,0,0,2,4,1,2,2,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,110,"        return localToUTC(getBase().getDateTimeMillis
",0,0,0,1,3,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,129,"        return localToUTC(getBase().getDateTimeMillis
",0,0,0,1,3,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,143,"            throw new IllegalArgumentException
",0,0,0,0,0,0,0,2,0,2,34,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,213,"            return field;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,216,"            return (DateTimeField)converted.get(field);
",0,0,0,2,4,1,6,2,0,8,43,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,237,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,238,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,240,"        if (obj instanceof ZonedChronology == false) {
",2,1,0,1,3,0,0,2,0,6,46,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,241,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,243,"        ZonedChronology chrono = (ZonedChronology) obj;
",4,0,0,1,2,0,0,4,0,8,47,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,244,"        return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,256,"        return 326565 + getZone().hashCode() * 11 + getBase().hashCode() * 7;
",0,4,0,4,8,1,8,0,0,12,69,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,265,"        return ""ZonedChronology["" + getBase() + "", "" + getZone().getID() + ']';
",0,1,0,4,8,1,6,0,0,10,71,4,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,90,"        return getInstance(DateTimeZone.getDefault(), 4);
",0,0,0,2,4,1,6,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,112,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,123,"            } catch (ArrayIndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,44,8,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,124,"                throw new IllegalArgumentException
",0,0,0,0,0,0,0,2,0,2,34,11,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,131,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);
",6,0,0,1,2,0,4,0,0,11,59,10,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,132,"                    chrono = new GregorianChronology
",2,0,0,0,0,0,0,2,0,5,32,10,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,155,"        Chronology base = getBase();
",2,0,0,1,2,0,2,2,0,6,28,4,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,156,"        int minDays = getMinimumDaysInFirstWeek();
",2,0,0,1,2,0,2,0,0,4,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,157,"        minDays = (minDays == 0 ? 4 : minDays);  // handle rename of BaseGJChronology
",6,1,0,1,2,0,0,0,0,8,77,4,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,158,"        return base == null ?
",2,1,0,0,0,1,0,0,0,3,21,5,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,171,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,181,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,182,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,184,"        if (zone == getZone()) {
",2,1,0,2,5,0,2,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,185,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,187,"        return getInstance(zone);
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,209,"            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;
",8,7,0,4,8,0,0,0,0,16,71,6,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,20,213,"                leapYears--;
",2,0,0,0,0,0,0,0,0,3,12,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,121,"            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];
",2,1,1,1,2,1,0,0,0,5,43,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,129,"        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];
",2,1,1,1,2,1,0,0,0,5,43,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,134,"        return (value > 28 ? getDaysInMonthMax(instant) : 28);
",2,1,0,2,4,1,4,0,0,7,54,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,140,"            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];
",2,1,1,1,2,1,0,0,0,5,50,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,148,"        int minuendYear = getYear(minuendInstant);
",2,0,0,1,2,0,4,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,149,"        int subtrahendYear = getYear(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,152,"        long minuendRem = minuendInstant - getYearMillis(minuendYear);
",4,1,0,1,2,0,4,0,0,9,62,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,153,"        long subtrahendRem = subtrahendInstant - getYearMillis(subtrahendYear);
",4,1,0,1,2,0,4,0,0,9,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,156,"        if (subtrahendRem >= FEB_29) {
",4,1,0,1,3,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,157,"            if (isLeapYear(subtrahendYear)) {
",0,0,0,2,5,0,4,0,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,158,"                if (!isLeapYear(minuendYear)) {
",0,0,0,2,5,0,4,0,0,5,31,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,159,"                    subtrahendRem -= DateTimeConstants.MILLIS_PER_DAY;
",6,0,0,0,0,0,0,0,0,7,50,10,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,161,"            } else if (minuendRem >= FEB_29 && isLeapYear(minuendYear)) {
",4,2,0,2,6,0,4,0,0,10,61,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,162,"                minuendRem -= DateTimeConstants.MILLIS_PER_DAY;
",6,0,0,0,0,0,0,0,0,7,47,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,166,"        int difference = minuendYear - subtrahendYear;
",6,1,0,0,0,0,0,0,0,7,46,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,167,"        if (minuendRem < subtrahendRem) {
",4,1,0,1,3,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,168,"            difference--;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,170,"        return difference;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,175,"        int thisYear = getYear(instant);
",2,0,0,1,2,0,4,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,176,"        int dayOfYear = getDayOfYear(instant, thisYear);
",2,0,0,1,2,0,6,0,0,8,48,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,177,"        int millisOfDay = getMillisOfDay(instant);
",2,0,0,1,2,0,4,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,179,"        if (dayOfYear > (31 + 28)) { // after Feb 28
",2,2,0,2,5,0,0,0,0,4,44,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,180,"            if (isLeapYear(thisYear)) {
",0,0,0,2,5,0,4,0,0,4,27,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,182,"                if (!isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,5,24,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,184,"                    dayOfYear--;
",2,0,0,0,0,0,0,0,0,3,12,10,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,188,"                if (isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,4,23,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,190,"                    dayOfYear++;
",2,0,0,0,0,0,0,0,0,3,12,10,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,195,"        instant = getYearMonthDayMillis(year, 1, dayOfYear);
",2,0,0,1,2,0,6,0,0,9,52,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,196,"        instant += millisOfDay;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,20,198,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,59,"            throw new IllegalArgumentException(""The divisor must be at least 2"");
",0,0,0,1,2,0,0,2,0,3,69,7,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,64,"            iDurationField = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,90,"        super(remainderField.getWrappedField(), type);
",2,0,0,2,4,0,4,0,0,6,46,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,91,"        int divisor = iDivisor = remainderField.iDivisor;
",8,0,0,0,0,0,0,0,0,9,49,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,92,"        iDurationField = remainderField.iRangeField;
",6,0,0,0,0,0,0,0,0,7,44,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,94,"        DateTimeField field = getWrappedField();
",2,0,0,1,2,0,2,2,0,6,40,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,95,"        int i = field.getMinimumValue();
",2,0,0,1,2,0,4,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,96,"        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);
",12,5,0,3,6,0,0,0,0,17,59,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,98,"        int j = field.getMaximumValue();
",2,0,0,1,2,0,4,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,99,"        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);
",12,5,0,3,6,0,0,0,0,17,59,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,101,"        iMin = min;
",4,0,0,0,0,0,0,0,0,5,11,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,102,"        iMax = max;
",4,0,0,0,0,0,0,0,0,5,11,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,103,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,112,"        int value = getWrappedField().get(instant);
",2,0,0,2,4,0,6,0,0,8,43,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,113,"        if (value >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,114,"            return value / iDivisor;
",4,1,0,0,0,1,0,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,116,"            return ((value + 1) / iDivisor) - 1;
",4,3,0,2,4,1,0,0,0,7,36,6,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,129,"        return getWrappedField().add(instant, amount * iDivisor);
",4,1,0,2,4,1,6,0,0,11,57,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,141,"        return getWrappedField().add(instant, amount * iDivisor);
",4,1,0,2,4,1,6,0,0,11,57,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,153,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));
",0,0,0,3,6,1,18,0,0,18,82,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,157,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iDivisor;
",2,1,0,2,4,1,8,0,0,11,85,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,161,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iDivisor;
",2,1,0,2,4,1,8,0,0,11,91,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,173,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);
",0,0,0,1,2,0,10,0,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,174,"        int remainder = getRemainder(getWrappedField().get(instant));
",2,0,0,3,6,0,8,0,0,10,61,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,175,"        return getWrappedField().set(instant, value * iDivisor + remainder);
",6,2,0,2,4,1,6,0,0,14,68,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,191,"        return iMin;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,200,"        return iMax;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,204,"        DateTimeField field = getWrappedField();
",2,0,0,1,2,0,2,2,0,6,40,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,205,"        return field.roundFloor(field.set(instant, get(instant) * iDivisor));
",2,1,0,3,6,1,14,0,0,17,69,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,209,"        return set(instant, get(getWrappedField().remainder(instant)));
",0,0,0,4,8,1,12,0,0,12,63,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,218,"        return iDivisor;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,222,"        if (value >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,223,"            return value % iDivisor;
",4,1,0,0,0,1,0,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,20,225,"            return (iDivisor - 1) + ((value + 1) % iDivisor);
",6,4,0,3,6,1,0,0,0,10,49,6,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,20,55,"            throw new IllegalArgumentException(""The divisor must be at least 2"");
",0,0,0,1,2,0,0,2,0,3,69,7,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,20,60,"            iRangeField = null;
",2,0,0,0,0,0,0,0,0,3,19,6,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,20,100,"        int value = getWrappedField().get(instant);
",2,0,0,2,4,0,6,0,0,8,43,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,20,101,"        if (value >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,20,102,"            return value % iDivisor;
",4,1,0,0,0,1,0,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,20,104,"            return (iDivisor - 1) + ((value + 1) % iDivisor);
",6,4,0,3,6,1,0,0,0,10,49,6,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,20,118,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, 0, iDivisor - 1));
",2,1,0,3,6,1,14,0,0,17,87,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,20,130,"        FieldUtils.verifyValueBounds(this, value, 0, iDivisor - 1);
",2,1,0,1,2,0,6,0,0,9,59,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,20,131,"        int divided = getDivided(getWrappedField().get(instant));
",2,0,0,3,6,0,8,0,0,10,57,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,20,132,"        return getWrappedField().set(instant, divided * iDivisor + value);
",6,2,0,2,4,1,6,0,0,14,66,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,20,162,"        return getWrappedField().roundFloor(instant);
",0,0,0,2,4,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,20,166,"        return getWrappedField().roundCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,20,170,"        return getWrappedField().roundHalfFloor(instant);
",0,0,0,2,4,1,6,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,20,174,"        return getWrappedField().roundHalfCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,20,178,"        return getWrappedField().roundHalfEven(instant);
",0,0,0,2,4,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,20,182,"        return getWrappedField().remainder(instant);
",0,0,0,2,4,1,6,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,20,191,"        return iDivisor;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,20,195,"        if (value >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,20,196,"            return value / iDivisor;
",4,1,0,0,0,1,0,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,20,198,"            return ((value + 1) / iDivisor) - 1;
",4,3,0,2,4,1,0,0,0,7,36,6,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,20,479,"                    eras = f;
",4,0,0,0,0,0,0,0,0,5,9,8,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,20,76,"        return duration / iUnitMillis;  // safe
",4,1,0,0,0,1,0,0,0,5,39,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,20,88,"        return value * iUnitMillis;  // safe
",4,1,0,0,0,1,0,0,0,5,36,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,20,100,"        return FieldUtils.safeMultiply(value, iUnitMillis);
",0,0,0,1,2,1,8,0,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,20,104,"        long addition = value * iUnitMillis;  // safe
",6,1,0,0,0,0,0,0,0,7,45,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,20,105,"        return FieldUtils.safeAdd(instant, addition);
",0,0,0,1,2,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,20,109,"        long addition = FieldUtils.safeMultiply(value, iUnitMillis);
",2,0,0,1,2,0,8,0,0,10,60,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,20,110,"        return FieldUtils.safeAdd(instant, addition);
",0,0,0,1,2,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,20,114,"        long difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);
",2,0,0,1,2,0,8,0,0,10,77,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,20,115,"        return difference / iUnitMillis;
",4,1,0,0,0,1,0,0,0,5,32,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,20,127,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,20,128,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,20,129,"        } else if (obj instanceof PreciseDurationField) {
",2,0,0,1,4,0,0,2,0,4,49,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,20,130,"            PreciseDurationField other = (PreciseDurationField) obj;
",4,0,0,1,2,0,0,4,0,8,56,7,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,20,131,"            return (getType() == other.getType()) && (iUnitMillis == other.iUnitMillis);
",6,3,0,4,8,1,6,0,0,15,76,7,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,20,133,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,20,47,"            throw new IllegalArgumentException(""Wrapped field's minumum value must be zero"");
",0,0,0,1,2,0,0,2,0,3,81,7,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,20,52,"        int value = getWrappedField().get(instant);
",2,0,0,2,4,0,6,0,0,8,43,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,20,53,"        if (value == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,20,54,"            value = getMaximumValue();
",2,0,0,1,2,0,2,0,0,5,26,6,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,20,56,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,20,60,"        return getWrappedField().add(instant, value);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,20,64,"        return getWrappedField().add(instant, value);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,20,68,"        return getWrappedField().addWrapField(instant, value);
",0,0,0,2,4,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,20,72,"        return getWrappedField().addWrapField(instant, fieldIndex, values, valueToAdd);
",0,0,0,2,4,1,12,0,0,12,79,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,20,76,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,74,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,20,80,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,80,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,20,84,"        int max = getMaximumValue();
",2,0,0,1,2,0,2,0,0,4,28,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,20,85,"        FieldUtils.verifyValueBounds(this, value, 1, max);
",0,0,0,1,2,0,8,0,0,8,50,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,20,86,"        if (value == max) {
",4,1,0,1,3,0,0,0,0,5,19,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,20,87,"            value = 0;
",2,0,0,0,0,0,0,0,0,3,10,6,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,20,89,"        return getWrappedField().set(instant, value);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,20,93,"        return getWrappedField().isLeap(instant);
",0,0,0,2,4,1,6,0,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,20,97,"        return getWrappedField().getLeapAmount(instant);
",0,0,0,2,4,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,20,110,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,20,119,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,20,128,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,20,137,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,20,147,"        return getWrappedField().getMaximumValue() + 1;
",0,1,0,2,4,1,4,0,0,5,47,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,20,157,"        return getWrappedField().getMaximumValue(instant) + 1;
",0,1,0,2,4,1,6,0,0,7,54,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,20,167,"        return getWrappedField().getMaximumValue(instant) + 1;
",0,1,0,2,4,1,6,0,0,7,54,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,20,177,"        return getWrappedField().getMaximumValue(instant, values) + 1;
",0,1,0,2,4,1,8,0,0,9,62,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,20,181,"        return getWrappedField().roundFloor(instant);
",0,0,0,2,4,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,20,185,"        return getWrappedField().roundCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,20,189,"        return getWrappedField().roundHalfFloor(instant);
",0,0,0,2,4,1,6,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,20,193,"        return getWrappedField().roundHalfCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,20,197,"        return getWrappedField().roundHalfEven(instant);
",0,0,0,2,4,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,20,201,"        return getWrappedField().remainder(instant);
",0,0,0,2,4,1,6,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,20,50,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,20,58,"        if (years == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,20,59,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,20,61,"        int thisYear = get(instant);
",2,0,0,1,2,0,4,0,0,6,28,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,20,62,"        int newYear = FieldUtils.safeAdd(thisYear, years);
",2,0,0,1,2,0,8,0,0,10,50,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,20,63,"        return set(instant, newYear);
",0,0,0,1,2,1,6,0,0,6,29,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,20,67,"        return add(instant, FieldUtils.safeToInt(years));
",0,0,0,2,4,1,10,0,0,10,49,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,20,71,"        if (years == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,20,72,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,20,75,"        int thisYear = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,20,76,"        int wrappedYear = FieldUtils.getWrappedValue
",2,0,0,0,0,0,4,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,20,78,"        return set(instant, wrappedYear);
",0,0,0,1,2,1,6,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,20,82,"        FieldUtils.verifyValueBounds
",0,0,0,0,0,0,4,0,0,4,28,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,20,84,"        return iChronology.setYear(instant, year);
",0,0,0,1,2,1,8,0,0,8,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,20,88,"        if (minuendInstant < subtrahendInstant) {
",4,1,0,1,3,0,0,0,0,5,41,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,20,89,"            return -iChronology.getYearDifference(subtrahendInstant, minuendInstant);
",0,0,0,1,2,1,8,0,0,9,73,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,20,91,"        return iChronology.getYearDifference(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,72,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,20,99,"        return iChronology.isLeapYear(get(instant));
",0,0,0,2,4,1,8,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,20,103,"        if (iChronology.isLeapYear(get(instant))) {
",0,0,0,3,7,0,8,0,0,8,43,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,20,104,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,20,106,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,20,115,"        return iChronology.getMinYear();
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,20,123,"        return iChronology.getYearMillis(get(instant));
",0,0,0,2,4,1,8,0,0,8,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,20,127,"        int year = get(instant);
",2,0,0,1,2,0,4,0,0,6,24,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,20,128,"        long yearStartMillis = iChronology.getYearMillis(year);
",2,0,0,1,2,0,6,0,0,8,55,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,20,129,"        if (instant != yearStartMillis) {
",4,1,0,1,3,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,20,131,"            instant = iChronology.getYearMillis(year + 1);
",4,1,0,1,2,0,4,0,0,10,46,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,20,133,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,20,137,"        return instant - roundFloor(instant);
",2,1,0,1,2,1,4,0,0,7,37,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,20,144,"        return iChronology.year();
",0,0,0,1,2,1,4,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,20,76,"            throw new IllegalArgumentException(""The offset cannot be zero"");
",0,0,0,1,2,0,0,2,0,3,64,7,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,20,84,"            iMin = minValue;
",4,0,0,0,0,0,0,0,0,5,16,6,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,20,89,"            iMax = maxValue;
",4,0,0,0,0,0,0,0,0,5,16,6,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,20,100,"        return super.get(instant) + iOffset;
",6,1,0,1,2,1,0,0,0,7,36,4,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,20,112,"        instant = super.add(instant, amount);
",8,0,0,1,2,0,0,0,0,9,37,4,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,20,113,"        FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);
",0,0,0,2,4,0,12,0,0,12,61,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,20,114,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,20,126,"        instant = super.add(instant, amount);
",8,0,0,1,2,0,0,0,0,9,37,4,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,20,127,"        FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);
",0,0,0,2,4,0,12,0,0,12,61,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,20,128,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,20,140,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));
",0,0,0,3,6,1,18,0,0,18,82,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,20,152,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);
",0,0,0,1,2,0,10,0,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,20,153,"        return super.set(instant, value - iOffset);
",8,1,0,1,2,1,0,0,0,9,43,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,20,157,"        return getWrappedField().isLeap(instant);
",0,0,0,2,4,1,6,0,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,20,161,"        return getWrappedField().getLeapAmount(instant);
",0,0,0,2,4,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,20,165,"        return getWrappedField().getLeapDurationField();
",0,0,0,2,4,1,4,0,0,4,48,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,20,187,"        return getWrappedField().roundFloor(instant);
",0,0,0,2,4,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,20,191,"        return getWrappedField().roundCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,20,195,"        return getWrappedField().roundHalfFloor(instant);
",0,0,0,2,4,1,6,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,20,199,"        return getWrappedField().roundHalfCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,20,203,"        return getWrappedField().roundHalfEven(instant);
",0,0,0,2,4,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,20,207,"        return getWrappedField().remainder(instant);
",0,0,0,2,4,1,6,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,20,216,"        return iOffset;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,20,51,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,20,60,"        if (iChronology.getYear(instant) <= 0) {
",0,1,0,2,5,0,6,0,0,7,40,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,20,61,"            return DateTimeConstants.BCE;
",4,0,0,0,0,1,0,0,0,4,29,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,20,63,"            return DateTimeConstants.CE;
",4,0,0,0,0,1,0,0,0,4,28,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,20,68,"        return GJLocaleSymbols.forLocale(locale).eraValueToText(fieldValue);
",0,0,0,2,4,1,10,0,0,10,68,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,20,80,"        FieldUtils.verifyValueBounds(this, era, DateTimeConstants.BCE, DateTimeConstants.CE);
",8,0,0,1,2,0,6,0,0,14,85,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,20,82,"        int oldEra = get(instant);
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,20,83,"        if (oldEra != era) {
",4,1,0,1,3,0,0,0,0,5,20,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,20,84,"            int year = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,40,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,20,85,"            return iChronology.setYear(instant, -year);
",2,0,0,1,2,1,6,0,0,9,43,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,20,87,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,20,92,"        return set(instant, GJLocaleSymbols.forLocale(locale).eraTextToValue(text));
",0,0,0,3,6,1,14,0,0,14,76,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,20,96,"        if (get(instant) == DateTimeConstants.CE) {
",4,1,0,2,5,0,4,0,0,9,43,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,20,97,"            return iChronology.setYear(0, 1);
",0,0,0,1,2,1,4,0,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,20,99,"            return Long.MIN_VALUE;
",4,0,0,0,0,1,0,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,20,104,"        if (get(instant) == DateTimeConstants.BCE) {
",4,1,0,2,5,0,4,0,0,9,44,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,20,105,"            return iChronology.setYear(0, 1);
",0,0,0,1,2,1,4,0,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,20,107,"            return Long.MAX_VALUE;
",4,0,0,0,0,1,0,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,20,113,"        return roundFloor(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,20,118,"        return roundFloor(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,20,123,"        return roundFloor(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,20,135,"        return DateTimeConstants.BCE;
",4,0,0,0,0,1,0,0,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,20,139,"        return DateTimeConstants.CE;
",4,0,0,0,0,1,0,0,0,4,28,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,20,143,"        return GJLocaleSymbols.forLocale(locale).getEraMaxTextLength();
",0,0,0,2,4,1,8,0,0,8,63,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,20,150,"        return iChronology.era();
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,20,55,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,20,59,"        return iChronology.getDaysInMonthMax();
",0,0,0,1,2,1,4,0,0,4,39,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,20,63,"        return iChronology.getDaysInMonthMax(instant);
",0,0,0,1,2,1,6,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,20,67,"        if (partial.isSupported(DateTimeFieldType.monthOfYear())) {
",0,0,0,3,7,0,8,0,0,8,59,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,20,68,"            int month = partial.get(DateTimeFieldType.monthOfYear());
",2,0,0,2,4,0,8,0,0,10,57,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,20,69,"            if (partial.isSupported(DateTimeFieldType.year())) {
",0,0,0,3,7,0,8,0,0,8,52,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,20,70,"                int year = partial.get(DateTimeFieldType.year());
",2,0,0,2,4,0,8,0,0,10,49,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,20,71,"                return iChronology.getDaysInYearMonth(year, month);
",0,0,0,1,2,1,8,0,0,8,51,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,20,73,"            return iChronology.getDaysInMonthMax(month);
",0,0,0,1,2,1,6,0,0,6,44,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,20,75,"        return getMaximumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,20,79,"        int size = partial.size();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,20,80,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,20,81,"            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {
",0,1,0,3,7,0,10,0,0,11,65,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,20,82,"                int month = values[i];
",2,0,1,1,2,0,0,0,0,6,22,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,20,83,"                for (int j = 0; j < size; j++) {
",8,1,0,1,3,0,0,0,0,10,32,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,20,84,"                    if (partial.getFieldType(j) == DateTimeFieldType.year()) {
",0,1,0,3,7,0,10,0,0,11,58,10,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,20,85,"                        int year = values[j];
",2,0,1,1,2,0,0,0,0,6,21,13,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,20,86,"                        return iChronology.getDaysInYearMonth(year, month);
",0,0,0,1,2,1,8,0,0,8,51,13,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,20,89,"                return iChronology.getDaysInMonthMax(month);
",0,0,0,1,2,1,6,0,0,6,44,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,20,92,"        return getMaximumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,20,96,"        return iChronology.getDaysInMonthMaxForSet(instant, value);
",0,0,0,1,2,1,8,0,0,8,59,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,20,103,"        return iChronology.dayOfMonth();
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,20,52,"        return iChronology.getDayOfYear(instant);
",0,0,0,1,2,1,6,0,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,20,60,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,20,64,"        return iChronology.getDaysInYearMax();
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,20,68,"        int year = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,20,69,"        return iChronology.getDaysInYear(year);
",0,0,0,1,2,1,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,20,73,"        if (partial.isSupported(DateTimeFieldType.year())) {
",0,0,0,3,7,0,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,20,74,"            int year = partial.get(DateTimeFieldType.year());
",2,0,0,2,4,0,8,0,0,10,49,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,20,75,"            return iChronology.getDaysInYear(year);
",0,0,0,1,2,1,6,0,0,6,39,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,20,77,"        return iChronology.getDaysInYearMax();
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,20,81,"        int size = partial.size();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,20,82,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,20,83,"            if (partial.getFieldType(i) == DateTimeFieldType.year()) {
",0,1,0,3,7,0,10,0,0,11,58,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,20,84,"                int year = values[i];
",2,0,1,1,2,0,0,0,0,6,21,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,20,85,"                return iChronology.getDaysInYear(year);
",0,0,0,1,2,1,6,0,0,6,39,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,20,88,"        return iChronology.getDaysInYearMax();
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,20,92,"        int maxLessOne = iChronology.getDaysInYearMax() - 1;
",2,1,0,1,2,0,4,0,0,7,52,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,20,93,"        return (value > maxLessOne || value < 1) ? getMaximumValue(instant) : maxLessOne;
",8,3,0,2,4,1,4,0,0,15,81,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,20,100,"        return iChronology.dayOfYear();
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,20,54,"        return iChronology.getWeekOfWeekyear(instant);
",0,0,0,1,2,1,6,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,20,65,"        return super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY)
",8,2,0,1,2,1,0,0,0,10,71,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,20,70,"        return super.roundCeiling(instant + 3 * DateTimeConstants.MILLIS_PER_DAY)
",8,2,0,1,2,1,0,0,0,10,73,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,20,75,"        return super.remainder(instant + 3 * DateTimeConstants.MILLIS_PER_DAY);
",8,2,0,1,2,1,0,0,0,10,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,20,79,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,20,83,"        return 53;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,20,87,"        int weekyear = iChronology.getWeekyear(instant);
",2,0,0,1,2,0,6,0,0,8,48,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,20,88,"        return iChronology.getWeeksInYear(weekyear);
",0,0,0,1,2,1,6,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,20,92,"        if (partial.isSupported(DateTimeFieldType.weekyear())) {
",0,0,0,3,7,0,8,0,0,8,56,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,20,93,"            int weekyear = partial.get(DateTimeFieldType.weekyear());
",2,0,0,2,4,0,8,0,0,10,57,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,20,94,"            return iChronology.getWeeksInYear(weekyear);
",0,0,0,1,2,1,6,0,0,6,44,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,20,96,"        return 53;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,20,100,"        int size = partial.size();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,20,101,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,20,102,"            if (partial.getFieldType(i) == DateTimeFieldType.weekyear()) {
",0,1,0,3,7,0,10,0,0,11,62,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,20,103,"                int weekyear = values[i];
",2,0,1,1,2,0,0,0,0,6,25,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,20,104,"                return iChronology.getWeeksInYear(weekyear);
",0,0,0,1,2,1,6,0,0,6,44,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,20,107,"        return 53;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,20,111,"        return value > 52 ? getMaximumValue(instant) : 52;
",2,1,0,1,2,1,4,0,0,7,50,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,20,118,"        return iChronology.weekOfWeekyear();
",0,0,0,1,2,1,4,0,0,4,36,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,391,"                throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,9,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,402,"            return iField.isLenient();
",0,0,0,1,2,1,4,0,0,4,26,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,406,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,407,"            return iField.get(localInstant);
",0,0,0,1,2,1,6,0,0,6,32,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,411,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,412,"            return iField.getAsText(localInstant, locale);
",0,0,0,1,2,1,8,0,0,8,46,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,416,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,417,"            return iField.getAsShortText(localInstant, locale);
",0,0,0,1,2,1,8,0,0,8,51,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,421,"            return iField.getAsText(fieldValue, locale);
",0,0,0,1,2,1,8,0,0,8,44,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,425,"            return iField.getAsShortText(fieldValue, locale);
",0,0,0,1,2,1,8,0,0,8,49,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,429,"            if (iTimeField) {
",2,0,0,1,3,0,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,430,"                int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,431,"                long localInstant = iField.add(instant + offset, value);
",6,1,0,1,2,0,6,0,0,13,56,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,432,"                return localInstant - offset;
",4,1,0,0,0,1,0,0,0,5,29,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,434,"               long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,435,"               localInstant = iField.add(localInstant, value);
",2,0,0,1,2,0,8,0,0,11,47,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,436,"               return iZone.convertLocalToUTC(localInstant, false, instant);
",0,0,0,1,2,1,8,0,0,9,61,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,441,"            if (iTimeField) {
",2,0,0,1,3,0,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,442,"                int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,443,"                long localInstant = iField.add(instant + offset, value);
",6,1,0,1,2,0,6,0,0,13,56,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,444,"                return localInstant - offset;
",4,1,0,0,0,1,0,0,0,5,29,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,446,"               long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,447,"               localInstant = iField.add(localInstant, value);
",2,0,0,1,2,0,8,0,0,11,47,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,448,"               return iZone.convertLocalToUTC(localInstant, false, instant);
",0,0,0,1,2,1,8,0,0,9,61,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,453,"            if (iTimeField) {
",2,0,0,1,3,0,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,454,"                int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,455,"                long localInstant = iField.addWrapField(instant + offset, value);
",6,1,0,1,2,0,6,0,0,13,65,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,456,"                return localInstant - offset;
",4,1,0,0,0,1,0,0,0,5,29,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,458,"                long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,459,"                localInstant = iField.addWrapField(localInstant, value);
",2,0,0,1,2,0,8,0,0,11,56,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,460,"                return iZone.convertLocalToUTC(localInstant, false, instant);
",0,0,0,1,2,1,8,0,0,9,61,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,465,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,466,"            localInstant = iField.set(localInstant, value);
",2,0,0,1,2,0,8,0,0,11,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,467,"            long result = iZone.convertLocalToUTC(localInstant, false, instant);
",2,0,0,1,2,0,8,0,0,11,68,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,468,"            if (get(result) != value) {
",2,1,0,2,5,0,4,0,0,7,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,469,"                throw new IllegalFieldValueException(iField.getType(), Integer.valueOf(value),
",0,0,0,2,5,0,10,2,0,12,78,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,474,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,479,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,480,"            localInstant = iField.set(localInstant, text, locale);
",2,0,0,1,2,0,10,0,0,13,54,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,481,"            return iZone.convertLocalToUTC(localInstant, false, instant);
",0,0,0,1,2,1,8,0,0,9,61,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,485,"            int offset = getOffsetToAdd(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,486,"            return iField.getDifference
",0,0,0,0,0,1,4,0,0,4,27,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,492,"            int offset = getOffsetToAdd(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,493,"            return iField.getDifferenceAsLong
",0,0,0,0,0,1,4,0,0,4,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,499,"            return iDurationField;
",2,0,0,0,0,1,0,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,503,"            return iRangeDurationField;
",2,0,0,0,0,1,0,0,0,2,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,507,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,508,"            return iField.isLeap(localInstant);
",0,0,0,1,2,1,6,0,0,6,35,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,512,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,513,"            return iField.getLeapAmount(localInstant);
",0,0,0,1,2,1,6,0,0,6,42,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,517,"            return iLeapDurationField;
",2,0,0,0,0,1,0,0,0,2,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,521,"            if (iTimeField) {
",2,0,0,1,3,0,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,522,"                int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,523,"                instant = iField.roundFloor(instant + offset);
",6,1,0,1,2,0,4,0,0,12,46,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,524,"                return instant - offset;
",4,1,0,0,0,1,0,0,0,5,24,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,526,"                long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,527,"                localInstant = iField.roundFloor(localInstant);
",2,0,0,1,2,0,6,0,0,9,47,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,528,"                return iZone.convertLocalToUTC(localInstant, false, instant);
",0,0,0,1,2,1,8,0,0,9,61,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,533,"            if (iTimeField) {
",2,0,0,1,3,0,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,534,"                int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,535,"                instant = iField.roundCeiling(instant + offset);
",6,1,0,1,2,0,4,0,0,12,48,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,536,"                return instant - offset;
",4,1,0,0,0,1,0,0,0,5,24,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,538,"                long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,539,"                localInstant = iField.roundCeiling(localInstant);
",2,0,0,1,2,0,6,0,0,9,49,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,540,"                return iZone.convertLocalToUTC(localInstant, false, instant);
",0,0,0,1,2,1,8,0,0,9,61,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,545,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,546,"            return iField.remainder(localInstant);
",0,0,0,1,2,1,6,0,0,6,38,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,550,"            return iField.getMinimumValue();
",0,0,0,1,2,1,4,0,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,554,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,555,"            return iField.getMinimumValue(localInstant);
",0,0,0,1,2,1,6,0,0,6,44,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,559,"            return iField.getMinimumValue(instant);
",0,0,0,1,2,1,6,0,0,6,39,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,563,"            return iField.getMinimumValue(instant, values);
",0,0,0,1,2,1,8,0,0,8,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,567,"            return iField.getMaximumValue();
",0,0,0,1,2,1,4,0,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,571,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,572,"            return iField.getMaximumValue(localInstant);
",0,0,0,1,2,1,6,0,0,6,44,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,576,"            return iField.getMaximumValue(instant);
",0,0,0,1,2,1,6,0,0,6,39,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,580,"            return iField.getMaximumValue(instant, values);
",0,0,0,1,2,1,8,0,0,8,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,584,"            return iField.getMaximumTextLength(locale);
",0,0,0,1,2,1,6,0,0,6,43,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,588,"            return iField.getMaximumShortTextLength(locale);
",0,0,0,1,2,1,6,0,0,6,48,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,592,"            int offset = this.iZone.getOffset(instant);
",4,0,0,1,2,0,4,0,0,8,43,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,593,"            long sum = instant + offset;
",6,1,0,0,0,0,0,0,0,7,28,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,595,"            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {
",8,5,0,3,7,0,0,0,0,13,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,596,"                throw new ArithmeticException(""Adding time zone offset caused overflow"");
",0,0,0,1,2,0,0,2,0,3,73,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,598,"            return offset;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,20,50,"        int year = getWrappedField().get(instant);
",2,0,0,2,4,0,6,0,0,8,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,20,51,"        return year < 0 ? -year : year;
",6,1,0,0,0,1,0,0,0,8,31,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,20,55,"        return getWrappedField().add(instant, years);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,20,59,"        return getWrappedField().add(instant, years);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,20,63,"        return getWrappedField().addWrapField(instant, years);
",0,0,0,2,4,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,20,67,"        return getWrappedField().addWrapField(instant, fieldIndex, values, years);
",0,0,0,2,4,1,12,0,0,12,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,20,71,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,20,75,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,80,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,20,79,"        FieldUtils.verifyValueBounds(this, year, 0, getMaximumValue());
",0,0,0,2,4,0,8,0,0,8,63,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,20,80,"        if (getWrappedField().get(instant) < 0) {
",0,1,0,3,7,0,6,0,0,7,41,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,20,81,"            year = -year;
",4,0,0,0,0,0,0,0,0,6,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,20,83,"        return super.set(instant, year);
",6,0,0,1,2,1,0,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,20,95,"        return getWrappedField().roundFloor(instant);
",0,0,0,2,4,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,20,99,"        return getWrappedField().roundCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,20,103,"        return getWrappedField().remainder(instant);
",0,0,0,2,4,1,6,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,20,110,"        return INSTANCE;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,286,"                throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,9,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,294,"            return iTimeField ? iField.isPrecise() : iField.isPrecise() && this.iZone.isFixed();
",4,1,0,3,6,1,10,0,0,15,84,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,302,"            return iField.getValue(duration, addOffset(instant));
",0,0,0,2,4,1,10,0,0,10,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,306,"            return iField.getValueAsLong(duration, addOffset(instant));
",0,0,0,2,4,1,10,0,0,10,59,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,310,"            return iField.getMillis(value, addOffset(instant));
",0,0,0,2,4,1,10,0,0,10,51,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,314,"            return iField.getMillis(value, addOffset(instant));
",0,0,0,2,4,1,10,0,0,10,51,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,318,"            int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,319,"            instant = iField.add(instant + offset, value);
",6,1,0,1,2,0,6,0,0,14,46,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,320,"            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));
",6,1,0,2,4,1,4,0,0,11,79,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,324,"            int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,325,"            instant = iField.add(instant + offset, value);
",6,1,0,1,2,0,6,0,0,14,46,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,326,"            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));
",6,1,0,2,4,1,4,0,0,11,79,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,330,"            int offset = getOffsetToAdd(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,331,"            return iField.getDifference
",0,0,0,0,0,1,4,0,0,4,27,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,337,"            int offset = getOffsetToAdd(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,338,"            return iField.getDifferenceAsLong
",0,0,0,0,0,1,4,0,0,4,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,344,"            int offset = this.iZone.getOffset(instant);
",4,0,0,1,2,0,4,0,0,8,43,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,345,"            long sum = instant + offset;
",6,1,0,0,0,0,0,0,0,7,28,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,347,"            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {
",8,5,0,3,7,0,0,0,0,13,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,348,"                throw new ArithmeticException(""Adding time zone offset caused overflow"");
",0,0,0,1,2,0,0,2,0,3,73,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,350,"            return offset;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,354,"            int offset = this.iZone.getOffsetFromLocal(instant);
",4,0,0,1,2,0,4,0,0,8,52,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,355,"            long diff = instant - offset;
",6,1,0,0,0,0,0,0,0,7,29,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,357,"            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {
",8,5,0,3,7,0,0,0,0,13,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,358,"                throw new ArithmeticException(""Subtracting time zone offset caused overflow"");
",0,0,0,1,2,0,0,2,0,3,78,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,360,"            return offset;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,20,364,"            return iZone.convertUTCToLocal(instant);
",0,0,0,1,2,1,6,0,0,6,40,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,20,399,"            return System.currentTimeMillis();
",0,0,0,1,2,1,4,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,20,49,"            throw new IllegalArgumentException(""The scalar must not be 0 or 1"");
",0,0,0,1,2,0,0,2,0,3,68,7,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,20,55,"        return getWrappedField().getValue(duration) / iScalar;
",2,1,0,2,4,1,6,0,0,9,54,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,20,59,"        return getWrappedField().getValueAsLong(duration) / iScalar;
",2,1,0,2,4,1,6,0,0,9,60,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,20,63,"        return getWrappedField().getValue(duration, instant) / iScalar;
",2,1,0,2,4,1,8,0,0,11,63,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,20,67,"        return getWrappedField().getValueAsLong(duration, instant) / iScalar;
",2,1,0,2,4,1,8,0,0,11,69,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,20,71,"        long scaled = ((long) value) * ((long) iScalar);
",6,1,0,4,8,0,0,0,0,7,48,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,20,72,"        return getWrappedField().getMillis(scaled);
",0,0,0,2,4,1,6,0,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,20,76,"        long scaled = FieldUtils.safeMultiply(value, iScalar);
",2,0,0,1,2,0,8,0,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,20,77,"        return getWrappedField().getMillis(scaled);
",0,0,0,2,4,1,6,0,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,20,81,"        long scaled = ((long) value) * ((long) iScalar);
",6,1,0,4,8,0,0,0,0,7,48,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,20,82,"        return getWrappedField().getMillis(scaled, instant);
",0,0,0,2,4,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,20,86,"        long scaled = FieldUtils.safeMultiply(value, iScalar);
",2,0,0,1,2,0,8,0,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,20,87,"        return getWrappedField().getMillis(scaled, instant);
",0,0,0,2,4,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,20,91,"        long scaled = ((long) value) * ((long) iScalar);
",6,1,0,4,8,0,0,0,0,7,48,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,20,92,"        return getWrappedField().add(instant, scaled);
",0,0,0,2,4,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,20,96,"        long scaled = FieldUtils.safeMultiply(value, iScalar);
",2,0,0,1,2,0,8,0,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,20,97,"        return getWrappedField().add(instant, scaled);
",0,0,0,2,4,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,20,101,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iScalar;
",2,1,0,2,4,1,8,0,0,11,84,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,20,105,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iScalar;
",2,1,0,2,4,1,8,0,0,11,90,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,20,119,"        return iScalar;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,20,130,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,20,131,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,20,132,"        } else if (obj instanceof ScaledDurationField) {
",2,0,0,1,4,0,0,2,0,4,48,6,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,20,133,"            ScaledDurationField other = (ScaledDurationField) obj;
",4,0,0,1,2,0,0,4,0,8,54,7,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,20,134,"            return (getWrappedField().equals(other.getWrappedField())) &&
",0,1,0,4,8,1,8,0,0,9,61,7,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,20,138,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,20,54,"            throw new IllegalArgumentException(""The field must not be null"");
",0,0,0,1,2,0,0,2,0,4,65,6,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,20,57,"            throw new IllegalArgumentException(""The field must be supported"");
",0,0,0,1,2,0,0,2,0,3,66,7,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,20,73,"        return iField.isPrecise();
",0,0,0,1,2,1,4,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,20,77,"        return iField.getValueAsLong(duration, instant);
",0,0,0,1,2,1,8,0,0,8,48,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,20,81,"        return iField.getMillis(value, instant);
",0,0,0,1,2,1,8,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,20,85,"        return iField.getMillis(value, instant);
",0,0,0,1,2,1,8,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,20,89,"        return iField.add(instant, value);
",0,0,0,1,2,1,8,0,0,8,34,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,20,93,"        return iField.add(instant, value);
",0,0,0,1,2,1,8,0,0,8,34,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,20,97,"        return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,69,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,20,101,"        return iField.getUnitMillis();
",0,0,0,1,2,1,4,0,0,4,30,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,36,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,37,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,49,"        if (value == Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,50,"            throw new ArithmeticException(""Integer.MIN_VALUE cannot be negated"");
",0,0,0,1,2,0,0,2,0,3,69,7,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,52,"        return -value;
",2,0,0,0,0,1,0,0,0,3,14,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,64,"        int sum = val1 + val2;
",6,1,0,0,0,0,0,0,0,7,22,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,66,"        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {
",8,5,0,3,7,0,0,0,0,13,45,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,67,"            throw new ArithmeticException
",0,0,0,0,0,0,0,2,0,2,29,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,70,"        return sum;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,82,"        long sum = val1 + val2;
",6,1,0,0,0,0,0,0,0,7,23,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,84,"        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {
",8,5,0,3,7,0,0,0,0,13,45,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,85,"            throw new ArithmeticException
",0,0,0,0,0,0,0,2,0,2,29,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,88,"        return sum;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,100,"        long diff = val1 - val2;
",6,1,0,0,0,0,0,0,0,7,24,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,102,"        if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {
",8,5,0,3,7,0,0,0,0,13,45,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,103,"            throw new ArithmeticException
",0,0,0,0,0,0,0,2,0,2,29,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,106,"        return diff;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,119,"        long total = (long) val1 * (long) val2;
",6,1,0,2,4,0,0,0,0,7,39,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,120,"        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {
",12,3,0,1,3,0,0,0,0,15,61,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,121,"            throw new ArithmeticException
",0,0,0,0,0,0,0,2,0,2,29,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,124,"        return (int) total;
",2,0,0,1,2,1,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,137,"        switch (scalar) {
",2,0,0,1,3,0,0,0,0,2,17,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,139,"            return -val1;
",2,0,0,0,0,1,0,0,0,3,13,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,141,"            return 0L;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,143,"            return val1;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,145,"        long total = val1 * scalar;
",6,1,0,0,0,0,0,0,0,7,27,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,146,"        if (total / scalar != val1) {
",6,2,0,1,3,0,0,0,0,8,29,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,147,"            throw new ArithmeticException
",0,0,0,0,0,0,0,2,0,2,29,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,150,"        return total;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,162,"        if (val2 == 1) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,163,"            return val1;
",2,0,0,0,0,1,0,0,0,2,12,6,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,165,"        if (val2 == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,166,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,168,"        long total = val1 * val2;
",6,1,0,0,0,0,0,0,0,7,25,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,169,"        if (total / val2 != val1) {
",6,2,0,1,3,0,0,0,0,8,27,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,170,"            throw new ArithmeticException
",0,0,0,0,0,0,0,2,0,2,29,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,173,"        return total;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,184,"        if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {
",12,3,0,1,3,0,0,0,0,15,63,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,185,"            return (int) value;
",2,0,0,1,2,1,0,0,0,2,19,7,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,187,"        throw new ArithmeticException(""Value cannot fit in an int: "" + value);
",2,1,0,1,2,0,0,2,0,6,70,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,199,"        long val = FieldUtils.safeMultiply(val1, val2);
",2,0,0,1,2,0,8,0,0,10,47,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,200,"        return FieldUtils.safeToInt(val);
",0,0,0,1,2,1,6,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,214,"        if ((value < lowerBound) || (value > upperBound)) {
",8,3,0,3,7,0,0,0,0,11,51,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,215,"            throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,219,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,233,"            throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,249,"        if ((value < lowerBound) || (value > upperBound)) {
",8,3,0,3,7,0,0,0,0,11,51,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,250,"            throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,254,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,273,"        return getWrappedValue(currentValue + wrapValue, minValue, maxValue);
",4,1,0,1,2,1,6,0,0,11,69,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,289,"        if (minValue >= maxValue) {
",4,1,0,1,3,0,0,0,0,5,27,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,290,"            throw new IllegalArgumentException(""MIN > MAX"");
",0,0,0,1,2,0,0,2,0,3,48,7,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,293,"        int wrapRange = maxValue - minValue + 1;
",6,2,0,0,0,0,0,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,294,"        value -= minValue;
",4,0,0,0,0,0,0,0,0,5,18,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,296,"        if (value >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,297,"            return (value % wrapRange) + minValue;
",6,2,0,1,2,1,0,0,0,8,38,6,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,300,"        int remByRange = (-value) % wrapRange;
",6,1,0,1,2,0,0,0,0,8,38,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,302,"        if (remByRange == 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,303,"            return 0 + minValue;
",2,1,0,0,0,1,0,0,0,3,20,6,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,305,"        return (wrapRange - remByRange) + minValue;
",6,2,0,1,2,1,0,0,0,8,43,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,318,"        if (object1 == object2) {
",4,1,0,1,3,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,319,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,321,"        if (object1 == null || object2 == null) {
",4,3,0,1,3,0,0,0,0,7,41,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,322,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,20,324,"        return object1.equals(object2);
",0,0,0,1,2,1,6,0,0,6,31,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,20,53,"        return ""millis"";
",0,0,0,0,0,1,0,0,0,1,16,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,20,85,"        return FieldUtils.safeToInt(duration);
",0,0,0,1,2,1,6,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,20,89,"        return duration;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,20,93,"        return FieldUtils.safeToInt(duration);
",0,0,0,1,2,1,6,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,20,97,"        return duration;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,20,101,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,20,105,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,20,109,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,20,113,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,20,117,"        return FieldUtils.safeAdd(instant, value);
",0,0,0,1,2,1,8,0,0,8,42,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,20,121,"        return FieldUtils.safeAdd(instant, value);
",0,0,0,1,2,1,8,0,0,8,42,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,20,125,"        return FieldUtils.safeToInt(FieldUtils.safeSubtract(minuendInstant, subtrahendInstant));
",0,0,0,2,4,1,12,0,0,12,88,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,20,129,"        return FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,66,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,20,134,"        long otherMillis = otherField.getUnitMillis();
",2,0,0,1,2,0,4,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,20,135,"        long thisMillis = getUnitMillis();
",2,0,0,1,2,0,2,0,0,4,34,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,20,137,"        if (thisMillis == otherMillis) {
",4,1,0,1,3,0,0,0,0,5,32,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,20,138,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,20,140,"        if (thisMillis < otherMillis) {
",4,1,0,1,3,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,20,141,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,6,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,20,143,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,20,148,"        if (obj instanceof MillisDurationField) {
",2,0,0,1,3,0,0,2,0,4,41,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,20,149,"            return getUnitMillis() == ((MillisDurationField) obj).getUnitMillis();
",2,1,0,4,8,1,4,2,0,9,70,6,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,20,151,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,20,164,"        return ""DurationField[millis]"";
",0,0,0,1,2,1,0,0,0,1,31,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,20,171,"        return INSTANCE;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,20,32,"public final class MillisDurationField extends DurationField implements Serializable {
",2,0,0,0,1,2,0,4,0,8,86,1,0.00000,0
