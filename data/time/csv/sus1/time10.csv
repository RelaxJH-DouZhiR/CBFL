dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy
defect4j,time,org/joda/time/MonthDay,10,334,"        this(monthOfYear, dayOfMonth, null);
",4,0,0,1,2,0,0,0,0,4,36,4,1,0
defect4j,time,org/joda/time/MonthDay,10,335,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,time,org/joda/time/MonthDay,10,352,"        super(new int[] {monthOfYear, dayOfMonth}, chronology);
",6,0,0,3,6,0,0,0,0,6,55,4,1,0
defect4j,time,org/joda/time/MonthDay,10,353,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,time,org/joda/time/MonthDay,10,79,"    private static final DateTimeFieldType[] FIELD_TYPES = new DateTimeFieldType[] {
",2,0,0,2,5,3,0,4,0,9,80,2,1,0
defect4j,time,org/joda/time/MonthDay,10,84,"    private static final DateTimeFormatter PARSER = new DateTimeFormatterBuilder()
",2,0,0,1,2,3,0,4,0,9,78,2,1,0
defect4j,time,org/joda/time/MonthDay,10,395,"        return 2;
",0,0,0,0,0,1,0,0,0,0,9,3,1,0
defect4j,time,org/joda/time/MonthDay,10,408,"        switch (index) {
",2,0,0,1,3,0,0,0,0,2,16,4,1,0
defect4j,time,org/joda/time/MonthDay,10,410,"            return chrono.monthOfYear();
",0,0,0,1,2,1,4,0,0,4,28,6,1,0
defect4j,time,org/joda/time/MonthDay,10,412,"            return chrono.dayOfMonth();
",0,0,0,1,2,1,4,0,0,4,27,6,1,0
defect4j,time,org/joda/time/MonthDay,10,426,"        return FIELD_TYPES[index];
",0,0,1,1,2,1,0,0,0,4,26,5,1,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,129,"        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];
",2,1,1,1,2,1,0,0,0,5,43,5,1,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,89,"                return iChronology.getDaysInMonthMax(month);
",0,0,0,1,2,1,6,0,0,6,44,9,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,147,"    private static final Map<String, DateTimeFormatter> cPatternedCache = new HashMap<String, DateTimeFormatter>(7);
",2,0,0,1,2,3,0,12,0,17,112,2,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,149,"    private static final DateTimeFormatter[] cStyleCache = new DateTimeFormatter[25];
",2,0,0,2,4,3,0,4,0,9,81,2,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,170,"        return createFormatterForPattern(pattern);
",0,0,0,1,2,1,4,0,0,4,42,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,400,"        int length = pattern.length();
",2,0,0,1,2,0,4,0,0,6,30,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,401,"        int[] indexRef = new int[1];
",2,0,0,2,4,0,0,0,0,2,28,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,403,"        for (int i=0; i<length; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,404,"            indexRef[0] = i;
",2,0,1,1,2,0,0,0,0,5,16,6,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,405,"            String token = parseToken(pattern, indexRef);
",2,0,0,1,2,0,6,2,0,10,45,6,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,406,"            i = indexRef[0];
",2,0,1,1,2,0,0,0,0,5,16,6,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,408,"            int tokenLen = token.length();
",2,0,0,1,2,0,4,0,0,6,30,7,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,409,"            if (tokenLen == 0) {
",2,1,0,1,3,0,0,0,0,3,20,6,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,412,"            char c = token.charAt(0);
",2,0,0,1,2,0,4,0,0,6,25,7,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,414,"            switch (c) {
",2,0,0,1,3,0,0,0,0,2,12,6,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,479,"                if (tokenLen >= 3) {
",2,1,0,1,3,0,0,0,0,3,20,7,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,486,"                    builder.appendMonthOfYear(tokenLen);
",0,0,0,1,2,0,6,0,0,6,36,10,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,488,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,490,"                builder.appendDayOfMonth(tokenLen);
",0,0,0,1,2,0,6,0,0,6,35,8,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,491,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,549,"                String sub = token.substring(1);
",2,0,0,1,2,0,4,2,0,8,32,7,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,550,"                if (sub.length() == 1) {
",0,1,0,2,5,0,4,0,0,5,24,7,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,551,"                    builder.appendLiteral(sub.charAt(0));
",0,0,0,2,4,0,8,0,0,8,37,10,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,555,"                    builder.appendLiteral(new String(sub));
",2,0,0,2,4,0,4,2,0,8,39,10,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,557,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,563,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,574,"        StringBuilder buf = new StringBuilder();
",2,0,0,1,2,0,0,4,0,6,40,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,576,"        int i = indexRef[0];
",2,0,1,1,2,0,0,0,0,4,20,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,577,"        int length = pattern.length();
",2,0,0,1,2,0,4,0,0,6,30,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,579,"        char c = pattern.charAt(i);
",2,0,0,1,2,0,6,0,0,8,27,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,580,"        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {
",8,7,0,1,3,0,0,0,0,19,51,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,583,"            buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,7,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,585,"            while (i + 1 < length) {
",4,2,0,1,3,0,0,0,0,6,24,6,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,586,"                char peek = pattern.charAt(i + 1);
",4,1,0,1,2,0,4,0,0,9,34,9,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,587,"                if (peek == c) {
",4,1,0,1,3,0,0,0,0,5,16,8,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,588,"                    buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,11,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,589,"                    i++;
",2,0,0,0,0,0,0,0,0,3,4,10,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,593,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,596,"            buf.append('\'');
",0,0,0,1,2,0,4,0,0,5,17,7,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,598,"            boolean inLiteral = false;
",2,0,0,0,0,0,0,0,0,3,26,7,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,600,"            for (; i < length; i++) {
",6,1,0,1,3,0,0,0,0,8,25,6,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,601,"                c = pattern.charAt(i);
",2,0,0,1,2,0,6,0,0,9,22,8,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,603,"                if (c == '\'') {
",2,1,0,1,3,0,0,0,0,4,16,8,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,611,"                } else if (!inLiteral &&
",2,1,0,0,2,0,0,0,0,4,24,9,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,613,"                    i--;
",2,0,0,0,0,0,0,0,0,3,4,11,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,614,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,616,"                    buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,12,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,621,"        indexRef[0] = i;
",2,0,1,1,2,0,0,0,0,5,16,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,622,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,674,"        if (pattern == null || pattern.length() == 0) {
",2,3,0,2,5,0,4,0,0,9,47,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,677,"        DateTimeFormatter formatter = null;
",2,0,0,0,0,0,0,2,0,4,35,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,678,"        synchronized (cPatternedCache) {
",2,0,0,1,3,0,0,0,0,2,32,4,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,679,"            formatter = cPatternedCache.get(pattern);
",2,0,0,1,2,0,6,0,0,9,41,6,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,680,"            if (formatter == null) {
",2,1,0,1,3,0,0,0,0,3,24,6,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,681,"                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();
",2,0,0,1,2,0,0,4,0,6,66,8,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,682,"                parsePatternTo(builder, pattern);
",0,0,0,1,2,0,6,0,0,6,33,9,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,683,"                formatter = builder.toFormatter();
",2,0,0,1,2,0,4,0,0,7,34,8,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,685,"                cPatternedCache.put(pattern, formatter);
",0,0,0,1,2,0,8,0,0,8,40,9,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,687,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,688,"        return formatter;
",2,0,0,0,0,1,0,0,0,2,17,4,1,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,93,"            return instant; // the easy case
",2,0,0,0,0,1,0,0,0,2,32,6,1.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,260,"            int subtrahendDom = iChronology.getDayOfMonth
",2,0,0,0,0,0,4,0,0,6,45,7,1.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,262,"            if (subtrahendDom > minuendDom) {
",4,1,0,1,3,0,0,0,0,5,33,6,1.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,595,"        if (ldp == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,1.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,596,"            ldp = dateElementParser().withZoneUTC();
",2,0,0,2,4,0,4,0,0,7,40,6,1.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,598,"        return ldp;
",2,0,0,0,0,1,0,0,0,2,11,4,1.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,301,"        return withZone(DateTimeZone.UTC);
",4,0,0,1,2,1,2,0,0,6,34,5,0.66667,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,321,"        if (iZone == zone) {
",4,1,0,1,3,0,0,0,0,5,20,4,0.66667,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,324,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,
",6,0,0,0,1,1,0,2,0,8,56,5,0.66667,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,565,"        return 31;
",0,0,0,0,0,1,0,0,0,0,10,3,0.57143,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,575,"        int thisYear = getYear(instant);
",2,0,0,1,2,0,4,0,0,6,32,5,0.57143,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,576,"        int thisMonth = getMonthOfYear(instant, thisYear);
",2,0,0,1,2,0,6,0,0,8,50,5,0.57143,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,577,"        return getDaysInYearMonth(thisYear, thisMonth);
",0,0,0,1,2,1,6,0,0,6,47,5,0.57143,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,59,"        return iChronology.getDaysInMonthMax();
",0,0,0,1,2,1,4,0,0,4,39,5,0.57143,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,79,"        int size = partial.size();
",2,0,0,1,2,0,4,0,0,6,26,5,0.57143,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,80,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.57143,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,81,"            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {
",0,1,0,3,7,0,10,0,0,11,65,6,0.57143,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,82,"                int month = values[i];
",2,0,1,1,2,0,0,0,0,6,22,9,0.57143,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,83,"                for (int j = 0; j < size; j++) {
",8,1,0,1,3,0,0,0,0,10,32,8,0.57143,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,84,"                    if (partial.getFieldType(j) == DateTimeFieldType.year()) {
",0,1,0,3,7,0,10,0,0,11,58,10,0.57143,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,408,"        if (text == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.50000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,411,"        switch (text.length()) {
",0,0,0,2,5,0,4,0,0,4,24,5,0.50000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,417,"                return append0(new StringLiteral(text));
",2,0,0,2,4,1,2,2,0,6,40,6,0.50000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,444,"            return append0(new UnpaddedNumber(fieldType, maxDigits, false));
",4,0,0,2,4,1,2,2,0,9,64,7,0.50000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,765,"        return appendDecimal(DateTimeFieldType.dayOfWeek(), minDigits, 1);
",0,0,0,2,4,1,8,0,0,8,66,5,0.50000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,785,"        return appendDecimal(DateTimeFieldType.dayOfYear(), minDigits, 3);
",0,0,0,2,4,1,8,0,0,8,66,5,0.50000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,795,"        return appendDecimal(DateTimeFieldType.weekOfWeekyear(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,71,5,0.50000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,807,"        return appendSignedDecimal(DateTimeFieldType.weekyear(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,79,5,0.50000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1171,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.50000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1401,"            super(fieldType, maxParsedDigits, signed);
",6,0,0,1,2,0,0,0,0,6,42,5,0.50000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1402,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1405,"            return iMaxParsedDigits;
",2,0,0,0,0,1,0,0,0,2,24,5,0.50000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1270,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.50000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1271,"            iValue = value;
",4,0,0,0,0,0,0,0,0,5,15,5,0.50000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1272,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1275,"            return iValue.length();
",0,0,0,1,2,1,4,0,0,4,23,6,0.50000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1299,"            return iValue.length();
",0,0,0,1,2,1,4,0,0,4,23,6,0.50000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,613,"        if (dpe == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.50000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,614,"            dpe = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.50000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,636,"        return dpe;
",2,0,0,0,0,1,0,0,0,2,11,4,0.50000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1614,"        if (we == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.50000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1615,"            we = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.50000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1619,"        return we;
",2,0,0,0,0,1,0,0,0,2,10,4,0.50000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1623,"        if (wwe == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.50000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1624,"            wwe = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.50000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1629,"        return wwe;
",2,0,0,0,0,1,0,0,0,2,11,4,0.50000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1633,"        if (dwe == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.50000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1634,"            dwe = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.50000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1639,"        return dwe;
",2,0,0,0,0,1,0,0,0,2,11,4,0.50000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1643,"        if (dye == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.50000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1644,"            dye = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.50000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1649,"        return dye;
",2,0,0,0,0,1,0,0,0,2,11,4,0.50000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,153,"        Object f = getFormatter();
",2,0,0,1,2,0,2,2,0,6,26,4,0.44444,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,154,"        if (isParser(f)) {
",0,0,0,2,5,0,4,0,0,4,18,5,0.44444,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,155,"            return (DateTimeParser) f;
",2,0,0,1,2,1,0,2,0,4,26,7,0.44444,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,305,"        if (printer != null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.44444,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,308,"        if (parsers == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.44444,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,311,"        int length = parsers.length;
",6,0,0,0,0,0,0,0,0,6,28,5,0.44444,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,312,"        if (length == 1) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.44444,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,319,"        DateTimeParser[] copyOfParsers = new DateTimeParser[length];
",2,0,1,2,4,0,0,4,0,8,60,4,0.44444,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,321,"        for (i = 0; i < length - 1; i++) {
",8,2,0,1,3,0,0,0,0,12,34,4,0.44444,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,322,"            if ((copyOfParsers[i] = parsers[i]) == null) {
",0,1,1,4,9,0,0,0,0,10,46,6,0.44444,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,326,"        copyOfParsers[i] = parsers[i];
",0,0,1,2,4,0,0,0,0,9,30,4,0.44444,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,328,"        return append0(printer, new MatchingParser(copyOfParsers));
",2,0,0,2,4,1,4,2,0,8,59,5,0.44444,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,345,"        checkParser(parser);
",0,0,0,1,2,0,4,0,0,4,20,5,0.44444,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,346,"        DateTimeParser[] parsers = new DateTimeParser[] {parser, null};
",4,0,0,3,6,0,0,4,0,8,63,4,0.44444,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,347,"        return append0(null, new MatchingParser(parsers));
",2,0,0,2,4,1,2,2,0,8,50,4,0.44444,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,357,"        if (parser == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.44444,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,360,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.44444,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1150,"                    f = parser;
",4,0,0,0,0,0,0,0,0,5,11,10,0.44444,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2794,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.44444,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2795,"            iParsers = parsers;
",4,0,0,0,0,0,0,0,0,5,19,5,0.44444,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2796,"            int est = 0;
",2,0,0,0,0,0,0,0,0,2,12,6,0.44444,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2797,"            for (int i=parsers.length; --i>=0 ;) {
",8,1,0,1,3,0,0,0,0,10,38,5,0.44444,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2798,"                DateTimeParser parser = parsers[i];
",2,0,1,1,2,0,0,2,0,8,35,7,0.44444,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2799,"                if (parser != null) {
",2,1,0,1,3,0,0,0,0,3,21,7,0.44444,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2800,"                    int len = parser.estimateParsedLength();
",2,0,0,1,2,0,4,0,0,6,40,10,0.44444,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2801,"                    if (len > est) {
",4,1,0,1,3,0,0,0,0,5,16,9,0.44444,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2802,"                        est = len;
",4,0,0,0,0,0,0,0,0,5,10,11,0.44444,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2805,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.44444,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2806,"            iParsedLengthEstimate = est;
",4,0,0,0,0,0,0,0,0,5,28,5,0.44444,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2807,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.44444,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2810,"            return iParsedLengthEstimate;
",2,0,0,0,0,1,0,0,0,2,29,5,0.44444,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2623,"                iPrinters = null;
",2,0,0,0,0,0,0,0,0,3,17,7,0.44444,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2624,"                iPrintedLengthEstimate = 0;
",2,0,0,0,0,0,0,0,0,3,27,7,0.44444,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2730,"            return iParsedLengthEstimate;
",2,0,0,0,0,1,0,0,0,2,29,5,0.44444,0
defect4j,time,org/joda/time/DateTimeUtils,10,364,"        if (partial == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.40000,0
defect4j,time,org/joda/time/DateTimeUtils,10,367,"        DurationFieldType lastType = null;
",2,0,0,0,0,0,0,2,0,4,34,4,0.40000,0
defect4j,time,org/joda/time/DateTimeUtils,10,368,"        for (int i = 0; i < partial.size(); i++) {
",6,1,0,2,5,0,4,0,0,12,42,4,0.40000,0
defect4j,time,org/joda/time/DateTimeUtils,10,369,"            DateTimeField loopField = partial.getField(i);
",2,0,0,1,2,0,6,2,0,10,46,6,0.40000,0
defect4j,time,org/joda/time/DateTimeUtils,10,370,"            if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.40000,0
defect4j,time,org/joda/time/DateTimeUtils,10,371,"                if (loopField.getRangeDurationField().getType() != lastType) {
",2,1,0,3,7,0,6,0,0,9,62,8,0.40000,0
defect4j,time,org/joda/time/DateTimeUtils,10,375,"            lastType = loopField.getDurationField().getType();
",2,0,0,2,4,0,6,0,0,9,50,6,0.40000,0
defect4j,time,org/joda/time/DateTimeUtils,10,377,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.40000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,89,"        if (start == null || end == null) {
",4,3,0,1,3,0,0,0,0,7,35,4,0.40000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,92,"        if (start.size() != end.size()) {
",0,1,0,3,7,0,8,0,0,9,33,4,0.40000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,95,"        for (int i = 0, isize = start.size(); i < isize; i++) {
",10,1,0,2,5,0,4,0,0,16,55,4,0.40000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,96,"            if (start.getFieldType(i) != end.getFieldType(i)) {
",0,1,0,3,7,0,12,0,0,13,51,6,0.40000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,100,"        if (DateTimeUtils.isContiguous(start) == false) {
",0,1,0,2,5,0,6,0,0,8,49,4,0.40000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,103,"        Chronology chrono = DateTimeUtils.getChronology(start.getChronology()).withUTC();
",2,0,0,3,6,0,10,2,0,14,81,4,0.40000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,104,"        int[] values = chrono.get(zeroInstance, chrono.set(start, 0L), chrono.set(end, 0L));
",2,0,0,4,8,0,18,0,0,20,84,5,0.40000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,105,"        return values[0];
",0,0,1,1,2,1,0,0,0,2,17,5,0.40000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,339,"        return MIN;
",2,0,0,0,0,1,0,0,0,2,11,4,0.40000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,344,"        return iMax;
",2,0,0,0,0,1,0,0,0,2,12,4,0.40000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,486,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.36364,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,489,"        if (maxDigits < minDigits) {
",4,1,0,1,3,0,0,0,0,5,28,4,0.36364,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,492,"        if (minDigits < 0 || maxDigits <= 0) {
",4,3,0,1,3,0,0,0,0,7,38,4,0.36364,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,495,"        if (minDigits <= 1) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.36364,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,498,"            return append0(new PaddedNumber(fieldType, maxDigits, true, minDigits));
",6,0,0,2,4,1,2,2,0,11,72,7,0.36364,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,775,"        return appendDecimal(DateTimeFieldType.dayOfMonth(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,67,5,0.36364,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,817,"        return appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,68,5,0.36364,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,829,"        return appendSignedDecimal(DateTimeFieldType.year(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,75,5,0.36364,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1585,"        if (ye == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.36364,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1586,"            ye = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.36364,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1590,"        return ye;
",2,0,0,0,0,1,0,0,0,2,10,4,0.36364,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1594,"        if (mye == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.36364,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1595,"            mye = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.36364,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1600,"        return mye;
",2,0,0,0,0,1,0,0,0,2,11,4,0.36364,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1604,"        if (dme == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.36364,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1605,"            dme = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.36364,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1610,"        return dme;
",2,0,0,0,0,1,0,0,0,2,11,4,0.36364,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,239,"        for (int i = 0, isize = partial.size(); i < isize; i++) {
",10,1,0,2,5,0,4,0,0,16,57,4,0.33333,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,240,"            instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));
",2,0,0,4,8,0,18,0,0,21,83,6,0.33333,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,242,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,155,"        return iPrinter;
",2,0,0,0,0,1,0,0,0,2,16,4,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,173,"        return iParser;
",2,0,0,0,0,1,0,0,0,2,15,4,0.33333,0
defect4j,time,org/joda/time/Months,10,155,"        if (start instanceof LocalDate && end instanceof LocalDate)   {
",4,1,0,1,3,0,0,4,0,9,63,4,0.33333,0
defect4j,time,org/joda/time/Months,10,161,"        int amount = BaseSingleFieldPeriod.between(start, end, ZERO);
",2,0,0,1,2,0,10,0,0,12,61,5,0.33333,0
defect4j,time,org/joda/time/Months,10,162,"        return Months.months(amount);
",0,0,0,1,2,1,6,0,0,6,29,5,0.33333,0
defect4j,time,org/joda/time/Days,10,135,"        if (start instanceof LocalDate && end instanceof LocalDate)   {
",4,1,0,1,3,0,0,4,0,9,63,4,0.33333,0
defect4j,time,org/joda/time/Days,10,141,"        int amount = BaseSingleFieldPeriod.between(start, end, ZERO);
",2,0,0,1,2,0,10,0,0,12,61,5,0.33333,0
defect4j,time,org/joda/time/Days,10,142,"        return Days.days(amount);
",0,0,0,1,2,1,6,0,0,6,25,5,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1463,"            super(fieldType, maxParsedDigits, signed);
",6,0,0,1,2,0,0,0,0,6,42,5,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1464,"            iMinPrintedDigits = minPrintedDigits;
",4,0,0,0,0,0,0,0,0,5,37,5,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1465,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1468,"            return iMaxParsedDigits;
",2,0,0,0,0,1,0,0,0,2,24,5,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1319,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1320,"            iFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,23,5,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1321,"            iMaxParsedDigits = maxParsedDigits;
",4,0,0,0,0,0,0,0,0,5,35,5,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1322,"            iSigned = signed;
",4,0,0,0,0,0,0,0,0,5,17,5,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1323,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1326,"            return iMaxParsedDigits;
",2,0,0,0,0,1,0,0,0,2,24,5,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,217,"        if (formatter == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,220,"        return append0(formatter.getPrinter(), formatter.getParser());
",0,0,0,3,6,1,10,0,0,10,62,5,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,383,"        iFormatter = null;
",2,0,0,0,0,0,0,0,0,3,18,4,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,384,"        iElementPairs.add(printer);
",0,0,0,1,2,0,6,0,0,6,27,5,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,385,"        iElementPairs.add(parser);
",0,0,0,1,2,0,6,0,0,6,26,5,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,386,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,397,"        return append0(new CharacterLiteral(c));
",2,0,0,2,4,1,2,2,0,6,40,5,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,434,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,437,"        if (maxDigits < minDigits) {
",4,1,0,1,3,0,0,0,0,5,28,4,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,440,"        if (minDigits < 0 || maxDigits <= 0) {
",4,3,0,1,3,0,0,0,0,7,38,4,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,443,"        if (minDigits <= 1) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,446,"            return append0(new PaddedNumber(fieldType, maxDigits, false, minDigits));
",6,0,0,2,4,1,2,2,0,11,73,7,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1155,"                f = new Composite(iElementPairs);
",4,0,0,1,2,0,0,2,0,7,33,8,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1167,"                return ((Composite)f).isPrinter();
",2,0,0,3,6,1,2,2,0,6,34,9,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1177,"                return ((Composite)f).isParser();
",2,0,0,3,6,1,2,2,0,6,33,9,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2615,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2617,"            List<Object> printerList = new ArrayList<Object>();
",2,0,0,1,2,0,0,8,0,10,51,5,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2618,"            List<Object> parserList = new ArrayList<Object>();
",2,0,0,1,2,0,0,8,0,10,50,5,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2620,"            decompose(elementPairs, printerList, parserList);
",0,0,0,1,2,0,8,0,0,8,49,6,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2622,"            if (printerList.contains(null) || printerList.isEmpty()) {
",0,1,0,3,7,0,8,0,0,9,58,5,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2626,"                int size = printerList.size();
",2,0,0,1,2,0,4,0,0,6,30,8,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2627,"                iPrinters = new DateTimePrinter[size];
",2,0,1,1,2,0,0,2,0,7,38,7,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2628,"                int printEst = 0;
",2,0,0,0,0,0,0,0,0,2,17,8,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2629,"                for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,7,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2630,"                    DateTimePrinter printer = (DateTimePrinter) printerList.get(i);
",2,0,0,2,4,0,6,4,0,12,63,9,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2631,"                    printEst += printer.estimatePrintedLength();
",2,0,0,1,2,0,4,0,0,7,44,9,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2632,"                    iPrinters[i] = printer;
",2,0,1,1,2,0,0,0,0,7,23,9,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2634,"                iPrintedLengthEstimate = printEst;
",4,0,0,0,0,0,0,0,0,5,34,7,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2637,"            if (parserList.contains(null) || parserList.isEmpty()) {
",0,1,0,3,7,0,8,0,0,9,56,5,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2641,"                int size = parserList.size();
",2,0,0,1,2,0,4,0,0,6,29,8,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2642,"                iParsers = new DateTimeParser[size];
",2,0,1,1,2,0,0,2,0,7,36,7,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2643,"                int parseEst = 0;
",2,0,0,0,0,0,0,0,0,2,17,8,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2644,"                for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,7,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2645,"                    DateTimeParser parser = (DateTimeParser) parserList.get(i);
",2,0,0,2,4,0,6,4,0,12,59,9,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2646,"                    parseEst += parser.estimateParsedLength();
",2,0,0,1,2,0,4,0,0,7,42,9,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2647,"                    iParsers[i] = parser;
",2,0,1,1,2,0,0,0,0,7,21,9,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2649,"                iParsedLengthEstimate = parseEst;
",4,0,0,0,0,0,0,0,0,5,33,7,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2651,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2747,"            return iPrinters != null;
",2,1,0,0,0,1,0,0,0,3,25,5,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2751,"            return iParsers != null;
",2,1,0,0,0,1,0,0,0,3,24,5,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2759,"            int size = elementPairs.size();
",2,0,0,1,2,0,4,0,0,6,31,6,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2760,"            for (int i=0; i<size; i+=2) {
",8,1,0,1,3,0,0,0,0,10,29,5,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2761,"                Object element = elementPairs.get(i);
",2,0,0,1,2,0,6,2,0,10,37,7,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2762,"                if (element instanceof Composite) {
",2,0,0,1,3,0,0,2,0,4,35,8,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2763,"                    addArrayToList(printerList, ((Composite)element).iPrinters);
",4,0,0,3,6,0,4,2,0,10,60,10,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2765,"                    printerList.add(element);
",0,0,0,1,2,0,6,0,0,6,25,10,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2768,"                element = elementPairs.get(i + 1);
",4,1,0,1,2,0,4,0,0,10,34,7,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2769,"                if (element instanceof Composite) {
",2,0,0,1,3,0,0,2,0,4,35,8,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2770,"                    addArrayToList(parserList, ((Composite)element).iParsers);
",4,0,0,3,6,0,4,2,0,10,58,10,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2772,"                    parserList.add(element);
",0,0,0,1,2,0,6,0,0,6,24,10,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2775,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2778,"            if (array != null) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2779,"                for (int i=0; i<array.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,7,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2780,"                    list.add(array[i]);
",0,0,1,2,4,0,4,0,0,8,19,10,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2783,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1207,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1208,"            iValue = value;
",4,0,0,0,0,0,0,0,0,5,15,5,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1209,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1212,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.33333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1236,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.33333,0
defect4j,time,org/joda/time/base/BasePartial,10,180,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.28571,0
defect4j,time,org/joda/time/base/BasePartial,10,181,"        chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,4,0.28571,0
defect4j,time,org/joda/time/base/BasePartial,10,182,"        iChronology = chronology.withUTC();
",2,0,0,1,2,0,4,0,0,7,35,4,0.28571,0
defect4j,time,org/joda/time/base/BasePartial,10,183,"        chronology.validate(this, values);
",0,0,0,1,2,0,6,0,0,6,34,5,0.28571,0
defect4j,time,org/joda/time/base/BasePartial,10,184,"        iValues = values;
",4,0,0,0,0,0,0,0,0,5,17,4,0.28571,0
defect4j,time,org/joda/time/base/BasePartial,10,185,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.28571,0
defect4j,time,org/joda/time/base/AbstractPartial,10,105,"        return getField(index, getChronology());
",0,0,0,2,4,1,6,0,0,6,40,5,0.28571,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,183,"        int size = partial.size();
",2,0,0,1,2,0,4,0,0,6,26,5,0.28571,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,184,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.28571,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,185,"            int value = values[i];
",2,0,1,1,2,0,0,0,0,6,22,7,0.28571,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,186,"            DateTimeField field = partial.getField(i);
",2,0,0,1,2,0,6,2,0,10,42,6,0.28571,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,187,"            if (value < field.getMinimumValue()) {
",2,1,0,2,5,0,4,0,0,7,38,6,0.28571,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,192,"            if (value > field.getMaximumValue()) {
",2,1,0,2,5,0,4,0,0,7,38,6,0.28571,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,199,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.28571,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,200,"            int value = values[i];
",2,0,1,1,2,0,0,0,0,6,22,7,0.28571,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,201,"            DateTimeField field = partial.getField(i);
",2,0,0,1,2,0,6,2,0,10,42,6,0.28571,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,202,"            if (value < field.getMinimumValue(partial, values)) {
",2,1,0,2,5,0,8,0,0,11,53,6,0.28571,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,207,"            if (value > field.getMaximumValue(partial, values)) {
",2,1,0,2,5,0,8,0,0,11,53,6,0.28571,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,213,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.28571,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,255,"        int size = period.size();
",2,0,0,1,2,0,4,0,0,6,25,5,0.28571,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,256,"        int[] values = new int[size];
",2,0,1,2,4,0,0,0,0,4,29,5,0.28571,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,257,"        if (startInstant != endInstant) {
",4,1,0,1,3,0,0,0,0,5,33,4,0.28571,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,258,"            for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,6,0.28571,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,259,"                DurationField field = period.getFieldType(i).getField(this);
",2,0,0,2,4,0,8,2,0,12,60,8,0.28571,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,260,"                int value = field.getDifference(endInstant, startInstant);
",2,0,0,1,2,0,8,0,0,10,58,9,0.28571,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,261,"                startInstant = field.add(startInstant, value);
",2,0,0,1,2,0,8,0,0,11,46,8,0.28571,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,262,"                values[i] = value;
",2,0,1,1,2,0,0,0,0,7,18,8,0.28571,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,265,"        return values;
",2,0,0,0,0,1,0,0,0,2,14,4,0.28571,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,758,"        return getMinimumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.28571,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,772,"        return getMinimumValue(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.28571,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,804,"        return getMaximumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.28571,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,818,"        return getMaximumValue(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.28571,0
defect4j,time,org/joda/time/base/BasePartial,10,225,"        return iValues[index];
",0,0,1,1,2,1,0,0,0,4,22,5,0.26667,0
defect4j,time,org/joda/time/base/BasePartial,10,249,"        return iChronology;
",2,0,0,0,0,1,0,0,0,2,19,4,0.26667,0
defect4j,time,org/joda/time/DateTimeFieldType,10,498,"                    return chronology.dayOfMonth();
",0,0,0,1,2,1,4,0,0,4,31,7,0.25000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,128,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.20000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,129,"        iPrinter = printer;
",4,0,0,0,0,0,0,0,0,5,19,4,0.20000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,130,"        iParser = parser;
",4,0,0,0,0,0,0,0,0,5,17,4,0.20000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,131,"        iLocale = locale;
",4,0,0,0,0,0,0,0,0,5,17,4,0.20000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,132,"        iOffsetParsed = offsetParsed;
",4,0,0,0,0,0,0,0,0,5,29,4,0.20000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,133,"        iChrono = chrono;
",4,0,0,0,0,0,0,0,0,5,17,4,0.20000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,134,"        iZone = zone;
",4,0,0,0,0,0,0,0,0,5,13,4,0.20000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,135,"        iPivotYear = pivotYear;
",4,0,0,0,0,0,0,0,0,5,23,4,0.20000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,136,"        iDefaultYear = defaultYear;
",4,0,0,0,0,0,0,0,0,5,27,4,0.20000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,137,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,time,org/joda/time/Months,10,230,"        return DurationFieldType.months();
",0,0,0,1,2,1,4,0,0,4,34,5,0.20000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,216,"        if (index != 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.20000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,219,"        return getFieldType();
",0,0,0,1,2,1,2,0,0,2,22,5,0.20000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,496,"                    return chronology.monthOfYear();
",0,0,0,1,2,1,4,0,0,4,32,7,0.20000,0
defect4j,time,org/joda/time/Days,10,235,"        return DurationFieldType.days();
",0,0,0,1,2,1,4,0,0,4,32,5,0.20000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,202,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.19048,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,109,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,110,"        iPrinter = printer;
",4,0,0,0,0,0,0,0,0,5,19,4,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,111,"        iParser = parser;
",4,0,0,0,0,0,0,0,0,5,17,4,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,112,"        iLocale = null;
",2,0,0,0,0,0,0,0,0,3,15,4,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,113,"        iOffsetParsed = false;
",2,0,0,0,0,0,0,0,0,4,22,4,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,114,"        iChrono = null;
",2,0,0,0,0,0,0,0,0,3,15,4,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,115,"        iZone = null;
",2,0,0,0,0,0,0,0,0,3,13,4,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,116,"        iPivotYear = null;
",2,0,0,0,0,0,0,0,0,3,18,4,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,117,"        iDefaultYear = 2000;
",2,0,0,0,0,0,0,0,0,3,20,4,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,118,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,84,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,85,"        iElementPairs = new ArrayList<Object>();
",2,0,0,1,2,0,0,4,0,7,40,4,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,86,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,105,"        Object f = getFormatter();
",2,0,0,1,2,0,2,2,0,6,26,4,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,106,"        DateTimePrinter printer = null;
",2,0,0,0,0,0,0,2,0,4,31,4,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,107,"        if (isPrinter(f)) {
",0,0,0,2,5,0,4,0,0,4,19,5,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,108,"            printer = (DateTimePrinter) f;
",4,0,0,1,2,0,0,2,0,7,30,6,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,110,"        DateTimeParser parser = null;
",2,0,0,0,0,0,0,2,0,4,29,4,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,111,"        if (isParser(f)) {
",0,0,0,2,5,0,4,0,0,4,18,5,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,112,"            parser = (DateTimeParser) f;
",4,0,0,1,2,0,0,2,0,7,28,6,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,114,"        if (printer != null || parser != null) {
",4,3,0,1,3,0,0,0,0,7,40,4,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,115,"            return new DateTimeFormatter(printer, parser);
",4,0,0,1,2,1,0,2,0,6,46,7,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,374,"        iFormatter = null;
",2,0,0,0,0,0,0,0,0,3,18,4,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,376,"        iElementPairs.add(element);
",0,0,0,1,2,0,6,0,0,6,27,5,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,377,"        iElementPairs.add(element);
",0,0,0,1,2,0,6,0,0,6,27,5,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,378,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1138,"        Object f = iFormatter;
",4,0,0,0,0,0,0,2,0,6,22,4,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1140,"        if (f == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1141,"            if (iElementPairs.size() == 2) {
",0,1,0,2,5,0,4,0,0,5,32,6,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1142,"                Object printer = iElementPairs.get(0);
",2,0,0,1,2,0,4,2,0,8,38,8,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1143,"                Object parser = iElementPairs.get(1);
",2,0,0,1,2,0,4,2,0,8,37,8,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1145,"                if (printer != null) {
",2,1,0,1,3,0,0,0,0,3,22,8,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1146,"                    if (printer == parser || parser == null) {
",6,3,0,1,3,0,0,0,0,9,42,10,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1147,"                        f = printer;
",4,0,0,0,0,0,0,0,0,5,12,12,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1154,"            if (f == null) {
",2,1,0,1,3,0,0,0,0,3,16,6,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1158,"            iFormatter = f;
",4,0,0,0,0,0,0,0,0,5,15,6,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1161,"        return f;
",2,0,0,0,0,1,0,0,0,2,9,4,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1165,"        if (f instanceof DateTimePrinter) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1166,"            if (f instanceof Composite) {
",2,0,0,1,3,0,0,2,0,4,29,7,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1169,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1175,"        if (f instanceof DateTimeParser) {
",2,0,0,1,3,0,0,2,0,4,34,5,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1176,"            if (f instanceof Composite) {
",2,0,0,1,3,0,0,2,0,4,29,7,0.17391,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1179,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.17391,0
defect4j,time,org/joda/time/Months,10,92,"                return ZERO;
",2,0,0,0,0,1,0,0,0,2,12,5,0.16667,0
defect4j,time,org/joda/time/DateTimeFieldType,10,480,"            chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,5,0.14815,0
defect4j,time,org/joda/time/DateTimeFieldType,10,482,"            switch (iOrdinal) {
",2,0,0,1,3,0,0,0,0,2,19,5,0.14815,0
defect4j,time,org/joda/time/base/AbstractPartial,10,54,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.13793,0
defect4j,time,org/joda/time/base/AbstractPartial,10,55,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.13793,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,10,182,"            return ImpreciseDateTimeField.this.add(instant, value);
",2,0,0,1,2,1,6,0,0,8,55,6,0.12500,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,243,"        if (minuendInstant < subtrahendInstant) {
",4,1,0,1,3,0,0,0,0,5,41,4,0.11111,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,247,"        int minuendYear = iChronology.getYear(minuendInstant);
",2,0,0,1,2,0,6,0,0,8,54,5,0.11111,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,248,"        int minuendMonth = iChronology.getMonthOfYear(minuendInstant, minuendYear);
",2,0,0,1,2,0,8,0,0,10,75,5,0.11111,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,249,"        int subtrahendYear = iChronology.getYear(subtrahendInstant);
",2,0,0,1,2,0,6,0,0,8,60,5,0.11111,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,250,"        int subtrahendMonth = iChronology.getMonthOfYear(subtrahendInstant, subtrahendYear);
",2,0,0,1,2,0,8,0,0,10,84,5,0.11111,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,252,"        long difference = (minuendYear - subtrahendYear) * ((long) iMax) + minuendMonth - subtrahendMonth;
",12,4,0,3,6,0,0,0,0,16,98,5,0.11111,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,256,"        int minuendDom = iChronology.getDayOfMonth
",2,0,0,0,0,0,4,0,0,6,42,5,0.11111,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,258,"        if (minuendDom == iChronology.getDaysInYearMonth(minuendYear, minuendMonth)) {
",2,1,0,2,5,0,8,0,0,11,78,4,0.11111,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,271,"        long minuendRem = minuendInstant
",4,0,0,0,0,0,0,0,0,4,32,5,0.11111,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,273,"        long subtrahendRem = subtrahendInstant
",4,0,0,0,0,0,0,0,0,4,38,5,0.11111,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,276,"        if (minuendRem < subtrahendRem) {
",4,1,0,1,3,0,0,0,0,5,33,4,0.11111,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,280,"        return difference;
",2,0,0,0,0,1,0,0,0,2,18,4,0.11111,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,134,"        return ((value > 28 || value < 1) ? getDaysInMonthMax(instant) : 28);
",4,3,0,3,6,1,4,0,0,11,69,6,0.09091,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,55,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.09091,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,96,"        return iChronology.getDaysInMonthMaxForSet(instant, value);
",0,0,0,1,2,1,8,0,0,8,59,5,0.09091,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,10,78,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(),
",0,0,0,1,3,0,8,0,0,8,60,5,0.08696,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,10,80,"        return instant + (value - get(instant)) * iUnitMillis;
",6,3,0,2,4,1,4,0,0,13,54,4,0.08696,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,458,"        int month = getMonthOfYear(millis, year);
",2,0,0,1,2,0,6,0,0,8,41,5,0.08511,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,459,"        return getDayOfMonth(millis, year, month);
",0,0,0,1,2,1,8,0,0,8,42,5,0.08511,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,298,"        FieldUtils.verifyValueBounds(this, month, MIN, iMax);
",0,0,0,1,2,0,10,0,0,10,53,5,0.08511,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,300,"        int thisYear = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,44,5,0.08511,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,302,"        int thisDom = iChronology.getDayOfMonth(instant, thisYear);
",2,0,0,1,2,0,8,0,0,10,59,5,0.08511,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,303,"        int maxDom = iChronology.getDaysInYearMonth(thisYear, month);
",2,0,0,1,2,0,8,0,0,10,61,5,0.08511,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,304,"        if (thisDom > maxDom) {
",4,1,0,1,3,0,0,0,0,5,23,4,0.08511,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,309,"        return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +
",0,1,0,1,2,1,10,0,0,11,68,4,0.08511,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,10,91,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));
",0,0,0,2,4,1,10,0,0,10,84,5,0.08333,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,10,190,"            return ImpreciseDateTimeField.this
",2,0,0,0,0,1,0,0,0,2,34,7,0.08333,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,448,"        int year = getYear(millis);
",2,0,0,1,2,0,4,0,0,6,27,5,0.08163,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,449,"        int month = getMonthOfYear(millis, year);
",2,0,0,1,2,0,6,0,0,8,41,5,0.08163,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,450,"        return getDayOfMonth(millis, year, month);
",0,0,0,1,2,1,8,0,0,8,42,5,0.08163,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,552,"            return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);
",6,1,0,2,4,1,0,0,0,7,58,8,0.08163,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,47,"        return iChronology.getDayOfMonth(instant);
",0,0,0,1,2,1,6,0,0,6,42,5,0.08163,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,551,"        if (instant >= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.07843,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,468,"        long dateMillis = getYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,38,5,0.07547,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,469,"        dateMillis += getTotalMillisByYearMonth(year, month);
",2,0,0,1,2,0,6,0,0,9,53,4,0.07547,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,470,"        return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;
",8,3,0,3,6,1,0,0,0,11,76,4,0.07547,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,88,"        int i = (int)((millis - getYearMillis(year)) >> 10);
",4,2,0,4,8,0,4,0,0,10,52,5,0.07547,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,93,"        return
",0,0,0,0,0,1,0,0,0,0,6,3,0.07547,0
defect4j,time,org/joda/time/field/FieldUtils,10,217,"        if ((value < lowerBound) || (value > upperBound)) {
",8,3,0,3,7,0,0,0,0,11,51,4,0.07407,0
defect4j,time,org/joda/time/field/FieldUtils,10,222,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07407,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,399,"        long unitMillis = getAverageMillisPerYearDividedByTwo();
",2,0,0,1,2,0,2,0,0,4,56,5,0.07407,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,400,"        long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();
",4,2,0,2,4,0,2,0,0,8,64,5,0.07407,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,401,"        if (i2 < 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.07407,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,404,"        int year = (int) (i2 / unitMillis);
",6,1,0,2,4,0,0,0,0,7,35,5,0.07407,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,406,"        long yearStart = getYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,37,5,0.07407,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,407,"        long diff = instant - yearStart;
",6,1,0,0,0,0,0,0,0,7,32,5,0.07407,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,409,"        if (diff < 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.07407,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,411,"        } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {
",6,2,0,1,4,0,0,0,0,8,61,5,0.07407,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,428,"        return year;
",2,0,0,0,0,1,0,0,0,2,12,4,0.07407,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,233,"        return MILLIS_PER_YEAR / 2;
",2,1,0,0,0,1,0,0,0,3,27,4,0.07407,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,241,"        return (1970L * MILLIS_PER_YEAR) / 2;
",2,2,0,1,2,1,0,0,0,4,37,4,0.07407,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,123,"            return MIN_DAYS_PER_MONTH_ARRAY[month - 1];
",2,1,1,1,2,1,0,0,0,5,43,7,0.07407,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,120,"        if (isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,4,23,5,0.07143,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,385,"        long millis = getYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,34,5,0.07018,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,386,"        millis += getTotalMillisByYearMonth(year, month);
",2,0,0,1,2,0,6,0,0,9,49,4,0.07018,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,387,"        return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;
",8,3,0,2,4,1,0,0,0,11,74,4,0.07018,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,142,"            return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];
",2,1,1,1,2,1,0,0,0,5,50,7,0.07018,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,197,"        return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);
",6,8,0,5,10,1,0,0,0,14,69,4,0.06780,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,202,"        int leapYears = year / 100;
",4,1,0,0,0,0,0,0,0,5,27,5,0.06780,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,203,"        if (year < 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.06780,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,211,"            leapYears = (year >> 2) - leapYears + (leapYears >> 2);
",8,4,0,2,4,0,0,0,0,13,55,6,0.06780,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,212,"            if (isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,4,23,7,0.06780,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,217,"        return (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;
",10,4,0,2,4,1,0,0,0,14,90,4,0.06780,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,139,"        if (isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,4,23,5,0.06780,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,360,"        return getYearInfo(year).iFirstDayMillis;
",2,0,0,1,2,1,4,0,0,6,41,5,0.06667,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,738,"        YearInfo info = iYearInfoCache[year & CACHE_MASK];
",6,1,1,1,2,0,0,2,0,11,50,4,0.06667,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,739,"        if (info == null || info.iYear != year) {
",8,3,0,1,3,0,0,0,0,11,41,4,0.06667,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,740,"            info = new YearInfo(year, calculateFirstDayOfYearMillis(year));
",4,0,0,2,4,0,4,2,0,11,63,6,0.06667,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,741,"            iYearInfoCache[year & CACHE_MASK] = info;
",6,1,1,1,2,0,0,0,0,10,41,6,0.06667,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,743,"        return info;
",2,0,0,0,0,1,0,0,0,2,12,4,0.06667,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,770,"        YearInfo(int year, long firstDayMillis) {
",6,0,0,1,3,0,0,0,0,6,41,3,0.06667,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,771,"            iYear = year;
",4,0,0,0,0,0,0,0,0,5,13,5,0.06667,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,772,"            iFirstDayMillis = firstDayMillis;
",4,0,0,0,0,0,0,0,0,5,33,5,0.06667,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,773,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0
defect4j,time,org/joda/time/Months,10,249,"        return getValue();
",0,0,0,1,2,1,2,0,0,2,18,5,0.06250,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,102,"            return chrono;
",2,0,0,0,0,1,0,0,0,2,14,6,0.05882,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,371,"        long millis = getYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,34,5,0.05882,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,372,"        millis += getTotalMillisByYearMonth(year, month);
",2,0,0,1,2,0,6,0,0,9,49,4,0.05882,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,373,"        return millis;
",2,0,0,0,0,1,0,0,0,2,14,4,0.05882,0
defect4j,time,org/joda/time/DurationFieldType,10,282,"            chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,5,0.05128,0
defect4j,time,org/joda/time/DurationFieldType,10,284,"            switch (iOrdinal) {
",2,0,0,1,3,0,0,0,0,2,19,5,0.05128,0
defect4j,time,org/joda/time/field/FieldUtils,10,188,"            return (int) value;
",2,0,0,1,2,1,0,0,0,2,19,7,0.05000,0
defect4j,time,org/joda/time/Days,10,343,"        return getValue();
",0,0,0,1,2,1,2,0,0,2,18,5,0.05000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,107,"        if ((base = iBase) != null) {
",4,1,0,2,5,0,0,0,0,6,29,4,0.04762,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,108,"            return base.getZone();
",0,0,0,1,2,1,4,0,0,4,22,7,0.04762,0
defect4j,time,org/joda/time/field/FieldUtils,10,187,"        if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {
",12,3,0,1,3,0,0,0,0,15,63,4,0.04651,0
defect4j,time,org/joda/time/Months,10,90,"        switch (months) {
",2,0,0,1,3,0,0,0,0,2,17,4,0.04348,0
defect4j,time,org/joda/time/PeriodType,10,372,"        PeriodType type = cMonths;
",4,0,0,0,0,0,0,2,0,6,26,4,0.04167,0
defect4j,time,org/joda/time/PeriodType,10,373,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.04167,0
defect4j,time,org/joda/time/PeriodType,10,374,"            type = new PeriodType(
",2,0,0,0,1,0,0,2,0,5,22,6,0.04167,0
defect4j,time,org/joda/time/PeriodType,10,379,"            cMonths = type;
",4,0,0,0,0,0,0,0,0,5,15,6,0.04167,0
defect4j,time,org/joda/time/PeriodType,10,381,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,0.04167,0
defect4j,time,org/joda/time/Months,10,211,"        super(months);
",2,0,0,1,2,0,0,0,0,2,14,4,0.04167,0
defect4j,time,org/joda/time/Months,10,212,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04167,0
defect4j,time,org/joda/time/Months,10,45,"    public static final Months ZERO = new Months(0);
",2,0,0,1,2,3,0,4,0,9,48,2,0.04167,0
defect4j,time,org/joda/time/Months,10,47,"    public static final Months ONE = new Months(1);
",2,0,0,1,2,3,0,4,0,9,47,2,0.04167,0
defect4j,time,org/joda/time/Months,10,49,"    public static final Months TWO = new Months(2);
",2,0,0,1,2,3,0,4,0,9,47,2,0.04167,0
defect4j,time,org/joda/time/Months,10,51,"    public static final Months THREE = new Months(3);
",2,0,0,1,2,3,0,4,0,9,49,2,0.04167,0
defect4j,time,org/joda/time/Months,10,53,"    public static final Months FOUR = new Months(4);
",2,0,0,1,2,3,0,4,0,9,48,2,0.04167,0
defect4j,time,org/joda/time/Months,10,55,"    public static final Months FIVE = new Months(5);
",2,0,0,1,2,3,0,4,0,9,48,2,0.04167,0
defect4j,time,org/joda/time/Months,10,57,"    public static final Months SIX = new Months(6);
",2,0,0,1,2,3,0,4,0,9,47,2,0.04167,0
defect4j,time,org/joda/time/Months,10,59,"    public static final Months SEVEN = new Months(7);
",2,0,0,1,2,3,0,4,0,9,49,2,0.04167,0
defect4j,time,org/joda/time/Months,10,61,"    public static final Months EIGHT = new Months(8);
",2,0,0,1,2,3,0,4,0,9,49,2,0.04167,0
defect4j,time,org/joda/time/Months,10,63,"    public static final Months NINE = new Months(9);
",2,0,0,1,2,3,0,4,0,9,48,2,0.04167,0
defect4j,time,org/joda/time/Months,10,65,"    public static final Months TEN = new Months(10);
",2,0,0,1,2,3,0,4,0,9,48,2,0.04167,0
defect4j,time,org/joda/time/Months,10,67,"    public static final Months ELEVEN = new Months(11);
",2,0,0,1,2,3,0,4,0,9,51,2,0.04167,0
defect4j,time,org/joda/time/Months,10,69,"    public static final Months TWELVE = new Months(12);
",2,0,0,1,2,3,0,4,0,9,51,2,0.04167,0
defect4j,time,org/joda/time/Months,10,71,"    public static final Months MAX_VALUE = new Months(Integer.MAX_VALUE);
",6,0,0,1,2,3,0,4,0,13,69,2,0.04167,0
defect4j,time,org/joda/time/Months,10,73,"    public static final Months MIN_VALUE = new Months(Integer.MIN_VALUE);
",6,0,0,1,2,3,0,4,0,13,69,2,0.04167,0
defect4j,time,org/joda/time/Months,10,76,"    private static final PeriodFormatter PARSER = ISOPeriodFormat.standard().withParseType(PeriodType.months());
",2,0,0,3,6,3,10,2,0,17,108,2,0.04167,0
defect4j,time,org/joda/time/Days,10,102,"                return new Days(days);
",2,0,0,1,2,1,0,2,0,4,22,6,0.04000,0
defect4j,time,org/joda/time/DateTimeUtils,10,285,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.03571,0
defect4j,time,org/joda/time/DateTimeUtils,10,283,"            return ISOChronology.getInstance();
",0,0,0,1,2,1,4,0,0,4,35,7,0.03077,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,92,"        if (months == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.02941,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,86,"        return getInstance(DateTimeZone.getDefault());
",0,0,0,2,4,1,6,0,0,6,46,5,0.02837,0
defect4j,time,org/joda/time/Days,10,80,"        switch (days) {
",2,0,0,1,3,0,0,0,0,2,15,4,0.02632,0
defect4j,time,org/joda/time/Days,10,216,"        super(days);
",2,0,0,1,2,0,0,0,0,2,12,4,0.02564,0
defect4j,time,org/joda/time/Days,10,217,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02564,0
defect4j,time,org/joda/time/Days,10,45,"    public static final Days ZERO = new Days(0);
",2,0,0,1,2,3,0,4,0,9,44,2,0.02564,0
defect4j,time,org/joda/time/Days,10,47,"    public static final Days ONE = new Days(1);
",2,0,0,1,2,3,0,4,0,9,43,2,0.02564,0
defect4j,time,org/joda/time/Days,10,49,"    public static final Days TWO = new Days(2);
",2,0,0,1,2,3,0,4,0,9,43,2,0.02564,0
defect4j,time,org/joda/time/Days,10,51,"    public static final Days THREE = new Days(3);
",2,0,0,1,2,3,0,4,0,9,45,2,0.02564,0
defect4j,time,org/joda/time/Days,10,53,"    public static final Days FOUR = new Days(4);
",2,0,0,1,2,3,0,4,0,9,44,2,0.02564,0
defect4j,time,org/joda/time/Days,10,55,"    public static final Days FIVE = new Days(5);
",2,0,0,1,2,3,0,4,0,9,44,2,0.02564,0
defect4j,time,org/joda/time/Days,10,57,"    public static final Days SIX = new Days(6);
",2,0,0,1,2,3,0,4,0,9,43,2,0.02564,0
defect4j,time,org/joda/time/Days,10,59,"    public static final Days SEVEN = new Days(7);
",2,0,0,1,2,3,0,4,0,9,45,2,0.02564,0
defect4j,time,org/joda/time/Days,10,61,"    public static final Days MAX_VALUE = new Days(Integer.MAX_VALUE);
",6,0,0,1,2,3,0,4,0,13,65,2,0.02564,0
defect4j,time,org/joda/time/Days,10,63,"    public static final Days MIN_VALUE = new Days(Integer.MIN_VALUE);
",6,0,0,1,2,3,0,4,0,13,65,2,0.02564,0
defect4j,time,org/joda/time/Days,10,66,"    private static final PeriodFormatter PARSER = ISOPeriodFormat.standard().withParseType(PeriodType.days());
",2,0,0,3,6,3,10,2,0,17,106,2,0.02564,0
defect4j,time,org/joda/time/DurationFieldType,10,294,"                    return chronology.months();
",0,0,0,1,2,1,4,0,0,4,27,7,0.02564,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,96,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.02548,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,99,"        int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);
",4,2,0,2,4,0,6,0,0,12,66,5,0.02548,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,100,"        ISOChronology chrono = cFastCache[index];
",2,0,1,1,2,0,0,2,0,8,41,4,0.02548,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,101,"        if (chrono != null && chrono.getZone() == zone) {
",4,3,0,2,5,0,4,0,0,11,49,4,0.02548,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,104,"        synchronized (cCache) {
",2,0,0,1,3,0,0,0,0,2,23,4,0.02548,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,105,"            chrono = cCache.get(zone);
",2,0,0,1,2,0,6,0,0,9,26,6,0.02548,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,106,"            if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.02548,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,107,"                chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));
",2,0,0,2,4,0,8,2,0,13,76,8,0.02548,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,108,"                cCache.put(zone, chrono);
",0,0,0,1,2,0,8,0,0,8,25,9,0.02548,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,110,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02548,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,111,"        cFastCache[index] = chrono;
",2,0,1,1,2,0,0,0,0,7,27,4,0.02548,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,112,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.02548,0
defect4j,time,org/joda/time/DurationFieldType,10,298,"                    return chronology.days();
",0,0,0,1,2,1,4,0,0,4,25,7,0.02500,0
defect4j,time,org/joda/time/DateTimeZone,10,1248,"        return 57 + getID().hashCode();
",0,1,0,2,4,1,4,0,0,5,31,4,0.02469,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,123,"        return iZone.hashCode();
",0,0,0,1,2,1,4,0,0,4,24,5,0.02469,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,10,218,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.02454,0
defect4j,time,org/joda/time/field/ScaledDurationField,10,109,"        return getWrappedField().getUnitMillis() * iScalar;
",2,1,0,2,4,1,4,0,0,7,51,4,0.02454,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,10,160,"            return iUnitMillis;
",2,0,0,0,0,1,0,0,0,2,19,5,0.02454,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,10,127,"        return UnsupportedDurationField.getInstance(DurationFieldType.eras());
",0,0,0,2,4,1,8,0,0,8,70,5,0.02454,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,10,131,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,81,"        super(base, zone);
",4,0,0,1,2,0,0,0,0,4,18,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,82,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,55,"        if (base == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,58,"        base = base.withUTC();
",2,0,0,1,2,0,4,0,0,7,22,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,59,"        if (base == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,62,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,65,"        return new ZonedChronology(base, zone);
",4,0,0,1,2,1,0,2,0,6,39,5,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,71,"        return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;
",6,4,0,1,2,1,4,0,0,14,87,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,85,"        return (DateTimeZone)getParam();
",0,0,0,2,4,1,2,2,0,4,32,5,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,150,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();
",2,0,0,1,2,0,0,12,0,14,66,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,154,"        fields.eras = convertField(fields.eras, converted);
",8,0,0,1,2,0,4,0,0,13,51,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,155,"        fields.centuries = convertField(fields.centuries, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,156,"        fields.years = convertField(fields.years, converted);
",8,0,0,1,2,0,4,0,0,13,53,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,157,"        fields.months = convertField(fields.months, converted);
",8,0,0,1,2,0,4,0,0,13,55,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,158,"        fields.weekyears = convertField(fields.weekyears, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,159,"        fields.weeks = convertField(fields.weeks, converted);
",8,0,0,1,2,0,4,0,0,13,53,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,160,"        fields.days = convertField(fields.days, converted);
",8,0,0,1,2,0,4,0,0,13,51,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,162,"        fields.halfdays = convertField(fields.halfdays, converted);
",8,0,0,1,2,0,4,0,0,13,59,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,163,"        fields.hours = convertField(fields.hours, converted);
",8,0,0,1,2,0,4,0,0,13,53,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,164,"        fields.minutes = convertField(fields.minutes, converted);
",8,0,0,1,2,0,4,0,0,13,57,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,165,"        fields.seconds = convertField(fields.seconds, converted);
",8,0,0,1,2,0,4,0,0,13,57,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,166,"        fields.millis = convertField(fields.millis, converted);
",8,0,0,1,2,0,4,0,0,13,55,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,170,"        fields.year = convertField(fields.year, converted);
",8,0,0,1,2,0,4,0,0,13,51,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,171,"        fields.yearOfEra = convertField(fields.yearOfEra, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,172,"        fields.yearOfCentury = convertField(fields.yearOfCentury, converted);
",8,0,0,1,2,0,4,0,0,13,69,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,173,"        fields.centuryOfEra = convertField(fields.centuryOfEra, converted);
",8,0,0,1,2,0,4,0,0,13,67,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,174,"        fields.era = convertField(fields.era, converted);
",8,0,0,1,2,0,4,0,0,13,49,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,175,"        fields.dayOfWeek = convertField(fields.dayOfWeek, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,176,"        fields.dayOfMonth = convertField(fields.dayOfMonth, converted);
",8,0,0,1,2,0,4,0,0,13,63,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,177,"        fields.dayOfYear = convertField(fields.dayOfYear, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,178,"        fields.monthOfYear = convertField(fields.monthOfYear, converted);
",8,0,0,1,2,0,4,0,0,13,65,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,179,"        fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);
",8,0,0,1,2,0,4,0,0,13,71,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,180,"        fields.weekyear = convertField(fields.weekyear, converted);
",8,0,0,1,2,0,4,0,0,13,59,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,181,"        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);
",8,0,0,1,2,0,4,0,0,13,77,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,183,"        fields.millisOfSecond = convertField(fields.millisOfSecond, converted);
",8,0,0,1,2,0,4,0,0,13,71,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,184,"        fields.millisOfDay = convertField(fields.millisOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,65,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,185,"        fields.secondOfMinute = convertField(fields.secondOfMinute, converted);
",8,0,0,1,2,0,4,0,0,13,71,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,186,"        fields.secondOfDay = convertField(fields.secondOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,65,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,187,"        fields.minuteOfHour = convertField(fields.minuteOfHour, converted);
",8,0,0,1,2,0,4,0,0,13,67,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,188,"        fields.minuteOfDay = convertField(fields.minuteOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,65,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,189,"        fields.hourOfDay = convertField(fields.hourOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,190,"        fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);
",8,0,0,1,2,0,4,0,0,13,69,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,191,"        fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,71,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,192,"        fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);
",8,0,0,1,2,0,4,0,0,13,79,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,193,"        fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,67,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,194,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,197,"        if (field == null || !field.isSupported()) {
",2,2,0,2,5,0,4,0,0,9,44,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,198,"            return field;
",2,0,0,0,0,1,0,0,0,2,13,6,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,200,"        if (converted.containsKey(field)) {
",0,0,0,2,5,0,6,0,0,6,35,5,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,201,"            return (DurationField)converted.get(field);
",0,0,0,2,4,1,6,2,0,8,43,7,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,203,"        ZonedDurationField zonedField = new ZonedDurationField(field, getZone());
",4,0,0,2,4,0,2,4,0,10,73,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,204,"        converted.put(field, zonedField);
",0,0,0,1,2,0,8,0,0,8,33,5,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,205,"        return zonedField;
",2,0,0,0,0,1,0,0,0,2,18,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,209,"        if (field == null || !field.isSupported()) {
",2,2,0,2,5,0,4,0,0,9,44,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,212,"        if (converted.containsKey(field)) {
",0,0,0,2,5,0,6,0,0,6,35,5,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,215,"        ZonedDateTimeField zonedField =
",2,0,0,0,0,0,0,2,0,4,31,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,220,"        converted.put(field, zonedField);
",0,0,0,1,2,0,8,0,0,8,33,5,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,221,"        return zonedField;
",2,0,0,0,0,1,0,0,0,2,18,4,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,386,"            super(field.getType());
",0,0,0,2,4,0,4,0,0,4,23,6,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,387,"            if (!field.isSupported()) {
",0,0,0,2,5,0,4,0,0,5,27,5,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,390,"            iField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,391,"            iZone = zone;
",4,0,0,0,0,0,0,0,0,5,13,5,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,392,"            iDurationField = durationField;
",4,0,0,0,0,0,0,0,0,5,31,5,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,393,"            iTimeField = useTimeArithmetic(durationField);
",2,0,0,1,2,0,4,0,0,7,46,5,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,394,"            iRangeDurationField = rangeDurationField;
",4,0,0,0,0,0,0,0,0,5,41,5,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,395,"            iLeapDurationField = leapDurationField;
",4,0,0,0,0,0,0,0,0,5,39,5,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,396,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,281,"            super(field.getType());
",0,0,0,2,4,0,4,0,0,4,23,6,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,282,"            if (!field.isSupported()) {
",0,0,0,2,5,0,4,0,0,5,27,5,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,285,"            iField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,286,"            iTimeField = useTimeArithmetic(field);
",2,0,0,1,2,0,4,0,0,7,38,5,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,287,"            iZone = zone;
",4,0,0,0,0,0,0,0,0,5,13,5,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,288,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02454,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,295,"            return iField.getUnitMillis();
",0,0,0,1,2,1,4,0,0,4,30,6,0.02454,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,315,"        return iParam;
",2,0,0,0,0,1,0,0,0,2,14,4,0.02439,0
defect4j,time,org/joda/time/PeriodType,10,408,"        PeriodType type = cDays;
",4,0,0,0,0,0,0,2,0,6,24,4,0.02439,0
defect4j,time,org/joda/time/PeriodType,10,409,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.02439,0
defect4j,time,org/joda/time/PeriodType,10,410,"            type = new PeriodType(
",2,0,0,0,1,0,0,2,0,5,22,6,0.02439,0
defect4j,time,org/joda/time/PeriodType,10,415,"            cDays = type;
",4,0,0,0,0,0,0,0,0,5,13,6,0.02439,0
defect4j,time,org/joda/time/PeriodType,10,417,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,0.02439,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,726,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.02439,0
defect4j,time,org/joda/time/field/BaseDurationField,10,55,"        return iType;
",2,0,0,0,0,1,0,0,0,2,13,4,0.02439,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,10,139,"        return iRangeField;
",2,0,0,0,0,1,0,0,0,2,19,4,0.02439,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,10,90,"        return iField.getRangeDurationField();
",0,0,0,1,2,1,4,0,0,4,38,5,0.02439,0
defect4j,time,org/joda/time/field/ScaledDurationField,10,147,"        long scalar = iScalar;
",4,0,0,0,0,0,0,0,0,4,22,5,0.02439,0
defect4j,time,org/joda/time/field/ScaledDurationField,10,148,"        int hash = (int) (scalar ^ (scalar >>> 32));
",6,2,0,3,6,0,0,0,0,8,44,5,0.02439,0
defect4j,time,org/joda/time/field/ScaledDurationField,10,149,"        hash += getType().hashCode();
",2,0,0,2,4,0,4,0,0,7,29,4,0.02439,0
defect4j,time,org/joda/time/field/ScaledDurationField,10,150,"        hash += getWrappedField().hashCode();
",2,0,0,2,4,0,4,0,0,7,37,4,0.02439,0
defect4j,time,org/joda/time/field/ScaledDurationField,10,151,"        return hash;
",2,0,0,0,0,1,0,0,0,2,12,4,0.02439,0
defect4j,time,org/joda/time/field/DecoratedDurationField,10,69,"        return iField;
",2,0,0,0,0,1,0,0,0,2,14,4,0.02439,0
defect4j,time,org/joda/time/field/PreciseDurationField,10,142,"        long millis = iUnitMillis;
",4,0,0,0,0,0,0,0,0,4,26,5,0.02439,0
defect4j,time,org/joda/time/field/PreciseDurationField,10,143,"        int hash = (int) (millis ^ (millis >>> 32));
",6,2,0,3,6,0,0,0,0,8,44,5,0.02439,0
defect4j,time,org/joda/time/field/PreciseDurationField,10,144,"        hash += getType().hashCode();
",2,0,0,2,4,0,4,0,0,7,29,4,0.02439,0
defect4j,time,org/joda/time/field/PreciseDurationField,10,145,"        return hash;
",2,0,0,0,0,1,0,0,0,2,12,4,0.02439,0
defect4j,time,org/joda/time/field/MillisDurationField,10,49,"        return DurationFieldType.millis();
",0,0,0,1,2,1,4,0,0,4,34,5,0.02439,0
defect4j,time,org/joda/time/field/MillisDurationField,10,155,"        return (int) getUnitMillis();
",0,0,0,2,4,1,2,0,0,2,29,6,0.02439,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,10,122,"        return iRangeField;
",2,0,0,0,0,1,0,0,0,2,19,4,0.02439,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,10,141,"        return iUnitField;
",2,0,0,0,0,1,0,0,0,2,18,4,0.02439,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,10,101,"        return getWrappedField().getLeapDurationField();
",0,0,0,2,4,1,4,0,0,4,48,5,0.02439,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,10,95,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.02439,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,10,111,"        return iChronology.days();
",0,0,0,1,2,1,4,0,0,4,26,5,0.02439,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,10,94,"        return iChronology.weeks();
",0,0,0,1,2,1,4,0,0,4,27,5,0.02439,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,51,"        return iChronology.months();
",0,0,0,1,2,1,4,0,0,4,28,5,0.02439,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,10,56,"        return iChronology.years();
",0,0,0,1,2,1,4,0,0,4,27,5,0.02439,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,315,"        return iChronology.years();
",0,0,0,1,2,1,4,0,0,4,27,5,0.02439,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,334,"        return iChronology.days();
",0,0,0,1,2,1,4,0,0,4,26,5,0.02439,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,208,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.02439,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,220,"        return iChronology.weeks();
",0,0,0,1,2,1,4,0,0,4,27,5,0.02439,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,10,58,"        return iChronology.weekyears();
",0,0,0,1,2,1,4,0,0,4,31,5,0.02439,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,133,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.02395,0
defect4j,time,org/joda/time/DateTimeUtils,10,282,"        if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.02339,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,122,"        super(base, null);
",2,0,0,1,2,0,0,0,0,3,18,3,0.02326,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,123,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02326,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,63,"    private static final Map<DateTimeZone, ISOChronology> cCache = new HashMap<DateTimeZone, ISOChronology>();
",2,0,0,1,2,3,0,12,0,17,106,2,0.02326,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,65,"        cFastCache = new ISOChronology[FAST_CACHE_SIZE];
",2,0,1,1,2,0,0,2,0,7,48,4,0.02326,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,66,"        INSTANCE_UTC = new ISOChronology(GregorianChronology.getInstanceUTC());
",2,0,0,2,4,0,4,2,0,9,71,4,0.02326,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,67,"        cCache.put(DateTimeZone.UTC, INSTANCE_UTC);
",4,0,0,1,2,0,6,0,0,10,43,5,0.02326,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,68,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02326,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,169,"        if (getBase().getZone() == DateTimeZone.UTC) {
",4,1,0,3,7,0,4,0,0,9,46,4,0.02326,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,171,"            fields.centuryOfEra = new DividedDateTimeField(
",4,0,0,0,1,0,0,2,0,7,47,6,0.02326,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,173,"            fields.yearOfCentury = new RemainderDateTimeField(
",4,0,0,0,1,0,0,2,0,7,50,6,0.02326,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,175,"            fields.weekyearOfCentury = new RemainderDateTimeField(
",4,0,0,0,1,0,0,2,0,7,54,6,0.02326,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,178,"            fields.centuries = fields.centuryOfEra.getDurationField();
",8,0,0,1,2,0,2,0,0,11,58,6,0.02326,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,180,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02326,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,81,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.02326,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,10,46,"        super(GregorianChronology.getInstanceUTC().year(), DateTimeFieldType.yearOfEra());
",0,0,0,4,8,0,10,0,0,10,82,5,0.02326,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,10,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02326,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,10,40,"    static final DateTimeField INSTANCE = new ISOYearOfEraDateTimeField();
",2,0,0,1,2,2,0,4,0,8,70,2,0.02326,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,10,87,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.02326,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,10,91,"        return getWrappedField().getMaximumValue();
",0,0,0,2,4,1,4,0,0,4,43,5,0.02326,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,143,"        if ((base = getBase()) != null) {
",2,1,0,3,7,0,2,0,0,7,33,4,0.02312,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,146,"        return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,5,0.02312,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,148,"        super(base, param, minDaysInFirstWeek);
",6,0,0,1,2,0,0,0,0,6,39,4,0.02312,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,149,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02312,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,68,"    private static final Map<DateTimeZone, GregorianChronology[]> cCache = new HashMap<DateTimeZone, GregorianChronology[]>();
",2,0,0,3,6,3,0,12,0,17,122,2,0.02312,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,71,"        INSTANCE_UTC = getInstance(DateTimeZone.UTC);
",6,0,0,1,2,0,2,0,0,9,45,4,0.02312,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,72,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02312,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,100,"        return getInstance(zone, 4);
",0,0,0,1,2,1,4,0,0,4,28,5,0.02312,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,111,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.02312,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,115,"        synchronized (cCache) {
",2,0,0,1,3,0,0,0,0,2,23,4,0.02312,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,116,"            GregorianChronology[] chronos = cCache.get(zone);
",2,0,0,2,4,0,6,2,0,10,49,6,0.02312,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,117,"            if (chronos == null) {
",2,1,0,1,3,0,0,0,0,3,22,6,0.02312,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,118,"                chronos = new GregorianChronology[7];
",2,0,0,1,2,0,0,2,0,5,37,8,0.02312,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,119,"                cCache.put(zone, chronos);
",0,0,0,1,2,0,8,0,0,8,26,9,0.02312,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,122,"                chrono = chronos[minDaysInFirstWeek - 1];
",4,1,1,1,2,0,0,0,0,8,41,8,0.02312,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,126,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02312,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,127,"            if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.02312,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,128,"                if (zone == DateTimeZone.UTC) {
",6,1,0,1,3,0,0,0,0,7,31,8,0.02312,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,129,"                    chrono = new GregorianChronology(null, null, minDaysInFirstWeek);
",4,0,0,1,2,0,0,2,0,8,65,10,0.02312,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,135,"                chronos[minDaysInFirstWeek - 1] = chrono;
",4,1,1,1,2,0,0,0,0,8,41,8,0.02312,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,137,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02312,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,138,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.02312,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,191,"        if (getBase() == null) {
",0,1,0,2,5,0,2,0,0,4,24,4,0.02312,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,192,"            super.assemble(fields);
",4,0,0,1,2,0,0,0,0,4,23,7,0.02312,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,194,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02312,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,225,"        return MAX_YEAR;
",2,0,0,0,0,1,0,0,0,2,16,4,0.02312,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,229,"        return MILLIS_PER_YEAR;
",2,0,0,0,0,1,0,0,0,2,23,4,0.02312,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,237,"        return MILLIS_PER_MONTH;
",2,0,0,0,0,1,0,0,0,2,24,4,0.02312,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,45,"public final class GregorianChronology extends BasicGJChronology {
",2,0,0,0,1,2,0,2,0,6,66,1,0.02312,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,691,"        return 12;
",0,0,0,0,0,1,0,0,0,0,10,3,0.02299,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,75,"        super(base, param, minDaysInFirstWeek);
",6,0,0,1,2,0,0,0,0,6,39,4,0.02299,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,76,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02299,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,42,"    private static final int[] MIN_DAYS_PER_MONTH_ARRAY = {
",2,0,0,1,3,3,0,0,0,5,55,2,0.02299,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,45,"    private static final int[] MAX_DAYS_PER_MONTH_ARRAY = {
",2,0,0,1,3,3,0,0,0,5,55,2,0.02299,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,53,"        MIN_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];
",2,0,0,1,2,0,0,0,0,3,47,4,0.02299,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,54,"        MAX_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];
",2,0,0,1,2,0,0,0,0,3,47,4,0.02299,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,56,"        long minSum = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.02299,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,57,"        long maxSum = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.02299,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,58,"        for (int i = 0; i < 11; i++) {
",6,1,0,1,3,0,0,0,0,8,30,4,0.02299,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,59,"            long millis = MIN_DAYS_PER_MONTH_ARRAY[i]
",2,0,1,1,2,0,0,0,0,6,41,7,0.02299,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,61,"            minSum += millis;
",4,0,0,0,0,0,0,0,0,5,17,6,0.02299,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,62,"            MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = minSum;
",4,1,1,1,2,0,0,0,0,8,48,6,0.02299,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,64,"            millis = MAX_DAYS_PER_MONTH_ARRAY[i]
",2,0,1,1,2,0,0,0,0,7,36,6,0.02299,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,66,"            maxSum += millis;
",4,0,0,0,0,0,0,0,0,5,17,6,0.02299,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,67,"            MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = maxSum;
",4,1,1,1,2,0,0,0,0,8,48,6,0.02299,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,69,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02299,0
defect4j,time,org/joda/time/DateTimeFieldType,10,164,"        return MILLIS_OF_SECOND_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,4,0.02286,0
defect4j,time,org/joda/time/DateTimeFieldType,10,173,"        return MILLIS_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,4,0.02286,0
defect4j,time,org/joda/time/DateTimeFieldType,10,182,"        return SECOND_OF_MINUTE_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,4,0.02286,0
defect4j,time,org/joda/time/DateTimeFieldType,10,191,"        return SECOND_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,4,0.02286,0
defect4j,time,org/joda/time/DateTimeFieldType,10,200,"        return MINUTE_OF_HOUR_TYPE;
",2,0,0,0,0,1,0,0,0,2,27,4,0.02286,0
defect4j,time,org/joda/time/DateTimeFieldType,10,209,"        return MINUTE_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,4,0.02286,0
defect4j,time,org/joda/time/DateTimeFieldType,10,218,"        return HOUR_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,4,0.02286,0
defect4j,time,org/joda/time/DateTimeFieldType,10,236,"        return HOUR_OF_HALFDAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,28,4,0.02286,0
defect4j,time,org/joda/time/DateTimeFieldType,10,245,"        return CLOCKHOUR_OF_HALFDAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,33,4,0.02286,0
defect4j,time,org/joda/time/DateTimeFieldType,10,254,"        return HALFDAY_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,27,4,0.02286,0
defect4j,time,org/joda/time/DateTimeFieldType,10,264,"        return DAY_OF_WEEK_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,4,0.02286,0
defect4j,time,org/joda/time/DateTimeFieldType,10,273,"        return DAY_OF_MONTH_TYPE;
",2,0,0,0,0,1,0,0,0,2,25,4,0.02286,0
defect4j,time,org/joda/time/DateTimeFieldType,10,282,"        return DAY_OF_YEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,4,0.02286,0
defect4j,time,org/joda/time/DateTimeFieldType,10,291,"        return WEEK_OF_WEEKYEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,4,0.02286,0
defect4j,time,org/joda/time/DateTimeFieldType,10,300,"        return WEEKYEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,21,4,0.02286,0
defect4j,time,org/joda/time/DateTimeFieldType,10,309,"        return WEEKYEAR_OF_CENTURY_TYPE;
",2,0,0,0,0,1,0,0,0,2,32,4,0.02286,0
defect4j,time,org/joda/time/DateTimeFieldType,10,318,"        return MONTH_OF_YEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,4,0.02286,0
defect4j,time,org/joda/time/DateTimeFieldType,10,336,"        return YEAR_OF_ERA_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,4,0.02286,0
defect4j,time,org/joda/time/DateTimeFieldType,10,345,"        return YEAR_OF_CENTURY_TYPE;
",2,0,0,0,0,1,0,0,0,2,28,4,0.02286,0
defect4j,time,org/joda/time/DateTimeFieldType,10,354,"        return CENTURY_OF_ERA_TYPE;
",2,0,0,0,0,1,0,0,0,2,27,4,0.02286,0
defect4j,time,org/joda/time/DateTimeFieldType,10,363,"        return ERA_TYPE;
",2,0,0,0,0,1,0,0,0,2,16,4,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,99,"    protected AssembledChronology(Chronology base, Object param) {
",6,0,0,1,3,1,0,4,0,11,62,2,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,100,"        iBase = base;
",4,0,0,0,0,0,0,0,0,5,13,4,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,101,"        iParam = param;
",4,0,0,0,0,0,0,0,0,5,15,4,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,102,"        setFields();
",0,0,0,1,2,0,2,0,0,2,12,5,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,103,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,156,"        return iMillis;
",2,0,0,0,0,1,0,0,0,2,15,4,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,160,"        return iMillisOfSecond;
",2,0,0,0,0,1,0,0,0,2,23,4,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,164,"        return iMillisOfDay;
",2,0,0,0,0,1,0,0,0,2,20,4,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,168,"        return iSeconds;
",2,0,0,0,0,1,0,0,0,2,16,4,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,172,"        return iSecondOfMinute;
",2,0,0,0,0,1,0,0,0,2,23,4,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,176,"        return iSecondOfDay;
",2,0,0,0,0,1,0,0,0,2,20,4,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,180,"        return iMinutes;
",2,0,0,0,0,1,0,0,0,2,16,4,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,184,"        return iMinuteOfHour;
",2,0,0,0,0,1,0,0,0,2,21,4,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,188,"        return iMinuteOfDay;
",2,0,0,0,0,1,0,0,0,2,20,4,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,192,"        return iHours;
",2,0,0,0,0,1,0,0,0,2,14,4,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,196,"        return iHourOfDay;
",2,0,0,0,0,1,0,0,0,2,18,4,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,200,"        return iClockhourOfDay;
",2,0,0,0,0,1,0,0,0,2,23,4,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,204,"        return iHalfdays;
",2,0,0,0,0,1,0,0,0,2,17,4,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,208,"        return iHourOfHalfday;
",2,0,0,0,0,1,0,0,0,2,22,4,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,212,"        return iClockhourOfHalfday;
",2,0,0,0,0,1,0,0,0,2,27,4,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,216,"        return iHalfdayOfDay;
",2,0,0,0,0,1,0,0,0,2,21,4,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,220,"        return iDays;
",2,0,0,0,0,1,0,0,0,2,13,4,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,224,"        return iDayOfWeek;
",2,0,0,0,0,1,0,0,0,2,18,4,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,228,"        return iDayOfMonth;
",2,0,0,0,0,1,0,0,0,2,19,4,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,232,"        return iDayOfYear;
",2,0,0,0,0,1,0,0,0,2,18,4,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,236,"        return iWeeks;
",2,0,0,0,0,1,0,0,0,2,14,4,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,240,"        return iWeekOfWeekyear;
",2,0,0,0,0,1,0,0,0,2,23,4,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,244,"        return iWeekyears;
",2,0,0,0,0,1,0,0,0,2,18,4,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,248,"        return iWeekyear;
",2,0,0,0,0,1,0,0,0,2,17,4,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,252,"        return iWeekyearOfCentury;
",2,0,0,0,0,1,0,0,0,2,26,4,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,256,"        return iMonths;
",2,0,0,0,0,1,0,0,0,2,15,4,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,260,"        return iMonthOfYear;
",2,0,0,0,0,1,0,0,0,2,20,4,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,264,"        return iYears;
",2,0,0,0,0,1,0,0,0,2,14,4,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,268,"        return iYear;
",2,0,0,0,0,1,0,0,0,2,13,4,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,272,"        return iYearOfEra;
",2,0,0,0,0,1,0,0,0,2,18,4,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,276,"        return iYearOfCentury;
",2,0,0,0,0,1,0,0,0,2,22,4,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,280,"        return iCenturies;
",2,0,0,0,0,1,0,0,0,2,18,4,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,284,"        return iCenturyOfEra;
",2,0,0,0,0,1,0,0,0,2,21,4,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,288,"        return iEras;
",2,0,0,0,0,1,0,0,0,2,13,4,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,292,"        return iEra;
",2,0,0,0,0,1,0,0,0,2,12,4,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,308,"        return iBase;
",2,0,0,0,0,1,0,0,0,2,13,4,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,319,"        Fields fields = new Fields();
",2,0,0,1,2,0,0,4,0,6,29,4,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,320,"        if (iBase != null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,321,"            fields.copyFieldsFrom(iBase);
",0,0,0,1,2,0,6,0,0,6,29,7,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,323,"        assemble(fields);
",0,0,0,1,2,0,4,0,0,4,17,5,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,327,"            iMillis    = (f = fields.millis)    != null ? f : super.millis();
",12,1,0,2,4,0,0,0,0,15,65,5,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,328,"            iSeconds   = (f = fields.seconds)   != null ? f : super.seconds();
",12,1,0,2,4,0,0,0,0,15,66,5,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,329,"            iMinutes   = (f = fields.minutes)   != null ? f : super.minutes();
",12,1,0,2,4,0,0,0,0,15,66,5,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,330,"            iHours     = (f = fields.hours)     != null ? f : super.hours();
",12,1,0,2,4,0,0,0,0,15,64,5,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,331,"            iHalfdays  = (f = fields.halfdays)  != null ? f : super.halfdays();
",12,1,0,2,4,0,0,0,0,15,67,5,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,332,"            iDays      = (f = fields.days)      != null ? f : super.days();
",12,1,0,2,4,0,0,0,0,15,63,5,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,333,"            iWeeks     = (f = fields.weeks)     != null ? f : super.weeks();
",12,1,0,2,4,0,0,0,0,15,64,5,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,334,"            iWeekyears = (f = fields.weekyears) != null ? f : super.weekyears();
",12,1,0,2,4,0,0,0,0,15,68,5,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,335,"            iMonths    = (f = fields.months)    != null ? f : super.months();
",12,1,0,2,4,0,0,0,0,15,65,5,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,336,"            iYears     = (f = fields.years)     != null ? f : super.years();
",12,1,0,2,4,0,0,0,0,15,64,5,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,337,"            iCenturies = (f = fields.centuries) != null ? f : super.centuries();
",12,1,0,2,4,0,0,0,0,15,68,5,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,338,"            iEras      = (f = fields.eras)      != null ? f : super.eras();
",12,1,0,2,4,0,0,0,0,15,63,5,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,343,"            iMillisOfSecond     = (f = fields.millisOfSecond)     != null ? f : super.millisOfSecond();
",12,1,0,2,4,0,0,0,0,15,91,5,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,344,"            iMillisOfDay        = (f = fields.millisOfDay)        != null ? f : super.millisOfDay();
",12,1,0,2,4,0,0,0,0,15,88,5,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,345,"            iSecondOfMinute     = (f = fields.secondOfMinute)     != null ? f : super.secondOfMinute();
",12,1,0,2,4,0,0,0,0,15,91,5,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,346,"            iSecondOfDay        = (f = fields.secondOfDay)        != null ? f : super.secondOfDay();
",12,1,0,2,4,0,0,0,0,15,88,5,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,347,"            iMinuteOfHour       = (f = fields.minuteOfHour)       != null ? f : super.minuteOfHour();
",12,1,0,2,4,0,0,0,0,15,89,5,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,348,"            iMinuteOfDay        = (f = fields.minuteOfDay)        != null ? f : super.minuteOfDay();
",12,1,0,2,4,0,0,0,0,15,88,5,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,349,"            iHourOfDay          = (f = fields.hourOfDay)          != null ? f : super.hourOfDay();
",12,1,0,2,4,0,0,0,0,15,86,5,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,350,"            iClockhourOfDay     = (f = fields.clockhourOfDay)     != null ? f : super.clockhourOfDay();
",12,1,0,2,4,0,0,0,0,15,91,5,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,351,"            iHourOfHalfday      = (f = fields.hourOfHalfday)      != null ? f : super.hourOfHalfday();
",12,1,0,2,4,0,0,0,0,15,90,5,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,352,"            iClockhourOfHalfday = (f = fields.clockhourOfHalfday) != null ? f : super.clockhourOfHalfday();
",12,1,0,2,4,0,0,0,0,15,95,5,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,353,"            iHalfdayOfDay       = (f = fields.halfdayOfDay)       != null ? f : super.halfdayOfDay();
",12,1,0,2,4,0,0,0,0,15,89,5,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,354,"            iDayOfWeek          = (f = fields.dayOfWeek)          != null ? f : super.dayOfWeek();
",12,1,0,2,4,0,0,0,0,15,86,5,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,355,"            iDayOfMonth         = (f = fields.dayOfMonth)         != null ? f : super.dayOfMonth();
",12,1,0,2,4,0,0,0,0,15,87,5,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,356,"            iDayOfYear          = (f = fields.dayOfYear)          != null ? f : super.dayOfYear();
",12,1,0,2,4,0,0,0,0,15,86,5,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,357,"            iWeekOfWeekyear     = (f = fields.weekOfWeekyear)     != null ? f : super.weekOfWeekyear();
",12,1,0,2,4,0,0,0,0,15,91,5,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,358,"            iWeekyear           = (f = fields.weekyear)           != null ? f : super.weekyear();
",12,1,0,2,4,0,0,0,0,15,85,5,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,359,"            iWeekyearOfCentury  = (f = fields.weekyearOfCentury)  != null ? f : super.weekyearOfCentury();
",12,1,0,2,4,0,0,0,0,15,94,5,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,360,"            iMonthOfYear        = (f = fields.monthOfYear)        != null ? f : super.monthOfYear();
",12,1,0,2,4,0,0,0,0,15,88,5,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,361,"            iYear               = (f = fields.year)               != null ? f : super.year();
",12,1,0,2,4,0,0,0,0,15,81,5,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,362,"            iYearOfEra          = (f = fields.yearOfEra)          != null ? f : super.yearOfEra();
",12,1,0,2,4,0,0,0,0,15,86,5,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,363,"            iYearOfCentury      = (f = fields.yearOfCentury)      != null ? f : super.yearOfCentury();
",12,1,0,2,4,0,0,0,0,15,90,5,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,364,"            iCenturyOfEra       = (f = fields.centuryOfEra)       != null ? f : super.centuryOfEra();
",12,1,0,2,4,0,0,0,0,15,89,5,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,365,"            iEra                = (f = fields.era)                != null ? f : super.era();
",12,1,0,2,4,0,0,0,0,15,80,5,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,369,"        if (iBase == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,370,"            flags = 0;
",2,0,0,0,0,0,0,0,0,3,10,6,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,372,"            flags = 
",2,0,0,0,0,0,0,0,0,3,7,6,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,385,"        iBaseFlags = flags;
",4,0,0,0,0,0,0,0,0,5,19,4,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,386,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02286,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,660,"        return UnsupportedDurationField.getInstance(DurationFieldType.eras());
",0,0,0,2,4,1,8,0,0,8,70,5,0.02286,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,10,92,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.02286,0
defect4j,time,org/joda/time/DateTimeFieldType,10,452,"            return iUnitType;
",2,0,0,0,0,1,0,0,0,2,17,5,0.02286,0
defect4j,time,org/joda/time/DateTimeFieldType,10,457,"            return iRangeType;
",2,0,0,0,0,1,0,0,0,2,18,5,0.02286,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,50,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.02286,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,51,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.02286,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,54,"        iType = type;
",4,0,0,0,0,0,0,0,0,5,13,4,0.02286,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,55,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02286,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,58,"        return iType;
",2,0,0,0,0,1,0,0,0,2,13,4,0.02286,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,69,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.02286,0
defect4j,time,org/joda/time/field/BaseDurationField,10,47,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.02286,0
defect4j,time,org/joda/time/field/BaseDurationField,10,48,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.02286,0
defect4j,time,org/joda/time/field/BaseDurationField,10,51,"        iType = type;
",4,0,0,0,0,0,0,0,0,5,13,4,0.02286,0
defect4j,time,org/joda/time/field/BaseDurationField,10,52,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02286,0
defect4j,time,org/joda/time/field/BaseDurationField,10,66,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.02286,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,10,52,"        super(field, type);
",4,0,0,1,2,0,0,0,0,4,19,4,0.02286,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,10,54,"        if (divisor < 2) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.02286,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,10,58,"        DurationField rangeField = field.getDurationField();
",2,0,0,1,2,0,4,2,0,8,52,4,0.02286,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,10,59,"        if (rangeField == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.02286,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,10,62,"            iRangeField = new ScaledDurationField(
",2,0,0,0,1,0,0,2,0,5,38,6,0.02286,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,10,66,"        iDivisor = divisor;
",4,0,0,0,0,0,0,0,0,5,19,4,0.02286,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,10,67,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02286,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,10,76,"        this(dividedField, dividedField.getType());
",2,0,0,2,4,0,4,0,0,6,43,4,0.02286,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,10,77,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02286,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,10,87,"        super(dividedField.getWrappedField(), type);
",2,0,0,2,4,0,4,0,0,6,44,4,0.02286,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,10,88,"        iDivisor = dividedField.iDivisor;
",6,0,0,0,0,0,0,0,0,7,33,4,0.02286,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,10,89,"        iRangeField = dividedField.iDurationField;
",6,0,0,0,0,0,0,0,0,7,42,4,0.02286,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,10,90,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02286,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,10,148,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.02286,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,10,158,"        return iDivisor - 1;
",2,1,0,0,0,1,0,0,0,3,20,4,0.02286,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,10,54,"        super(type);
",2,0,0,1,2,0,0,0,0,2,12,4,0.02286,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,10,55,"        if (field == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.02286,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,10,58,"        if (!field.isSupported()) {
",0,0,0,2,5,0,4,0,0,5,27,4,0.02286,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,10,61,"        iField = field;
",4,0,0,0,0,0,0,0,0,5,15,4,0.02286,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,10,62,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02286,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,10,70,"        return iField;
",2,0,0,0,0,1,0,0,0,2,14,4,0.02286,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,10,86,"        return iField.getDurationField();
",0,0,0,1,2,1,4,0,0,4,33,5,0.02286,0
defect4j,time,org/joda/time/field/ScaledDurationField,10,47,"        super(field, type);
",4,0,0,1,2,0,0,0,0,4,19,4,0.02286,0
defect4j,time,org/joda/time/field/ScaledDurationField,10,48,"        if (scalar == 0 || scalar == 1) {
",4,3,0,1,3,0,0,0,0,7,33,4,0.02286,0
defect4j,time,org/joda/time/field/ScaledDurationField,10,51,"        iScalar = scalar;
",4,0,0,0,0,0,0,0,0,5,17,4,0.02286,0
defect4j,time,org/joda/time/field/ScaledDurationField,10,52,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02286,0
defect4j,time,org/joda/time/field/DecoratedDurationField,10,52,"        super(type);
",2,0,0,1,2,0,0,0,0,2,12,4,0.02286,0
defect4j,time,org/joda/time/field/DecoratedDurationField,10,53,"        if (field == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.02286,0
defect4j,time,org/joda/time/field/DecoratedDurationField,10,56,"        if (!field.isSupported()) {
",0,0,0,2,5,0,4,0,0,5,27,4,0.02286,0
defect4j,time,org/joda/time/field/DecoratedDurationField,10,59,"        iField = field;
",4,0,0,0,0,0,0,0,0,5,15,4,0.02286,0
defect4j,time,org/joda/time/field/DecoratedDurationField,10,60,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02286,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,56,"        super(field, type);
",4,0,0,1,2,0,0,0,0,4,19,4,0.02286,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,58,"        if (divisor < 2) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.02286,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,62,"        DurationField unitField = field.getDurationField();
",2,0,0,1,2,0,4,2,0,8,51,4,0.02286,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,63,"        if (unitField == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.02286,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,66,"            iDurationField = new ScaledDurationField(
",2,0,0,0,1,0,0,2,0,5,41,6,0.02286,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,70,"        iDivisor = divisor;
",4,0,0,0,0,0,0,0,0,5,19,4,0.02286,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,72,"        int i = field.getMinimumValue();
",2,0,0,1,2,0,4,0,0,6,32,5,0.02286,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,73,"        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);
",12,5,0,3,6,0,0,0,0,17,59,5,0.02286,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,75,"        int j = field.getMaximumValue();
",2,0,0,1,2,0,4,0,0,6,32,5,0.02286,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,76,"        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);
",12,5,0,3,6,0,0,0,0,17,59,5,0.02286,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,78,"        iMin = min;
",4,0,0,0,0,0,0,0,0,5,11,4,0.02286,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,79,"        iMax = max;
",4,0,0,0,0,0,0,0,0,5,11,4,0.02286,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,80,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02286,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,182,"        return iDurationField;
",2,0,0,0,0,1,0,0,0,2,22,4,0.02286,0
defect4j,time,org/joda/time/field/PreciseDurationField,10,43,"        super(type);
",2,0,0,1,2,0,0,0,0,2,12,4,0.02286,0
defect4j,time,org/joda/time/field/PreciseDurationField,10,44,"        iUnitMillis = unitMillis;
",4,0,0,0,0,0,0,0,0,5,25,4,0.02286,0
defect4j,time,org/joda/time/field/PreciseDurationField,10,45,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02286,0
defect4j,time,org/joda/time/field/PreciseDurationField,10,54,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.02286,0
defect4j,time,org/joda/time/field/PreciseDurationField,10,63,"        return iUnitMillis;
",2,0,0,0,0,1,0,0,0,2,19,4,0.02286,0
defect4j,time,org/joda/time/field/MillisDurationField,10,44,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.02286,0
defect4j,time,org/joda/time/field/MillisDurationField,10,45,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02286,0
defect4j,time,org/joda/time/field/MillisDurationField,10,38,"    public static final DurationField INSTANCE = new MillisDurationField();
",2,0,0,1,2,3,0,4,0,9,71,2,0.02286,0
defect4j,time,org/joda/time/field/MillisDurationField,10,62,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.02286,0
defect4j,time,org/joda/time/field/MillisDurationField,10,71,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.02286,0
defect4j,time,org/joda/time/field/MillisDurationField,10,80,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.02286,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,10,57,"        super(type, unit);
",4,0,0,1,2,0,0,0,0,4,18,4,0.02286,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,10,59,"        if (!range.isPrecise()) {
",0,0,0,2,5,0,4,0,0,5,25,4,0.02286,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,10,63,"        long rangeMillis = range.getUnitMillis();
",2,0,0,1,2,0,4,0,0,6,41,5,0.02286,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,10,64,"        iRange = (int)(rangeMillis / getUnitMillis());
",4,1,0,3,6,0,2,0,0,8,46,4,0.02286,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,10,65,"        if (iRange < 2) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.02286,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,10,69,"        iRangeField = range;
",4,0,0,0,0,0,0,0,0,5,20,4,0.02286,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,10,70,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02286,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,10,48,"        super(type);
",2,0,0,1,2,0,0,0,0,2,12,4,0.02286,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,10,50,"        if (!unit.isPrecise()) {
",0,0,0,2,5,0,4,0,0,5,24,4,0.02286,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,10,54,"        iUnitMillis = unit.getUnitMillis();
",2,0,0,1,2,0,4,0,0,7,35,4,0.02286,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,10,55,"        if (iUnitMillis < 1) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.02286,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,10,59,"        iUnitField = unit;
",4,0,0,0,0,0,0,0,0,5,18,4,0.02286,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,10,60,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02286,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,10,150,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.02286,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,10,154,"        return iUnitMillis;
",2,0,0,0,0,1,0,0,0,2,19,4,0.02286,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,10,45,"        super(field, type);
",4,0,0,1,2,0,0,0,0,4,19,4,0.02286,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,10,46,"        if (field.getMinimumValue() != 0) {
",0,1,0,2,5,0,4,0,0,5,35,4,0.02286,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,10,49,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02286,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,10,55,"        super(type);
",2,0,0,1,2,0,0,0,0,2,12,4,0.02286,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,10,56,"        iUnitMillis = unitMillis;
",4,0,0,0,0,0,0,0,0,5,25,4,0.02286,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,10,57,"        iDurationField = new LinkedDurationField(type.getDurationType());
",2,0,0,2,4,0,4,2,0,9,65,4,0.02286,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,10,58,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02286,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,10,137,"        return iDurationField;
",2,0,0,0,0,1,0,0,0,2,22,4,0.02286,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,10,151,"        LinkedDurationField(DurationFieldType type) {
",4,0,0,1,3,0,0,2,0,6,45,3,0.02286,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,10,152,"            super(type);
",2,0,0,1,2,0,0,0,0,2,12,5,0.02286,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,10,153,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02286,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,10,46,"        this(field, (field == null ? null : field.getType()), offset, Integer.MIN_VALUE, Integer.MAX_VALUE);
",14,1,0,3,6,0,4,0,0,19,100,4,0.02286,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,10,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02286,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,10,58,"        this(field, type, offset, Integer.MIN_VALUE, Integer.MAX_VALUE);
",14,0,0,1,2,0,0,0,0,14,64,4,0.02286,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,10,59,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02286,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,10,73,"        super(field, type);
",4,0,0,1,2,0,0,0,0,4,19,4,0.02286,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,10,75,"        if (offset == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.02286,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,10,79,"        iOffset = offset;
",4,0,0,0,0,0,0,0,0,5,17,4,0.02286,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,10,81,"        if (minValue < (field.getMinimumValue() + offset)) {
",4,2,0,3,7,0,4,0,0,10,52,4,0.02286,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,10,82,"            iMin = field.getMinimumValue() + offset;
",4,1,0,1,2,0,4,0,0,10,40,6,0.02286,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,10,86,"        if (maxValue > (field.getMaximumValue() + offset)) {
",4,2,0,3,7,0,4,0,0,10,52,4,0.02286,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,10,87,"            iMax = field.getMaximumValue() + offset;
",4,1,0,1,2,0,4,0,0,10,40,6,0.02286,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,10,91,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02286,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,10,174,"        return iMin;
",2,0,0,0,0,1,0,0,0,2,12,4,0.02286,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,10,183,"        return iMax;
",2,0,0,0,0,1,0,0,0,2,12,4,0.02286,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,10,46,"        super(DateTimeFieldType.era());
",0,0,0,2,4,0,4,0,0,4,31,5,0.02286,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,10,47,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.02286,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,10,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,131,"        super(base, param);
",4,0,0,1,2,0,0,0,0,4,19,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,126,"    private transient final YearInfo[] iYearInfoCache = new YearInfo[CACHE_SIZE];
",2,0,1,2,4,3,0,4,0,11,77,2,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,133,"        if (minDaysInFirstWeek < 1 || minDaysInFirstWeek > 7) {
",4,3,0,1,3,0,0,0,0,7,55,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,138,"        iMinDaysInFirstWeek = minDaysInFirstWeek;
",4,0,0,0,0,0,0,0,0,5,41,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,139,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,76,"        cMillisField = MillisDurationField.INSTANCE;
",6,0,0,0,0,0,0,0,0,7,44,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,77,"        cSecondsField = new PreciseDurationField
",2,0,0,0,0,0,0,2,0,5,40,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,79,"        cMinutesField = new PreciseDurationField
",2,0,0,0,0,0,0,2,0,5,40,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,81,"        cHoursField = new PreciseDurationField
",2,0,0,0,0,0,0,2,0,5,38,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,83,"        cHalfdaysField = new PreciseDurationField
",2,0,0,0,0,0,0,2,0,5,41,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,85,"        cDaysField = new PreciseDurationField
",2,0,0,0,0,0,0,2,0,5,37,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,87,"        cWeeksField = new PreciseDurationField
",2,0,0,0,0,0,0,2,0,5,38,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,90,"        cMillisOfSecondField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,47,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,93,"        cMillisOfDayField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,44,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,96,"        cSecondOfMinuteField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,47,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,99,"        cSecondOfDayField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,44,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,102,"        cMinuteOfHourField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,45,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,105,"        cMinuteOfDayField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,44,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,108,"        cHourOfDayField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,42,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,111,"        cHourOfHalfdayField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,46,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,114,"        cClockhourOfDayField = new ZeroIsMaxDateTimeField
",2,0,0,0,0,0,0,2,0,5,49,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,117,"        cClockhourOfHalfdayField = new ZeroIsMaxDateTimeField
",2,0,0,0,0,0,0,2,0,5,53,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,120,"        cHalfdayOfDayField = new HalfdayField();
",2,0,0,1,2,0,0,2,0,5,40,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,121,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,241,"        fields.millis = cMillisField;
",6,0,0,0,0,0,0,0,0,7,29,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,242,"        fields.seconds = cSecondsField;
",6,0,0,0,0,0,0,0,0,7,31,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,243,"        fields.minutes = cMinutesField;
",6,0,0,0,0,0,0,0,0,7,31,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,244,"        fields.hours = cHoursField;
",6,0,0,0,0,0,0,0,0,7,27,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,245,"        fields.halfdays = cHalfdaysField;
",6,0,0,0,0,0,0,0,0,7,33,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,246,"        fields.days = cDaysField;
",6,0,0,0,0,0,0,0,0,7,25,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,247,"        fields.weeks = cWeeksField;
",6,0,0,0,0,0,0,0,0,7,27,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,249,"        fields.millisOfSecond = cMillisOfSecondField;
",6,0,0,0,0,0,0,0,0,7,45,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,250,"        fields.millisOfDay = cMillisOfDayField;
",6,0,0,0,0,0,0,0,0,7,39,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,251,"        fields.secondOfMinute = cSecondOfMinuteField;
",6,0,0,0,0,0,0,0,0,7,45,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,252,"        fields.secondOfDay = cSecondOfDayField;
",6,0,0,0,0,0,0,0,0,7,39,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,253,"        fields.minuteOfHour = cMinuteOfHourField;
",6,0,0,0,0,0,0,0,0,7,41,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,254,"        fields.minuteOfDay = cMinuteOfDayField;
",6,0,0,0,0,0,0,0,0,7,39,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,255,"        fields.hourOfDay = cHourOfDayField;
",6,0,0,0,0,0,0,0,0,7,35,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,256,"        fields.hourOfHalfday = cHourOfHalfdayField;
",6,0,0,0,0,0,0,0,0,7,43,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,257,"        fields.clockhourOfDay = cClockhourOfDayField;
",6,0,0,0,0,0,0,0,0,7,45,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,258,"        fields.clockhourOfHalfday = cClockhourOfHalfdayField;
",6,0,0,0,0,0,0,0,0,7,53,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,259,"        fields.halfdayOfDay = cHalfdayOfDayField;
",6,0,0,0,0,0,0,0,0,7,41,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,264,"        fields.year = new BasicYearDateTimeField(this);
",4,0,0,1,2,0,0,2,0,7,47,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,265,"        fields.yearOfEra = new GJYearOfEraDateTimeField(fields.year, this);
",8,0,0,1,2,0,0,2,0,11,67,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,268,"        DateTimeField field = new OffsetDateTimeField(
",2,0,0,0,1,0,0,4,0,6,46,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,270,"        fields.centuryOfEra = new DividedDateTimeField(
",4,0,0,0,1,0,0,2,0,7,47,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,273,"        field = new RemainderDateTimeField(
",2,0,0,0,1,0,0,2,0,5,35,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,275,"        fields.yearOfCentury = new OffsetDateTimeField(
",4,0,0,0,1,0,0,2,0,7,47,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,278,"        fields.era = new GJEraDateTimeField(this);
",4,0,0,1,2,0,0,2,0,7,42,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,279,"        fields.dayOfWeek = new GJDayOfWeekDateTimeField(this, fields.days);
",8,0,0,1,2,0,0,2,0,11,67,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,280,"        fields.dayOfMonth = new BasicDayOfMonthDateTimeField(this, fields.days);
",8,0,0,1,2,0,0,2,0,11,72,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,281,"        fields.dayOfYear = new BasicDayOfYearDateTimeField(this, fields.days);
",8,0,0,1,2,0,0,2,0,11,70,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,282,"        fields.monthOfYear = new GJMonthOfYearDateTimeField(this);
",4,0,0,1,2,0,0,2,0,7,58,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,283,"        fields.weekyear = new BasicWeekyearDateTimeField(this);
",4,0,0,1,2,0,0,2,0,7,55,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,284,"        fields.weekOfWeekyear = new BasicWeekOfWeekyearDateTimeField(this, fields.weeks);
",8,0,0,1,2,0,0,2,0,11,81,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,286,"        field = new RemainderDateTimeField(
",2,0,0,0,1,0,0,2,0,5,35,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,288,"        fields.weekyearOfCentury = new OffsetDateTimeField(
",4,0,0,0,1,0,0,2,0,7,51,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,294,"        fields.years = fields.year.getDurationField();
",8,0,0,1,2,0,2,0,0,11,46,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,295,"        fields.centuries = fields.centuryOfEra.getDurationField();
",8,0,0,1,2,0,2,0,0,11,58,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,296,"        fields.months = fields.monthOfYear.getDurationField();
",8,0,0,1,2,0,2,0,0,11,54,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,297,"        fields.weekyears = fields.weekyear.getDurationField();
",8,0,0,1,2,0,2,0,0,11,54,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,298,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,50,"abstract class BasicChronology extends AssembledChronology {
",2,0,0,0,1,1,0,2,0,5,60,1,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,750,"            super(DateTimeFieldType.halfdayOfDay(), cHalfdaysField, cDaysField);
",4,0,0,2,4,0,4,0,0,8,68,5,0.02286,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,751,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02286,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,10,45,"        super(DateTimeFieldType.year(), chronology.getAverageMillisPerYear());
",0,0,0,3,6,0,8,0,0,8,70,5,0.02286,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,10,46,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,10,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02286,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,10,119,"        return iChronology.getMaxYear();
",0,0,0,1,2,1,4,0,0,4,32,5,0.02286,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,10,40,"        super(yearField, DateTimeFieldType.yearOfEra());
",2,0,0,2,4,0,4,0,0,6,48,4,0.02286,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,10,41,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.02286,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,10,42,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02286,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,10,93,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.02286,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,10,97,"        return getWrappedField().getMaximumValue();
",0,0,0,2,4,1,4,0,0,4,43,5,0.02286,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,10,45,"        super(DateTimeFieldType.dayOfWeek(), days);
",2,0,0,2,4,0,4,0,0,6,43,4,0.02286,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,10,46,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.02286,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,10,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02286,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,41,"        super(DateTimeFieldType.dayOfMonth(), days);
",2,0,0,2,4,0,4,0,0,6,44,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,42,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,43,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02286,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,10,41,"        super(DateTimeFieldType.dayOfYear(), days);
",2,0,0,2,4,0,4,0,0,6,43,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,10,42,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,10,43,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02286,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,10,37,"        super(chronology, 2);
",2,0,0,1,2,0,0,0,0,2,21,4,0.02286,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,10,38,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02286,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,51,"        super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth());
",0,0,0,3,6,0,8,0,0,8,78,5,0.02286,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,52,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,53,"        iMax = iChronology.getMaxMonth();
",2,0,0,1,2,0,4,0,0,7,33,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,54,"        iLeapMonth = leapMonth;
",4,0,0,0,0,0,0,0,0,5,23,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,55,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02286,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,44,"        super(DateTimeFieldType.weekyear(), chronology.getAverageMillisPerYear());
",0,0,0,3,6,0,8,0,0,8,74,5,0.02286,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,45,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,46,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02286,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,10,42,"        super(DateTimeFieldType.weekOfWeekyear(), weeks);
",2,0,0,2,4,0,4,0,0,6,49,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,10,43,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.02286,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,10,44,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,436,"        Fields() {
",2,0,0,1,3,0,0,0,0,2,10,3,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,437,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,445,"                if (isSupported(f = chrono.millis())) {
",2,0,0,3,7,0,6,0,0,9,39,7,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,446,"                    millis = f;
",4,0,0,0,0,0,0,0,0,5,11,8,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,448,"                if (isSupported(f = chrono.seconds())) {
",2,0,0,3,7,0,6,0,0,9,40,7,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,449,"                    seconds = f;
",4,0,0,0,0,0,0,0,0,5,12,8,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,451,"                if (isSupported(f = chrono.minutes())) {
",2,0,0,3,7,0,6,0,0,9,40,7,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,452,"                    minutes = f;
",4,0,0,0,0,0,0,0,0,5,12,8,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,454,"                if (isSupported(f = chrono.hours())) {
",2,0,0,3,7,0,6,0,0,9,38,7,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,455,"                    hours = f;
",4,0,0,0,0,0,0,0,0,5,10,8,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,457,"                if (isSupported(f = chrono.halfdays())) {
",2,0,0,3,7,0,6,0,0,9,41,7,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,458,"                    halfdays = f;
",4,0,0,0,0,0,0,0,0,5,13,8,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,460,"                if (isSupported(f = chrono.days())) {
",2,0,0,3,7,0,6,0,0,9,37,7,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,461,"                    days = f;
",4,0,0,0,0,0,0,0,0,5,9,8,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,463,"                if (isSupported(f = chrono.weeks())) {
",2,0,0,3,7,0,6,0,0,9,38,7,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,464,"                    weeks = f;
",4,0,0,0,0,0,0,0,0,5,10,8,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,466,"                if (isSupported(f = chrono.weekyears())) {
",2,0,0,3,7,0,6,0,0,9,42,7,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,467,"                    weekyears = f;
",4,0,0,0,0,0,0,0,0,5,14,8,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,469,"                if (isSupported(f = chrono.months())) {
",2,0,0,3,7,0,6,0,0,9,39,7,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,470,"                    months = f;
",4,0,0,0,0,0,0,0,0,5,11,8,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,472,"                if (isSupported(f = chrono.years())) {
",2,0,0,3,7,0,6,0,0,9,38,7,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,473,"                    years = f;
",4,0,0,0,0,0,0,0,0,5,10,8,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,475,"                if (isSupported(f = chrono.centuries())) {
",2,0,0,3,7,0,6,0,0,9,42,7,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,476,"                    centuries = f;
",4,0,0,0,0,0,0,0,0,5,14,8,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,478,"                if (isSupported(f = chrono.eras())) {
",2,0,0,3,7,0,6,0,0,9,37,7,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,485,"                if (isSupported(f = chrono.millisOfSecond())) {
",2,0,0,3,7,0,6,0,0,9,47,7,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,486,"                    millisOfSecond = f;
",4,0,0,0,0,0,0,0,0,5,19,8,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,488,"                if (isSupported(f = chrono.millisOfDay())) {
",2,0,0,3,7,0,6,0,0,9,44,7,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,489,"                    millisOfDay = f;
",4,0,0,0,0,0,0,0,0,5,16,8,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,491,"                if (isSupported(f = chrono.secondOfMinute())) {
",2,0,0,3,7,0,6,0,0,9,47,7,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,492,"                    secondOfMinute = f;
",4,0,0,0,0,0,0,0,0,5,19,8,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,494,"                if (isSupported(f = chrono.secondOfDay())) {
",2,0,0,3,7,0,6,0,0,9,44,7,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,495,"                    secondOfDay = f;
",4,0,0,0,0,0,0,0,0,5,16,8,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,497,"                if (isSupported(f = chrono.minuteOfHour())) {
",2,0,0,3,7,0,6,0,0,9,45,7,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,498,"                    minuteOfHour = f;
",4,0,0,0,0,0,0,0,0,5,17,8,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,500,"                if (isSupported(f = chrono.minuteOfDay())) {
",2,0,0,3,7,0,6,0,0,9,44,7,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,501,"                    minuteOfDay = f;
",4,0,0,0,0,0,0,0,0,5,16,8,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,503,"                if (isSupported(f = chrono.hourOfDay())) {
",2,0,0,3,7,0,6,0,0,9,42,7,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,504,"                    hourOfDay = f;
",4,0,0,0,0,0,0,0,0,5,14,8,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,506,"                if (isSupported(f = chrono.clockhourOfDay())) {
",2,0,0,3,7,0,6,0,0,9,47,7,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,507,"                    clockhourOfDay = f;
",4,0,0,0,0,0,0,0,0,5,19,8,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,509,"                if (isSupported(f = chrono.hourOfHalfday())) {
",2,0,0,3,7,0,6,0,0,9,46,7,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,510,"                    hourOfHalfday = f;
",4,0,0,0,0,0,0,0,0,5,18,8,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,512,"                if (isSupported(f = chrono.clockhourOfHalfday())) {
",2,0,0,3,7,0,6,0,0,9,51,7,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,513,"                    clockhourOfHalfday = f;
",4,0,0,0,0,0,0,0,0,5,23,8,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,515,"                if (isSupported(f = chrono.halfdayOfDay())) {
",2,0,0,3,7,0,6,0,0,9,45,7,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,516,"                    halfdayOfDay = f;
",4,0,0,0,0,0,0,0,0,5,17,8,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,518,"                if (isSupported(f = chrono.dayOfWeek())) {
",2,0,0,3,7,0,6,0,0,9,42,7,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,519,"                    dayOfWeek = f;
",4,0,0,0,0,0,0,0,0,5,14,8,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,521,"                if (isSupported(f = chrono.dayOfMonth())) {
",2,0,0,3,7,0,6,0,0,9,43,7,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,522,"                    dayOfMonth = f;
",4,0,0,0,0,0,0,0,0,5,15,8,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,524,"                if (isSupported(f = chrono.dayOfYear())) {
",2,0,0,3,7,0,6,0,0,9,42,7,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,525,"                    dayOfYear = f;
",4,0,0,0,0,0,0,0,0,5,14,8,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,527,"                if (isSupported(f = chrono.weekOfWeekyear())) {
",2,0,0,3,7,0,6,0,0,9,47,7,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,528,"                    weekOfWeekyear = f;
",4,0,0,0,0,0,0,0,0,5,19,8,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,530,"                if (isSupported(f = chrono.weekyear())) {
",2,0,0,3,7,0,6,0,0,9,41,7,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,531,"                    weekyear = f;
",4,0,0,0,0,0,0,0,0,5,13,8,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,533,"                if (isSupported(f = chrono.weekyearOfCentury())) {
",2,0,0,3,7,0,6,0,0,9,50,7,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,534,"                    weekyearOfCentury = f;
",4,0,0,0,0,0,0,0,0,5,22,8,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,536,"                if (isSupported(f = chrono.monthOfYear())) {
",2,0,0,3,7,0,6,0,0,9,44,7,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,537,"                    monthOfYear = f;
",4,0,0,0,0,0,0,0,0,5,16,8,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,539,"                if (isSupported(f = chrono.year())) {
",2,0,0,3,7,0,6,0,0,9,37,7,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,540,"                    year = f;
",4,0,0,0,0,0,0,0,0,5,9,8,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,542,"                if (isSupported(f = chrono.yearOfEra())) {
",2,0,0,3,7,0,6,0,0,9,42,7,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,543,"                    yearOfEra = f;
",4,0,0,0,0,0,0,0,0,5,14,8,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,545,"                if (isSupported(f = chrono.yearOfCentury())) {
",2,0,0,3,7,0,6,0,0,9,46,7,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,546,"                    yearOfCentury = f;
",4,0,0,0,0,0,0,0,0,5,18,8,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,548,"                if (isSupported(f = chrono.centuryOfEra())) {
",2,0,0,3,7,0,6,0,0,9,45,7,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,549,"                    centuryOfEra = f;
",4,0,0,0,0,0,0,0,0,5,17,8,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,551,"                if (isSupported(f = chrono.era())) {
",2,0,0,3,7,0,6,0,0,9,36,7,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,552,"                    era = f;
",4,0,0,0,0,0,0,0,0,5,8,8,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,555,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,558,"            return field == null ? false : field.isSupported();
",2,1,0,1,2,1,4,0,0,8,51,6,0.02286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,562,"            return field == null ? false : field.isSupported();
",2,1,0,1,2,1,4,0,0,8,51,6,0.02286,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,10,102,"        return getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;
",4,4,0,2,4,1,4,0,0,12,68,4,0.02286,0
defect4j,time,org/joda/time/DateTimeFieldType,10,227,"        return CLOCKHOUR_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,4,0.02273,0
defect4j,time,org/joda/time/DateTimeFieldType,10,327,"        return YEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,17,4,0.02273,0
defect4j,time,org/joda/time/DateTimeField,10,33,"public abstract class DateTimeField {
",2,0,0,0,1,2,0,0,0,4,37,1,0.02273,0
defect4j,time,org/joda/time/DurationField,10,30,"public abstract class DurationField implements Comparable<DurationField> {
",2,0,0,0,1,2,0,4,0,8,74,1,0.02273,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,10,70,"    private UnsupportedDurationField(DurationFieldType type) {
",4,0,0,1,3,1,0,2,0,7,58,2,0.02273,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,10,71,"        iType = type;
",4,0,0,0,0,0,0,0,0,5,13,4,0.02273,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,10,72,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02273,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,10,49,"        if (cCache == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.02273,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,10,50,"            cCache = new HashMap<DurationFieldType, UnsupportedDurationField>(7);
",2,0,0,1,2,0,0,6,0,9,69,6,0.02273,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,10,51,"            field = null;
",2,0,0,0,0,0,0,0,0,3,13,6,0.02273,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,10,53,"            field = cCache.get(type);
",2,0,0,1,2,0,6,0,0,9,25,6,0.02273,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,10,55,"        if (field == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.02273,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,10,56,"            field = new UnsupportedDurationField(type);
",4,0,0,1,2,0,0,2,0,7,43,6,0.02273,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,10,57,"            cCache.put(type, field);
",0,0,0,1,2,0,8,0,0,8,24,7,0.02273,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,10,59,"        return field;
",2,0,0,0,0,1,0,0,0,2,13,4,0.02273,0
defect4j,time,org/joda/time/DurationFieldType,10,278,"            return (1 << iOrdinal);
",2,1,0,1,2,1,0,0,0,3,23,6,0.02273,0
defect4j,time,org/joda/time/DateTimeFieldType,10,153,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.02260,0
defect4j,time,org/joda/time/DateTimeFieldType,10,154,"        iName = name;
",4,0,0,0,0,0,0,0,0,5,13,4,0.02260,0
defect4j,time,org/joda/time/DateTimeFieldType,10,155,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02260,0
defect4j,time,org/joda/time/DateTimeFieldType,10,73,"    private static final DateTimeFieldType ERA_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,80,2,0.02260,0
defect4j,time,org/joda/time/DateTimeFieldType,10,76,"    private static final DateTimeFieldType YEAR_OF_ERA_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,88,2,0.02260,0
defect4j,time,org/joda/time/DateTimeFieldType,10,79,"    private static final DateTimeFieldType CENTURY_OF_ERA_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,91,2,0.02260,0
defect4j,time,org/joda/time/DateTimeFieldType,10,82,"    private static final DateTimeFieldType YEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,92,2,0.02260,0
defect4j,time,org/joda/time/DateTimeFieldType,10,85,"    private static final DateTimeFieldType YEAR_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,81,2,0.02260,0
defect4j,time,org/joda/time/DateTimeFieldType,10,88,"    private static final DateTimeFieldType DAY_OF_YEAR_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,88,2,0.02260,0
defect4j,time,org/joda/time/DateTimeFieldType,10,91,"    private static final DateTimeFieldType MONTH_OF_YEAR_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,90,2,0.02260,0
defect4j,time,org/joda/time/DateTimeFieldType,10,94,"    private static final DateTimeFieldType DAY_OF_MONTH_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,89,2,0.02260,0
defect4j,time,org/joda/time/DateTimeFieldType,10,97,"    private static final DateTimeFieldType WEEKYEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,96,2,0.02260,0
defect4j,time,org/joda/time/DateTimeFieldType,10,100,"    private static final DateTimeFieldType WEEKYEAR_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,85,2,0.02260,0
defect4j,time,org/joda/time/DateTimeFieldType,10,103,"    private static final DateTimeFieldType WEEK_OF_WEEKYEAR_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,93,2,0.02260,0
defect4j,time,org/joda/time/DateTimeFieldType,10,106,"    private static final DateTimeFieldType DAY_OF_WEEK_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,88,2,0.02260,0
defect4j,time,org/joda/time/DateTimeFieldType,10,110,"    private static final DateTimeFieldType HALFDAY_OF_DAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,91,2,0.02260,0
defect4j,time,org/joda/time/DateTimeFieldType,10,113,"    private static final DateTimeFieldType HOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,92,2,0.02260,0
defect4j,time,org/joda/time/DateTimeFieldType,10,116,"    private static final DateTimeFieldType CLOCKHOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,97,2,0.02260,0
defect4j,time,org/joda/time/DateTimeFieldType,10,119,"    private static final DateTimeFieldType CLOCKHOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,93,2,0.02260,0
defect4j,time,org/joda/time/DateTimeFieldType,10,122,"    private static final DateTimeFieldType HOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,88,2,0.02260,0
defect4j,time,org/joda/time/DateTimeFieldType,10,125,"    private static final DateTimeFieldType MINUTE_OF_DAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,90,2,0.02260,0
defect4j,time,org/joda/time/DateTimeFieldType,10,128,"    private static final DateTimeFieldType MINUTE_OF_HOUR_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,91,2,0.02260,0
defect4j,time,org/joda/time/DateTimeFieldType,10,131,"    private static final DateTimeFieldType SECOND_OF_DAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,90,2,0.02260,0
defect4j,time,org/joda/time/DateTimeFieldType,10,134,"    private static final DateTimeFieldType SECOND_OF_MINUTE_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,93,2,0.02260,0
defect4j,time,org/joda/time/DateTimeFieldType,10,137,"    private static final DateTimeFieldType MILLIS_OF_DAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,90,2,0.02260,0
defect4j,time,org/joda/time/DateTimeFieldType,10,140,"    private static final DateTimeFieldType MILLIS_OF_SECOND_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,93,2,0.02260,0
defect4j,time,org/joda/time/DurationFieldType,10,141,"        return HALFDAYS_TYPE;
",2,0,0,0,0,1,0,0,0,2,21,4,0.02260,0
defect4j,time,org/joda/time/DurationFieldType,10,169,"        return WEEKYEARS_TYPE;
",2,0,0,0,0,1,0,0,0,2,22,4,0.02260,0
defect4j,time,org/joda/time/DurationFieldType,10,196,"        return CENTURIES_TYPE;
",2,0,0,0,0,1,0,0,0,2,22,4,0.02260,0
defect4j,time,org/joda/time/DurationFieldType,10,205,"        return ERAS_TYPE;
",2,0,0,0,0,1,0,0,0,2,17,4,0.02260,0
defect4j,time,org/joda/time/Chronology,10,63,"public abstract class Chronology {
",2,0,0,0,1,2,0,0,0,4,34,1,0.02260,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,54,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.02260,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,55,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02260,0
defect4j,time,org/joda/time/DateTimeFieldType,10,444,"            super(name);
",2,0,0,1,2,0,0,0,0,2,12,5,0.02260,0
defect4j,time,org/joda/time/DateTimeFieldType,10,445,"            iOrdinal = ordinal;
",4,0,0,0,0,0,0,0,0,5,19,5,0.02260,0
defect4j,time,org/joda/time/DateTimeFieldType,10,446,"            iUnitType = unitType;
",4,0,0,0,0,0,0,0,0,5,21,5,0.02260,0
defect4j,time,org/joda/time/DateTimeFieldType,10,447,"            iRangeType = rangeType;
",4,0,0,0,0,0,0,0,0,5,23,5,0.02260,0
defect4j,time,org/joda/time/DateTimeFieldType,10,448,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02260,0
defect4j,time,org/joda/time/DurationFieldType,10,105,"        return MILLIS_TYPE;
",2,0,0,0,0,1,0,0,0,2,19,4,0.02222,0
defect4j,time,org/joda/time/DurationFieldType,10,178,"        return MONTHS_TYPE;
",2,0,0,0,0,1,0,0,0,2,19,4,0.02051,0
defect4j,time,org/joda/time/DurationFieldType,10,187,"        return YEARS_TYPE;
",2,0,0,0,0,1,0,0,0,2,18,4,0.02051,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,167,"        return iPeriod;
",2,0,0,0,0,1,0,0,0,2,15,4,0.02000,0
defect4j,time,org/joda/time/field/BaseDurationField,10,141,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));
",0,0,0,2,4,1,10,0,0,10,84,5,0.02000,0
defect4j,time,org/joda/time/field/PreciseDurationField,10,114,"        long difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);
",2,0,0,1,2,0,8,0,0,10,77,5,0.02000,0
defect4j,time,org/joda/time/field/PreciseDurationField,10,115,"        return difference / iUnitMillis;
",4,1,0,0,0,1,0,0,0,5,32,4,0.02000,0
defect4j,time,org/joda/time/field/FieldUtils,10,100,"        long diff = val1 - val2;
",6,1,0,0,0,0,0,0,0,7,24,5,0.02000,0
defect4j,time,org/joda/time/field/FieldUtils,10,102,"        if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {
",8,5,0,3,7,0,0,0,0,13,45,4,0.02000,0
defect4j,time,org/joda/time/field/FieldUtils,10,106,"        return diff;
",2,0,0,0,0,1,0,0,0,2,12,4,0.02000,0
defect4j,time,org/joda/time/DateTimeZone,10,147,"                        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01990,0
defect4j,time,org/joda/time/DateTimeZone,10,133,"        DateTimeZone zone = cDefault;
",4,0,0,0,0,0,0,2,0,6,29,4,0.01980,0
defect4j,time,org/joda/time/DateTimeZone,10,134,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.01980,0
defect4j,time,org/joda/time/DateTimeZone,10,135,"            synchronized(DateTimeZone.class) {
",0,0,0,1,3,0,0,2,0,2,34,8,0.01980,0
defect4j,time,org/joda/time/DateTimeZone,10,136,"                zone = cDefault;
",4,0,0,0,0,0,0,0,0,5,16,8,0.01980,0
defect4j,time,org/joda/time/DateTimeZone,10,137,"                if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,8,0.01980,0
defect4j,time,org/joda/time/DateTimeZone,10,138,"                    DateTimeZone temp = null;
",2,0,0,0,0,0,0,2,0,4,25,10,0.01980,0
defect4j,time,org/joda/time/DateTimeZone,10,141,"                            String id = System.getProperty(""user.timezone"");
",2,0,0,1,2,0,4,2,0,9,48,14,0.01980,0
defect4j,time,org/joda/time/DateTimeZone,10,142,"                            if (id != null) {  // null check avoids stack overflow
",2,1,0,1,3,0,0,0,0,3,54,14,0.01980,0
defect4j,time,org/joda/time/DateTimeZone,10,143,"                                temp = forID(id);
",2,0,0,1,2,0,4,0,0,7,17,16,0.01980,0
defect4j,time,org/joda/time/DateTimeZone,10,148,"                        if (temp == null) {
",2,1,0,1,3,0,0,0,0,3,19,12,0.01980,0
defect4j,time,org/joda/time/DateTimeZone,10,153,"                    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01980,0
defect4j,time,org/joda/time/DateTimeZone,10,154,"                    if (temp == null) {
",2,1,0,1,3,0,0,0,0,3,19,10,0.01980,0
defect4j,time,org/joda/time/DateTimeZone,10,157,"                    cDefault = zone = temp;
",6,0,0,0,0,0,0,0,0,8,23,10,0.01980,0
defect4j,time,org/joda/time/DateTimeZone,10,159,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01980,0
defect4j,time,org/joda/time/DateTimeZone,10,161,"        return zone;
",2,0,0,0,0,1,0,0,0,2,12,4,0.01980,0
defect4j,time,org/joda/time/DurationFieldType,10,160,"        return WEEKS_TYPE;
",2,0,0,0,0,1,0,0,0,2,18,4,0.01961,0
defect4j,time,org/joda/time/DurationFieldType,10,114,"        return SECONDS_TYPE;
",2,0,0,0,0,1,0,0,0,2,20,4,0.01942,0
defect4j,time,org/joda/time/DurationFieldType,10,123,"        return MINUTES_TYPE;
",2,0,0,0,0,1,0,0,0,2,20,4,0.01942,0
defect4j,time,org/joda/time/DurationFieldType,10,132,"        return HOURS_TYPE;
",2,0,0,0,0,1,0,0,0,2,18,4,0.01942,0
defect4j,time,org/joda/time/DurationFieldType,10,151,"        return DAYS_TYPE;
",2,0,0,0,0,1,0,0,0,2,17,4,0.01932,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,105,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.01923,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,106,"        iPrinter = printer;
",4,0,0,0,0,0,0,0,0,5,19,4,0.01923,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,107,"        iParser = parser;
",4,0,0,0,0,0,0,0,0,5,17,4,0.01923,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,108,"        iLocale = locale;
",4,0,0,0,0,0,0,0,0,5,17,4,0.01923,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,109,"        iParseType = type;
",4,0,0,0,0,0,0,0,0,5,18,4,0.01923,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,110,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01923,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,187,"        if (type == iParseType) {
",4,1,0,1,3,0,0,0,0,5,25,4,0.01923,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,190,"        return new PeriodFormatter(iPrinter, iParser, iLocale, type);
",8,0,0,1,2,1,0,2,0,10,61,5,0.01923,0
defect4j,time,org/joda/time/format/ISOPeriodFormat,10,65,"        if (cStandard == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.01878,0
defect4j,time,org/joda/time/format/ISOPeriodFormat,10,66,"            cStandard = new PeriodFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,40,6,0.01878,0
defect4j,time,org/joda/time/format/ISOPeriodFormat,10,85,"        return cStandard;
",2,0,0,0,0,1,0,0,0,2,17,4,0.01878,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1548,"        Literal(String text) {
",4,0,0,1,3,0,0,2,0,6,22,3,0.01878,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1549,"            iText = text;
",4,0,0,0,0,0,0,0,0,5,13,5,0.01878,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1550,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01878,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1545,"        static final Literal EMPTY = new Literal("""");
",2,0,0,1,2,2,0,4,0,9,45,3,0.01878,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,228,"        if (text == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.01878,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,231,"        clearPrefix();
",0,0,0,1,2,0,2,0,0,2,14,5,0.01878,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,232,"        Literal literal = new Literal(text);
",4,0,0,1,2,0,0,4,0,8,36,4,0.01878,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,233,"        append0(literal, literal);
",0,0,0,1,2,0,6,0,0,6,26,5,0.01878,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,234,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.01878,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,500,"        appendField(SECONDS_OPTIONAL_MILLIS);
",0,0,0,1,2,0,4,0,0,4,37,5,0.01878,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,501,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.01878,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,552,"        if (text == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.01878,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,555,"        return appendSuffix(new SimpleAffix(text));
",2,0,0,2,4,1,2,2,0,6,43,5,0.01878,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,652,"        return appendSeparator(text, text, null, false, true);
",0,0,0,1,2,1,6,0,0,9,54,4,0.01878,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1606,"                iParsedForms = new String[] {text};
",4,0,0,2,4,0,0,2,0,7,35,7,0.01878,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,859,"        SimpleAffix(String text) {
",4,0,0,1,3,0,0,2,0,6,26,3,0.01878,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,860,"            iText = text;
",4,0,0,0,0,0,0,0,0,5,13,5,0.01878,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,861,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01878,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,87,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,88,"        iPrinter = printer;
",4,0,0,0,0,0,0,0,0,5,19,4,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,89,"        iParser = parser;
",4,0,0,0,0,0,0,0,0,5,17,4,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,90,"        iLocale = null;
",2,0,0,0,0,0,0,0,0,3,15,4,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,91,"        iParseType = null;
",2,0,0,0,0,0,0,0,0,3,18,4,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,92,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,128,"        return iPrinter;
",2,0,0,0,0,1,0,0,0,2,16,4,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,146,"        return iParser;
",2,0,0,0,0,1,0,0,0,2,15,4,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,101,"    public PeriodFormatterBuilder() {
",2,0,0,1,3,1,0,0,0,3,33,2,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,102,"        clear();
",0,0,0,1,2,0,2,0,0,2,8,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,103,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,123,"        PeriodFormatter formatter = toFormatter(iElementPairs, iNotPrinter, iNotParser);
",2,0,0,1,2,0,8,2,0,12,80,4,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,124,"        iFieldFormatters = (FieldFormatter[]) iFieldFormatters.clone();
",2,0,0,3,6,0,4,2,0,9,63,4,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,125,"        return formatter;
",2,0,0,0,0,1,0,0,0,2,17,4,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,171,"        iMinPrintedDigits = 1;
",2,0,0,0,0,0,0,0,0,3,22,4,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,172,"        iPrintZeroSetting = PRINT_ZERO_RARELY_LAST;
",4,0,0,0,0,0,0,0,0,5,43,4,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,173,"        iMaxParsedDigits = 10;
",2,0,0,0,0,0,0,0,0,3,22,4,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,174,"        iRejectSignedValues = false;
",2,0,0,0,0,0,0,0,0,4,28,4,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,175,"        iPrefix = null;
",2,0,0,0,0,0,0,0,0,3,15,4,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,176,"        if (iElementPairs == null) {
",2,1,0,1,3,0,0,0,0,3,28,4,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,177,"            iElementPairs = new ArrayList<Object>();
",2,0,0,1,2,0,0,4,0,7,40,6,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,181,"        iNotPrinter = false;
",2,0,0,0,0,0,0,0,0,4,20,4,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,182,"        iNotParser = false;
",2,0,0,0,0,0,0,0,0,4,19,4,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,183,"        iFieldFormatters = new FieldFormatter[10];
",2,0,0,1,2,0,0,2,0,5,42,4,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,184,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,398,"        appendField(YEARS);
",0,0,0,1,2,0,4,0,0,4,19,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,399,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,411,"        appendField(MONTHS);
",0,0,0,1,2,0,4,0,0,4,20,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,412,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,424,"        appendField(WEEKS);
",0,0,0,1,2,0,4,0,0,4,19,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,425,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,437,"        appendField(DAYS);
",0,0,0,1,2,0,4,0,0,4,18,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,438,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,450,"        appendField(HOURS);
",0,0,0,1,2,0,4,0,0,4,19,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,451,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,463,"        appendField(MINUTES);
",0,0,0,1,2,0,4,0,0,4,21,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,464,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,530,"        appendField(type, iMinPrintedDigits);
",0,0,0,1,2,0,6,0,0,6,37,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,531,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,534,"        FieldFormatter field = new FieldFormatter(minPrinted, iPrintZeroSetting,
",6,0,0,0,1,0,0,4,0,10,72,4,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,536,"        append0(field, field);
",0,0,0,1,2,0,6,0,0,6,22,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,537,"        iFieldFormatters[type] = field;
",2,0,1,1,2,0,0,0,0,7,31,4,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,538,"        iPrefix = null;
",2,0,0,0,0,0,0,0,0,3,15,4,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,539,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,591,"        if (iElementPairs.size() > 0) {
",0,1,0,2,5,0,4,0,0,5,31,4,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,592,"            originalPrinter = iElementPairs.get(iElementPairs.size() - 2);
",2,1,0,2,4,0,8,0,0,12,62,6,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,593,"            originalParser = iElementPairs.get(iElementPairs.size() - 1);
",2,1,0,2,4,0,8,0,0,12,61,6,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,599,"        if (originalPrinter == null || originalParser == null ||
",4,5,0,0,1,0,0,0,0,9,56,4,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,605,"        clearPrefix();
",0,0,0,1,2,0,2,0,0,2,14,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,606,"        FieldFormatter newField = new FieldFormatter((FieldFormatter) originalPrinter, suffix);
",6,0,0,2,4,0,0,6,0,12,87,4,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,607,"        iElementPairs.set(iElementPairs.size() - 2, newField);
",0,1,0,2,4,0,10,0,0,11,54,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,608,"        iElementPairs.set(iElementPairs.size() - 1, newField);
",0,1,0,2,4,0,10,0,0,11,54,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,609,"        iFieldFormatters[newField.getFieldType()] = newField;
",2,0,1,2,4,0,4,0,0,9,53,4,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,611,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,730,"        if (text == null || finalText == null) {
",4,3,0,1,3,0,0,0,0,7,40,4,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,734,"        clearPrefix();
",0,0,0,1,2,0,2,0,0,2,14,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,737,"        List<Object> pairs = iElementPairs;
",4,0,0,0,0,0,0,4,0,8,35,4,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,738,"        if (pairs.size() == 0) {
",0,1,0,2,5,0,4,0,0,5,24,4,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,750,"        Separator lastSeparator = null;
",2,0,0,0,0,0,0,2,0,4,31,4,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,751,"        for (i=pairs.size(); --i>=0; ) {
",4,1,0,2,5,0,4,0,0,11,32,4,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,752,"            if (pairs.get(i) instanceof Separator) {
",0,0,0,2,5,0,6,2,0,8,40,7,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,757,"            i--;  // element pairs
",2,0,0,0,0,0,0,0,0,3,22,6,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,761,"        if (lastSeparator != null && pairs.size() == 0) {
",2,3,0,2,5,0,4,0,0,9,49,4,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,764,"            Object[] comp = createComposite(pairs);
",2,0,0,2,4,0,4,2,0,8,39,6,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,765,"            pairs.clear();
",0,0,0,1,2,0,4,0,0,4,14,7,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,766,"            Separator separator = new Separator(
",2,0,0,0,1,0,0,4,0,6,36,6,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,770,"            pairs.add(separator);
",0,0,0,1,2,0,6,0,0,6,21,7,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,771,"            pairs.add(separator);
",0,0,0,1,2,0,6,0,0,6,21,7,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,774,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,779,"        if (iPrefix != null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,782,"        iPrefix = null;
",2,0,0,0,0,0,0,0,0,3,15,4,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,783,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,786,"        iElementPairs.add(printer);
",0,0,0,1,2,0,6,0,0,6,27,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,787,"        iElementPairs.add(parser);
",0,0,0,1,2,0,6,0,0,6,26,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,788,"        iNotPrinter |= (printer == null);
",4,1,0,1,2,0,0,0,0,6,33,4,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,789,"        iNotParser |= (parser == null);
",4,1,0,1,2,0,0,0,0,6,31,4,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,790,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,795,"        if (notPrinter && notParser) {
",4,1,0,1,3,0,0,0,0,5,30,4,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,798,"        int size = elementPairs.size();
",2,0,0,1,2,0,4,0,0,6,31,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,799,"        if (size >= 2 && elementPairs.get(0) instanceof Separator) {
",2,2,0,2,5,0,4,2,0,10,60,4,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,800,"            Separator sep = (Separator) elementPairs.get(0);
",2,0,0,2,4,0,4,4,0,10,48,6,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,801,"            if (sep.iAfterParser == null && sep.iAfterPrinter == null) {
",8,3,0,1,3,0,0,0,0,11,60,6,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,802,"                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
",2,0,0,2,4,0,12,2,0,16,86,8,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,803,"                sep = sep.finish(f.getPrinter(), f.getParser());
",2,0,0,3,6,0,12,0,0,15,48,8,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,804,"                return new PeriodFormatter(sep, sep);
",4,0,0,1,2,1,0,2,0,6,37,9,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,807,"        Object[] comp = createComposite(elementPairs);
",2,0,0,2,4,0,4,2,0,8,46,4,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,808,"        if (notPrinter) {
",2,0,0,1,3,0,0,0,0,2,17,4,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,810,"        } else if (notParser) {
",2,0,0,1,4,0,0,0,0,2,23,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,813,"            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);
",0,0,1,5,10,1,0,6,0,10,76,8,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,818,"        switch (elementPairs.size()) {
",0,0,0,2,5,0,4,0,0,4,30,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,824,"                Composite comp = new Composite(elementPairs);
",4,0,0,1,2,0,0,4,0,8,45,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,825,"                return new Object[] {comp, comp};
",4,0,0,2,4,1,0,2,0,6,33,6,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1772,"        Composite(List<Object> elementPairs) {
",4,0,0,1,3,0,0,4,0,8,38,3,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1773,"            List<Object> printerList = new ArrayList<Object>();
",2,0,0,1,2,0,0,8,0,10,51,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1774,"            List<Object> parserList = new ArrayList<Object>();
",2,0,0,1,2,0,0,8,0,10,50,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1776,"            decompose(elementPairs, printerList, parserList);
",0,0,0,1,2,0,8,0,0,8,49,6,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1778,"            if (printerList.size() <= 0) {
",0,1,0,2,5,0,4,0,0,5,30,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1781,"                iPrinters = printerList.toArray(
",2,0,0,0,1,0,4,0,0,7,32,7,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1785,"            if (parserList.size() <= 0) {
",0,1,0,2,5,0,4,0,0,5,29,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1788,"                iParsers = parserList.toArray(
",2,0,0,0,1,0,4,0,0,7,30,7,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1791,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1843,"            int size = elementPairs.size();
",2,0,0,1,2,0,4,0,0,6,31,6,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1844,"            for (int i=0; i<size; i+=2) {
",8,1,0,1,3,0,0,0,0,10,29,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1845,"                Object element = elementPairs.get(i);
",2,0,0,1,2,0,6,2,0,10,37,7,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1846,"                if (element instanceof PeriodPrinter) {
",2,0,0,1,3,0,0,2,0,4,39,8,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1847,"                    if (element instanceof Composite) {
",2,0,0,1,3,0,0,2,0,4,35,10,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1850,"                        printerList.add(element);
",0,0,0,1,2,0,6,0,0,6,25,12,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1854,"                element = elementPairs.get(i + 1);
",4,1,0,1,2,0,4,0,0,10,34,7,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1855,"                if (element instanceof PeriodParser) {
",2,0,0,1,3,0,0,2,0,4,38,8,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1856,"                    if (element instanceof Composite) {
",2,0,0,1,3,0,0,2,0,4,35,10,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1859,"                        parserList.add(element);
",0,0,0,1,2,0,6,0,0,6,24,12,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1863,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1599,"                boolean useBefore, boolean useAfter) {
",4,0,0,0,2,0,0,0,0,4,38,4,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1600,"            iText = text;
",4,0,0,0,0,0,0,0,0,5,13,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1601,"            iFinalText = finalText;
",4,0,0,0,0,0,0,0,0,5,23,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1603,"            if ((finalText == null || text.equals(finalText)) &&
",2,3,0,2,5,0,6,0,0,11,52,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1622,"            iBeforePrinter = beforePrinter;
",4,0,0,0,0,0,0,0,0,5,31,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1623,"            iBeforeParser = beforeParser;
",4,0,0,0,0,0,0,0,0,5,29,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1624,"            iUseBefore = useBefore;
",4,0,0,0,0,0,0,0,0,5,23,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1625,"            iUseAfter = useAfter;
",4,0,0,0,0,0,0,0,0,5,21,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1626,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1756,"            iAfterPrinter = afterPrinter;
",4,0,0,0,0,0,0,0,0,5,29,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1757,"            iAfterParser = afterParser;
",4,0,0,0,0,0,0,0,0,5,27,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1758,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1583,"    static class Separator
",2,0,0,0,0,1,0,0,0,3,22,2,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1053,"                       PeriodFieldAffix prefix, PeriodFieldAffix suffix) {
",4,0,0,0,2,0,0,4,0,8,51,4,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1054,"            iMinPrintedDigits = minPrintedDigits;
",4,0,0,0,0,0,0,0,0,5,37,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1055,"            iPrintZeroSetting = printZeroSetting;
",4,0,0,0,0,0,0,0,0,5,37,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1056,"            iMaxParsedDigits = maxParsedDigits;
",4,0,0,0,0,0,0,0,0,5,35,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1057,"            iRejectSignedValues = rejectSignedValues;
",4,0,0,0,0,0,0,0,0,5,41,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1058,"            iFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,23,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1059,"            iFieldFormatters = fieldFormatters;
",4,0,0,0,0,0,0,0,0,5,35,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1060,"            iPrefix = prefix;
",4,0,0,0,0,0,0,0,0,5,17,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1061,"            iSuffix = suffix;
",4,0,0,0,0,0,0,0,0,5,17,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1062,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1064,"        FieldFormatter(FieldFormatter field, PeriodFieldAffix suffix) {
",6,0,0,1,3,0,0,4,0,10,63,3,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1065,"            iMinPrintedDigits = field.iMinPrintedDigits;
",6,0,0,0,0,0,0,0,0,7,44,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1066,"            iPrintZeroSetting = field.iPrintZeroSetting;
",6,0,0,0,0,0,0,0,0,7,44,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1067,"            iMaxParsedDigits = field.iMaxParsedDigits;
",6,0,0,0,0,0,0,0,0,7,42,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1068,"            iRejectSignedValues = field.iRejectSignedValues;
",6,0,0,0,0,0,0,0,0,7,48,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1069,"            iFieldType = field.iFieldType;
",6,0,0,0,0,0,0,0,0,7,30,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1070,"            iFieldFormatters = field.iFieldFormatters;
",6,0,0,0,0,0,0,0,0,7,42,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1071,"            iPrefix = field.iPrefix;
",6,0,0,0,0,0,0,0,0,7,24,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1072,"            if (field.iSuffix != null) {
",4,1,0,1,3,0,0,0,0,5,28,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1075,"            iSuffix = suffix;
",4,0,0,0,0,0,0,0,0,5,17,5,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1076,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01869,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1535,"            return iFieldType;
",2,0,0,0,0,1,0,0,0,2,18,5,0.01869,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,156,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.01843,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,157,"        iPeriod = period;
",4,0,0,0,0,0,0,0,0,5,17,4,0.01843,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,158,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01843,0
defect4j,time,org/joda/time/DateTimeUtils,10,39,"    private static final SystemMillisProvider SYSTEM_MILLIS_PROVIDER = new SystemMillisProvider();
",2,0,0,1,2,3,0,4,0,9,94,2,0.01770,0
defect4j,time,org/joda/time/DateTimeUtils,10,41,"    private static volatile MillisProvider cMillisProvider = SYSTEM_MILLIS_PROVIDER;
",4,0,0,0,0,3,0,2,0,9,80,2,0.01770,0
defect4j,time,org/joda/time/DateTimeUtils,10,47,"        Map<String, DateTimeZone> map = new LinkedHashMap<String, DateTimeZone>();
",2,0,0,1,2,0,0,12,0,14,74,4,0.01770,0
defect4j,time,org/joda/time/DateTimeUtils,10,48,"        map.put(""UT"", DateTimeZone.UTC);
",4,0,0,1,2,0,4,0,0,9,32,5,0.01770,0
defect4j,time,org/joda/time/DateTimeUtils,10,49,"        map.put(""UTC"", DateTimeZone.UTC);
",4,0,0,1,2,0,4,0,0,9,33,5,0.01770,0
defect4j,time,org/joda/time/DateTimeUtils,10,50,"        map.put(""GMT"", DateTimeZone.UTC);
",4,0,0,1,2,0,4,0,0,9,33,5,0.01770,0
defect4j,time,org/joda/time/DateTimeUtils,10,51,"        put(map, ""EST"", ""America/New_York"");
",0,0,0,1,2,0,4,0,0,6,36,5,0.01770,0
defect4j,time,org/joda/time/DateTimeUtils,10,52,"        put(map, ""EDT"", ""America/New_York"");
",0,0,0,1,2,0,4,0,0,6,36,5,0.01770,0
defect4j,time,org/joda/time/DateTimeUtils,10,53,"        put(map, ""CST"", ""America/Chicago"");
",0,0,0,1,2,0,4,0,0,6,35,5,0.01770,0
defect4j,time,org/joda/time/DateTimeUtils,10,54,"        put(map, ""CDT"", ""America/Chicago"");
",0,0,0,1,2,0,4,0,0,6,35,5,0.01770,0
defect4j,time,org/joda/time/DateTimeUtils,10,55,"        put(map, ""MST"", ""America/Denver"");
",0,0,0,1,2,0,4,0,0,6,34,5,0.01770,0
defect4j,time,org/joda/time/DateTimeUtils,10,56,"        put(map, ""MDT"", ""America/Denver"");
",0,0,0,1,2,0,4,0,0,6,34,5,0.01770,0
defect4j,time,org/joda/time/DateTimeUtils,10,57,"        put(map, ""PST"", ""America/Los_Angeles"");
",0,0,0,1,2,0,4,0,0,6,39,5,0.01770,0
defect4j,time,org/joda/time/DateTimeUtils,10,58,"        put(map, ""PDT"", ""America/Los_Angeles"");
",0,0,0,1,2,0,4,0,0,6,39,5,0.01770,0
defect4j,time,org/joda/time/DateTimeUtils,10,59,"        cZoneNames = Collections.unmodifiableMap(map);
",2,0,0,1,2,0,6,0,0,9,46,4,0.01770,0
defect4j,time,org/joda/time/DateTimeUtils,10,60,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01770,0
defect4j,time,org/joda/time/DateTimeUtils,10,63,"            map.put(name, DateTimeZone.forID(id));
",0,0,0,2,4,0,12,0,0,12,38,7,0.01770,0
defect4j,time,org/joda/time/DateTimeUtils,10,66,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01770,0
defect4j,time,org/joda/time/DateTimeUtils,10,67,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01770,0
defect4j,time,org/joda/time/DateTimeUtils,10,524,"    static class SystemMillisProvider implements MillisProvider {
",2,0,0,0,1,1,0,2,0,5,61,2,0.01770,0
defect4j,time,org/joda/time/field/PreciseDurationField,10,104,"        long addition = value * iUnitMillis;  // safe
",6,1,0,0,0,0,0,0,0,7,45,5,0.01587,0
defect4j,time,org/joda/time/field/PreciseDurationField,10,105,"        return FieldUtils.safeAdd(instant, addition);
",0,0,0,1,2,1,8,0,0,8,45,5,0.01587,0
defect4j,time,org/joda/time/PeriodType,10,595,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.01423,0
defect4j,time,org/joda/time/PeriodType,10,596,"        iName = name;
",4,0,0,0,0,0,0,0,0,5,13,4,0.01423,0
defect4j,time,org/joda/time/PeriodType,10,597,"        iTypes = types;
",4,0,0,0,0,0,0,0,0,5,15,4,0.01423,0
defect4j,time,org/joda/time/PeriodType,10,598,"        iIndices = indices;
",4,0,0,0,0,0,0,0,0,5,19,4,0.01423,0
defect4j,time,org/joda/time/PeriodType,10,599,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01423,0
defect4j,time,org/joda/time/PeriodType,10,56,"    private static final Map<PeriodType, Object> cTypes = new HashMap<PeriodType, Object>(32);
",2,0,0,1,2,3,0,12,0,17,90,2,0.01423,0
defect4j,time,org/joda/time/PeriodType,10,58,"    static int YEAR_INDEX = 0;
",2,0,0,0,0,1,0,0,0,3,26,2,0.01423,0
defect4j,time,org/joda/time/PeriodType,10,59,"    static int MONTH_INDEX = 1;
",2,0,0,0,0,1,0,0,0,3,27,2,0.01423,0
defect4j,time,org/joda/time/PeriodType,10,60,"    static int WEEK_INDEX = 2;
",2,0,0,0,0,1,0,0,0,3,26,2,0.01423,0
defect4j,time,org/joda/time/PeriodType,10,61,"    static int DAY_INDEX = 3;
",2,0,0,0,0,1,0,0,0,3,25,2,0.01423,0
defect4j,time,org/joda/time/PeriodType,10,62,"    static int HOUR_INDEX = 4;
",2,0,0,0,0,1,0,0,0,3,26,2,0.01423,0
defect4j,time,org/joda/time/PeriodType,10,63,"    static int MINUTE_INDEX = 5;
",2,0,0,0,0,1,0,0,0,3,28,2,0.01423,0
defect4j,time,org/joda/time/PeriodType,10,64,"    static int SECOND_INDEX = 6;
",2,0,0,0,0,1,0,0,0,3,28,2,0.01423,0
defect4j,time,org/joda/time/PeriodType,10,65,"    static int MILLI_INDEX = 7;
",2,0,0,0,0,1,0,0,0,3,27,2,0.01423,0
defect4j,time,org/joda/time/DurationFieldType,10,94,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.01242,0
defect4j,time,org/joda/time/DurationFieldType,10,95,"        iName = name;
",4,0,0,0,0,0,0,0,0,5,13,4,0.01242,0
defect4j,time,org/joda/time/DurationFieldType,10,96,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01242,0
defect4j,time,org/joda/time/DurationFieldType,10,60,"    static final DurationFieldType ERAS_TYPE = new StandardDurationFieldType(""eras"", ERAS);
",4,0,0,1,2,2,0,4,0,11,87,2,0.01242,0
defect4j,time,org/joda/time/DurationFieldType,10,62,"    static final DurationFieldType CENTURIES_TYPE = new StandardDurationFieldType(""centuries"", CENTURIES);
",4,0,0,1,2,2,0,4,0,11,102,2,0.01242,0
defect4j,time,org/joda/time/DurationFieldType,10,64,"    static final DurationFieldType WEEKYEARS_TYPE = new StandardDurationFieldType(""weekyears"", WEEKYEARS);
",4,0,0,1,2,2,0,4,0,11,102,2,0.01242,0
defect4j,time,org/joda/time/DurationFieldType,10,66,"    static final DurationFieldType YEARS_TYPE = new StandardDurationFieldType(""years"", YEARS);
",4,0,0,1,2,2,0,4,0,11,90,2,0.01242,0
defect4j,time,org/joda/time/DurationFieldType,10,68,"    static final DurationFieldType MONTHS_TYPE = new StandardDurationFieldType(""months"", MONTHS);
",4,0,0,1,2,2,0,4,0,11,93,2,0.01242,0
defect4j,time,org/joda/time/DurationFieldType,10,70,"    static final DurationFieldType WEEKS_TYPE = new StandardDurationFieldType(""weeks"", WEEKS);
",4,0,0,1,2,2,0,4,0,11,90,2,0.01242,0
defect4j,time,org/joda/time/DurationFieldType,10,72,"    static final DurationFieldType DAYS_TYPE = new StandardDurationFieldType(""days"", DAYS);
",4,0,0,1,2,2,0,4,0,11,87,2,0.01242,0
defect4j,time,org/joda/time/DurationFieldType,10,74,"    static final DurationFieldType HALFDAYS_TYPE = new StandardDurationFieldType(""halfdays"", HALFDAYS);
",4,0,0,1,2,2,0,4,0,11,99,2,0.01242,0
defect4j,time,org/joda/time/DurationFieldType,10,76,"    static final DurationFieldType HOURS_TYPE = new StandardDurationFieldType(""hours"", HOURS);
",4,0,0,1,2,2,0,4,0,11,90,2,0.01242,0
defect4j,time,org/joda/time/DurationFieldType,10,78,"    static final DurationFieldType MINUTES_TYPE = new StandardDurationFieldType(""minutes"", MINUTES);
",4,0,0,1,2,2,0,4,0,11,96,2,0.01242,0
defect4j,time,org/joda/time/DurationFieldType,10,80,"    static final DurationFieldType SECONDS_TYPE = new StandardDurationFieldType(""seconds"", SECONDS);
",4,0,0,1,2,2,0,4,0,11,96,2,0.01242,0
defect4j,time,org/joda/time/DurationFieldType,10,82,"    static final DurationFieldType MILLIS_TYPE = new StandardDurationFieldType(""millis"", MILLIS);
",4,0,0,1,2,2,0,4,0,11,93,2,0.01242,0
defect4j,time,org/joda/time/DurationFieldType,10,259,"            super(name);
",2,0,0,1,2,0,0,0,0,2,12,5,0.01242,0
defect4j,time,org/joda/time/DurationFieldType,10,260,"            iOrdinal = ordinal;
",4,0,0,0,0,0,0,0,0,5,19,5,0.01242,0
defect4j,time,org/joda/time/DurationFieldType,10,261,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01242,0
defect4j,time,org/joda/time/DateTimeZone,10,689,"    protected DateTimeZone(String id) {
",4,0,0,1,3,1,0,2,0,7,35,2,0.01084,0
defect4j,time,org/joda/time/DateTimeZone,10,690,"        if (id == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.01084,0
defect4j,time,org/joda/time/DateTimeZone,10,693,"        iID = id;
",4,0,0,0,0,0,0,0,0,5,9,4,0.01084,0
defect4j,time,org/joda/time/DateTimeZone,10,694,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01084,0
defect4j,time,org/joda/time/DateTimeZone,10,95,"    public static final DateTimeZone UTC = new FixedDateTimeZone(""UTC"", ""UTC"", 0, 0);
",2,0,0,1,2,3,0,4,0,11,81,2,0.01084,0
defect4j,time,org/joda/time/DateTimeZone,10,115,"        setProvider0(null);
",0,0,0,1,2,0,2,0,0,3,19,4,0.01084,0
defect4j,time,org/joda/time/DateTimeZone,10,116,"        setNameProvider0(null);
",0,0,0,1,2,0,2,0,0,3,23,4,0.01084,0
defect4j,time,org/joda/time/DateTimeZone,10,117,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01084,0
defect4j,time,org/joda/time/DateTimeZone,10,204,"        if (id == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.01084,0
defect4j,time,org/joda/time/DateTimeZone,10,207,"        if (id.equals(""UTC"")) {
",0,0,0,2,5,0,4,0,0,5,23,5,0.01084,0
defect4j,time,org/joda/time/DateTimeZone,10,210,"        DateTimeZone zone = cProvider.getZone(id);
",2,0,0,1,2,0,6,2,0,10,42,4,0.01084,0
defect4j,time,org/joda/time/DateTimeZone,10,211,"        if (zone != null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.01084,0
defect4j,time,org/joda/time/DateTimeZone,10,212,"            return zone;
",2,0,0,0,0,1,0,0,0,2,12,6,0.01084,0
defect4j,time,org/joda/time/DateTimeZone,10,415,"        if (provider == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.01084,0
defect4j,time,org/joda/time/DateTimeZone,10,416,"            provider = getDefaultProvider();
",2,0,0,1,2,0,2,0,0,5,32,6,0.01084,0
defect4j,time,org/joda/time/DateTimeZone,10,418,"        Set<String> ids = provider.getAvailableIDs();
",2,0,0,1,2,0,4,4,0,10,45,4,0.01084,0
defect4j,time,org/joda/time/DateTimeZone,10,419,"        if (ids == null || ids.size() == 0) {
",2,3,0,2,5,0,4,0,0,9,37,4,0.01084,0
defect4j,time,org/joda/time/DateTimeZone,10,423,"        if (!ids.contains(""UTC"")) {
",0,0,0,2,5,0,4,0,0,6,27,4,0.01084,0
defect4j,time,org/joda/time/DateTimeZone,10,426,"        if (!UTC.equals(provider.getZone(""UTC""))) {
",0,0,0,3,7,0,8,0,0,10,43,4,0.01084,0
defect4j,time,org/joda/time/DateTimeZone,10,429,"        cProvider = provider;
",4,0,0,0,0,0,0,0,0,5,21,4,0.01084,0
defect4j,time,org/joda/time/DateTimeZone,10,430,"        cAvailableIDs = ids;
",4,0,0,0,0,0,0,0,0,5,20,4,0.01084,0
defect4j,time,org/joda/time/DateTimeZone,10,431,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01084,0
defect4j,time,org/joda/time/DateTimeZone,10,443,"        Provider provider = null;
",2,0,0,0,0,0,0,2,0,4,25,4,0.01084,0
defect4j,time,org/joda/time/DateTimeZone,10,446,"            String providerClass =
",2,0,0,0,0,0,0,2,0,4,22,6,0.01084,0
defect4j,time,org/joda/time/DateTimeZone,10,448,"            if (providerClass != null) {
",2,1,0,1,3,0,0,0,0,3,28,6,0.01084,0
defect4j,time,org/joda/time/DateTimeZone,10,458,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01084,0
defect4j,time,org/joda/time/DateTimeZone,10,460,"        if (provider == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.01084,0
defect4j,time,org/joda/time/DateTimeZone,10,462,"                provider = new ZoneInfoProvider(""org/joda/time/tz/data"");
",2,0,0,1,2,0,0,2,0,6,57,8,0.01084,0
defect4j,time,org/joda/time/DateTimeZone,10,466,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01084,0
defect4j,time,org/joda/time/DateTimeZone,10,469,"        if (provider == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.01084,0
defect4j,time,org/joda/time/DateTimeZone,10,473,"        return provider;
",2,0,0,0,0,1,0,0,0,2,16,4,0.01084,0
defect4j,time,org/joda/time/DateTimeZone,10,514,"        if (nameProvider == null) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.01084,0
defect4j,time,org/joda/time/DateTimeZone,10,515,"            nameProvider = getDefaultNameProvider();
",2,0,0,1,2,0,2,0,0,5,40,6,0.01084,0
defect4j,time,org/joda/time/DateTimeZone,10,517,"        cNameProvider = nameProvider;
",4,0,0,0,0,0,0,0,0,5,29,4,0.01084,0
defect4j,time,org/joda/time/DateTimeZone,10,518,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01084,0
defect4j,time,org/joda/time/DateTimeZone,10,529,"        NameProvider nameProvider = null;
",2,0,0,0,0,0,0,2,0,4,33,4,0.01084,0
defect4j,time,org/joda/time/DateTimeZone,10,531,"            String providerClass = System.getProperty(""org.joda.time.DateTimeZone.NameProvider"");
",2,0,0,1,2,0,4,2,0,9,85,6,0.01084,0
defect4j,time,org/joda/time/DateTimeZone,10,532,"            if (providerClass != null) {
",2,1,0,1,3,0,0,0,0,3,28,6,0.01084,0
defect4j,time,org/joda/time/DateTimeZone,10,542,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01084,0
defect4j,time,org/joda/time/DateTimeZone,10,544,"        if (nameProvider == null) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.01084,0
defect4j,time,org/joda/time/DateTimeZone,10,545,"            nameProvider = new DefaultNameProvider();
",2,0,0,1,2,0,0,2,0,5,41,6,0.01084,0
defect4j,time,org/joda/time/DateTimeZone,10,548,"        return nameProvider;
",2,0,0,0,0,1,0,0,0,2,20,4,0.01084,0
defect4j,time,org/joda/time/DateTimeZone,10,706,"        return iID;
",2,0,0,0,0,1,0,0,0,2,11,4,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,504,"        {
",0,0,0,0,1,0,0,0,0,0,1,3,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,505,"            if (mode != 'u' && mode != 'w' && mode != 's') {
",6,5,0,1,3,0,0,0,0,14,48,5,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,509,"            iMode = mode;
",4,0,0,0,0,0,0,0,0,5,13,5,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,510,"            iMonthOfYear = monthOfYear;
",4,0,0,0,0,0,0,0,0,5,27,5,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,511,"            iDayOfMonth = dayOfMonth;
",4,0,0,0,0,0,0,0,0,5,25,5,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,512,"            iDayOfWeek = dayOfWeek;
",4,0,0,0,0,0,0,0,0,5,23,5,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,513,"            iAdvance = advanceDayOfWeek;
",4,0,0,0,0,0,0,0,0,5,28,5,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,514,"            iMillisOfDay = millisOfDay;
",4,0,0,0,0,0,0,0,0,5,27,5,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,515,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,482,"            return new OfYear((char)in.readUnsignedByte(),
",0,0,0,2,5,1,4,2,0,6,46,6,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,82,"        this(resourcePath, null, false);
",2,0,0,1,2,0,0,0,0,3,32,4,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,83,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,106,"    {
",0,0,0,0,1,0,0,0,0,0,1,3,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,107,"        if (resourcePath == null) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,110,"        if (!resourcePath.endsWith(""/"")) {
",0,0,0,2,5,0,4,0,0,6,34,4,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,111,"            resourcePath += '/';
",2,0,0,0,0,0,0,0,0,4,20,6,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,114,"        iFileDir = null;
",2,0,0,0,0,0,0,0,0,3,16,4,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,115,"        iResourcePath = resourcePath;
",4,0,0,0,0,0,0,0,0,5,29,4,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,117,"        if (loader == null && !favorSystemLoader) {
",4,2,0,1,3,0,0,0,0,7,43,4,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,118,"            loader = getClass().getClassLoader();
",2,0,0,2,4,0,4,0,0,7,37,6,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,121,"        iLoader = loader;
",4,0,0,0,0,0,0,0,0,5,17,4,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,123,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));
",2,0,0,2,4,0,4,0,0,8,60,4,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,124,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,136,"        if (id == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,140,"        Object obj = iZoneInfoMap.get(id);
",2,0,0,1,2,0,6,2,0,10,34,4,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,141,"        if (obj == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,145,"        if (id.equals(obj)) {
",0,0,0,2,5,0,6,0,0,6,21,5,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,147,"            return loadZoneData(id);
",0,0,0,1,2,1,4,0,0,4,24,7,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,150,"        if (obj instanceof SoftReference<?>) {
",2,0,0,1,3,0,0,2,0,4,38,5,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,152,"            SoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;
",4,0,0,1,2,0,0,8,0,12,68,6,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,153,"            DateTimeZone tz = ref.get();
",2,0,0,1,2,0,4,2,0,8,28,6,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,154,"            if (tz != null) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,155,"                return tz;
",2,0,0,0,0,1,0,0,0,2,10,8,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,174,"        return new TreeSet<String>(iZoneInfoMap.keySet());
",0,0,0,2,4,1,4,4,0,8,50,5,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,196,"        if (iFileDir != null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,199,"            String path = iResourcePath.concat(name);
",2,0,0,1,2,0,6,2,0,10,41,6,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,200,"            if (iLoader != null) {
",2,1,0,1,3,0,0,0,0,3,22,6,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,201,"                in = iLoader.getResourceAsStream(path);
",2,0,0,1,2,0,6,0,0,9,39,8,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,205,"            if (in == null) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,214,"        return in;
",2,0,0,0,0,1,0,0,0,2,10,4,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,224,"        InputStream in = null;
",2,0,0,0,0,0,0,2,0,4,22,4,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,226,"            in = openResource(id);
",2,0,0,1,2,0,4,0,0,7,22,6,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,227,"            DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);
",2,0,0,1,2,0,8,2,0,12,55,6,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,228,"            iZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));
",2,0,0,2,4,0,6,4,0,12,58,7,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,229,"            return tz;
",2,0,0,0,0,1,0,0,0,2,10,6,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,236,"                if (in != null) {
",2,1,0,1,3,0,0,0,0,3,17,8,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,237,"                    in.close();
",0,0,0,1,2,0,4,0,0,4,11,11,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,240,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,252,"        Map<String, Object> map = new ConcurrentHashMap<String, Object>();
",2,0,0,1,2,0,0,12,0,14,66,4,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,253,"        DataInputStream din = new DataInputStream(in);
",4,0,0,1,2,0,0,4,0,8,46,4,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,255,"            readZoneInfoMap(din, map);
",0,0,0,1,2,0,6,0,0,6,26,7,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,258,"                din.close();
",0,0,0,1,2,0,4,0,0,4,12,9,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,260,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,262,"        map.put(""UTC"", new SoftReference<DateTimeZone>(DateTimeZone.UTC));
",4,0,0,2,4,0,4,4,0,13,66,5,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,263,"        return map;
",2,0,0,0,0,1,0,0,0,2,11,4,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,274,"        int size = din.readUnsignedShort();
",2,0,0,1,2,0,4,0,0,6,35,5,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,275,"        String[] pool = new String[size];
",2,0,1,2,4,0,0,4,0,8,33,4,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,276,"        for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,4,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,277,"            pool[i] = din.readUTF().intern();
",0,0,1,3,6,0,6,0,0,11,33,6,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,281,"        size = din.readUnsignedShort();
",2,0,0,1,2,0,4,0,0,7,31,4,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,282,"        for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,4,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,284,"                zimap.put(pool[din.readUnsignedShort()], pool[din.readUnsignedShort()]);
",0,0,1,5,10,0,12,0,0,16,72,9,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,287,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01084,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,289,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1176,"            super(id);
",2,0,0,1,2,0,0,0,0,2,10,5,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1177,"            iStandardOffset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,33,5,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1178,"            iStartRecurrence = startRecurrence;
",4,0,0,0,0,0,0,0,0,5,35,5,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1179,"            iEndRecurrence = endRecurrence;
",4,0,0,0,0,0,0,0,0,5,31,5,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1180,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1166,"            return new DSTZone(id, (int)readMillis(in), 
",2,0,0,2,5,1,4,2,0,8,43,6,0.01084,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,10,38,"        super(id);
",2,0,0,1,2,0,0,0,0,2,10,4,0.01084,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,10,39,"        iNameKey = nameKey;
",4,0,0,0,0,0,0,0,0,5,19,4,0.01084,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,10,40,"        iWallOffset = wallOffset;
",4,0,0,0,0,0,0,0,0,5,25,4,0.01084,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,10,41,"        iStandardOffset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,33,4,0.01084,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,10,42,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01084,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,10,88,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.01084,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,10,89,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.01084,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,10,39,"    public DefaultNameProvider() {
",2,0,0,1,3,1,0,0,0,3,30,2,0.01084,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,10,37,"    private HashMap<Locale, Map<String, Map<String, Object>>> iByLocaleCache = createCache();
",2,0,0,1,2,1,2,14,0,19,89,2,0.01084,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,10,40,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01084,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,10,99,"        return new HashMap(7);
",0,0,0,1,2,1,0,2,0,2,22,6,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,95,"        if (in instanceof DataInput) {
",2,0,0,1,3,0,0,2,0,4,30,5,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,98,"            return readFrom((DataInput)new DataInputStream(in), id);
",2,0,0,3,6,1,4,4,0,10,56,7,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,110,"        switch (in.readUnsignedByte()) {
",0,0,0,2,5,0,4,0,0,4,32,5,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,119,"            return CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in, id));
",0,0,0,2,4,1,12,0,0,12,70,6,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,183,"        int v = in.readUnsignedByte();
",2,0,0,1,2,0,4,0,0,6,30,5,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,184,"        switch (v >> 6) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,187,"            v = (v << (32 - 6)) >> (32 - 6);
",4,4,0,3,6,0,0,0,0,9,32,5,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,188,"            return v * (30 * 60000L);
",2,2,0,1,2,1,0,0,0,4,25,5,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,192,"            v = (v << (32 - 6)) >> (32 - 30);
",4,4,0,3,6,0,0,0,0,9,33,5,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,193,"            v |= (in.readUnsignedByte()) << 16;
",2,1,0,2,4,0,4,0,0,8,35,5,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,194,"            v |= (in.readUnsignedByte()) << 8;
",2,1,0,2,4,0,4,0,0,8,34,5,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,195,"            v |= (in.readUnsignedByte());
",2,0,0,2,4,0,4,0,0,7,29,5,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,196,"            return v * 60000L;
",2,1,0,0,0,1,0,0,0,3,18,5,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,200,"            long w = (((long)v) << (64 - 6)) >> (64 - 38);
",4,4,0,5,10,0,0,0,0,8,46,6,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,201,"            w |= (in.readUnsignedByte()) << 24;
",2,1,0,2,4,0,4,0,0,8,35,5,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,202,"            w |= (in.readUnsignedByte()) << 16;
",2,1,0,2,4,0,4,0,0,8,35,5,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,203,"            w |= (in.readUnsignedByte()) << 8;
",2,1,0,2,4,0,4,0,0,8,34,5,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,204,"            w |= (in.readUnsignedByte());
",2,0,0,2,4,0,4,0,0,7,29,5,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,205,"            return w * 1000L;
",2,1,0,0,0,1,0,0,0,3,17,5,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,209,"            return in.readLong();
",0,0,0,1,2,1,4,0,0,4,21,6,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1500,"            super(id);
",2,0,0,1,2,0,0,0,0,2,10,5,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1501,"            iTransitions = transitions;
",4,0,0,0,0,0,0,0,0,5,27,5,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1502,"            iWallOffsets = wallOffsets;
",4,0,0,0,0,0,0,0,0,5,27,5,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1503,"            iStandardOffsets = standardOffsets;
",4,0,0,0,0,0,0,0,0,5,35,5,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1504,"            iNameKeys = nameKeys;
",4,0,0,0,0,0,0,0,0,5,21,5,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1505,"            iTailZone = tailZone;
",4,0,0,0,0,0,0,0,0,5,21,5,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1506,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1341,"            int poolSize = in.readUnsignedShort();
",2,0,0,1,2,0,4,0,0,6,38,6,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1342,"            String[] pool = new String[poolSize];
",2,0,1,2,4,0,0,4,0,8,37,5,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1343,"            for (int i=0; i<poolSize; i++) {
",8,1,0,1,3,0,0,0,0,10,32,5,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1344,"                pool[i] = in.readUTF();
",0,0,1,2,4,0,4,0,0,9,23,7,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1347,"            int size = in.readInt();
",2,0,0,1,2,0,4,0,0,6,24,6,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1348,"            long[] transitions = new long[size];
",2,0,1,2,4,0,0,0,0,4,36,6,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1349,"            int[] wallOffsets = new int[size];
",2,0,1,2,4,0,0,0,0,4,34,6,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1350,"            int[] standardOffsets = new int[size];
",2,0,1,2,4,0,0,0,0,4,38,6,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1351,"            String[] nameKeys = new String[size];
",2,0,1,2,4,0,0,4,0,8,37,5,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1353,"            for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,5,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1354,"                transitions[i] = readMillis(in);
",0,0,1,2,4,0,4,0,0,9,32,7,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1355,"                wallOffsets[i] = (int)readMillis(in);
",0,0,1,3,6,0,4,0,0,9,37,7,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1356,"                standardOffsets[i] = (int)readMillis(in);
",0,0,1,3,6,0,4,0,0,9,41,7,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1359,"                    if (poolSize < 256) {
",2,1,0,1,3,0,0,0,0,3,21,9,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1360,"                        index = in.readUnsignedByte();
",2,0,0,1,2,0,4,0,0,7,30,11,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1364,"                    nameKeys[i] = pool[index];
",0,0,1,2,4,0,0,0,0,9,26,9,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1367,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1370,"            DSTZone tailZone = null;
",2,0,0,0,0,0,0,2,0,4,24,5,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1371,"            if (in.readBoolean()) {
",0,0,0,2,5,0,4,0,0,4,23,6,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1372,"                tailZone = DSTZone.readFrom(in, id);
",2,0,0,1,2,0,8,0,0,11,36,7,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1375,"            return new PrecalculatedZone
",0,0,0,0,0,1,0,2,0,2,28,7,0.01084,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,87,"        super(zone.getID());
",0,0,0,2,4,0,4,0,0,4,20,5,0.01084,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,84,"    private final Info[] iInfoCache = new Info[cInfoCacheMask + 1];
",4,1,0,2,4,2,0,4,0,11,63,2,0.01084,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,88,"        iZone = zone;
",4,0,0,0,0,0,0,0,0,5,13,4,0.01084,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,89,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01084,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,39,"            i = Integer.getInteger(""org.joda.time.tz.CachedDateTimeZone.size"");
",2,0,0,1,2,0,4,0,0,8,67,6,0.01084,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,42,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01084,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,45,"        if (i == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.01084,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,48,"            cacheSize = 512; // (1 << 9)
",2,0,0,1,2,0,0,0,0,3,28,6,0.01084,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,61,"        cInfoCacheMask = cacheSize - 1;
",4,1,0,0,0,0,0,0,0,6,31,4,0.01084,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,62,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01084,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,68,"        if (zone instanceof CachedDateTimeZone) {
",2,0,0,1,3,0,0,2,0,4,41,5,0.01084,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,71,"        return new CachedDateTimeZone(zone);
",2,0,0,1,2,1,0,2,0,4,36,5,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,747,"        Recurrence(OfYear ofYear, String nameKey, int saveMillis) {
",8,0,0,1,3,0,0,4,0,12,59,3,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,748,"            iOfYear = ofYear;
",4,0,0,0,0,0,0,0,0,5,17,5,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,749,"            iNameKey = nameKey;
",4,0,0,0,0,0,0,0,0,5,19,5,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,750,"            iSaveMillis = saveMillis;
",4,0,0,0,0,0,0,0,0,5,25,5,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,751,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01084,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,740,"            return new Recurrence(OfYear.readFrom(in), in.readUTF(), (int)readMillis(in));
",0,0,0,5,10,1,14,2,0,16,78,6,0.01084,0
defect4j,time,org/joda/time/field/FieldUtils,10,82,"        long sum = val1 + val2;
",6,1,0,0,0,0,0,0,0,7,23,5,0.01031,0
defect4j,time,org/joda/time/field/FieldUtils,10,84,"        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {
",8,5,0,3,7,0,0,0,0,13,45,4,0.01031,0
defect4j,time,org/joda/time/field/FieldUtils,10,88,"        return sum;
",2,0,0,0,0,1,0,0,0,2,11,4,0.01031,0
defect4j,time,org/joda/time/DateTimeFieldType,10,378,"        return iName;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,410,"        return getField(chronology).isSupported();
",0,0,0,2,4,1,6,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,419,"        return getName();
",0,0,0,1,2,1,2,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,41,"public abstract class DateTimeFieldType implements Serializable {
",2,0,0,0,1,2,0,2,0,6,65,1,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,839,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,840,"            iBase = partial;
",4,0,0,0,0,0,0,0,0,5,16,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,841,"            iFieldIndex = fieldIndex;
",4,0,0,0,0,0,0,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,842,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,850,"            return iBase.getField(iFieldIndex);
",0,0,0,1,2,1,6,0,0,6,35,6,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,859,"            return iBase;
",2,0,0,0,0,1,0,0,0,2,13,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,868,"            return iBase;
",2,0,0,0,0,1,0,0,0,2,13,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,877,"            return iBase.getValue(iFieldIndex);
",0,0,0,1,2,1,6,0,0,6,35,6,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,896,"            int[] newValues = iBase.getValues();
",2,0,0,2,4,0,4,0,0,6,36,6,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,897,"            newValues = getField().add(iBase, iFieldIndex, newValues, valueToAdd);
",2,0,0,2,4,0,12,0,0,15,70,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,898,"            return new MonthDay(iBase, newValues);
",4,0,0,1,2,1,0,2,0,6,38,6,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,920,"            int[] newValues = iBase.getValues();
",2,0,0,2,4,0,4,0,0,6,36,6,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,921,"            newValues = getField().addWrapField(iBase, iFieldIndex, newValues, valueToAdd);
",2,0,0,2,4,0,12,0,0,15,79,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,922,"            return new MonthDay(iBase, newValues);
",4,0,0,1,2,1,0,2,0,6,38,6,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,937,"            int[] newValues = iBase.getValues();
",2,0,0,2,4,0,4,0,0,6,36,6,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,938,"            newValues = getField().set(iBase, iFieldIndex, newValues, value);
",2,0,0,2,4,0,12,0,0,15,65,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,939,"            return new MonthDay(iBase, newValues);
",4,0,0,1,2,1,0,2,0,6,38,6,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,954,"            int[] newValues = iBase.getValues();
",2,0,0,2,4,0,4,0,0,6,36,6,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,955,"            newValues = getField().set(iBase, iFieldIndex, newValues, text, locale);
",2,0,0,2,4,0,14,0,0,17,72,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,956,"            return new MonthDay(iBase, newValues);
",4,0,0,1,2,1,0,2,0,6,38,6,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,970,"            return setCopy(text, null);
",0,0,0,1,2,1,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,221,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,222,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,236,"        super(ISOChronology.getInstance(zone));
",0,0,0,2,4,0,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,237,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,251,"        super(chronology);
",2,0,0,1,2,0,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,252,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,265,"        super(instant);
",2,0,0,1,2,0,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,266,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,280,"        super(instant, chronology);
",4,0,0,1,2,0,0,0,0,4,27,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,281,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,297,"        super(instant, null, ISODateTimeFormat.localDateParser());
",2,0,0,2,4,0,4,0,0,7,58,3,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,298,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,319,"        super(instant, DateTimeUtils.getChronology(chronology), ISODateTimeFormat.localDateParser());
",2,0,0,3,6,0,10,0,0,12,93,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,320,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,362,"        super(partial, values);
",4,0,0,1,2,0,0,0,0,4,23,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,363,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,372,"        super(partial, chrono);
",4,0,0,1,2,0,0,0,0,4,23,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,373,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,103,"        return new MonthDay();
",0,0,0,1,2,1,0,2,0,2,22,6,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,116,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,117,"            throw new NullPointerException(""Zone must not be null"");
",0,0,0,1,2,0,0,2,0,4,56,6,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,119,"        return new MonthDay(zone);
",2,0,0,1,2,1,0,2,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,132,"        if (chronology == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,133,"            throw new NullPointerException(""Chronology must not be null"");
",0,0,0,1,2,0,0,2,0,4,62,6,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,135,"        return new MonthDay(chronology);
",2,0,0,1,2,1,0,2,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,149,"        return parse(str, PARSER);
",0,0,0,1,2,1,6,0,0,6,26,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,160,"        LocalDate date = formatter.parseLocalDate(str);
",2,0,0,1,2,0,6,2,0,10,47,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,161,"        return new MonthDay(date.getMonthOfYear(), date.getDayOfMonth());
",0,0,0,3,6,1,8,2,0,10,65,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,182,"        if (calendar == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,183,"            throw new IllegalArgumentException(""The calendar must not be null"");
",0,0,0,1,2,0,0,2,0,4,68,6,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,185,"        return new MonthDay(calendar.get(Calendar.MONTH) + 1, calendar.get(Calendar.DAY_OF_MONTH));
",8,1,0,3,6,1,8,2,0,19,91,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,203,"        if (date == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,204,"            throw new IllegalArgumentException(""The date must not be null"");
",0,0,0,1,2,0,0,2,0,4,64,6,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,206,"        return new MonthDay(date.getMonth() + 1, date.getDate());
",0,1,0,3,6,1,8,2,0,11,57,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,380,"        if (DateTimeZone.UTC.equals(getChronology().getZone()) == false) {
",4,1,0,4,9,0,6,0,0,12,66,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,381,"            return new MonthDay(this, getChronology().withUTC());
",0,0,0,3,6,1,4,2,0,6,53,7,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,383,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,414,"            throw new IndexOutOfBoundsException(""Invalid index: "" + index);
",2,1,0,1,2,0,0,2,0,6,63,6,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,437,"        return (DateTimeFieldType[]) FIELD_TYPES.clone();
",0,0,0,3,6,1,4,2,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,456,"        newChronology = DateTimeUtils.getChronology(newChronology);
",2,0,0,1,2,0,6,0,0,9,59,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,457,"        newChronology = newChronology.withUTC();
",2,0,0,1,2,0,4,0,0,7,40,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,458,"        if (newChronology == getChronology()) {
",2,1,0,2,5,0,2,0,0,5,39,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,459,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,461,"            MonthDay newMonthDay = new MonthDay(this, newChronology);
",4,0,0,1,2,0,0,4,0,8,57,6,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,462,"            newChronology.validate(newMonthDay, getValues());
",0,0,0,2,4,0,8,0,0,8,49,7,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,463,"            return newMonthDay;
",2,0,0,0,0,1,0,0,0,2,19,6,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,486,"        int index = indexOfSupported(fieldType);
",2,0,0,1,2,0,4,0,0,6,40,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,487,"        if (value == getValue(index)) {
",2,1,0,2,5,0,4,0,0,7,31,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,488,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,490,"        int[] newValues = getValues();
",2,0,0,2,4,0,2,0,0,4,30,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,491,"        newValues = getField(index).set(this, index, newValues, value);
",2,0,0,2,4,0,12,0,0,15,63,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,492,"        return new MonthDay(this, newValues);
",2,0,0,1,2,1,0,2,0,4,37,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,514,"        int index = indexOfSupported(fieldType);
",2,0,0,1,2,0,4,0,0,6,40,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,515,"        if (amount == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,516,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,518,"        int[] newValues = getValues();
",2,0,0,2,4,0,2,0,0,4,30,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,519,"        newValues = getField(index).add(this, index, newValues, amount);
",2,0,0,2,4,0,12,0,0,15,64,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,520,"        return new MonthDay(this, newValues);
",2,0,0,1,2,1,0,2,0,4,37,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,540,"        if (period == null || scalar == 0) {
",4,3,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,541,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,543,"        int[] newValues = getValues();
",2,0,0,2,4,0,2,0,0,4,30,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,544,"        for (int i = 0; i < period.size(); i++) {
",6,1,0,2,5,0,4,0,0,12,41,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,545,"            DurationFieldType fieldType = period.getFieldType(i);
",2,0,0,1,2,0,6,2,0,10,53,6,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,546,"            int index = indexOf(fieldType);
",2,0,0,1,2,0,4,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,547,"            if (index >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,548,"                newValues = getField(index).add(this, index, newValues,
",2,0,0,1,3,0,10,0,0,13,55,8,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,552,"        return new MonthDay(this, newValues);
",2,0,0,1,2,1,0,2,0,4,37,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,570,"        return withPeriodAdded(period, 1);
",0,0,0,1,2,1,4,0,0,4,34,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,592,"        return withFieldAdded(DurationFieldType.months(), months);
",0,0,0,2,4,1,8,0,0,8,58,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,612,"        return withFieldAdded(DurationFieldType.days(), days);
",0,0,0,2,4,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,630,"        return withPeriodAdded(period, -1);
",0,0,0,1,2,1,4,0,0,5,35,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,652,"        return withFieldAdded(DurationFieldType.months(), FieldUtils.safeNegate(months));
",0,0,0,3,6,1,12,0,0,12,81,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,672,"        return withFieldAdded(DurationFieldType.days(), FieldUtils.safeNegate(days));
",0,0,0,3,6,1,12,0,0,12,77,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,683,"        return new LocalDate(year, getMonthOfYear(), getDayOfMonth(), getChronology());
",2,0,0,4,8,1,6,2,0,10,79,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,693,"        return getValue(MONTH_OF_YEAR);
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,702,"        return getValue(DAY_OF_MONTH);
",0,0,0,1,2,1,4,0,0,4,30,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,718,"        int[] newValues = getValues();
",2,0,0,2,4,0,2,0,0,4,30,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,719,"        newValues = getChronology().monthOfYear().set(this, MONTH_OF_YEAR, newValues, monthOfYear);
",2,0,0,3,6,0,12,0,0,15,91,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,720,"        return new MonthDay(this, newValues);
",2,0,0,1,2,1,0,2,0,4,37,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,735,"        int[] newValues = getValues();
",2,0,0,2,4,0,2,0,0,4,30,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,736,"        newValues = getChronology().dayOfMonth().set(this, DAY_OF_MONTH, newValues, dayOfMonth);
",2,0,0,3,6,0,12,0,0,15,88,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,737,"        return new MonthDay(this, newValues);
",2,0,0,1,2,1,0,2,0,4,37,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,750,"        return new Property(this, indexOfSupported(type));
",0,0,0,2,4,1,4,2,0,6,50,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,760,"        return new Property(this, MONTH_OF_YEAR);
",2,0,0,1,2,1,0,2,0,4,41,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,769,"        return new Property(this, DAY_OF_MONTH);
",2,0,0,1,2,1,0,2,0,4,40,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,780,"        List<DateTimeFieldType> fields = new ArrayList<DateTimeFieldType>();
",2,0,0,1,2,0,0,8,0,10,68,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,781,"        fields.add(DateTimeFieldType.monthOfYear());
",0,0,0,2,4,0,8,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,782,"        fields.add(DateTimeFieldType.dayOfMonth());
",0,0,0,2,4,0,8,0,0,8,43,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,783,"        return ISODateTimeFormat.forFields(fields, true, true).print(this);
",0,0,0,2,4,1,8,0,0,10,67,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,793,"        if (pattern == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,794,"            return toString();
",0,0,0,1,2,1,2,0,0,2,18,7,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,796,"        return DateTimeFormat.forPattern(pattern).print(this);
",0,0,0,2,4,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,807,"        if (pattern == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,808,"            return toString();
",0,0,0,1,2,1,2,0,0,2,18,7,0.00000,0
defect4j,time,org/joda/time/MonthDay,10,810,"        return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);
",0,0,0,3,6,1,12,0,0,12,73,5,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,65,"        this(DateTimeUtils.currentTimeMillis(), null);
",0,0,0,2,4,0,4,0,0,4,46,5,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,66,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,79,"        this(DateTimeUtils.currentTimeMillis(), chronology);
",2,0,0,2,4,0,4,0,0,6,52,4,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,80,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,93,"        this(instant, null);
",2,0,0,1,2,0,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,94,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,108,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,109,"        chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,4,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,110,"        iChronology = chronology.withUTC();
",2,0,0,1,2,0,4,0,0,7,35,4,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,111,"        iValues = chronology.get(this, instant);
",2,0,0,1,2,0,6,0,0,9,40,4,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,112,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,131,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,132,"        PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);
",2,0,0,2,4,0,8,2,0,12,89,4,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,133,"        chronology = converter.getChronology(instant, chronology);
",2,0,0,1,2,0,8,0,0,11,58,4,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,134,"        chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,4,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,135,"        iChronology = chronology.withUTC();
",2,0,0,1,2,0,4,0,0,7,35,4,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,136,"        iValues = converter.getPartialValues(this, instant, chronology);
",2,0,0,1,2,0,8,0,0,11,64,4,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,137,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,158,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,159,"        PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);
",2,0,0,2,4,0,8,2,0,12,89,4,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,160,"        chronology = converter.getChronology(instant, chronology);
",2,0,0,1,2,0,8,0,0,11,58,4,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,161,"        chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,4,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,162,"        iChronology = chronology.withUTC();
",2,0,0,1,2,0,4,0,0,7,35,4,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,163,"        iValues = converter.getPartialValues(this, instant, chronology, parser);
",2,0,0,1,2,0,10,0,0,13,72,4,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,164,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,196,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,197,"        iChronology = base.iChronology;
",6,0,0,0,0,0,0,0,0,7,31,4,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,198,"        iValues = values;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,199,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,211,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,212,"        iChronology = chrono.withUTC();
",2,0,0,1,2,0,4,0,0,7,31,4,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,213,"        iValues = base.iValues;
",6,0,0,0,0,0,0,0,0,7,23,4,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,214,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,237,"        return (int[]) iValues.clone();
",0,0,0,3,6,1,4,0,0,4,31,6,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,265,"        DateTimeField field = getField(index);
",2,0,0,1,2,0,4,2,0,8,38,4,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,266,"        int[] values = field.set(this, index, iValues, value);
",2,0,0,2,4,0,10,0,0,12,54,5,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,267,"        System.arraycopy(values, 0, iValues, 0, iValues.length);
",4,0,0,1,2,0,8,0,0,12,56,5,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,268,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,280,"        getChronology().validate(this, values);
",0,0,0,2,4,0,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,281,"        System.arraycopy(values, 0, iValues, 0, iValues.length);
",4,0,0,1,2,0,8,0,0,12,56,5,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,282,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,292,"        if (pattern == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,293,"            return toString();
",0,0,0,1,2,1,2,0,0,2,18,7,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,295,"        return DateTimeFormat.forPattern(pattern).print(this);
",0,0,0,2,4,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,306,"        if (pattern == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,307,"            return toString();
",0,0,0,1,2,1,2,0,0,2,18,7,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,10,309,"        return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);
",0,0,0,3,6,1,12,0,0,12,73,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,79,"        return getField(index, getChronology()).getType();
",0,0,0,3,6,1,8,0,0,8,50,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,90,"        DateTimeFieldType[] result = new DateTimeFieldType[size()];
",2,0,0,3,6,0,2,4,0,8,59,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,91,"        for (int i = 0; i < result.length; i++) {
",10,1,0,1,3,0,0,0,0,12,41,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,92,"            result[i] = getFieldType(i);
",0,0,1,2,4,0,4,0,0,9,28,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,94,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,116,"        DateTimeField[] result = new DateTimeField[size()];
",2,0,0,3,6,0,2,4,0,8,51,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,117,"        for (int i = 0; i < result.length; i++) {
",10,1,0,1,3,0,0,0,0,12,41,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,118,"            result[i] = getField(i);
",0,0,1,2,4,0,4,0,0,9,24,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,120,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,132,"        int[] result = new int[size()];
",2,0,0,3,6,0,2,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,133,"        for (int i = 0; i < result.length; i++) {
",10,1,0,1,3,0,0,0,0,12,41,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,134,"            result[i] = getValue(i);
",0,0,1,2,4,0,4,0,0,9,24,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,136,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,150,"        return getValue(indexOfSupported(type));
",0,0,0,2,4,1,6,0,0,6,40,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,160,"        return (indexOf(type) != -1);
",0,1,0,2,4,1,4,0,0,6,29,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,170,"        for (int i = 0, isize = size(); i < isize; i++) {
",10,1,0,2,5,0,2,0,0,14,49,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,171,"            if (getFieldType(i) == type) {
",2,1,0,2,5,0,4,0,0,7,30,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,172,"                return i;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,175,"        return -1;
",0,0,0,0,0,1,0,0,0,1,10,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,187,"        int index = indexOf(type);
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,188,"        if (index == -1) {
",2,1,0,1,3,0,0,0,0,4,18,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,189,"            throw new IllegalArgumentException(""Field '"" + type + ""' is not supported"");
",2,1,0,1,2,0,0,2,0,7,76,7,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,191,"        return index;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,202,"        for (int i = 0, isize = size(); i < isize; i++) {
",10,1,0,2,5,0,2,0,0,14,49,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,203,"            if (getFieldType(i).getDurationType() == type) {
",2,1,0,3,7,0,6,0,0,9,48,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,204,"                return i;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,207,"        return -1;
",0,0,0,0,0,1,0,0,0,1,10,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,219,"        int index = indexOf(type);
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,220,"        if (index == -1) {
",2,1,0,1,3,0,0,0,0,4,18,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,221,"            throw new IllegalArgumentException(""Field '"" + type + ""' is not supported"");
",2,1,0,1,2,0,0,2,0,7,76,7,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,223,"        return index;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,240,"        Chronology chrono = DateTimeUtils.getInstantChronology(baseInstant);
",2,0,0,1,2,0,6,2,0,10,68,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,241,"        long instantMillis = DateTimeUtils.getInstantMillis(baseInstant);
",2,0,0,1,2,0,6,0,0,8,65,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,242,"        long resolved = chrono.set(this, instantMillis);
",2,0,0,1,2,0,6,0,0,8,48,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,243,"        return new DateTime(resolved, chrono);
",4,0,0,1,2,1,0,2,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,255,"        if (this == partial) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,256,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,258,"        if (partial instanceof ReadablePartial == false) {
",2,1,0,1,3,0,0,2,0,6,50,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,259,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,261,"        ReadablePartial other = (ReadablePartial) partial;
",4,0,0,1,2,0,0,4,0,8,50,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,262,"        if (size() != other.size()) {
",0,1,0,3,7,0,6,0,0,7,29,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,263,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,265,"        for (int i = 0, isize = size(); i < isize; i++) {
",10,1,0,2,5,0,2,0,0,14,49,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,266,"            if (getValue(i) != other.getValue(i) || getFieldType(i) != other.getFieldType(i)) {
",0,3,0,5,11,0,20,0,0,23,83,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,267,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,270,"        return FieldUtils.equals(getChronology(), other.getChronology());
",0,0,0,3,6,1,10,0,0,10,65,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,280,"        int total = 157;
",2,0,0,0,0,0,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,281,"        for (int i = 0, isize = size(); i < isize; i++) {
",10,1,0,2,5,0,2,0,0,14,49,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,282,"            total = 23 * total + getValue(i);
",4,2,0,1,2,0,4,0,0,11,33,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,283,"            total = 23 * total + getFieldType(i).hashCode();
",4,2,0,2,4,0,6,0,0,13,48,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,285,"        total += getChronology().hashCode();
",2,0,0,2,4,0,4,0,0,7,36,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,286,"        return total;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,311,"        if (this == other) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,312,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,314,"        if (size() != other.size()) {
",0,1,0,3,7,0,6,0,0,7,29,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,315,"            throw new ClassCastException(""ReadablePartial objects must have matching field types"");
",0,0,0,1,2,0,0,2,0,3,87,7,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,317,"        for (int i = 0, isize = size(); i < isize; i++) {
",10,1,0,2,5,0,2,0,0,14,49,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,318,"            if (getFieldType(i) != other.getFieldType(i)) {
",0,1,0,3,7,0,10,0,0,11,47,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,319,"                throw new ClassCastException(""ReadablePartial objects must have matching field types"");
",0,0,0,1,2,0,0,2,0,3,87,9,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,323,"        for (int i = 0, isize = size(); i < isize; i++) {
",10,1,0,2,5,0,2,0,0,14,49,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,324,"            if (getValue(i) > other.getValue(i)) {
",0,1,0,3,7,0,10,0,0,11,38,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,325,"                return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,327,"            if (getValue(i) < other.getValue(i)) {
",0,1,0,3,7,0,10,0,0,11,38,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,328,"                return -1;
",0,0,0,0,0,1,0,0,0,1,10,8,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,331,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,350,"        if (partial == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,351,"            throw new IllegalArgumentException(""Partial cannot be null"");
",0,0,0,1,2,0,0,2,0,4,61,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,353,"        return compareTo(partial) > 0;
",0,1,0,1,2,1,4,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,372,"        if (partial == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,373,"            throw new IllegalArgumentException(""Partial cannot be null"");
",0,0,0,1,2,0,0,2,0,4,61,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,375,"        return compareTo(partial) < 0;
",0,1,0,1,2,1,4,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,394,"        if (partial == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,395,"            throw new IllegalArgumentException(""Partial cannot be null"");
",0,0,0,1,2,0,0,2,0,4,61,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,397,"        return compareTo(partial) == 0;
",0,1,0,1,2,1,4,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,409,"        if (formatter == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,410,"            return toString();
",0,0,0,1,2,1,2,0,0,2,18,7,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,412,"        return formatter.print(this);
",0,0,0,1,2,1,4,0,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,10,46,"public abstract class AbstractPartial
",2,0,0,0,0,2,0,0,0,4,37,1,0.00000,0
defect4j,time,org/joda/time/DurationField,10,209,"        if (value == Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/DurationField,10,210,"            return subtract(instant, (long) value);
",2,0,0,2,4,1,4,0,0,6,39,7,0.00000,0
defect4j,time,org/joda/time/DurationField,10,212,"        return add(instant, -value);
",2,0,0,1,2,1,4,0,0,7,28,5,0.00000,0
defect4j,time,org/joda/time/DurationField,10,224,"        if (value == Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,30,4,0.00000,0
defect4j,time,org/joda/time/DurationField,10,225,"            throw new ArithmeticException(""Long.MIN_VALUE cannot be negated"");
",0,0,0,1,2,0,0,2,0,3,66,7,0.00000,0
defect4j,time,org/joda/time/DurationField,10,227,"        return add(instant, -value);
",2,0,0,1,2,1,4,0,0,7,28,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,569,"        OffsetMillisProvider(long offsetMillis) {
",4,0,0,1,3,0,0,0,0,4,41,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,570,"            iMillis = offsetMillis;
",4,0,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,571,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,578,"            return System.currentTimeMillis() + iMillis;
",2,1,0,1,2,1,4,0,0,7,44,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,73,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,74,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,64,"        } catch (RuntimeException ex) {
",2,0,0,1,4,0,0,2,0,4,31,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,86,"        return cMillisProvider.getMillis();
",0,0,0,1,2,1,4,0,0,4,35,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,98,"        checkPermission();
",0,0,0,1,2,0,2,0,0,2,18,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,99,"        cMillisProvider = SYSTEM_MILLIS_PROVIDER;
",4,0,0,0,0,0,0,0,0,5,41,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,100,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,112,"        checkPermission();
",0,0,0,1,2,0,2,0,0,2,18,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,113,"        cMillisProvider = new FixedMillisProvider(fixedMillis);
",4,0,0,1,2,0,0,2,0,7,55,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,114,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,127,"        checkPermission();
",0,0,0,1,2,0,2,0,0,2,18,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,128,"        if (offsetMillis == 0) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,129,"            cMillisProvider = SYSTEM_MILLIS_PROVIDER;
",4,0,0,0,0,0,0,0,0,5,41,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,131,"            cMillisProvider = new OffsetMillisProvider(offsetMillis);
",4,0,0,1,2,0,0,2,0,7,57,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,133,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,146,"        if (millisProvider == null) {
",2,1,0,1,3,0,0,0,0,3,29,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,147,"            throw new IllegalArgumentException(""The MillisProvider must not be null"");
",0,0,0,1,2,0,0,2,0,4,74,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,149,"        checkPermission();
",0,0,0,1,2,0,2,0,0,2,18,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,150,"        cMillisProvider = millisProvider;
",4,0,0,0,0,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,151,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,159,"        SecurityManager sm = System.getSecurityManager();
",2,0,0,1,2,0,4,2,0,8,49,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,160,"        if (sm != null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,161,"            sm.checkPermission(new JodaTimePermission(""CurrentTime.setProvider""));
",0,0,0,2,4,0,4,2,0,7,70,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,163,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,176,"        if (instant == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,177,"            return DateTimeUtils.currentTimeMillis();
",0,0,0,1,2,1,4,0,0,4,41,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,179,"        return instant.getMillis();
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,194,"        if (instant == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,195,"            return ISOChronology.getInstance();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,197,"        Chronology chrono = instant.getChronology();
",2,0,0,1,2,0,4,2,0,8,44,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,198,"        if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,199,"            return ISOChronology.getInstance();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,201,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,217,"        Chronology chrono = null;
",2,0,0,0,0,0,0,2,0,4,25,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,218,"        if (start != null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,219,"            chrono = start.getChronology();
",2,0,0,1,2,0,4,0,0,7,31,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,220,"        } else if (end != null) {
",2,1,0,1,4,0,0,0,0,3,25,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,221,"            chrono = end.getChronology();
",2,0,0,1,2,0,4,0,0,7,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,223,"        if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,224,"            chrono = ISOChronology.getInstance();
",2,0,0,1,2,0,4,0,0,7,37,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,226,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,241,"        if (interval == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,242,"            return ISOChronology.getInstance();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,244,"        Chronology chrono = interval.getChronology();
",2,0,0,1,2,0,4,2,0,8,45,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,245,"        if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,246,"            return ISOChronology.getInstance();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,248,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,264,"        if (interval == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,265,"            long now = DateTimeUtils.currentTimeMillis();
",2,0,0,1,2,0,4,0,0,6,45,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,266,"            interval = new Interval(now, now);
",6,0,0,1,2,0,0,2,0,9,34,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,268,"        return interval;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,299,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,300,"            return DateTimeZone.getDefault();
",0,0,0,1,2,1,4,0,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,302,"        return zone;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,316,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,317,"            return PeriodType.standard();
",0,0,0,1,2,1,4,0,0,4,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,319,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,333,"        if (duration == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,334,"            return 0L;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,336,"        return duration.getMillis();
",0,0,0,1,2,1,4,0,0,4,28,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,365,"            throw new IllegalArgumentException(""Partial must not be null"");
",0,0,0,1,2,0,0,2,0,4,63,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,372,"                    return false;
",0,0,0,0,0,1,0,0,0,1,13,10,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,395,"            Method method = DateFormatSymbols.class.getMethod(""getInstance"", new Class[] {Locale.class});
",2,0,0,3,6,0,2,8,0,13,93,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,396,"            return (DateFormatSymbols) method.invoke(null, new Object[] {locale});
",2,0,0,4,8,1,4,4,0,10,70,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,397,"        } catch (Exception ex) {
",2,0,0,1,4,0,0,2,0,4,24,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,398,"            return new DateFormatSymbols(locale);
",2,0,0,1,2,1,0,2,0,4,37,8,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,427,"        return cZoneNames;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,439,"        cZoneNames = Collections.unmodifiableMap(new HashMap<String, DateTimeZone>(names));
",4,0,0,2,4,0,4,6,0,15,83,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,440,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,466,"        double epochDay = epochMillis / 86400000d;
",4,1,0,0,0,0,0,0,0,5,42,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,467,"        return epochDay + 2440587.5d;
",2,1,0,0,0,1,0,0,0,3,29,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,486,"        return (long) Math.floor(toJulianDay(epochMillis) + 0.5d);
",0,1,0,3,6,1,8,0,0,9,58,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,499,"        double epochDay = julianDay - 2440587.5d;
",4,1,0,0,0,0,0,0,0,5,41,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,500,"        return (long) (epochDay * 86400000d);
",2,1,0,2,4,1,0,0,0,3,37,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,10,216,"        return iName;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,10,234,"        return getField(chronology).isSupported();
",0,0,0,2,4,1,6,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,10,243,"        return getName();
",0,0,0,1,2,1,2,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));
",0,0,0,3,6,0,12,0,0,14,79,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,109,"        iDateTimeFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,110,"        iDurationFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,111,"        iFieldName = fieldType.getName();
",2,0,0,1,2,0,4,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,112,"        iNumberValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,113,"        iStringValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,114,"        iLowerBound = lowerBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,115,"        iUpperBound = upperBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,116,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,117,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,129,"        super(createMessage(fieldType.getName(), value, null, null, explain));
",0,0,0,3,6,0,10,0,0,12,70,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,130,"        iDateTimeFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,131,"        iDurationFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,132,"        iFieldName = fieldType.getName();
",2,0,0,1,2,0,4,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,133,"        iNumberValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,134,"        iStringValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,135,"        iLowerBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,136,"        iUpperBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,137,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,138,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,150,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));
",0,0,0,3,6,0,12,0,0,14,79,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,151,"        iDateTimeFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,152,"        iDurationFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,153,"        iFieldName = fieldType.getName();
",2,0,0,1,2,0,4,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,154,"        iNumberValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,155,"        iStringValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,156,"        iLowerBound = lowerBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,157,"        iUpperBound = upperBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,158,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,159,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,171,"        super(createMessage(fieldName, value, lowerBound, upperBound, null));
",0,0,0,2,4,0,10,0,0,12,69,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,172,"        iDateTimeFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,173,"        iDurationFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,174,"        iFieldName = fieldName;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,175,"        iNumberValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,176,"        iStringValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,177,"        iLowerBound = lowerBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,178,"        iUpperBound = upperBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,179,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,180,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,189,"        super(createMessage(fieldType.getName(), value));
",0,0,0,3,6,0,8,0,0,8,49,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,190,"        iDateTimeFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,191,"        iDurationFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,192,"        iFieldName = fieldType.getName();
",2,0,0,1,2,0,4,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,193,"        iStringValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,194,"        iNumberValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,195,"        iLowerBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,196,"        iUpperBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,197,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,198,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,207,"        super(createMessage(fieldType.getName(), value));
",0,0,0,3,6,0,8,0,0,8,49,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,208,"        iDateTimeFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,209,"        iDurationFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,210,"        iFieldName = fieldType.getName();
",2,0,0,1,2,0,4,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,211,"        iStringValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,212,"        iNumberValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,213,"        iLowerBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,214,"        iUpperBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,215,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,216,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,225,"        super(createMessage(fieldName, value));
",0,0,0,2,4,0,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,226,"        iDateTimeFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,227,"        iDurationFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,228,"        iFieldName = fieldName;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,229,"        iStringValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,230,"        iNumberValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,231,"        iLowerBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,232,"        iUpperBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,233,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,234,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,41,"        StringBuilder buf = new StringBuilder()
",2,0,0,1,2,0,0,4,0,6,39,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,44,"        if (lowerBound == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,45,"            if (upperBound == null) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,46,"                buf.append(""is not supported"");
",0,0,0,1,2,0,4,0,0,5,31,9,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,48,"                buf.append(""must not be larger than "").append(upperBound);
",0,0,0,2,4,0,8,0,0,9,58,9,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,50,"        } else if (upperBound == null) {
",2,1,0,1,4,0,0,0,0,3,32,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,51,"            buf.append(""must not be smaller than "").append(lowerBound);
",0,0,0,2,4,0,8,0,0,9,59,8,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,53,"            buf.append(""must be in the range ["")
",0,0,0,1,3,0,4,0,0,5,36,12,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,59,"        if (explain != null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,60,"            buf.append("": "").append(explain);
",0,0,0,2,4,0,8,0,0,9,33,7,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,63,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,74,"        StringBuffer buf = new StringBuffer().append(""Value "");
",2,0,0,2,4,0,2,4,0,9,55,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,76,"        if (value == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,77,"            buf.append(""null"");
",0,0,0,1,2,0,4,0,0,5,19,7,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,79,"            buf.append('""');
",0,0,0,1,2,0,4,0,0,5,16,7,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,80,"            buf.append(value);
",0,0,0,1,2,0,6,0,0,6,18,7,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,81,"            buf.append('""');
",0,0,0,1,2,0,4,0,0,5,16,7,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,84,"        buf.append("" for "").append(fieldName).append(' ').append(""is not supported"");
",0,0,0,4,8,0,12,0,0,15,77,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,86,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,243,"        return iDateTimeFieldType;
",2,0,0,0,0,1,0,0,0,2,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,252,"        return iDurationFieldType;
",2,0,0,0,0,1,0,0,0,2,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,261,"        return iFieldName;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,270,"        return iNumberValue;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,279,"        return iStringValue;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,288,"        String value = iStringValue;
",4,0,0,0,0,0,0,2,0,6,28,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,289,"        if (value == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,290,"            value = String.valueOf(iNumberValue);
",2,0,0,1,2,0,6,0,0,9,37,6,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,292,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,301,"        return iLowerBound;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,310,"        return iUpperBound;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,314,"        return iMessage;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,323,"        if (iMessage == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,324,"            iMessage = message;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,325,"        } else if (message != null) {
",2,1,0,1,4,0,0,0,0,3,29,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,326,"            iMessage = message + "": "" + iMessage;
",6,1,0,0,0,0,0,0,0,9,37,7,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,10,328,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,77,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,97,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,143,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,144,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,146,"        if (zone == getZone()) {
",2,1,0,2,5,0,2,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,147,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,149,"        return getInstance(zone);
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,160,"        String str = ""ISOChronology"";
",2,0,0,0,0,0,0,2,0,5,29,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,161,"        DateTimeZone zone = getZone();
",2,0,0,1,2,0,2,2,0,6,30,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,162,"        if (zone != null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,163,"            str = str + '[' + zone.getID() + ']';
",4,1,0,2,4,0,4,0,0,12,37,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,165,"        return str;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,190,"        return super.equals(obj);
",4,0,0,1,2,1,0,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,200,"        return ""ISO"".hashCode() * 11 + getZone().hashCode();
",0,2,0,3,6,1,6,0,0,9,52,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,208,"        return new Stub(getZone());
",0,0,0,2,4,1,2,2,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,110,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,118,"        if ((base = iBase) != null && (iBaseFlags & 6) == 6) {
",6,4,0,3,7,0,0,0,0,11,54,4,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,120,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);
",0,0,0,1,2,1,12,0,0,12,74,7,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,122,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);
",10,0,0,1,2,1,0,0,0,10,75,5,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,131,"        if ((base = iBase) != null && (iBaseFlags & 5) == 5) {
",6,4,0,3,7,0,0,0,0,11,54,4,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,133,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,
",0,0,0,0,1,1,10,0,0,10,60,7,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,136,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth,
",8,0,0,0,1,1,0,0,0,8,61,5,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,146,"        if ((base = iBase) != null && (iBaseFlags & 1) == 1) {
",6,4,0,3,7,0,0,0,0,11,54,4,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,148,"            return base.getDateTimeMillis
",0,0,0,0,0,1,4,0,0,4,29,7,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,151,"        return super.getDateTimeMillis
",2,0,0,0,0,1,0,0,0,2,30,5,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,389,"        in.defaultReadObject();
",0,0,0,1,2,0,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,390,"        setFields();
",0,0,0,1,2,0,2,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,391,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,102,"        long instant = year().set(0, year);
",2,0,0,2,4,0,6,0,0,8,35,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,103,"        instant = monthOfYear().set(instant, monthOfYear);
",2,0,0,2,4,0,8,0,0,11,50,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,104,"        instant = dayOfMonth().set(instant, dayOfMonth);
",2,0,0,2,4,0,8,0,0,11,48,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,105,"        return millisOfDay().set(instant, millisOfDay);
",0,0,0,2,4,1,8,0,0,8,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,132,"        long instant = year().set(0, year);
",2,0,0,2,4,0,6,0,0,8,35,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,133,"        instant = monthOfYear().set(instant, monthOfYear);
",2,0,0,2,4,0,8,0,0,11,50,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,134,"        instant = dayOfMonth().set(instant, dayOfMonth);
",2,0,0,2,4,0,8,0,0,11,48,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,135,"        instant = hourOfDay().set(instant, hourOfDay);
",2,0,0,2,4,0,8,0,0,11,46,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,136,"        instant = minuteOfHour().set(instant, minuteOfHour);
",2,0,0,2,4,0,8,0,0,11,52,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,137,"        instant = secondOfMinute().set(instant, secondOfMinute);
",2,0,0,2,4,0,8,0,0,11,56,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,138,"        return millisOfSecond().set(instant, millisOfSecond);
",0,0,0,2,4,1,8,0,0,8,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,163,"        instant = hourOfDay().set(instant, hourOfDay);
",2,0,0,2,4,0,8,0,0,11,46,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,164,"        instant = minuteOfHour().set(instant, minuteOfHour);
",2,0,0,2,4,0,8,0,0,11,52,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,165,"        instant = secondOfMinute().set(instant, secondOfMinute);
",2,0,0,2,4,0,8,0,0,11,56,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,166,"        return millisOfSecond().set(instant, millisOfSecond);
",0,0,0,2,4,1,8,0,0,8,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,188,"                throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,193,"                throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,203,"                throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,208,"                throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,223,"        int size = partial.size();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,224,"        int[] values = new int[size];
",2,0,1,2,4,0,0,0,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,225,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,226,"            values[i] = partial.getFieldType(i).getField(this).get(instant);
",0,0,1,4,8,0,12,0,0,17,64,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,228,"        return values;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,276,"        int size = period.size();
",2,0,0,1,2,0,4,0,0,6,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,277,"        int[] values = new int[size];
",2,0,1,2,4,0,0,0,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,278,"        if (duration != 0) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,279,"            long current = 0;
",2,0,0,0,0,0,0,0,0,2,17,7,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,280,"            for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,281,"                DurationField field = period.getFieldType(i).getField(this);
",2,0,0,2,4,0,8,2,0,12,60,8,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,282,"                if (field.isPrecise()) {
",0,0,0,2,5,0,4,0,0,4,24,9,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,283,"                    int value = field.getDifference(duration, current);
",2,0,0,1,2,0,8,0,0,10,51,11,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,284,"                    current = field.add(current, value);
",2,0,0,1,2,0,8,0,0,11,36,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,285,"                    values[i] = value;
",2,0,1,1,2,0,0,0,0,7,18,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,289,"        return values;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,301,"        if (scalar != 0 && period != null) {
",4,3,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,302,"            for (int i = 0, isize = period.size(); i < isize; i++) {
",10,1,0,2,5,0,4,0,0,16,56,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,303,"                long value = period.getValue(i); // use long to allow for multiplication (fits OK)
",2,0,0,2,4,0,6,0,0,8,82,9,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,304,"                if (value != 0) {
",2,1,0,1,3,0,0,0,0,3,17,8,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,305,"                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);
",6,1,0,3,6,0,12,0,0,20,77,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,309,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,322,"        if (duration == 0 || scalar == 0) {
",4,3,0,1,3,0,0,0,0,7,35,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,323,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,325,"        long add = FieldUtils.safeMultiply(duration, scalar);
",2,0,0,1,2,0,8,0,0,10,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,326,"        return FieldUtils.safeAdd(instant, add);
",0,0,0,1,2,1,8,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,337,"        return UnsupportedDurationField.getInstance(DurationFieldType.millis());
",0,0,0,2,4,1,8,0,0,8,72,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,346,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfSecond(), millis());
",0,0,0,3,6,1,10,0,0,10,90,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,355,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfDay(), millis());
",0,0,0,3,6,1,10,0,0,10,87,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,366,"        return UnsupportedDurationField.getInstance(DurationFieldType.seconds());
",0,0,0,2,4,1,8,0,0,8,73,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,375,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfMinute(), seconds());
",0,0,0,3,6,1,10,0,0,10,91,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,384,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfDay(), seconds());
",0,0,0,3,6,1,10,0,0,10,88,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,395,"        return UnsupportedDurationField.getInstance(DurationFieldType.minutes());
",0,0,0,2,4,1,8,0,0,8,73,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,404,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfHour(), minutes());
",0,0,0,3,6,1,10,0,0,10,89,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,413,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfDay(), minutes());
",0,0,0,3,6,1,10,0,0,10,88,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,424,"        return UnsupportedDurationField.getInstance(DurationFieldType.hours());
",0,0,0,2,4,1,8,0,0,8,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,433,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfDay(), hours());
",0,0,0,3,6,1,10,0,0,10,84,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,442,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfDay(), hours());
",0,0,0,3,6,1,10,0,0,10,89,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,453,"        return UnsupportedDurationField.getInstance(DurationFieldType.halfdays());
",0,0,0,2,4,1,8,0,0,8,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,462,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfHalfday(), hours());
",0,0,0,3,6,1,10,0,0,10,88,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,471,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfHalfday(), hours());
",0,0,0,3,6,1,10,0,0,10,93,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,480,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.halfdayOfDay(), halfdays());
",0,0,0,3,6,1,10,0,0,10,90,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,491,"        return UnsupportedDurationField.getInstance(DurationFieldType.days());
",0,0,0,2,4,1,8,0,0,8,70,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,504,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfWeek(), days());
",0,0,0,3,6,1,10,0,0,10,83,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,513,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfMonth(), days());
",0,0,0,3,6,1,10,0,0,10,84,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,522,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfYear(), days());
",0,0,0,3,6,1,10,0,0,10,83,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,533,"        return UnsupportedDurationField.getInstance(DurationFieldType.weeks());
",0,0,0,2,4,1,8,0,0,8,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,542,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekOfWeekyear(), weeks());
",0,0,0,3,6,1,10,0,0,10,89,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,553,"        return UnsupportedDurationField.getInstance(DurationFieldType.weekyears());
",0,0,0,2,4,1,8,0,0,8,75,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,562,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyear(), weekyears());
",0,0,0,3,6,1,10,0,0,10,87,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,571,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyearOfCentury(), weekyears());
",0,0,0,3,6,1,10,0,0,10,96,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,582,"        return UnsupportedDurationField.getInstance(DurationFieldType.months());
",0,0,0,2,4,1,8,0,0,8,72,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,591,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.monthOfYear(), months());
",0,0,0,3,6,1,10,0,0,10,87,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,602,"        return UnsupportedDurationField.getInstance(DurationFieldType.years());
",0,0,0,2,4,1,8,0,0,8,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,611,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.year(), years());
",0,0,0,3,6,1,10,0,0,10,79,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,620,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfEra(), years());
",0,0,0,3,6,1,10,0,0,10,84,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,629,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfCentury(), years());
",0,0,0,3,6,1,10,0,0,10,88,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,640,"        return UnsupportedDurationField.getInstance(DurationFieldType.centuries());
",0,0,0,2,4,1,8,0,0,8,75,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,649,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.centuryOfEra(), centuries());
",0,0,0,3,6,1,10,0,0,10,91,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,10,669,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.era(), eras());
",0,0,0,3,6,1,10,0,0,10,77,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,691,"            throw new IllegalArgumentException(""Id must not be null"");
",0,0,0,1,2,0,0,2,0,4,58,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,145,"                        } catch (RuntimeException ex) {
",2,0,0,1,4,0,0,2,0,4,31,14,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,149,"                            temp = forTimeZone(TimeZone.getDefault());
",2,0,0,2,4,0,6,0,0,9,42,14,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,151,"                    } catch (IllegalArgumentException ex) {
",2,0,0,1,4,0,0,2,0,4,39,12,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,155,"                        temp = UTC;
",4,0,0,0,0,0,0,0,0,5,11,12,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,174,"        SecurityManager sm = System.getSecurityManager();
",2,0,0,1,2,0,4,2,0,8,49,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,175,"        if (sm != null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,176,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setDefault""));
",0,0,0,2,4,0,4,2,0,7,70,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,178,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,179,"            throw new IllegalArgumentException(""The datetime zone must not be null"");
",0,0,0,1,2,0,0,2,0,4,73,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,181,"        synchronized(DateTimeZone.class) {
",0,0,0,1,3,0,0,2,0,2,34,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,182,"            cDefault = zone;
",4,0,0,0,0,0,0,0,0,5,16,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,183,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,184,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,205,"            return getDefault();
",0,0,0,1,2,1,2,0,0,2,20,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,208,"            return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,214,"        if (id.startsWith(""+"") || id.startsWith(""-"")) {
",0,1,0,3,7,0,8,0,0,11,47,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,215,"            int offset = parseOffset(id);
",2,0,0,1,2,0,4,0,0,6,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,216,"            if (offset == 0L) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,217,"                return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,219,"                id = printOffset(offset);
",2,0,0,1,2,0,4,0,0,7,25,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,220,"                return fixedOffsetZone(id, offset);
",0,0,0,1,2,1,6,0,0,6,35,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,223,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");
",2,1,0,1,2,0,0,2,0,7,90,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,237,"        return forOffsetHoursMinutes(hoursOffset, 0);
",0,0,0,1,2,1,4,0,0,4,45,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,254,"        if (hoursOffset == 0 && minutesOffset == 0) {
",4,3,0,1,3,0,0,0,0,7,45,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,255,"            return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,257,"        if (minutesOffset < 0 || minutesOffset > 59) {
",4,3,0,1,3,0,0,0,0,7,46,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,258,"            throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);
",2,1,0,1,2,0,0,2,0,6,77,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,260,"        int offset = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,262,"            int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);
",2,0,0,1,2,0,6,0,0,8,62,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,263,"            if (hoursInMinutes < 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,264,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);
",4,0,0,1,2,0,6,0,0,12,67,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,266,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);
",2,0,0,1,2,0,8,0,0,11,66,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,268,"            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
",6,0,0,1,2,0,6,0,0,13,85,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,271,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,269,"        } catch (ArithmeticException ex) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,270,"            throw new IllegalArgumentException(""Offset is too large"");
",0,0,0,1,2,0,0,2,0,3,58,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,272,"        return forOffsetMillis(offset);
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,282,"        String id = printOffset(millisOffset);
",2,0,0,1,2,0,4,2,0,8,38,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,283,"        return fixedOffsetZone(id, millisOffset);
",0,0,0,1,2,1,6,0,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,302,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,303,"            return getDefault();
",0,0,0,1,2,1,2,0,0,2,20,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,305,"        final String id = zone.getID();
",2,0,0,1,2,1,4,2,0,9,31,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,306,"        if (id.equals(""UTC"")) {
",0,0,0,2,5,0,4,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,307,"            return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,311,"        DateTimeZone dtz = null;
",2,0,0,0,0,0,0,2,0,4,24,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,312,"        String convId = getConvertedId(id);
",2,0,0,1,2,0,4,2,0,8,35,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,313,"        if (convId != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,314,"            dtz = cProvider.getZone(convId);
",2,0,0,1,2,0,6,0,0,9,32,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,316,"        if (dtz == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,317,"            dtz = cProvider.getZone(id);
",2,0,0,1,2,0,6,0,0,9,28,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,319,"        if (dtz != null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,320,"            return dtz;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,324,"        if (convId == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,325,"            convId = zone.getID();
",2,0,0,1,2,0,4,0,0,7,22,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,326,"            if (convId.startsWith(""GMT+"") || convId.startsWith(""GMT-"")) {
",0,1,0,3,7,0,8,0,0,11,61,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,327,"                convId = convId.substring(3);
",2,0,0,1,2,0,4,0,0,7,29,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,328,"                int offset = parseOffset(convId);
",2,0,0,1,2,0,4,0,0,6,33,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,329,"                if (offset == 0L) {
",2,1,0,1,3,0,0,0,0,3,19,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,330,"                    return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,11,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,332,"                    convId = printOffset(offset);
",2,0,0,1,2,0,4,0,0,7,29,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,333,"                    return fixedOffsetZone(convId, offset);
",0,0,0,1,2,1,6,0,0,6,39,11,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,337,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");
",2,1,0,1,2,0,0,2,0,7,90,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,349,"        if (offset == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,350,"            return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,352,"        if (iFixedOffsetCache == null) {
",2,1,0,1,3,0,0,0,0,3,32,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,353,"            iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();
",2,0,0,1,2,0,0,8,0,11,71,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,356,"        Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);
",2,0,0,1,2,0,6,4,0,12,56,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,357,"        if (ref != null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,358,"            zone = ref.get();
",2,0,0,1,2,0,4,0,0,7,17,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,359,"            if (zone != null) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,360,"                return zone;
",2,0,0,0,0,1,0,0,0,2,12,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,363,"        zone = new FixedDateTimeZone(id, null, offset, offset);
",8,0,0,1,2,0,0,2,0,12,55,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,364,"        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));
",2,0,0,2,4,0,6,4,0,12,65,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,365,"        return zone;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,374,"        return cAvailableIDs;
",2,0,0,0,0,1,0,0,0,2,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,387,"        return cProvider;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,401,"        SecurityManager sm = System.getSecurityManager();
",2,0,0,1,2,0,4,2,0,8,49,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,402,"        if (sm != null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,403,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setProvider""));
",0,0,0,2,4,0,4,2,0,7,71,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,405,"        setProvider0(provider);
",0,0,0,1,2,0,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,406,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,420,"            throw new IllegalArgumentException
",0,0,0,0,0,0,0,2,0,2,34,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,424,"            throw new IllegalArgumentException(""The provider doesn't support UTC"");
",0,0,0,1,2,0,0,2,0,3,71,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,427,"            throw new IllegalArgumentException(""Invalid UTC zone provided"");
",0,0,0,1,2,0,0,2,0,3,64,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,450,"                    provider = (Provider) Class.forName(providerClass).newInstance();
",2,0,0,3,6,0,8,2,0,13,65,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,454,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,451,"                } catch (Exception ex) {
",2,0,0,1,4,0,0,2,0,4,24,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,452,"                    Thread thread = Thread.currentThread();
",2,0,0,1,2,0,4,2,0,8,39,11,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,453,"                    thread.getThreadGroup().uncaughtException(thread, ex);
",0,0,0,2,4,0,10,0,0,10,54,12,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,456,"        } catch (SecurityException ex) {
",2,0,0,1,4,0,0,2,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,463,"            } catch (Exception ex) {
",2,0,0,1,4,0,0,2,0,4,24,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,464,"                Thread thread = Thread.currentThread();
",2,0,0,1,2,0,4,2,0,8,39,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,465,"                thread.getThreadGroup().uncaughtException(thread, ex);
",0,0,0,2,4,0,10,0,0,10,54,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,470,"            provider = new UTCProvider();
",2,0,0,1,2,0,0,2,0,5,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,486,"        return cNameProvider;
",2,0,0,0,0,1,0,0,0,2,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,500,"        SecurityManager sm = System.getSecurityManager();
",2,0,0,1,2,0,4,2,0,8,49,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,501,"        if (sm != null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,502,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setNameProvider""));
",0,0,0,2,4,0,4,2,0,7,75,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,504,"        setNameProvider0(nameProvider);
",0,0,0,1,2,0,4,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,505,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,534,"                    nameProvider = (NameProvider) Class.forName(providerClass).newInstance();
",2,0,0,3,6,0,8,2,0,13,73,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,538,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,535,"                } catch (Exception ex) {
",2,0,0,1,4,0,0,2,0,4,24,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,536,"                    Thread thread = Thread.currentThread();
",2,0,0,1,2,0,4,2,0,8,39,11,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,537,"                    thread.getThreadGroup().uncaughtException(thread, ex);
",0,0,0,2,4,0,10,0,0,10,54,12,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,540,"        } catch (SecurityException ex) {
",2,0,0,1,4,0,0,2,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,559,"        Map<String, String> map = cZoneIdConversion;
",4,0,0,0,0,0,0,6,0,10,44,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,560,"        if (map == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,562,"            map = new HashMap<String, String>();
",2,0,0,1,2,0,0,6,0,9,36,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,563,"            map.put(""GMT"", ""UTC"");
",0,0,0,1,2,0,4,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,564,"            map.put(""WET"", ""WET"");
",0,0,0,1,2,0,4,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,565,"            map.put(""CET"", ""CET"");
",0,0,0,1,2,0,4,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,566,"            map.put(""MET"", ""CET"");
",0,0,0,1,2,0,4,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,567,"            map.put(""ECT"", ""CET"");
",0,0,0,1,2,0,4,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,568,"            map.put(""EET"", ""EET"");
",0,0,0,1,2,0,4,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,569,"            map.put(""MIT"", ""Pacific/Apia"");
",0,0,0,1,2,0,4,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,570,"            map.put(""HST"", ""Pacific/Honolulu"");  // JDK 1.1 compatible
",0,0,0,1,2,0,4,0,0,6,58,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,571,"            map.put(""AST"", ""America/Anchorage"");
",0,0,0,1,2,0,4,0,0,6,36,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,572,"            map.put(""PST"", ""America/Los_Angeles"");
",0,0,0,1,2,0,4,0,0,6,38,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,573,"            map.put(""MST"", ""America/Denver"");  // JDK 1.1 compatible
",0,0,0,1,2,0,4,0,0,6,56,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,574,"            map.put(""PNT"", ""America/Phoenix"");
",0,0,0,1,2,0,4,0,0,6,34,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,575,"            map.put(""CST"", ""America/Chicago"");
",0,0,0,1,2,0,4,0,0,6,34,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,576,"            map.put(""EST"", ""America/New_York"");  // JDK 1.1 compatible
",0,0,0,1,2,0,4,0,0,6,58,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,577,"            map.put(""IET"", ""America/Indiana/Indianapolis"");
",0,0,0,1,2,0,4,0,0,6,47,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,578,"            map.put(""PRT"", ""America/Puerto_Rico"");
",0,0,0,1,2,0,4,0,0,6,38,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,579,"            map.put(""CNT"", ""America/St_Johns"");
",0,0,0,1,2,0,4,0,0,6,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,580,"            map.put(""AGT"", ""America/Argentina/Buenos_Aires"");
",0,0,0,1,2,0,4,0,0,6,49,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,581,"            map.put(""BET"", ""America/Sao_Paulo"");
",0,0,0,1,2,0,4,0,0,6,36,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,582,"            map.put(""ART"", ""Africa/Cairo"");
",0,0,0,1,2,0,4,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,583,"            map.put(""CAT"", ""Africa/Harare"");
",0,0,0,1,2,0,4,0,0,6,32,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,584,"            map.put(""EAT"", ""Africa/Addis_Ababa"");
",0,0,0,1,2,0,4,0,0,6,37,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,585,"            map.put(""NET"", ""Asia/Yerevan"");
",0,0,0,1,2,0,4,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,586,"            map.put(""PLT"", ""Asia/Karachi"");
",0,0,0,1,2,0,4,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,587,"            map.put(""IST"", ""Asia/Kolkata"");
",0,0,0,1,2,0,4,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,588,"            map.put(""BST"", ""Asia/Dhaka"");
",0,0,0,1,2,0,4,0,0,6,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,589,"            map.put(""VST"", ""Asia/Ho_Chi_Minh"");
",0,0,0,1,2,0,4,0,0,6,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,590,"            map.put(""CTT"", ""Asia/Shanghai"");
",0,0,0,1,2,0,4,0,0,6,32,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,591,"            map.put(""JST"", ""Asia/Tokyo"");
",0,0,0,1,2,0,4,0,0,6,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,592,"            map.put(""ACT"", ""Australia/Darwin"");
",0,0,0,1,2,0,4,0,0,6,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,593,"            map.put(""AET"", ""Australia/Sydney"");
",0,0,0,1,2,0,4,0,0,6,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,594,"            map.put(""SST"", ""Pacific/Guadalcanal"");
",0,0,0,1,2,0,4,0,0,6,38,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,595,"            map.put(""NST"", ""Pacific/Auckland"");
",0,0,0,1,2,0,4,0,0,6,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,596,"            cZoneIdConversion = map;
",4,0,0,0,0,0,0,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,598,"        return map.get(id);
",0,0,0,1,2,1,6,0,0,6,19,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,604,"        Chronology chrono = new BaseChronology() {
",2,0,0,1,3,0,0,4,0,6,42,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,618,"        return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);
",0,0,0,4,8,1,10,0,0,11,72,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,631,"        StringBuffer buf = new StringBuffer();
",2,0,0,1,2,0,0,4,0,6,38,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,632,"        if (offset >= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,633,"            buf.append('+');
",0,0,0,1,2,0,4,0,0,5,16,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,635,"            buf.append('-');
",0,0,0,1,2,0,4,0,0,5,16,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,636,"            offset = -offset;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,639,"        int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,0,0,0,0,0,0,9,55,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,640,"        FormatUtils.appendPaddedInteger(buf, hours, 2);
",0,0,0,1,2,0,8,0,0,8,47,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,641,"        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,1,2,0,0,0,0,10,58,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,643,"        int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,9,59,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,644,"        buf.append(':');
",0,0,0,1,2,0,4,0,0,5,16,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,645,"        FormatUtils.appendPaddedInteger(buf, minutes, 2);
",0,0,0,1,2,0,8,0,0,8,49,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,646,"        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,10,56,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,647,"        if (offset == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,648,"            return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,651,"        int seconds = offset / DateTimeConstants.MILLIS_PER_SECOND;
",8,1,0,0,0,0,0,0,0,9,59,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,652,"        buf.append(':');
",0,0,0,1,2,0,4,0,0,5,16,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,653,"        FormatUtils.appendPaddedInteger(buf, seconds, 2);
",0,0,0,1,2,0,8,0,0,8,49,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,654,"        offset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;
",8,1,0,0,0,0,0,0,0,10,56,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,655,"        if (offset == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,656,"            return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,659,"        buf.append('.');
",0,0,0,1,2,0,4,0,0,5,16,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,660,"        FormatUtils.appendPaddedInteger(buf, offset, 3);
",0,0,0,1,2,0,8,0,0,8,48,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,661,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,670,"        if (cOffsetFormatter == null) {
",2,1,0,1,3,0,0,0,0,3,31,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,671,"            cOffsetFormatter = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,49,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,675,"        return cOffsetFormatter;
",2,0,0,0,0,1,0,0,0,2,24,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,729,"        return getShortName(instant, null);
",0,0,0,1,2,1,4,0,0,5,35,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,744,"        if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,745,"            locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,747,"        String nameKey = getNameKey(instant);
",2,0,0,1,2,0,4,2,0,8,37,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,748,"        if (nameKey == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,749,"            return iID;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,751,"        String name = cNameProvider.getShortName(locale, iID, nameKey);
",2,0,0,1,2,0,10,2,0,14,63,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,752,"        if (name != null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,753,"            return name;
",2,0,0,0,0,1,0,0,0,2,12,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,755,"        return printOffset(getOffset(instant));
",0,0,0,2,4,1,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,769,"        return getName(instant, null);
",0,0,0,1,2,1,4,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,784,"        if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,785,"            locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,787,"        String nameKey = getNameKey(instant);
",2,0,0,1,2,0,4,2,0,8,37,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,788,"        if (nameKey == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,789,"            return iID;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,791,"        String name = cNameProvider.getName(locale, iID, nameKey);
",2,0,0,1,2,0,10,2,0,14,58,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,792,"        if (name != null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,793,"            return name;
",2,0,0,0,0,1,0,0,0,2,12,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,795,"        return printOffset(getOffset(instant));
",0,0,0,2,4,1,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,813,"        if (instant == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,814,"            return getOffset(DateTimeUtils.currentTimeMillis());
",0,0,0,2,4,1,6,0,0,6,52,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,816,"        return getOffset(instant.getMillis());
",0,0,0,2,4,1,6,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,844,"        return getOffset(instant) == getStandardOffset(instant);
",0,1,0,2,4,1,8,0,0,9,56,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,882,"        final int offsetLocal = getOffset(instantLocal);
",2,0,0,1,2,1,4,0,0,7,48,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,884,"        final long instantAdjusted = instantLocal - offsetLocal;
",6,1,0,0,0,1,0,0,0,8,56,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,885,"        final int offsetAdjusted = getOffset(instantAdjusted);
",2,0,0,1,2,1,4,0,0,7,54,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,887,"        if (offsetLocal != offsetAdjusted) {
",4,1,0,1,3,0,0,0,0,5,36,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,890,"            if ((offsetLocal - offsetAdjusted) < 0) {
",4,2,0,2,5,0,0,0,0,6,41,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,894,"                long nextLocal = nextTransition(instantAdjusted);
",2,0,0,1,2,0,4,0,0,6,49,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,895,"                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
",6,1,0,1,2,0,2,0,0,9,66,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,896,"                if (nextLocal != nextAdjusted) {
",4,1,0,1,3,0,0,0,0,5,32,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,897,"                    return offsetLocal;
",2,0,0,0,0,1,0,0,0,2,19,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,899,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,900,"        } else if (offsetLocal >= 0) {
",2,1,0,1,4,0,0,0,0,3,30,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,901,"            long prev = previousTransition(instantAdjusted);
",2,0,0,1,2,0,4,0,0,6,48,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,902,"            if (prev < instantAdjusted) {
",4,1,0,1,3,0,0,0,0,5,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,903,"                int offsetPrev = getOffset(prev);
",2,0,0,1,2,0,4,0,0,6,33,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,904,"                int diff = offsetPrev - offsetLocal;
",6,1,0,0,0,0,0,0,0,7,36,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,905,"                if (instantAdjusted - prev <= diff) {
",6,2,0,1,3,0,0,0,0,8,37,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,906,"                    return offsetPrev;
",2,0,0,0,0,1,0,0,0,2,18,11,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,910,"        return offsetAdjusted;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,924,"        int offset = getOffset(instantUTC);
",2,0,0,1,2,0,4,0,0,6,35,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,925,"        long instantLocal = instantUTC + offset;
",6,1,0,0,0,0,0,0,0,7,40,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,927,"        if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {
",8,5,0,3,7,0,0,0,0,13,68,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,928,"            throw new ArithmeticException(""Adding time zone offset caused overflow"");
",0,0,0,1,2,0,0,2,0,3,73,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,930,"        return instantLocal;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,951,"        int offsetOriginal = getOffset(originalInstantUTC);
",2,0,0,1,2,0,4,0,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,952,"        long instantUTC = instantLocal - offsetOriginal;
",6,1,0,0,0,0,0,0,0,7,48,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,953,"        int offsetLocalFromOriginal = getOffset(instantUTC);
",2,0,0,1,2,0,4,0,0,6,52,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,954,"        if (offsetLocalFromOriginal == offsetOriginal) {
",4,1,0,1,3,0,0,0,0,5,48,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,955,"            return instantUTC;
",2,0,0,0,0,1,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,957,"        return convertLocalToUTC(instantLocal, strict);
",0,0,0,1,2,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,974,"        int offsetLocal = getOffset(instantLocal);
",2,0,0,1,2,0,4,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,976,"        int offset = getOffset(instantLocal - offsetLocal);
",6,1,0,1,2,0,2,0,0,9,51,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,978,"        if (offsetLocal != offset) {
",4,1,0,1,3,0,0,0,0,5,28,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,982,"            if (strict || offsetLocal < 0) {
",4,2,0,1,3,0,0,0,0,6,32,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,984,"                long nextLocal = nextTransition(instantLocal - offsetLocal);
",6,1,0,1,2,0,2,0,0,9,60,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,985,"                if (nextLocal == (instantLocal - offsetLocal)) {
",6,2,0,2,5,0,0,0,0,8,48,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,986,"                    nextLocal = Long.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,7,27,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,988,"                long nextAdjusted = nextTransition(instantLocal - offset);
",6,1,0,1,2,0,2,0,0,9,58,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,989,"                if (nextAdjusted == (instantLocal - offset)) {
",6,2,0,2,5,0,0,0,0,8,46,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,990,"                    nextAdjusted = Long.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,7,30,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,992,"                if (nextLocal != nextAdjusted) {
",4,1,0,1,3,0,0,0,0,5,32,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,994,"                    if (strict) {
",2,0,0,1,3,0,0,0,0,2,13,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,996,"                        throw new IllegalInstantException(instantLocal, getID());
",2,0,0,2,4,0,2,2,0,6,57,13,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,1001,"                        offset = offsetLocal;
",4,0,0,0,0,0,0,0,0,5,21,12,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,1007,"        long instantUTC = instantLocal - offset;
",6,1,0,0,0,0,0,0,0,7,40,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,1009,"        if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {
",8,5,0,3,7,0,0,0,0,13,69,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,1010,"            throw new ArithmeticException(""Subtracting time zone offset caused overflow"");
",0,0,0,1,2,0,0,2,0,3,78,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,1012,"        return instantUTC;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,1026,"        if (newZone == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,1027,"            newZone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,36,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,1029,"        if (newZone == this) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,1030,"            return oldInstant;
",2,0,0,0,0,1,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,1032,"        long instantLocal = convertUTCToLocal(oldInstant);
",2,0,0,1,2,0,4,0,0,6,50,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,1033,"        return newZone.convertLocalToUTC(instantLocal, false, oldInstant);
",0,0,0,1,2,1,8,0,0,9,66,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,1143,"        if (isFixed()) {
",0,0,0,2,5,0,2,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,1144,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,1147,"            localDateTime.toDateTime(this);
",0,0,0,1,2,0,4,0,0,4,31,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,1148,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,1149,"        } catch (IllegalInstantException ex) {
",2,0,0,1,4,0,0,2,0,4,38,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,1150,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,1165,"        long instantBefore = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;
",8,2,0,0,0,0,0,0,0,10,69,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,1166,"        long instantAfter = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;
",8,2,0,0,0,0,0,0,0,10,68,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,1167,"        long offsetBefore = getOffset(instantBefore);
",2,0,0,1,2,0,4,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,1168,"        long offsetAfter = getOffset(instantAfter);
",2,0,0,1,2,0,4,0,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,1169,"        if (offsetBefore <= offsetAfter) {
",4,1,0,1,3,0,0,0,0,5,34,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,1170,"            return instant;  // not an overlap (less than is a gap, equal is normal case)
",2,0,0,1,2,1,0,0,0,2,77,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,1174,"        long diff = offsetBefore - offsetAfter;
",6,1,0,0,0,0,0,0,0,7,39,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,1175,"        long transition = nextTransition(instantBefore);
",2,0,0,1,2,0,4,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,1176,"        long overlapStart = transition - diff;
",6,1,0,0,0,0,0,0,0,7,38,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,1177,"        long overlapEnd = transition + diff;
",6,1,0,0,0,0,0,0,0,7,36,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,1178,"        if (instant < overlapStart || instant >= overlapEnd) {
",8,3,0,1,3,0,0,0,0,11,54,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,1179,"          return instant;  // not an overlap
",2,0,0,0,0,1,0,0,0,2,34,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,1183,"        long afterStart = instant - overlapStart;
",6,1,0,0,0,0,0,0,0,7,41,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,1184,"        if (afterStart >= diff) {
",4,1,0,1,3,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,1186,"          return earlierOrLater ? instant : instant - diff;
",8,1,0,0,0,1,0,0,0,9,49,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,1189,"          return earlierOrLater ? instant + diff : instant;
",8,1,0,0,0,1,0,0,0,9,49,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,1231,"        return java.util.TimeZone.getTimeZone(iID);
",6,0,0,1,2,1,4,0,0,10,43,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,1256,"        return getID();
",0,0,0,1,2,1,2,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,1266,"        return new Stub(iID);
",2,0,0,1,2,1,0,2,0,4,21,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,267,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());
",0,0,0,3,6,0,8,0,0,8,69,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,268,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,281,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));
",0,0,0,3,6,0,10,0,0,10,73,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,282,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,295,"        this(DateTimeUtils.currentTimeMillis(), chronology);
",2,0,0,2,4,0,4,0,0,6,52,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,296,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,308,"        this(instant, ISOChronology.getInstance());
",2,0,0,2,4,0,4,0,0,6,43,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,309,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,322,"        this(instant, ISOChronology.getInstance(zone));
",2,0,0,2,4,0,6,0,0,8,47,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,323,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,335,"    public LocalDate(long instant, Chronology chronology) {
",6,0,0,1,3,1,0,2,0,9,55,2,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,336,"        chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,338,"        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);
",6,0,0,2,4,0,8,0,0,14,86,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,339,"        chronology = chronology.withUTC();
",2,0,0,1,2,0,4,0,0,7,34,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,340,"        iLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);
",2,0,0,2,4,0,8,0,0,11,63,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,341,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,342,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,363,"        this(instant, (Chronology) null);
",2,0,0,2,4,0,0,2,0,4,33,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,364,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,384,"    public LocalDate(Object instant, DateTimeZone zone) {
",6,0,0,1,3,1,0,4,0,11,53,2,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,385,"        PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);
",2,0,0,2,4,0,8,2,0,12,89,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,386,"        Chronology chronology = converter.getChronology(instant, zone);
",2,0,0,1,2,0,8,2,0,12,63,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,387,"        chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,388,"        iChronology = chronology.withUTC();
",2,0,0,1,2,0,4,0,0,7,35,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,389,"        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.localDateParser());
",2,0,0,3,6,0,12,0,0,14,106,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,390,"        iLocalMillis = iChronology.getDateTimeMillis(values[0], values[1], values[2], 0);
",2,0,1,4,8,0,4,0,0,13,81,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,391,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,414,"    public LocalDate(Object instant, Chronology chronology) {
",6,0,0,1,3,1,0,4,0,11,57,2,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,415,"        PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);
",2,0,0,2,4,0,8,2,0,12,89,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,416,"        chronology = converter.getChronology(instant, chronology);
",2,0,0,1,2,0,8,0,0,11,58,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,417,"        chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,418,"        iChronology = chronology.withUTC();
",2,0,0,1,2,0,4,0,0,7,35,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,419,"        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.localDateParser());
",2,0,0,3,6,0,12,0,0,14,106,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,420,"        iLocalMillis = iChronology.getDateTimeMillis(values[0], values[1], values[2], 0);
",2,0,1,4,8,0,4,0,0,13,81,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,421,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,436,"        this(year, monthOfYear, dayOfMonth, ISOChronology.getInstanceUTC());
",6,0,0,2,4,0,4,0,0,10,68,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,437,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,455,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,456,"        chronology = DateTimeUtils.getChronology(chronology).withUTC();
",2,0,0,2,4,0,8,0,0,11,63,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,457,"        long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);
",2,0,0,1,2,0,10,0,0,12,78,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,458,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,459,"        iLocalMillis = instant;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,460,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,96,"    private static final Set<DurationFieldType> DATE_DURATION_TYPES = new HashSet<DurationFieldType>();
",2,0,0,1,2,3,0,8,0,13,99,2,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,98,"        DATE_DURATION_TYPES.add(DurationFieldType.days());
",0,0,0,2,4,0,8,0,0,8,50,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,99,"        DATE_DURATION_TYPES.add(DurationFieldType.weeks());
",0,0,0,2,4,0,8,0,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,100,"        DATE_DURATION_TYPES.add(DurationFieldType.months());
",0,0,0,2,4,0,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,101,"        DATE_DURATION_TYPES.add(DurationFieldType.weekyears());
",0,0,0,2,4,0,8,0,0,8,55,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,102,"        DATE_DURATION_TYPES.add(DurationFieldType.years());
",0,0,0,2,4,0,8,0,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,103,"        DATE_DURATION_TYPES.add(DurationFieldType.centuries());
",0,0,0,2,4,0,8,0,0,8,55,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,105,"        DATE_DURATION_TYPES.add(DurationFieldType.eras());
",0,0,0,2,4,0,8,0,0,8,50,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,106,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,124,"        return new LocalDate();
",0,0,0,1,2,1,0,2,0,2,23,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,136,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,137,"            throw new NullPointerException(""Zone must not be null"");
",0,0,0,1,2,0,0,2,0,4,56,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,139,"        return new LocalDate(zone);
",2,0,0,1,2,1,0,2,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,151,"        if (chronology == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,152,"            throw new NullPointerException(""Chronology must not be null"");
",0,0,0,1,2,0,0,2,0,4,62,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,154,"        return new LocalDate(chronology);
",2,0,0,1,2,1,0,2,0,4,33,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,168,"        return parse(str, ISODateTimeFormat.localDateParser());
",0,0,0,2,4,1,8,0,0,8,55,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,179,"        return formatter.parseLocalDate(str);
",0,0,0,1,2,1,6,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,207,"        if (calendar == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,208,"            throw new IllegalArgumentException(""The calendar must not be null"");
",0,0,0,1,2,0,0,2,0,4,68,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,210,"        int era = calendar.get(Calendar.ERA);
",6,0,0,1,2,0,4,0,0,10,37,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,211,"        int yearOfEra = calendar.get(Calendar.YEAR);
",6,0,0,1,2,0,4,0,0,10,44,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,212,"        return new LocalDate(
",0,0,0,0,1,1,0,2,0,2,21,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,241,"        if (date == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,242,"            throw new IllegalArgumentException(""The date must not be null"");
",0,0,0,1,2,0,0,2,0,4,64,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,244,"        if (date.getTime() < 0) {
",0,1,0,2,5,0,4,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,246,"            GregorianCalendar cal = new GregorianCalendar();
",2,0,0,1,2,0,0,4,0,6,48,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,247,"            cal.setTime(date);
",0,0,0,1,2,0,6,0,0,6,18,7,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,248,"            return fromCalendarFields(cal);
",0,0,0,1,2,1,4,0,0,4,31,7,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,250,"        return new LocalDate(
",0,0,0,0,1,1,0,2,0,2,21,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,467,"        if (iChronology == null) {
",2,1,0,1,3,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,468,"            return new LocalDate(iLocalMillis, ISOChronology.getInstanceUTC());
",2,0,0,2,4,1,4,2,0,8,67,7,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,470,"        if (DateTimeZone.UTC.equals(iChronology.getZone()) == false) {
",4,1,0,3,7,0,6,0,0,12,62,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,471,"            return new LocalDate(iLocalMillis, iChronology.withUTC());
",2,0,0,2,4,1,4,2,0,8,58,7,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,473,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,486,"        return 3;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,499,"        switch (index) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,501,"                return chrono.year();
",0,0,0,1,2,1,4,0,0,4,21,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,503,"                return chrono.monthOfYear();
",0,0,0,1,2,1,4,0,0,4,28,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,505,"                return chrono.dayOfMonth();
",0,0,0,1,2,1,4,0,0,4,27,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,507,"                throw new IndexOutOfBoundsException(""Invalid index: "" + index);
",2,1,0,1,2,0,0,2,0,6,63,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,524,"        switch (index) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,526,"                return getChronology().year().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,52,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,528,"                return getChronology().monthOfYear().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,59,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,530,"                return getChronology().dayOfMonth().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,58,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,532,"                throw new IndexOutOfBoundsException(""Invalid index: "" + index);
",2,1,0,1,2,0,0,2,0,6,63,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,552,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,553,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");
",0,0,0,1,2,0,0,2,0,4,77,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,555,"        if (isSupported(fieldType) == false) {
",0,1,0,2,5,0,4,0,0,6,38,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,556,"            throw new IllegalArgumentException(""Field '"" + fieldType + ""' is not supported"");
",2,1,0,1,2,0,0,2,0,7,81,7,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,558,"        return fieldType.getField(getChronology()).get(getLocalMillis());
",0,0,0,4,8,1,10,0,0,10,65,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,570,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,571,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,573,"        DurationFieldType durType = type.getDurationType();
",2,0,0,1,2,0,4,2,0,8,51,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,574,"        if (DATE_DURATION_TYPES.contains(durType) ||
",0,1,0,1,3,0,6,0,0,7,44,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,577,"            return type.getField(getChronology()).isSupported();
",0,0,0,3,6,1,8,0,0,8,52,7,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,579,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,590,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,591,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,593,"        DurationField field = type.getField(getChronology());
",2,0,0,2,4,0,6,2,0,10,53,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,594,"        if (DATE_DURATION_TYPES.contains(type) ||
",0,1,0,1,3,0,6,0,0,7,41,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,596,"            return field.isSupported();
",0,0,0,1,2,1,4,0,0,4,27,7,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,598,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,610,"        return iLocalMillis;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,619,"        return iChronology;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,632,"        if (this == partial) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,633,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,635,"        if (partial instanceof LocalDate) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,636,"            LocalDate other = (LocalDate) partial;
",4,0,0,1,2,0,0,4,0,8,38,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,637,"            if (iChronology.equals(other.iChronology)) {
",4,0,0,2,5,0,4,0,0,8,44,7,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,638,"                return iLocalMillis == other.iLocalMillis;
",6,1,0,0,0,1,0,0,0,7,42,8,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,641,"        return super.equals(partial);
",4,0,0,1,2,1,0,0,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,651,"        int hash = iHash;
",4,0,0,0,0,0,0,0,0,4,17,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,652,"        if (hash == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,653,"            hash = iHash = super.hashCode();
",6,0,0,1,2,0,0,0,0,8,32,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,655,"        return hash;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,676,"        if (this == partial) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,677,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,679,"        if (partial instanceof LocalDate) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,680,"            LocalDate other = (LocalDate) partial;
",4,0,0,1,2,0,0,4,0,8,38,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,681,"            if (iChronology.equals(other.iChronology)) {
",4,0,0,2,5,0,4,0,0,8,44,7,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,682,"                return (iLocalMillis < other.iLocalMillis ? -1 :
",6,1,0,0,1,1,0,0,0,8,48,10,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,687,"        return super.compareTo(partial);
",4,0,0,1,2,1,0,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,706,"        return toDateTimeAtStartOfDay(null);
",0,0,0,1,2,1,2,0,0,3,36,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,728,"        zone = DateTimeUtils.getZone(zone);
",2,0,0,1,2,0,6,0,0,9,35,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,729,"        Chronology chrono = getChronology().withZone(zone);
",2,0,0,2,4,0,6,2,0,10,51,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,730,"        long localMillis = getLocalMillis() + 6L * DateTimeConstants.MILLIS_PER_HOUR;
",6,2,0,1,2,0,2,0,0,10,77,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,731,"        long instant = zone.convertLocalToUTC(localMillis, false);
",2,0,0,1,2,0,6,0,0,9,58,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,732,"        instant = chrono.dayOfMonth().roundFloor(instant);
",2,0,0,2,4,0,8,0,0,11,50,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,733,"        return new DateTime(instant, chrono);
",4,0,0,1,2,1,0,2,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,753,"        return toDateTimeAtMidnight(null);
",0,0,0,1,2,1,2,0,0,3,34,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,776,"        zone = DateTimeUtils.getZone(zone);
",2,0,0,1,2,0,6,0,0,9,35,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,777,"        Chronology chrono = getChronology().withZone(zone);
",2,0,0,2,4,0,6,2,0,10,51,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,778,"        return new DateTime(getYear(), getMonthOfYear(), getDayOfMonth(), 0, 0, 0, 0, chrono);
",2,0,0,4,8,1,6,2,0,10,86,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,795,"        return toDateTimeAtCurrentTime(null);
",0,0,0,1,2,1,2,0,0,3,37,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,815,"        zone = DateTimeUtils.getZone(zone);
",2,0,0,1,2,0,6,0,0,9,35,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,816,"        Chronology chrono = getChronology().withZone(zone);
",2,0,0,2,4,0,6,2,0,10,51,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,817,"        long instantMillis = DateTimeUtils.currentTimeMillis();
",2,0,0,1,2,0,4,0,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,818,"        long resolved = chrono.set(this, instantMillis);
",2,0,0,1,2,0,6,0,0,8,48,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,819,"        return new DateTime(resolved, chrono);
",4,0,0,1,2,1,0,2,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,840,"        return toDateMidnight(null);
",0,0,0,1,2,1,2,0,0,3,28,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,861,"        zone = DateTimeUtils.getZone(zone);
",2,0,0,1,2,0,6,0,0,9,35,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,862,"        Chronology chrono = getChronology().withZone(zone);
",2,0,0,2,4,0,6,2,0,10,51,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,863,"        return new DateMidnight(getYear(), getMonthOfYear(), getDayOfMonth(), chrono);
",2,0,0,4,8,1,6,2,0,10,78,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,884,"        if (time == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,885,"            throw new IllegalArgumentException(""The time must not be null"");
",0,0,0,1,2,0,0,2,0,4,64,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,887,"        if (getChronology() != time.getChronology()) {
",0,1,0,3,7,0,6,0,0,7,46,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,888,"            throw new IllegalArgumentException(""The chronology of the time does not match"");
",0,0,0,1,2,0,0,2,0,3,80,7,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,890,"        long localMillis = getLocalMillis() + time.getLocalMillis();
",2,1,0,2,4,0,6,0,0,9,60,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,891,"        return new LocalDateTime(localMillis, getChronology());
",2,0,0,2,4,1,2,2,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,913,"        return toDateTime(time, null);
",0,0,0,1,2,1,4,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,935,"        if (time != null && getChronology() != time.getChronology()) {
",2,3,0,3,7,0,6,0,0,12,62,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,936,"            throw new IllegalArgumentException(""The chronology of the time does not match"");
",0,0,0,1,2,0,0,2,0,3,80,7,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,938,"        Chronology chrono = getChronology().withZone(zone);
",2,0,0,2,4,0,6,2,0,10,51,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,939,"        long instant = DateTimeUtils.currentTimeMillis();
",2,0,0,1,2,0,4,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,940,"        instant = chrono.set(this, instant);
",2,0,0,1,2,0,6,0,0,9,36,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,941,"        if (time != null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,942,"            instant = chrono.set(time, instant);
",2,0,0,1,2,0,8,0,0,11,36,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,944,"        return new DateTime(instant, chrono);
",4,0,0,1,2,1,0,2,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,960,"        return toInterval(null);
",0,0,0,1,2,1,2,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,975,"        zone = DateTimeUtils.getZone(zone);
",2,0,0,1,2,0,6,0,0,9,35,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,976,"        DateTime start = toDateTimeAtStartOfDay(zone);
",2,0,0,1,2,0,4,2,0,8,46,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,977,"        DateTime end = plusDays(1).toDateTimeAtStartOfDay(zone);
",2,0,0,2,4,0,6,2,0,10,56,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,978,"        return new Interval(start, end);
",4,0,0,1,2,1,0,2,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,999,"        int dom = getDayOfMonth();
",2,0,0,1,2,0,2,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1000,"        Date date = new Date(getYear() - 1900, getMonthOfYear() - 1, dom);
",4,2,0,3,6,0,4,4,0,14,66,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1001,"        LocalDate check = LocalDate.fromDateFields(date);
",2,0,0,1,2,0,6,2,0,10,49,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1002,"        if (check.isBefore(this)) {
",0,0,0,2,5,0,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1005,"            while (check.equals(this) == false) {
",0,1,0,2,5,0,4,0,0,6,37,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1006,"                date.setTime(date.getTime() + 3600000);
",0,1,0,2,4,0,8,0,0,9,39,9,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1007,"                check = LocalDate.fromDateFields(date);
",2,0,0,1,2,0,6,0,0,9,39,8,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1010,"            while (date.getDate() == dom) {
",2,1,0,2,5,0,4,0,0,7,31,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1011,"                date.setTime(date.getTime() - 1000);
",0,1,0,2,4,0,8,0,0,9,36,9,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1014,"            date.setTime(date.getTime() + 1000);
",0,1,0,2,4,0,8,0,0,9,36,7,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1015,"        } else if (check.equals(this)) {
",0,0,0,2,6,0,4,0,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1017,"            Date earlier = new Date(date.getTime() - TimeZone.getDefault().getDSTSavings());
",2,1,0,4,8,0,10,4,0,17,80,7,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1018,"            if (earlier.getDate() == dom) {
",2,1,0,2,5,0,4,0,0,7,31,7,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1019,"                date = earlier;
",4,0,0,0,0,0,0,0,0,5,15,9,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1022,"        return date;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1037,"        newMillis = iChronology.dayOfMonth().roundFloor(newMillis);
",2,0,0,2,4,0,8,0,0,11,59,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1038,"        return (newMillis == getLocalMillis() ? this : new LocalDate(newMillis, getChronology()));
",4,1,0,4,8,1,4,2,0,11,90,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1056,"        if (partial == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1057,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1059,"        return withLocalMillis(getChronology().set(partial, getLocalMillis()));
",0,0,0,4,8,1,10,0,0,10,71,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1081,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1082,"            throw new IllegalArgumentException(""Field must not be null"");
",0,0,0,1,2,0,0,2,0,4,61,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1084,"        if (isSupported(fieldType) == false) {
",0,1,0,2,5,0,4,0,0,6,38,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1085,"            throw new IllegalArgumentException(""Field '"" + fieldType + ""' is not supported"");
",2,1,0,1,2,0,0,2,0,7,81,7,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1087,"        long instant = fieldType.getField(getChronology()).set(getLocalMillis(), value);
",2,0,0,4,8,0,12,0,0,14,80,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1088,"        return withLocalMillis(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1110,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1111,"            throw new IllegalArgumentException(""Field must not be null"");
",0,0,0,1,2,0,0,2,0,4,61,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1113,"        if (isSupported(fieldType) == false) {
",0,1,0,2,5,0,4,0,0,6,38,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1114,"            throw new IllegalArgumentException(""Field '"" + fieldType + ""' is not supported"");
",2,1,0,1,2,0,0,2,0,7,81,7,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1116,"        if (amount == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1117,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1119,"        long instant = fieldType.getField(getChronology()).add(getLocalMillis(), amount);
",2,0,0,4,8,0,12,0,0,14,81,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1120,"        return withLocalMillis(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1143,"        if (period == null || scalar == 0) {
",4,3,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1144,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1146,"        long instant = getLocalMillis();
",2,0,0,1,2,0,2,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1147,"        Chronology chrono = getChronology();
",2,0,0,1,2,0,2,2,0,6,36,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1148,"        for (int i = 0; i < period.size(); i++) {
",6,1,0,2,5,0,4,0,0,12,41,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1149,"            long value = FieldUtils.safeMultiply(period.getValue(i), scalar);
",2,0,0,2,4,0,12,0,0,14,65,7,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1150,"            DurationFieldType type = period.getFieldType(i);
",2,0,0,1,2,0,6,2,0,10,48,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1151,"            if (isSupported(type)) {
",0,0,0,2,5,0,4,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1152,"                instant = type.getField(chrono).add(instant, value);
",2,0,0,2,4,0,12,0,0,15,52,8,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1155,"        return withLocalMillis(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1176,"        return withPeriodAdded(period, 1);
",0,0,0,1,2,1,4,0,0,4,34,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1198,"        if (years == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1199,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1201,"        long instant = getChronology().years().add(getLocalMillis(), years);
",2,0,0,4,8,0,10,0,0,12,68,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1202,"        return withLocalMillis(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1224,"        if (months == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1225,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1227,"        long instant = getChronology().months().add(getLocalMillis(), months);
",2,0,0,4,8,0,10,0,0,12,70,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1228,"        return withLocalMillis(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1247,"        if (weeks == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1248,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1250,"        long instant = getChronology().weeks().add(getLocalMillis(), weeks);
",2,0,0,4,8,0,10,0,0,12,68,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1251,"        return withLocalMillis(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1270,"        if (days == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1271,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1273,"        long instant = getChronology().days().add(getLocalMillis(), days);
",2,0,0,4,8,0,10,0,0,12,66,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1274,"        return withLocalMillis(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1295,"        return withPeriodAdded(period, -1);
",0,0,0,1,2,1,4,0,0,5,35,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1317,"        if (years == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1318,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1320,"        long instant = getChronology().years().subtract(getLocalMillis(), years);
",2,0,0,4,8,0,10,0,0,12,73,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1321,"        return withLocalMillis(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1343,"        if (months == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1344,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1346,"        long instant = getChronology().months().subtract(getLocalMillis(), months);
",2,0,0,4,8,0,10,0,0,12,75,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1347,"        return withLocalMillis(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1366,"        if (weeks == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1367,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1369,"        long instant = getChronology().weeks().subtract(getLocalMillis(), weeks);
",2,0,0,4,8,0,10,0,0,12,73,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1370,"        return withLocalMillis(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1389,"        if (days == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1390,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1392,"        long instant = getChronology().days().subtract(getLocalMillis(), days);
",2,0,0,4,8,0,10,0,0,12,71,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1393,"        return withLocalMillis(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1406,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1407,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");
",0,0,0,1,2,0,0,2,0,4,77,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1409,"        if (isSupported(fieldType) == false) {
",0,1,0,2,5,0,4,0,0,6,38,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1410,"            throw new IllegalArgumentException(""Field '"" + fieldType + ""' is not supported"");
",2,1,0,1,2,0,0,2,0,7,81,7,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1412,"        return new Property(this, fieldType.getField(getChronology()));
",0,0,0,3,6,1,6,2,0,8,63,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1422,"        return getChronology().era().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1431,"        return getChronology().centuryOfEra().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,60,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1440,"        return getChronology().yearOfEra().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,57,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1449,"        return getChronology().yearOfCentury().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,61,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1458,"        return getChronology().year().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1473,"        return getChronology().weekyear().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,56,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1482,"        return getChronology().monthOfYear().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,59,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1496,"        return getChronology().weekOfWeekyear().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,62,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1505,"        return getChronology().dayOfYear().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,57,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1516,"        return getChronology().dayOfMonth().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,58,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1527,"        return getChronology().dayOfWeek().get(getLocalMillis());
",0,0,0,4,8,1,8,0,0,8,57,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1543,"        return withLocalMillis(getChronology().era().set(getLocalMillis(), era));
",0,0,0,5,10,1,12,0,0,12,73,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1558,"        return withLocalMillis(getChronology().centuryOfEra().set(getLocalMillis(), centuryOfEra));
",0,0,0,5,10,1,12,0,0,12,91,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1573,"        return withLocalMillis(getChronology().yearOfEra().set(getLocalMillis(), yearOfEra));
",0,0,0,5,10,1,12,0,0,12,85,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1588,"        return withLocalMillis(getChronology().yearOfCentury().set(getLocalMillis(), yearOfCentury));
",0,0,0,5,10,1,12,0,0,12,93,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1603,"        return withLocalMillis(getChronology().year().set(getLocalMillis(), year));
",0,0,0,5,10,1,12,0,0,12,75,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1624,"        return withLocalMillis(getChronology().weekyear().set(getLocalMillis(), weekyear));
",0,0,0,5,10,1,12,0,0,12,83,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1639,"        return withLocalMillis(getChronology().monthOfYear().set(getLocalMillis(), monthOfYear));
",0,0,0,5,10,1,12,0,0,12,89,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1659,"        return withLocalMillis(getChronology().weekOfWeekyear().set(getLocalMillis(), weekOfWeekyear));
",0,0,0,5,10,1,12,0,0,12,95,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1674,"        return withLocalMillis(getChronology().dayOfYear().set(getLocalMillis(), dayOfYear));
",0,0,0,5,10,1,12,0,0,12,85,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1689,"        return withLocalMillis(getChronology().dayOfMonth().set(getLocalMillis(), dayOfMonth));
",0,0,0,5,10,1,12,0,0,12,87,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1704,"        return withLocalMillis(getChronology().dayOfWeek().set(getLocalMillis(), dayOfWeek));
",0,0,0,5,10,1,12,0,0,12,85,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1714,"        return new Property(this, getChronology().era());
",0,0,0,3,6,1,4,2,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1723,"        return new Property(this, getChronology().centuryOfEra());
",0,0,0,3,6,1,4,2,0,6,58,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1732,"        return new Property(this, getChronology().yearOfCentury());
",0,0,0,3,6,1,4,2,0,6,59,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1741,"        return new Property(this, getChronology().yearOfEra());
",0,0,0,3,6,1,4,2,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1750,"        return new Property(this, getChronology().year());
",0,0,0,3,6,1,4,2,0,6,50,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1759,"        return new Property(this, getChronology().weekyear());
",0,0,0,3,6,1,4,2,0,6,54,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1768,"        return new Property(this, getChronology().monthOfYear());
",0,0,0,3,6,1,4,2,0,6,57,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1777,"        return new Property(this, getChronology().weekOfWeekyear());
",0,0,0,3,6,1,4,2,0,6,60,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1786,"        return new Property(this, getChronology().dayOfYear());
",0,0,0,3,6,1,4,2,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1795,"        return new Property(this, getChronology().dayOfMonth());
",0,0,0,3,6,1,4,2,0,6,56,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1804,"        return new Property(this, getChronology().dayOfWeek());
",0,0,0,3,6,1,4,2,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1815,"        return ISODateTimeFormat.date().print(this);
",0,0,0,2,4,1,6,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1825,"        if (pattern == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1826,"            return toString();
",0,0,0,1,2,1,2,0,0,2,18,7,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1828,"        return DateTimeFormat.forPattern(pattern).print(this);
",0,0,0,2,4,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1839,"        if (pattern == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1840,"            return toString();
",0,0,0,1,2,1,2,0,0,2,18,7,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1842,"        return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);
",0,0,0,3,6,1,12,0,0,12,73,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,82,"public final class LocalDate
",2,0,0,0,0,2,0,0,0,4,28,1,0.00000,0
defect4j,time,org/joda/time/base/BaseLocal,10,47,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/base/BaseLocal,10,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,146,"        return (iPrinter != null);
",2,1,0,1,2,1,0,0,0,3,26,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,164,"        return (iParser != null);
",2,1,0,1,2,1,0,0,0,3,25,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,189,"        if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {
",4,4,0,5,11,0,8,0,0,18,78,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,190,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,192,"        return new DateTimeFormatter(iPrinter, iParser, locale,
",6,0,0,0,1,1,0,2,0,8,55,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,203,"        return iLocale;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,222,"        if (iOffsetParsed == true) {
",2,1,0,1,3,0,0,0,0,4,28,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,223,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,225,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,
",6,0,0,0,1,1,0,2,0,8,56,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,236,"        return iOffsetParsed;
",2,0,0,0,0,1,0,0,0,2,21,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,257,"        if (iChrono == chrono) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,258,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,260,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,
",6,0,0,0,1,1,0,2,0,8,56,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,270,"        return iChrono;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,281,"        return iChrono;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,322,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,334,"        return iZone;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,368,"        if (iPivotYear == pivotYear || (iPivotYear != null && iPivotYear.equals(pivotYear))) {
",6,4,0,3,7,0,6,0,0,16,86,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,369,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,371,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,
",6,0,0,0,1,1,0,2,0,8,56,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,405,"        return withPivotYear(Integer.valueOf(pivotYear));
",0,0,0,2,4,1,8,0,0,8,49,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,415,"      return iPivotYear;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,438,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,
",6,0,0,0,1,1,0,2,0,8,56,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,449,"      return iDefaultYear;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,460,"        long millis = DateTimeUtils.getInstantMillis(instant);
",2,0,0,1,2,0,6,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,461,"        Chronology chrono = DateTimeUtils.getInstantChronology(instant);
",2,0,0,1,2,0,6,2,0,10,64,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,462,"        printTo(buf, millis, chrono);
",0,0,0,1,2,0,8,0,0,8,29,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,463,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,472,"        long millis = DateTimeUtils.getInstantMillis(instant);
",2,0,0,1,2,0,6,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,473,"        Chronology chrono = DateTimeUtils.getInstantChronology(instant);
",2,0,0,1,2,0,6,2,0,10,64,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,474,"        printTo(out, millis, chrono);
",0,0,0,1,2,0,8,0,0,8,29,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,475,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,485,"        appendable.append(print(instant));
",0,0,0,2,4,0,8,0,0,8,34,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,486,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,497,"        printTo(buf, instant, null);
",0,0,0,1,2,0,6,0,0,7,28,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,498,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,508,"        printTo(out, instant, null);
",0,0,0,1,2,0,6,0,0,7,28,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,509,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,520,"        appendable.append(print(instant));
",0,0,0,2,4,0,8,0,0,8,34,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,521,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,534,"        DateTimePrinter printer = requirePrinter();
",2,0,0,1,2,0,2,2,0,6,43,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,535,"        if (partial == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,536,"            throw new IllegalArgumentException(""The partial must not be null"");
",0,0,0,1,2,0,0,2,0,4,67,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,538,"        printer.printTo(buf, partial, iLocale);
",0,0,0,1,2,0,10,0,0,10,39,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,539,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,551,"        DateTimePrinter printer = requirePrinter();
",2,0,0,1,2,0,2,2,0,6,43,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,552,"        if (partial == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,553,"            throw new IllegalArgumentException(""The partial must not be null"");
",0,0,0,1,2,0,0,2,0,4,67,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,555,"        printer.printTo(out, partial, iLocale);
",0,0,0,1,2,0,10,0,0,10,39,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,556,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,569,"        appendable.append(print(partial));
",0,0,0,2,4,0,8,0,0,8,34,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,570,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,583,"        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());
",2,0,0,3,6,0,4,4,0,10,78,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,584,"        printTo(buf, instant);
",0,0,0,1,2,0,6,0,0,6,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,585,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,598,"        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());
",2,0,0,3,6,0,4,4,0,10,78,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,599,"        printTo(buf, instant);
",0,0,0,1,2,0,6,0,0,6,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,600,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,613,"        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());
",2,0,0,3,6,0,4,4,0,10,78,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,614,"        printTo(buf, partial);
",0,0,0,1,2,0,6,0,0,6,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,615,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,619,"        DateTimePrinter printer = requirePrinter();
",2,0,0,1,2,0,2,2,0,6,43,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,620,"        chrono = selectChronology(chrono);
",2,0,0,1,2,0,4,0,0,7,34,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,623,"        DateTimeZone zone = chrono.getZone();
",2,0,0,1,2,0,4,2,0,8,37,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,624,"        int offset = zone.getOffset(instant);
",2,0,0,1,2,0,6,0,0,8,37,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,625,"        long adjustedInstant = instant + offset;
",6,1,0,0,0,0,0,0,0,7,40,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,626,"        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {
",8,5,0,3,7,0,0,0,0,13,65,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,628,"            zone = DateTimeZone.UTC;
",6,0,0,0,0,0,0,0,0,7,24,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,629,"            offset = 0;
",2,0,0,0,0,0,0,0,0,3,11,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,630,"            adjustedInstant = instant;
",4,0,0,0,0,0,0,0,0,5,26,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,632,"        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);
",0,0,0,2,4,0,18,0,0,18,79,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,633,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,636,"        DateTimePrinter printer = requirePrinter();
",2,0,0,1,2,0,2,2,0,6,43,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,637,"        chrono = selectChronology(chrono);
",2,0,0,1,2,0,4,0,0,7,34,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,640,"        DateTimeZone zone = chrono.getZone();
",2,0,0,1,2,0,4,2,0,8,37,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,641,"        int offset = zone.getOffset(instant);
",2,0,0,1,2,0,6,0,0,8,37,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,642,"        long adjustedInstant = instant + offset;
",6,1,0,0,0,0,0,0,0,7,40,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,643,"        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {
",8,5,0,3,7,0,0,0,0,13,65,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,645,"            zone = DateTimeZone.UTC;
",6,0,0,0,0,0,0,0,0,7,24,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,646,"            offset = 0;
",2,0,0,0,0,0,0,0,0,3,11,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,647,"            adjustedInstant = instant;
",4,0,0,0,0,0,0,0,0,5,26,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,649,"        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);
",0,0,0,2,4,0,18,0,0,18,79,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,650,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,658,"        DateTimePrinter printer = iPrinter;
",4,0,0,0,0,0,0,2,0,6,35,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,659,"        if (printer == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,660,"            throw new UnsupportedOperationException(""Printing not supported"");
",0,0,0,1,2,0,0,2,0,3,66,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,662,"        return printer;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,699,"        DateTimeParser parser = requireParser();
",2,0,0,1,2,0,2,2,0,6,40,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,700,"        if (instant == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,701,"            throw new IllegalArgumentException(""Instant must not be null"");
",0,0,0,1,2,0,0,2,0,4,63,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,704,"        long instantMillis = instant.getMillis();
",2,0,0,1,2,0,4,0,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,705,"        Chronology chrono = instant.getChronology();
",2,0,0,1,2,0,4,2,0,8,44,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,706,"        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
",4,1,0,2,4,0,8,0,0,13,78,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,707,"        chrono = selectChronology(chrono);
",2,0,0,1,2,0,4,0,0,7,34,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,709,"        DateTimeParserBucket bucket = new DateTimeParserBucket(
",2,0,0,0,1,0,0,4,0,6,55,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,711,"        int newPos = parser.parseInto(bucket, text, position);
",2,0,0,1,2,0,10,0,0,12,54,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,712,"        instant.setMillis(bucket.computeMillis(false, text));
",0,0,0,2,4,0,10,0,0,11,53,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,713,"        if (iOffsetParsed && bucket.getOffsetInteger() != null) {
",2,2,0,2,5,0,4,0,0,8,57,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,714,"            int parsedOffset = bucket.getOffsetInteger();
",2,0,0,1,2,0,4,0,0,6,45,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,715,"            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
",2,0,0,1,2,0,6,2,0,10,69,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,716,"            chrono = chrono.withZone(parsedZone);
",2,0,0,1,2,0,6,0,0,9,37,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,717,"        } else if (bucket.getZone() != null) {
",0,1,0,2,6,0,4,0,0,5,38,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,718,"            chrono = chrono.withZone(bucket.getZone());
",2,0,0,2,4,0,8,0,0,11,43,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,720,"        instant.setChronology(chrono);
",0,0,0,1,2,0,6,0,0,6,30,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,721,"        if (iZone != null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,722,"            instant.setZone(iZone);
",0,0,0,1,2,0,6,0,0,6,23,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,724,"        return newPos;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,740,"        DateTimeParser parser = requireParser();
",2,0,0,1,2,0,2,2,0,6,40,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,742,"        Chronology chrono = selectChronology(iChrono);
",2,0,0,1,2,0,4,2,0,8,46,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,743,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);
",10,0,0,1,2,0,0,4,0,14,101,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,744,"        int newPos = parser.parseInto(bucket, text, 0);
",2,0,0,1,2,0,8,0,0,10,47,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,745,"        if (newPos >= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,746,"            if (newPos >= text.length()) {
",2,1,0,2,5,0,4,0,0,7,30,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,747,"                return bucket.computeMillis(true, text);
",0,0,0,1,2,1,6,0,0,7,40,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,750,"            newPos = ~newPos;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,752,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));
",0,0,0,2,4,0,8,2,0,10,81,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,770,"        return parseLocalDateTime(text).toLocalDate();
",0,0,0,2,4,1,6,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,788,"        return parseLocalDateTime(text).toLocalTime();
",0,0,0,2,4,1,6,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,806,"        DateTimeParser parser = requireParser();
",2,0,0,1,2,0,2,2,0,6,40,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,808,"        Chronology chrono = selectChronology(null).withUTC();  // always use UTC, avoiding DST gaps
",2,0,0,2,4,0,4,2,0,9,91,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,809,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);
",10,0,0,1,2,0,0,4,0,14,101,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,810,"        int newPos = parser.parseInto(bucket, text, 0);
",2,0,0,1,2,0,8,0,0,10,47,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,811,"        if (newPos >= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,812,"            if (newPos >= text.length()) {
",2,1,0,2,5,0,4,0,0,7,30,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,813,"                long millis = bucket.computeMillis(true, text);
",2,0,0,1,2,0,6,0,0,9,47,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,814,"                if (bucket.getOffsetInteger() != null) {  // treat withOffsetParsed() as being true
",0,1,0,3,7,0,4,0,0,5,83,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,815,"                    int parsedOffset = bucket.getOffsetInteger();
",2,0,0,1,2,0,4,0,0,6,45,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,816,"                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
",2,0,0,1,2,0,6,2,0,10,69,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,817,"                    chrono = chrono.withZone(parsedZone);
",2,0,0,1,2,0,6,0,0,9,37,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,818,"                } else if (bucket.getZone() != null) {
",0,1,0,2,6,0,4,0,0,5,38,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,819,"                    chrono = chrono.withZone(bucket.getZone());
",2,0,0,2,4,0,8,0,0,11,43,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,821,"                return new LocalDateTime(millis, chrono);
",4,0,0,1,2,1,0,2,0,6,41,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,824,"            newPos = ~newPos;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,826,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));
",0,0,0,2,4,0,8,2,0,10,81,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,847,"        DateTimeParser parser = requireParser();
",2,0,0,1,2,0,2,2,0,6,40,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,849,"        Chronology chrono = selectChronology(null);
",2,0,0,1,2,0,2,2,0,7,43,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,850,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);
",10,0,0,1,2,0,0,4,0,14,101,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,851,"        int newPos = parser.parseInto(bucket, text, 0);
",2,0,0,1,2,0,8,0,0,10,47,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,852,"        if (newPos >= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,853,"            if (newPos >= text.length()) {
",2,1,0,2,5,0,4,0,0,7,30,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,854,"                long millis = bucket.computeMillis(true, text);
",2,0,0,1,2,0,6,0,0,9,47,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,855,"                if (iOffsetParsed && bucket.getOffsetInteger() != null) {
",2,2,0,2,5,0,4,0,0,8,57,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,856,"                    int parsedOffset = bucket.getOffsetInteger();
",2,0,0,1,2,0,4,0,0,6,45,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,857,"                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
",2,0,0,1,2,0,6,2,0,10,69,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,858,"                    chrono = chrono.withZone(parsedZone);
",2,0,0,1,2,0,6,0,0,9,37,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,859,"                } else if (bucket.getZone() != null) {
",0,1,0,2,6,0,4,0,0,5,38,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,860,"                    chrono = chrono.withZone(bucket.getZone());
",2,0,0,2,4,0,8,0,0,11,43,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,862,"                DateTime dt = new DateTime(millis, chrono);
",6,0,0,1,2,0,0,4,0,10,43,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,863,"                if (iZone != null) {
",2,1,0,1,3,0,0,0,0,3,20,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,864,"                    dt = dt.withZone(iZone);
",2,0,0,1,2,0,6,0,0,9,24,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,866,"                return dt;
",2,0,0,0,0,1,0,0,0,2,10,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,869,"            newPos = ~newPos;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,871,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));
",0,0,0,2,4,0,8,2,0,10,81,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,892,"        DateTimeParser parser = requireParser();
",2,0,0,1,2,0,2,2,0,6,40,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,894,"        Chronology chrono = selectChronology(null);
",2,0,0,1,2,0,2,2,0,7,43,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,895,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);
",10,0,0,1,2,0,0,4,0,14,101,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,896,"        int newPos = parser.parseInto(bucket, text, 0);
",2,0,0,1,2,0,8,0,0,10,47,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,897,"        if (newPos >= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,898,"            if (newPos >= text.length()) {
",2,1,0,2,5,0,4,0,0,7,30,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,899,"                long millis = bucket.computeMillis(true, text);
",2,0,0,1,2,0,6,0,0,9,47,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,900,"                if (iOffsetParsed && bucket.getOffsetInteger() != null) {
",2,2,0,2,5,0,4,0,0,8,57,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,901,"                    int parsedOffset = bucket.getOffsetInteger();
",2,0,0,1,2,0,4,0,0,6,45,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,902,"                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
",2,0,0,1,2,0,6,2,0,10,69,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,903,"                    chrono = chrono.withZone(parsedZone);
",2,0,0,1,2,0,6,0,0,9,37,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,904,"                } else if (bucket.getZone() != null) {
",0,1,0,2,6,0,4,0,0,5,38,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,905,"                    chrono = chrono.withZone(bucket.getZone());
",2,0,0,2,4,0,8,0,0,11,43,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,907,"                MutableDateTime dt = new MutableDateTime(millis, chrono);
",6,0,0,1,2,0,0,4,0,10,57,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,908,"                if (iZone != null) {
",2,1,0,1,3,0,0,0,0,3,20,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,909,"                    dt.setZone(iZone);
",0,0,0,1,2,0,6,0,0,6,18,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,911,"                return dt;
",2,0,0,0,0,1,0,0,0,2,10,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,914,"            newPos = ~newPos;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,916,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));
",0,0,0,2,4,0,8,2,0,10,81,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,925,"        DateTimeParser parser = iParser;
",4,0,0,0,0,0,0,2,0,6,32,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,926,"        if (parser == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,927,"            throw new UnsupportedOperationException(""Parsing not supported"");
",0,0,0,1,2,0,0,2,0,3,65,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,929,"        return parser;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,940,"        chrono = DateTimeUtils.getChronology(chrono);
",2,0,0,1,2,0,6,0,0,9,45,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,941,"        if (iChrono != null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,942,"            chrono = iChrono;
",4,0,0,0,0,0,0,0,0,5,17,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,944,"        if (iZone != null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,945,"            chrono = chrono.withZone(iZone);
",2,0,0,1,2,0,6,0,0,9,32,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,10,947,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,102,"        PeriodType type = cStandard;
",4,0,0,0,0,0,0,2,0,6,28,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,103,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,104,"            type = new PeriodType(
",2,0,0,0,1,0,0,2,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,114,"            cStandard = type;
",4,0,0,0,0,0,0,0,0,5,17,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,116,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,134,"        PeriodType type = cYMDTime;
",4,0,0,0,0,0,0,2,0,6,27,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,135,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,136,"            type = new PeriodType(
",2,0,0,0,1,0,0,2,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,146,"            cYMDTime = type;
",4,0,0,0,0,0,0,0,0,5,16,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,148,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,163,"        PeriodType type = cYMD;
",4,0,0,0,0,0,0,2,0,6,23,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,164,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,165,"            type = new PeriodType(
",2,0,0,0,1,0,0,2,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,173,"            cYMD = type;
",4,0,0,0,0,0,0,0,0,5,12,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,175,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,193,"        PeriodType type = cYWDTime;
",4,0,0,0,0,0,0,2,0,6,27,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,194,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,195,"            type = new PeriodType(
",2,0,0,0,1,0,0,2,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,205,"            cYWDTime = type;
",4,0,0,0,0,0,0,0,0,5,16,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,207,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,222,"        PeriodType type = cYWD;
",4,0,0,0,0,0,0,2,0,6,23,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,223,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,224,"            type = new PeriodType(
",2,0,0,0,1,0,0,2,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,232,"            cYWD = type;
",4,0,0,0,0,0,0,0,0,5,12,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,234,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,251,"        PeriodType type = cYDTime;
",4,0,0,0,0,0,0,2,0,6,26,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,252,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,253,"            type = new PeriodType(
",2,0,0,0,1,0,0,2,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,262,"            cYDTime = type;
",4,0,0,0,0,0,0,0,0,5,15,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,264,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,278,"        PeriodType type = cYD;
",4,0,0,0,0,0,0,2,0,6,22,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,279,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,280,"            type = new PeriodType(
",2,0,0,0,1,0,0,2,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,287,"            cYD = type;
",4,0,0,0,0,0,0,0,0,5,11,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,289,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,305,"        PeriodType type = cDTime;
",4,0,0,0,0,0,0,2,0,6,25,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,306,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,307,"            type = new PeriodType(
",2,0,0,0,1,0,0,2,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,316,"            cDTime = type;
",4,0,0,0,0,0,0,0,0,5,14,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,318,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,333,"        PeriodType type = cTime;
",4,0,0,0,0,0,0,2,0,6,24,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,334,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,335,"            type = new PeriodType(
",2,0,0,0,1,0,0,2,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,343,"            cTime = type;
",4,0,0,0,0,0,0,0,0,5,13,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,345,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,354,"        PeriodType type = cYears;
",4,0,0,0,0,0,0,2,0,6,25,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,355,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,356,"            type = new PeriodType(
",2,0,0,0,1,0,0,2,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,361,"            cYears = type;
",4,0,0,0,0,0,0,0,0,5,14,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,363,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,390,"        PeriodType type = cWeeks;
",4,0,0,0,0,0,0,2,0,6,25,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,391,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,392,"            type = new PeriodType(
",2,0,0,0,1,0,0,2,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,397,"            cWeeks = type;
",4,0,0,0,0,0,0,0,0,5,14,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,399,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,426,"        PeriodType type = cHours;
",4,0,0,0,0,0,0,2,0,6,25,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,427,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,428,"            type = new PeriodType(
",2,0,0,0,1,0,0,2,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,433,"            cHours = type;
",4,0,0,0,0,0,0,0,0,5,14,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,435,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,444,"        PeriodType type = cMinutes;
",4,0,0,0,0,0,0,2,0,6,27,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,445,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,446,"            type = new PeriodType(
",2,0,0,0,1,0,0,2,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,451,"            cMinutes = type;
",4,0,0,0,0,0,0,0,0,5,16,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,453,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,462,"        PeriodType type = cSeconds;
",4,0,0,0,0,0,0,2,0,6,27,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,463,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,464,"            type = new PeriodType(
",2,0,0,0,1,0,0,2,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,469,"            cSeconds = type;
",4,0,0,0,0,0,0,0,0,5,16,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,471,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,480,"        PeriodType type = cMillis;
",4,0,0,0,0,0,0,2,0,6,26,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,481,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,482,"            type = new PeriodType(
",2,0,0,0,1,0,0,2,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,487,"            cMillis = type;
",4,0,0,0,0,0,0,0,0,5,15,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,489,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,502,"        if (types == null || types.length == 0) {
",6,3,0,1,3,0,0,0,0,9,41,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,503,"            throw new IllegalArgumentException(""Types array must not be null or empty"");
",0,0,0,1,2,0,0,2,0,4,76,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,505,"        for (int i = 0; i < types.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,506,"            if (types[i] == null) {
",0,1,1,2,5,0,0,0,0,5,23,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,507,"                throw new IllegalArgumentException(""Types array must not contain null"");
",0,0,0,1,2,0,0,2,0,4,72,8,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,510,"        Map<PeriodType, Object> cache = cTypes;
",4,0,0,0,0,0,0,6,0,10,39,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,511,"        if (cache.isEmpty()) {
",0,0,0,2,5,0,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,512,"            cache.put(standard(), standard());
",0,0,0,3,6,0,8,0,0,8,34,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,513,"            cache.put(yearMonthDayTime(), yearMonthDayTime());
",0,0,0,3,6,0,8,0,0,8,50,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,514,"            cache.put(yearMonthDay(), yearMonthDay());
",0,0,0,3,6,0,8,0,0,8,42,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,515,"            cache.put(yearWeekDayTime(), yearWeekDayTime());
",0,0,0,3,6,0,8,0,0,8,48,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,516,"            cache.put(yearWeekDay(), yearWeekDay());
",0,0,0,3,6,0,8,0,0,8,40,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,517,"            cache.put(yearDayTime(), yearDayTime());
",0,0,0,3,6,0,8,0,0,8,40,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,518,"            cache.put(yearDay(), yearDay());
",0,0,0,3,6,0,8,0,0,8,32,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,519,"            cache.put(dayTime(), dayTime());
",0,0,0,3,6,0,8,0,0,8,32,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,520,"            cache.put(time(), time());
",0,0,0,3,6,0,8,0,0,8,26,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,521,"            cache.put(years(), years());
",0,0,0,3,6,0,8,0,0,8,28,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,522,"            cache.put(months(), months());
",0,0,0,3,6,0,8,0,0,8,30,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,523,"            cache.put(weeks(), weeks());
",0,0,0,3,6,0,8,0,0,8,28,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,524,"            cache.put(days(), days());
",0,0,0,3,6,0,8,0,0,8,26,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,525,"            cache.put(hours(), hours());
",0,0,0,3,6,0,8,0,0,8,28,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,526,"            cache.put(minutes(), minutes());
",0,0,0,3,6,0,8,0,0,8,32,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,527,"            cache.put(seconds(), seconds());
",0,0,0,3,6,0,8,0,0,8,32,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,528,"            cache.put(millis(), millis());
",0,0,0,3,6,0,8,0,0,8,30,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,530,"        PeriodType inPartType = new PeriodType(null, types, null);
",4,0,0,1,2,0,0,4,0,9,58,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,531,"        Object cached = cache.get(inPartType);
",2,0,0,1,2,0,6,2,0,10,38,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,532,"        if (cached instanceof PeriodType) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,533,"            return (PeriodType) cached;
",2,0,0,1,2,1,0,2,0,4,27,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,535,"        if (cached != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,536,"            throw new IllegalArgumentException(""PeriodType does not support fields: "" + cached);
",2,1,0,1,2,0,0,2,0,6,84,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,538,"        PeriodType type = standard();
",2,0,0,1,2,0,2,2,0,6,29,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,539,"        List<DurationFieldType> list = new ArrayList<DurationFieldType>(Arrays.asList(types));
",2,0,0,2,4,0,6,8,0,16,86,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,540,"        if (list.remove(DurationFieldType.years()) == false) {
",0,1,0,3,7,0,8,0,0,10,54,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,541,"            type = type.withYearsRemoved();
",2,0,0,1,2,0,4,0,0,7,31,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,543,"        if (list.remove(DurationFieldType.months()) == false) {
",0,1,0,3,7,0,8,0,0,10,55,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,544,"            type = type.withMonthsRemoved();
",2,0,0,1,2,0,4,0,0,7,32,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,546,"        if (list.remove(DurationFieldType.weeks()) == false) {
",0,1,0,3,7,0,8,0,0,10,54,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,547,"            type = type.withWeeksRemoved();
",2,0,0,1,2,0,4,0,0,7,31,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,549,"        if (list.remove(DurationFieldType.days()) == false) {
",0,1,0,3,7,0,8,0,0,10,53,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,550,"            type = type.withDaysRemoved();
",2,0,0,1,2,0,4,0,0,7,30,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,552,"        if (list.remove(DurationFieldType.hours()) == false) {
",0,1,0,3,7,0,8,0,0,10,54,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,553,"            type = type.withHoursRemoved();
",2,0,0,1,2,0,4,0,0,7,31,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,555,"        if (list.remove(DurationFieldType.minutes()) == false) {
",0,1,0,3,7,0,8,0,0,10,56,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,556,"            type = type.withMinutesRemoved();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,558,"        if (list.remove(DurationFieldType.seconds()) == false) {
",0,1,0,3,7,0,8,0,0,10,56,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,559,"            type = type.withSecondsRemoved();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,561,"        if (list.remove(DurationFieldType.millis()) == false) {
",0,1,0,3,7,0,8,0,0,10,55,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,562,"            type = type.withMillisRemoved();
",2,0,0,1,2,0,4,0,0,7,32,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,564,"        if (list.size() > 0) {
",0,1,0,2,5,0,4,0,0,5,22,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,565,"            cache.put(inPartType, list);
",0,0,0,1,2,0,8,0,0,8,28,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,566,"            throw new IllegalArgumentException(""PeriodType does not support fields: "" + list);
",2,1,0,1,2,0,0,2,0,6,82,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,569,"        PeriodType checkPartType = new PeriodType(null, type.iTypes, null);
",6,0,0,1,2,0,0,4,0,11,67,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,570,"        PeriodType checkedType = (PeriodType) cache.get(checkPartType);
",2,0,0,2,4,0,6,4,0,12,63,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,571,"        if (checkedType != null) {
",2,1,0,1,3,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,572,"            cache.put(checkPartType, checkedType);
",0,0,0,1,2,0,8,0,0,8,38,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,573,"            return checkedType;
",2,0,0,0,0,1,0,0,0,2,19,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,575,"        cache.put(checkPartType, type);
",0,0,0,1,2,0,8,0,0,8,31,5,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,576,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,608,"        return iName;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,617,"        return iTypes.length;
",4,0,0,0,0,1,0,0,0,4,21,5,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,628,"        return iTypes[index];
",0,0,1,1,2,1,0,0,0,4,21,5,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,638,"        return (indexOf(type) >= 0);
",0,1,0,2,4,1,4,0,0,5,28,5,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,648,"        for (int i = 0, isize = size(); i < isize; i++) {
",10,1,0,2,5,0,2,0,0,14,49,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,649,"            if (iTypes[i] == type) {
",2,1,1,2,5,0,0,0,0,7,24,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,650,"                return i;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,653,"        return -1;
",0,0,0,0,0,1,0,0,0,1,10,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,662,"        return ""PeriodType["" + getName() + ""]"";
",0,1,0,2,4,1,2,0,0,5,39,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,674,"        int realIndex = iIndices[index];
",2,0,1,1,2,0,0,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,675,"        return (realIndex == -1 ? 0 : period.getValue(realIndex));
",2,1,0,2,4,1,6,0,0,10,58,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,688,"        int realIndex = iIndices[index];
",2,0,1,1,2,0,0,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,689,"        if (realIndex == -1) {
",2,1,0,1,3,0,0,0,0,4,22,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,690,"            throw new UnsupportedOperationException(""Field is not supported"");
",0,0,0,1,2,0,0,2,0,3,66,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,692,"        values[realIndex] = newValue;
",2,0,1,1,2,0,0,0,0,7,29,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,693,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,707,"        if (valueToAdd == 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,708,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,710,"        int realIndex = iIndices[index];
",2,0,1,1,2,0,0,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,711,"        if (realIndex == -1) {
",2,1,0,1,3,0,0,0,0,4,22,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,712,"            throw new UnsupportedOperationException(""Field is not supported"");
",0,0,0,1,2,0,0,2,0,3,66,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,714,"        values[realIndex] = FieldUtils.safeAdd(values[realIndex], valueToAdd);
",0,0,1,3,6,0,6,0,0,15,70,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,715,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,725,"        return withFieldRemoved(0, ""NoYears"");
",0,0,0,1,2,1,2,0,0,3,38,5,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,734,"        return withFieldRemoved(1, ""NoMonths"");
",0,0,0,1,2,1,2,0,0,3,39,5,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,743,"        return withFieldRemoved(2, ""NoWeeks"");
",0,0,0,1,2,1,2,0,0,3,38,5,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,752,"        return withFieldRemoved(3, ""NoDays"");
",0,0,0,1,2,1,2,0,0,3,37,5,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,761,"        return withFieldRemoved(4, ""NoHours"");
",0,0,0,1,2,1,2,0,0,3,38,5,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,770,"        return withFieldRemoved(5, ""NoMinutes"");
",0,0,0,1,2,1,2,0,0,3,40,5,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,779,"        return withFieldRemoved(6, ""NoSeconds"");
",0,0,0,1,2,1,2,0,0,3,40,5,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,788,"        return withFieldRemoved(7, ""NoMillis"");
",0,0,0,1,2,1,2,0,0,3,39,5,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,799,"        int fieldIndex = iIndices[indicesIndex];
",2,0,1,1,2,0,0,0,0,6,40,5,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,800,"        if (fieldIndex == -1) {
",2,1,0,1,3,0,0,0,0,4,23,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,801,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,804,"        DurationFieldType[] types = new DurationFieldType[size() - 1];
",2,1,0,3,6,0,2,4,0,9,62,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,805,"        for (int i = 0; i < iTypes.length; i++) {
",10,1,0,1,3,0,0,0,0,12,41,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,806,"            if (i < fieldIndex) {
",4,1,0,1,3,0,0,0,0,5,21,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,807,"                types[i] = iTypes[i];
",0,0,1,2,4,0,0,0,0,9,21,8,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,808,"            } else if (i > fieldIndex) {
",4,1,0,1,4,0,0,0,0,5,28,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,809,"                types[i - 1] = iTypes[i];
",2,1,1,2,4,0,0,0,0,10,25,9,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,813,"        int[] indices = new int[8];
",2,0,0,2,4,0,0,0,0,2,27,5,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,814,"        for (int i = 0; i < indices.length; i++) {
",10,1,0,1,3,0,0,0,0,12,42,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,815,"            if (i < indicesIndex) {
",4,1,0,1,3,0,0,0,0,5,23,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,816,"                indices[i] = iIndices[i];
",0,0,1,2,4,0,0,0,0,9,25,8,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,817,"            } else if (i > indicesIndex) {
",4,1,0,1,4,0,0,0,0,5,30,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,818,"                indices[i] = (iIndices[i] == -1 ? -1 : iIndices[i] - 1);
",0,2,1,4,8,0,0,0,0,17,56,9,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,820,"                indices[i] = -1;
",0,0,1,1,2,0,0,0,0,6,16,9,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,823,"        return new PeriodType(getName() + name, types, indices);
",6,1,0,2,4,1,2,2,0,11,56,5,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,835,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,836,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,838,"        if (obj instanceof PeriodType == false) {
",2,1,0,1,3,0,0,2,0,6,41,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,839,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,841,"        PeriodType other = (PeriodType) obj;
",4,0,0,1,2,0,0,4,0,8,36,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,842,"        return (Arrays.equals(iTypes, other.iTypes));
",4,0,0,2,4,1,6,0,0,10,45,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,851,"        int hash = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,852,"        for (int i = 0; i < iTypes.length; i++) {
",10,1,0,1,3,0,0,0,0,12,41,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,853,"            hash += iTypes[i].hashCode();
",2,0,1,2,4,0,2,0,0,9,29,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,10,855,"        return hash;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,604,"        Chronology chrono = new BaseChronology() {
",2,0,0,1,3,0,0,4,0,6,42,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,606,"                return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,609,"                return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,612,"                return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,615,"                return getClass().getName();
",0,0,0,2,4,1,4,0,0,4,28,11,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,82,"    private UnsupportedDateTimeField(DateTimeFieldType type, DurationField durationField) {
",6,0,0,1,3,1,0,4,0,11,87,2,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,83,"        if (type == null || durationField == null) {
",4,3,0,1,3,0,0,0,0,7,44,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,84,"            throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,8,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,86,"        iType = type;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,87,"        iDurationField = durationField;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,88,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,55,"        if (cCache == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,56,"            cCache = new HashMap<DateTimeFieldType, UnsupportedDateTimeField>(7);
",2,0,0,1,2,0,0,6,0,9,69,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,57,"            field = null;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,59,"            field = cCache.get(type);
",2,0,0,1,2,0,6,0,0,9,25,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,60,"            if (field != null && field.getDurationField() != durationField) {
",4,3,0,2,5,0,4,0,0,11,65,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,61,"                field = null;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,64,"        if (field == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,65,"            field = new UnsupportedDateTimeField(type, durationField);
",6,0,0,1,2,0,0,2,0,9,58,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,66,"            cCache.put(type, field);
",0,0,0,1,2,0,8,0,0,8,24,7,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,68,"        return field;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,95,"        return iType;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,99,"        return iType.getName();
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,108,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,117,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,126,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,135,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,144,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,153,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,162,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,171,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,180,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,189,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,198,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,207,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,216,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,225,"        return getDurationField().add(instant, value);
",0,0,0,2,4,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,234,"        return getDurationField().add(instant, value);
",0,0,0,2,4,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,243,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,252,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,261,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,270,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,279,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,75,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,288,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,81,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,297,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,306,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,315,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,324,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,333,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,343,"        return iDurationField;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,352,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,361,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,370,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,379,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,388,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,397,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,406,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,415,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,424,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,433,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,442,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,451,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,460,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,469,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,478,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,487,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,496,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,505,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,514,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,523,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,533,"        return ""UnsupportedDateTimeField"";
",0,0,0,0,0,1,0,0,0,1,34,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,540,"        return getInstance(iType, iDurationField);
",0,0,0,1,2,1,6,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,10,544,"        return new UnsupportedOperationException(iType + "" field is unsupported"");
",2,1,0,1,2,1,0,2,0,6,74,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,10,79,"        return iType;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,10,83,"        return iType.getName();
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,10,101,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,10,110,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,10,119,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,10,128,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,10,137,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,10,146,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,10,155,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,10,164,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,10,173,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,10,182,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,10,191,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,10,200,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,10,209,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,10,227,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,10,238,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,10,239,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,10,240,"        } else if (obj instanceof UnsupportedDurationField) {
",2,0,0,1,4,0,0,2,0,4,53,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,10,241,"            UnsupportedDurationField other = (UnsupportedDurationField) obj;
",4,0,0,1,2,0,0,4,0,8,64,7,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,10,242,"            if (other.getName() == null) {
",0,1,0,2,5,0,4,0,0,5,30,7,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,10,243,"                return (getName() == null);
",0,1,0,2,4,1,2,0,0,4,27,10,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,10,245,"            return (other.getName().equals(getName()));
",0,0,0,4,8,1,8,0,0,8,43,9,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,10,247,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,10,256,"        return getName().hashCode();
",0,0,0,2,4,1,4,0,0,4,28,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,10,265,"        return ""UnsupportedDurationField["" + getName() + ']';
",0,1,0,2,4,1,2,0,0,5,53,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,10,272,"        return getInstance(iType);
",0,0,0,1,2,1,4,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,10,276,"        return new UnsupportedOperationException(iType + "" field is unsupported"");
",2,1,0,1,2,1,0,2,0,6,74,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,10,32,"public final class UnsupportedDurationField extends DurationField implements Serializable {
",2,0,0,0,1,2,0,4,0,8,91,1,0.00000,0
defect4j,time,org/joda/time/Months,10,94,"                return ONE;
",2,0,0,0,0,1,0,0,0,2,11,5,0.00000,0
defect4j,time,org/joda/time/Months,10,96,"                return TWO;
",2,0,0,0,0,1,0,0,0,2,11,5,0.00000,0
defect4j,time,org/joda/time/Months,10,98,"                return THREE;
",2,0,0,0,0,1,0,0,0,2,13,5,0.00000,0
defect4j,time,org/joda/time/Months,10,100,"                return FOUR;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/Months,10,102,"                return FIVE;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/Months,10,104,"                return SIX;
",2,0,0,0,0,1,0,0,0,2,11,5,0.00000,0
defect4j,time,org/joda/time/Months,10,106,"                return SEVEN;
",2,0,0,0,0,1,0,0,0,2,13,5,0.00000,0
defect4j,time,org/joda/time/Months,10,108,"                return EIGHT;
",2,0,0,0,0,1,0,0,0,2,13,5,0.00000,0
defect4j,time,org/joda/time/Months,10,110,"                return NINE;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/Months,10,112,"                return TEN;
",2,0,0,0,0,1,0,0,0,2,11,5,0.00000,0
defect4j,time,org/joda/time/Months,10,114,"                return ELEVEN;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/Months,10,116,"                return TWELVE;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/Months,10,118,"                return MAX_VALUE;
",2,0,0,0,0,1,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/Months,10,120,"                return MIN_VALUE;
",2,0,0,0,0,1,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/Months,10,122,"                return new Months(months);
",2,0,0,1,2,1,0,2,0,4,26,6,0.00000,0
defect4j,time,org/joda/time/Months,10,138,"        int amount = BaseSingleFieldPeriod.between(start, end, DurationFieldType.months());
",2,0,0,2,4,0,12,0,0,14,83,5,0.00000,0
defect4j,time,org/joda/time/Months,10,139,"        return Months.months(amount);
",0,0,0,1,2,1,6,0,0,6,29,5,0.00000,0
defect4j,time,org/joda/time/Months,10,156,"            Chronology chrono = DateTimeUtils.getChronology(start.getChronology());
",2,0,0,2,4,0,8,2,0,12,71,6,0.00000,0
defect4j,time,org/joda/time/Months,10,157,"            int months = chrono.months().getDifference(
",2,0,0,1,3,0,6,0,0,8,43,7,0.00000,0
defect4j,time,org/joda/time/Months,10,159,"            return Months.months(months);
",0,0,0,1,2,1,6,0,0,6,29,7,0.00000,0
defect4j,time,org/joda/time/Months,10,175,"        if (interval == null)   {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,time,org/joda/time/Months,10,176,"            return Months.ZERO;
",4,0,0,0,0,1,0,0,0,4,19,7,0.00000,0
defect4j,time,org/joda/time/Months,10,178,"        int amount = BaseSingleFieldPeriod.between(interval.getStart(), interval.getEnd(), DurationFieldType.months());
",2,0,0,4,8,0,16,0,0,18,111,5,0.00000,0
defect4j,time,org/joda/time/Months,10,179,"        return Months.months(amount);
",0,0,0,1,2,1,6,0,0,6,29,5,0.00000,0
defect4j,time,org/joda/time/Months,10,195,"        if (periodStr == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/Months,10,196,"            return Months.ZERO;
",4,0,0,0,0,1,0,0,0,4,19,7,0.00000,0
defect4j,time,org/joda/time/Months,10,198,"        Period p = PARSER.parsePeriod(periodStr);
",2,0,0,1,2,0,6,2,0,10,41,4,0.00000,0
defect4j,time,org/joda/time/Months,10,199,"        return Months.months(p.getMonths());
",0,0,0,2,4,1,8,0,0,8,36,5,0.00000,0
defect4j,time,org/joda/time/Months,10,220,"        return Months.months(getValue());
",0,0,0,2,4,1,6,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/Months,10,239,"        return PeriodType.months();
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/Months,10,263,"        if (months == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/Months,10,264,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/Months,10,266,"        return Months.months(FieldUtils.safeAdd(getValue(), months));
",0,0,0,3,6,1,12,0,0,12,61,5,0.00000,0
defect4j,time,org/joda/time/Months,10,279,"        if (months == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/Months,10,280,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/Months,10,282,"        return plus(months.getValue());
",0,0,0,2,4,1,6,0,0,6,31,5,0.00000,0
defect4j,time,org/joda/time/Months,10,296,"        return plus(FieldUtils.safeNegate(months));
",0,0,0,2,4,1,8,0,0,8,43,5,0.00000,0
defect4j,time,org/joda/time/Months,10,309,"        if (months == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/Months,10,310,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/Months,10,312,"        return minus(months.getValue());
",0,0,0,2,4,1,6,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/Months,10,326,"        return Months.months(FieldUtils.safeMultiply(getValue(), scalar));
",0,0,0,3,6,1,12,0,0,12,66,5,0.00000,0
defect4j,time,org/joda/time/Months,10,340,"        if (divisor == 1) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/Months,10,341,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/Months,10,343,"        return Months.months(getValue() / divisor);
",2,1,0,2,4,1,6,0,0,9,43,5,0.00000,0
defect4j,time,org/joda/time/Months,10,354,"        return Months.months(FieldUtils.safeNegate(getValue()));
",0,0,0,3,6,1,10,0,0,10,56,5,0.00000,0
defect4j,time,org/joda/time/Months,10,365,"        if (other == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/Months,10,366,"            return getValue() > 0;
",0,1,0,1,2,1,2,0,0,3,22,6,0.00000,0
defect4j,time,org/joda/time/Months,10,368,"        return getValue() > other.getValue();
",0,1,0,2,4,1,6,0,0,7,37,4,0.00000,0
defect4j,time,org/joda/time/Months,10,378,"        if (other == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/Months,10,379,"            return getValue() < 0;
",0,1,0,1,2,1,2,0,0,3,22,6,0.00000,0
defect4j,time,org/joda/time/Months,10,381,"        return getValue() < other.getValue();
",0,1,0,2,4,1,6,0,0,7,37,4,0.00000,0
defect4j,time,org/joda/time/Months,10,394,"        return ""P"" + String.valueOf(getValue()) + ""M"";
",0,1,0,2,4,1,6,0,0,9,46,4,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,67,"        if (start == null || end == null) {
",4,3,0,1,3,0,0,0,0,7,35,4,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,68,"            throw new IllegalArgumentException(""ReadableInstant objects must not be null"");
",0,0,0,1,2,0,0,2,0,4,79,6,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,70,"        Chronology chrono = DateTimeUtils.getInstantChronology(start);
",2,0,0,1,2,0,6,2,0,10,62,4,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,71,"        int amount = field.getField(chrono).getDifference(end.getMillis(), start.getMillis());
",2,0,0,4,8,0,16,0,0,18,86,5,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,72,"        return amount;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,90,"            throw new IllegalArgumentException(""ReadablePartial objects must not be null"");
",0,0,0,1,2,0,0,2,0,4,79,6,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,93,"            throw new IllegalArgumentException(""ReadablePartial objects must have the same set of fields"");
",0,0,0,1,2,0,0,2,0,3,95,7,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,97,"                throw new IllegalArgumentException(""ReadablePartial objects must have the same set of fields"");
",0,0,0,1,2,0,0,2,0,3,95,9,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,101,"            throw new IllegalArgumentException(""ReadablePartial objects must be contiguous"");
",0,0,0,1,2,0,0,2,0,3,81,7,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,129,"        if (period == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,130,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,132,"        Chronology iso = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,48,4,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,133,"        long duration = 0L;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,134,"        for (int i = 0; i < period.size(); i++) {
",6,1,0,2,5,0,4,0,0,12,41,4,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,135,"            int value = period.getValue(i);
",2,0,0,1,2,0,6,0,0,8,31,7,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,136,"            if (value != 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,137,"                DurationField field = period.getFieldType(i).getField(iso);
",2,0,0,2,4,0,10,2,0,14,59,8,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,138,"                if (field.isPrecise() == false) {
",0,1,0,2,5,0,4,0,0,6,33,8,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,139,"                    throw new IllegalArgumentException(
",0,0,0,0,1,0,0,2,0,2,35,12,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,143,"                duration = FieldUtils.safeAdd(duration, FieldUtils.safeMultiply(field.getUnitMillis(), value));
",2,0,0,3,6,0,16,0,0,19,95,8,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,146,"        return FieldUtils.safeToInt(duration / millisPerUnit);
",4,1,0,1,2,1,4,0,0,9,54,5,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,177,"        iPeriod = value;
",4,0,0,0,0,0,0,0,0,5,16,4,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,178,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,217,"            throw new IndexOutOfBoundsException(String.valueOf(index));
",0,0,0,2,4,0,6,2,0,8,59,7,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,232,"        if (index != 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,233,"            throw new IndexOutOfBoundsException(String.valueOf(index));
",0,0,0,2,4,0,6,2,0,8,59,7,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,235,"        return getValue();
",0,0,0,1,2,1,2,0,0,2,18,5,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,248,"        if (type == getFieldType()) {
",2,1,0,2,5,0,2,0,0,5,29,4,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,249,"            return getValue();
",0,0,0,1,2,1,2,0,0,2,18,7,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,251,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,261,"        return (type == getFieldType());
",2,1,0,2,4,1,2,0,0,5,32,5,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,272,"        return Period.ZERO.withFields(this);
",4,0,0,1,2,1,2,0,0,6,36,5,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,284,"        MutablePeriod period = new MutablePeriod();
",2,0,0,1,2,0,0,4,0,6,43,4,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,285,"        period.add(this);
",0,0,0,1,2,0,4,0,0,4,17,5,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,286,"        return period;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,300,"        if (this == period) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,301,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,303,"        if (period instanceof ReadablePeriod == false) {
",2,1,0,1,3,0,0,2,0,6,48,4,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,304,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,306,"        ReadablePeriod other = (ReadablePeriod) period;
",4,0,0,1,2,0,0,4,0,8,47,4,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,307,"        return (other.getPeriodType() == getPeriodType() && other.getValue(0) == getValue());
",0,3,0,5,10,1,12,0,0,15,85,5,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,316,"        int total = 17;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,317,"        total = 27 * total + getValue();
",4,2,0,1,2,0,2,0,0,9,32,4,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,318,"        total = 27 * total + getFieldType().hashCode();
",4,2,0,2,4,0,4,0,0,11,47,4,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,319,"        return total;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,331,"        if (other.getClass() != getClass()) {
",0,1,0,3,7,0,6,0,0,7,37,4,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,332,"            throw new ClassCastException(getClass() + "" cannot be compared to "" + other.getClass());
",0,1,0,3,6,0,6,2,0,10,88,7,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,334,"        int otherValue = other.getValue();
",2,0,0,1,2,0,4,0,0,6,34,5,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,335,"        int thisValue = getValue();
",2,0,0,1,2,0,2,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,336,"        if (thisValue > otherValue) {
",4,1,0,1,3,0,0,0,0,5,29,4,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,337,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,339,"        if (thisValue < otherValue) {
",4,1,0,1,3,0,0,0,0,5,29,4,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,340,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,6,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,342,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/base/BaseSingleFieldPeriod,10,46,"public abstract class BaseSingleFieldPeriod
",2,0,0,0,0,2,0,0,0,4,43,1,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,119,"        return (iPrinter != null);
",2,1,0,1,2,1,0,0,0,3,26,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,137,"        return (iParser != null);
",2,1,0,1,2,1,0,0,0,3,25,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,161,"        if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {
",4,4,0,5,11,0,8,0,0,18,78,4,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,162,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,164,"        return new PeriodFormatter(iPrinter, iParser, locale, iParseType);
",8,0,0,1,2,1,0,2,0,10,66,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,173,"        return iLocale;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,188,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,199,"        return iParseType;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,210,"        checkPrinter();
",0,0,0,1,2,0,2,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,211,"        checkPeriod(period);
",0,0,0,1,2,0,4,0,0,4,20,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,213,"        getPrinter().printTo(buf, period, iLocale);
",0,0,0,2,4,0,10,0,0,10,43,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,214,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,223,"        checkPrinter();
",0,0,0,1,2,0,2,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,224,"        checkPeriod(period);
",0,0,0,1,2,0,4,0,0,4,20,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,226,"        getPrinter().printTo(out, period, iLocale);
",0,0,0,2,4,0,10,0,0,10,43,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,227,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,236,"        checkPrinter();
",0,0,0,1,2,0,2,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,237,"        checkPeriod(period);
",0,0,0,1,2,0,4,0,0,4,20,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,239,"        PeriodPrinter printer = getPrinter();
",2,0,0,1,2,0,2,2,0,6,37,4,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,240,"        StringBuffer buf = new StringBuffer(printer.calculatePrintedLength(period, iLocale));
",2,0,0,2,4,0,8,4,0,14,85,4,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,241,"        printer.printTo(buf, period, iLocale);
",0,0,0,1,2,0,10,0,0,10,38,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,242,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,251,"        if (iPrinter == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,252,"            throw new UnsupportedOperationException(""Printing not supported"");
",0,0,0,1,2,0,0,2,0,3,66,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,254,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,262,"        if (period == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,263,"            throw new IllegalArgumentException(""Period must not be null"");
",0,0,0,1,2,0,0,2,0,4,62,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,265,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,288,"        checkParser();
",0,0,0,1,2,0,2,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,289,"        checkPeriod(period);
",0,0,0,1,2,0,4,0,0,4,20,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,291,"        return getParser().parseInto(period, text, position, iLocale);
",0,0,0,2,4,1,12,0,0,12,62,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,302,"        checkParser();
",0,0,0,1,2,0,2,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,304,"        return parseMutablePeriod(text).toPeriod();
",0,0,0,2,4,1,6,0,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,315,"        checkParser();
",0,0,0,1,2,0,2,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,317,"        MutablePeriod period = new MutablePeriod(0, iParseType);
",4,0,0,1,2,0,0,4,0,8,56,4,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,318,"        int newPos = getParser().parseInto(period, text, 0, iLocale);
",2,0,0,2,4,0,10,0,0,12,61,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,319,"        if (newPos >= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,320,"            if (newPos >= text.length()) {
",2,1,0,2,5,0,4,0,0,7,30,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,321,"                return period;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,324,"            newPos = ~newPos;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,326,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));
",0,0,0,2,4,0,8,2,0,10,81,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,335,"        if (iParser == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,336,"            throw new UnsupportedOperationException(""Parsing not supported"");
",0,0,0,1,2,0,0,2,0,3,65,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatter,10,338,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1890,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1891,"            iInstant = instant;
",4,0,0,0,0,0,0,0,0,5,19,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1892,"            iField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1893,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1899,"            oos.writeObject(iInstant);
",0,0,0,1,2,0,6,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1900,"            oos.writeObject(iField.getType());
",0,0,0,2,4,0,8,0,0,8,34,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1901,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1907,"            iInstant = (LocalDate) oos.readObject();
",2,0,0,2,4,0,4,2,0,9,40,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1908,"            DateTimeFieldType type = (DateTimeFieldType) oos.readObject();
",2,0,0,2,4,0,4,4,0,10,62,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1909,"            iField = type.getField(iInstant.getChronology());
",2,0,0,2,4,0,8,0,0,11,49,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1910,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1919,"            return iField;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1928,"            return iInstant.getLocalMillis();
",0,0,0,1,2,1,4,0,0,4,33,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1938,"            return iInstant.getChronology();
",0,0,0,1,2,1,4,0,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1947,"            return iInstant;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1961,"            return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));
",0,0,0,3,6,1,14,0,0,14,78,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1976,"            return iInstant.withLocalMillis(iField.addWrapField(iInstant.getLocalMillis(), value));
",0,0,0,3,6,1,14,0,0,14,87,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,1990,"            return iInstant.withLocalMillis(iField.set(iInstant.getLocalMillis(), value));
",0,0,0,3,6,1,14,0,0,14,78,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,2004,"            return iInstant.withLocalMillis(iField.set(iInstant.getLocalMillis(), text, locale));
",0,0,0,3,6,1,16,0,0,16,85,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,2017,"            return setCopy(text, null);
",0,0,0,1,2,1,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,2036,"            return setCopy(getMaximumValue());
",0,0,0,2,4,1,4,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,2048,"            return setCopy(getMinimumValue());
",0,0,0,2,4,1,4,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,2063,"            return iInstant.withLocalMillis(iField.roundFloor(iInstant.getLocalMillis()));
",0,0,0,3,6,1,12,0,0,12,78,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,2077,"            return iInstant.withLocalMillis(iField.roundCeiling(iInstant.getLocalMillis()));
",0,0,0,3,6,1,12,0,0,12,80,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,2087,"            return iInstant.withLocalMillis(iField.roundHalfFloor(iInstant.getLocalMillis()));
",0,0,0,3,6,1,12,0,0,12,82,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,2097,"            return iInstant.withLocalMillis(iField.roundHalfCeiling(iInstant.getLocalMillis()));
",0,0,0,3,6,1,12,0,0,12,84,6,0.00000,0
defect4j,time,org/joda/time/LocalDate,10,2108,"            return iInstant.withLocalMillis(iField.roundHalfEven(iInstant.getLocalMillis()));
",0,0,0,3,6,1,12,0,0,12,81,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,463,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,464,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,466,"            if (obj instanceof StandardDateTimeFieldType) {
",2,0,0,1,3,0,0,2,0,4,47,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,467,"                return iOrdinal == ((StandardDateTimeFieldType) obj).iOrdinal;
",6,1,0,2,4,1,0,2,0,9,62,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,469,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,475,"            return (1 << iOrdinal);
",2,1,0,1,2,1,0,0,0,3,23,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,484,"                    return chronology.era();
",0,0,0,1,2,1,4,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,486,"                    return chronology.yearOfEra();
",0,0,0,1,2,1,4,0,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,488,"                    return chronology.centuryOfEra();
",0,0,0,1,2,1,4,0,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,490,"                    return chronology.yearOfCentury();
",0,0,0,1,2,1,4,0,0,4,34,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,492,"                    return chronology.year();
",0,0,0,1,2,1,4,0,0,4,25,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,494,"                    return chronology.dayOfYear();
",0,0,0,1,2,1,4,0,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,500,"                    return chronology.weekyearOfCentury();
",0,0,0,1,2,1,4,0,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,502,"                    return chronology.weekyear();
",0,0,0,1,2,1,4,0,0,4,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,504,"                    return chronology.weekOfWeekyear();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,506,"                    return chronology.dayOfWeek();
",0,0,0,1,2,1,4,0,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,508,"                    return chronology.halfdayOfDay();
",0,0,0,1,2,1,4,0,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,510,"                    return chronology.hourOfHalfday();
",0,0,0,1,2,1,4,0,0,4,34,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,512,"                    return chronology.clockhourOfHalfday();
",0,0,0,1,2,1,4,0,0,4,39,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,514,"                    return chronology.clockhourOfDay();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,516,"                    return chronology.hourOfDay();
",0,0,0,1,2,1,4,0,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,518,"                    return chronology.minuteOfDay();
",0,0,0,1,2,1,4,0,0,4,32,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,520,"                    return chronology.minuteOfHour();
",0,0,0,1,2,1,4,0,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,522,"                    return chronology.secondOfDay();
",0,0,0,1,2,1,4,0,0,4,32,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,524,"                    return chronology.secondOfMinute();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,526,"                    return chronology.millisOfDay();
",0,0,0,1,2,1,4,0,0,4,32,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,528,"                    return chronology.millisOfSecond();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,531,"                    throw new InternalError();
",0,0,0,1,2,0,0,2,0,2,26,8,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,541,"            switch (iOrdinal) {
",2,0,0,1,3,0,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,543,"                    return ERA_TYPE;
",2,0,0,0,0,1,0,0,0,2,16,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,545,"                    return YEAR_OF_ERA_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,547,"                    return CENTURY_OF_ERA_TYPE;
",2,0,0,0,0,1,0,0,0,2,27,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,549,"                    return YEAR_OF_CENTURY_TYPE;
",2,0,0,0,0,1,0,0,0,2,28,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,551,"                    return YEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,553,"                    return DAY_OF_YEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,555,"                    return MONTH_OF_YEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,557,"                    return DAY_OF_MONTH_TYPE;
",2,0,0,0,0,1,0,0,0,2,25,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,559,"                    return WEEKYEAR_OF_CENTURY_TYPE;
",2,0,0,0,0,1,0,0,0,2,32,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,561,"                    return WEEKYEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,21,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,563,"                    return WEEK_OF_WEEKYEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,565,"                    return DAY_OF_WEEK_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,567,"                    return HALFDAY_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,27,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,569,"                    return HOUR_OF_HALFDAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,28,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,571,"                    return CLOCKHOUR_OF_HALFDAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,33,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,573,"                    return CLOCKHOUR_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,575,"                    return HOUR_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,577,"                    return MINUTE_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,579,"                    return MINUTE_OF_HOUR_TYPE;
",2,0,0,0,0,1,0,0,0,2,27,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,581,"                    return SECOND_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,583,"                    return SECOND_OF_MINUTE_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,585,"                    return MILLIS_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,587,"                    return MILLIS_OF_SECOND_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,10,590,"                    return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/IllegalInstantException,10,53,"        super(message);
",2,0,0,1,2,0,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/IllegalInstantException,10,54,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalInstantException,10,63,"        super(createMessage(instantLocal, zoneId));
",0,0,0,2,4,0,6,0,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/IllegalInstantException,10,64,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalInstantException,10,67,"        String localDateTime = DateTimeFormat.forPattern(""yyyy-MM-dd'T'HH:mm:ss.SSS"").print(new Instant(instantLocal));
",4,0,0,3,6,0,6,4,0,15,111,4,0.00000,0
defect4j,time,org/joda/time/IllegalInstantException,10,68,"        String zone = (zoneId != null ? "" ("" + zoneId + "")"" : """");
",6,2,0,2,4,0,0,2,0,13,58,4,0.00000,0
defect4j,time,org/joda/time/IllegalInstantException,10,69,"        return ""Illegal instant due to time zone offset transition (daylight savings time 'gap'): "" + localDateTime + zone;
",4,1,0,1,2,1,0,0,0,6,115,4,0.00000,0
defect4j,time,org/joda/time/IllegalInstantException,10,80,"        if (ex instanceof IllegalInstantException) {
",2,0,0,1,3,0,0,2,0,4,44,5,0.00000,0
defect4j,time,org/joda/time/IllegalInstantException,10,81,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/IllegalInstantException,10,83,"        while (ex.getCause() != null && ex.getCause() != ex) {
",2,3,0,3,7,0,8,0,0,13,54,4,0.00000,0
defect4j,time,org/joda/time/IllegalInstantException,10,84,"            return isIllegalInstant(ex.getCause());
",0,0,0,2,4,1,6,0,0,6,39,7,0.00000,0
defect4j,time,org/joda/time/IllegalInstantException,10,86,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,52,"            throw new IllegalArgumentException(""The type must not be null"");
",0,0,0,1,2,0,0,2,0,4,64,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,62,"        return iType.getName();
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,94,"        return getAsText(get(instant), locale);
",0,0,0,2,4,1,8,0,0,8,39,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,106,"        return getAsText(instant, null);
",0,0,0,1,2,1,4,0,0,5,32,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,121,"        return getAsText(fieldValue, locale);
",0,0,0,1,2,1,6,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,136,"        return getAsText(partial, partial.get(getType()), locale);
",0,0,0,3,6,1,12,0,0,12,58,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,153,"        return Integer.toString(fieldValue);
",0,0,0,1,2,1,6,0,0,6,36,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,168,"        return getAsShortText(get(instant), locale);
",0,0,0,2,4,1,8,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,180,"        return getAsShortText(instant, null);
",0,0,0,1,2,1,4,0,0,5,37,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,195,"        return getAsShortText(fieldValue, locale);
",0,0,0,1,2,1,6,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,210,"        return getAsShortText(partial, partial.get(getType()), locale);
",0,0,0,3,6,1,12,0,0,12,63,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,227,"        return getAsText(fieldValue, locale);
",0,0,0,1,2,1,6,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,253,"        return getDurationField().add(instant, value);
",0,0,0,2,4,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,267,"        return getDurationField().add(instant, value);
",0,0,0,2,4,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,298,"        if (valueToAdd == 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,299,"            return values;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,304,"        DateTimeField nextField = null;
",2,0,0,0,0,0,0,2,0,4,31,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,306,"        while (valueToAdd > 0) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,307,"            int max = getMaximumValue(instant, values);
",2,0,0,1,2,0,6,0,0,8,43,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,308,"            long proposed = values[fieldIndex] + valueToAdd;
",4,1,1,1,2,0,0,0,0,9,48,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,309,"            if (proposed <= max) {
",4,1,0,1,3,0,0,0,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,310,"                values[fieldIndex] = (int) proposed;
",2,0,1,2,4,0,0,0,0,7,36,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,311,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,313,"            if (nextField == null) {
",2,1,0,1,3,0,0,0,0,3,24,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,314,"                if (fieldIndex == 0) {
",2,1,0,1,3,0,0,0,0,3,22,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,315,"                    throw new IllegalArgumentException(""Maximum value exceeded for add"");
",0,0,0,1,2,0,0,2,0,3,69,11,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,317,"                nextField = instant.getField(fieldIndex - 1);
",4,1,0,1,2,0,4,0,0,10,45,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,319,"                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {
",0,1,0,5,11,0,10,0,0,11,82,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,320,"                    throw new IllegalArgumentException(""Fields invalid for add"");
",0,0,0,1,2,0,0,2,0,3,61,11,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,323,"            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add
",4,2,1,2,4,0,0,0,0,11,74,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,324,"            values = nextField.add(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field
",4,1,0,1,2,0,8,0,0,14,90,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,325,"            values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero
",0,0,1,2,4,0,6,0,0,11,83,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,326,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,327,"        while (valueToAdd < 0) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,328,"            int min = getMinimumValue(instant, values);
",2,0,0,1,2,0,6,0,0,8,43,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,329,"            long proposed = values[fieldIndex] + valueToAdd;
",4,1,1,1,2,0,0,0,0,9,48,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,330,"            if (proposed >= min) {
",4,1,0,1,3,0,0,0,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,331,"                values[fieldIndex] = (int) proposed;
",2,0,1,2,4,0,0,0,0,7,36,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,332,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,334,"            if (nextField == null) {
",2,1,0,1,3,0,0,0,0,3,24,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,335,"                if (fieldIndex == 0) {
",2,1,0,1,3,0,0,0,0,3,22,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,336,"                    throw new IllegalArgumentException(""Maximum value exceeded for add"");
",0,0,0,1,2,0,0,2,0,3,69,11,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,338,"                nextField = instant.getField(fieldIndex - 1);
",4,1,0,1,2,0,4,0,0,10,45,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,339,"                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {
",0,1,0,5,11,0,10,0,0,11,82,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,340,"                    throw new IllegalArgumentException(""Fields invalid for add"");
",0,0,0,1,2,0,0,2,0,3,61,11,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,343,"            valueToAdd -= (min - 1) - values[fieldIndex];  // reduce the amount to add
",4,2,1,2,4,0,0,0,0,11,74,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,344,"            values = nextField.add(instant, fieldIndex - 1, values, -1);  // subtract 1 from next bigger field
",4,1,0,1,2,0,8,0,0,15,98,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,345,"            values[fieldIndex] = getMaximumValue(instant, values);  // reset this field to max value
",0,0,1,2,4,0,6,0,0,11,88,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,346,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,348,"        return set(instant, fieldIndex, values, values[fieldIndex]);  // adjusts smaller fields
",0,0,1,2,4,1,8,0,0,12,87,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,379,"        if (valueToAdd == 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,380,"            return values;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,385,"        DateTimeField nextField = null;
",2,0,0,0,0,0,0,2,0,4,31,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,387,"        while (valueToAdd > 0) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,388,"            int max = getMaximumValue(instant, values);
",2,0,0,1,2,0,6,0,0,8,43,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,389,"            long proposed = values[fieldIndex] + valueToAdd;
",4,1,1,1,2,0,0,0,0,9,48,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,390,"            if (proposed <= max) {
",4,1,0,1,3,0,0,0,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,391,"                values[fieldIndex] = (int) proposed;
",2,0,1,2,4,0,0,0,0,7,36,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,392,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,394,"            if (nextField == null) {
",2,1,0,1,3,0,0,0,0,3,24,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,395,"                if (fieldIndex == 0) {
",2,1,0,1,3,0,0,0,0,3,22,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,396,"                    valueToAdd -= (max + 1) - values[fieldIndex];
",4,2,1,2,4,0,0,0,0,11,45,10,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,397,"                    values[fieldIndex] = getMinimumValue(instant, values);
",0,0,1,2,4,0,6,0,0,11,54,10,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,398,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,400,"                nextField = instant.getField(fieldIndex - 1);
",4,1,0,1,2,0,4,0,0,10,45,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,402,"                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {
",0,1,0,5,11,0,10,0,0,11,82,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,403,"                    throw new IllegalArgumentException(""Fields invalid for add"");
",0,0,0,1,2,0,0,2,0,3,61,11,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,406,"            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add
",4,2,1,2,4,0,0,0,0,11,74,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,407,"            values = nextField.addWrapPartial(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field
",4,1,0,1,2,0,8,0,0,14,101,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,408,"            values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero
",0,0,1,2,4,0,6,0,0,11,83,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,409,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,410,"        while (valueToAdd < 0) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,411,"            int min = getMinimumValue(instant, values);
",2,0,0,1,2,0,6,0,0,8,43,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,412,"            long proposed = values[fieldIndex] + valueToAdd;
",4,1,1,1,2,0,0,0,0,9,48,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,413,"            if (proposed >= min) {
",4,1,0,1,3,0,0,0,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,414,"                values[fieldIndex] = (int) proposed;
",2,0,1,2,4,0,0,0,0,7,36,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,415,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,417,"            if (nextField == null) {
",2,1,0,1,3,0,0,0,0,3,24,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,418,"                if (fieldIndex == 0) {
",2,1,0,1,3,0,0,0,0,3,22,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,419,"                    valueToAdd -= (min - 1) - values[fieldIndex];
",4,2,1,2,4,0,0,0,0,11,45,10,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,420,"                    values[fieldIndex] = getMaximumValue(instant, values);
",0,0,1,2,4,0,6,0,0,11,54,10,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,421,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,423,"                nextField = instant.getField(fieldIndex - 1);
",4,1,0,1,2,0,4,0,0,10,45,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,424,"                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {
",0,1,0,5,11,0,10,0,0,11,82,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,425,"                    throw new IllegalArgumentException(""Fields invalid for add"");
",0,0,0,1,2,0,0,2,0,3,61,11,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,428,"            valueToAdd -= (min - 1) - values[fieldIndex];  // reduce the amount to add
",4,2,1,2,4,0,0,0,0,11,74,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,429,"            values = nextField.addWrapPartial(instant, fieldIndex - 1, values, -1);  // subtract 1 from next bigger field
",4,1,0,1,2,0,8,0,0,15,109,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,430,"            values[fieldIndex] = getMaximumValue(instant, values);  // reset this field to max value
",0,0,1,2,4,0,6,0,0,11,88,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,431,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,433,"        return set(instant, fieldIndex, values, values[fieldIndex]);  // adjusts smaller fields
",0,0,1,2,4,1,8,0,0,12,87,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,461,"        int current = get(instant);
",2,0,0,1,2,0,4,0,0,6,27,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,462,"        int wrapped = FieldUtils.getWrappedValue
",2,0,0,0,0,0,4,0,0,6,40,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,464,"        return set(instant, wrapped);
",0,0,0,1,2,1,6,0,0,6,29,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,495,"        int current = values[fieldIndex];
",2,0,1,1,2,0,0,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,496,"        int wrapped = FieldUtils.getWrappedValue
",2,0,0,0,0,0,4,0,0,6,40,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,498,"        return set(instant, fieldIndex, values, wrapped);  // adjusts smaller fields
",0,0,0,1,2,1,10,0,0,10,76,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,522,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,75,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,545,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,81,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,585,"        FieldUtils.verifyValueBounds(this, newValue, getMinimumValue(partial, values), getMaximumValue(partial, values));
",0,0,0,3,6,0,18,0,0,18,113,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,586,"        values[fieldIndex] = newValue;
",2,0,1,1,2,0,0,0,0,7,30,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,589,"        for (int i = fieldIndex + 1; i < partial.size(); i++) {
",8,2,0,2,5,0,4,0,0,15,55,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,590,"            DateTimeField field = partial.getField(i);
",2,0,0,1,2,0,6,2,0,10,42,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,591,"            if (values[i] > field.getMaximumValue(partial, values)) {
",0,1,1,3,7,0,8,0,0,13,57,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,592,"                values[i] = field.getMaximumValue(partial, values);
",0,0,1,2,4,0,8,0,0,13,51,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,594,"            if (values[i] < field.getMinimumValue(partial, values)) {
",0,1,1,3,7,0,8,0,0,13,57,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,595,"                values[i] = field.getMinimumValue(partial, values);
",0,0,1,2,4,0,8,0,0,13,51,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,598,"        return values;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,618,"        int value = convertText(text, locale);
",2,0,0,1,2,0,6,0,0,8,38,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,619,"        return set(instant, value);
",0,0,0,1,2,1,6,0,0,6,27,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,635,"        return set(instant, text, null);
",0,0,0,1,2,1,6,0,0,7,32,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,654,"        int value = convertText(text, locale);
",2,0,0,1,2,0,6,0,0,8,38,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,655,"        return set(instant, fieldIndex, values, value);
",0,0,0,1,2,1,10,0,0,10,47,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,668,"            return Integer.parseInt(text);
",0,0,0,1,2,1,6,0,0,6,30,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,669,"        } catch (NumberFormatException ex) {
",2,0,0,1,4,0,0,2,0,4,36,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,670,"            throw new IllegalFieldValueException(getType(), text);
",2,0,0,2,4,0,2,2,0,6,54,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,704,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,716,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,746,"        return getMinimumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,792,"        return getMaximumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,829,"        int max = getMaximumValue();
",2,0,0,1,2,0,2,0,0,4,28,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,830,"        if (max >= 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,831,"            if (max < 10) {
",2,1,0,1,3,0,0,0,0,3,15,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,832,"                return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,833,"            } else if (max < 100) {
",2,1,0,1,4,0,0,0,0,3,23,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,834,"                return 2;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,835,"            } else if (max < 1000) {
",2,1,0,1,4,0,0,0,0,3,24,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,836,"                return 3;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,839,"        return Integer.toString(max).length();
",0,0,0,2,4,1,8,0,0,8,38,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,850,"        return getMaximumTextLength(locale);
",0,0,0,1,2,1,4,0,0,4,36,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,886,"        long newInstant = roundFloor(instant);
",2,0,0,1,2,0,4,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,887,"        if (newInstant != instant) {
",4,1,0,1,3,0,0,0,0,5,28,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,888,"            instant = add(newInstant, 1);
",2,0,0,1,2,0,4,0,0,7,29,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,890,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,903,"        long floor = roundFloor(instant);
",2,0,0,1,2,0,4,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,904,"        long ceiling = roundCeiling(instant);
",2,0,0,1,2,0,4,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,906,"        long diffFromFloor = instant - floor;
",6,1,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,907,"        long diffToCeiling = ceiling - instant;
",6,1,0,0,0,0,0,0,0,7,39,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,909,"        if (diffFromFloor <= diffToCeiling) {
",4,1,0,1,3,0,0,0,0,5,37,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,911,"            return floor;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,913,"            return ceiling;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,927,"        long floor = roundFloor(instant);
",2,0,0,1,2,0,4,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,928,"        long ceiling = roundCeiling(instant);
",2,0,0,1,2,0,4,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,930,"        long diffFromFloor = instant - floor;
",6,1,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,931,"        long diffToCeiling = ceiling - instant;
",6,1,0,0,0,0,0,0,0,7,39,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,933,"        if (diffToCeiling <= diffFromFloor) {
",4,1,0,1,3,0,0,0,0,5,37,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,935,"            return ceiling;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,937,"            return floor;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,955,"        long floor = roundFloor(instant);
",2,0,0,1,2,0,4,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,956,"        long ceiling = roundCeiling(instant);
",2,0,0,1,2,0,4,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,958,"        long diffFromFloor = instant - floor;
",6,1,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,959,"        long diffToCeiling = ceiling - instant;
",6,1,0,0,0,0,0,0,0,7,39,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,961,"        if (diffFromFloor < diffToCeiling) {
",4,1,0,1,3,0,0,0,0,5,36,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,963,"            return floor;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,964,"        } else if (diffToCeiling < diffFromFloor) {
",4,1,0,1,4,0,0,0,0,5,43,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,966,"            return ceiling;
",2,0,0,0,0,1,0,0,0,2,15,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,970,"            if ((get(ceiling) & 1) == 0) {
",0,2,0,3,7,0,4,0,0,6,30,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,971,"                return ceiling;
",2,0,0,0,0,1,0,0,0,2,15,9,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,973,"            return floor;
",2,0,0,0,0,1,0,0,0,2,13,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,994,"        return instant - roundFloor(instant);
",2,1,0,1,2,1,4,0,0,7,37,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,10,1003,"        return ""DateTimeField["" + getName() + ']';
",0,1,0,2,4,1,2,0,0,5,42,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,10,49,"            throw new IllegalArgumentException(""The type must not be null"");
",0,0,0,1,2,0,0,2,0,4,64,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,10,59,"        return iType.getName();
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,10,79,"        return FieldUtils.safeToInt(getValueAsLong(duration));
",0,0,0,2,4,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,10,91,"        return duration / getUnitMillis();
",2,1,0,1,2,1,2,0,0,5,34,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,10,111,"        return FieldUtils.safeToInt(getValueAsLong(duration, instant));
",0,0,0,2,4,1,10,0,0,10,63,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,10,123,"        return value * getUnitMillis();  // safe
",2,1,0,1,2,1,2,0,0,5,40,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,10,135,"        return FieldUtils.safeMultiply(value, getUnitMillis());
",0,0,0,2,4,1,8,0,0,8,55,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,10,146,"        long otherMillis = otherField.getUnitMillis();
",2,0,0,1,2,0,4,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,10,147,"        long thisMillis = getUnitMillis();
",2,0,0,1,2,0,2,0,0,4,34,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,10,149,"        if (thisMillis == otherMillis) {
",4,1,0,1,3,0,0,0,0,5,32,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,10,150,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,10,152,"        if (thisMillis < otherMillis) {
",4,1,0,1,3,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,10,153,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,10,155,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,10,165,"        return ""DurationField["" + getName() + ']';
",0,1,0,2,4,1,2,0,0,5,42,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,10,38,"public abstract class BaseDurationField extends DurationField implements Serializable {
",2,0,0,0,1,2,0,4,0,8,87,1,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,10,55,"            throw new IllegalArgumentException(""The divisor must be at least 2"");
",0,0,0,1,2,0,0,2,0,3,69,7,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,10,60,"            iRangeField = null;
",2,0,0,0,0,0,0,0,0,3,19,6,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,10,100,"        int value = getWrappedField().get(instant);
",2,0,0,2,4,0,6,0,0,8,43,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,10,101,"        if (value >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,10,102,"            return value % iDivisor;
",4,1,0,0,0,1,0,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,10,104,"            return (iDivisor - 1) + ((value + 1) % iDivisor);
",6,4,0,3,6,1,0,0,0,10,49,6,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,10,118,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, 0, iDivisor - 1));
",2,1,0,3,6,1,14,0,0,17,87,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,10,130,"        FieldUtils.verifyValueBounds(this, value, 0, iDivisor - 1);
",2,1,0,1,2,0,6,0,0,9,59,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,10,131,"        int divided = getDivided(getWrappedField().get(instant));
",2,0,0,3,6,0,8,0,0,10,57,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,10,132,"        return getWrappedField().set(instant, divided * iDivisor + value);
",6,2,0,2,4,1,6,0,0,14,66,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,10,162,"        return getWrappedField().roundFloor(instant);
",0,0,0,2,4,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,10,166,"        return getWrappedField().roundCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,10,170,"        return getWrappedField().roundHalfFloor(instant);
",0,0,0,2,4,1,6,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,10,174,"        return getWrappedField().roundHalfCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,10,178,"        return getWrappedField().roundHalfEven(instant);
",0,0,0,2,4,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,10,182,"        return getWrappedField().remainder(instant);
",0,0,0,2,4,1,6,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,10,191,"        return iDivisor;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,10,195,"        if (value >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,10,196,"            return value / iDivisor;
",4,1,0,0,0,1,0,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,10,198,"            return ((value + 1) / iDivisor) - 1;
",4,3,0,2,4,1,0,0,0,7,36,6,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,10,56,"            throw new IllegalArgumentException(""The field must not be null"");
",0,0,0,1,2,0,0,2,0,4,65,6,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,10,59,"            throw new IllegalArgumentException(""The field must be supported"");
",0,0,0,1,2,0,0,2,0,3,66,7,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,10,74,"        return iField.isLenient();
",0,0,0,1,2,1,4,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,10,78,"        return iField.get(instant);
",0,0,0,1,2,1,6,0,0,6,27,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,10,82,"        return iField.set(instant, value);
",0,0,0,1,2,1,8,0,0,8,34,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,10,94,"        return iField.getMinimumValue();
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,10,98,"        return iField.getMaximumValue();
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,10,102,"        return iField.roundFloor(instant);
",0,0,0,1,2,1,6,0,0,6,34,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,10,49,"            throw new IllegalArgumentException(""The scalar must not be 0 or 1"");
",0,0,0,1,2,0,0,2,0,3,68,7,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,10,55,"        return getWrappedField().getValue(duration) / iScalar;
",2,1,0,2,4,1,6,0,0,9,54,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,10,59,"        return getWrappedField().getValueAsLong(duration) / iScalar;
",2,1,0,2,4,1,6,0,0,9,60,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,10,63,"        return getWrappedField().getValue(duration, instant) / iScalar;
",2,1,0,2,4,1,8,0,0,11,63,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,10,67,"        return getWrappedField().getValueAsLong(duration, instant) / iScalar;
",2,1,0,2,4,1,8,0,0,11,69,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,10,71,"        long scaled = ((long) value) * ((long) iScalar);
",6,1,0,4,8,0,0,0,0,7,48,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,10,72,"        return getWrappedField().getMillis(scaled);
",0,0,0,2,4,1,6,0,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,10,76,"        long scaled = FieldUtils.safeMultiply(value, iScalar);
",2,0,0,1,2,0,8,0,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,10,77,"        return getWrappedField().getMillis(scaled);
",0,0,0,2,4,1,6,0,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,10,81,"        long scaled = ((long) value) * ((long) iScalar);
",6,1,0,4,8,0,0,0,0,7,48,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,10,82,"        return getWrappedField().getMillis(scaled, instant);
",0,0,0,2,4,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,10,86,"        long scaled = FieldUtils.safeMultiply(value, iScalar);
",2,0,0,1,2,0,8,0,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,10,87,"        return getWrappedField().getMillis(scaled, instant);
",0,0,0,2,4,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,10,91,"        long scaled = ((long) value) * ((long) iScalar);
",6,1,0,4,8,0,0,0,0,7,48,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,10,92,"        return getWrappedField().add(instant, scaled);
",0,0,0,2,4,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,10,96,"        long scaled = FieldUtils.safeMultiply(value, iScalar);
",2,0,0,1,2,0,8,0,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,10,97,"        return getWrappedField().add(instant, scaled);
",0,0,0,2,4,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,10,101,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iScalar;
",2,1,0,2,4,1,8,0,0,11,84,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,10,105,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iScalar;
",2,1,0,2,4,1,8,0,0,11,90,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,10,119,"        return iScalar;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,10,130,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,10,131,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,10,132,"        } else if (obj instanceof ScaledDurationField) {
",2,0,0,1,4,0,0,2,0,4,48,6,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,10,133,"            ScaledDurationField other = (ScaledDurationField) obj;
",4,0,0,1,2,0,0,4,0,8,54,7,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,10,134,"            return (getWrappedField().equals(other.getWrappedField())) &&
",0,1,0,4,8,1,8,0,0,9,61,7,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,10,138,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,10,54,"            throw new IllegalArgumentException(""The field must not be null"");
",0,0,0,1,2,0,0,2,0,4,65,6,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,10,57,"            throw new IllegalArgumentException(""The field must be supported"");
",0,0,0,1,2,0,0,2,0,3,66,7,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,10,73,"        return iField.isPrecise();
",0,0,0,1,2,1,4,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,10,77,"        return iField.getValueAsLong(duration, instant);
",0,0,0,1,2,1,8,0,0,8,48,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,10,81,"        return iField.getMillis(value, instant);
",0,0,0,1,2,1,8,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,10,85,"        return iField.getMillis(value, instant);
",0,0,0,1,2,1,8,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,10,89,"        return iField.add(instant, value);
",0,0,0,1,2,1,8,0,0,8,34,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,10,93,"        return iField.add(instant, value);
",0,0,0,1,2,1,8,0,0,8,34,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,10,97,"        return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,69,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,10,101,"        return iField.getUnitMillis();
",0,0,0,1,2,1,4,0,0,4,30,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,59,"            throw new IllegalArgumentException(""The divisor must be at least 2"");
",0,0,0,1,2,0,0,2,0,3,69,7,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,64,"            iDurationField = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,90,"        super(remainderField.getWrappedField(), type);
",2,0,0,2,4,0,4,0,0,6,46,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,91,"        int divisor = iDivisor = remainderField.iDivisor;
",8,0,0,0,0,0,0,0,0,9,49,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,92,"        iDurationField = remainderField.iRangeField;
",6,0,0,0,0,0,0,0,0,7,44,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,94,"        DateTimeField field = getWrappedField();
",2,0,0,1,2,0,2,2,0,6,40,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,95,"        int i = field.getMinimumValue();
",2,0,0,1,2,0,4,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,96,"        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);
",12,5,0,3,6,0,0,0,0,17,59,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,98,"        int j = field.getMaximumValue();
",2,0,0,1,2,0,4,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,99,"        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);
",12,5,0,3,6,0,0,0,0,17,59,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,101,"        iMin = min;
",4,0,0,0,0,0,0,0,0,5,11,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,102,"        iMax = max;
",4,0,0,0,0,0,0,0,0,5,11,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,103,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,112,"        int value = getWrappedField().get(instant);
",2,0,0,2,4,0,6,0,0,8,43,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,113,"        if (value >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,114,"            return value / iDivisor;
",4,1,0,0,0,1,0,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,116,"            return ((value + 1) / iDivisor) - 1;
",4,3,0,2,4,1,0,0,0,7,36,6,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,129,"        return getWrappedField().add(instant, amount * iDivisor);
",4,1,0,2,4,1,6,0,0,11,57,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,141,"        return getWrappedField().add(instant, amount * iDivisor);
",4,1,0,2,4,1,6,0,0,11,57,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,153,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));
",0,0,0,3,6,1,18,0,0,18,82,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,157,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iDivisor;
",2,1,0,2,4,1,8,0,0,11,85,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,161,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iDivisor;
",2,1,0,2,4,1,8,0,0,11,91,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,173,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);
",0,0,0,1,2,0,10,0,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,174,"        int remainder = getRemainder(getWrappedField().get(instant));
",2,0,0,3,6,0,8,0,0,10,61,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,175,"        return getWrappedField().set(instant, value * iDivisor + remainder);
",6,2,0,2,4,1,6,0,0,14,68,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,191,"        return iMin;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,200,"        return iMax;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,204,"        DateTimeField field = getWrappedField();
",2,0,0,1,2,0,2,2,0,6,40,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,205,"        return field.roundFloor(field.set(instant, get(instant) * iDivisor));
",2,1,0,3,6,1,14,0,0,17,69,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,209,"        return set(instant, get(getWrappedField().remainder(instant)));
",0,0,0,4,8,1,12,0,0,12,63,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,218,"        return iDivisor;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,222,"        if (value >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,223,"            return value % iDivisor;
",4,1,0,0,0,1,0,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,10,225,"            return (iDivisor - 1) + ((value + 1) % iDivisor);
",6,4,0,3,6,1,0,0,0,10,49,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,10,76,"        return duration / iUnitMillis;  // safe
",4,1,0,0,0,1,0,0,0,5,39,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,10,88,"        return value * iUnitMillis;  // safe
",4,1,0,0,0,1,0,0,0,5,36,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,10,100,"        return FieldUtils.safeMultiply(value, iUnitMillis);
",0,0,0,1,2,1,8,0,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,10,109,"        long addition = FieldUtils.safeMultiply(value, iUnitMillis);
",2,0,0,1,2,0,8,0,0,10,60,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,10,110,"        return FieldUtils.safeAdd(instant, addition);
",0,0,0,1,2,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,10,127,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,10,128,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,10,129,"        } else if (obj instanceof PreciseDurationField) {
",2,0,0,1,4,0,0,2,0,4,49,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,10,130,"            PreciseDurationField other = (PreciseDurationField) obj;
",4,0,0,1,2,0,0,4,0,8,56,7,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,10,131,"            return (getType() == other.getType()) && (iUnitMillis == other.iUnitMillis);
",6,3,0,4,8,1,6,0,0,15,76,7,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,10,133,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,10,53,"        return ""millis"";
",0,0,0,0,0,1,0,0,0,1,16,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,10,85,"        return FieldUtils.safeToInt(duration);
",0,0,0,1,2,1,6,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,10,89,"        return duration;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,10,93,"        return FieldUtils.safeToInt(duration);
",0,0,0,1,2,1,6,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,10,97,"        return duration;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,10,101,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,10,105,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,10,109,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,10,113,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,10,117,"        return FieldUtils.safeAdd(instant, value);
",0,0,0,1,2,1,8,0,0,8,42,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,10,121,"        return FieldUtils.safeAdd(instant, value);
",0,0,0,1,2,1,8,0,0,8,42,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,10,125,"        return FieldUtils.safeToInt(FieldUtils.safeSubtract(minuendInstant, subtrahendInstant));
",0,0,0,2,4,1,12,0,0,12,88,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,10,129,"        return FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,66,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,10,134,"        long otherMillis = otherField.getUnitMillis();
",2,0,0,1,2,0,4,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,10,135,"        long thisMillis = getUnitMillis();
",2,0,0,1,2,0,2,0,0,4,34,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,10,137,"        if (thisMillis == otherMillis) {
",4,1,0,1,3,0,0,0,0,5,32,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,10,138,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,10,140,"        if (thisMillis < otherMillis) {
",4,1,0,1,3,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,10,141,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,6,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,10,143,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,10,148,"        if (obj instanceof MillisDurationField) {
",2,0,0,1,3,0,0,2,0,4,41,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,10,149,"            return getUnitMillis() == ((MillisDurationField) obj).getUnitMillis();
",2,1,0,4,8,1,4,2,0,9,70,6,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,10,151,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,10,164,"        return ""DurationField[millis]"";
",0,0,0,1,2,1,0,0,0,1,31,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,10,171,"        return INSTANCE;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,10,32,"public final class MillisDurationField extends DurationField implements Serializable {
",2,0,0,0,1,2,0,4,0,8,86,1,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,10,60,"            throw new IllegalArgumentException(""Range duration field must be precise"");
",0,0,0,1,2,0,0,2,0,3,75,7,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,10,66,"            throw new IllegalArgumentException(""The effective range must be at least 2"");
",0,0,0,1,2,0,0,2,0,3,77,7,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,10,79,"        if (instant >= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,10,80,"            return (int) ((instant / getUnitMillis()) % iRange);
",4,2,0,4,8,1,2,0,0,8,52,8,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,10,82,"            return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);
",6,5,0,5,10,1,2,0,0,13,71,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,10,95,"        int thisValue = get(instant);
",2,0,0,1,2,0,4,0,0,6,29,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,10,96,"        int wrappedValue = FieldUtils.getWrappedValue
",2,0,0,0,0,0,4,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,10,99,"        return instant + (wrappedValue - thisValue) * getUnitMillis();
",6,3,0,2,4,1,2,0,0,11,62,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,10,111,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());
",0,0,0,3,6,0,10,0,0,10,80,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,10,112,"        return instant + (value - get(instant)) * iUnitMillis;
",6,3,0,2,4,1,4,0,0,13,54,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,10,131,"        return iRange - 1;
",2,1,0,0,0,1,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,10,143,"        return iRange;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,10,51,"            throw new IllegalArgumentException(""Unit duration field must be precise"");
",0,0,0,1,2,0,0,2,0,3,74,7,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,10,56,"            throw new IllegalArgumentException(""The unit milliseconds must be at least 1"");
",0,0,0,1,2,0,0,2,0,3,79,7,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,10,66,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,10,92,"        if (instant >= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,10,93,"            return instant - instant % iUnitMillis;
",6,2,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,10,95,"            instant += 1;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,10,96,"            return instant - instant % iUnitMillis - iUnitMillis;
",8,3,0,0,0,1,0,0,0,11,53,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,10,109,"        if (instant > 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,10,110,"            instant -= 1;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,10,111,"            return instant - instant % iUnitMillis + iUnitMillis;
",8,3,0,0,0,1,0,0,0,11,53,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,10,113,"            return instant - instant % iUnitMillis;
",6,2,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,10,126,"        if (instant >= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,10,127,"            return instant % iUnitMillis;
",4,1,0,0,0,1,0,0,0,5,29,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,10,129,"            return (instant + 1) % iUnitMillis + iUnitMillis - 1;
",6,4,0,1,2,1,0,0,0,10,53,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,10,163,"        return getMaximumValue(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,36,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,37,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,49,"        if (value == Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,50,"            throw new ArithmeticException(""Integer.MIN_VALUE cannot be negated"");
",0,0,0,1,2,0,0,2,0,3,69,7,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,52,"        return -value;
",2,0,0,0,0,1,0,0,0,3,14,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,64,"        int sum = val1 + val2;
",6,1,0,0,0,0,0,0,0,7,22,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,66,"        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {
",8,5,0,3,7,0,0,0,0,13,45,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,67,"            throw new ArithmeticException
",0,0,0,0,0,0,0,2,0,2,29,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,70,"        return sum;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,85,"            throw new ArithmeticException
",0,0,0,0,0,0,0,2,0,2,29,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,103,"            throw new ArithmeticException
",0,0,0,0,0,0,0,2,0,2,29,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,119,"        long total = (long) val1 * (long) val2;
",6,1,0,2,4,0,0,0,0,7,39,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,120,"        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {
",12,3,0,1,3,0,0,0,0,15,61,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,121,"          throw new ArithmeticException(""Multiplication overflows an int: "" + val1 + "" * "" + val2);
",4,1,0,1,2,0,0,2,0,9,89,7,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,123,"        return (int) total;
",2,0,0,1,2,1,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,136,"        switch (val2) {
",2,0,0,1,3,0,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,138,"                if (val1 == Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,139,"                    throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);
",4,1,0,1,2,0,0,2,0,9,89,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,141,"                return -val1;
",2,0,0,0,0,1,0,0,0,3,13,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,143,"                return 0L;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,145,"                return val1;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,147,"        long total = val1 * val2;
",6,1,0,0,0,0,0,0,0,7,25,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,148,"        if (total / val2 != val1) {
",6,2,0,1,3,0,0,0,0,8,27,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,149,"          throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);
",4,1,0,1,2,0,0,2,0,9,89,7,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,151,"        return total;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,163,"        if (val2 == 1) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,164,"            return val1;
",2,0,0,0,0,1,0,0,0,2,12,6,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,166,"        if (val1 == 1) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,167,"            return val2;
",2,0,0,0,0,1,0,0,0,2,12,6,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,169,"        if (val1 == 0 || val2 == 0) {
",4,3,0,1,3,0,0,0,0,7,29,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,170,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,172,"        long total = val1 * val2;
",6,1,0,0,0,0,0,0,0,7,25,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,173,"        if (total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1 || val2 == Long.MIN_VALUE && val1 == -1) {
",22,10,0,1,3,0,0,0,0,34,107,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,174,"            throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);
",4,1,0,1,2,0,0,2,0,9,89,7,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,176,"        return total;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,190,"        throw new ArithmeticException(""Value cannot fit in an int: "" + value);
",2,1,0,1,2,0,0,2,0,6,70,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,202,"        long val = FieldUtils.safeMultiply(val1, val2);
",2,0,0,1,2,0,8,0,0,10,47,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,203,"        return FieldUtils.safeToInt(val);
",0,0,0,1,2,1,6,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,218,"            throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,235,"        if ((value < lowerBound) || (value > upperBound)) {
",8,3,0,3,7,0,0,0,0,11,51,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,236,"            throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,240,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,252,"        if ((value < lowerBound) || (value > upperBound)) {
",8,3,0,3,7,0,0,0,0,11,51,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,253,"            throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,257,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,276,"        return getWrappedValue(currentValue + wrapValue, minValue, maxValue);
",4,1,0,1,2,1,6,0,0,11,69,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,292,"        if (minValue >= maxValue) {
",4,1,0,1,3,0,0,0,0,5,27,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,293,"            throw new IllegalArgumentException(""MIN > MAX"");
",0,0,0,1,2,0,0,2,0,3,48,7,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,296,"        int wrapRange = maxValue - minValue + 1;
",6,2,0,0,0,0,0,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,297,"        value -= minValue;
",4,0,0,0,0,0,0,0,0,5,18,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,299,"        if (value >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,300,"            return (value % wrapRange) + minValue;
",6,2,0,1,2,1,0,0,0,8,38,6,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,303,"        int remByRange = (-value) % wrapRange;
",6,1,0,1,2,0,0,0,0,8,38,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,305,"        if (remByRange == 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,306,"            return 0 + minValue;
",2,1,0,0,0,1,0,0,0,3,20,6,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,308,"        return (wrapRange - remByRange) + minValue;
",6,2,0,1,2,1,0,0,0,8,43,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,321,"        if (object1 == object2) {
",4,1,0,1,3,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,322,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,324,"        if (object1 == null || object2 == null) {
",4,3,0,1,3,0,0,0,0,7,41,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,325,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,10,327,"        return object1.equals(object2);
",0,0,0,1,2,1,6,0,0,6,31,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,10,47,"            throw new IllegalArgumentException(""Wrapped field's minumum value must be zero"");
",0,0,0,1,2,0,0,2,0,3,81,7,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,10,52,"        int value = getWrappedField().get(instant);
",2,0,0,2,4,0,6,0,0,8,43,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,10,53,"        if (value == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,10,54,"            value = getMaximumValue();
",2,0,0,1,2,0,2,0,0,5,26,6,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,10,56,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,10,60,"        return getWrappedField().add(instant, value);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,10,64,"        return getWrappedField().add(instant, value);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,10,68,"        return getWrappedField().addWrapField(instant, value);
",0,0,0,2,4,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,10,72,"        return getWrappedField().addWrapField(instant, fieldIndex, values, valueToAdd);
",0,0,0,2,4,1,12,0,0,12,79,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,10,76,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,74,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,10,80,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,80,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,10,84,"        int max = getMaximumValue();
",2,0,0,1,2,0,2,0,0,4,28,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,10,85,"        FieldUtils.verifyValueBounds(this, value, 1, max);
",0,0,0,1,2,0,8,0,0,8,50,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,10,86,"        if (value == max) {
",4,1,0,1,3,0,0,0,0,5,19,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,10,87,"            value = 0;
",2,0,0,0,0,0,0,0,0,3,10,6,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,10,89,"        return getWrappedField().set(instant, value);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,10,93,"        return getWrappedField().isLeap(instant);
",0,0,0,2,4,1,6,0,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,10,97,"        return getWrappedField().getLeapAmount(instant);
",0,0,0,2,4,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,10,110,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,10,119,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,10,128,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,10,137,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,10,147,"        return getWrappedField().getMaximumValue() + 1;
",0,1,0,2,4,1,4,0,0,5,47,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,10,157,"        return getWrappedField().getMaximumValue(instant) + 1;
",0,1,0,2,4,1,6,0,0,7,54,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,10,167,"        return getWrappedField().getMaximumValue(instant) + 1;
",0,1,0,2,4,1,6,0,0,7,54,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,10,177,"        return getWrappedField().getMaximumValue(instant, values) + 1;
",0,1,0,2,4,1,8,0,0,9,62,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,10,181,"        return getWrappedField().roundFloor(instant);
",0,0,0,2,4,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,10,185,"        return getWrappedField().roundCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,10,189,"        return getWrappedField().roundHalfFloor(instant);
",0,0,0,2,4,1,6,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,10,193,"        return getWrappedField().roundHalfCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,10,197,"        return getWrappedField().roundHalfEven(instant);
",0,0,0,2,4,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,10,201,"        return getWrappedField().remainder(instant);
",0,0,0,2,4,1,6,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,10,118,"        if (minuendInstant < subtrahendInstant) {
",4,1,0,1,3,0,0,0,0,5,41,4,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,10,119,"            return -getDifferenceAsLong(subtrahendInstant, minuendInstant);
",0,0,0,1,2,1,6,0,0,7,63,6,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,10,122,"        long difference = (minuendInstant - subtrahendInstant) / iUnitMillis;
",8,2,0,1,2,0,0,0,0,10,69,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,10,123,"        if (add(subtrahendInstant, difference) < minuendInstant) {
",2,1,0,2,5,0,6,0,0,9,58,4,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,10,125,"                difference++;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,10,126,"            } while (add(subtrahendInstant, difference) <= minuendInstant);
",2,1,0,2,5,0,6,0,0,9,63,6,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,10,127,"            difference--;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,10,128,"        } else if (add(subtrahendInstant, difference) > minuendInstant) {
",2,1,0,2,6,0,6,0,0,9,65,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,10,130,"                difference--;
",2,0,0,0,0,0,0,0,0,3,13,9,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,10,131,"            } while (add(subtrahendInstant, difference) > minuendInstant);
",2,1,0,2,5,0,6,0,0,9,62,7,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,10,133,"        return difference;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,10,145,"        return iUnitMillis;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,10,156,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,10,164,"            return ImpreciseDateTimeField.this
",2,0,0,0,0,1,0,0,0,2,34,7,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,10,169,"            return ImpreciseDateTimeField.this
",2,0,0,0,0,1,0,0,0,2,34,7,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,10,174,"            return ImpreciseDateTimeField.this.add(instant, value) - instant;
",4,1,0,1,2,1,6,0,0,11,65,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,10,178,"            return ImpreciseDateTimeField.this.add(instant, value) - instant;
",4,1,0,1,2,1,6,0,0,11,65,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,10,186,"            return ImpreciseDateTimeField.this.add(instant, value);
",2,0,0,1,2,1,6,0,0,8,55,6,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,10,195,"            return ImpreciseDateTimeField.this
",2,0,0,0,0,1,0,0,0,2,34,7,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,10,76,"            throw new IllegalArgumentException(""The offset cannot be zero"");
",0,0,0,1,2,0,0,2,0,3,64,7,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,10,84,"            iMin = minValue;
",4,0,0,0,0,0,0,0,0,5,16,6,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,10,89,"            iMax = maxValue;
",4,0,0,0,0,0,0,0,0,5,16,6,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,10,100,"        return super.get(instant) + iOffset;
",6,1,0,1,2,1,0,0,0,7,36,4,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,10,112,"        instant = super.add(instant, amount);
",8,0,0,1,2,0,0,0,0,9,37,4,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,10,113,"        FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);
",0,0,0,2,4,0,12,0,0,12,61,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,10,114,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,10,126,"        instant = super.add(instant, amount);
",8,0,0,1,2,0,0,0,0,9,37,4,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,10,127,"        FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);
",0,0,0,2,4,0,12,0,0,12,61,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,10,128,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,10,140,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));
",0,0,0,3,6,1,18,0,0,18,82,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,10,152,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);
",0,0,0,1,2,0,10,0,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,10,153,"        return super.set(instant, value - iOffset);
",8,1,0,1,2,1,0,0,0,9,43,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,10,157,"        return getWrappedField().isLeap(instant);
",0,0,0,2,4,1,6,0,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,10,161,"        return getWrappedField().getLeapAmount(instant);
",0,0,0,2,4,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,10,165,"        return getWrappedField().getLeapDurationField();
",0,0,0,2,4,1,4,0,0,4,48,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,10,187,"        return getWrappedField().roundFloor(instant);
",0,0,0,2,4,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,10,191,"        return getWrappedField().roundCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,10,195,"        return getWrappedField().roundHalfFloor(instant);
",0,0,0,2,4,1,6,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,10,199,"        return getWrappedField().roundHalfCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,10,203,"        return getWrappedField().roundHalfEven(instant);
",0,0,0,2,4,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,10,207,"        return getWrappedField().remainder(instant);
",0,0,0,2,4,1,6,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,10,216,"        return iOffset;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/Days,10,82,"                return ZERO;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/Days,10,84,"                return ONE;
",2,0,0,0,0,1,0,0,0,2,11,5,0.00000,0
defect4j,time,org/joda/time/Days,10,86,"                return TWO;
",2,0,0,0,0,1,0,0,0,2,11,5,0.00000,0
defect4j,time,org/joda/time/Days,10,88,"                return THREE;
",2,0,0,0,0,1,0,0,0,2,13,5,0.00000,0
defect4j,time,org/joda/time/Days,10,90,"                return FOUR;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/Days,10,92,"                return FIVE;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/Days,10,94,"                return SIX;
",2,0,0,0,0,1,0,0,0,2,11,5,0.00000,0
defect4j,time,org/joda/time/Days,10,96,"                return SEVEN;
",2,0,0,0,0,1,0,0,0,2,13,5,0.00000,0
defect4j,time,org/joda/time/Days,10,98,"                return MAX_VALUE;
",2,0,0,0,0,1,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/Days,10,100,"                return MIN_VALUE;
",2,0,0,0,0,1,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/Days,10,118,"        int amount = BaseSingleFieldPeriod.between(start, end, DurationFieldType.days());
",2,0,0,2,4,0,12,0,0,14,81,5,0.00000,0
defect4j,time,org/joda/time/Days,10,119,"        return Days.days(amount);
",0,0,0,1,2,1,6,0,0,6,25,5,0.00000,0
defect4j,time,org/joda/time/Days,10,136,"            Chronology chrono = DateTimeUtils.getChronology(start.getChronology());
",2,0,0,2,4,0,8,2,0,12,71,6,0.00000,0
defect4j,time,org/joda/time/Days,10,137,"            int days = chrono.days().getDifference(
",2,0,0,1,3,0,6,0,0,8,39,7,0.00000,0
defect4j,time,org/joda/time/Days,10,139,"            return Days.days(days);
",0,0,0,1,2,1,6,0,0,6,23,7,0.00000,0
defect4j,time,org/joda/time/Days,10,155,"        if (interval == null)   {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,time,org/joda/time/Days,10,156,"            return Days.ZERO;
",4,0,0,0,0,1,0,0,0,4,17,7,0.00000,0
defect4j,time,org/joda/time/Days,10,158,"        int amount = BaseSingleFieldPeriod.between(interval.getStart(), interval.getEnd(), DurationFieldType.days());
",2,0,0,4,8,0,16,0,0,18,109,5,0.00000,0
defect4j,time,org/joda/time/Days,10,159,"        return Days.days(amount);
",0,0,0,1,2,1,6,0,0,6,25,5,0.00000,0
defect4j,time,org/joda/time/Days,10,183,"        int amount = BaseSingleFieldPeriod.standardPeriodIn(period, DateTimeConstants.MILLIS_PER_DAY);
",6,0,0,1,2,0,6,0,0,12,94,5,0.00000,0
defect4j,time,org/joda/time/Days,10,184,"        return Days.days(amount);
",0,0,0,1,2,1,6,0,0,6,25,5,0.00000,0
defect4j,time,org/joda/time/Days,10,200,"        if (periodStr == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/Days,10,201,"            return Days.ZERO;
",4,0,0,0,0,1,0,0,0,4,17,7,0.00000,0
defect4j,time,org/joda/time/Days,10,203,"        Period p = PARSER.parsePeriod(periodStr);
",2,0,0,1,2,0,6,2,0,10,41,4,0.00000,0
defect4j,time,org/joda/time/Days,10,204,"        return Days.days(p.getDays());
",0,0,0,2,4,1,8,0,0,8,30,5,0.00000,0
defect4j,time,org/joda/time/Days,10,225,"        return Days.days(getValue());
",0,0,0,2,4,1,6,0,0,6,29,5,0.00000,0
defect4j,time,org/joda/time/Days,10,244,"        return PeriodType.days();
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/Days,10,261,"        return Weeks.weeks(getValue() / DateTimeConstants.DAYS_PER_WEEK);
",4,1,0,2,4,1,6,0,0,11,65,5,0.00000,0
defect4j,time,org/joda/time/Days,10,278,"        return Hours.hours(FieldUtils.safeMultiply(getValue(), DateTimeConstants.HOURS_PER_DAY));
",4,0,0,3,6,1,10,0,0,14,89,5,0.00000,0
defect4j,time,org/joda/time/Days,10,296,"        return Minutes.minutes(FieldUtils.safeMultiply(getValue(), DateTimeConstants.MINUTES_PER_DAY));
",4,0,0,3,6,1,10,0,0,14,95,5,0.00000,0
defect4j,time,org/joda/time/Days,10,314,"        return Seconds.seconds(FieldUtils.safeMultiply(getValue(), DateTimeConstants.SECONDS_PER_DAY));
",4,0,0,3,6,1,10,0,0,14,95,5,0.00000,0
defect4j,time,org/joda/time/Days,10,332,"        long days = getValue();  // assign to a long
",2,0,0,1,2,0,2,0,0,4,44,5,0.00000,0
defect4j,time,org/joda/time/Days,10,333,"        return new Duration(days * DateTimeConstants.MILLIS_PER_DAY);
",6,1,0,1,2,1,0,2,0,9,61,5,0.00000,0
defect4j,time,org/joda/time/Days,10,357,"        if (days == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/Days,10,358,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/Days,10,360,"        return Days.days(FieldUtils.safeAdd(getValue(), days));
",0,0,0,3,6,1,12,0,0,12,55,5,0.00000,0
defect4j,time,org/joda/time/Days,10,373,"        if (days == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/Days,10,374,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/Days,10,376,"        return plus(days.getValue());
",0,0,0,2,4,1,6,0,0,6,29,5,0.00000,0
defect4j,time,org/joda/time/Days,10,390,"        return plus(FieldUtils.safeNegate(days));
",0,0,0,2,4,1,8,0,0,8,41,5,0.00000,0
defect4j,time,org/joda/time/Days,10,403,"        if (days == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/Days,10,404,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/Days,10,406,"        return minus(days.getValue());
",0,0,0,2,4,1,6,0,0,6,30,5,0.00000,0
defect4j,time,org/joda/time/Days,10,420,"        return Days.days(FieldUtils.safeMultiply(getValue(), scalar));
",0,0,0,3,6,1,12,0,0,12,62,5,0.00000,0
defect4j,time,org/joda/time/Days,10,434,"        if (divisor == 1) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/Days,10,435,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/Days,10,437,"        return Days.days(getValue() / divisor);
",2,1,0,2,4,1,6,0,0,9,39,5,0.00000,0
defect4j,time,org/joda/time/Days,10,448,"        return Days.days(FieldUtils.safeNegate(getValue()));
",0,0,0,3,6,1,10,0,0,10,52,5,0.00000,0
defect4j,time,org/joda/time/Days,10,459,"        if (other == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/Days,10,460,"            return getValue() > 0;
",0,1,0,1,2,1,2,0,0,3,22,6,0.00000,0
defect4j,time,org/joda/time/Days,10,462,"        return getValue() > other.getValue();
",0,1,0,2,4,1,6,0,0,7,37,4,0.00000,0
defect4j,time,org/joda/time/Days,10,472,"        if (other == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/Days,10,473,"            return getValue() < 0;
",0,1,0,1,2,1,2,0,0,3,22,6,0.00000,0
defect4j,time,org/joda/time/Days,10,475,"        return getValue() < other.getValue();
",0,1,0,2,4,1,6,0,0,7,37,4,0.00000,0
defect4j,time,org/joda/time/Days,10,488,"        return ""P"" + String.valueOf(getValue()) + ""D"";
",0,1,0,2,4,1,6,0,0,9,46,4,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,10,266,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,10,267,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,10,269,"            if (obj instanceof StandardDurationFieldType) {
",2,0,0,1,3,0,0,2,0,4,47,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,10,270,"                return iOrdinal == ((StandardDurationFieldType) obj).iOrdinal;
",6,1,0,2,4,1,0,2,0,9,62,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,10,272,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,10,286,"                    return chronology.eras();
",0,0,0,1,2,1,4,0,0,4,25,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,10,288,"                    return chronology.centuries();
",0,0,0,1,2,1,4,0,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,10,290,"                    return chronology.weekyears();
",0,0,0,1,2,1,4,0,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,10,292,"                    return chronology.years();
",0,0,0,1,2,1,4,0,0,4,26,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,10,296,"                    return chronology.weeks();
",0,0,0,1,2,1,4,0,0,4,26,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,10,300,"                    return chronology.halfdays();
",0,0,0,1,2,1,4,0,0,4,29,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,10,302,"                    return chronology.hours();
",0,0,0,1,2,1,4,0,0,4,26,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,10,304,"                    return chronology.minutes();
",0,0,0,1,2,1,4,0,0,4,28,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,10,306,"                    return chronology.seconds();
",0,0,0,1,2,1,4,0,0,4,28,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,10,308,"                    return chronology.millis();
",0,0,0,1,2,1,4,0,0,4,27,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,10,311,"                    throw new InternalError();
",0,0,0,1,2,0,0,2,0,2,26,8,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,10,321,"            switch (iOrdinal) {
",2,0,0,1,3,0,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,10,323,"                    return ERAS_TYPE;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,10,325,"                    return CENTURIES_TYPE;
",2,0,0,0,0,1,0,0,0,2,22,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,10,327,"                    return WEEKYEARS_TYPE;
",2,0,0,0,0,1,0,0,0,2,22,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,10,329,"                    return YEARS_TYPE;
",2,0,0,0,0,1,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,10,331,"                    return MONTHS_TYPE;
",2,0,0,0,0,1,0,0,0,2,19,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,10,333,"                    return WEEKS_TYPE;
",2,0,0,0,0,1,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,10,335,"                    return DAYS_TYPE;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,10,337,"                    return HALFDAYS_TYPE;
",2,0,0,0,0,1,0,0,0,2,21,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,10,339,"                    return HOURS_TYPE;
",2,0,0,0,0,1,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,10,341,"                    return MINUTES_TYPE;
",2,0,0,0,0,1,0,0,0,2,20,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,10,343,"                    return SECONDS_TYPE;
",2,0,0,0,0,1,0,0,0,2,20,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,10,345,"                    return MILLIS_TYPE;
",2,0,0,0,0,1,0,0,0,2,19,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,10,348,"                    return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,530,"            return System.currentTimeMillis();
",0,0,0,1,2,1,4,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,545,"        FixedMillisProvider(long fixedMillis) {
",4,0,0,1,3,0,0,0,0,4,39,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,546,"            iMillis = fixedMillis;
",4,0,0,0,0,0,0,0,0,5,22,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,547,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,10,554,"            return iMillis;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,10,51,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,10,60,"        if (iChronology.getYear(instant) <= 0) {
",0,1,0,2,5,0,6,0,0,7,40,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,10,61,"            return DateTimeConstants.BCE;
",4,0,0,0,0,1,0,0,0,4,29,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,10,63,"            return DateTimeConstants.CE;
",4,0,0,0,0,1,0,0,0,4,28,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,10,68,"        return GJLocaleSymbols.forLocale(locale).eraValueToText(fieldValue);
",0,0,0,2,4,1,10,0,0,10,68,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,10,80,"        FieldUtils.verifyValueBounds(this, era, DateTimeConstants.BCE, DateTimeConstants.CE);
",8,0,0,1,2,0,6,0,0,14,85,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,10,82,"        int oldEra = get(instant);
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,10,83,"        if (oldEra != era) {
",4,1,0,1,3,0,0,0,0,5,20,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,10,84,"            int year = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,40,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,10,85,"            return iChronology.setYear(instant, -year);
",2,0,0,1,2,1,6,0,0,9,43,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,10,87,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,10,92,"        return set(instant, GJLocaleSymbols.forLocale(locale).eraTextToValue(text));
",0,0,0,3,6,1,14,0,0,14,76,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,10,96,"        if (get(instant) == DateTimeConstants.CE) {
",4,1,0,2,5,0,4,0,0,9,43,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,10,97,"            return iChronology.setYear(0, 1);
",0,0,0,1,2,1,4,0,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,10,99,"            return Long.MIN_VALUE;
",4,0,0,0,0,1,0,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,10,104,"        if (get(instant) == DateTimeConstants.BCE) {
",4,1,0,2,5,0,4,0,0,9,44,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,10,105,"            return iChronology.setYear(0, 1);
",0,0,0,1,2,1,4,0,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,10,107,"            return Long.MAX_VALUE;
",4,0,0,0,0,1,0,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,10,113,"        return roundFloor(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,10,118,"        return roundFloor(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,10,123,"        return roundFloor(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,10,135,"        return DateTimeConstants.BCE;
",4,0,0,0,0,1,0,0,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,10,139,"        return DateTimeConstants.CE;
",4,0,0,0,0,1,0,0,0,4,28,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,10,143,"        return GJLocaleSymbols.forLocale(locale).getEraMaxTextLength();
",0,0,0,2,4,1,8,0,0,8,63,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,10,150,"        return iChronology.era();
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,134,"            throw new IllegalArgumentException
",0,0,0,0,0,0,0,2,0,2,34,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,144,"            return base.getZone();
",0,0,0,1,2,1,4,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,153,"        if ((base = getBase()) != null) {
",2,1,0,3,7,0,2,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,154,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);
",0,0,0,1,2,1,12,0,0,12,74,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,157,"        FieldUtils.verifyValueBounds
",0,0,0,0,0,0,4,0,0,4,28,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,159,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;
",2,1,0,1,2,1,8,0,0,11,74,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,167,"        if ((base = getBase()) != null) {
",2,1,0,3,7,0,2,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,168,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,
",0,0,0,0,1,1,10,0,0,10,60,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,172,"        FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);
",0,0,0,2,4,0,10,0,0,10,78,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,173,"        FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);
",0,0,0,2,4,0,10,0,0,10,84,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,174,"        FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);
",0,0,0,2,4,0,10,0,0,10,88,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,175,"        FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);
",0,0,0,2,4,0,10,0,0,10,89,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,177,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth)
",0,0,0,1,2,1,8,0,0,8,59,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,185,"        return iMinDaysInFirstWeek;
",2,0,0,0,0,1,0,0,0,2,27,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,196,"        return super.equals(obj);
",4,0,0,1,2,1,0,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,206,"        return getClass().getName().hashCode() * 11 + getZone().hashCode() + getMinimumDaysInFirstWeek();
",0,3,0,6,12,1,12,0,0,15,97,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,217,"        StringBuilder sb = new StringBuilder(60);
",2,0,0,1,2,0,0,4,0,6,41,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,218,"        String name = getClass().getName();
",2,0,0,2,4,0,4,2,0,8,35,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,219,"        int index = name.lastIndexOf('.');
",2,0,0,1,2,0,4,0,0,7,34,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,220,"        if (index >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,221,"            name = name.substring(index + 1);
",4,1,0,1,2,0,4,0,0,10,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,223,"        sb.append(name);
",0,0,0,1,2,0,6,0,0,6,16,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,224,"        sb.append('[');
",0,0,0,1,3,0,4,0,0,5,15,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,225,"        DateTimeZone zone = getZone();
",2,0,0,1,2,0,2,2,0,6,30,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,226,"        if (zone != null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,227,"            sb.append(zone.getID());
",0,0,0,2,4,0,8,0,0,8,24,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,229,"        if (getMinimumDaysInFirstWeek() != 4) {
",0,1,0,2,5,0,2,0,0,3,39,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,230,"            sb.append("",mdfw="");
",0,0,0,1,2,0,4,0,0,5,20,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,231,"            sb.append(getMinimumDaysInFirstWeek());
",0,0,0,2,4,0,6,0,0,6,39,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,233,"        sb.append(']');
",0,0,0,1,3,0,4,0,0,5,15,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,234,"        return sb.toString();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,307,"        return 366;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,317,"        return isLeapYear(year) ? 366 : 365;
",0,0,0,1,2,1,4,0,0,4,36,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,327,"        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,328,"        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);
",4,1,0,1,2,0,2,0,0,7,59,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,329,"        return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);
",8,2,0,3,6,1,0,0,0,10,89,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,339,"        long jan1millis = getYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,340,"        int jan1dayOfWeek = getDayOfWeek(jan1millis);
",2,0,0,1,2,0,4,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,342,"        if (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {
",4,2,0,2,5,0,0,0,0,6,48,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,344,"            return jan1millis + (8 - jan1dayOfWeek)
",4,2,0,1,2,1,0,0,0,6,39,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,348,"            return jan1millis - (jan1dayOfWeek - 1)
",4,2,0,1,2,1,0,0,0,6,39,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,402,"            i2 = i2 - unitMillis + 1;
",6,2,0,0,0,0,0,0,0,9,25,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,410,"            year--;
",2,0,0,0,0,0,0,0,0,3,7,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,414,"            if (isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,4,23,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,415,"                oneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;
",6,1,0,0,0,0,0,0,0,8,50,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,417,"                oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;
",6,1,0,0,0,0,0,0,0,8,50,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,420,"            yearStart += oneYear;
",4,0,0,0,0,0,0,0,0,5,21,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,422,"            if (yearStart <= instant) {
",4,1,0,1,3,0,0,0,0,5,27,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,424,"                year++;
",2,0,0,0,0,0,0,0,0,3,7,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,435,"        return getMonthOfYear(millis, getYear(millis));
",0,0,0,2,4,1,8,0,0,8,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,477,"        return getDayOfYear(instant, getYear(instant));
",0,0,0,2,4,1,8,0,0,8,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,485,"        long yearStart = getYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,486,"        return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;
",8,3,0,3,6,1,0,0,0,11,76,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,493,"        int year = getYear(instant);
",2,0,0,1,2,0,4,0,0,6,28,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,494,"        int week = getWeekOfWeekyear(instant, year);
",2,0,0,1,2,0,6,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,495,"        if (week == 1) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,496,"            return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);
",6,1,0,1,2,1,2,0,0,9,60,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,497,"        } else if (week > 51) {
",2,1,0,1,4,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,498,"            return getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));
",6,2,0,2,4,1,2,0,0,10,66,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,500,"            return year;
",2,0,0,0,0,1,0,0,0,2,12,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,508,"        return getWeekOfWeekyear(instant, getYear(instant));
",0,0,0,2,4,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,516,"        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,517,"        if (instant < firstWeekMillis1) {
",4,1,0,1,3,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,518,"            return getWeeksInYear(year - 1);
",2,1,0,1,2,1,2,0,0,5,32,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,520,"        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);
",4,1,0,1,2,0,2,0,0,7,59,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,521,"        if (instant >= firstWeekMillis2) {
",4,1,0,1,3,0,0,0,0,5,34,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,522,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,524,"        return (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;
",8,3,0,3,6,1,0,0,0,11,84,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,534,"        if (instant >= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,535,"            daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;
",8,1,0,0,0,0,0,0,0,10,63,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,537,"            daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1))
",8,2,0,2,4,0,0,0,0,11,70,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,539,"            if (daysSince19700101 < -3) {
",2,1,0,1,3,0,0,0,0,4,29,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,540,"                return 7 + (int) ((daysSince19700101 + 4) % 7);
",2,3,0,3,6,1,0,0,0,5,47,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,544,"        return 1 + (int) ((daysSince19700101 + 3) % 7);
",2,3,0,3,6,1,0,0,0,5,47,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,554,"            return (DateTimeConstants.MILLIS_PER_DAY - 1)
",4,1,0,1,2,1,0,0,0,5,45,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,590,"        return getDaysInMonthMax(instant);
",0,0,0,1,2,1,4,0,0,4,34,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,603,"        FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());
",0,0,0,4,8,0,14,0,0,14,89,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,604,"        FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));
",0,0,0,3,6,0,14,0,0,14,97,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,605,"        FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));
",0,0,0,3,6,0,16,0,0,16,115,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,606,"        return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);
",0,0,0,1,2,1,8,0,0,8,60,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,682,"        return getMaxMonth();
",0,0,0,1,2,1,2,0,0,2,21,5,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,90,"        return getInstance(DateTimeZone.getDefault(), 4);
",0,0,0,2,4,1,6,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,112,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,123,"            } catch (ArrayIndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,44,8,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,124,"                throw new IllegalArgumentException
",0,0,0,0,0,0,0,2,0,2,34,11,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,131,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);
",6,0,0,1,2,0,4,0,0,11,59,10,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,132,"                    chrono = new GregorianChronology
",2,0,0,0,0,0,0,2,0,5,32,10,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,155,"        Chronology base = getBase();
",2,0,0,1,2,0,2,2,0,6,28,4,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,156,"        int minDays = getMinimumDaysInFirstWeek();
",2,0,0,1,2,0,2,0,0,4,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,157,"        minDays = (minDays == 0 ? 4 : minDays);  // handle rename of BaseGJChronology
",6,1,0,1,2,0,0,0,0,8,77,4,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,158,"        return base == null ?
",2,1,0,0,0,1,0,0,0,3,21,5,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,171,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,181,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,182,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,184,"        if (zone == getZone()) {
",2,1,0,2,5,0,2,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,185,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,187,"        return getInstance(zone);
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,209,"            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;
",8,7,0,4,8,0,0,0,0,16,71,6,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,213,"                leapYears--;
",2,0,0,0,0,0,0,0,0,3,12,8,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,10,221,"        return MIN_YEAR;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,121,"            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];
",2,1,1,1,2,1,0,0,0,5,43,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,140,"            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];
",2,1,1,1,2,1,0,0,0,5,50,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,148,"        int minuendYear = getYear(minuendInstant);
",2,0,0,1,2,0,4,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,149,"        int subtrahendYear = getYear(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,152,"        long minuendRem = minuendInstant - getYearMillis(minuendYear);
",4,1,0,1,2,0,4,0,0,9,62,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,153,"        long subtrahendRem = subtrahendInstant - getYearMillis(subtrahendYear);
",4,1,0,1,2,0,4,0,0,9,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,156,"        if (subtrahendRem >= FEB_29) {
",4,1,0,1,3,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,157,"            if (isLeapYear(subtrahendYear)) {
",0,0,0,2,5,0,4,0,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,158,"                if (!isLeapYear(minuendYear)) {
",0,0,0,2,5,0,4,0,0,5,31,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,159,"                    subtrahendRem -= DateTimeConstants.MILLIS_PER_DAY;
",6,0,0,0,0,0,0,0,0,7,50,10,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,161,"            } else if (minuendRem >= FEB_29 && isLeapYear(minuendYear)) {
",4,2,0,2,6,0,4,0,0,10,61,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,162,"                minuendRem -= DateTimeConstants.MILLIS_PER_DAY;
",6,0,0,0,0,0,0,0,0,7,47,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,166,"        int difference = minuendYear - subtrahendYear;
",6,1,0,0,0,0,0,0,0,7,46,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,167,"        if (minuendRem < subtrahendRem) {
",4,1,0,1,3,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,168,"            difference--;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,170,"        return difference;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,175,"        int thisYear = getYear(instant);
",2,0,0,1,2,0,4,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,176,"        int dayOfYear = getDayOfYear(instant, thisYear);
",2,0,0,1,2,0,6,0,0,8,48,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,177,"        int millisOfDay = getMillisOfDay(instant);
",2,0,0,1,2,0,4,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,179,"        if (dayOfYear > (31 + 28)) { // after Feb 28
",2,2,0,2,5,0,0,0,0,4,44,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,180,"            if (isLeapYear(thisYear)) {
",0,0,0,2,5,0,4,0,0,4,27,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,182,"                if (!isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,5,24,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,184,"                    dayOfYear--;
",2,0,0,0,0,0,0,0,0,3,12,10,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,188,"                if (isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,4,23,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,190,"                    dayOfYear++;
",2,0,0,0,0,0,0,0,0,3,12,10,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,195,"        instant = getYearMonthDayMillis(year, 1, dayOfYear);
",2,0,0,1,2,0,6,0,0,9,52,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,196,"        instant += millisOfDay;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,10,198,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,754,"            return GJLocaleSymbols.forLocale(locale).halfdayValueToText(fieldValue);
",0,0,0,2,4,1,10,0,0,10,72,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,758,"            return set(millis, GJLocaleSymbols.forLocale(locale).halfdayTextToValue(text));
",0,0,0,3,6,1,14,0,0,14,79,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,10,762,"            return GJLocaleSymbols.forLocale(locale).getHalfdayMaxTextLength();
",0,0,0,2,4,1,8,0,0,8,67,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,10,50,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,10,54,"        return iChronology.getYear(instant);
",0,0,0,1,2,1,6,0,0,6,36,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,10,58,"        if (years == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,10,59,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,10,61,"        int thisYear = get(instant);
",2,0,0,1,2,0,4,0,0,6,28,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,10,62,"        int newYear = FieldUtils.safeAdd(thisYear, years);
",2,0,0,1,2,0,8,0,0,10,50,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,10,63,"        return set(instant, newYear);
",0,0,0,1,2,1,6,0,0,6,29,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,10,67,"        return add(instant, FieldUtils.safeToInt(years));
",0,0,0,2,4,1,10,0,0,10,49,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,10,71,"        if (years == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,10,72,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,10,75,"        int thisYear = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,10,76,"        int wrappedYear = FieldUtils.getWrappedValue
",2,0,0,0,0,0,4,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,10,78,"        return set(instant, wrappedYear);
",0,0,0,1,2,1,6,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,10,82,"        FieldUtils.verifyValueBounds
",0,0,0,0,0,0,4,0,0,4,28,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,10,84,"        return iChronology.setYear(instant, year);
",0,0,0,1,2,1,8,0,0,8,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,10,88,"        if (minuendInstant < subtrahendInstant) {
",4,1,0,1,3,0,0,0,0,5,41,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,10,89,"            return -iChronology.getYearDifference(subtrahendInstant, minuendInstant);
",0,0,0,1,2,1,8,0,0,9,73,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,10,91,"        return iChronology.getYearDifference(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,72,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,10,99,"        return iChronology.isLeapYear(get(instant));
",0,0,0,2,4,1,8,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,10,103,"        if (iChronology.isLeapYear(get(instant))) {
",0,0,0,3,7,0,8,0,0,8,43,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,10,104,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,10,106,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,10,115,"        return iChronology.getMinYear();
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,10,123,"        return iChronology.getYearMillis(get(instant));
",0,0,0,2,4,1,8,0,0,8,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,10,127,"        int year = get(instant);
",2,0,0,1,2,0,4,0,0,6,24,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,10,128,"        long yearStartMillis = iChronology.getYearMillis(year);
",2,0,0,1,2,0,6,0,0,8,55,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,10,129,"        if (instant != yearStartMillis) {
",4,1,0,1,3,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,10,131,"            instant = iChronology.getYearMillis(year + 1);
",4,1,0,1,2,0,4,0,0,10,46,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,10,133,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,10,137,"        return instant - roundFloor(instant);
",2,1,0,1,2,1,4,0,0,7,37,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,10,144,"        return iChronology.year();
",0,0,0,1,2,1,4,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,10,45,"        int year = getWrappedField().get(instant);
",2,0,0,2,4,0,6,0,0,8,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,10,46,"        if (year <= 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,10,47,"            year = 1 - year;
",4,1,0,0,0,0,0,0,0,6,16,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,10,49,"        return year;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,10,53,"        return getWrappedField().add(instant, years);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,10,57,"        return getWrappedField().add(instant, years);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,10,61,"        return getWrappedField().addWrapField(instant, years);
",0,0,0,2,4,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,10,65,"        return getWrappedField().addWrapField(instant, fieldIndex, values, years);
",0,0,0,2,4,1,12,0,0,12,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,10,69,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,10,73,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,80,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,10,85,"        FieldUtils.verifyValueBounds(this, year, 1, getMaximumValue());
",0,0,0,2,4,0,8,0,0,8,63,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,10,86,"        if (iChronology.getYear(instant) <= 0) {
",0,1,0,2,5,0,6,0,0,7,40,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,10,87,"            year = 1 - year;
",4,1,0,0,0,0,0,0,0,6,16,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,10,89,"        return super.set(instant, year);
",6,0,0,1,2,1,0,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,10,101,"        return getWrappedField().roundFloor(instant);
",0,0,0,2,4,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,10,105,"        return getWrappedField().roundCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,10,109,"        return getWrappedField().remainder(instant);
",0,0,0,2,4,1,6,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,10,116,"        return iChronology.yearOfEra();
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,10,56,"        return iChronology.getDayOfWeek(instant);
",0,0,0,1,2,1,6,0,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,10,67,"        return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToText(fieldValue);
",0,0,0,2,4,1,10,0,0,10,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,10,78,"        return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToShortText(fieldValue);
",0,0,0,2,4,1,10,0,0,10,79,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,10,90,"        return GJLocaleSymbols.forLocale(locale).dayOfWeekTextToValue(text);
",0,0,0,2,4,1,10,0,0,10,68,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,10,103,"        return DateTimeConstants.MONDAY;
",4,0,0,0,0,1,0,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,10,112,"        return DateTimeConstants.SUNDAY;
",4,0,0,0,0,1,0,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,10,122,"        return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxTextLength();
",0,0,0,2,4,1,8,0,0,8,69,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,10,132,"        return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxShortTextLength();
",0,0,0,2,4,1,8,0,0,8,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,10,139,"        return iChronology.dayOfWeek();
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,63,"        return iChronology.getDaysInMonthMax(instant);
",0,0,0,1,2,1,6,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,67,"        if (partial.isSupported(DateTimeFieldType.monthOfYear())) {
",0,0,0,3,7,0,8,0,0,8,59,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,68,"            int month = partial.get(DateTimeFieldType.monthOfYear());
",2,0,0,2,4,0,8,0,0,10,57,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,69,"            if (partial.isSupported(DateTimeFieldType.year())) {
",0,0,0,3,7,0,8,0,0,8,52,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,70,"                int year = partial.get(DateTimeFieldType.year());
",2,0,0,2,4,0,8,0,0,10,49,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,71,"                return iChronology.getDaysInYearMonth(year, month);
",0,0,0,1,2,1,8,0,0,8,51,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,73,"            return iChronology.getDaysInMonthMax(month);
",0,0,0,1,2,1,6,0,0,6,44,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,75,"        return getMaximumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,85,"                        int year = values[j];
",2,0,1,1,2,0,0,0,0,6,21,13,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,86,"                        return iChronology.getDaysInYearMonth(year, month);
",0,0,0,1,2,1,8,0,0,8,51,13,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,92,"        return getMaximumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,10,103,"        return iChronology.dayOfMonth();
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,10,52,"        return iChronology.getDayOfYear(instant);
",0,0,0,1,2,1,6,0,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,10,60,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,10,64,"        return iChronology.getDaysInYearMax();
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,10,68,"        int year = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,10,69,"        return iChronology.getDaysInYear(year);
",0,0,0,1,2,1,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,10,73,"        if (partial.isSupported(DateTimeFieldType.year())) {
",0,0,0,3,7,0,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,10,74,"            int year = partial.get(DateTimeFieldType.year());
",2,0,0,2,4,0,8,0,0,10,49,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,10,75,"            return iChronology.getDaysInYear(year);
",0,0,0,1,2,1,6,0,0,6,39,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,10,77,"        return iChronology.getDaysInYearMax();
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,10,81,"        int size = partial.size();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,10,82,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,10,83,"            if (partial.getFieldType(i) == DateTimeFieldType.year()) {
",0,1,0,3,7,0,10,0,0,11,58,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,10,84,"                int year = values[i];
",2,0,1,1,2,0,0,0,0,6,21,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,10,85,"                return iChronology.getDaysInYear(year);
",0,0,0,1,2,1,6,0,0,6,39,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,10,88,"        return iChronology.getDaysInYearMax();
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,10,92,"        int maxLessOne = iChronology.getDaysInYearMax() - 1;
",2,1,0,1,2,0,4,0,0,7,52,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,10,93,"        return (value > maxLessOne || value < 1) ? getMaximumValue(instant) : maxLessOne;
",8,3,0,2,4,1,4,0,0,15,81,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,10,100,"        return iChronology.dayOfYear();
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,10,42,"        return GJLocaleSymbols.forLocale(locale).monthOfYearValueToText(fieldValue);
",0,0,0,2,4,1,10,0,0,10,76,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,10,47,"        return GJLocaleSymbols.forLocale(locale).monthOfYearValueToShortText(fieldValue);
",0,0,0,2,4,1,10,0,0,10,81,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,10,52,"        return GJLocaleSymbols.forLocale(locale).monthOfYearTextToValue(text);
",0,0,0,2,4,1,10,0,0,10,70,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,10,57,"        return GJLocaleSymbols.forLocale(locale).getMonthMaxTextLength();
",0,0,0,2,4,1,8,0,0,8,65,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,10,62,"        return GJLocaleSymbols.forLocale(locale).getMonthMaxShortTextLength();
",0,0,0,2,4,1,8,0,0,8,70,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,59,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,72,"        return iChronology.getMonthOfYear(instant);
",0,0,0,1,2,1,6,0,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,98,"        long timePart = iChronology.getMillisOfDay(instant);
",2,0,0,1,2,0,6,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,103,"        int thisYear = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,104,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);
",2,0,0,1,2,0,8,0,0,10,62,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,112,"        int monthToUse = thisMonth - 1 + months;
",6,2,0,0,0,0,0,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,113,"        if (monthToUse >= 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,114,"            yearToUse = thisYear + (monthToUse / iMax);
",8,2,0,1,2,0,0,0,0,11,43,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,115,"            monthToUse = (monthToUse % iMax) + 1;
",6,2,0,1,2,0,0,0,0,9,37,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,117,"            yearToUse = thisYear + (monthToUse / iMax) - 1;
",8,3,0,1,2,0,0,0,0,12,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,118,"            monthToUse = Math.abs(monthToUse);
",2,0,0,1,2,0,6,0,0,9,34,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,119,"            int remMonthToUse = monthToUse % iMax;
",6,1,0,0,0,0,0,0,0,7,38,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,121,"            if (remMonthToUse == 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,122,"                remMonthToUse = iMax;
",4,0,0,0,0,0,0,0,0,5,21,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,124,"            monthToUse = iMax - remMonthToUse + 1;
",6,2,0,0,0,0,0,0,0,9,38,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,126,"            if (monthToUse == 1) {
",2,1,0,1,3,0,0,0,0,3,22,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,127,"                yearToUse += 1;
",2,0,0,0,0,0,0,0,0,3,15,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,136,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);
",2,0,0,1,2,0,10,0,0,12,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,137,"        int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);
",2,0,0,1,2,0,8,0,0,10,67,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,138,"        if (dayToUse > maxDay) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,139,"            dayToUse = maxDay;
",4,0,0,0,0,0,0,0,0,5,18,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,144,"        long datePart =
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,146,"        return datePart + timePart;
",4,1,0,0,0,1,0,0,0,5,27,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,151,"        int i_months = (int)months;
",4,0,0,1,2,0,0,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,152,"        if (i_months == months) {
",4,1,0,1,3,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,153,"            return add(instant, i_months);
",0,0,0,1,2,1,6,0,0,6,30,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,158,"        long timePart = iChronology.getMillisOfDay(instant);
",2,0,0,1,2,0,6,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,160,"        int thisYear = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,161,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);
",2,0,0,1,2,0,8,0,0,10,62,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,164,"        long monthToUse = thisMonth - 1 + months;
",6,2,0,0,0,0,0,0,0,8,41,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,165,"        if (monthToUse >= 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,166,"            yearToUse = thisYear + (monthToUse / iMax);
",8,2,0,1,2,0,0,0,0,11,43,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,167,"            monthToUse = (monthToUse % iMax) + 1;
",6,2,0,1,2,0,0,0,0,9,37,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,169,"            yearToUse = thisYear + (monthToUse / iMax) - 1;
",8,3,0,1,2,0,0,0,0,12,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,170,"            monthToUse = Math.abs(monthToUse);
",2,0,0,1,2,0,6,0,0,9,34,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,171,"            int remMonthToUse = (int)(monthToUse % iMax);
",6,1,0,2,4,0,0,0,0,7,45,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,172,"            if (remMonthToUse == 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,173,"                remMonthToUse = iMax;
",4,0,0,0,0,0,0,0,0,5,21,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,175,"            monthToUse = iMax - remMonthToUse + 1;
",6,2,0,0,0,0,0,0,0,9,38,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,176,"            if (monthToUse == 1) {
",2,1,0,1,3,0,0,0,0,3,22,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,177,"                yearToUse += 1;
",2,0,0,0,0,0,0,0,0,3,15,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,181,"        if (yearToUse < iChronology.getMinYear() ||
",2,2,0,1,3,0,4,0,0,8,43,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,184,"            throw new IllegalArgumentException
",0,0,0,0,0,0,0,2,0,2,34,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,188,"        int i_yearToUse = (int)yearToUse;
",4,0,0,1,2,0,0,0,0,4,33,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,189,"        int i_monthToUse = (int)monthToUse;
",4,0,0,1,2,0,0,0,0,4,35,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,191,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);
",2,0,0,1,2,0,10,0,0,12,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,192,"        int maxDay = iChronology.getDaysInYearMonth(i_yearToUse, i_monthToUse);
",2,0,0,1,2,0,8,0,0,10,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,193,"        if (dayToUse > maxDay) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,194,"            dayToUse = maxDay;
",4,0,0,0,0,0,0,0,0,5,18,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,197,"        long datePart =
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,199,"        return datePart + timePart;
",4,1,0,0,0,1,0,0,0,5,27,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,206,"        if (valueToAdd == 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,207,"            return values;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,209,"        if (partial.size() > 0 && partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear()) && fieldIndex == 0) {
",2,4,0,5,11,0,14,0,0,20,111,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,211,"            int curMonth0 = partial.getValue(0) - 1;
",2,1,0,1,2,0,4,0,0,7,40,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,212,"            int newMonth = ((curMonth0 + (valueToAdd % 12) + 12) % 12) + 1;
",6,4,0,3,6,0,0,0,0,10,63,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,213,"            return set(partial, 0, values, newMonth);
",0,0,0,1,2,1,8,0,0,8,41,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,215,"        if (DateTimeUtils.isContiguous(partial)) {
",0,0,0,2,5,0,6,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,216,"            long instant = 0L;
",2,0,0,0,0,0,0,0,0,2,18,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,217,"            for (int i = 0, isize = partial.size(); i < isize; i++) {
",10,1,0,2,5,0,4,0,0,16,57,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,218,"                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
",2,0,1,4,8,0,14,0,0,21,80,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,220,"            instant = add(instant, valueToAdd);
",2,0,0,1,2,0,6,0,0,9,35,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,221,"            return iChronology.get(partial, instant);
",0,0,0,1,2,1,8,0,0,8,41,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,223,"            return super.add(partial, fieldIndex, values, valueToAdd);
",10,0,0,1,2,1,0,0,0,10,58,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,238,"        return set(instant, FieldUtils.getWrappedValue(get(instant), months, MIN, iMax));
",0,0,0,3,6,1,18,0,0,18,81,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,244,"            return -getDifference(subtrahendInstant, minuendInstant);
",0,0,0,1,2,1,6,0,0,7,57,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,266,"                subtrahendInstant = iChronology.dayOfMonth().set(subtrahendInstant, minuendDom);
",2,0,0,2,4,0,10,0,0,13,80,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,277,"            difference--;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,306,"            thisDom = maxDom;
",4,0,0,0,0,0,0,0,0,5,17,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,320,"        int thisYear = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,321,"        if (iChronology.isLeapYear(thisYear)) {
",0,0,0,2,5,0,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,322,"            return (iChronology.getMonthOfYear(instant, thisYear) == iLeapMonth);
",2,1,0,2,4,1,8,0,0,11,69,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,324,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,329,"        return isLeap(instant) ? 1 : 0;
",0,0,0,1,2,1,4,0,0,4,31,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,349,"        int year = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,350,"        int month = iChronology.getMonthOfYear(instant, year);
",2,0,0,1,2,0,8,0,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,351,"        return iChronology.getYearMonthMillis(year, month);
",0,0,0,1,2,1,8,0,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,356,"        return instant - roundFloor(instant);
",2,1,0,1,2,1,4,0,0,7,37,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,10,364,"        return iChronology.monthOfYear();
",0,0,0,1,2,1,4,0,0,4,33,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,49,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,60,"        return iChronology.getWeekyear(instant);
",0,0,0,1,2,1,6,0,0,6,40,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,72,"        if (years == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,73,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,75,"        return set(instant, get(instant) + years);
",2,1,0,2,4,1,8,0,0,11,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,79,"        return add(instant, FieldUtils.safeToInt(value));
",0,0,0,2,4,1,10,0,0,10,49,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,92,"        return add(instant, years);
",0,0,0,1,2,1,6,0,0,6,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,96,"        if (minuendInstant < subtrahendInstant) {
",4,1,0,1,3,0,0,0,0,5,41,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,97,"            return -getDifference(subtrahendInstant, minuendInstant);
",0,0,0,1,2,1,6,0,0,7,57,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,100,"        int minuendWeekyear = get(minuendInstant);
",2,0,0,1,2,0,4,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,101,"        int subtrahendWeekyear = get(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,103,"        long minuendRem = remainder(minuendInstant);
",2,0,0,1,2,0,4,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,104,"        long subtrahendRem = remainder(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,50,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,107,"        if (subtrahendRem >= WEEK_53 && iChronology.getWeeksInYear(minuendWeekyear) <= 52) {
",4,3,0,2,5,0,6,0,0,13,84,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,108,"            subtrahendRem -= DateTimeConstants.MILLIS_PER_WEEK;
",6,0,0,0,0,0,0,0,0,7,51,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,111,"        int difference = minuendWeekyear - subtrahendWeekyear;
",6,1,0,0,0,0,0,0,0,7,54,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,112,"        if (minuendRem < subtrahendRem) {
",4,1,0,1,3,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,113,"            difference--;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,115,"        return difference;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,128,"        FieldUtils.verifyValueBounds(this, Math.abs(year),
",0,0,0,1,3,0,10,0,0,10,50,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,133,"        int thisWeekyear = get( instant );
",2,0,0,1,2,0,4,0,0,6,34,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,134,"        if ( thisWeekyear == year ) {
",4,1,0,1,3,0,0,0,0,5,29,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,135,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,140,"        int thisDow = iChronology.getDayOfWeek(instant);
",2,0,0,1,2,0,6,0,0,8,48,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,144,"        int weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );
",2,0,0,1,2,0,6,0,0,8,65,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,145,"        int weeksInToYear = iChronology.getWeeksInYear( year );
",2,0,0,1,2,0,6,0,0,8,55,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,146,"        int maxOutWeeks = (weeksInToYear < weeksInFromYear) ?
",6,1,0,1,2,0,0,0,0,7,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,154,"        int setToWeek = iChronology.getWeekOfWeekyear(instant);
",2,0,0,1,2,0,6,0,0,8,55,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,155,"        if ( setToWeek > maxOutWeeks ) {
",4,1,0,1,3,0,0,0,0,5,32,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,156,"            setToWeek = maxOutWeeks;
",4,0,0,0,0,0,0,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,162,"        long workInstant = instant; // Get a copy
",4,0,0,0,0,0,0,0,0,4,41,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,168,"        workInstant = iChronology.setYear( workInstant, year );
",2,0,0,1,2,0,8,0,0,11,55,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,173,"        int workWoyYear = get( workInstant );
",2,0,0,1,2,0,4,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,179,"        if ( workWoyYear < year ) {
",4,1,0,1,3,0,0,0,0,5,27,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,180,"            workInstant += DateTimeConstants.MILLIS_PER_WEEK;
",6,0,0,0,0,0,0,0,0,7,49,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,181,"        } else if ( workWoyYear > year ) {
",4,1,0,1,4,0,0,0,0,5,34,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,182,"            workInstant -= DateTimeConstants.MILLIS_PER_WEEK;
",6,0,0,0,0,0,0,0,0,7,49,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,189,"        int currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);
",2,0,0,1,2,0,6,0,0,8,64,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,191,"        workInstant = workInstant + (setToWeek - currentWoyWeek)
",8,2,0,1,2,0,0,0,0,11,56,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,200,"        workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );
",2,0,0,2,4,0,10,0,0,13,66,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,204,"        return workInstant;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,212,"        return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) > 52;
",0,1,0,2,4,1,10,0,0,11,73,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,216,"        return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) - 52;
",0,1,0,2,4,1,10,0,0,11,73,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,224,"        return iChronology.getMinYear();
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,228,"        return iChronology.getMaxYear();
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,234,"        instant = iChronology.weekOfWeekyear().roundFloor(instant);
",2,0,0,2,4,0,8,0,0,11,59,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,235,"        int wow = iChronology.getWeekOfWeekyear(instant);
",2,0,0,1,2,0,6,0,0,8,49,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,236,"        if (wow > 1) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,237,"            instant -= ((long) DateTimeConstants.MILLIS_PER_WEEK) * (wow - 1);
",8,2,0,3,6,0,0,0,0,11,66,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,239,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,243,"        return instant - roundFloor(instant);
",2,1,0,1,2,1,4,0,0,7,37,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,10,250,"        return iChronology.weekyear();
",0,0,0,1,2,1,4,0,0,4,30,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,10,54,"        return iChronology.getWeekOfWeekyear(instant);
",0,0,0,1,2,1,6,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,10,65,"        return super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY)
",8,2,0,1,2,1,0,0,0,10,71,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,10,70,"        return super.roundCeiling(instant + 3 * DateTimeConstants.MILLIS_PER_DAY)
",8,2,0,1,2,1,0,0,0,10,73,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,10,75,"        return super.remainder(instant + 3 * DateTimeConstants.MILLIS_PER_DAY);
",8,2,0,1,2,1,0,0,0,10,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,10,79,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,10,83,"        return 53;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,10,87,"        int weekyear = iChronology.getWeekyear(instant);
",2,0,0,1,2,0,6,0,0,8,48,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,10,88,"        return iChronology.getWeeksInYear(weekyear);
",0,0,0,1,2,1,6,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,10,92,"        if (partial.isSupported(DateTimeFieldType.weekyear())) {
",0,0,0,3,7,0,8,0,0,8,56,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,10,93,"            int weekyear = partial.get(DateTimeFieldType.weekyear());
",2,0,0,2,4,0,8,0,0,10,57,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,10,94,"            return iChronology.getWeeksInYear(weekyear);
",0,0,0,1,2,1,6,0,0,6,44,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,10,96,"        return 53;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,10,100,"        int size = partial.size();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,10,101,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,10,102,"            if (partial.getFieldType(i) == DateTimeFieldType.weekyear()) {
",0,1,0,3,7,0,10,0,0,11,62,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,10,103,"                int weekyear = values[i];
",2,0,1,1,2,0,0,0,0,6,25,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,10,104,"                return iChronology.getWeeksInYear(weekyear);
",0,0,0,1,2,1,6,0,0,6,44,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,10,107,"        return 53;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,10,111,"        return value > 52 ? getMaximumValue(instant) : 52;
",2,1,0,1,2,1,4,0,0,7,50,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,10,118,"        return iChronology.weekOfWeekyear();
",0,0,0,1,2,1,4,0,0,4,36,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,56,"            throw new IllegalArgumentException(""Must supply a chronology"");
",0,0,0,1,2,0,0,2,0,3,63,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,60,"            throw new IllegalArgumentException(""UTC chronology must not be null"");
",0,0,0,1,2,0,0,2,0,4,70,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,63,"            throw new IllegalArgumentException(""DateTimeZone must not be null"");
",0,0,0,1,2,0,0,2,0,4,68,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,89,"        return getBase();
",0,0,0,1,2,1,2,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,93,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,94,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,96,"        if (zone == getParam()) {
",2,1,0,2,5,0,2,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,97,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,99,"        if (zone == DateTimeZone.UTC) {
",6,1,0,1,3,0,0,0,0,7,31,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,100,"            return getBase();
",0,0,0,1,2,1,2,0,0,2,17,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,102,"        return new ZonedChronology(getBase(), zone);
",2,0,0,2,4,1,2,2,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,109,"        return localToUTC(getBase().getDateTimeMillis
",0,0,0,1,3,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,118,"        return localToUTC(getBase().getDateTimeMillis
",0,0,0,1,3,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,128,"        return localToUTC(getBase().getDateTimeMillis
",0,0,0,1,3,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,138,"        DateTimeZone zone = getZone();
",2,0,0,1,2,0,2,2,0,6,30,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,139,"        int offset = zone.getOffsetFromLocal(localInstant);
",2,0,0,1,2,0,6,0,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,140,"        localInstant -= offset;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,141,"        if (offset != zone.getOffset(localInstant)) {
",2,1,0,2,5,0,6,0,0,9,45,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,142,"            throw new IllegalInstantException(localInstant, zone.getID());
",2,0,0,2,4,0,4,2,0,8,62,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,144,"        return localInstant;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,210,"            return field;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,213,"            return (DateTimeField)converted.get(field);
",0,0,0,2,4,1,6,2,0,8,43,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,234,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,235,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,237,"        if (obj instanceof ZonedChronology == false) {
",2,1,0,1,3,0,0,2,0,6,46,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,238,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,240,"        ZonedChronology chrono = (ZonedChronology) obj;
",4,0,0,1,2,0,0,4,0,8,47,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,241,"        return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,253,"        return 326565 + getZone().hashCode() * 11 + getBase().hashCode() * 7;
",0,4,0,4,8,1,8,0,0,12,69,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,262,"        return ""ZonedChronology["" + getBase() + "", "" + getZone().getID() + ']';
",0,1,0,4,8,1,6,0,0,10,71,4,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,10,479,"                    eras = f;
",4,0,0,0,0,0,0,0,0,5,9,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,388,"                throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,9,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,399,"            return iField.isLenient();
",0,0,0,1,2,1,4,0,0,4,26,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,403,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,404,"            return iField.get(localInstant);
",0,0,0,1,2,1,6,0,0,6,32,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,408,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,409,"            return iField.getAsText(localInstant, locale);
",0,0,0,1,2,1,8,0,0,8,46,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,413,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,414,"            return iField.getAsShortText(localInstant, locale);
",0,0,0,1,2,1,8,0,0,8,51,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,418,"            return iField.getAsText(fieldValue, locale);
",0,0,0,1,2,1,8,0,0,8,44,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,422,"            return iField.getAsShortText(fieldValue, locale);
",0,0,0,1,2,1,8,0,0,8,49,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,426,"            if (iTimeField) {
",2,0,0,1,3,0,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,427,"                int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,428,"                long localInstant = iField.add(instant + offset, value);
",6,1,0,1,2,0,6,0,0,13,56,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,429,"                return localInstant - offset;
",4,1,0,0,0,1,0,0,0,5,29,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,431,"               long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,432,"               localInstant = iField.add(localInstant, value);
",2,0,0,1,2,0,8,0,0,11,47,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,433,"               return iZone.convertLocalToUTC(localInstant, false, instant);
",0,0,0,1,2,1,8,0,0,9,61,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,438,"            if (iTimeField) {
",2,0,0,1,3,0,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,439,"                int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,440,"                long localInstant = iField.add(instant + offset, value);
",6,1,0,1,2,0,6,0,0,13,56,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,441,"                return localInstant - offset;
",4,1,0,0,0,1,0,0,0,5,29,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,443,"               long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,444,"               localInstant = iField.add(localInstant, value);
",2,0,0,1,2,0,8,0,0,11,47,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,445,"               return iZone.convertLocalToUTC(localInstant, false, instant);
",0,0,0,1,2,1,8,0,0,9,61,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,450,"            if (iTimeField) {
",2,0,0,1,3,0,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,451,"                int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,452,"                long localInstant = iField.addWrapField(instant + offset, value);
",6,1,0,1,2,0,6,0,0,13,65,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,453,"                return localInstant - offset;
",4,1,0,0,0,1,0,0,0,5,29,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,455,"                long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,456,"                localInstant = iField.addWrapField(localInstant, value);
",2,0,0,1,2,0,8,0,0,11,56,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,457,"                return iZone.convertLocalToUTC(localInstant, false, instant);
",0,0,0,1,2,1,8,0,0,9,61,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,462,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,463,"            localInstant = iField.set(localInstant, value);
",2,0,0,1,2,0,8,0,0,11,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,464,"            long result = iZone.convertLocalToUTC(localInstant, false, instant);
",2,0,0,1,2,0,8,0,0,11,68,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,465,"            if (get(result) != value) {
",2,1,0,2,5,0,4,0,0,7,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,466,"                IllegalInstantException cause = new IllegalInstantException(localInstant,  iZone.getID());
",4,0,0,2,4,0,4,4,0,12,90,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,467,"                IllegalFieldValueException ex = new IllegalFieldValueException(iField.getType(), Integer.valueOf(value), cause.getMessage());
",2,0,0,4,8,0,14,4,0,20,125,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,468,"                ex.initCause(cause);
",0,0,0,1,2,0,6,0,0,6,20,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,469,"                throw ex;
",2,0,0,0,0,0,0,0,0,2,9,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,471,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,476,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,477,"            localInstant = iField.set(localInstant, text, locale);
",2,0,0,1,2,0,10,0,0,13,54,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,478,"            return iZone.convertLocalToUTC(localInstant, false, instant);
",0,0,0,1,2,1,8,0,0,9,61,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,482,"            int offset = getOffsetToAdd(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,483,"            return iField.getDifference
",0,0,0,0,0,1,4,0,0,4,27,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,489,"            int offset = getOffsetToAdd(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,490,"            return iField.getDifferenceAsLong
",0,0,0,0,0,1,4,0,0,4,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,496,"            return iDurationField;
",2,0,0,0,0,1,0,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,500,"            return iRangeDurationField;
",2,0,0,0,0,1,0,0,0,2,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,504,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,505,"            return iField.isLeap(localInstant);
",0,0,0,1,2,1,6,0,0,6,35,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,509,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,510,"            return iField.getLeapAmount(localInstant);
",0,0,0,1,2,1,6,0,0,6,42,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,514,"            return iLeapDurationField;
",2,0,0,0,0,1,0,0,0,2,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,518,"            if (iTimeField) {
",2,0,0,1,3,0,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,519,"                int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,520,"                instant = iField.roundFloor(instant + offset);
",6,1,0,1,2,0,4,0,0,12,46,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,521,"                return instant - offset;
",4,1,0,0,0,1,0,0,0,5,24,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,523,"                long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,524,"                localInstant = iField.roundFloor(localInstant);
",2,0,0,1,2,0,6,0,0,9,47,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,525,"                return iZone.convertLocalToUTC(localInstant, false, instant);
",0,0,0,1,2,1,8,0,0,9,61,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,530,"            if (iTimeField) {
",2,0,0,1,3,0,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,531,"                int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,532,"                instant = iField.roundCeiling(instant + offset);
",6,1,0,1,2,0,4,0,0,12,48,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,533,"                return instant - offset;
",4,1,0,0,0,1,0,0,0,5,24,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,535,"                long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,536,"                localInstant = iField.roundCeiling(localInstant);
",2,0,0,1,2,0,6,0,0,9,49,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,537,"                return iZone.convertLocalToUTC(localInstant, false, instant);
",0,0,0,1,2,1,8,0,0,9,61,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,542,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,543,"            return iField.remainder(localInstant);
",0,0,0,1,2,1,6,0,0,6,38,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,547,"            return iField.getMinimumValue();
",0,0,0,1,2,1,4,0,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,551,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,552,"            return iField.getMinimumValue(localInstant);
",0,0,0,1,2,1,6,0,0,6,44,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,556,"            return iField.getMinimumValue(instant);
",0,0,0,1,2,1,6,0,0,6,39,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,560,"            return iField.getMinimumValue(instant, values);
",0,0,0,1,2,1,8,0,0,8,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,564,"            return iField.getMaximumValue();
",0,0,0,1,2,1,4,0,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,568,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,569,"            return iField.getMaximumValue(localInstant);
",0,0,0,1,2,1,6,0,0,6,44,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,573,"            return iField.getMaximumValue(instant);
",0,0,0,1,2,1,6,0,0,6,39,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,577,"            return iField.getMaximumValue(instant, values);
",0,0,0,1,2,1,8,0,0,8,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,581,"            return iField.getMaximumTextLength(locale);
",0,0,0,1,2,1,6,0,0,6,43,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,585,"            return iField.getMaximumShortTextLength(locale);
",0,0,0,1,2,1,6,0,0,6,48,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,589,"            int offset = this.iZone.getOffset(instant);
",4,0,0,1,2,0,4,0,0,8,43,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,590,"            long sum = instant + offset;
",6,1,0,0,0,0,0,0,0,7,28,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,592,"            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {
",8,5,0,3,7,0,0,0,0,13,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,593,"                throw new ArithmeticException(""Adding time zone offset caused overflow"");
",0,0,0,1,2,0,0,2,0,3,73,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,595,"            return offset;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,283,"                throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,9,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,291,"            return iTimeField ? iField.isPrecise() : iField.isPrecise() && this.iZone.isFixed();
",4,1,0,3,6,1,10,0,0,15,84,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,299,"            return iField.getValue(duration, addOffset(instant));
",0,0,0,2,4,1,10,0,0,10,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,303,"            return iField.getValueAsLong(duration, addOffset(instant));
",0,0,0,2,4,1,10,0,0,10,59,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,307,"            return iField.getMillis(value, addOffset(instant));
",0,0,0,2,4,1,10,0,0,10,51,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,311,"            return iField.getMillis(value, addOffset(instant));
",0,0,0,2,4,1,10,0,0,10,51,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,315,"            int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,316,"            instant = iField.add(instant + offset, value);
",6,1,0,1,2,0,6,0,0,14,46,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,317,"            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));
",6,1,0,2,4,1,4,0,0,11,79,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,321,"            int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,322,"            instant = iField.add(instant + offset, value);
",6,1,0,1,2,0,6,0,0,14,46,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,323,"            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));
",6,1,0,2,4,1,4,0,0,11,79,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,327,"            int offset = getOffsetToAdd(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,328,"            return iField.getDifference
",0,0,0,0,0,1,4,0,0,4,27,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,334,"            int offset = getOffsetToAdd(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,335,"            return iField.getDifferenceAsLong
",0,0,0,0,0,1,4,0,0,4,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,341,"            int offset = this.iZone.getOffset(instant);
",4,0,0,1,2,0,4,0,0,8,43,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,342,"            long sum = instant + offset;
",6,1,0,0,0,0,0,0,0,7,28,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,344,"            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {
",8,5,0,3,7,0,0,0,0,13,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,345,"                throw new ArithmeticException(""Adding time zone offset caused overflow"");
",0,0,0,1,2,0,0,2,0,3,73,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,347,"            return offset;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,351,"            int offset = this.iZone.getOffsetFromLocal(instant);
",4,0,0,1,2,0,4,0,0,8,52,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,352,"            long diff = instant - offset;
",6,1,0,0,0,0,0,0,0,7,29,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,354,"            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {
",8,5,0,3,7,0,0,0,0,13,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,355,"                throw new ArithmeticException(""Subtracting time zone offset caused overflow"");
",0,0,0,1,2,0,0,2,0,3,78,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,357,"            return offset;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,10,361,"            return iZone.convertUTCToLocal(instant);
",0,0,0,1,2,1,6,0,0,6,40,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,216,"        Stub(DateTimeZone zone) {
",4,0,0,1,3,0,0,2,0,6,25,3,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,217,"            iZone = zone;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,218,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,221,"            return ISOChronology.getInstance(iZone);
",0,0,0,1,2,1,6,0,0,6,40,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,225,"            out.writeObject(iZone);
",0,0,0,1,2,0,6,0,0,6,23,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,226,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,231,"            iZone = (DateTimeZone)in.readObject();
",2,0,0,2,4,0,4,2,0,9,38,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,10,232,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,10,50,"        int year = getWrappedField().get(instant);
",2,0,0,2,4,0,6,0,0,8,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,10,51,"        return year < 0 ? -year : year;
",6,1,0,0,0,1,0,0,0,8,31,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,10,55,"        return getWrappedField().add(instant, years);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,10,59,"        return getWrappedField().add(instant, years);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,10,63,"        return getWrappedField().addWrapField(instant, years);
",0,0,0,2,4,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,10,67,"        return getWrappedField().addWrapField(instant, fieldIndex, values, years);
",0,0,0,2,4,1,12,0,0,12,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,10,71,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,10,75,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,80,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,10,79,"        FieldUtils.verifyValueBounds(this, year, 0, getMaximumValue());
",0,0,0,2,4,0,8,0,0,8,63,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,10,80,"        if (getWrappedField().get(instant) < 0) {
",0,1,0,3,7,0,6,0,0,7,41,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,10,81,"            year = -year;
",4,0,0,0,0,0,0,0,0,6,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,10,83,"        return super.set(instant, year);
",6,0,0,1,2,1,0,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,10,95,"        return getWrappedField().roundFloor(instant);
",0,0,0,2,4,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,10,99,"        return getWrappedField().roundCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,10,103,"        return getWrappedField().remainder(instant);
",0,0,0,2,4,1,6,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,10,110,"        return INSTANCE;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,883,"        Transition(long millis, Transition tr) {
",6,0,0,1,3,0,0,2,0,8,40,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,884,"            iMillis = millis;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,885,"            iNameKey = tr.iNameKey;
",6,0,0,0,0,0,0,0,0,7,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,886,"            iWallOffset = tr.iWallOffset;
",6,0,0,0,0,0,0,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,887,"            iStandardOffset = tr.iStandardOffset;
",6,0,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,888,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,890,"        Transition(long millis, Rule rule, int standardOffset) {
",8,0,0,1,3,0,0,2,0,10,56,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,891,"            iMillis = millis;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,892,"            iNameKey = rule.getNameKey();
",2,0,0,1,2,0,4,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,893,"            iWallOffset = standardOffset + rule.getSaveMillis();
",4,1,0,1,2,0,4,0,0,10,52,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,894,"            iStandardOffset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,33,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,895,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,898,"                   int wallOffset, int standardOffset) {
",4,0,0,0,2,0,0,0,0,4,37,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,899,"            iMillis = millis;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,900,"            iNameKey = nameKey;
",4,0,0,0,0,0,0,0,0,5,19,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,901,"            iWallOffset = wallOffset;
",4,0,0,0,0,0,0,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,902,"            iStandardOffset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,33,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,903,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,906,"            return iMillis;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,910,"            return iNameKey;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,914,"            return iWallOffset;
",2,0,0,0,0,1,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,918,"            return iStandardOffset;
",2,0,0,0,0,1,0,0,0,2,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,922,"            return iWallOffset - iStandardOffset;
",4,1,0,0,0,1,0,0,0,5,37,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,929,"            if (other == null) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,930,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,932,"            return iMillis > other.iMillis &&
",6,2,0,0,0,1,0,0,0,8,33,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,506,"                throw new IllegalArgumentException(""Unknown mode: "" + mode);
",2,1,0,1,2,0,0,2,0,6,60,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,522,"            if (iMode == 'w') {
",2,1,0,1,3,0,0,0,0,4,19,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,523,"                offset = standardOffset + saveMillis;
",6,1,0,0,0,0,0,0,0,8,37,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,524,"            } else if (iMode == 's') {
",2,1,0,1,4,0,0,0,0,4,26,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,525,"                offset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,24,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,527,"                offset = 0;
",2,0,0,0,0,0,0,0,0,3,11,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,530,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,531,"            long millis = chrono.year().set(0, year);
",2,0,0,2,4,0,8,0,0,10,41,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,532,"            millis = chrono.monthOfYear().set(millis, iMonthOfYear);
",2,0,0,2,4,0,10,0,0,13,56,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,533,"            millis = chrono.millisOfDay().set(millis, iMillisOfDay);
",2,0,0,2,4,0,10,0,0,13,56,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,534,"            millis = setDayOfMonth(chrono, millis);
",2,0,0,1,2,0,6,0,0,9,39,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,536,"            if (iDayOfWeek != 0) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,537,"                millis = setDayOfWeek(chrono, millis);
",2,0,0,1,2,0,6,0,0,9,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,541,"            return millis - offset;
",4,1,0,0,0,1,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,549,"            if (iMode == 'w') {
",2,1,0,1,3,0,0,0,0,4,19,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,550,"                offset = standardOffset + saveMillis;
",6,1,0,0,0,0,0,0,0,8,37,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,551,"            } else if (iMode == 's') {
",2,1,0,1,4,0,0,0,0,4,26,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,552,"                offset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,24,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,554,"                offset = 0;
",2,0,0,0,0,0,0,0,0,3,11,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,558,"            instant += offset;
",4,0,0,0,0,0,0,0,0,5,18,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,560,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,561,"            long next = chrono.monthOfYear().set(instant, iMonthOfYear);
",2,0,0,2,4,0,10,0,0,12,60,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,563,"            next = chrono.millisOfDay().set(next, 0);
",2,0,0,2,4,0,8,0,0,11,41,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,564,"            next = chrono.millisOfDay().add(next, iMillisOfDay);
",2,0,0,2,4,0,10,0,0,13,52,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,565,"            next = setDayOfMonthNext(chrono, next);
",2,0,0,1,2,0,6,0,0,9,39,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,567,"            if (iDayOfWeek == 0) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,568,"                if (next <= instant) {
",4,1,0,1,3,0,0,0,0,5,22,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,569,"                    next = chrono.year().add(next, 1);
",2,0,0,2,4,0,8,0,0,11,34,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,570,"                    next = setDayOfMonthNext(chrono, next);
",2,0,0,1,2,0,6,0,0,9,39,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,573,"                next = setDayOfWeek(chrono, next);
",2,0,0,1,2,0,6,0,0,9,34,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,574,"                if (next <= instant) {
",4,1,0,1,3,0,0,0,0,5,22,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,575,"                    next = chrono.year().add(next, 1);
",2,0,0,2,4,0,8,0,0,11,34,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,576,"                    next = chrono.monthOfYear().set(next, iMonthOfYear);
",2,0,0,2,4,0,10,0,0,13,52,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,577,"                    next = setDayOfMonthNext(chrono, next);
",2,0,0,1,2,0,6,0,0,9,39,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,578,"                    next = setDayOfWeek(chrono, next);
",2,0,0,1,2,0,6,0,0,9,34,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,583,"            return next - offset;
",4,1,0,0,0,1,0,0,0,5,21,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,591,"            if (iMode == 'w') {
",2,1,0,1,3,0,0,0,0,4,19,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,592,"                offset = standardOffset + saveMillis;
",6,1,0,0,0,0,0,0,0,8,37,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,593,"            } else if (iMode == 's') {
",2,1,0,1,4,0,0,0,0,4,26,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,594,"                offset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,24,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,596,"                offset = 0;
",2,0,0,0,0,0,0,0,0,3,11,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,600,"            instant += offset;
",4,0,0,0,0,0,0,0,0,5,18,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,602,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,603,"            long prev = chrono.monthOfYear().set(instant, iMonthOfYear);
",2,0,0,2,4,0,10,0,0,12,60,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,605,"            prev = chrono.millisOfDay().set(prev, 0);
",2,0,0,2,4,0,8,0,0,11,41,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,606,"            prev = chrono.millisOfDay().add(prev, iMillisOfDay);
",2,0,0,2,4,0,10,0,0,13,52,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,607,"            prev = setDayOfMonthPrevious(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,43,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,609,"            if (iDayOfWeek == 0) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,610,"                if (prev >= instant) {
",4,1,0,1,3,0,0,0,0,5,22,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,611,"                    prev = chrono.year().add(prev, -1);
",2,0,0,2,4,0,8,0,0,12,35,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,612,"                    prev = setDayOfMonthPrevious(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,43,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,615,"                prev = setDayOfWeek(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,34,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,616,"                if (prev >= instant) {
",4,1,0,1,3,0,0,0,0,5,22,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,617,"                    prev = chrono.year().add(prev, -1);
",2,0,0,2,4,0,8,0,0,12,35,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,618,"                    prev = chrono.monthOfYear().set(prev, iMonthOfYear);
",2,0,0,2,4,0,10,0,0,13,52,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,619,"                    prev = setDayOfMonthPrevious(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,43,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,620,"                    prev = setDayOfWeek(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,34,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,625,"            return prev - offset;
",4,1,0,0,0,1,0,0,0,5,21,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,629,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,630,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,632,"            if (obj instanceof OfYear) {
",2,0,0,1,3,0,0,2,0,4,28,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,633,"                OfYear other = (OfYear)obj;
",4,0,0,1,2,0,0,4,0,8,27,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,634,"                return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,642,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,659,"            out.writeByte(iMode);
",0,0,0,1,2,0,6,0,0,6,21,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,660,"            out.writeByte(iMonthOfYear);
",0,0,0,1,2,0,6,0,0,6,28,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,661,"            out.writeByte(iDayOfMonth);
",0,0,0,1,2,0,6,0,0,6,27,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,662,"            out.writeByte(iDayOfWeek);
",0,0,0,1,2,0,6,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,663,"            out.writeBoolean(iAdvance);
",0,0,0,1,2,0,6,0,0,6,27,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,664,"            writeMillis(out, iMillisOfDay);
",0,0,0,1,2,0,6,0,0,6,31,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,665,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,672,"                next = setDayOfMonth(chrono, next);
",2,0,0,1,2,0,6,0,0,9,35,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,682,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,673,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,674,"                if (iMonthOfYear == 2 && iDayOfMonth == 29) {
",4,3,0,1,3,0,0,0,0,7,45,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,675,"                    while (chrono.year().isLeap(next) == false) {
",0,1,0,3,7,0,8,0,0,10,45,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,676,"                        next = chrono.year().add(next, 1);
",2,0,0,2,4,0,8,0,0,11,34,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,678,"                    next = setDayOfMonth(chrono, next);
",2,0,0,1,2,0,6,0,0,9,35,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,680,"                    throw e;
",2,0,0,0,0,0,0,0,0,2,8,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,683,"            return next;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,691,"                prev = setDayOfMonth(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,35,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,701,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,692,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,693,"                if (iMonthOfYear == 2 && iDayOfMonth == 29) {
",4,3,0,1,3,0,0,0,0,7,45,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,694,"                    while (chrono.year().isLeap(prev) == false) {
",0,1,0,3,7,0,8,0,0,10,45,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,695,"                        prev = chrono.year().add(prev, -1);
",2,0,0,2,4,0,8,0,0,12,35,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,697,"                    prev = setDayOfMonth(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,35,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,699,"                    throw e;
",2,0,0,0,0,0,0,0,0,2,8,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,702,"            return prev;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,706,"            if (iDayOfMonth >= 0) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,707,"                instant = chrono.dayOfMonth().set(instant, iDayOfMonth);
",2,0,0,2,4,0,10,0,0,13,56,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,709,"                instant = chrono.dayOfMonth().set(instant, 1);
",2,0,0,2,4,0,8,0,0,11,46,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,710,"                instant = chrono.monthOfYear().add(instant, 1);
",2,0,0,2,4,0,8,0,0,11,47,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,711,"                instant = chrono.dayOfMonth().add(instant, iDayOfMonth);
",2,0,0,2,4,0,10,0,0,13,56,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,713,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,717,"            int dayOfWeek = chrono.dayOfWeek().get(instant);
",2,0,0,2,4,0,8,0,0,10,48,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,718,"            int daysToAdd = iDayOfWeek - dayOfWeek;
",6,1,0,0,0,0,0,0,0,7,39,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,719,"            if (daysToAdd != 0) {
",2,1,0,1,3,0,0,0,0,3,21,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,720,"                if (iAdvance) {
",2,0,0,1,3,0,0,0,0,2,15,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,721,"                    if (daysToAdd < 0) {
",2,1,0,1,3,0,0,0,0,3,20,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,722,"                        daysToAdd += 7;
",2,0,0,0,0,0,0,0,0,3,15,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,725,"                    if (daysToAdd > 0) {
",2,1,0,1,3,0,0,0,0,3,20,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,726,"                        daysToAdd -= 7;
",2,0,0,0,0,0,0,0,0,3,15,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,729,"                instant = chrono.dayOfWeek().add(instant, daysToAdd);
",2,0,0,2,4,0,10,0,0,13,53,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,731,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,56,"    public ZoneInfoProvider(File fileDir) throws IOException {
",6,0,0,1,3,1,0,2,0,9,58,2,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,57,"        if (fileDir == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,58,"            throw new IllegalArgumentException(""No file directory provided"");
",0,0,0,1,2,0,0,2,0,3,65,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,60,"        if (!fileDir.exists()) {
",0,0,0,2,5,0,4,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,61,"            throw new IOException(""File directory doesn't exist: "" + fileDir);
",2,1,0,1,2,0,0,2,0,6,66,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,63,"        if (!fileDir.isDirectory()) {
",0,0,0,2,5,0,4,0,0,5,29,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,64,"            throw new IOException(""File doesn't refer to a directory: "" + fileDir);
",2,1,0,1,2,0,0,2,0,6,71,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,67,"        iFileDir = fileDir;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,68,"        iResourcePath = null;
",2,0,0,0,0,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,69,"        iLoader = null;
",2,0,0,0,0,0,0,0,0,3,15,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,71,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));
",2,0,0,2,4,0,4,0,0,8,60,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,72,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,96,"        this(resourcePath, loader, true);
",4,0,0,1,2,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,97,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,108,"            throw new IllegalArgumentException(""No resource path provided"");
",0,0,0,1,2,0,0,2,0,3,64,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,137,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,142,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,158,"            return loadZoneData(id);
",0,0,0,1,2,1,4,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,162,"        return getZone((String)obj);
",2,0,0,2,4,1,2,2,0,6,28,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,183,"        Thread t = Thread.currentThread();
",2,0,0,1,2,0,4,2,0,8,34,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,184,"        t.getThreadGroup().uncaughtException(t, ex);
",0,0,0,2,4,0,10,0,0,10,44,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,185,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,197,"            in = new FileInputStream(new File(iFileDir, name));
",6,0,0,2,4,0,0,4,0,11,51,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,203,"                in = ClassLoader.getSystemResourceAsStream(path);
",2,0,0,1,2,0,6,0,0,9,49,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,206,"                StringBuilder buf = new StringBuilder(40)
",2,0,0,1,2,0,0,4,0,6,41,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,211,"                throw new IOException(buf.toString());
",0,0,0,2,4,0,4,2,0,6,38,9,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,239,"            } catch (IOException ex) {
",2,0,0,1,4,0,0,2,0,4,26,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,230,"        } catch (IOException ex) {
",2,0,0,1,4,0,0,2,0,4,26,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,231,"            uncaughtException(ex);
",0,0,0,1,2,0,4,0,0,4,22,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,232,"            iZoneInfoMap.remove(id);
",0,0,0,1,2,0,6,0,0,6,24,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,233,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,235,"            try {
",0,0,0,0,1,0,0,0,0,0,5,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,259,"            } catch (IOException ex) {
",2,0,0,1,4,0,0,2,0,4,26,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,261,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,257,"            try {
",0,0,0,0,1,0,0,0,0,0,5,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,285,"            } catch (ArrayIndexOutOfBoundsException ex) {
",2,0,0,1,4,0,0,2,0,4,45,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,10,286,"                throw new IOException(""Corrupt zone info map"");
",0,0,0,1,2,0,0,2,0,3,47,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1183,"            return findMatchingRecurrence(instant).getNameKey();
",0,0,0,2,4,1,6,0,0,6,52,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1187,"            return iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();
",2,1,0,2,4,1,6,0,0,9,73,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1191,"            return iStandardOffset;
",2,0,0,0,0,1,0,0,0,2,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1195,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1199,"            int standardOffset = iStandardOffset;
",4,0,0,0,0,0,0,0,0,4,37,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1200,"            Recurrence startRecurrence = iStartRecurrence;
",4,0,0,0,0,0,0,2,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1201,"            Recurrence endRecurrence = iEndRecurrence;
",4,0,0,0,0,0,0,2,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1206,"                start = startRecurrence.next
",2,0,0,0,0,0,4,0,0,7,28,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1208,"                if (instant > 0 && start < 0) {
",4,3,0,1,3,0,0,0,0,7,31,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1210,"                    start = instant;
",4,0,0,0,0,0,0,0,0,5,16,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1218,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1212,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1214,"                start = instant;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1215,"            } catch (ArithmeticException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1217,"                start = instant;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1221,"                end = endRecurrence.next
",2,0,0,0,0,0,4,0,0,7,24,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1223,"                if (instant > 0 && end < 0) {
",4,3,0,1,3,0,0,0,0,7,29,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1225,"                    end = instant;
",4,0,0,0,0,0,0,0,0,5,14,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1233,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1227,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1229,"                end = instant;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1230,"            } catch (ArithmeticException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1232,"                end = instant;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1235,"            return (start > end) ? end : start;
",8,1,0,1,2,1,0,0,0,9,35,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1241,"            instant++;
",2,0,0,0,0,0,0,0,0,3,10,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1243,"            int standardOffset = iStandardOffset;
",4,0,0,0,0,0,0,0,0,4,37,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1244,"            Recurrence startRecurrence = iStartRecurrence;
",4,0,0,0,0,0,0,2,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1245,"            Recurrence endRecurrence = iEndRecurrence;
",4,0,0,0,0,0,0,2,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1250,"                start = startRecurrence.previous
",2,0,0,0,0,0,4,0,0,7,32,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1252,"                if (instant < 0 && start > 0) {
",4,3,0,1,3,0,0,0,0,7,31,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1254,"                    start = instant;
",4,0,0,0,0,0,0,0,0,5,16,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1262,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1256,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1258,"                start = instant;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1259,"            } catch (ArithmeticException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1261,"                start = instant;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1265,"                end = endRecurrence.previous
",2,0,0,0,0,0,4,0,0,7,28,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1267,"                if (instant < 0 && end > 0) {
",4,3,0,1,3,0,0,0,0,7,29,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1269,"                    end = instant;
",4,0,0,0,0,0,0,0,0,5,14,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1277,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1271,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1273,"                end = instant;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1274,"            } catch (ArithmeticException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1276,"                end = instant;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1279,"            return ((start > end) ? start : end) - 1;
",8,2,0,2,4,1,0,0,0,10,41,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1283,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1284,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1286,"            if (obj instanceof DSTZone) {
",2,0,0,1,3,0,0,2,0,4,29,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1287,"                DSTZone other = (DSTZone)obj;
",4,0,0,1,2,0,0,4,0,8,29,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1288,"                return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1294,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1298,"            writeMillis(out, iStandardOffset);
",0,0,0,1,2,0,6,0,0,6,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1299,"            iStartRecurrence.writeTo(out);
",0,0,0,1,2,0,6,0,0,6,30,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1300,"            iEndRecurrence.writeTo(out);
",0,0,0,1,2,0,6,0,0,6,28,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1301,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1304,"            int standardOffset = iStandardOffset;
",4,0,0,0,0,0,0,0,0,4,37,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1305,"            Recurrence startRecurrence = iStartRecurrence;
",4,0,0,0,0,0,0,2,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1306,"            Recurrence endRecurrence = iEndRecurrence;
",4,0,0,0,0,0,0,2,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1311,"                start = startRecurrence.next
",2,0,0,0,0,0,4,0,0,7,28,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1319,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1313,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1315,"                start = instant;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1316,"            } catch (ArithmeticException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1318,"                start = instant;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1322,"                end = endRecurrence.next
",2,0,0,0,0,0,4,0,0,7,24,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1330,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1324,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1326,"                end = instant;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1327,"            } catch (ArithmeticException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1329,"                end = instant;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1332,"            return (start > end) ? startRecurrence : endRecurrence;
",8,1,0,1,2,1,0,0,0,9,55,6,0.00000,0
defect4j,time,org/joda/time/JodaTimePermission,10,57,"        super(name);
",2,0,0,1,2,0,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/JodaTimePermission,10,58,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,10,45,"        return iNameKey;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,10,49,"        return iWallOffset;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,10,53,"        return iStandardOffset;
",2,0,0,0,0,1,0,0,0,2,23,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,10,57,"        return iWallOffset;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,10,61,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,10,65,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,10,69,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,10,77,"        String id = getID();
",2,0,0,1,2,0,2,2,0,6,20,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,10,78,"        if (id.length() == 6 && (id.startsWith(""+"") || id.startsWith(""-""))) {
",0,3,0,5,11,0,12,0,0,17,69,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,10,81,"            return java.util.TimeZone.getTimeZone(""GMT"" + getID());
",6,1,0,2,4,1,4,0,0,12,55,7,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,10,84,"        return new java.util.SimpleTimeZone(iWallOffset, getID());
",8,0,0,2,4,1,2,0,0,10,58,5,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,10,91,"        if (obj instanceof FixedDateTimeZone) {
",2,0,0,1,3,0,0,2,0,4,39,5,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,10,92,"            FixedDateTimeZone other = (FixedDateTimeZone) obj;
",4,0,0,1,2,0,0,4,0,8,50,6,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,10,93,"            return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,10,98,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,10,43,"        String[] nameSet = getNameSet(locale, id, nameKey);
",2,0,0,2,4,0,8,2,0,12,51,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,10,44,"        return nameSet == null ? null : nameSet[0];
",2,1,1,1,2,1,0,0,0,5,43,5,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,10,48,"        String[] nameSet = getNameSet(locale, id, nameKey);
",2,0,0,2,4,0,8,2,0,12,51,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,10,49,"        return nameSet == null ? null : nameSet[1];
",2,1,1,1,2,1,0,0,0,5,43,5,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,10,53,"        if (locale == null || id == null || nameKey == null) {
",6,5,0,1,3,0,0,0,0,11,54,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,10,54,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,10,57,"        Map<String, Map<String, Object>> byIdCache = iByLocaleCache.get(locale);
",2,0,0,1,2,0,6,10,0,18,72,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,10,58,"        if (byIdCache == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,10,59,"            iByLocaleCache.put(locale, byIdCache = createCache());
",2,0,0,2,4,0,8,0,0,11,54,7,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,10,62,"        Map<String, Object> byNameKeyCache = byIdCache.get(id);
",2,0,0,1,2,0,6,6,0,14,55,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,10,63,"        if (byNameKeyCache == null) {
",2,1,0,1,3,0,0,0,0,3,29,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,10,64,"            byIdCache.put(id, byNameKeyCache = createCache());
",2,0,0,2,4,0,8,0,0,11,50,7,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,10,66,"            String[][] zoneStringsEn = DateTimeUtils.getDateFormatSymbols(Locale.ENGLISH).getZoneStrings();
",6,0,0,4,8,0,6,2,0,14,95,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,10,67,"            String[] setEn = null;
",2,0,0,1,2,0,0,2,0,4,22,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,10,68,"            for (String[] strings : zoneStringsEn) {
",4,0,0,2,5,0,0,2,0,6,40,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,10,69,"              if (strings != null && strings.length == 5 && id.equals(strings[0])) {
",6,4,1,3,7,0,4,0,0,16,70,8,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,10,70,"                setEn = strings;
",4,0,0,0,0,0,0,0,0,5,16,10,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,10,71,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,10,74,"            String[][] zoneStringsLoc = DateTimeUtils.getDateFormatSymbols(locale).getZoneStrings();
",2,0,0,4,8,0,8,2,0,12,88,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,10,75,"            String[] setLoc = null;
",2,0,0,1,2,0,0,2,0,4,23,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,10,76,"            for (String[] strings : zoneStringsLoc) {
",4,0,0,2,5,0,0,2,0,6,41,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,10,77,"              if (strings != null && strings.length == 5 && id.equals(strings[0])) {
",6,4,1,3,7,0,4,0,0,16,70,8,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,10,78,"                setLoc = strings;
",4,0,0,0,0,0,0,0,0,5,17,10,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,10,79,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,10,83,"            if (setEn != null && setLoc != null) {
",4,3,0,1,3,0,0,0,0,7,38,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,10,84,"              byNameKeyCache.put(setEn[2], new String[] {setLoc[2], setLoc[1]});
",0,0,1,6,12,0,4,2,0,12,66,9,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,10,88,"              if (setEn[2].equals(setEn[4])) {
",0,0,1,4,9,0,2,0,0,6,32,9,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,10,89,"                  byNameKeyCache.put(setEn[4] + ""-Summer"", new String[] {setLoc[4], setLoc[3]});
",0,1,1,6,12,0,4,2,0,14,78,11,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,10,91,"                  byNameKeyCache.put(setEn[4], new String[] {setLoc[4], setLoc[3]});
",0,0,1,6,12,0,4,2,0,12,66,11,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,10,95,"        return (String[]) byNameKeyCache.get(nameKey);
",0,0,0,3,6,1,6,2,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,225,"    public DateTimeZoneBuilder() {
",2,0,0,1,3,1,0,0,0,3,30,2,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,226,"        iRuleSets = new ArrayList<RuleSet>(10);
",2,0,0,1,2,0,0,4,0,7,39,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,227,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,96,"            return readFrom((DataInput)in, id);
",2,0,0,2,4,1,4,2,0,8,35,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,112,"            DateTimeZone fixed = new FixedDateTimeZone
",2,0,0,0,0,0,0,4,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,114,"            if (fixed.equals(DateTimeZone.UTC)) {
",4,0,0,2,5,0,4,0,0,8,37,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,115,"                fixed = DateTimeZone.UTC;
",6,0,0,0,0,0,0,0,0,7,25,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,117,"            return fixed;
",2,0,0,0,0,1,0,0,0,2,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,121,"            return PrecalculatedZone.readFrom(in, id);
",0,0,0,1,2,1,8,0,0,8,42,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,123,"            throw new IOException(""Invalid encoding"");
",0,0,0,1,2,0,0,2,0,3,42,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,140,"        if (millis % (30 * 60000L) == 0) {
",2,3,0,2,5,0,0,0,0,5,34,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,142,"            long units = millis / (30 * 60000L);
",4,2,0,1,2,0,0,0,0,6,36,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,143,"            if (((units << (64 - 6)) >> (64 - 6)) == units) {
",4,5,0,5,11,0,0,0,0,9,49,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,145,"                out.writeByte((int)(units & 0x3f));
",2,1,0,3,6,0,4,0,0,7,35,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,146,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,150,"        if (millis % 60000L == 0) {
",2,2,0,1,3,0,0,0,0,4,27,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,152,"            long minutes = millis / 60000L;
",4,1,0,0,0,0,0,0,0,5,31,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,153,"            if (((minutes << (64 - 30)) >> (64 - 30)) == minutes) {
",4,5,0,5,11,0,0,0,0,9,55,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,155,"                out.writeInt(0x40000000 | (int)(minutes & 0x3fffffff));
",2,2,0,3,6,0,4,0,0,8,55,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,156,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,160,"        if (millis % 1000L == 0) {
",2,2,0,1,3,0,0,0,0,4,26,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,162,"            long seconds = millis / 1000L;
",4,1,0,0,0,0,0,0,0,5,30,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,163,"            if (((seconds << (64 - 38)) >> (64 - 38)) == seconds) {
",4,5,0,5,11,0,0,0,0,9,55,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,165,"                out.writeByte(0x80 | (int)((seconds >> 32) & 0x3f));
",2,3,0,4,8,0,4,0,0,9,52,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,166,"                out.writeInt((int)(seconds & 0xffffffff));
",2,1,0,3,6,0,4,0,0,7,42,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,167,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,175,"        out.writeByte(millis < 0 ? 0xff : 0xc0);
",2,1,0,1,2,0,4,0,0,7,40,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,176,"        out.writeLong(millis);
",0,0,0,1,2,0,6,0,0,6,22,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,177,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,215,"        if (""UTC"".equals(id) && id.equals(nameKey) &&
",0,2,0,2,5,0,10,0,0,13,45,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,217,"            return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,219,"        return new FixedDateTimeZone(id, nameKey, wallOffset, standardOffset);
",8,0,0,1,2,1,0,2,0,10,70,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,252,"        if (iRuleSets.size() > 0) {
",0,1,0,2,5,0,4,0,0,5,27,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,253,"            OfYear ofYear = new OfYear
",2,0,0,0,0,0,0,4,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,255,"            RuleSet lastRuleSet = iRuleSets.get(iRuleSets.size() - 1);
",2,1,0,2,4,0,8,2,0,13,58,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,256,"            lastRuleSet.setUpperLimit(year, ofYear);
",0,0,0,1,2,0,8,0,0,8,40,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,258,"        iRuleSets.add(new RuleSet());
",0,0,0,2,4,0,4,2,0,6,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,259,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,268,"        getLastRuleSet().setStandardOffset(standardOffset);
",0,0,0,2,4,0,6,0,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,269,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,276,"        getLastRuleSet().setFixedSavings(nameKey, saveMillis);
",0,0,0,2,4,0,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,277,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,309,"        if (fromYear <= toYear) {
",4,1,0,1,3,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,310,"            OfYear ofYear = new OfYear
",2,0,0,0,0,0,0,4,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,312,"            Recurrence recurrence = new Recurrence(ofYear, nameKey, saveMillis);
",8,0,0,1,2,0,0,4,0,12,68,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,313,"            Rule rule = new Rule(recurrence, fromYear, toYear);
",8,0,0,1,2,0,0,4,0,12,51,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,314,"            getLastRuleSet().addRule(rule);
",0,0,0,2,4,0,6,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,316,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,320,"        if (iRuleSets.size() == 0) {
",0,1,0,2,5,0,4,0,0,5,28,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,321,"            addCutover(Integer.MIN_VALUE, 'w', 1, 1, 0, false, 0);
",4,0,0,1,2,0,2,0,0,8,54,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,323,"        return iRuleSets.get(iRuleSets.size() - 1);
",0,1,0,2,4,1,8,0,0,9,43,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,333,"        if (id == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,334,"            throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,339,"        ArrayList<Transition> transitions = new ArrayList<Transition>();
",2,0,0,1,2,0,0,8,0,10,64,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,343,"        DSTZone tailZone = null;
",2,0,0,0,0,0,0,2,0,4,24,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,345,"        long millis = Long.MIN_VALUE;
",6,0,0,0,0,0,0,0,0,6,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,346,"        int saveMillis = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,348,"        int ruleSetCount = iRuleSets.size();
",2,0,0,1,2,0,4,0,0,6,36,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,349,"        for (int i=0; i<ruleSetCount; i++) {
",8,1,0,1,3,0,0,0,0,10,36,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,350,"            RuleSet rs = iRuleSets.get(i);
",2,0,0,1,2,0,6,2,0,10,30,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,351,"            Transition next = rs.firstTransition(millis);
",2,0,0,1,2,0,6,2,0,10,45,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,352,"            if (next == null) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,353,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,355,"            addTransition(transitions, next);
",0,0,0,1,2,0,6,0,0,6,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,356,"            millis = next.getMillis();
",2,0,0,1,2,0,4,0,0,7,26,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,357,"            saveMillis = next.getSaveMillis();
",2,0,0,1,2,0,4,0,0,7,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,360,"            rs = new RuleSet(rs);
",4,0,0,1,2,0,0,2,0,7,21,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,362,"            while ((next = rs.nextTransition(millis, saveMillis)) != null) {
",2,1,0,3,7,0,8,0,0,12,64,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,363,"                if (addTransition(transitions, next)) {
",0,0,0,2,5,0,6,0,0,6,39,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,364,"                    if (tailZone != null) {
",2,1,0,1,3,0,0,0,0,3,23,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,366,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,369,"                millis = next.getMillis();
",2,0,0,1,2,0,4,0,0,7,26,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,370,"                saveMillis = next.getSaveMillis();
",2,0,0,1,2,0,4,0,0,7,34,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,371,"                if (tailZone == null && i == ruleSetCount - 1) {
",6,4,0,1,3,0,0,0,0,10,48,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,372,"                    tailZone = rs.buildTailZone(id);
",2,0,0,1,2,0,6,0,0,9,32,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,379,"            millis = rs.getUpperLimit(saveMillis);
",2,0,0,1,2,0,6,0,0,9,38,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,383,"        if (transitions.size() == 0) {
",0,1,0,2,5,0,4,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,384,"            if (tailZone != null) {
",2,1,0,1,3,0,0,0,0,3,23,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,386,"                return tailZone;
",2,0,0,0,0,1,0,0,0,2,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,388,"            return buildFixedZone(id, ""UTC"", 0, 0);
",0,0,0,1,2,1,4,0,0,5,39,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,390,"        if (transitions.size() == 1 && tailZone == null) {
",2,3,0,2,5,0,4,0,0,9,50,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,391,"            Transition tr = transitions.get(0);
",2,0,0,1,2,0,4,2,0,8,35,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,392,"            return buildFixedZone(id, tr.getNameKey(),
",0,0,0,1,3,1,8,0,0,8,42,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,396,"        PrecalculatedZone zone = PrecalculatedZone.create(id, outputID, transitions, tailZone);
",2,0,0,1,2,0,12,2,0,16,87,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,397,"        if (zone.isCachable()) {
",0,0,0,2,5,0,4,0,0,4,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,398,"            return CachedDateTimeZone.forZone(zone);
",0,0,0,1,2,1,6,0,0,6,40,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,400,"        return zone;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,404,"        int size = transitions.size();
",2,0,0,1,2,0,4,0,0,6,30,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,405,"        if (size == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,406,"            transitions.add(tr);
",0,0,0,1,2,0,6,0,0,6,20,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,407,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,410,"        Transition last = transitions.get(size - 1);
",4,1,0,1,2,0,4,2,0,11,44,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,411,"        if (!tr.isTransitionFrom(last)) {
",0,0,0,2,5,0,6,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,412,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,417,"        int offsetForLast = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,418,"        if (size >= 2) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,419,"            offsetForLast = transitions.get(size - 2).getWallOffset();
",4,1,0,2,4,0,6,0,0,12,58,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,421,"        int offsetForNew = last.getWallOffset();
",2,0,0,1,2,0,4,0,0,6,40,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,423,"        long lastLocal = last.getMillis() + offsetForLast;
",4,1,0,1,2,0,4,0,0,9,50,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,424,"        long newLocal = tr.getMillis() + offsetForNew;
",4,1,0,1,2,0,4,0,0,9,46,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,426,"        if (newLocal != lastLocal) {
",4,1,0,1,3,0,0,0,0,5,28,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,427,"            transitions.add(tr);
",0,0,0,1,2,0,6,0,0,6,20,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,428,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,431,"        transitions.remove(size - 1);
",2,1,0,1,2,0,4,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,432,"        return addTransition(transitions, tr);
",0,0,0,1,2,1,6,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,443,"        if (out instanceof DataOutput) {
",2,0,0,1,3,0,0,2,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,444,"            writeTo(zoneID, (DataOutput)out);
",2,0,0,2,4,0,4,2,0,8,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,446,"            writeTo(zoneID, (DataOutput)new DataOutputStream(out));
",2,0,0,3,6,0,4,4,0,10,55,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,448,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,459,"        DateTimeZone zone = toDateTimeZone(zoneID, false);
",2,0,0,1,2,0,4,2,0,9,50,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,461,"        if (zone instanceof FixedDateTimeZone) {
",2,0,0,1,3,0,0,2,0,4,40,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,462,"            out.writeByte('F'); // 'F' for fixed
",0,0,0,1,2,0,4,0,0,5,36,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,463,"            out.writeUTF(zone.getNameKey(0));
",0,0,0,2,4,0,8,0,0,8,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,464,"            writeMillis(out, zone.getOffset(0));
",0,0,0,2,4,0,8,0,0,8,36,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,465,"            writeMillis(out, zone.getStandardOffset(0));
",0,0,0,2,4,0,8,0,0,8,44,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,467,"            if (zone instanceof CachedDateTimeZone) {
",2,0,0,1,3,0,0,2,0,4,41,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,468,"                out.writeByte('C'); // 'C' for cached, precalculated
",0,0,0,1,2,0,4,0,0,5,52,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,469,"                zone = ((CachedDateTimeZone)zone).getUncachedZone();
",4,0,0,3,6,0,2,2,0,9,52,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,471,"                out.writeByte('P'); // 'P' for precalculated, uncached
",0,0,0,1,2,0,4,0,0,5,54,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,473,"            ((PrecalculatedZone)zone).writeTo(out);
",2,0,0,3,6,0,4,2,0,8,39,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,475,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1362,"                        index = in.readUnsignedShort();
",2,0,0,1,2,0,4,0,0,7,31,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1365,"                } catch (ArrayIndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,44,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1366,"                    throw new IOException(""Invalid encoding"");
",0,0,0,1,2,0,0,2,0,3,42,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1389,"            int size = transitions.size();
",2,0,0,1,2,0,4,0,0,6,30,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1390,"            if (size == 0) {
",2,1,0,1,3,0,0,0,0,3,16,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1391,"                throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1394,"            long[] trans = new long[size];
",2,0,1,2,4,0,0,0,0,4,30,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1395,"            int[] wallOffsets = new int[size];
",2,0,1,2,4,0,0,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1396,"            int[] standardOffsets = new int[size];
",2,0,1,2,4,0,0,0,0,4,38,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1397,"            String[] nameKeys = new String[size];
",2,0,1,2,4,0,0,4,0,8,37,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1399,"            Transition last = null;
",2,0,0,0,0,0,0,2,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1400,"            for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1401,"                Transition tr = transitions.get(i);
",2,0,0,1,2,0,6,2,0,10,35,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1403,"                if (!tr.isTransitionFrom(last)) {
",0,0,0,2,5,0,6,0,0,7,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1404,"                    throw new IllegalArgumentException(id);
",2,0,0,1,2,0,0,2,0,4,39,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1407,"                trans[i] = tr.getMillis();
",0,0,1,2,4,0,4,0,0,9,26,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1408,"                wallOffsets[i] = tr.getWallOffset();
",0,0,1,2,4,0,4,0,0,9,36,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1409,"                standardOffsets[i] = tr.getStandardOffset();
",0,0,1,2,4,0,4,0,0,9,44,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1410,"                nameKeys[i] = tr.getNameKey();
",0,0,1,2,4,0,4,0,0,9,30,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1412,"                last = tr;
",4,0,0,0,0,0,0,0,0,5,10,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1417,"            String[] zoneNameData = new String[5];
",2,0,0,2,4,0,0,4,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1418,"            String[][] zoneStrings = new DateFormatSymbols(Locale.ENGLISH).getZoneStrings();
",6,0,0,4,8,0,2,4,0,12,80,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1419,"            for (int j = 0; j < zoneStrings.length; j++) {
",10,1,0,1,3,0,0,0,0,12,46,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1420,"                String[] set = zoneStrings[j];
",2,0,1,2,4,0,0,2,0,8,30,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1421,"                if (set != null && set.length == 5 && id.equals(set[0])) {
",6,4,1,3,7,0,4,0,0,16,58,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1422,"                    zoneNameData = set;
",4,0,0,0,0,0,0,0,0,5,19,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1426,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1428,"            for (int i = 0; i < nameKeys.length - 1; i++) {
",10,2,0,1,3,0,0,0,0,13,47,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1429,"                String curNameKey = nameKeys[i];
",2,0,1,1,2,0,0,2,0,8,32,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1430,"                String nextNameKey = nameKeys[i + 1];
",4,1,1,1,2,0,0,2,0,9,37,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1431,"                long curOffset = wallOffsets[i];
",2,0,1,1,2,0,0,0,0,6,32,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1432,"                long nextOffset = wallOffsets[i + 1];
",4,1,1,1,2,0,0,0,0,7,37,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1433,"                long curStdOffset = standardOffsets[i];
",2,0,1,1,2,0,0,0,0,6,39,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1434,"                long nextStdOffset = standardOffsets[i + 1];
",4,1,1,1,2,0,0,0,0,7,44,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1435,"                Period p = new Period(trans[i], trans[i + 1], PeriodType.yearMonthDay(), chrono);
",6,1,1,4,8,0,4,4,0,21,81,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1436,"                if (curOffset != nextOffset &&
",4,8,0,0,1,0,0,0,0,12,30,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1443,"                    if (ZoneInfoCompiler.verbose()) {
",0,0,0,2,5,0,4,0,0,4,33,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1444,"                        System.out.println(""Fixing duplicate name key - "" + nextNameKey);
",6,1,0,1,2,0,2,0,0,10,65,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1445,"                        System.out.println(""     - "" + new DateTime(trans[i], chrono) +
",6,1,1,2,5,0,2,2,0,16,63,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1448,"                    if (curOffset > nextOffset) {
",4,1,0,1,3,0,0,0,0,5,29,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1449,"                        nameKeys[i] = (curNameKey + ""-Summer"").intern();
",2,1,1,3,6,0,2,0,0,11,48,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1450,"                    } else if (curOffset < nextOffset) {
",4,1,0,1,4,0,0,0,0,5,36,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1451,"                        nameKeys[i + 1] = (nextNameKey + ""-Summer"").intern();
",4,2,1,3,6,0,2,0,0,12,53,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1452,"                        i++;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1457,"            if (tailZone != null) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1458,"                if (tailZone.iStartRecurrence.getNameKey()
",4,0,0,1,3,0,2,0,0,6,42,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1460,"                    if (ZoneInfoCompiler.verbose()) {
",0,0,0,2,5,0,4,0,0,4,33,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1461,"                        System.out.println(""Fixing duplicate recurrent name key - "" +
",4,1,0,0,1,0,2,0,0,8,61,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1464,"                    if (tailZone.iStartRecurrence.getSaveMillis() > 0) {
",4,1,0,2,5,0,2,0,0,7,52,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1465,"                        tailZone = new DSTZone(
",2,0,0,0,1,0,0,2,0,5,23,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1471,"                        tailZone = new DSTZone(
",2,0,0,0,1,0,0,2,0,5,23,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1480,"            return new PrecalculatedZone
",0,0,0,0,0,1,0,2,0,2,28,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1509,"            long[] transitions = iTransitions;
",4,0,0,1,2,0,0,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1510,"            int i = Arrays.binarySearch(transitions, instant);
",2,0,0,1,2,0,8,0,0,10,50,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1511,"            if (i >= 0) {
",2,1,0,1,3,0,0,0,0,3,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1512,"                return iNameKeys[i];
",0,0,1,1,2,1,0,0,0,4,20,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1514,"            i = ~i;
",4,0,0,0,0,0,0,0,0,6,7,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1515,"            if (i < transitions.length) {
",6,1,0,1,3,0,0,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1516,"                if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1517,"                    return iNameKeys[i - 1];
",2,1,1,1,2,1,0,0,0,5,24,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1519,"                return ""UTC"";
",0,0,0,0,0,1,0,0,0,1,13,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1521,"            if (iTailZone == null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1522,"                return iNameKeys[i - 1];
",2,1,1,1,2,1,0,0,0,5,24,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1524,"            return iTailZone.getNameKey(instant);
",0,0,0,1,2,1,6,0,0,6,37,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1528,"            long[] transitions = iTransitions;
",4,0,0,1,2,0,0,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1529,"            int i = Arrays.binarySearch(transitions, instant);
",2,0,0,1,2,0,8,0,0,10,50,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1530,"            if (i >= 0) {
",2,1,0,1,3,0,0,0,0,3,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1531,"                return iWallOffsets[i];
",0,0,1,1,2,1,0,0,0,4,23,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1533,"            i = ~i;
",4,0,0,0,0,0,0,0,0,6,7,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1534,"            if (i < transitions.length) {
",6,1,0,1,3,0,0,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1535,"                if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1536,"                    return iWallOffsets[i - 1];
",2,1,1,1,2,1,0,0,0,5,27,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1538,"                return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1540,"            if (iTailZone == null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1541,"                return iWallOffsets[i - 1];
",2,1,1,1,2,1,0,0,0,5,27,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1543,"            return iTailZone.getOffset(instant);
",0,0,0,1,2,1,6,0,0,6,36,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1547,"            long[] transitions = iTransitions;
",4,0,0,1,2,0,0,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1548,"            int i = Arrays.binarySearch(transitions, instant);
",2,0,0,1,2,0,8,0,0,10,50,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1549,"            if (i >= 0) {
",2,1,0,1,3,0,0,0,0,3,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1550,"                return iStandardOffsets[i];
",0,0,1,1,2,1,0,0,0,4,27,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1552,"            i = ~i;
",4,0,0,0,0,0,0,0,0,6,7,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1553,"            if (i < transitions.length) {
",6,1,0,1,3,0,0,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1554,"                if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1555,"                    return iStandardOffsets[i - 1];
",2,1,1,1,2,1,0,0,0,5,31,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1557,"                return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1559,"            if (iTailZone == null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1560,"                return iStandardOffsets[i - 1];
",2,1,1,1,2,1,0,0,0,5,31,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1562,"            return iTailZone.getStandardOffset(instant);
",0,0,0,1,2,1,6,0,0,6,44,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1566,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1570,"            long[] transitions = iTransitions;
",4,0,0,1,2,0,0,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1571,"            int i = Arrays.binarySearch(transitions, instant);
",2,0,0,1,2,0,8,0,0,10,50,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1572,"            i = (i >= 0) ? (i + 1) : ~i;
",8,2,0,2,4,0,0,0,0,12,28,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1573,"            if (i < transitions.length) {
",6,1,0,1,3,0,0,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1574,"                return transitions[i];
",0,0,1,1,2,1,0,0,0,4,22,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1576,"            if (iTailZone == null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1577,"                return instant;
",2,0,0,0,0,1,0,0,0,2,15,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1579,"            long end = transitions[transitions.length - 1];
",6,1,1,1,2,0,0,0,0,9,47,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1580,"            if (instant < end) {
",4,1,0,1,3,0,0,0,0,5,20,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1581,"                instant = end;
",4,0,0,0,0,0,0,0,0,5,14,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1583,"            return iTailZone.nextTransition(instant);
",0,0,0,1,2,1,6,0,0,6,41,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1587,"            long[] transitions = iTransitions;
",4,0,0,1,2,0,0,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1588,"            int i = Arrays.binarySearch(transitions, instant);
",2,0,0,1,2,0,8,0,0,10,50,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1589,"            if (i >= 0) {
",2,1,0,1,3,0,0,0,0,3,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1590,"                if (instant > Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,31,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1591,"                    return instant - 1;
",2,1,0,0,0,1,0,0,0,3,19,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1593,"                return instant;
",2,0,0,0,0,1,0,0,0,2,15,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1595,"            i = ~i;
",4,0,0,0,0,0,0,0,0,6,7,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1596,"            if (i < transitions.length) {
",6,1,0,1,3,0,0,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1597,"                if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1598,"                    long prev = transitions[i - 1];
",4,1,1,1,2,0,0,0,0,7,31,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1599,"                    if (prev > Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,28,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1600,"                        return prev - 1;
",2,1,0,0,0,1,0,0,0,3,16,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1603,"                return instant;
",2,0,0,0,0,1,0,0,0,2,15,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1605,"            if (iTailZone != null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1606,"                long prev = iTailZone.previousTransition(instant);
",2,0,0,1,2,0,6,0,0,8,50,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1607,"                if (prev < instant) {
",4,1,0,1,3,0,0,0,0,5,21,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1608,"                    return prev;
",2,0,0,0,0,1,0,0,0,2,12,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1611,"            long prev = transitions[i - 1];
",4,1,1,1,2,0,0,0,0,7,31,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1612,"            if (prev > Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,28,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1613,"                return prev - 1;
",2,1,0,0,0,1,0,0,0,3,16,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1615,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1619,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1620,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1622,"            if (obj instanceof PrecalculatedZone) {
",2,0,0,1,3,0,0,2,0,4,39,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1623,"                PrecalculatedZone other = (PrecalculatedZone)obj;
",4,0,0,1,2,0,0,4,0,8,49,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1624,"                return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1634,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1638,"            int size = iTransitions.length;
",6,0,0,0,0,0,0,0,0,6,31,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1641,"            Set<String> poolSet = new HashSet<String>();
",2,0,0,1,2,0,0,8,0,10,44,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1642,"            for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1643,"                poolSet.add(iNameKeys[i]);
",0,0,1,2,4,0,4,0,0,8,26,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1646,"            int poolSize = poolSet.size();
",2,0,0,1,2,0,4,0,0,6,30,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1647,"            if (poolSize > 65535) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1648,"                throw new UnsupportedOperationException(""String pool is too large"");
",0,0,0,1,2,0,0,2,0,3,68,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1650,"            String[] pool = new String[poolSize];
",2,0,1,2,4,0,0,4,0,8,37,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1651,"            Iterator<String> it = poolSet.iterator();
",2,0,0,1,2,0,4,4,0,10,41,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1652,"            for (int i=0; it.hasNext(); i++) {
",4,0,0,2,5,0,4,0,0,9,34,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1653,"                pool[i] = it.next();
",0,0,1,2,4,0,4,0,0,9,20,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1657,"            out.writeShort(poolSize);
",0,0,0,1,2,0,6,0,0,6,25,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1658,"            for (int i=0; i<poolSize; i++) {
",8,1,0,1,3,0,0,0,0,10,32,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1659,"                out.writeUTF(pool[i]);
",0,0,1,2,4,0,4,0,0,8,22,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1662,"            out.writeInt(size);
",0,0,0,1,2,0,6,0,0,6,19,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1664,"            for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1665,"                writeMillis(out, iTransitions[i]);
",0,0,1,2,4,0,4,0,0,8,34,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1666,"                writeMillis(out, iWallOffsets[i]);
",0,0,1,2,4,0,4,0,0,8,34,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1667,"                writeMillis(out, iStandardOffsets[i]);
",0,0,1,2,4,0,4,0,0,8,38,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1670,"                String nameKey = iNameKeys[i];
",2,0,1,1,2,0,0,2,0,8,30,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1671,"                for (int j=0; j<poolSize; j++) {
",8,1,0,1,3,0,0,0,0,10,32,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1672,"                    if (pool[j].equals(nameKey)) {
",0,0,1,3,7,0,4,0,0,8,30,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1673,"                        if (poolSize < 256) {
",2,1,0,1,3,0,0,0,0,3,21,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1674,"                            out.writeByte(j);
",0,0,0,1,2,0,6,0,0,6,17,14,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1676,"                            out.writeShort(j);
",0,0,0,1,2,0,6,0,0,6,18,14,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1678,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1683,"            out.writeBoolean(iTailZone != null);
",2,1,0,1,2,0,4,0,0,7,36,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1684,"            if (iTailZone != null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1685,"                iTailZone.writeTo(out);
",0,0,0,1,2,0,6,0,0,6,23,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1687,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1690,"            if (iTailZone != null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1691,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1693,"            long[] transitions = iTransitions;
",4,0,0,1,2,0,0,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1694,"            if (transitions.length <= 1) {
",4,1,0,1,3,0,0,0,0,5,30,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1695,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1700,"            double distances = 0;
",2,0,0,0,0,0,0,0,0,2,21,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1701,"            int count = 0;
",2,0,0,0,0,0,0,0,0,2,14,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1703,"            for (int i=1; i<transitions.length; i++) {
",10,1,0,1,3,0,0,0,0,12,42,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1704,"                long diff = transitions[i] - transitions[i - 1];
",4,2,1,2,4,0,0,0,0,12,48,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1705,"                if (diff < ((366L + 365) * 24 * 60 * 60 * 1000)) {
",2,3,0,3,7,0,0,0,0,5,50,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1706,"                    distances += (double)diff;
",4,0,0,1,2,0,0,0,0,5,26,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1707,"                    count++;
",2,0,0,0,0,0,0,0,0,3,8,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1711,"            if (count > 0) {
",2,1,0,1,3,0,0,0,0,3,16,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1712,"                double avg = distances / count;
",6,1,0,0,0,0,0,0,0,7,31,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1713,"                avg /= 24 * 60 * 60 * 1000;
",2,1,0,0,0,0,0,0,0,4,27,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1714,"                if (avg >= 25) {
",2,1,0,1,3,0,0,0,0,3,16,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1721,"                    return true;
",0,0,0,0,0,1,0,0,0,1,12,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1725,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,40,"        } catch (SecurityException e) {
",2,0,0,1,4,0,0,2,0,4,31,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,41,"            i = null;
",2,0,0,0,0,0,0,0,0,3,9,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,50,"            cacheSize = i.intValue();
",2,0,0,1,2,0,4,0,0,7,25,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,52,"            cacheSize--;
",2,0,0,0,0,0,0,0,0,3,12,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,53,"            int shift = 0;
",2,0,0,0,0,0,0,0,0,2,14,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,54,"            while (cacheSize > 0) {
",2,1,0,1,3,0,0,0,0,3,23,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,55,"                shift++;
",2,0,0,0,0,0,0,0,0,3,8,8,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,56,"                cacheSize >>= 1;
",2,0,0,0,0,0,0,0,0,3,16,8,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,58,"            cacheSize = 1 << shift;
",4,1,0,0,0,0,0,0,0,6,23,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,69,"            return (CachedDateTimeZone)zone;
",2,0,0,1,2,1,0,2,0,4,32,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,95,"        return iZone;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,99,"        return getInfo(instant).getNameKey(instant);
",0,0,0,2,4,1,8,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,103,"        return getInfo(instant).getOffset(instant);
",0,0,0,2,4,1,8,0,0,8,43,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,107,"        return getInfo(instant).getStandardOffset(instant);
",0,0,0,2,4,1,8,0,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,111,"        return iZone.isFixed();
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,115,"        return iZone.nextTransition(instant);
",0,0,0,1,2,1,6,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,119,"        return iZone.previousTransition(instant);
",0,0,0,1,2,1,6,0,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,127,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,128,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,130,"        if (obj instanceof CachedDateTimeZone) {
",2,0,0,1,3,0,0,2,0,4,40,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,131,"            return iZone.equals(((CachedDateTimeZone)obj).iZone);
",4,0,0,3,6,1,4,2,0,10,53,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,133,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,140,"        int period = (int)(millis >> 32);
",4,1,0,2,4,0,0,0,0,5,33,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,141,"        Info[] cache = iInfoCache;
",4,0,0,1,2,0,0,2,0,6,26,4,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,142,"        int index = period & cInfoCacheMask;
",6,1,0,0,0,0,0,0,0,7,36,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,143,"        Info info = cache[index];
",2,0,1,1,2,0,0,2,0,8,25,4,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,144,"        if (info == null || (int)((info.iPeriodStart >> 32)) != period) {
",8,4,0,4,9,0,0,0,0,12,65,4,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,145,"            info = createInfo(millis);
",2,0,0,1,2,0,4,0,0,7,26,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,146,"            cache[index] = info;
",2,0,1,1,2,0,0,0,0,7,20,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,148,"        return info;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,152,"        long periodStart = millis & (0xffffffffL << 32);
",4,2,0,1,2,0,0,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,153,"        Info info = new Info(iZone, periodStart);
",6,0,0,1,2,0,0,4,0,10,41,4,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,155,"        long end = periodStart | 0xffffffffL;
",4,1,0,0,0,0,0,0,0,5,37,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,156,"        Info chain = info;
",4,0,0,0,0,0,0,2,0,6,18,4,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,158,"            long next = iZone.nextTransition(periodStart);
",2,0,0,1,2,0,6,0,0,8,46,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,159,"            if (next == periodStart || next > end) {
",8,3,0,1,3,0,0,0,0,11,40,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,160,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,162,"            periodStart = next;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,163,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));
",10,0,0,2,4,0,0,2,0,14,57,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,164,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,166,"        return info;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,963,"        RuleSet() {
",2,0,0,1,3,0,0,0,0,2,11,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,964,"            iRules = new ArrayList<Rule>(10);
",2,0,0,1,2,0,0,4,0,7,33,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,965,"            iUpperYear = Integer.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,7,31,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,966,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,971,"        RuleSet(RuleSet rs) {
",4,0,0,1,3,0,0,2,0,6,21,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,972,"            iStandardOffset = rs.iStandardOffset;
",6,0,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,973,"            iRules = new ArrayList<Rule>(rs.iRules);
",6,0,0,1,2,0,0,4,0,11,40,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,974,"            iInitialNameKey = rs.iInitialNameKey;
",6,0,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,975,"            iInitialSaveMillis = rs.iInitialSaveMillis;
",6,0,0,0,0,0,0,0,0,7,43,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,976,"            iUpperYear = rs.iUpperYear;
",6,0,0,0,0,0,0,0,0,7,27,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,977,"            iUpperOfYear = rs.iUpperOfYear;
",6,0,0,0,0,0,0,0,0,7,31,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,978,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,948,"            long now = DateTimeUtils.currentTimeMillis();
",2,0,0,1,2,0,4,0,0,6,45,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,949,"            YEAR_LIMIT = ISOChronology.getInstanceUTC().year().get(now) + 100;
",2,1,0,3,6,0,10,0,0,14,66,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,950,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,981,"            return iStandardOffset;
",2,0,0,0,0,1,0,0,0,2,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,985,"            iStandardOffset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,33,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,986,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,989,"            iInitialNameKey = nameKey;
",4,0,0,0,0,0,0,0,0,5,26,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,990,"            iInitialSaveMillis = saveMillis;
",4,0,0,0,0,0,0,0,0,5,32,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,991,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,994,"            if (!iRules.contains(rule)) {
",0,0,0,2,5,0,6,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,995,"                iRules.add(rule);
",0,0,0,1,2,0,6,0,0,6,17,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,997,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1000,"            iUpperYear = year;
",4,0,0,0,0,0,0,0,0,5,18,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1001,"            iUpperOfYear = ofYear;
",4,0,0,0,0,0,0,0,0,5,22,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1002,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1011,"            if (iInitialNameKey != null) {
",2,1,0,1,3,0,0,0,0,3,30,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1013,"                return new Transition(firstMillis, iInitialNameKey,
",4,0,0,0,1,1,0,2,0,6,51,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1018,"            ArrayList<Rule> copy = new ArrayList<Rule>(iRules);
",4,0,0,1,2,0,0,8,0,12,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1024,"            long millis = Long.MIN_VALUE;
",6,0,0,0,0,0,0,0,0,6,29,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1025,"            int saveMillis = 0;
",2,0,0,0,0,0,0,0,0,2,19,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1026,"            Transition first = null;
",2,0,0,0,0,0,0,2,0,4,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1029,"            while ((next = nextTransition(millis, saveMillis)) != null) {
",2,1,0,3,7,0,6,0,0,11,61,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1030,"                millis = next.getMillis();
",2,0,0,1,2,0,4,0,0,7,26,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1032,"                if (millis == firstMillis) {
",4,1,0,1,3,0,0,0,0,5,28,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1033,"                    first = new Transition(firstMillis, next);
",6,0,0,1,2,0,0,2,0,9,42,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1034,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1037,"                if (millis > firstMillis) {
",4,1,0,1,3,0,0,0,0,5,27,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1038,"                    if (first == null) {
",2,1,0,1,3,0,0,0,0,3,20,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1042,"                        for (Rule rule : copy) {
",4,0,0,1,3,0,0,2,0,6,24,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1043,"                            if (rule.getSaveMillis() == 0) {
",0,1,0,2,5,0,4,0,0,5,32,13,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1044,"                                first = new Transition(firstMillis, rule, iStandardOffset);
",8,0,0,1,2,0,0,2,0,11,59,15,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1045,"                                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1047,"                        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1049,"                    if (first == null) {
",2,1,0,1,3,0,0,0,0,3,20,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1053,"                        first = new Transition(firstMillis, next.getNameKey(),
",4,0,0,1,3,0,4,2,0,11,54,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1061,"                first = new Transition(firstMillis, next);
",6,0,0,1,2,0,0,2,0,9,42,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1063,"                saveMillis = next.getSaveMillis();
",2,0,0,1,2,0,4,0,0,7,34,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1066,"            iRules = copy;
",4,0,0,0,0,0,0,0,0,5,14,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1067,"            return first;
",2,0,0,0,0,1,0,0,0,2,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1082,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1085,"            Rule nextRule = null;
",2,0,0,0,0,0,0,2,0,4,21,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1086,"            long nextMillis = Long.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,6,33,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1088,"            Iterator<Rule> it = iRules.iterator();
",2,0,0,1,2,0,4,4,0,10,38,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1089,"            while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1090,"                Rule rule = it.next();
",2,0,0,1,2,0,4,2,0,8,22,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1091,"                long next = rule.next(instant, iStandardOffset, saveMillis);
",2,0,0,1,2,0,10,0,0,12,60,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1092,"                if (next <= instant) {
",4,1,0,1,3,0,0,0,0,5,22,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1093,"                    it.remove();
",0,0,0,1,2,0,4,0,0,4,12,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1094,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1098,"                if (next <= nextMillis) {
",4,1,0,1,3,0,0,0,0,5,25,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1100,"                    nextRule = rule;
",4,0,0,0,0,0,0,0,0,5,16,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1101,"                    nextMillis = next;
",4,0,0,0,0,0,0,0,0,5,18,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1103,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1105,"            if (nextRule == null) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1106,"                return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1110,"            if (chrono.year().get(nextMillis) >= YEAR_LIMIT) {
",2,1,0,3,7,0,8,0,0,11,50,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1111,"                return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1115,"            if (iUpperYear < Integer.MAX_VALUE) {
",6,1,0,1,3,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1116,"                long upperMillis =
",2,0,0,0,0,0,0,0,0,2,18,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1118,"                if (nextMillis >= upperMillis) {
",4,1,0,1,3,0,0,0,0,5,32,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1120,"                    return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1124,"            return new Transition(nextMillis, nextRule, iStandardOffset);
",6,0,0,1,2,1,0,2,0,8,61,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1131,"            if (iUpperYear == Integer.MAX_VALUE) {
",6,1,0,1,3,0,0,0,0,7,38,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1132,"                return Long.MAX_VALUE;
",4,0,0,0,0,1,0,0,0,4,22,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1134,"            return iUpperOfYear.setInstant(iUpperYear, iStandardOffset, saveMillis);
",0,0,0,1,2,1,10,0,0,10,72,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1141,"            if (iRules.size() == 2) {
",0,1,0,2,5,0,4,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1142,"                Rule startRule = iRules.get(0);
",2,0,0,1,2,0,4,2,0,8,31,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1143,"                Rule endRule = iRules.get(1);
",2,0,0,1,2,0,4,2,0,8,29,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1144,"                if (startRule.getToYear() == Integer.MAX_VALUE &&
",4,2,0,1,3,0,4,0,0,10,49,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1154,"                    return new DSTZone(id, iStandardOffset,
",4,0,0,0,1,1,0,2,0,6,39,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,1158,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,816,"        Rule(Recurrence recurrence, int fromYear, int toYear) {
",8,0,0,1,3,0,0,2,0,10,55,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,817,"            iRecurrence = recurrence;
",4,0,0,0,0,0,0,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,818,"            iFromYear = fromYear;
",4,0,0,0,0,0,0,0,0,5,21,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,819,"            iToYear = toYear;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,820,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,823,"            return iFromYear;
",2,0,0,0,0,1,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,827,"            return iToYear;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,831,"            return iRecurrence.getOfYear();
",0,0,0,1,2,1,4,0,0,4,31,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,835,"            return iRecurrence.getNameKey();
",0,0,0,1,2,1,4,0,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,839,"            return iRecurrence.getSaveMillis();
",0,0,0,1,2,1,4,0,0,4,35,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,843,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,845,"            final int wallOffset = standardOffset + saveMillis;
",6,1,0,0,0,1,0,0,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,846,"            long testInstant = instant;
",4,0,0,0,0,0,0,0,0,4,27,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,849,"            if (instant == Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,32,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,850,"                year = Integer.MIN_VALUE;
",6,0,0,0,0,0,0,0,0,7,25,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,852,"                year = chrono.year().get(instant + wallOffset);
",6,1,0,2,4,0,6,0,0,14,47,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,855,"            if (year < iFromYear) {
",4,1,0,1,3,0,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,857,"                testInstant = chrono.year().set(0, iFromYear) - wallOffset;
",4,1,0,2,4,0,8,0,0,14,59,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,860,"                testInstant -= 1;
",2,0,0,0,0,0,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,863,"            long next = iRecurrence.next(testInstant, standardOffset, saveMillis);
",2,0,0,1,2,0,10,0,0,12,70,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,865,"            if (next > instant) {
",4,1,0,1,3,0,0,0,0,5,21,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,866,"                year = chrono.year().get(next + wallOffset);
",6,1,0,2,4,0,6,0,0,14,44,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,867,"                if (year > iToYear) {
",4,1,0,1,3,0,0,0,0,5,21,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,869,"                    next = instant;
",4,0,0,0,0,0,0,0,0,5,15,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,873,"            return next;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,754,"            return iOfYear;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,761,"            return iOfYear.next(instant, standardOffset, saveMillis);
",0,0,0,1,2,1,10,0,0,10,57,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,768,"            return iOfYear.previous(instant, standardOffset, saveMillis);
",0,0,0,1,2,1,10,0,0,10,61,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,772,"            return iNameKey;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,776,"            return iSaveMillis;
",2,0,0,0,0,1,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,780,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,781,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,783,"            if (obj instanceof Recurrence) {
",2,0,0,1,3,0,0,2,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,784,"                Recurrence other = (Recurrence)obj;
",4,0,0,1,2,0,0,4,0,8,35,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,785,"                return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,790,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,794,"            iOfYear.writeTo(out);
",0,0,0,1,2,0,6,0,0,6,21,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,795,"            out.writeUTF(iNameKey);
",0,0,0,1,2,0,6,0,0,6,23,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,796,"            writeMillis(out, iSaveMillis);
",0,0,0,1,2,0,6,0,0,6,30,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,797,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,800,"            return new Recurrence(iOfYear, nameKey, iSaveMillis);
",6,0,0,1,2,1,0,2,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,10,804,"            return rename((iNameKey + appendNameKey).intern());
",4,1,0,3,6,1,4,0,0,9,51,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,180,"        Info(DateTimeZone zone, long periodStart) {
",6,0,0,1,3,0,0,2,0,8,43,3,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,177,"        private int iOffset = Integer.MIN_VALUE;
",6,0,0,0,0,1,0,0,0,7,40,3,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,178,"        private int iStandardOffset = Integer.MIN_VALUE;
",6,0,0,0,0,1,0,0,0,7,48,3,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,181,"            iPeriodStart = periodStart;
",4,0,0,0,0,0,0,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,182,"            iZoneRef = zone;
",4,0,0,0,0,0,0,0,0,5,16,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,183,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,186,"            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {
",8,3,0,1,3,0,0,0,0,11,59,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,187,"                if (iNameKey == null) {
",2,1,0,1,3,0,0,0,0,3,23,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,188,"                    iNameKey = iZoneRef.getNameKey(iPeriodStart);
",2,0,0,1,2,0,6,0,0,9,45,9,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,190,"                return iNameKey;
",2,0,0,0,0,1,0,0,0,2,16,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,192,"            return iNextInfo.getNameKey(millis);
",0,0,0,1,2,1,6,0,0,6,36,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,196,"            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {
",8,3,0,1,3,0,0,0,0,11,59,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,197,"                if (iOffset == Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,35,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,198,"                    iOffset = iZoneRef.getOffset(iPeriodStart);
",2,0,0,1,2,0,6,0,0,9,43,9,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,200,"                return iOffset;
",2,0,0,0,0,1,0,0,0,2,15,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,202,"            return iNextInfo.getOffset(millis);
",0,0,0,1,2,1,6,0,0,6,35,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,206,"            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {
",8,3,0,1,3,0,0,0,0,11,59,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,207,"                if (iStandardOffset == Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,43,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,208,"                    iStandardOffset = iZoneRef.getStandardOffset(iPeriodStart);
",2,0,0,1,2,0,6,0,0,9,59,9,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,210,"                return iStandardOffset;
",2,0,0,0,0,1,0,0,0,2,23,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,10,212,"            return iNextInfo.getStandardOffset(millis);
",0,0,0,1,2,1,6,0,0,6,43,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,1282,"        Stub(String id) {
",4,0,0,1,3,0,0,2,0,6,17,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,1283,"            iID = id;
",4,0,0,0,0,0,0,0,0,5,9,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,1284,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,1287,"            out.writeUTF(iID);
",0,0,0,1,2,0,6,0,0,6,18,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,1288,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,1291,"            iID = in.readUTF();
",2,0,0,1,2,0,4,0,0,7,19,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,1292,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,10,1295,"            return forID(iID);
",0,0,0,1,2,1,4,0,0,4,18,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1475,"                DateTimeField field = iFieldType.getField(chrono);
",2,0,0,1,2,0,6,2,0,10,50,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1476,"                FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);
",0,0,0,2,4,0,14,0,0,14,76,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1479,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1477,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1478,"                appendUnknownString(buf, iMinPrintedDigits);
",0,0,0,1,2,0,6,0,0,6,44,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1480,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1486,"                DateTimeField field = iFieldType.getField(chrono);
",2,0,0,1,2,0,6,2,0,10,50,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1487,"                FormatUtils.writePaddedInteger(out, field.get(instant), iMinPrintedDigits);
",0,0,0,2,4,0,14,0,0,14,75,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1490,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1488,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1489,"                printUnknownString(out, iMinPrintedDigits);
",0,0,0,1,2,0,6,0,0,6,43,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1491,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1494,"            if (partial.isSupported(iFieldType)) {
",0,0,0,2,5,0,6,0,0,6,38,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1496,"                    FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);
",0,0,0,2,4,0,14,0,0,14,81,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1499,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1497,"                } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1498,"                    appendUnknownString(buf, iMinPrintedDigits);
",0,0,0,1,2,0,6,0,0,6,44,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1501,"                appendUnknownString(buf, iMinPrintedDigits);
",0,0,0,1,2,0,6,0,0,6,44,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1503,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1506,"            if (partial.isSupported(iFieldType)) {
",0,0,0,2,5,0,6,0,0,6,38,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1508,"                    FormatUtils.writePaddedInteger(out, partial.get(iFieldType), iMinPrintedDigits);
",0,0,0,2,4,0,14,0,0,14,80,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1511,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1509,"                } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1510,"                    printUnknownString(out, iMinPrintedDigits);
",0,0,0,1,2,0,6,0,0,6,43,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1513,"                printUnknownString(out, iMinPrintedDigits);
",0,0,0,1,2,0,6,0,0,6,43,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1515,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1330,"            int limit = Math.min(iMaxParsedDigits, text.length() - position);
",4,1,0,2,4,0,10,0,0,15,65,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1332,"            boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1333,"            int length = 0;
",2,0,0,0,0,0,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1334,"            while (length < limit) {
",4,1,0,1,3,0,0,0,0,5,24,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1335,"                char c = text.charAt(position + length);
",6,1,0,1,2,0,4,0,0,11,40,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1336,"                if (length == 0 && (c == '-' || c == '+') && iSigned) {
",8,6,0,2,5,0,0,0,0,16,55,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1337,"                    negative = c == '-';
",4,1,0,0,0,0,0,0,0,7,20,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1340,"                    if (length + 1 >= limit || 
",4,4,0,0,1,0,0,0,0,8,26,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1343,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1346,"                    if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1347,"                        length++;
",2,0,0,0,0,0,0,0,0,3,9,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1350,"                        position++;
",2,0,0,0,0,0,0,0,0,3,11,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1353,"                    limit = Math.min(limit + 1, text.length() - position);
",6,2,0,2,4,0,8,0,0,17,54,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1354,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1356,"                if (c < '0' || c > '9') {
",4,3,0,1,3,0,0,0,0,9,25,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1357,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1359,"                length++;
",2,0,0,0,0,0,0,0,0,3,9,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1360,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1362,"            if (length == 0) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1363,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1367,"            if (length >= 9) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1370,"                value = Integer.parseInt(text.substring(position, position += length));
",6,0,0,2,4,0,10,0,0,18,71,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1372,"                int i = position;
",4,0,0,0,0,0,0,0,0,4,17,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1373,"                if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1374,"                    i++;
",2,0,0,0,0,0,0,0,0,3,4,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1377,"                    value = text.charAt(i++) - '0';
",4,1,0,1,2,0,4,0,0,12,31,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1380,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1378,"                } catch (StringIndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,45,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1379,"                    return ~position;
",2,0,0,0,0,1,0,0,0,3,17,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1381,"                position += length;
",4,0,0,0,0,0,0,0,0,5,19,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1382,"                while (i < position) {
",4,1,0,1,3,0,0,0,0,5,22,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1383,"                    value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';
",8,5,0,4,8,0,4,0,0,20,63,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1385,"                if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1386,"                    value = -value;
",4,0,0,0,0,0,0,0,0,6,15,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1390,"            bucket.saveField(iFieldType, value);
",0,0,0,1,2,0,8,0,0,8,36,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1391,"            return position;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,117,"        throw new UnsupportedOperationException(""Both printing and parsing not supported"");
",0,0,0,1,2,0,0,2,0,3,83,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,133,"        Object f = getFormatter();
",2,0,0,1,2,0,2,2,0,6,26,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,134,"        if (isPrinter(f)) {
",0,0,0,2,5,0,4,0,0,4,19,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,135,"            return (DateTimePrinter) f;
",2,0,0,1,2,1,0,2,0,4,27,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,137,"        throw new UnsupportedOperationException(""Printing is not supported"");
",0,0,0,1,2,0,0,2,0,3,69,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,157,"        throw new UnsupportedOperationException(""Parsing is not supported"");
",0,0,0,1,2,0,0,2,0,3,68,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,168,"        return isFormatter(getFormatter());
",0,0,0,2,4,1,4,0,0,4,35,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,178,"        return isPrinter(getFormatter());
",0,0,0,2,4,1,4,0,0,4,33,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,188,"        return isParser(getFormatter());
",0,0,0,2,4,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,197,"        iFormatter = null;
",2,0,0,0,0,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,198,"        iElementPairs.clear();
",0,0,0,1,2,0,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,199,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,218,"            throw new IllegalArgumentException(""No formatter supplied"");
",0,0,0,1,2,0,0,2,0,3,60,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,238,"        checkPrinter(printer);
",0,0,0,1,2,0,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,239,"        return append0(printer, null);
",0,0,0,1,2,1,4,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,257,"        checkParser(parser);
",0,0,0,1,2,0,4,0,0,4,20,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,258,"        return append0(null, parser);
",0,0,0,1,2,1,4,0,0,5,29,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,276,"        checkPrinter(printer);
",0,0,0,1,2,0,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,277,"        checkParser(parser);
",0,0,0,1,2,0,4,0,0,4,20,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,278,"        return append0(printer, parser);
",0,0,0,1,2,1,6,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,306,"            checkPrinter(printer);
",0,0,0,1,2,0,4,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,309,"            throw new IllegalArgumentException(""No parsers supplied"");
",0,0,0,1,2,0,0,2,0,3,58,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,313,"            if (parsers[0] == null) {
",0,1,1,2,5,0,0,0,0,3,25,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,314,"                throw new IllegalArgumentException(""No parser supplied"");
",0,0,0,1,2,0,0,2,0,3,57,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,316,"            return append0(printer, parsers[0]);
",0,0,1,2,4,1,4,0,0,6,36,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,323,"                throw new IllegalArgumentException(""Incomplete parser array"");
",0,0,0,1,2,0,0,2,0,3,62,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,358,"            throw new IllegalArgumentException(""No parser supplied"");
",0,0,0,1,2,0,0,2,0,3,57,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,368,"        if (printer == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,369,"            throw new IllegalArgumentException(""No printer supplied"");
",0,0,0,1,2,0,0,2,0,3,58,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,371,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,409,"            throw new IllegalArgumentException(""Literal must not be null"");
",0,0,0,1,2,0,0,2,0,4,63,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,413,"                return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,415,"                return append0(new CharacterLiteral(text.charAt(0)));
",0,0,0,3,6,1,6,2,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,435,"            throw new IllegalArgumentException(""Field type must not be null"");
",0,0,0,1,2,0,0,2,0,4,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,438,"            maxDigits = minDigits;
",4,0,0,0,0,0,0,0,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,441,"            throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,464,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,465,"            throw new IllegalArgumentException(""Field type must not be null"");
",0,0,0,1,2,0,0,2,0,4,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,467,"        if (numDigits <= 0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,468,"            throw new IllegalArgumentException(""Illegal number of digits: "" + numDigits);
",2,1,0,1,2,0,0,2,0,6,77,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,470,"        return append0(new FixedNumber(fieldType, numDigits, false));
",4,0,0,2,4,1,2,2,0,9,61,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,487,"            throw new IllegalArgumentException(""Field type must not be null"");
",0,0,0,1,2,0,0,2,0,4,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,490,"            maxDigits = minDigits;
",4,0,0,0,0,0,0,0,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,493,"            throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,496,"            return append0(new UnpaddedNumber(fieldType, maxDigits, true));
",4,0,0,2,4,1,2,2,0,9,63,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,516,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,517,"            throw new IllegalArgumentException(""Field type must not be null"");
",0,0,0,1,2,0,0,2,0,4,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,519,"        if (numDigits <= 0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,520,"            throw new IllegalArgumentException(""Illegal number of digits: "" + numDigits);
",2,1,0,1,2,0,0,2,0,6,77,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,522,"        return append0(new FixedNumber(fieldType, numDigits, true));
",4,0,0,2,4,1,2,2,0,9,60,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,534,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,535,"            throw new IllegalArgumentException(""Field type must not be null"");
",0,0,0,1,2,0,0,2,0,4,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,537,"        return append0(new TextField(fieldType, false));
",2,0,0,2,4,1,2,2,0,7,48,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,549,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,550,"            throw new IllegalArgumentException(""Field type must not be null"");
",0,0,0,1,2,0,0,2,0,4,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,552,"        return append0(new TextField(fieldType, true));
",2,0,0,2,4,1,2,2,0,7,47,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,570,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,571,"            throw new IllegalArgumentException(""Field type must not be null"");
",0,0,0,1,2,0,0,2,0,4,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,573,"        if (maxDigits < minDigits) {
",4,1,0,1,3,0,0,0,0,5,28,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,574,"            maxDigits = minDigits;
",4,0,0,0,0,0,0,0,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,576,"        if (minDigits < 0 || maxDigits <= 0) {
",4,3,0,1,3,0,0,0,0,7,38,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,577,"            throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,579,"        return append0(new Fraction(fieldType, minDigits, maxDigits));
",6,0,0,2,4,1,2,2,0,10,62,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,597,"        return appendFraction(DateTimeFieldType.secondOfDay(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,77,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,614,"        return appendFraction(DateTimeFieldType.minuteOfDay(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,77,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,631,"        return appendFraction(DateTimeFieldType.hourOfDay(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,75,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,648,"        return appendFraction(DateTimeFieldType.dayOfYear(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,75,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,665,"        return appendDecimal(DateTimeFieldType.millisOfSecond(), minDigits, 3);
",0,0,0,2,4,1,8,0,0,8,71,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,675,"        return appendDecimal(DateTimeFieldType.millisOfDay(), minDigits, 8);
",0,0,0,2,4,1,8,0,0,8,68,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,685,"        return appendDecimal(DateTimeFieldType.secondOfMinute(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,71,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,695,"        return appendDecimal(DateTimeFieldType.secondOfDay(), minDigits, 5);
",0,0,0,2,4,1,8,0,0,8,68,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,705,"        return appendDecimal(DateTimeFieldType.minuteOfHour(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,69,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,715,"        return appendDecimal(DateTimeFieldType.minuteOfDay(), minDigits, 4);
",0,0,0,2,4,1,8,0,0,8,68,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,725,"        return appendDecimal(DateTimeFieldType.hourOfDay(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,66,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,735,"        return appendDecimal(DateTimeFieldType.clockhourOfDay(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,71,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,745,"        return appendDecimal(DateTimeFieldType.hourOfHalfday(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,70,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,755,"        return appendDecimal(DateTimeFieldType.clockhourOfHalfday(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,75,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,851,"        return appendTwoDigitYear(pivot, false);
",0,0,0,1,2,1,4,0,0,5,40,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,869,"        return append0(new TwoDigitYear(DateTimeFieldType.year(), pivot, lenientParse));
",4,0,0,3,6,1,6,2,0,12,80,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,891,"        return appendTwoDigitWeekyear(pivot, false);
",0,0,0,1,2,1,4,0,0,5,44,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,909,"        return append0(new TwoDigitYear(DateTimeFieldType.weekyear(), pivot, lenientParse));
",4,0,0,3,6,1,6,2,0,12,84,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,921,"        return appendDecimal(DateTimeFieldType.yearOfEra(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,74,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,933,"        return appendDecimal(DateTimeFieldType.yearOfCentury(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,78,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,945,"        return appendSignedDecimal(DateTimeFieldType.centuryOfEra(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,83,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,955,"        return appendText(DateTimeFieldType.halfdayOfDay());
",0,0,0,2,4,1,6,0,0,6,52,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,965,"        return appendText(DateTimeFieldType.dayOfWeek());
",0,0,0,2,4,1,6,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,976,"        return appendShortText(DateTimeFieldType.dayOfWeek());
",0,0,0,2,4,1,6,0,0,6,54,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,987,"        return appendText(DateTimeFieldType.monthOfYear());
",0,0,0,2,4,1,6,0,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,997,"        return appendShortText(DateTimeFieldType.monthOfYear());
",0,0,0,2,4,1,6,0,0,6,56,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1007,"        return appendText(DateTimeFieldType.era());
",0,0,0,2,4,1,6,0,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1018,"        return append0(new TimeZoneName(TimeZoneName.LONG_NAME, null), null);
",4,0,0,2,4,1,2,2,0,10,69,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1031,"        TimeZoneName pp = new TimeZoneName(TimeZoneName.LONG_NAME, parseLookup);
",8,0,0,1,2,0,0,4,0,12,72,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1032,"        return append0(pp, pp);
",0,0,0,1,2,1,6,0,0,6,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1043,"        return append0(new TimeZoneName(TimeZoneName.SHORT_NAME, null), null);
",4,0,0,2,4,1,2,2,0,10,70,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1057,"        TimeZoneName pp = new TimeZoneName(TimeZoneName.SHORT_NAME, parseLookup);
",8,0,0,1,2,0,0,4,0,12,73,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1058,"        return append0(pp, pp);
",0,0,0,1,2,1,6,0,0,6,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1068,"        return append0(TimeZoneId.INSTANCE, TimeZoneId.INSTANCE);
",8,0,0,1,2,1,2,0,0,10,57,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1091,"        return append0(new TimeZoneOffset
",0,0,0,0,1,1,2,2,0,4,33,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1118,"        return append0(new TimeZoneOffset
",0,0,0,0,1,1,2,2,0,4,33,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1132,"        DateTimeFormat.appendPatternTo(this, pattern);
",0,0,0,1,2,0,6,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1133,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1181,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1185,"        return (isPrinter(f) || isParser(f));
",0,1,0,3,6,1,8,0,0,9,37,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1189,"        for (int i = len; --i >= 0;) {
",6,1,0,1,3,0,0,0,0,8,30,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1190,"            buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1192,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1195,"        for (int i = len; --i >= 0;) {
",6,1,0,1,3,0,0,0,0,8,30,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1196,"            out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1198,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2814,"            DateTimeParser[] parsers = iParsers;
",4,0,0,1,2,0,0,2,0,6,36,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2815,"            int length = parsers.length;
",6,0,0,0,0,0,0,0,0,6,28,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2817,"            final Object originalState = bucket.saveState();
",2,0,0,1,2,1,4,2,0,9,48,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2818,"            boolean isOptional = false;
",2,0,0,0,0,0,0,0,0,3,27,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2820,"            int bestValidPos = position;
",4,0,0,0,0,0,0,0,0,4,28,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2821,"            Object bestValidState = null;
",2,0,0,0,0,0,0,2,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2823,"            int bestInvalidPos = position;
",4,0,0,0,0,0,0,0,0,4,30,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2825,"            for (int i=0; i<length; i++) {
",8,1,0,1,3,0,0,0,0,10,30,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2826,"                DateTimeParser parser = parsers[i];
",2,0,1,1,2,0,0,2,0,8,35,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2827,"                if (parser == null) {
",2,1,0,1,3,0,0,0,0,3,21,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2829,"                    if (bestValidPos <= position) {
",4,1,0,1,3,0,0,0,0,5,31,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2830,"                        return position;
",2,0,0,0,0,1,0,0,0,2,16,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2832,"                    isOptional = true;
",2,0,0,0,0,0,0,0,0,4,18,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2833,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2835,"                int parsePos = parser.parseInto(bucket, text, position);
",2,0,0,1,2,0,10,0,0,12,56,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2836,"                if (parsePos >= position) {
",4,1,0,1,3,0,0,0,0,5,27,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2837,"                    if (parsePos > bestValidPos) {
",4,1,0,1,3,0,0,0,0,5,30,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2838,"                        if (parsePos >= text.length() ||
",2,3,0,1,3,0,4,0,0,9,32,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2843,"                            return parsePos;
",2,0,0,0,0,1,0,0,0,2,16,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2845,"                        bestValidPos = parsePos;
",4,0,0,0,0,0,0,0,0,5,24,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2846,"                        bestValidState = bucket.saveState();
",2,0,0,1,2,0,4,0,0,7,36,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2849,"                    if (parsePos < 0) {
",2,1,0,1,3,0,0,0,0,3,19,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2850,"                        parsePos = ~parsePos;
",4,0,0,0,0,0,0,0,0,6,21,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2851,"                        if (parsePos > bestInvalidPos) {
",4,1,0,1,3,0,0,0,0,5,32,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2852,"                            bestInvalidPos = parsePos;
",4,0,0,0,0,0,0,0,0,5,26,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2856,"                bucket.restoreState(originalState);
",0,0,0,1,2,0,6,0,0,6,35,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2859,"            if (bestValidPos > position || (bestValidPos == position && isOptional)) {
",10,4,0,2,5,0,0,0,0,14,74,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2861,"                if (bestValidState != null) {
",2,1,0,1,3,0,0,0,0,3,29,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2862,"                    bucket.restoreState(bestValidState);
",0,0,0,1,2,0,6,0,0,6,36,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2864,"                return bestValidPos;
",2,0,0,0,0,1,0,0,0,2,20,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2867,"            return ~bestInvalidPos;
",2,0,0,0,0,1,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2638,"                iParsers = null;
",2,0,0,0,0,0,0,0,0,3,16,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2639,"                iParsedLengthEstimate = 0;
",2,0,0,0,0,0,0,0,0,3,26,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2654,"            return iPrintedLengthEstimate;
",2,0,0,0,0,1,0,0,0,2,30,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2660,"            DateTimePrinter[] elements = iPrinters;
",4,0,0,1,2,0,0,2,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2661,"            if (elements == null) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2662,"                throw new UnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,42,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2665,"            if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2667,"                locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2670,"            int len = elements.length;
",6,0,0,0,0,0,0,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2671,"            for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2672,"                elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);
",0,0,1,2,4,0,14,0,0,18,78,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2674,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2679,"            DateTimePrinter[] elements = iPrinters;
",4,0,0,1,2,0,0,2,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2680,"            if (elements == null) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2681,"                throw new UnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,42,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2684,"            if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2686,"                locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2689,"            int len = elements.length;
",6,0,0,0,0,0,0,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2690,"            for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2691,"                elements[i].printTo(out, instant, chrono, displayOffset, displayZone, locale);
",0,0,1,2,4,0,14,0,0,18,78,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2693,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2696,"            DateTimePrinter[] elements = iPrinters;
",4,0,0,1,2,0,0,2,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2697,"            if (elements == null) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2698,"                throw new UnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,42,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2701,"            if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2703,"                locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2706,"            int len = elements.length;
",6,0,0,0,0,0,0,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2707,"            for (int i=0; i<len; i++) {
",8,1,0,1,3,0,0,0,0,10,27,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2708,"                elements[i].printTo(buf, partial, locale);
",0,0,1,2,4,0,8,0,0,12,42,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2710,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2713,"            DateTimePrinter[] elements = iPrinters;
",4,0,0,1,2,0,0,2,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2714,"            if (elements == null) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2715,"                throw new UnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,42,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2718,"            if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2720,"                locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2723,"            int len = elements.length;
",6,0,0,0,0,0,0,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2724,"            for (int i=0; i<len; i++) {
",8,1,0,1,3,0,0,0,0,10,27,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2725,"                elements[i].printTo(out, partial, locale);
",0,0,1,2,4,0,8,0,0,12,42,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2727,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2734,"            DateTimeParser[] elements = iParsers;
",4,0,0,1,2,0,0,2,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2735,"            if (elements == null) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2736,"                throw new UnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,42,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2739,"            int len = elements.length;
",6,0,0,0,0,0,0,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2740,"            for (int i=0; i<len && position >= 0; i++) {
",10,3,0,1,3,0,0,0,0,14,44,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2741,"                position = elements[i].parseInto(bucket, text, position);
",2,0,1,2,4,0,8,0,0,15,57,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2743,"            return position;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2544,"    static enum TimeZoneId
",2,0,0,0,0,1,0,0,0,3,22,2,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2547,"        INSTANCE;
",2,0,0,0,0,0,0,0,0,2,9,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2548,"        static final Set<String> ALL_IDS = DateTimeZone.getAvailableIDs();
",2,0,0,1,2,2,4,4,0,12,66,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2551,"            int max = 0;
",2,0,0,0,0,0,0,0,0,2,12,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2552,"            for (String id : ALL_IDS) {
",4,0,0,1,3,0,0,2,0,6,27,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2553,"                max = Math.max(max, id.length());
",2,0,0,2,4,0,10,0,0,13,33,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2554,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2555,"            MAX_LENGTH = max;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2556,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2559,"            return MAX_LENGTH;
",2,0,0,0,0,1,0,0,0,2,18,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2565,"            buf.append(displayZone != null ? displayZone.getID() : """");
",2,1,0,2,4,0,8,0,0,12,59,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2566,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2571,"            out.write(displayZone != null ? displayZone.getID() : """");
",2,1,0,2,4,0,8,0,0,12,58,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2572,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2576,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2580,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2583,"            return MAX_LENGTH;
",2,0,0,0,0,1,0,0,0,2,18,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2587,"            String str = text.substring(position);
",2,0,0,1,2,0,6,2,0,10,38,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2588,"            String best = null;
",2,0,0,0,0,0,0,2,0,4,19,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2589,"            for (String id : ALL_IDS) {
",4,0,0,1,3,0,0,2,0,6,27,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2590,"                if (str.startsWith(id)) {
",0,0,0,2,5,0,6,0,0,6,25,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2591,"                    if (best == null || id.length() > best.length()) {
",2,3,0,3,7,0,8,0,0,13,50,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2592,"                        best = id;
",4,0,0,0,0,0,0,0,0,5,10,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2595,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2596,"            if (best != null) {
",2,1,0,1,3,0,0,0,0,3,19,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2597,"                bucket.setZone(DateTimeZone.forID(best));
",0,0,0,2,4,0,10,0,0,10,41,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2598,"                return position + best.length();
",2,1,0,1,2,1,4,0,0,7,32,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2600,"            return ~position;
",2,0,0,0,0,1,0,0,0,3,17,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2477,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2478,"            iType = type;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2479,"            iParseLookup = parseLookup;
",4,0,0,0,0,0,0,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2480,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2483,"            return (iType == SHORT_NAME ? 4 : 20);
",4,1,0,1,2,1,0,0,0,5,38,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2489,"            buf.append(print(instant - displayOffset, displayZone, locale));
",4,1,0,2,4,0,10,0,0,15,64,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2490,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2495,"            out.write(print(instant - displayOffset, displayZone, locale));
",4,1,0,2,4,0,10,0,0,15,63,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2496,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2499,"            if (displayZone == null) {
",2,1,0,1,3,0,0,0,0,3,26,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2500,"                return """";  // no zone
",0,0,0,0,0,1,0,0,0,1,22,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2502,"            switch (iType) {
",2,0,0,1,3,0,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2504,"                    return displayZone.getName(instant, locale);
",0,0,0,1,2,1,8,0,0,8,44,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2506,"                    return displayZone.getShortName(instant, locale);
",0,0,0,1,2,1,8,0,0,8,49,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2508,"            return """";
",0,0,0,0,0,1,0,0,0,1,10,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2513,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2517,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2520,"            return (iType == SHORT_NAME ? 4 : 20);
",4,1,0,1,2,1,0,0,0,5,38,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2524,"            Map<String, DateTimeZone> parseLookup = iParseLookup;
",4,0,0,0,0,0,0,6,0,10,53,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2525,"            parseLookup = (parseLookup != null ? parseLookup : DateTimeUtils.getDefaultTimeZoneNames());
",6,1,0,2,4,0,4,0,0,12,92,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2526,"            String str = text.substring(position);
",2,0,0,1,2,0,6,2,0,10,38,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2527,"            String matched = null;
",2,0,0,0,0,0,0,2,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2528,"            for (String name : parseLookup.keySet()) {
",2,0,0,2,5,0,4,2,0,8,42,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2529,"                if (str.startsWith(name)) {
",0,0,0,2,5,0,6,0,0,6,27,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2530,"                    if (matched == null || name.length() > matched.length()) {
",2,3,0,3,7,0,8,0,0,13,58,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2531,"                        matched = name;
",4,0,0,0,0,0,0,0,0,5,15,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2534,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2535,"            if (matched != null) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2536,"                bucket.setZone(parseLookup.get(matched));
",0,0,0,2,4,0,10,0,0,10,41,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2537,"                return position + matched.length();
",2,1,0,1,2,1,4,0,0,7,35,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2539,"            return ~position;
",2,0,0,0,0,1,0,0,0,3,17,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2121,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2122,"            iZeroOffsetPrintText = zeroOffsetPrintText;
",4,0,0,0,0,0,0,0,0,5,43,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2123,"            iZeroOffsetParseText = zeroOffsetParseText;
",4,0,0,0,0,0,0,0,0,5,43,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2124,"            iShowSeparators = showSeparators;
",4,0,0,0,0,0,0,0,0,5,33,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2125,"            if (minFields <= 0 || maxFields < minFields) {
",6,3,0,1,3,0,0,0,0,9,46,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2126,"                throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2128,"            if (minFields > 4) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2129,"                minFields = 4;
",2,0,0,0,0,0,0,0,0,3,14,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2130,"                maxFields = 4;
",2,0,0,0,0,0,0,0,0,3,14,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2132,"            iMinFields = minFields;
",4,0,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2133,"            iMaxFields = maxFields;
",4,0,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2134,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2137,"            int est = 1 + iMinFields << 1;
",4,2,0,0,0,0,0,0,0,6,30,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2138,"            if (iShowSeparators) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2139,"                est += iMinFields - 1;
",4,1,0,0,0,0,0,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2141,"            if (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {
",4,3,0,2,5,0,4,0,0,11,74,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2142,"                est = iZeroOffsetPrintText.length();
",2,0,0,1,2,0,4,0,0,7,36,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2144,"            return est;
",2,0,0,0,0,1,0,0,0,2,11,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2150,"            if (displayZone == null) {
",2,1,0,1,3,0,0,0,0,3,26,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2151,"                return;  // no zone
",0,0,0,0,0,1,0,0,0,0,19,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2153,"            if (displayOffset == 0 && iZeroOffsetPrintText != null) {
",4,3,0,1,3,0,0,0,0,7,57,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2154,"                buf.append(iZeroOffsetPrintText);
",0,0,0,1,2,0,6,0,0,6,33,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2155,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2157,"            if (displayOffset >= 0) {
",2,1,0,1,3,0,0,0,0,3,25,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2158,"                buf.append('+');
",0,0,0,1,2,0,4,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2160,"                buf.append('-');
",0,0,0,1,2,0,4,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2161,"                displayOffset = -displayOffset;
",4,0,0,0,0,0,0,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2164,"            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,0,0,0,0,0,0,9,62,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2165,"            FormatUtils.appendPaddedInteger(buf, hours, 2);
",0,0,0,1,2,0,8,0,0,8,47,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2166,"            if (iMaxFields == 1) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2167,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2169,"            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,1,2,0,0,0,0,10,64,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2170,"            if (displayOffset == 0 && iMinFields <= 1) {
",4,3,0,1,3,0,0,0,0,7,44,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2171,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2174,"            int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,9,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2175,"            if (iShowSeparators) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2176,"                buf.append(':');
",0,0,0,1,2,0,4,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2178,"            FormatUtils.appendPaddedInteger(buf, minutes, 2);
",0,0,0,1,2,0,8,0,0,8,49,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2179,"            if (iMaxFields == 2) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2180,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2182,"            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,10,63,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2183,"            if (displayOffset == 0 && iMinFields <= 2) {
",4,3,0,1,3,0,0,0,0,7,44,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2184,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2187,"            int seconds = displayOffset / DateTimeConstants.MILLIS_PER_SECOND;
",8,1,0,0,0,0,0,0,0,9,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2188,"            if (iShowSeparators) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2189,"                buf.append(':');
",0,0,0,1,2,0,4,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2191,"            FormatUtils.appendPaddedInteger(buf, seconds, 2);
",0,0,0,1,2,0,8,0,0,8,49,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2192,"            if (iMaxFields == 3) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2193,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2195,"            displayOffset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;
",8,1,0,0,0,0,0,0,0,10,63,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2196,"            if (displayOffset == 0 && iMinFields <= 3) {
",4,3,0,1,3,0,0,0,0,7,44,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2197,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2200,"            if (iShowSeparators) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2201,"                buf.append('.');
",0,0,0,1,2,0,4,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2203,"            FormatUtils.appendPaddedInteger(buf, displayOffset, 3);
",0,0,0,1,2,0,8,0,0,8,55,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2204,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2209,"            if (displayZone == null) {
",2,1,0,1,3,0,0,0,0,3,26,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2210,"                return;  // no zone
",0,0,0,0,0,1,0,0,0,0,19,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2212,"            if (displayOffset == 0 && iZeroOffsetPrintText != null) {
",4,3,0,1,3,0,0,0,0,7,57,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2213,"                out.write(iZeroOffsetPrintText);
",0,0,0,1,2,0,6,0,0,6,32,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2214,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2216,"            if (displayOffset >= 0) {
",2,1,0,1,3,0,0,0,0,3,25,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2217,"                out.write('+');
",0,0,0,1,2,0,4,0,0,5,15,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2219,"                out.write('-');
",0,0,0,1,2,0,4,0,0,5,15,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2220,"                displayOffset = -displayOffset;
",4,0,0,0,0,0,0,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2223,"            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,0,0,0,0,0,0,9,62,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2224,"            FormatUtils.writePaddedInteger(out, hours, 2);
",0,0,0,1,2,0,8,0,0,8,46,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2225,"            if (iMaxFields == 1) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2226,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2228,"            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,1,2,0,0,0,0,10,64,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2229,"            if (displayOffset == 0 && iMinFields == 1) {
",4,3,0,1,3,0,0,0,0,7,44,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2230,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2233,"            int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,9,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2234,"            if (iShowSeparators) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2235,"                out.write(':');
",0,0,0,1,2,0,4,0,0,5,15,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2237,"            FormatUtils.writePaddedInteger(out, minutes, 2);
",0,0,0,1,2,0,8,0,0,8,48,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2238,"            if (iMaxFields == 2) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2239,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2241,"            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,10,63,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2242,"            if (displayOffset == 0 && iMinFields == 2) {
",4,3,0,1,3,0,0,0,0,7,44,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2243,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2246,"            int seconds = displayOffset / DateTimeConstants.MILLIS_PER_SECOND;
",8,1,0,0,0,0,0,0,0,9,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2247,"            if (iShowSeparators) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2248,"                out.write(':');
",0,0,0,1,2,0,4,0,0,5,15,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2250,"            FormatUtils.writePaddedInteger(out, seconds, 2);
",0,0,0,1,2,0,8,0,0,8,48,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2251,"            if (iMaxFields == 3) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2252,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2254,"            displayOffset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;
",8,1,0,0,0,0,0,0,0,10,63,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2255,"            if (displayOffset == 0 && iMinFields == 3) {
",4,3,0,1,3,0,0,0,0,7,44,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2256,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2259,"            if (iShowSeparators) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2260,"                out.write('.');
",0,0,0,1,2,0,4,0,0,5,15,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2262,"            FormatUtils.writePaddedInteger(out, displayOffset, 3);
",0,0,0,1,2,0,8,0,0,8,54,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2263,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2267,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2271,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2274,"            return estimatePrintedLength();
",0,0,0,1,2,1,2,0,0,2,31,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2278,"            int limit = text.length() - position;
",4,1,0,1,2,0,4,0,0,9,37,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2281,"            if (iZeroOffsetParseText != null) {
",2,1,0,1,3,0,0,0,0,3,35,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2282,"                if (iZeroOffsetParseText.length() == 0) {
",0,1,0,2,5,0,4,0,0,5,41,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2284,"                    if (limit > 0) {
",2,1,0,1,3,0,0,0,0,3,16,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2285,"                        char c = text.charAt(position);
",2,0,0,1,2,0,6,0,0,8,31,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2286,"                        if (c == '-' || c == '+') {
",4,3,0,1,3,0,0,0,0,9,27,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2287,"                            break zeroOffset;
",2,0,0,0,0,0,0,0,0,2,17,14,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2290,"                    bucket.setOffset(Integer.valueOf(0));
",0,0,0,2,4,0,8,0,0,8,37,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2291,"                    return position;
",2,0,0,0,0,1,0,0,0,2,16,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2293,"                if (text.regionMatches(true, position, iZeroOffsetParseText, 0, iZeroOffsetParseText.length())) {
",0,0,0,3,7,0,12,0,0,13,97,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2294,"                    bucket.setOffset(Integer.valueOf(0));
",0,0,0,2,4,0,8,0,0,8,37,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2295,"                    return position + iZeroOffsetParseText.length();
",2,1,0,1,2,1,4,0,0,7,48,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2301,"            if (limit <= 1) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2302,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2306,"            char c = text.charAt(position);
",2,0,0,1,2,0,6,0,0,8,31,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2307,"            if (c == '-') {
",2,1,0,1,3,0,0,0,0,4,15,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2308,"                negative = true;
",2,0,0,0,0,0,0,0,0,4,16,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2309,"            } else if (c == '+') {
",2,1,0,1,4,0,0,0,0,4,22,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2310,"                negative = false;
",2,0,0,0,0,0,0,0,0,4,17,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2312,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2315,"            limit--;
",2,0,0,0,0,0,0,0,0,3,8,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2316,"            position++;
",2,0,0,0,0,0,0,0,0,3,11,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2330,"            if (digitCount(text, position, 2) < 2) {
",0,1,0,2,5,0,6,0,0,7,40,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2332,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2337,"            int hours = FormatUtils.parseTwoDigits(text, position);
",2,0,0,1,2,0,8,0,0,10,55,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2338,"            if (hours > 23) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2339,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2341,"            offset = hours * DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,0,0,0,0,0,0,10,51,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2342,"            limit -= 2;
",2,0,0,0,0,0,0,0,0,3,11,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2343,"            position += 2;
",2,0,0,0,0,0,0,0,0,3,14,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2349,"                if (limit <= 0) {
",2,1,0,1,3,0,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2350,"                    break parse;
",2,0,0,0,0,0,0,0,0,2,12,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2354,"                c = text.charAt(position);
",2,0,0,1,2,0,6,0,0,9,26,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2355,"                if (c == ':') {
",2,1,0,1,3,0,0,0,0,4,15,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2356,"                    expectSeparators = true;
",2,0,0,0,0,0,0,0,0,4,24,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2357,"                    limit--;
",2,0,0,0,0,0,0,0,0,3,8,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2358,"                    position++;
",2,0,0,0,0,0,0,0,0,3,11,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2359,"                } else if (c >= '0' && c <= '9') {
",4,3,0,1,4,0,0,0,0,9,34,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2360,"                    expectSeparators = false;
",2,0,0,0,0,0,0,0,0,4,25,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2367,"                int count = digitCount(text, position, 2);
",2,0,0,1,2,0,6,0,0,8,42,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2368,"                if (count == 0 && !expectSeparators) {
",4,2,0,1,3,0,0,0,0,7,38,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2369,"                    break parse;
",2,0,0,0,0,0,0,0,0,2,12,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2370,"                } else if (count < 2) {
",2,1,0,1,4,0,0,0,0,3,23,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2372,"                    return ~position;
",2,0,0,0,0,1,0,0,0,3,17,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2375,"                int minutes = FormatUtils.parseTwoDigits(text, position);
",2,0,0,1,2,0,8,0,0,10,57,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2376,"                if (minutes > 59) {
",2,1,0,1,3,0,0,0,0,3,19,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2377,"                    return ~position;
",2,0,0,0,0,1,0,0,0,3,17,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2379,"                offset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,10,56,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2380,"                limit -= 2;
",2,0,0,0,0,0,0,0,0,3,11,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2381,"                position += 2;
",2,0,0,0,0,0,0,0,0,3,14,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2385,"                if (limit <= 0) {
",2,1,0,1,3,0,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2386,"                    break parse;
",2,0,0,0,0,0,0,0,0,2,12,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2389,"                if (expectSeparators) {
",2,0,0,1,3,0,0,0,0,2,23,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2390,"                    if (text.charAt(position) != ':') {
",0,1,0,2,5,0,6,0,0,8,35,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2391,"                        break parse;
",2,0,0,0,0,0,0,0,0,2,12,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2393,"                    limit--;
",2,0,0,0,0,0,0,0,0,3,8,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2394,"                    position++;
",2,0,0,0,0,0,0,0,0,3,11,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2397,"                count = digitCount(text, position, 2);
",2,0,0,1,2,0,6,0,0,9,38,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2398,"                if (count == 0 && !expectSeparators) {
",4,2,0,1,3,0,0,0,0,7,38,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2399,"                    break parse;
",2,0,0,0,0,0,0,0,0,2,12,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2400,"                } else if (count < 2) {
",2,1,0,1,4,0,0,0,0,3,23,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2402,"                    return ~position;
",2,0,0,0,0,1,0,0,0,3,17,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2405,"                int seconds = FormatUtils.parseTwoDigits(text, position);
",2,0,0,1,2,0,8,0,0,10,57,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2406,"                if (seconds > 59) {
",2,1,0,1,3,0,0,0,0,3,19,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2407,"                    return ~position;
",2,0,0,0,0,1,0,0,0,3,17,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2409,"                offset += seconds * DateTimeConstants.MILLIS_PER_SECOND;
",8,1,0,0,0,0,0,0,0,10,56,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2410,"                limit -= 2;
",2,0,0,0,0,0,0,0,0,3,11,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2411,"                position += 2;
",2,0,0,0,0,0,0,0,0,3,14,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2415,"                if (limit <= 0) {
",2,1,0,1,3,0,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2416,"                    break parse;
",2,0,0,0,0,0,0,0,0,2,12,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2419,"                if (expectSeparators) {
",2,0,0,1,3,0,0,0,0,2,23,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2420,"                    if (text.charAt(position) != '.' && text.charAt(position) != ',') {
",0,3,0,3,7,0,12,0,0,17,67,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2421,"                        break parse;
",2,0,0,0,0,0,0,0,0,2,12,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2423,"                    limit--;
",2,0,0,0,0,0,0,0,0,3,8,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2424,"                    position++;
",2,0,0,0,0,0,0,0,0,3,11,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2427,"                count = digitCount(text, position, 3);
",2,0,0,1,2,0,6,0,0,9,38,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2428,"                if (count == 0 && !expectSeparators) {
",4,2,0,1,3,0,0,0,0,7,38,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2429,"                    break parse;
",2,0,0,0,0,0,0,0,0,2,12,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2430,"                } else if (count < 1) {
",2,1,0,1,4,0,0,0,0,3,23,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2432,"                    return ~position;
",2,0,0,0,0,1,0,0,0,3,17,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2435,"                offset += (text.charAt(position++) - '0') * 100;
",4,2,0,2,4,0,4,0,0,13,48,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2436,"                if (count > 1) {
",2,1,0,1,3,0,0,0,0,3,16,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2437,"                    offset += (text.charAt(position++) - '0') * 10;
",4,2,0,2,4,0,4,0,0,13,47,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2438,"                    if (count > 2) {
",2,1,0,1,3,0,0,0,0,3,16,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2439,"                        offset += text.charAt(position++) - '0';
",4,1,0,1,2,0,4,0,0,12,40,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2444,"            bucket.setOffset(Integer.valueOf(negative ? -offset : offset));
",6,0,0,2,4,0,8,0,0,15,63,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2445,"            return position;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2453,"            int limit = Math.min(text.length() - position, amount);
",4,1,0,2,4,0,10,0,0,15,55,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2454,"            amount = 0;
",2,0,0,0,0,0,0,0,0,3,11,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2455,"            for (; limit > 0; limit--) {
",4,1,0,1,3,0,0,0,0,6,28,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2456,"                char c = text.charAt(position + amount);
",6,1,0,1,2,0,4,0,0,11,40,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2457,"                if (c < '0' || c > '9') {
",4,3,0,1,3,0,0,0,0,9,25,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2458,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2460,"                amount++;
",2,0,0,0,0,0,0,0,0,3,9,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2462,"            return amount;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1895,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1896,"            iFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1898,"            if (maxDigits > 18) {
",2,1,0,1,3,0,0,0,0,3,21,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1899,"                maxDigits = 18;
",2,0,0,0,0,0,0,0,0,3,15,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1901,"            iMinDigits = minDigits;
",4,0,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1902,"            iMaxDigits = maxDigits;
",4,0,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1903,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1906,"            return iMaxDigits;
",2,0,0,0,0,1,0,0,0,2,18,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1913,"                printTo(buf, null, instant, chrono);
",0,0,0,1,2,0,8,0,0,9,36,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1916,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1914,"            } catch (IOException e) {
",2,0,0,1,4,0,0,2,0,4,25,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1917,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1922,"            printTo(null, out, instant, chrono);
",0,0,0,1,2,0,8,0,0,9,36,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1923,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1928,"            long millis = partial.getChronology().set(partial, 0L);
",2,0,0,2,4,0,8,0,0,10,55,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1930,"                printTo(buf, null, millis, partial.getChronology());
",0,0,0,2,4,0,10,0,0,11,52,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1933,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1931,"            } catch (IOException e) {
",2,0,0,1,4,0,0,2,0,4,25,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1934,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1939,"            long millis = partial.getChronology().set(partial, 0L);
",2,0,0,2,4,0,8,0,0,10,55,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1940,"            printTo(null, out, millis, partial.getChronology());
",0,0,0,2,4,0,10,0,0,11,52,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1941,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1946,"            DateTimeField field = iFieldType.getField(chrono);
",2,0,0,1,2,0,6,2,0,10,50,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1947,"            int minDigits = iMinDigits;
",4,0,0,0,0,0,0,0,0,4,27,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1951,"                fraction = field.remainder(instant);
",2,0,0,1,2,0,6,0,0,9,36,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1959,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1952,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1953,"                if (buf != null) {
",2,1,0,1,3,0,0,0,0,3,18,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1954,"                    appendUnknownString(buf, minDigits);
",0,0,0,1,2,0,6,0,0,6,36,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1956,"                    printUnknownString(out, minDigits);
",0,0,0,1,2,0,6,0,0,6,35,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1958,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1961,"            if (fraction == 0) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1962,"                if (buf != null) {
",2,1,0,1,3,0,0,0,0,3,18,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1963,"                    while (--minDigits >= 0) {
",2,1,0,1,3,0,0,0,0,4,26,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1964,"                        buf.append('0');
",0,0,0,1,2,0,4,0,0,5,16,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1967,"                    while (--minDigits >= 0) {
",2,1,0,1,3,0,0,0,0,4,26,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1968,"                        out.write('0');
",0,0,0,1,2,0,4,0,0,5,15,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1971,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1975,"            long[] fractionData = getFractionData(fraction, field);
",2,0,0,2,4,0,6,0,0,8,55,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1976,"            long scaled = fractionData[0];
",2,0,1,1,2,0,0,0,0,4,30,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1977,"            int maxDigits = (int) fractionData[1];
",2,0,1,2,4,0,0,0,0,4,38,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1979,"            if ((scaled & 0x7fffffff) == scaled) {
",4,2,0,2,5,0,0,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1980,"                str = Integer.toString((int) scaled);
",4,0,0,2,4,0,4,0,0,9,37,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1982,"                str = Long.toString(scaled);
",2,0,0,1,2,0,6,0,0,9,28,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1985,"            int length = str.length();
",2,0,0,1,2,0,4,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1986,"            int digits = maxDigits;
",4,0,0,0,0,0,0,0,0,4,23,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1987,"            while (length < digits) {
",4,1,0,1,3,0,0,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1988,"                if (buf != null) {
",2,1,0,1,3,0,0,0,0,3,18,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1989,"                    buf.append('0');
",0,0,0,1,2,0,4,0,0,5,16,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1991,"                    out.write('0');
",0,0,0,1,2,0,4,0,0,5,15,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1993,"                minDigits--;
",2,0,0,0,0,0,0,0,0,3,12,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1994,"                digits--;
",2,0,0,0,0,0,0,0,0,3,9,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1997,"            if (minDigits < digits) {
",4,1,0,1,3,0,0,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1999,"                while (minDigits < digits) {
",4,1,0,1,3,0,0,0,0,5,28,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2000,"                    if (length <= 1 || str.charAt(length - 1) != '0') {
",4,4,0,2,5,0,4,0,0,13,51,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2001,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2003,"                    digits--;
",2,0,0,0,0,0,0,0,0,3,9,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2004,"                    length--;
",2,0,0,0,0,0,0,0,0,3,9,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2006,"                if (length < str.length()) {
",2,1,0,2,5,0,4,0,0,7,28,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2007,"                    if (buf != null) {
",2,1,0,1,3,0,0,0,0,3,18,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2008,"                        for (int i=0; i<length; i++) {
",8,1,0,1,3,0,0,0,0,10,30,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2009,"                            buf.append(str.charAt(i));
",0,0,0,2,4,0,10,0,0,10,26,14,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2012,"                        for (int i=0; i<length; i++) {
",8,1,0,1,3,0,0,0,0,10,30,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2013,"                            out.write(str.charAt(i));
",0,0,0,2,4,0,10,0,0,10,25,14,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2016,"                    return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2020,"            if (buf != null) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2021,"                buf.append(str);
",0,0,0,1,2,0,6,0,0,6,16,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2023,"                out.write(str);
",0,0,0,1,2,0,6,0,0,6,15,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2025,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2028,"            long rangeMillis = field.getDurationField().getUnitMillis();
",2,0,0,2,4,0,6,0,0,8,60,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2030,"            int maxDigits = iMaxDigits;
",4,0,0,0,0,0,0,0,0,4,27,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2032,"                switch (maxDigits) {
",2,0,0,1,3,0,0,0,0,2,20,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2033,"                default: scalar = 1L; break;
",2,0,0,0,0,0,0,0,0,3,28,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2034,"                case 1:  scalar = 10L; break;
",2,0,0,0,0,0,0,0,0,3,29,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2035,"                case 2:  scalar = 100L; break;
",2,0,0,0,0,0,0,0,0,3,30,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2036,"                case 3:  scalar = 1000L; break;
",2,0,0,0,0,0,0,0,0,3,31,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2037,"                case 4:  scalar = 10000L; break;
",2,0,0,0,0,0,0,0,0,3,32,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2038,"                case 5:  scalar = 100000L; break;
",2,0,0,0,0,0,0,0,0,3,33,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2039,"                case 6:  scalar = 1000000L; break;
",2,0,0,0,0,0,0,0,0,3,34,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2040,"                case 7:  scalar = 10000000L; break;
",2,0,0,0,0,0,0,0,0,3,35,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2041,"                case 8:  scalar = 100000000L; break;
",2,0,0,0,0,0,0,0,0,3,36,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2042,"                case 9:  scalar = 1000000000L; break;
",2,0,0,0,0,0,0,0,0,3,37,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2043,"                case 10: scalar = 10000000000L; break;
",2,0,0,0,0,0,0,0,0,3,38,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2044,"                case 11: scalar = 100000000000L; break;
",2,0,0,0,0,0,0,0,0,3,39,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2045,"                case 12: scalar = 1000000000000L; break;
",2,0,0,0,0,0,0,0,0,3,40,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2046,"                case 13: scalar = 10000000000000L; break;
",2,0,0,0,0,0,0,0,0,3,41,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2047,"                case 14: scalar = 100000000000000L; break;
",2,0,0,0,0,0,0,0,0,3,42,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2048,"                case 15: scalar = 1000000000000000L; break;
",2,0,0,0,0,0,0,0,0,3,43,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2049,"                case 16: scalar = 10000000000000000L; break;
",2,0,0,0,0,0,0,0,0,3,44,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2050,"                case 17: scalar = 100000000000000000L; break;
",2,0,0,0,0,0,0,0,0,3,45,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2051,"                case 18: scalar = 1000000000000000000L; break;
",2,0,0,0,0,0,0,0,0,3,46,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2053,"                if (((rangeMillis * scalar) / scalar) == rangeMillis) {
",8,3,0,3,7,0,0,0,0,11,55,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2054,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2057,"                maxDigits--;
",2,0,0,0,0,0,0,0,0,3,12,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2060,"            return new long[] {fraction * scalar / rangeMillis, maxDigits};
",8,2,0,2,4,1,0,0,0,10,63,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2064,"            return iMaxDigits;
",2,0,0,0,0,1,0,0,0,2,18,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2068,"            DateTimeField field = iFieldType.getField(bucket.getChronology());
",2,0,0,2,4,0,8,2,0,12,66,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2070,"            int limit = Math.min(iMaxDigits, text.length() - position);
",4,1,0,2,4,0,10,0,0,15,59,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2072,"            long value = 0;
",2,0,0,0,0,0,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2073,"            long n = field.getDurationField().getUnitMillis() * 10;
",2,1,0,2,4,0,6,0,0,9,55,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2074,"            int length = 0;
",2,0,0,0,0,0,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2075,"            while (length < limit) {
",4,1,0,1,3,0,0,0,0,5,24,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2076,"                char c = text.charAt(position + length);
",6,1,0,1,2,0,4,0,0,11,40,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2077,"                if (c < '0' || c > '9') {
",4,3,0,1,3,0,0,0,0,9,25,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2078,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2080,"                length++;
",2,0,0,0,0,0,0,0,0,3,9,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2081,"                long nn = n / 10;
",4,1,0,0,0,0,0,0,0,5,17,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2082,"                value += (c - '0') * nn;
",6,2,0,1,2,0,0,0,0,10,24,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2083,"                n = nn;
",4,0,0,0,0,0,0,0,0,5,7,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2084,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2086,"            value /= 10;
",2,0,0,0,0,0,0,0,0,3,12,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2088,"            if (length == 0) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2089,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2092,"            if (value > Integer.MAX_VALUE) {
",6,1,0,1,3,0,0,0,0,7,32,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2093,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2096,"            DateTimeField parseField = new PreciseDateTimeField(
",2,0,0,0,1,0,0,4,0,6,52,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2101,"            bucket.saveField(parseField, (int) value);
",2,0,0,2,4,0,6,0,0,8,42,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,2103,"            return position + length;
",4,1,0,0,0,1,0,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1754,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1755,"            iFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1756,"            iShort = isShort;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1757,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1748,"        private static Map<Locale, Map<DateTimeFieldType, Object[]>> cParseCache =
",2,0,0,1,2,2,0,10,0,14,74,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1760,"            return iShort ? 6 : 20;
",2,0,0,0,0,1,0,0,0,2,23,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1767,"                buf.append(print(instant, chrono, locale));
",0,0,0,2,4,0,12,0,0,12,43,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1770,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1768,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1769,"                buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1771,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1777,"                out.write(print(instant, chrono, locale));
",0,0,0,2,4,0,12,0,0,12,42,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1780,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1778,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1779,"                out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1781,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1785,"                buf.append(print(partial, locale));
",0,0,0,2,4,0,10,0,0,10,35,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1788,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1786,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1787,"                buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1789,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1793,"                out.write(print(partial, locale));
",0,0,0,2,4,0,10,0,0,10,34,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1796,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1794,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1795,"                out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1797,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1800,"            DateTimeField field = iFieldType.getField(chrono);
",2,0,0,1,2,0,6,2,0,10,50,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1801,"            if (iShort) {
",2,0,0,1,3,0,0,0,0,2,13,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1802,"                return field.getAsShortText(instant, locale);
",0,0,0,1,2,1,8,0,0,8,45,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1804,"                return field.getAsText(instant, locale);
",0,0,0,1,2,1,8,0,0,8,40,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1809,"            if (partial.isSupported(iFieldType)) {
",0,0,0,2,5,0,6,0,0,6,38,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1810,"                DateTimeField field = iFieldType.getField(partial.getChronology());
",2,0,0,2,4,0,8,2,0,12,67,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1811,"                if (iShort) {
",2,0,0,1,3,0,0,0,0,2,13,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1812,"                    return field.getAsShortText(partial, locale);
",0,0,0,1,2,1,8,0,0,8,45,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1814,"                    return field.getAsText(partial, locale);
",0,0,0,1,2,1,8,0,0,8,40,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1817,"                return ""\ufffd"";
",0,0,0,0,0,1,0,0,0,1,16,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1822,"            return estimatePrintedLength();
",0,0,0,1,2,1,2,0,0,2,31,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1827,"            Locale locale = bucket.getLocale();
",2,0,0,1,2,0,4,2,0,8,35,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1830,"            Set<String> validValues = null;
",2,0,0,0,0,0,0,4,0,6,31,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1831,"            int maxLength = 0;
",2,0,0,0,0,0,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1832,"            synchronized (cParseCache) {
",2,0,0,1,3,0,0,0,0,2,28,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1833,"                Map<DateTimeFieldType, Object[]> innerMap = cParseCache.get(locale);
",2,0,0,2,4,0,6,6,0,14,68,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1834,"                if (innerMap == null) {
",2,1,0,1,3,0,0,0,0,3,23,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1835,"                    innerMap = new HashMap<DateTimeFieldType, Object[]>();
",2,0,0,2,4,0,0,6,0,9,54,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1836,"                    cParseCache.put(locale, innerMap);
",0,0,0,1,2,0,8,0,0,8,34,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1838,"                Object[] array = innerMap.get(iFieldType);
",2,0,0,2,4,0,6,2,0,10,42,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1839,"                if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1840,"                    validValues = new HashSet<String>(32);
",2,0,0,1,2,0,0,4,0,7,38,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1841,"                    MutableDateTime dt = new MutableDateTime(0L, DateTimeZone.UTC);
",6,0,0,1,2,0,0,4,0,10,63,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1842,"                    Property property = dt.property(iFieldType);
",2,0,0,1,2,0,6,2,0,10,44,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1843,"                    int min = property.getMinimumValueOverall();
",2,0,0,1,2,0,4,0,0,6,44,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1844,"                    int max = property.getMaximumValueOverall();
",2,0,0,1,2,0,4,0,0,6,44,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1845,"                    if (max - min > 32) {  // protect against invalid fields
",4,2,0,1,3,0,0,0,0,6,56,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1846,"                        return ~position;
",2,0,0,0,0,1,0,0,0,3,17,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1848,"                    maxLength = property.getMaximumTextLength(locale);
",2,0,0,1,2,0,6,0,0,9,50,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1849,"                    for (int i = min; i <= max; i++) {
",10,1,0,1,3,0,0,0,0,12,34,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1850,"                        property.set(i);
",0,0,0,1,2,0,6,0,0,6,16,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1851,"                        validValues.add(property.getAsShortText(locale));
",0,0,0,2,4,0,10,0,0,10,49,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1852,"                        validValues.add(property.getAsShortText(locale).toLowerCase(locale));
",0,0,0,3,6,0,14,0,0,14,69,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1853,"                        validValues.add(property.getAsShortText(locale).toUpperCase(locale));
",0,0,0,3,6,0,14,0,0,14,69,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1854,"                        validValues.add(property.getAsText(locale));
",0,0,0,2,4,0,10,0,0,10,44,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1855,"                        validValues.add(property.getAsText(locale).toLowerCase(locale));
",0,0,0,3,6,0,14,0,0,14,64,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1856,"                        validValues.add(property.getAsText(locale).toUpperCase(locale));
",0,0,0,3,6,0,14,0,0,14,64,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1858,"                    if (""en"".equals(locale.getLanguage()) && iFieldType == DateTimeFieldType.era()) {
",2,2,0,4,9,0,10,0,0,15,81,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1860,"                        validValues.add(""BCE"");
",0,0,0,1,2,0,4,0,0,5,23,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1861,"                        validValues.add(""bce"");
",0,0,0,1,2,0,4,0,0,5,23,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1862,"                        validValues.add(""CE"");
",0,0,0,1,2,0,4,0,0,5,22,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1863,"                        validValues.add(""ce"");
",0,0,0,1,2,0,4,0,0,5,22,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1864,"                        maxLength = 3;
",2,0,0,0,0,0,0,0,0,3,14,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1866,"                    array = new Object[] {validValues, Integer.valueOf(maxLength)};
",4,0,0,3,6,0,6,2,0,13,63,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1867,"                    innerMap.put(iFieldType, array);
",0,0,0,1,2,0,8,0,0,8,32,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1868,"                } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1869,"                    validValues = (Set<String>) array[0];
",2,0,1,2,4,0,0,4,0,9,37,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1870,"                    maxLength = ((Integer) array[1]).intValue();
",2,0,1,4,8,0,2,2,0,9,44,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1872,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1874,"            int limit = Math.min(text.length(), position + maxLength);
",6,1,0,2,4,0,8,0,0,15,58,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1875,"            for (int i = limit; i > position; i--) {
",10,1,0,1,3,0,0,0,0,12,40,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1876,"                String match = text.substring(position, i);
",2,0,0,1,2,0,8,2,0,12,43,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1877,"                if (validValues.contains(match)) {
",0,0,0,2,5,0,6,0,0,6,34,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1878,"                    bucket.saveField(iFieldType, match, locale);
",0,0,0,1,2,0,10,0,0,10,44,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1879,"                    return i;
",2,0,0,0,0,1,0,0,0,2,9,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1882,"            return ~position;
",2,0,0,0,0,1,0,0,0,3,17,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1561,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1562,"            iType = type;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1563,"            iPivot = pivot;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1564,"            iLenientParse = lenientParse;
",4,0,0,0,0,0,0,0,0,5,29,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1565,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1568,"            return iLenientParse ? 4 : 2;
",2,0,0,0,0,1,0,0,0,2,29,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1572,"            int limit = text.length() - position;
",4,1,0,1,2,0,4,0,0,9,37,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1574,"            if (!iLenientParse) {
",2,0,0,1,3,0,0,0,0,3,21,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1575,"                limit = Math.min(2, limit);
",2,0,0,1,2,0,6,0,0,9,27,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1576,"                if (limit < 2) {
",2,1,0,1,3,0,0,0,0,3,16,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1577,"                    return ~position;
",2,0,0,0,0,1,0,0,0,3,17,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1580,"                boolean hasSignChar = false;
",2,0,0,0,0,0,0,0,0,3,28,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1581,"                boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1582,"                int length = 0;
",2,0,0,0,0,0,0,0,0,2,15,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1583,"                while (length < limit) {
",4,1,0,1,3,0,0,0,0,5,24,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1584,"                    char c = text.charAt(position + length);
",6,1,0,1,2,0,4,0,0,11,40,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1585,"                    if (length == 0 && (c == '-' || c == '+')) {
",6,5,0,2,5,0,0,0,0,13,44,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1586,"                        hasSignChar = true;
",2,0,0,0,0,0,0,0,0,4,19,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1587,"                        negative = c == '-';
",4,1,0,0,0,0,0,0,0,7,20,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1588,"                        if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1589,"                            length++;
",2,0,0,0,0,0,0,0,0,3,9,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1592,"                            position++;
",2,0,0,0,0,0,0,0,0,3,11,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1593,"                            limit--;
",2,0,0,0,0,0,0,0,0,3,8,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1595,"                        continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1597,"                    if (c < '0' || c > '9') {
",4,3,0,1,3,0,0,0,0,9,25,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1598,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1600,"                    length++;
",2,0,0,0,0,0,0,0,0,3,9,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1601,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1603,"                if (length == 0) {
",2,1,0,1,3,0,0,0,0,3,18,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1604,"                    return ~position;
",2,0,0,0,0,1,0,0,0,3,17,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1607,"                if (hasSignChar || length != 2) {
",4,2,0,1,3,0,0,0,0,6,33,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1609,"                    if (length >= 9) {
",2,1,0,1,3,0,0,0,0,3,18,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1612,"                        value = Integer.parseInt(text.substring(position, position += length));
",6,0,0,2,4,0,10,0,0,18,71,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1614,"                        int i = position;
",4,0,0,0,0,0,0,0,0,4,17,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1615,"                        if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1616,"                            i++;
",2,0,0,0,0,0,0,0,0,3,4,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1619,"                            value = text.charAt(i++) - '0';
",4,1,0,1,2,0,4,0,0,12,31,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1622,"                        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1620,"                        } catch (StringIndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,45,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1621,"                            return ~position;
",2,0,0,0,0,1,0,0,0,3,17,14,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1623,"                        position += length;
",4,0,0,0,0,0,0,0,0,5,19,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1624,"                        while (i < position) {
",4,1,0,1,3,0,0,0,0,5,22,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1625,"                            value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';
",8,5,0,4,8,0,4,0,0,20,63,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1627,"                        if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1628,"                            value = -value;
",4,0,0,0,0,0,0,0,0,6,15,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1632,"                    bucket.saveField(iType, value);
",0,0,0,1,2,0,8,0,0,8,31,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1633,"                    return position;
",2,0,0,0,0,1,0,0,0,2,16,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1638,"            char c = text.charAt(position);
",2,0,0,1,2,0,6,0,0,8,31,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1639,"            if (c < '0' || c > '9') {
",4,3,0,1,3,0,0,0,0,9,25,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1640,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1642,"            year = c - '0';
",4,1,0,0,0,0,0,0,0,7,15,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1643,"            c = text.charAt(position + 1);
",4,1,0,1,2,0,4,0,0,10,30,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1644,"            if (c < '0' || c > '9') {
",4,3,0,1,3,0,0,0,0,9,25,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1645,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1647,"            year = ((year << 3) + (year << 1)) + c - '0';
",8,5,0,3,6,0,0,0,0,15,45,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1649,"            int pivot = iPivot;
",4,0,0,0,0,0,0,0,0,4,19,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1651,"            if (bucket.getPivotYear() != null) {
",0,1,0,2,5,0,4,0,0,5,36,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1652,"                pivot = bucket.getPivotYear().intValue();
",2,0,0,2,4,0,6,0,0,9,41,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1655,"            int low = pivot - 50;
",4,1,0,0,0,0,0,0,0,5,21,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1658,"            if (low >= 0) {
",2,1,0,1,3,0,0,0,0,3,15,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1659,"                t = low % 100;
",4,1,0,0,0,0,0,0,0,6,14,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1661,"                t = 99 + ((low + 1) % 100);
",4,3,0,2,4,0,0,0,0,8,27,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1664,"            year += low + ((year < t) ? 100 : 0) - t;
",10,3,0,2,4,0,0,0,0,14,41,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1666,"            bucket.saveField(iType, year);
",0,0,0,1,2,0,8,0,0,8,30,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1667,"            return position + 2;
",2,1,0,0,0,1,0,0,0,3,20,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1671,"            return 2;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1677,"            int year = getTwoDigitYear(instant, chrono);
",2,0,0,1,2,0,6,0,0,8,44,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1678,"            if (year < 0) {
",2,1,0,1,3,0,0,0,0,3,15,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1679,"                buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1680,"                buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1682,"                FormatUtils.appendPaddedInteger(buf, year, 2);
",0,0,0,1,2,0,8,0,0,8,46,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1684,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1689,"            int year = getTwoDigitYear(instant, chrono);
",2,0,0,1,2,0,6,0,0,8,44,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1690,"            if (year < 0) {
",2,1,0,1,3,0,0,0,0,3,15,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1691,"                out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1692,"                out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1694,"                FormatUtils.writePaddedInteger(out, year, 2);
",0,0,0,1,2,0,8,0,0,8,45,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1696,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1700,"                int year = iType.getField(chrono).get(instant);
",2,0,0,2,4,0,10,0,0,12,47,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1701,"                if (year < 0) {
",2,1,0,1,3,0,0,0,0,3,15,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1702,"                    year = -year;
",4,0,0,0,0,0,0,0,0,6,13,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1704,"                return year % 100;
",2,1,0,0,0,1,0,0,0,3,18,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1705,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1706,"                return -1;
",0,0,0,0,0,1,0,0,0,1,10,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1711,"            int year = getTwoDigitYear(partial);
",2,0,0,1,2,0,4,0,0,6,36,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1712,"            if (year < 0) {
",2,1,0,1,3,0,0,0,0,3,15,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1713,"                buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1714,"                buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1716,"                FormatUtils.appendPaddedInteger(buf, year, 2);
",0,0,0,1,2,0,8,0,0,8,46,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1718,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1721,"            int year = getTwoDigitYear(partial);
",2,0,0,1,2,0,4,0,0,6,36,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1722,"            if (year < 0) {
",2,1,0,1,3,0,0,0,0,3,15,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1723,"                out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1724,"                out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1726,"                FormatUtils.writePaddedInteger(out, year, 2);
",0,0,0,1,2,0,8,0,0,8,45,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1728,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1731,"            if (partial.isSupported(iType)) {
",0,0,0,2,5,0,6,0,0,6,33,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1733,"                    int year = partial.get(iType);
",2,0,0,1,2,0,6,0,0,8,30,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1734,"                    if (year < 0) {
",2,1,0,1,3,0,0,0,0,3,15,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1735,"                        year = -year;
",4,0,0,0,0,0,0,0,0,6,13,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1737,"                    return year % 100;
",2,1,0,0,0,1,0,0,0,3,18,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1738,"                } catch (RuntimeException e) {}
",2,0,0,2,5,0,0,2,0,4,31,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1740,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1522,"            super(fieldType, numDigits, signed, numDigits);
",8,0,0,1,2,0,0,0,0,8,47,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1523,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1526,"            int newPos = super.parseInto(bucket, text, position);
",10,0,0,1,2,0,0,0,0,10,53,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1527,"            if (newPos < 0) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1528,"                return newPos;
",2,0,0,0,0,1,0,0,0,2,14,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1530,"            int expectedPos = position + iMaxParsedDigits;
",6,1,0,0,0,0,0,0,0,7,46,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1531,"            if (newPos != expectedPos) {
",4,1,0,1,3,0,0,0,0,5,28,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1532,"                if (iSigned) {
",2,0,0,1,3,0,0,0,0,2,14,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1533,"                    char c = text.charAt(position);
",2,0,0,1,2,0,6,0,0,8,31,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1534,"                    if (c == '-' || c == '+') {
",4,3,0,1,3,0,0,0,0,9,27,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1535,"                        expectedPos++;
",2,0,0,0,0,0,0,0,0,3,14,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1538,"                if (newPos > expectedPos) {
",4,1,0,1,3,0,0,0,0,5,27,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1540,"                    return ~(expectedPos + 1);
",2,1,0,1,2,1,0,0,0,4,26,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1541,"                } else if (newPos < expectedPos) {
",4,1,0,1,4,0,0,0,0,5,34,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1543,"                    return ~newPos;
",2,0,0,0,0,1,0,0,0,3,15,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1546,"            return newPos;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/format/ISOPeriodFormat,10,52,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/ISOPeriodFormat,10,53,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/ISOPeriodFormat,10,97,"        if (cAlternate == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,time,org/joda/time/format/ISOPeriodFormat,10,98,"            cAlternate = new PeriodFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,41,6,0.00000,0
defect4j,time,org/joda/time/format/ISOPeriodFormat,10,112,"        return cAlternate;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISOPeriodFormat,10,124,"        if (cAlternateExtended == null) {
",2,1,0,1,3,0,0,0,0,3,33,4,0.00000,0
defect4j,time,org/joda/time/format/ISOPeriodFormat,10,125,"            cAlternateExtended = new PeriodFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,49,6,0.00000,0
defect4j,time,org/joda/time/format/ISOPeriodFormat,10,143,"        return cAlternateExtended;
",2,0,0,0,0,1,0,0,0,2,26,4,0.00000,0
defect4j,time,org/joda/time/format/ISOPeriodFormat,10,155,"        if (cAlternateWithWeeks == null) {
",2,1,0,1,3,0,0,0,0,3,34,4,0.00000,0
defect4j,time,org/joda/time/format/ISOPeriodFormat,10,156,"            cAlternateWithWeeks = new PeriodFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,50,6,0.00000,0
defect4j,time,org/joda/time/format/ISOPeriodFormat,10,171,"        return cAlternateWithWeeks;
",2,0,0,0,0,1,0,0,0,2,27,4,0.00000,0
defect4j,time,org/joda/time/format/ISOPeriodFormat,10,183,"        if (cAlternateExtendedWihWeeks == null) {
",2,1,0,1,3,0,0,0,0,3,41,4,0.00000,0
defect4j,time,org/joda/time/format/ISOPeriodFormat,10,184,"            cAlternateExtendedWihWeeks = new PeriodFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,57,6,0.00000,0
defect4j,time,org/joda/time/format/ISOPeriodFormat,10,203,"        return cAlternateExtendedWihWeeks;
",2,0,0,0,0,1,0,0,0,2,34,4,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1553,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1557,"            return iText.length();
",0,0,0,1,2,1,4,0,0,4,22,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1561,"            buf.append(iText);
",0,0,0,1,2,0,6,0,0,6,18,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1562,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1565,"            out.write(iText);
",0,0,0,1,2,0,6,0,0,6,17,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1566,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1571,"            if (periodStr.regionMatches(true, position, iText, 0, iText.length())) {
",0,0,0,3,7,0,12,0,0,13,72,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1572,"                return position + iText.length();
",2,1,0,1,2,1,4,0,0,7,33,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1574,"            return ~position;
",2,0,0,0,0,1,0,0,0,3,17,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,141,"        if (iNotPrinter) {
",2,0,0,1,3,0,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,142,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,144,"        return toFormatter().getPrinter();
",0,0,0,2,4,1,4,0,0,4,34,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,160,"        if (iNotParser) {
",2,0,0,1,3,0,0,0,0,2,17,4,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,161,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,163,"        return toFormatter().getParser();
",0,0,0,2,4,1,4,0,0,4,33,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,179,"            iElementPairs.clear();
",0,0,0,1,2,0,4,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,192,"        if (formatter == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,193,"            throw new IllegalArgumentException(""No formatter supplied"");
",0,0,0,1,2,0,0,2,0,3,60,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,195,"        clearPrefix();
",0,0,0,1,2,0,2,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,196,"        append0(formatter.getPrinter(), formatter.getParser());
",0,0,0,3,6,0,10,0,0,10,55,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,197,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,212,"        if (printer == null && parser == null) {
",4,3,0,1,3,0,0,0,0,7,40,4,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,213,"            throw new IllegalArgumentException(""No printer or parser supplied"");
",0,0,0,1,2,0,0,2,0,3,68,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,215,"        clearPrefix();
",0,0,0,1,2,0,2,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,216,"        append0(printer, parser);
",0,0,0,1,2,0,6,0,0,6,25,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,217,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,229,"            throw new IllegalArgumentException(""Literal must not be null"");
",0,0,0,1,2,0,0,2,0,4,63,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,245,"        iMinPrintedDigits = minDigits;
",4,0,0,0,0,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,246,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,256,"        iMaxParsedDigits = maxDigits;
",4,0,0,0,0,0,0,0,0,5,29,4,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,257,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,266,"        iRejectSignedValues = v;
",4,0,0,0,0,0,0,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,267,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,280,"        iPrintZeroSetting = PRINT_ZERO_RARELY_LAST;
",4,0,0,0,0,0,0,0,0,5,43,4,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,281,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,292,"        iPrintZeroSetting = PRINT_ZERO_RARELY_FIRST;
",4,0,0,0,0,0,0,0,0,5,44,4,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,293,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,303,"        iPrintZeroSetting = PRINT_ZERO_IF_SUPPORTED;
",4,0,0,0,0,0,0,0,0,5,44,4,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,304,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,315,"        iPrintZeroSetting = PRINT_ZERO_ALWAYS;
",4,0,0,0,0,0,0,0,0,5,38,4,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,316,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,329,"        iPrintZeroSetting = PRINT_ZERO_NEVER;
",4,0,0,0,0,0,0,0,0,5,37,4,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,330,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,343,"        if (text == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,344,"            throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,8,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,346,"        return appendPrefix(new SimpleAffix(text));
",2,0,0,2,4,1,2,2,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,363,"        if (singularText == null || pluralText == null) {
",4,3,0,1,3,0,0,0,0,7,49,4,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,364,"            throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,8,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,366,"        return appendPrefix(new PluralAffix(singularText, pluralText));
",4,0,0,2,4,1,2,2,0,8,63,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,378,"        if (prefix == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,379,"            throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,8,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,381,"        if (iPrefix != null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,382,"            prefix = new CompositeAffix(iPrefix, prefix);
",6,0,0,1,2,0,0,2,0,9,45,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,384,"        iPrefix = prefix;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,385,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,476,"        appendField(SECONDS);
",0,0,0,1,2,0,4,0,0,4,21,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,477,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,488,"        appendField(SECONDS_MILLIS);
",0,0,0,1,2,0,4,0,0,4,28,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,489,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,513,"        appendField(MILLIS);
",0,0,0,1,2,0,4,0,0,4,20,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,514,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,525,"        appendField(7, 3);
",0,0,0,1,2,0,2,0,0,2,18,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,526,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,553,"            throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,8,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,573,"        if (singularText == null || pluralText == null) {
",4,3,0,1,3,0,0,0,0,7,49,4,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,574,"            throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,8,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,576,"        return appendSuffix(new PluralAffix(singularText, pluralText));
",4,0,0,2,4,1,2,2,0,8,63,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,595,"            originalPrinter = null;
",2,0,0,0,0,0,0,0,0,3,23,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,596,"            originalParser = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,602,"            throw new IllegalStateException(""No field to apply suffix to"");
",0,0,0,1,2,0,0,2,0,3,63,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,632,"        return appendSeparator(text, text, null, true, true);
",0,0,0,1,2,1,6,0,0,9,53,4,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,672,"        return appendSeparator(text, text, null, true, false);
",0,0,0,1,2,1,6,0,0,9,54,4,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,697,"        return appendSeparator(text, finalText, null, true, true);
",0,0,0,1,2,1,6,0,0,9,58,4,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,724,"        return appendSeparator(text, finalText, variants, true, true);
",0,0,0,1,2,1,8,0,0,10,62,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,731,"            throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,8,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,739,"            if (useAfter && useBefore == false) {
",4,2,0,1,3,0,0,0,0,7,37,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,740,"                Separator separator = new Separator(
",2,0,0,0,1,0,0,4,0,6,36,8,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,743,"                append0(separator, separator);
",0,0,0,1,2,0,6,0,0,6,30,9,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,745,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,753,"                lastSeparator = (Separator) pairs.get(i);
",2,0,0,2,4,0,6,2,0,11,41,8,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,754,"                pairs = pairs.subList(i + 1, pairs.size());
",4,1,0,2,4,0,8,0,0,14,43,8,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,755,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,762,"            throw new IllegalStateException(""Cannot have two adjacent separators"");
",0,0,0,1,2,0,0,2,0,3,71,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,780,"            throw new IllegalStateException(""Prefix not followed by field"");
",0,0,0,1,2,0,0,2,0,3,64,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,796,"            throw new IllegalStateException(""Builder has created neither a printer nor a parser"");
",0,0,0,1,2,0,0,2,0,3,86,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,809,"            return new PeriodFormatter(null, (PeriodParser) comp[1]);
",0,0,1,3,6,1,0,4,0,7,57,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,811,"            return new PeriodFormatter((PeriodPrinter) comp[0], null);
",0,0,1,3,6,1,0,4,0,7,58,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,820,"                return new Object[] {Literal.EMPTY, Literal.EMPTY};
",8,0,0,2,4,1,0,2,0,10,51,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,822,"                return new Object[] {elementPairs.get(0), elementPairs.get(1)};
",0,0,0,4,8,1,8,2,0,10,63,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1779,"                iPrinters = null;
",2,0,0,0,0,0,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1786,"                iParsers = null;
",2,0,0,0,0,0,0,0,0,3,16,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1794,"            int sum = 0;
",2,0,0,0,0,0,0,0,0,2,12,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1795,"            PeriodPrinter[] printers = iPrinters;
",4,0,0,1,2,0,0,2,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1796,"            for (int i=printers.length; sum < stopAt && --i>=0; ) {
",12,3,0,1,3,0,0,0,0,16,55,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1797,"                sum += printers[i].countFieldsToPrint(period, Integer.MAX_VALUE, locale);
",6,0,1,2,4,0,6,0,0,17,73,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1799,"            return sum;
",2,0,0,0,0,1,0,0,0,2,11,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1803,"            int sum = 0;
",2,0,0,0,0,0,0,0,0,2,12,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1804,"            PeriodPrinter[] printers = iPrinters;
",4,0,0,1,2,0,0,2,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1805,"            for (int i=printers.length; --i>=0; ) {
",8,1,0,1,3,0,0,0,0,10,39,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1806,"                sum += printers[i].calculatePrintedLength(period, locale);
",2,0,1,2,4,0,6,0,0,13,58,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1808,"            return sum;
",2,0,0,0,0,1,0,0,0,2,11,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1812,"            PeriodPrinter[] printers = iPrinters;
",4,0,0,1,2,0,0,2,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1813,"            int len = printers.length;
",6,0,0,0,0,0,0,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1814,"            for (int i=0; i<len; i++) {
",8,1,0,1,3,0,0,0,0,10,27,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1815,"                printers[i].printTo(buf, period, locale);
",0,0,1,2,4,0,8,0,0,12,41,8,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1817,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1820,"            PeriodPrinter[] printers = iPrinters;
",4,0,0,1,2,0,0,2,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1821,"            int len = printers.length;
",6,0,0,0,0,0,0,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1822,"            for (int i=0; i<len; i++) {
",8,1,0,1,3,0,0,0,0,10,27,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1823,"                printers[i].printTo(out, period, locale);
",0,0,1,2,4,0,8,0,0,12,41,8,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1825,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1830,"            PeriodParser[] parsers = iParsers;
",4,0,0,1,2,0,0,2,0,6,34,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1831,"            if (parsers == null) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1832,"                throw new UnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,42,9,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1835,"            int len = parsers.length;
",6,0,0,0,0,0,0,0,0,6,25,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1836,"            for (int i=0; i<len && position >= 0; i++) {
",10,3,0,1,3,0,0,0,0,14,44,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1837,"                position = parsers[i].parseInto(period, periodStr, position, locale);
",2,0,1,2,4,0,10,0,0,17,69,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1839,"            return position;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1848,"                        addArrayToList(printerList, ((Composite) element).iPrinters);
",4,0,0,3,6,0,4,2,0,10,61,12,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1857,"                        addArrayToList(parserList, ((Composite) element).iParsers);
",4,0,0,3,6,0,4,2,0,10,59,12,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1866,"            if (array != null) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1867,"                for (int i=0; i<array.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1868,"                    list.add(array[i]);
",0,0,1,2,4,0,4,0,0,8,19,10,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1871,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1609,"                TreeSet<String> parsedSet = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER);
",6,0,0,1,2,0,0,8,0,14,79,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1610,"                parsedSet.add(text);
",0,0,0,1,2,0,6,0,0,6,20,8,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1611,"                parsedSet.add(finalText);
",0,0,0,1,2,0,6,0,0,6,25,8,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1612,"                if (variants != null) {
",2,1,0,1,3,0,0,0,0,3,23,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1613,"                    for (int i=variants.length; --i>=0; ) {
",8,1,0,1,3,0,0,0,0,10,39,9,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1614,"                        parsedSet.add(variants[i]);
",0,0,1,2,4,0,4,0,0,8,27,12,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1617,"                ArrayList<String> parsedList = new ArrayList<String>(parsedSet);
",4,0,0,1,2,0,0,8,0,12,64,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1618,"                Collections.reverse(parsedList);
",0,0,0,1,2,0,6,0,0,6,32,8,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1619,"                iParsedForms = parsedList.toArray(new String[parsedList.size()]);
",2,0,0,3,6,0,8,2,0,13,65,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1629,"            int sum = iBeforePrinter.countFieldsToPrint(period, stopAt, locale);
",2,0,0,1,2,0,10,0,0,12,68,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1630,"            if (sum < stopAt) {
",4,1,0,1,3,0,0,0,0,5,19,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1631,"                sum += iAfterPrinter.countFieldsToPrint(period, stopAt, locale);
",2,0,0,1,2,0,10,0,0,13,64,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1633,"            return sum;
",2,0,0,0,0,1,0,0,0,2,11,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1637,"            PeriodPrinter before = iBeforePrinter;
",4,0,0,0,0,0,0,2,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1638,"            PeriodPrinter after = iAfterPrinter;
",4,0,0,0,0,0,0,2,0,6,36,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1640,"            int sum = before.calculatePrintedLength(period, locale)
",2,0,0,1,2,0,8,0,0,10,55,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1643,"            if (iUseBefore) {
",2,0,0,1,3,0,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1644,"                if (before.countFieldsToPrint(period, 1, locale) > 0) {
",0,1,0,2,5,0,8,0,0,9,55,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1645,"                    if (iUseAfter) {
",2,0,0,1,3,0,0,0,0,2,16,9,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1646,"                        int afterCount = after.countFieldsToPrint(period, 2, locale);
",2,0,0,1,2,0,8,0,0,10,61,12,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1647,"                        if (afterCount > 0) {
",2,1,0,1,3,0,0,0,0,3,21,11,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1648,"                            sum += (afterCount > 1 ? iText : iFinalText).length();
",8,1,0,2,4,0,2,0,0,12,54,13,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1650,"                    } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1651,"                        sum += iText.length();
",2,0,0,1,2,0,4,0,0,7,22,11,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1654,"            } else if (iUseAfter && after.countFieldsToPrint(period, 1, locale) > 0) {
",2,2,0,2,6,0,8,0,0,12,74,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1655,"                sum += iText.length();
",2,0,0,1,2,0,4,0,0,7,22,8,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1658,"            return sum;
",2,0,0,0,0,1,0,0,0,2,11,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1662,"            PeriodPrinter before = iBeforePrinter;
",4,0,0,0,0,0,0,2,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1663,"            PeriodPrinter after = iAfterPrinter;
",4,0,0,0,0,0,0,2,0,6,36,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1665,"            before.printTo(buf, period, locale);
",0,0,0,1,2,0,10,0,0,10,36,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1666,"            if (iUseBefore) {
",2,0,0,1,3,0,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1667,"                if (before.countFieldsToPrint(period, 1, locale) > 0) {
",0,1,0,2,5,0,8,0,0,9,55,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1668,"                    if (iUseAfter) {
",2,0,0,1,3,0,0,0,0,2,16,9,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1669,"                        int afterCount = after.countFieldsToPrint(period, 2, locale);
",2,0,0,1,2,0,8,0,0,10,61,12,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1670,"                        if (afterCount > 0) {
",2,1,0,1,3,0,0,0,0,3,21,11,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1671,"                            buf.append(afterCount > 1 ? iText : iFinalText);
",6,1,0,1,2,0,4,0,0,11,48,14,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1673,"                    } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1674,"                        buf.append(iText);
",0,0,0,1,2,0,6,0,0,6,18,12,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1677,"            } else if (iUseAfter && after.countFieldsToPrint(period, 1, locale) > 0) {
",2,2,0,2,6,0,8,0,0,12,74,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1678,"                buf.append(iText);
",0,0,0,1,2,0,6,0,0,6,18,9,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1680,"            after.printTo(buf, period, locale);
",0,0,0,1,2,0,10,0,0,10,35,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1681,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1684,"            PeriodPrinter before = iBeforePrinter;
",4,0,0,0,0,0,0,2,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1685,"            PeriodPrinter after = iAfterPrinter;
",4,0,0,0,0,0,0,2,0,6,36,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1687,"            before.printTo(out, period, locale);
",0,0,0,1,2,0,10,0,0,10,36,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1688,"            if (iUseBefore) {
",2,0,0,1,3,0,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1689,"                if (before.countFieldsToPrint(period, 1, locale) > 0) {
",0,1,0,2,5,0,8,0,0,9,55,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1690,"                    if (iUseAfter) {
",2,0,0,1,3,0,0,0,0,2,16,9,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1691,"                        int afterCount = after.countFieldsToPrint(period, 2, locale);
",2,0,0,1,2,0,8,0,0,10,61,12,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1692,"                        if (afterCount > 0) {
",2,1,0,1,3,0,0,0,0,3,21,11,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1693,"                            out.write(afterCount > 1 ? iText : iFinalText);
",6,1,0,1,2,0,4,0,0,11,47,14,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1695,"                    } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1696,"                        out.write(iText);
",0,0,0,1,2,0,6,0,0,6,17,12,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1699,"            } else if (iUseAfter && after.countFieldsToPrint(period, 1, locale) > 0) {
",2,2,0,2,6,0,8,0,0,12,74,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1700,"                out.write(iText);
",0,0,0,1,2,0,6,0,0,6,17,9,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1702,"            after.printTo(out, period, locale);
",0,0,0,1,2,0,10,0,0,10,35,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1703,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1708,"            int oldPos = position;
",4,0,0,0,0,0,0,0,0,4,22,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1709,"            position = iBeforeParser.parseInto(period, periodStr, position, locale);
",2,0,0,1,2,0,12,0,0,15,72,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1711,"            if (position < 0) {
",2,1,0,1,3,0,0,0,0,3,19,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1712,"                return position;
",2,0,0,0,0,1,0,0,0,2,16,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1715,"            boolean found = false;
",2,0,0,0,0,0,0,0,0,3,22,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1716,"            int parsedFormLength = -1;
",2,0,0,0,0,0,0,0,0,3,26,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1717,"            if (position > oldPos) {
",4,1,0,1,3,0,0,0,0,5,24,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1719,"                String[] parsedForms = iParsedForms;
",4,0,0,1,2,0,0,2,0,6,36,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1720,"                int length = parsedForms.length;
",6,0,0,0,0,0,0,0,0,6,32,8,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1721,"                for (int i=0; i < length; i++) {
",8,1,0,1,3,0,0,0,0,10,32,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1722,"                    String parsedForm = parsedForms[i];
",2,0,1,1,2,0,0,2,0,8,35,9,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1723,"                    if ((parsedForm == null || parsedForm.length() == 0) ||
",2,4,0,2,5,0,4,0,0,10,55,9,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1727,"                        parsedFormLength = (parsedForm == null ? 0 : parsedForm.length());
",4,1,0,2,4,0,4,0,0,10,66,11,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1728,"                        position += parsedFormLength;
",4,0,0,0,0,0,0,0,0,5,29,11,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1729,"                        found = true;
",2,0,0,0,0,0,0,0,0,4,13,11,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1730,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1735,"            oldPos = position;
",4,0,0,0,0,0,0,0,0,5,18,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1736,"            position = iAfterParser.parseInto(period, periodStr, position, locale);
",2,0,0,1,2,0,12,0,0,15,71,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1738,"            if (position < 0) {
",2,1,0,1,3,0,0,0,0,3,19,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1739,"                return position;
",2,0,0,0,0,1,0,0,0,2,16,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1742,"            if (found && position == oldPos && parsedFormLength > 0) {
",8,4,0,1,3,0,0,0,0,12,58,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1744,"                return ~oldPos;
",2,0,0,0,0,1,0,0,0,3,15,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1747,"            if (position > oldPos && !found && !iUseBefore) {
",8,3,0,1,3,0,0,0,0,13,49,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1749,"                return ~oldPos;
",2,0,0,0,0,1,0,0,0,3,15,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1752,"            return position;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1412,"                DateTimeField field = iFieldType.getField(chrono);
",2,0,0,1,2,0,6,2,0,10,50,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1413,"                FormatUtils.appendUnpaddedInteger(buf, field.get(instant));
",0,0,0,2,4,0,12,0,0,12,59,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1416,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1414,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1415,"                buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1417,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1423,"                DateTimeField field = iFieldType.getField(chrono);
",2,0,0,1,2,0,6,2,0,10,50,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1424,"                FormatUtils.writeUnpaddedInteger(out, field.get(instant));
",0,0,0,2,4,0,12,0,0,12,58,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1427,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1425,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1426,"                out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1428,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1431,"            if (partial.isSupported(iFieldType)) {
",0,0,0,2,5,0,6,0,0,6,38,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1433,"                    FormatUtils.appendUnpaddedInteger(buf, partial.get(iFieldType));
",0,0,0,2,4,0,12,0,0,12,64,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1436,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1434,"                } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1435,"                    buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1438,"                buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1440,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1443,"            if (partial.isSupported(iFieldType)) {
",0,0,0,2,5,0,6,0,0,6,38,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1445,"                    FormatUtils.writeUnpaddedInteger(out, partial.get(iFieldType));
",0,0,0,2,4,0,12,0,0,12,63,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1448,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1446,"                } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1447,"                    out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1450,"                out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1452,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,991,"        CompositeAffix(PeriodFieldAffix left, PeriodFieldAffix right) {
",6,0,0,1,3,0,0,4,0,10,63,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,992,"            iLeft = left;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,993,"            iRight = right;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,994,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,997,"            return iLeft.calculatePrintedLength(value)
",0,0,0,1,2,1,6,0,0,6,42,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1002,"            iLeft.printTo(buf, value);
",0,0,0,1,2,0,8,0,0,8,26,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1003,"            iRight.printTo(buf, value);
",0,0,0,1,2,0,8,0,0,8,27,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1004,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1007,"            iLeft.printTo(out, value);
",0,0,0,1,2,0,8,0,0,8,26,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1008,"            iRight.printTo(out, value);
",0,0,0,1,2,0,8,0,0,8,27,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1009,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1012,"            position = iLeft.parse(periodStr, position);
",2,0,0,1,2,0,8,0,0,11,44,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1013,"            if (position >= 0) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1014,"                position = iRight.parse(periodStr, position);
",2,0,0,1,2,0,8,0,0,11,45,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1016,"            return position;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1020,"            int pos = iLeft.scan(periodStr, position);
",2,0,0,1,2,0,8,0,0,10,42,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1021,"            if (pos >= 0) {
",2,1,0,1,3,0,0,0,0,3,15,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1022,"                return iRight.scan(periodStr, pos);
",0,0,0,1,2,1,8,0,0,8,35,8,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1024,"            return ~position;
",2,0,0,0,0,1,0,0,0,3,17,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1073,"                suffix = new CompositeAffix(field.iSuffix, suffix);
",8,0,0,1,2,0,0,2,0,11,51,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1079,"            if (stopAt <= 0) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1080,"                return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1082,"            if (iPrintZeroSetting == PRINT_ZERO_ALWAYS || getFieldValue(period) != Long.MAX_VALUE) {
",8,3,0,2,5,0,4,0,0,15,88,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1083,"                return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1085,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1089,"            long valueLong = getFieldValue(period);
",2,0,0,1,2,0,4,0,0,6,39,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1090,"            if (valueLong == Long.MAX_VALUE) {
",6,1,0,1,3,0,0,0,0,7,34,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1091,"                return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1094,"            int sum = Math.max(FormatUtils.calculateDigitCount(valueLong), iMinPrintedDigits);
",2,0,0,2,4,0,12,0,0,14,82,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1095,"            if (iFieldType >= SECONDS_MILLIS) {
",4,1,0,1,3,0,0,0,0,5,35,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1098,"                sum = (valueLong < 0 ? Math.max(sum, 5) : Math.max(sum, 4));
",4,1,0,3,6,0,12,0,0,18,60,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1100,"                sum++;
",2,0,0,0,0,0,0,0,0,3,6,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1101,"                if (iFieldType == SECONDS_OPTIONAL_MILLIS &&
",4,2,0,0,1,0,0,0,0,6,44,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1103,"                    sum -= 4; // remove three digits and decimal point
",2,0,0,0,0,0,0,0,0,3,50,9,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1106,"                valueLong = valueLong / DateTimeConstants.MILLIS_PER_SECOND;
",8,1,0,0,0,0,0,0,0,10,60,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1108,"            int value = (int) valueLong;
",4,0,0,1,2,0,0,0,0,4,28,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1110,"            if (iPrefix != null) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1111,"                sum += iPrefix.calculatePrintedLength(value);
",2,0,0,1,2,0,6,0,0,9,45,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1113,"            if (iSuffix != null) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1114,"                sum += iSuffix.calculatePrintedLength(value);
",2,0,0,1,2,0,6,0,0,9,45,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1117,"            return sum;
",2,0,0,0,0,1,0,0,0,2,11,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1121,"            long valueLong = getFieldValue(period);
",2,0,0,1,2,0,4,0,0,6,39,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1122,"            if (valueLong == Long.MAX_VALUE) {
",6,1,0,1,3,0,0,0,0,7,34,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1123,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1125,"            int value = (int) valueLong;
",4,0,0,1,2,0,0,0,0,4,28,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1126,"            if (iFieldType >= SECONDS_MILLIS) {
",4,1,0,1,3,0,0,0,0,5,35,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1127,"                value = (int) (valueLong / DateTimeConstants.MILLIS_PER_SECOND);
",8,1,0,2,4,0,0,0,0,10,64,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1130,"            if (iPrefix != null) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1131,"                iPrefix.printTo(buf, value);
",0,0,0,1,2,0,8,0,0,8,28,8,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1133,"            int bufLen = buf.length();
",2,0,0,1,2,0,4,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1134,"            int minDigits = iMinPrintedDigits;
",4,0,0,0,0,0,0,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1135,"            if (minDigits <= 1) {
",2,1,0,1,3,0,0,0,0,3,21,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1136,"                FormatUtils.appendUnpaddedInteger(buf, value);
",0,0,0,1,2,0,8,0,0,8,46,8,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1138,"                FormatUtils.appendPaddedInteger(buf, value, minDigits);
",0,0,0,1,2,0,10,0,0,10,55,8,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1140,"            if (iFieldType >= SECONDS_MILLIS) {
",4,1,0,1,3,0,0,0,0,5,35,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1141,"                int dp = (int) (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND);
",6,1,0,3,6,0,6,0,0,13,75,8,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1142,"                if (iFieldType == SECONDS_MILLIS || dp > 0) {
",6,3,0,1,3,0,0,0,0,9,45,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1143,"                    if (valueLong < 0 && valueLong > -DateTimeConstants.MILLIS_PER_SECOND) {
",8,3,0,1,3,0,0,0,0,12,72,9,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1144,"                        buf.insert(bufLen, '-');
",0,0,0,1,2,0,6,0,0,7,24,12,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1146,"                    buf.append('.');
",0,0,0,1,2,0,4,0,0,5,16,10,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1147,"                    FormatUtils.appendPaddedInteger(buf, dp, 3);
",0,0,0,1,2,0,8,0,0,8,44,10,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1150,"            if (iSuffix != null) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1151,"                iSuffix.printTo(buf, value);
",0,0,0,1,2,0,8,0,0,8,28,8,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1153,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1156,"            long valueLong = getFieldValue(period);
",2,0,0,1,2,0,4,0,0,6,39,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1157,"            if (valueLong == Long.MAX_VALUE) {
",6,1,0,1,3,0,0,0,0,7,34,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1158,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1160,"            int value = (int) valueLong;
",4,0,0,1,2,0,0,0,0,4,28,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1161,"            if (iFieldType >= SECONDS_MILLIS) {
",4,1,0,1,3,0,0,0,0,5,35,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1162,"                value = (int) (valueLong / DateTimeConstants.MILLIS_PER_SECOND);
",8,1,0,2,4,0,0,0,0,10,64,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1165,"            if (iPrefix != null) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1166,"                iPrefix.printTo(out, value);
",0,0,0,1,2,0,8,0,0,8,28,8,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1168,"            int minDigits = iMinPrintedDigits;
",4,0,0,0,0,0,0,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1169,"            if (minDigits <= 1) {
",2,1,0,1,3,0,0,0,0,3,21,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1170,"                FormatUtils.writeUnpaddedInteger(out, value);
",0,0,0,1,2,0,8,0,0,8,45,8,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1172,"                FormatUtils.writePaddedInteger(out, value, minDigits);
",0,0,0,1,2,0,10,0,0,10,54,8,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1174,"            if (iFieldType >= SECONDS_MILLIS) {
",4,1,0,1,3,0,0,0,0,5,35,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1175,"                int dp = (int) (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND);
",6,1,0,3,6,0,6,0,0,13,75,8,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1176,"                if (iFieldType == SECONDS_MILLIS || dp > 0) {
",6,3,0,1,3,0,0,0,0,9,45,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1177,"                    out.write('.');
",0,0,0,1,2,0,4,0,0,5,15,10,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1178,"                    FormatUtils.writePaddedInteger(out, dp, 3);
",0,0,0,1,2,0,8,0,0,8,43,10,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1181,"            if (iSuffix != null) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1182,"                iSuffix.printTo(out, value);
",0,0,0,1,2,0,8,0,0,8,28,8,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1184,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1190,"            boolean mustParse = (iPrintZeroSetting == PRINT_ZERO_ALWAYS);
",6,1,0,1,2,0,0,0,0,7,61,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1193,"            if (position >= text.length()) {
",2,1,0,2,5,0,4,0,0,7,32,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1194,"                return mustParse ? ~position : position;
",6,0,0,0,0,1,0,0,0,7,40,8,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1197,"            if (iPrefix != null) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1198,"                position = iPrefix.parse(text, position);
",2,0,0,1,2,0,8,0,0,11,41,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1199,"                if (position >= 0) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1201,"                    mustParse = true;
",2,0,0,0,0,0,0,0,0,4,17,9,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1204,"                    if (!mustParse) {
",2,0,0,1,3,0,0,0,0,3,17,9,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1208,"                        return ~position;
",2,0,0,0,0,1,0,0,0,3,17,11,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1210,"                    return position;
",2,0,0,0,0,1,0,0,0,2,16,9,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1214,"            int suffixPos = -1;
",2,0,0,0,0,0,0,0,0,3,19,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1215,"            if (iSuffix != null && !mustParse) {
",4,2,0,1,3,0,0,0,0,7,36,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1218,"                suffixPos = iSuffix.scan(text, position);
",2,0,0,1,2,0,8,0,0,11,41,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1219,"                if (suffixPos >= 0) {
",2,1,0,1,3,0,0,0,0,3,21,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1221,"                    mustParse = true;
",2,0,0,0,0,0,0,0,0,4,17,9,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1224,"                    if (!mustParse) {
",2,0,0,1,3,0,0,0,0,3,17,9,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1228,"                        return ~suffixPos;
",2,0,0,0,0,1,0,0,0,3,18,11,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1230,"                    return suffixPos;
",2,0,0,0,0,1,0,0,0,2,17,9,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1234,"            if (!mustParse && !isSupported(period.getPeriodType(), iFieldType)) {
",2,1,0,3,7,0,8,0,0,13,69,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1237,"                return position;
",2,0,0,0,0,1,0,0,0,2,16,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1241,"            if (suffixPos > 0) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1242,"                limit = Math.min(iMaxParsedDigits, suffixPos - position);
",6,1,0,1,2,0,6,0,0,14,57,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1244,"                limit = Math.min(iMaxParsedDigits, text.length() - position);
",4,1,0,2,4,0,10,0,0,16,61,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1248,"            int length = 0;
",2,0,0,0,0,0,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1249,"            int fractPos = -1;
",2,0,0,0,0,0,0,0,0,3,18,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1250,"            boolean hasDigits = false;
",2,0,0,0,0,0,0,0,0,3,26,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1251,"            while (length < limit) {
",4,1,0,1,3,0,0,0,0,5,24,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1252,"                char c = text.charAt(position + length);
",6,1,0,1,2,0,4,0,0,11,40,8,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1254,"                if (length == 0 && (c == '-' || c == '+') && !iRejectSignedValues) {
",8,6,0,2,5,0,0,0,0,17,68,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1255,"                    boolean negative = c == '-';
",4,1,0,0,0,0,0,0,0,6,28,10,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1258,"                    if (length + 1 >= limit || 
",4,4,0,0,1,0,0,0,0,8,26,9,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1261,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1264,"                    if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,9,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1265,"                        length++;
",2,0,0,0,0,0,0,0,0,3,9,11,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1268,"                        position++;
",2,0,0,0,0,0,0,0,0,3,11,11,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1271,"                    limit = Math.min(limit + 1, text.length() - position);
",6,2,0,2,4,0,8,0,0,17,54,9,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1272,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1275,"                if (c >= '0' && c <= '9') {
",4,3,0,1,3,0,0,0,0,9,27,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1276,"                    hasDigits = true;
",2,0,0,0,0,0,0,0,0,4,17,9,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1278,"                    if ((c == '.' || c == ',')
",4,3,0,1,3,0,0,0,0,9,26,11,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1280,"                        if (fractPos >= 0) {
",2,1,0,1,3,0,0,0,0,3,20,11,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1282,"                            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1284,"                        fractPos = position + length + 1;
",6,1,0,0,0,0,0,0,0,8,33,11,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1286,"                        limit = Math.min(limit + 1, text.length() - position);
",6,2,0,2,4,0,8,0,0,17,54,11,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1291,"                length++;
",2,0,0,0,0,0,0,0,0,3,9,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1292,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1294,"            if (!hasDigits) {
",2,0,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1295,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1298,"            if (suffixPos >= 0 && position + length != suffixPos) {
",8,4,0,1,3,0,0,0,0,12,55,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1303,"                return position;
",2,0,0,0,0,1,0,0,0,2,16,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1306,"            if (iFieldType != SECONDS_MILLIS && iFieldType != SECONDS_OPTIONAL_MILLIS) {
",8,3,0,1,3,0,0,0,0,11,76,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1308,"                setFieldValue(period, iFieldType, parseInt(text, position, length));
",0,0,0,2,4,0,14,0,0,14,68,8,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1309,"            } else if (fractPos < 0) {
",2,1,0,1,4,0,0,0,0,3,26,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1310,"                setFieldValue(period, SECONDS, parseInt(text, position, length));
",0,0,0,2,4,0,14,0,0,14,65,9,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1311,"                setFieldValue(period, MILLIS, 0);
",0,0,0,1,2,0,6,0,0,6,33,9,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1313,"                int wholeValue = parseInt(text, position, fractPos - position - 1);
",6,1,0,1,2,0,6,0,0,13,67,9,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1314,"                setFieldValue(period, SECONDS, wholeValue);
",0,0,0,1,2,0,8,0,0,8,43,9,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1316,"                int fractLen = position + length - fractPos;
",8,2,0,0,0,0,0,0,0,10,44,9,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1318,"                if (fractLen <= 0) {
",2,1,0,1,3,0,0,0,0,3,20,8,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1319,"                    fractValue = 0;
",2,0,0,0,0,0,0,0,0,3,15,10,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1321,"                    if (fractLen >= 3) {
",2,1,0,1,3,0,0,0,0,3,20,10,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1322,"                        fractValue = parseInt(text, fractPos, 3);
",2,0,0,1,2,0,6,0,0,9,41,12,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1324,"                        fractValue = parseInt(text, fractPos, fractLen);
",2,0,0,1,2,0,8,0,0,11,48,12,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1325,"                        if (fractLen == 1) {
",2,1,0,1,3,0,0,0,0,3,20,12,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1326,"                            fractValue *= 100;
",2,0,0,0,0,0,0,0,0,3,18,14,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1328,"                            fractValue *= 10;
",2,0,0,0,0,0,0,0,0,3,17,14,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1331,"                    if (wholeValue < 0) {
",2,1,0,1,3,0,0,0,0,3,21,10,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1332,"                        fractValue = -fractValue;
",4,0,0,0,0,0,0,0,0,6,25,12,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1336,"                setFieldValue(period, MILLIS, fractValue);
",0,0,0,1,2,0,8,0,0,8,42,9,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1339,"            position += length;
",4,0,0,0,0,0,0,0,0,5,19,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1341,"            if (position >= 0 && iSuffix != null) {
",4,3,0,1,3,0,0,0,0,7,39,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1342,"                position = iSuffix.parse(text, position);
",2,0,0,1,2,0,8,0,0,11,41,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1345,"            return position;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1355,"            if (length >= 10) {
",2,1,0,1,3,0,0,0,0,3,19,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1357,"                return Integer.parseInt(text.substring(position, position + length));
",4,1,0,2,4,1,10,0,0,15,69,8,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1359,"            if (length <= 0) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1360,"                return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1362,"            int value = text.charAt(position++);
",4,0,0,1,2,0,4,0,0,9,36,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1363,"            length--;
",2,0,0,0,0,0,0,0,0,3,9,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1365,"            if (value == '-') {
",2,1,0,1,3,0,0,0,0,4,19,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1366,"                if (--length < 0) {
",2,1,0,1,3,0,0,0,0,4,19,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1367,"                    return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1369,"                negative = true;
",2,0,0,0,0,0,0,0,0,4,16,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1370,"                value = text.charAt(position++);
",4,0,0,1,2,0,4,0,0,10,32,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1372,"                negative = false;
",2,0,0,0,0,0,0,0,0,4,17,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1374,"            value -= '0';
",2,0,0,0,0,0,0,0,0,4,13,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1375,"            while (length-- > 0) {
",2,1,0,1,3,0,0,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1376,"                value = ((value << 3) + (value << 1)) + text.charAt(position++) - '0';
",8,5,0,4,8,0,4,0,0,20,70,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1378,"            return negative ? -value : value;
",6,0,0,0,0,1,0,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1386,"            if (iPrintZeroSetting == PRINT_ZERO_ALWAYS) {
",4,1,0,1,3,0,0,0,0,5,45,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1387,"                type = null; // Don't need to check if supported.
",2,0,0,0,0,0,0,0,0,3,49,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1389,"                type = period.getPeriodType();
",2,0,0,1,2,0,4,0,0,7,30,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1391,"            if (type != null && isSupported(type, iFieldType) == false) {
",2,3,0,2,5,0,6,0,0,13,61,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1392,"                return Long.MAX_VALUE;
",4,0,0,0,0,1,0,0,0,4,22,8,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1397,"            switch (iFieldType) {
",2,0,0,1,3,0,0,0,0,2,21,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1399,"                return Long.MAX_VALUE;
",4,0,0,0,0,1,0,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1401,"                value = period.get(DurationFieldType.years());
",2,0,0,2,4,0,8,0,0,11,46,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1402,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1404,"                value = period.get(DurationFieldType.months());
",2,0,0,2,4,0,8,0,0,11,47,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1405,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1407,"                value = period.get(DurationFieldType.weeks());
",2,0,0,2,4,0,8,0,0,11,46,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1408,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1410,"                value = period.get(DurationFieldType.days());
",2,0,0,2,4,0,8,0,0,11,45,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1411,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1413,"                value = period.get(DurationFieldType.hours());
",2,0,0,2,4,0,8,0,0,11,46,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1414,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1416,"                value = period.get(DurationFieldType.minutes());
",2,0,0,2,4,0,8,0,0,11,48,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1417,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1419,"                value = period.get(DurationFieldType.seconds());
",2,0,0,2,4,0,8,0,0,11,48,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1420,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1422,"                value = period.get(DurationFieldType.millis());
",2,0,0,2,4,0,8,0,0,11,47,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1423,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1426,"                int seconds = period.get(DurationFieldType.seconds());
",2,0,0,2,4,0,8,0,0,10,54,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1427,"                int millis = period.get(DurationFieldType.millis());
",2,0,0,2,4,0,8,0,0,10,52,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1428,"                value = (seconds * (long) DateTimeConstants.MILLIS_PER_SECOND) + millis;
",10,2,0,2,4,0,0,0,0,13,72,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1433,"            if (value == 0) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1434,"                switch (iPrintZeroSetting) {
",2,0,0,1,3,0,0,0,0,2,28,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1436,"                    return Long.MAX_VALUE;
",4,0,0,0,0,1,0,0,0,4,22,9,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1438,"                    if (isZero(period) && iFieldFormatters[iFieldType] == this) {
",0,2,1,3,7,0,4,0,0,10,61,8,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1439,"                        for (int i = iFieldType + 1; i <= MAX_FIELD; i++) {
",10,2,0,1,3,0,0,0,0,13,51,10,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1440,"                            if (isSupported(type, i) && iFieldFormatters[i] != null) {
",0,2,1,3,7,0,6,0,0,13,58,12,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1441,"                                return Long.MAX_VALUE;
",4,0,0,0,0,1,0,0,0,4,22,15,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1445,"                        return Long.MAX_VALUE;
",4,0,0,0,0,1,0,0,0,4,22,11,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1449,"                    if (isZero(period) && iFieldFormatters[iFieldType] == this) {
",0,2,1,3,7,0,4,0,0,10,61,8,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1450,"                        int i = Math.min(iFieldType, 8);  // line split out for IBM JDK
",2,0,0,1,2,0,6,0,0,8,63,11,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1451,"                        i--;                              // see bug 1660490
",2,0,0,0,0,0,0,0,0,3,52,10,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1452,"                        for (; i >= 0 && i <= MAX_FIELD; i--) {
",8,3,0,1,3,0,0,0,0,12,39,10,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1453,"                            if (isSupported(type, i) && iFieldFormatters[i] != null) {
",0,2,1,3,7,0,6,0,0,13,58,12,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1454,"                                return Long.MAX_VALUE;
",4,0,0,0,0,1,0,0,0,4,22,15,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1457,"                    } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1458,"                        return Long.MAX_VALUE;
",4,0,0,0,0,1,0,0,0,4,22,11,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1464,"            return value;
",2,0,0,0,0,1,0,0,0,2,13,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1468,"            for (int i = 0, isize = period.size(); i < isize; i++) {
",10,1,0,2,5,0,4,0,0,16,56,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1469,"                if (period.getValue(i) != 0) {
",0,1,0,2,5,0,6,0,0,7,30,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1470,"                    return false;
",0,0,0,0,0,1,0,0,0,1,13,9,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1473,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1477,"            switch (field) {
",2,0,0,1,3,0,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1479,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1481,"                return type.isSupported(DurationFieldType.years());
",0,0,0,2,4,1,8,0,0,8,51,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1483,"                return type.isSupported(DurationFieldType.months());
",0,0,0,2,4,1,8,0,0,8,52,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1485,"                return type.isSupported(DurationFieldType.weeks());
",0,0,0,2,4,1,8,0,0,8,51,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1487,"                return type.isSupported(DurationFieldType.days());
",0,0,0,2,4,1,8,0,0,8,50,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1489,"                return type.isSupported(DurationFieldType.hours());
",0,0,0,2,4,1,8,0,0,8,51,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1491,"                return type.isSupported(DurationFieldType.minutes());
",0,0,0,2,4,1,8,0,0,8,53,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1493,"                return type.isSupported(DurationFieldType.seconds());
",0,0,0,2,4,1,8,0,0,8,53,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1495,"                return type.isSupported(DurationFieldType.millis());
",0,0,0,2,4,1,8,0,0,8,52,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1498,"                return type.isSupported(DurationFieldType.seconds()) ||
",0,1,0,2,4,1,8,0,0,9,55,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1504,"            switch (field) {
",2,0,0,1,3,0,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1506,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1508,"                period.setYears(value);
",0,0,0,1,2,0,6,0,0,6,23,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1509,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1511,"                period.setMonths(value);
",0,0,0,1,2,0,6,0,0,6,24,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1512,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1514,"                period.setWeeks(value);
",0,0,0,1,2,0,6,0,0,6,23,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1515,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1517,"                period.setDays(value);
",0,0,0,1,2,0,6,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1518,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1520,"                period.setHours(value);
",0,0,0,1,2,0,6,0,0,6,23,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1521,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1523,"                period.setMinutes(value);
",0,0,0,1,2,0,6,0,0,6,25,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1524,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1526,"                period.setSeconds(value);
",0,0,0,1,2,0,6,0,0,6,25,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1527,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1529,"                period.setMillis(value);
",0,0,0,1,2,0,6,0,0,6,24,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,1532,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1281,"            buf.append(iValue);
",0,0,0,1,2,0,6,0,0,6,19,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1282,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1287,"            out.write(iValue);
",0,0,0,1,2,0,6,0,0,6,18,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1288,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1291,"            buf.append(iValue);
",0,0,0,1,2,0,6,0,0,6,19,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1292,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1295,"            out.write(iValue);
",0,0,0,1,2,0,6,0,0,6,18,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1296,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1303,"            if (text.regionMatches(true, position, iValue, 0, iValue.length())) {
",0,0,0,3,7,0,12,0,0,13,69,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1304,"                return position + iValue.length();
",2,1,0,1,2,1,4,0,0,7,34,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1306,"            return ~position;
",2,0,0,0,0,1,0,0,0,3,17,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,145,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,146,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,230,"        if (fields == null || fields.size() == 0) {
",2,3,0,2,5,0,4,0,0,9,43,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,231,"            throw new IllegalArgumentException(""The fields must not be null or empty"");
",0,0,0,1,2,0,0,2,0,4,75,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,233,"        Set<DateTimeFieldType> workingFields = new HashSet<DateTimeFieldType>(fields);
",4,0,0,1,2,0,0,8,0,12,78,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,234,"        int inputSize = workingFields.size();
",2,0,0,1,2,0,4,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,235,"        boolean reducedPrec = false;
",2,0,0,0,0,0,0,0,0,3,28,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,236,"        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();
",2,0,0,1,2,0,0,4,0,6,62,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,238,"        if (workingFields.contains(DateTimeFieldType.monthOfYear())) {
",0,0,0,3,7,0,8,0,0,8,62,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,239,"            reducedPrec = dateByMonth(bld, workingFields, extended, strictISO);
",2,0,0,1,2,0,10,0,0,13,67,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,240,"        } else if (workingFields.contains(DateTimeFieldType.dayOfYear())) {
",0,0,0,3,8,0,8,0,0,8,67,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,241,"            reducedPrec = dateByOrdinal(bld, workingFields, extended, strictISO);
",2,0,0,1,2,0,10,0,0,13,69,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,242,"        } else if (workingFields.contains(DateTimeFieldType.weekOfWeekyear())) {
",0,0,0,3,8,0,8,0,0,8,72,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,243,"            reducedPrec = dateByWeek(bld, workingFields, extended, strictISO);
",2,0,0,1,2,0,10,0,0,13,66,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,244,"        } else if (workingFields.contains(DateTimeFieldType.dayOfMonth())) {
",0,0,0,3,8,0,8,0,0,8,68,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,245,"            reducedPrec = dateByMonth(bld, workingFields, extended, strictISO);
",2,0,0,1,2,0,10,0,0,13,67,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,246,"        } else if (workingFields.contains(DateTimeFieldType.dayOfWeek())) {
",0,0,0,3,8,0,8,0,0,8,67,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,247,"            reducedPrec = dateByWeek(bld, workingFields, extended, strictISO);
",2,0,0,1,2,0,10,0,0,13,66,10,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,248,"        } else if (workingFields.remove(DateTimeFieldType.year())) {
",0,0,0,3,8,0,8,0,0,8,60,10,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,249,"            bld.append(yearElement());
",0,0,0,2,4,0,6,0,0,6,26,12,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,250,"            reducedPrec = true;
",2,0,0,0,0,0,0,0,0,4,19,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,251,"        } else if (workingFields.remove(DateTimeFieldType.weekyear())) {
",0,0,0,3,8,0,8,0,0,8,64,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,252,"            bld.append(weekyearElement());
",0,0,0,2,4,0,6,0,0,6,30,13,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,253,"            reducedPrec = true;
",2,0,0,0,0,0,0,0,0,4,19,12,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,255,"        boolean datePresent = (workingFields.size() < inputSize);
",4,1,0,2,4,0,4,0,0,9,57,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,258,"        time(bld, workingFields, extended, strictISO, reducedPrec, datePresent);
",0,0,0,1,2,0,14,0,0,14,72,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,261,"        if (bld.canBuildFormatter() == false) {
",0,1,0,2,5,0,4,0,0,6,39,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,262,"            throw new IllegalArgumentException(""No valid format for fields: "" + fields);
",2,1,0,1,2,0,0,2,0,6,76,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,268,"            fields.retainAll(workingFields);
",0,0,0,1,2,0,6,0,0,6,32,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,271,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,269,"        } catch (UnsupportedOperationException ex) {
",2,0,0,1,4,0,0,2,0,4,44,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,272,"        return bld.toFormatter();
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,293,"        boolean reducedPrec = false;
",2,0,0,0,0,0,0,0,0,3,28,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,294,"        if (fields.remove(DateTimeFieldType.year())) {
",0,0,0,3,7,0,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,295,"            bld.append(yearElement());
",0,0,0,2,4,0,6,0,0,6,26,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,296,"            if (fields.remove(DateTimeFieldType.monthOfYear())) {
",0,0,0,3,7,0,8,0,0,8,53,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,297,"                if (fields.remove(DateTimeFieldType.dayOfMonth())) {
",0,0,0,3,7,0,8,0,0,8,52,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,299,"                    appendSeparator(bld, extended);
",0,0,0,1,2,0,6,0,0,6,31,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,300,"                    bld.appendMonthOfYear(2);
",0,0,0,1,2,0,4,0,0,4,25,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,301,"                    appendSeparator(bld, extended);
",0,0,0,1,2,0,6,0,0,6,31,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,302,"                    bld.appendDayOfMonth(2);
",0,0,0,1,2,0,4,0,0,4,24,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,305,"                    bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,306,"                    bld.appendMonthOfYear(2);
",0,0,0,1,2,0,4,0,0,4,25,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,307,"                    reducedPrec = true;
",2,0,0,0,0,0,0,0,0,4,19,10,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,310,"                if (fields.remove(DateTimeFieldType.dayOfMonth())) {
",0,0,0,3,7,0,8,0,0,8,52,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,312,"                    checkNotStrictISO(fields, strictISO);
",0,0,0,1,2,0,6,0,0,6,37,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,313,"                    bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,314,"                    bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,315,"                    bld.appendDayOfMonth(2);
",0,0,0,1,2,0,4,0,0,4,24,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,318,"                    reducedPrec = true;
",2,0,0,0,0,0,0,0,0,4,19,10,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,322,"        } else if (fields.remove(DateTimeFieldType.monthOfYear())) {
",0,0,0,3,8,0,8,0,0,8,60,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,323,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,324,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,325,"            bld.appendMonthOfYear(2);
",0,0,0,1,2,0,4,0,0,4,25,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,326,"            if (fields.remove(DateTimeFieldType.dayOfMonth())) {
",0,0,0,3,7,0,8,0,0,8,52,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,328,"                appendSeparator(bld, extended);
",0,0,0,1,2,0,6,0,0,6,31,10,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,329,"                bld.appendDayOfMonth(2);
",0,0,0,1,2,0,4,0,0,4,24,10,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,332,"                reducedPrec = true;
",2,0,0,0,0,0,0,0,0,4,19,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,334,"        } else if (fields.remove(DateTimeFieldType.dayOfMonth())) {
",0,0,0,3,8,0,8,0,0,8,59,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,336,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,337,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,338,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,339,"            bld.appendDayOfMonth(2);
",0,0,0,1,2,0,4,0,0,4,24,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,341,"        return reducedPrec;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,361,"        boolean reducedPrec = false;
",2,0,0,0,0,0,0,0,0,3,28,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,362,"        if (fields.remove(DateTimeFieldType.year())) {
",0,0,0,3,7,0,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,363,"            bld.append(yearElement());
",0,0,0,2,4,0,6,0,0,6,26,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,364,"            if (fields.remove(DateTimeFieldType.dayOfYear())) {
",0,0,0,3,7,0,8,0,0,8,51,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,366,"                appendSeparator(bld, extended);
",0,0,0,1,2,0,6,0,0,6,31,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,367,"                bld.appendDayOfYear(3);
",0,0,0,1,2,0,4,0,0,4,23,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,370,"                reducedPrec = true;
",2,0,0,0,0,0,0,0,0,4,19,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,373,"        } else if (fields.remove(DateTimeFieldType.dayOfYear())) {
",0,0,0,3,8,0,8,0,0,8,58,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,375,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,376,"            bld.appendDayOfYear(3);
",0,0,0,1,2,0,4,0,0,4,23,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,378,"        return reducedPrec;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,398,"        boolean reducedPrec = false;
",2,0,0,0,0,0,0,0,0,3,28,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,399,"        if (fields.remove(DateTimeFieldType.weekyear())) {
",0,0,0,3,7,0,8,0,0,8,50,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,400,"            bld.append(weekyearElement());
",0,0,0,2,4,0,6,0,0,6,30,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,401,"            if (fields.remove(DateTimeFieldType.weekOfWeekyear())) {
",0,0,0,3,7,0,8,0,0,8,56,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,402,"                appendSeparator(bld, extended);
",0,0,0,1,2,0,6,0,0,6,31,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,403,"                bld.appendLiteral('W');
",0,0,0,1,2,0,4,0,0,5,23,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,404,"                bld.appendWeekOfWeekyear(2);
",0,0,0,1,2,0,4,0,0,4,28,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,405,"                if (fields.remove(DateTimeFieldType.dayOfWeek())) {
",0,0,0,3,7,0,8,0,0,8,51,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,407,"                    appendSeparator(bld, extended);
",0,0,0,1,2,0,6,0,0,6,31,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,408,"                    bld.appendDayOfWeek(1);
",0,0,0,1,2,0,4,0,0,4,23,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,411,"                    reducedPrec = true;
",2,0,0,0,0,0,0,0,0,4,19,10,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,414,"                if (fields.remove(DateTimeFieldType.dayOfWeek())) {
",0,0,0,3,7,0,8,0,0,8,51,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,416,"                    checkNotStrictISO(fields, strictISO);
",0,0,0,1,2,0,6,0,0,6,37,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,417,"                    appendSeparator(bld, extended);
",0,0,0,1,2,0,6,0,0,6,31,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,418,"                    bld.appendLiteral('W');
",0,0,0,1,2,0,4,0,0,5,23,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,419,"                    bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,420,"                    bld.appendDayOfWeek(1);
",0,0,0,1,2,0,4,0,0,4,23,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,423,"                    reducedPrec = true;
",2,0,0,0,0,0,0,0,0,4,19,10,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,427,"        } else if (fields.remove(DateTimeFieldType.weekOfWeekyear())) {
",0,0,0,3,8,0,8,0,0,8,63,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,428,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,429,"            bld.appendLiteral('W');
",0,0,0,1,2,0,4,0,0,5,23,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,430,"            bld.appendWeekOfWeekyear(2);
",0,0,0,1,2,0,4,0,0,4,28,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,431,"            if (fields.remove(DateTimeFieldType.dayOfWeek())) {
",0,0,0,3,7,0,8,0,0,8,51,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,433,"                appendSeparator(bld, extended);
",0,0,0,1,2,0,6,0,0,6,31,10,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,434,"                bld.appendDayOfWeek(1);
",0,0,0,1,2,0,4,0,0,4,23,10,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,437,"                reducedPrec = true;
",2,0,0,0,0,0,0,0,0,4,19,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,439,"        } else if (fields.remove(DateTimeFieldType.dayOfWeek())) {
",0,0,0,3,8,0,8,0,0,8,58,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,441,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,442,"            bld.appendLiteral('W');
",0,0,0,1,2,0,4,0,0,5,23,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,443,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,444,"            bld.appendDayOfWeek(1);
",0,0,0,1,2,0,4,0,0,4,23,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,446,"        return reducedPrec;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,470,"        boolean hour = fields.remove(DateTimeFieldType.hourOfDay());
",2,0,0,2,4,0,8,0,0,10,60,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,471,"        boolean minute = fields.remove(DateTimeFieldType.minuteOfHour());
",2,0,0,2,4,0,8,0,0,10,65,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,472,"        boolean second = fields.remove(DateTimeFieldType.secondOfMinute());
",2,0,0,2,4,0,8,0,0,10,67,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,473,"        boolean milli = fields.remove(DateTimeFieldType.millisOfSecond());
",2,0,0,2,4,0,8,0,0,10,66,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,474,"        if (!hour && !minute && !second && !milli) {
",8,1,0,1,3,0,0,0,0,13,44,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,475,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,477,"        if (hour || minute || second || milli) {
",8,1,0,1,3,0,0,0,0,9,40,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,478,"            if (strictISO && reducedPrec) {
",4,1,0,1,3,0,0,0,0,5,31,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,479,"                throw new IllegalArgumentException(""No valid ISO8601 format for fields because Date was reduced precision: "" + fields);
",2,1,0,1,2,0,0,2,0,6,119,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,481,"            if (datePresent) {
",2,0,0,1,3,0,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,482,"                bld.appendLiteral('T');
",0,0,0,1,2,0,4,0,0,5,23,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,485,"        if (hour && minute && second || (hour && !second && !milli)) {
",12,3,0,2,5,0,0,0,0,17,62,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,488,"            if (strictISO && datePresent) {
",4,1,0,1,3,0,0,0,0,5,31,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,489,"                throw new IllegalArgumentException(""No valid ISO8601 format for fields because Time was truncated: "" + fields);
",2,1,0,1,2,0,0,2,0,6,111,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,491,"            if (!hour && (minute && second || (minute && !milli) || second)) {
",12,5,0,3,7,0,0,0,0,19,66,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,494,"                if (strictISO) {
",2,0,0,1,3,0,0,0,0,2,16,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,495,"                    throw new IllegalArgumentException(""No valid ISO8601 format for fields: "" + fields);
",2,1,0,1,2,0,0,2,0,6,84,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,499,"        if (hour) {
",2,0,0,1,3,0,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,500,"            bld.appendHourOfDay(2);
",0,0,0,1,2,0,4,0,0,4,23,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,501,"        } else if (minute || second || milli) {
",6,1,0,1,4,0,0,0,0,7,39,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,502,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,504,"        if (extended && hour && minute) {
",6,1,0,1,3,0,0,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,505,"            bld.appendLiteral(':');
",0,0,0,1,2,0,4,0,0,5,23,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,507,"        if (minute) {
",2,0,0,1,3,0,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,508,"            bld.appendMinuteOfHour(2);
",0,0,0,1,2,0,4,0,0,4,26,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,509,"        } else if (second || milli) {
",4,1,0,1,4,0,0,0,0,5,29,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,510,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,512,"        if (extended && minute && second) {
",6,1,0,1,3,0,0,0,0,7,35,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,513,"            bld.appendLiteral(':');
",0,0,0,1,2,0,4,0,0,5,23,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,515,"        if (second) {
",2,0,0,1,3,0,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,516,"            bld.appendSecondOfMinute(2);
",0,0,0,1,2,0,4,0,0,4,28,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,517,"        } else if (milli) {
",2,0,0,1,4,0,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,518,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,520,"        if (milli) {
",2,0,0,1,3,0,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,521,"            bld.appendLiteral('.');
",0,0,0,1,2,0,4,0,0,5,23,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,522,"            bld.appendMillisOfSecond(3);
",0,0,0,1,2,0,4,0,0,4,28,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,524,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,535,"        if (strictISO) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,536,"            throw new IllegalArgumentException(""No valid ISO8601 format for fields: "" + fields);
",2,1,0,1,2,0,0,2,0,6,84,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,538,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,549,"        if (extended) {
",2,0,0,1,3,0,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,550,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,552,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,569,"        if (dp == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,570,"            DateTimeParser tOffset = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,4,0,6,55,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,573,"            dp = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,578,"        return dp;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,654,"        if (tp == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,655,"            tp = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,661,"        return tp;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,680,"        if (ltp == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,681,"            ltp = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,686,"        return ltp;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,702,"        if (tpe == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,704,"            DateTimeParser decimalPoint = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,4,0,6,60,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,715,"            tpe = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,751,"        return tpe;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,775,"        if (dtp == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,778,"            DateTimeParser time = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,4,0,6,52,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,783,"            dtp = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,787,"        return dtp;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,810,"        if (dotp == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,811,"            DateTimeParser timeOrOffset = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,4,0,6,60,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,816,"            dotp = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,37,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,821,"        return dotp;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,845,"        if (ldotp == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,846,"            DateTimeParser time = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,4,0,6,52,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,850,"            ldotp = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,38,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,855,"        return ldotp;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,866,"        return yearMonthDay();
",0,0,0,1,2,1,2,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,879,"        if (t == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,880,"            t = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,34,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,885,"        return t;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,897,"        if (tx == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,898,"            tx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,903,"        return tx;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,916,"        if (tt == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,917,"            tt = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,922,"        return tt;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,935,"        if (ttx == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,936,"            ttx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,941,"        return ttx;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,953,"        if (dt == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,954,"            dt = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,959,"        return dt;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,971,"        if (dtx == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,972,"            dtx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,977,"        return dtx;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,988,"        if (od == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,989,"            od = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,994,"        return od;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1007,"        if (odt == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1008,"            odt = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1013,"        return odt;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1026,"        if (odtx == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1027,"            odtx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,37,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1032,"        return odtx;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1042,"        return weekyearWeekDay();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1054,"        if (wdt == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1055,"            wdt = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1060,"        return wdt;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1072,"        if (wdtx == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1073,"            wdtx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,37,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1078,"        return wdtx;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1089,"        if (bd == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1090,"            bd = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1096,"        return bd;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1109,"        if (bt == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1110,"            bt = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1119,"        return bt;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1131,"        if (btx == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1132,"            btx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1139,"        return btx;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1152,"        if (btt == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1153,"            btt = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1158,"        return btt;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1171,"        if (bttx == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1172,"            bttx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,37,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1177,"        return bttx;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1189,"        if (bdt == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1190,"            bdt = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1195,"        return bdt;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1207,"        if (bdtx == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1208,"            bdtx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,37,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1213,"        return bdtx;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1224,"        if (bod == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1225,"            bod = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1230,"        return bod;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1243,"        if (bodt == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1244,"            bodt = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,37,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1249,"        return bodt;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1262,"        if (bodtx == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1263,"            bodtx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,38,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1268,"        return bodtx;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1278,"        if (bwd == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1279,"            bwd = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1286,"        return bwd;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1298,"        if (bwdt == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1299,"            bwdt = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,37,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1304,"        return bwdt;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1316,"        if (bwdtx == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1317,"            bwdtx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,38,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1322,"        return bwdtx;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1332,"        return yearElement();
",0,0,0,1,2,1,2,0,0,2,21,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1342,"        if (ym == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1343,"            ym = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1348,"        return ym;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1358,"        if (ymd == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1359,"            ymd = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1365,"        return ymd;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1374,"        return weekyearElement();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1384,"        if (ww == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1385,"            ww = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1390,"        return ww;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1400,"        if (wwd == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1401,"            wwd = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1407,"        return wwd;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1416,"        return hourElement();
",0,0,0,1,2,1,2,0,0,2,21,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1426,"        if (hm == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1427,"            hm = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1432,"        return hm;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1442,"        if (hms == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1443,"            hms = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1449,"        return hms;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1461,"        if (hmsl == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1462,"            hmsl = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,37,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1470,"        return hmsl;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1482,"        if (hmsf == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1483,"            hmsf = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,37,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1490,"        return hmsf;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1500,"        if (dh == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1501,"            dh = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1507,"        return dh;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1517,"        if (dhm == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1518,"            dhm = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1524,"        return dhm;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1535,"        if (dhms == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1536,"            dhms = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,37,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1542,"        return dhms;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1554,"        if (dhmsl == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1555,"            dhmsl = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,38,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1561,"        return dhmsl;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1573,"        if (dhmsf == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1574,"            dhmsf = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,38,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1580,"        return dhmsf;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1653,"        if (lte == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1654,"            lte = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1658,"        return lte;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1662,"        if (hde == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1663,"            hde = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1667,"        return hde;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1671,"        if (mhe == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1672,"            mhe = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1677,"        return mhe;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1681,"        if (sme == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1682,"            sme = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1687,"        return sme;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1691,"        if (fse == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1692,"            fse = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1699,"        return fse;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1703,"        if (ze == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1704,"            ze = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,10,1708,"        return ze;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,387,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,388,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,194,"        return createFormatterForStyle(style);
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,212,"        DateTimeFormatter formatter = createFormatterForStyle(style);
",2,0,0,1,2,0,4,2,0,8,61,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,213,"        if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,214,"            locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,217,"        return ((StyleFormatter) formatter.getPrinter()).getPattern(locale);
",0,0,0,4,8,1,8,2,0,10,68,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,230,"        return createFormatterForStyleIndex(SHORT, NONE);
",0,0,0,1,2,1,6,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,242,"        return createFormatterForStyleIndex(NONE, SHORT);
",0,0,0,1,2,1,6,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,254,"        return createFormatterForStyleIndex(SHORT, SHORT);
",0,0,0,1,2,1,6,0,0,6,50,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,267,"        return createFormatterForStyleIndex(MEDIUM, NONE);
",0,0,0,1,2,1,6,0,0,6,50,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,279,"        return createFormatterForStyleIndex(NONE, MEDIUM);
",0,0,0,1,2,1,6,0,0,6,50,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,291,"        return createFormatterForStyleIndex(MEDIUM, MEDIUM);
",0,0,0,1,2,1,6,0,0,6,52,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,304,"        return createFormatterForStyleIndex(LONG, NONE);
",0,0,0,1,2,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,316,"        return createFormatterForStyleIndex(NONE, LONG);
",0,0,0,1,2,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,328,"        return createFormatterForStyleIndex(LONG, LONG);
",0,0,0,1,2,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,341,"        return createFormatterForStyleIndex(FULL, NONE);
",0,0,0,1,2,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,353,"        return createFormatterForStyleIndex(NONE, FULL);
",0,0,0,1,2,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,365,"        return createFormatterForStyleIndex(FULL, FULL);
",0,0,0,1,2,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,377,"        parsePatternTo(builder, pattern);
",0,0,0,1,2,0,6,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,378,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,410,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,416,"                builder.appendEraText();
",0,0,0,1,2,0,4,0,0,4,24,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,417,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,419,"                builder.appendCenturyOfEra(tokenLen, tokenLen);
",0,0,0,1,2,0,8,0,0,8,47,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,420,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,424,"                if (tokenLen == 2) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,425,"                    boolean lenientParse = true;
",2,0,0,0,0,0,0,0,0,3,28,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,428,"                    if (i + 1 < length) {
",4,2,0,1,3,0,0,0,0,6,21,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,429,"                        indexRef[0]++;
",0,0,1,1,2,0,0,0,0,3,14,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,430,"                        if (isNumericToken(parseToken(pattern, indexRef))) {
",0,0,0,3,7,0,8,0,0,8,52,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,434,"                            lenientParse = false;
",2,0,0,0,0,0,0,0,0,4,21,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,436,"                        indexRef[0]--;
",0,0,1,1,2,0,0,0,0,3,14,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,440,"                    switch (c) {
",2,0,0,1,3,0,0,0,0,2,12,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,442,"                        builder.appendTwoDigitWeekyear
",0,0,0,0,0,0,4,0,0,4,30,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,444,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,448,"                        builder.appendTwoDigitYear(new DateTime().getYear() - 30, lenientParse);
",0,1,0,3,6,0,8,2,0,11,72,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,451,"                } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,453,"                    int maxDigits = 9;
",2,0,0,0,0,0,0,0,0,2,18,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,456,"                    if (i + 1 < length) {
",4,2,0,1,3,0,0,0,0,6,21,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,457,"                        indexRef[0]++;
",0,0,1,1,2,0,0,0,0,3,14,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,458,"                        if (isNumericToken(parseToken(pattern, indexRef))) {
",0,0,0,3,7,0,8,0,0,8,52,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,460,"                            maxDigits = tokenLen;
",4,0,0,0,0,0,0,0,0,5,21,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,462,"                        indexRef[0]--;
",0,0,1,1,2,0,0,0,0,3,14,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,465,"                    switch (c) {
",2,0,0,1,3,0,0,0,0,2,12,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,467,"                        builder.appendWeekyear(tokenLen, maxDigits);
",0,0,0,1,2,0,8,0,0,8,44,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,468,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,470,"                        builder.appendYear(tokenLen, maxDigits);
",0,0,0,1,2,0,8,0,0,8,40,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,471,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,473,"                        builder.appendYearOfEra(tokenLen, maxDigits);
",0,0,0,1,2,0,8,0,0,8,45,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,477,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,480,"                    if (tokenLen >= 4) {
",2,1,0,1,3,0,0,0,0,3,20,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,481,"                        builder.appendMonthOfYearText();
",0,0,0,1,2,0,4,0,0,4,32,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,483,"                        builder.appendMonthOfYearShortText();
",0,0,0,1,2,0,4,0,0,4,37,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,493,"                builder.appendHalfdayOfDayText();
",0,0,0,1,2,0,4,0,0,4,33,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,494,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,496,"                builder.appendClockhourOfHalfday(tokenLen);
",0,0,0,1,2,0,6,0,0,6,43,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,497,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,499,"                builder.appendHourOfDay(tokenLen);
",0,0,0,1,2,0,6,0,0,6,34,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,500,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,502,"                builder.appendClockhourOfDay(tokenLen);
",0,0,0,1,2,0,6,0,0,6,39,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,503,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,505,"                builder.appendHourOfHalfday(tokenLen);
",0,0,0,1,2,0,6,0,0,6,38,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,506,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,508,"                builder.appendMinuteOfHour(tokenLen);
",0,0,0,1,2,0,6,0,0,6,37,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,509,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,511,"                builder.appendSecondOfMinute(tokenLen);
",0,0,0,1,2,0,6,0,0,6,39,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,512,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,514,"                builder.appendFractionOfSecond(tokenLen, tokenLen);
",0,0,0,1,2,0,8,0,0,8,51,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,515,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,517,"                builder.appendDayOfWeek(tokenLen);
",0,0,0,1,2,0,6,0,0,6,34,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,518,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,520,"                if (tokenLen >= 4) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,521,"                    builder.appendDayOfWeekText();
",0,0,0,1,2,0,4,0,0,4,30,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,523,"                    builder.appendDayOfWeekShortText();
",0,0,0,1,2,0,4,0,0,4,35,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,525,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,527,"                builder.appendDayOfYear(tokenLen);
",0,0,0,1,2,0,6,0,0,6,34,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,528,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,530,"                builder.appendWeekOfWeekyear(tokenLen);
",0,0,0,1,2,0,6,0,0,6,39,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,531,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,533,"                if (tokenLen >= 4) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,534,"                    builder.appendTimeZoneName();
",0,0,0,1,2,0,4,0,0,4,29,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,536,"                    builder.appendTimeZoneShortName(null);
",0,0,0,1,2,0,4,0,0,4,38,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,538,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,540,"                if (tokenLen == 1) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,541,"                    builder.appendTimeZoneOffset(null, ""Z"", false, 2, 2);
",0,0,0,1,2,0,4,0,0,6,53,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,542,"                } else if (tokenLen == 2) {
",2,1,0,1,4,0,0,0,0,3,27,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,543,"                    builder.appendTimeZoneOffset(null, ""Z"", true, 2, 2);
",0,0,0,1,2,0,4,0,0,6,52,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,545,"                    builder.appendTimeZoneId();
",0,0,0,1,2,0,4,0,0,4,27,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,547,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,559,"                throw new IllegalArgumentException
",0,0,0,0,0,0,0,2,0,2,34,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,604,"                    if (i + 1 < length && pattern.charAt(i + 1) == '\'') {
",6,5,0,2,5,0,4,0,0,16,54,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,606,"                        i++;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,607,"                        buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,609,"                        inLiteral = !inLiteral;
",4,0,0,0,0,0,0,0,0,6,23,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,632,"        int tokenLen = token.length();
",2,0,0,1,2,0,4,0,0,6,30,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,633,"        if (tokenLen > 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,634,"            char c = token.charAt(0);
",2,0,0,1,2,0,4,0,0,6,25,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,635,"            switch (c) {
",2,0,0,1,3,0,0,0,0,2,12,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,654,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,656,"                if (tokenLen <= 2) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,657,"                    return true;
",0,0,0,0,0,1,0,0,0,1,12,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,662,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,675,"            throw new IllegalArgumentException(""Invalid pattern specification"");
",0,0,0,1,2,0,0,2,0,3,68,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,701,"        if (style == null || style.length() != 2) {
",2,3,0,2,5,0,4,0,0,9,43,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,702,"            throw new IllegalArgumentException(""Invalid style specification: "" + style);
",2,1,0,1,2,0,0,2,0,6,76,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,704,"        int dateStyle = selectStyle(style.charAt(0));
",2,0,0,2,4,0,6,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,705,"        int timeStyle = selectStyle(style.charAt(1));
",2,0,0,2,4,0,6,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,706,"        if (dateStyle == NONE && timeStyle == NONE) {
",8,3,0,1,3,0,0,0,0,11,45,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,707,"            throw new IllegalArgumentException(""Style '--' is invalid"");
",0,0,0,1,2,0,0,2,0,3,60,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,709,"        return createFormatterForStyleIndex(dateStyle, timeStyle);
",0,0,0,1,2,1,6,0,0,6,58,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,720,"        int index = ((dateStyle << 2) + dateStyle) + timeStyle;
",8,3,0,2,4,0,0,0,0,11,55,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,721,"        DateTimeFormatter f = null;
",2,0,0,0,0,0,0,2,0,4,27,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,722,"        synchronized (cStyleCache) {
",2,0,0,1,3,0,0,0,0,2,28,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,723,"            f = cStyleCache[index];
",2,0,1,1,2,0,0,0,0,7,23,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,724,"            if (f == null) {
",2,1,0,1,3,0,0,0,0,3,16,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,725,"                int type = DATETIME;
",4,0,0,0,0,0,0,0,0,4,20,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,726,"                if (dateStyle == NONE) {
",4,1,0,1,3,0,0,0,0,5,24,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,727,"                    type = TIME;
",4,0,0,0,0,0,0,0,0,5,12,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,728,"                } else if (timeStyle == NONE) {
",4,1,0,1,4,0,0,0,0,5,31,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,729,"                    type = DATE;
",4,0,0,0,0,0,0,0,0,5,12,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,731,"                StyleFormatter llf = new StyleFormatter(
",2,0,0,0,1,0,0,4,0,6,40,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,733,"                f = new DateTimeFormatter(llf, llf);
",6,0,0,1,2,0,0,2,0,9,36,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,734,"                cStyleCache[index] = f;
",2,0,1,1,2,0,0,0,0,7,23,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,736,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,737,"        return f;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,747,"        switch (ch) {
",2,0,0,1,3,0,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,749,"            return SHORT;
",2,0,0,0,0,1,0,0,0,2,13,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,751,"            return MEDIUM;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,753,"            return LONG;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,755,"            return FULL;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,757,"            return NONE;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,759,"            throw new IllegalArgumentException(""Invalid style character: "" + ch);
",2,1,0,1,2,0,0,2,0,6,69,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1218,"            buf.append(iValue);
",0,0,0,1,2,0,6,0,0,6,19,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1219,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1224,"            out.write(iValue);
",0,0,0,1,2,0,6,0,0,6,18,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1225,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1228,"            buf.append(iValue);
",0,0,0,1,2,0,6,0,0,6,19,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1229,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1232,"            out.write(iValue);
",0,0,0,1,2,0,6,0,0,6,18,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1233,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1240,"            if (position >= text.length()) {
",2,1,0,2,5,0,4,0,0,7,32,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1241,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1244,"            char a = text.charAt(position);
",2,0,0,1,2,0,6,0,0,8,31,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1245,"            char b = iValue;
",4,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1247,"            if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1248,"                a = Character.toUpperCase(a);
",2,0,0,1,2,0,6,0,0,9,29,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1249,"                b = Character.toUpperCase(b);
",2,0,0,1,2,0,6,0,0,9,29,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1250,"                if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1251,"                    a = Character.toLowerCase(a);
",2,0,0,1,2,0,6,0,0,9,29,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1252,"                    b = Character.toLowerCase(b);
",2,0,0,1,2,0,6,0,0,9,29,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1253,"                    if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1254,"                        return ~position;
",2,0,0,0,0,1,0,0,0,3,17,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,10,1259,"            return position + 1;
",2,1,0,0,0,1,0,0,0,3,20,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,916,"        PluralAffix(String singularText, String pluralText) {
",6,0,0,1,3,0,0,4,0,10,53,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,917,"            iSingularText = singularText;
",4,0,0,0,0,0,0,0,0,5,29,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,918,"            iPluralText = pluralText;
",4,0,0,0,0,0,0,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,919,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,922,"            return (value == 1 ? iSingularText : iPluralText).length();
",6,1,0,2,4,1,2,0,0,9,59,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,926,"            buf.append(value == 1 ? iSingularText : iPluralText);
",6,1,0,1,2,0,4,0,0,11,53,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,927,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,930,"            out.write(value == 1 ? iSingularText : iPluralText);
",6,1,0,1,2,0,4,0,0,11,52,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,931,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,934,"            String text1 = iPluralText;
",4,0,0,0,0,0,0,2,0,6,27,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,935,"            String text2 = iSingularText; 
",4,0,0,0,0,0,0,2,0,6,29,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,937,"            if (text1.length() < text2.length()) {
",0,1,0,3,7,0,8,0,0,9,38,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,939,"                String temp = text1;
",4,0,0,0,0,0,0,2,0,6,20,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,940,"                text1 = text2;
",4,0,0,0,0,0,0,0,0,5,14,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,941,"                text2 = temp;
",4,0,0,0,0,0,0,0,0,5,13,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,944,"            if (periodStr.regionMatches
",0,0,0,0,1,0,4,0,0,4,27,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,946,"                return position + text1.length();
",2,1,0,1,2,1,4,0,0,7,33,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,948,"            if (periodStr.regionMatches
",0,0,0,0,1,0,4,0,0,4,27,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,950,"                return position + text2.length();
",2,1,0,1,2,1,4,0,0,7,33,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,953,"            return ~position;
",2,0,0,0,0,1,0,0,0,3,17,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,957,"            String text1 = iPluralText;
",4,0,0,0,0,0,0,2,0,6,27,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,958,"            String text2 = iSingularText; 
",4,0,0,0,0,0,0,2,0,6,29,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,960,"            if (text1.length() < text2.length()) {
",0,1,0,3,7,0,8,0,0,9,38,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,962,"                String temp = text1;
",4,0,0,0,0,0,0,2,0,6,20,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,963,"                text1 = text2;
",4,0,0,0,0,0,0,0,0,5,14,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,964,"                text2 = temp;
",4,0,0,0,0,0,0,0,0,5,13,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,967,"            int textLength1 = text1.length();
",2,0,0,1,2,0,4,0,0,6,33,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,968,"            int textLength2 = text2.length();
",2,0,0,1,2,0,4,0,0,6,33,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,970,"            int sourceLength = periodStr.length();
",2,0,0,1,2,0,4,0,0,6,38,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,971,"            for (int pos = position; pos < sourceLength; pos++) {
",10,1,0,1,3,0,0,0,0,12,53,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,972,"                if (periodStr.regionMatches(true, pos, text1, 0, textLength1)) {
",0,0,0,2,5,0,10,0,0,11,64,8,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,973,"                    return pos;
",2,0,0,0,0,1,0,0,0,2,11,9,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,975,"                if (periodStr.regionMatches(true, pos, text2, 0, textLength2)) {
",0,0,0,2,5,0,10,0,0,11,64,8,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,976,"                    return pos;
",2,0,0,0,0,1,0,0,0,2,11,9,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,979,"            return ~position;
",2,0,0,0,0,1,0,0,0,3,17,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,864,"            return iText.length();
",0,0,0,1,2,1,4,0,0,4,22,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,868,"            buf.append(iText);
",0,0,0,1,2,0,6,0,0,6,18,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,869,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,872,"            out.write(iText);
",0,0,0,1,2,0,6,0,0,6,17,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,873,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,876,"            String text = iText;
",4,0,0,0,0,0,0,2,0,6,20,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,877,"            int textLength = text.length();
",2,0,0,1,2,0,4,0,0,6,31,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,878,"            if (periodStr.regionMatches(true, position, text, 0, textLength)) {
",0,0,0,2,5,0,10,0,0,11,67,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,879,"                return position + textLength;
",4,1,0,0,0,1,0,0,0,5,29,7,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,881,"            return ~position;
",2,0,0,0,0,1,0,0,0,3,17,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,885,"            String text = iText;
",4,0,0,0,0,0,0,2,0,6,20,5,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,886,"            int textLength = text.length();
",2,0,0,1,2,0,4,0,0,6,31,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,887,"            int sourceLength = periodStr.length();
",2,0,0,1,2,0,4,0,0,6,38,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,889,"            for (int pos = position; pos < sourceLength; pos++) {
",10,1,0,1,3,0,0,0,0,12,53,6,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,890,"                if (periodStr.regionMatches(true, pos, text, 0, textLength)) {
",0,0,0,2,5,0,10,0,0,11,62,9,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,891,"                    return pos;
",2,0,0,0,0,1,0,0,0,2,11,10,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,894,"                switch (periodStr.charAt(pos)) {
",0,0,0,2,5,0,6,0,0,6,32,9,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,898,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,900,"                    break search;
",2,0,0,0,0,0,0,0,0,2,13,9,0.00000,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,10,903,"            return ~position;
",2,0,0,0,0,1,0,0,0,3,17,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,774,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,775,"            iDateStyle = dateStyle;
",4,0,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,776,"            iTimeStyle = timeStyle;
",4,0,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,777,"            iType = type;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,778,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,767,"        private static final Map<String, DateTimeFormatter> cCache = new HashMap<String, DateTimeFormatter>();  // manual sync
",2,0,0,1,2,3,0,12,0,17,118,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,781,"            return 40;  // guess
",0,0,0,0,0,1,0,0,0,0,20,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,787,"            DateTimePrinter p = getFormatter(locale).getPrinter();
",2,0,0,2,4,0,6,2,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,788,"            p.printTo(buf, instant, chrono, displayOffset, displayZone, locale);
",0,0,0,1,2,0,16,0,0,16,68,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,789,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,794,"            DateTimePrinter p = getFormatter(locale).getPrinter();
",2,0,0,2,4,0,6,2,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,795,"            p.printTo(out, instant, chrono, displayOffset, displayZone, locale);
",0,0,0,1,2,0,16,0,0,16,68,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,796,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,799,"            DateTimePrinter p = getFormatter(locale).getPrinter();
",2,0,0,2,4,0,6,2,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,800,"            p.printTo(buf, partial, locale);
",0,0,0,1,2,0,10,0,0,10,32,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,801,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,804,"            DateTimePrinter p = getFormatter(locale).getPrinter();
",2,0,0,2,4,0,6,2,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,805,"            p.printTo(out, partial, locale);
",0,0,0,1,2,0,10,0,0,10,32,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,806,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,809,"            return 40;  // guess
",0,0,0,0,0,1,0,0,0,0,20,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,813,"            DateTimeParser p = getFormatter(bucket.getLocale()).getParser();
",2,0,0,3,6,0,8,2,0,12,64,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,814,"            return p.parseInto(bucket, text, position);
",0,0,0,1,2,1,10,0,0,10,43,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,818,"            locale = (locale == null ? Locale.getDefault() : locale);
",6,1,0,2,4,0,4,0,0,12,57,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,819,"            String key = Integer.toString(iType + (iDateStyle << 4) + (iTimeStyle << 8)) + locale.toString();
",8,4,0,4,8,0,8,2,0,22,97,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,820,"            DateTimeFormatter f = null;
",2,0,0,0,0,0,0,2,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,821,"            synchronized (cCache) {
",2,0,0,1,3,0,0,0,0,2,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,822,"                f = cCache.get(key);
",2,0,0,1,2,0,6,0,0,9,20,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,823,"                if (f == null) {
",2,1,0,1,3,0,0,0,0,3,16,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,824,"                    String pattern = getPattern(locale);
",2,0,0,1,2,0,4,2,0,8,36,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,825,"                    f = DateTimeFormat.forPattern(pattern);
",2,0,0,1,2,0,6,0,0,9,39,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,826,"                    cCache.put(key, f);
",0,0,0,1,2,0,8,0,0,8,19,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,828,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,829,"            return f;
",2,0,0,0,0,1,0,0,0,2,9,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,833,"            DateFormat f = null;
",2,0,0,0,0,0,0,2,0,4,20,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,834,"            switch (iType) {
",2,0,0,1,3,0,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,836,"                    f = DateFormat.getDateInstance(iDateStyle, locale);
",2,0,0,1,2,0,8,0,0,11,51,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,837,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,839,"                    f = DateFormat.getTimeInstance(iTimeStyle, locale);
",2,0,0,1,2,0,8,0,0,11,51,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,840,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,842,"                    f = DateFormat.getDateTimeInstance(iDateStyle, iTimeStyle, locale);
",2,0,0,1,2,0,10,0,0,13,67,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,845,"            if (f instanceof SimpleDateFormat == false) {
",2,1,0,1,3,0,0,2,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,846,"                throw new IllegalArgumentException(""No datetime pattern for locale: "" + locale);
",2,1,0,1,2,0,0,2,0,6,80,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,10,848,"            return ((SimpleDateFormat) f).toPattern();
",2,0,0,3,6,1,2,2,0,6,42,6,0.00000,0
