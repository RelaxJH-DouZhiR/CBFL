dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,182,"        return getInstance(pattern, timeZone, null);
",0,0,0,1,2,0,6,0,0,7,44,4,1.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1300,"                for (int i = mSize; --i >= 2; ) {
",6,1,0,1,3,0,0,0,0,8,33,7,0.50000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1301,"                    buffer.append('0');
",0,0,0,1,2,0,4,0,0,5,19,10,0.50000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1303,"                buffer.append((char)(value / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,8,0.50000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1304,"                buffer.append((char)(value % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,8,0.50000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1423,"            appendTo(buffer, calendar.get(Calendar.MONTH) + 1);
",4,1,0,2,4,0,8,0,0,13,51,6,0.03333,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1424,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03333,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1430,"            buffer.append((char)(value / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,6,0.03333,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1431,"            buffer.append((char)(value % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,6,0.03333,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1432,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03333,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1310,"                    Validate.isTrue(value > -1, ""Negative values should not be possible"", value);
",2,1,0,1,2,0,6,0,0,11,77,10,0.03125,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1311,"                    digits = Integer.toString(value).length();
",2,0,0,2,4,0,8,0,0,11,42,9,0.03125,0
defect4j,lang,org/apache/commons/lang3/Validate,38,121,"        if (expression == false) {
",2,1,0,1,3,0,0,0,0,4,26,4,0.03125,0
defect4j,lang,org/apache/commons/lang3/Validate,38,124,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03125,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1347,"            appendTo(buffer, calendar.get(mField));
",0,0,0,2,4,0,10,0,0,10,39,6,0.03030,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1348,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03030,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1354,"            if (value < 100) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.03030,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1355,"                buffer.append((char)(value / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,8,0.03030,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1356,"                buffer.append((char)(value % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,8,0.03030,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1360,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03030,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1098,"            buffer.append(mValue);
",0,0,0,1,2,0,6,0,0,6,22,6,0.03030,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1099,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03030,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,633,"                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);
",6,0,0,1,2,0,4,0,0,11,56,7,0.03030,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,634,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.03030,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,639,"                rule = selectNumberRule(Calendar.SECOND, tokenLen);
",6,0,0,1,2,0,4,0,0,11,51,7,0.03030,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,640,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.03030,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,738,"                    if (i + 1 < length && pattern.charAt(i + 1) == '\'') {
",6,5,0,2,5,0,4,0,0,16,54,10,0.03030,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,743,"                        inLiteral = !inLiteral;
",4,0,0,0,0,0,0,0,0,6,23,12,0.03030,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,832,"        return format(calendar, new StringBuffer(mMaxLengthEstimate)).toString();
",2,0,0,3,6,0,6,2,0,10,73,5,0.03030,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,871,"        if (mTimeZoneForced) {
",2,0,0,1,3,0,0,0,0,2,22,4,0.03030,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,875,"        return applyRules(calendar, buf);
",0,0,0,1,2,0,6,0,0,6,33,5,0.03030,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1292,"            appendTo(buffer, calendar.get(mField));
",0,0,0,2,4,0,10,0,0,10,39,6,0.03030,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1293,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03030,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1299,"            if (value < 100) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.03030,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1307,"                if (value < 1000) {
",2,1,0,1,3,0,0,0,0,3,19,7,0.03030,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1313,"                for (int i = mSize; --i >= digits; ) {
",8,1,0,1,3,0,0,0,0,10,38,7,0.03030,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1316,"                buffer.append(Integer.toString(value));
",0,0,0,2,4,0,10,0,0,10,39,8,0.03030,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1318,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03030,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,636,"                rule = selectNumberRule(Calendar.MINUTE, tokenLen);
",6,0,0,1,2,0,4,0,0,11,51,7,0.02941,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,637,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.02941,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,887,"        Rule[] rules = mRules;
",4,0,0,1,2,0,0,2,0,6,22,4,0.02857,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,888,"        int len = mRules.length;
",6,0,0,0,0,0,0,0,0,6,24,5,0.02857,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,889,"        for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.02857,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,890,"            rules[i].appendTo(buf, calendar);
",0,0,1,2,4,0,6,0,0,10,33,7,0.02857,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,892,"        return buf;
",2,0,0,0,0,0,0,0,0,2,11,4,0.02857,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,627,"                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);
",6,0,0,1,2,0,4,0,0,11,57,7,0.02564,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,628,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.02564,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,549,"            locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,6,0.02500,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,621,"                    rule = TwoDigitMonthField.INSTANCE;
",6,0,0,0,0,0,0,0,0,7,35,11,0.02439,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1409,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.02439,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1410,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02439,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1403,"        static final TwoDigitMonthField INSTANCE = new TwoDigitMonthField();
",2,0,0,1,2,2,0,4,0,8,68,3,0.02439,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1416,"            return 2;
",0,0,0,0,0,0,0,0,0,0,9,3,0.02439,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,618,"                } else if (tokenLen == 3) {
",2,1,0,1,4,0,0,0,0,3,27,8,0.02381,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,620,"                } else if (tokenLen == 2) {
",2,1,0,1,4,0,0,0,0,3,27,9,0.02381,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1332,"        TwoDigitNumberField(int field) {
",4,0,0,1,3,0,0,0,0,4,32,3,0.02326,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1333,"            mField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.02326,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1334,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02326,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1340,"            return 2;
",0,0,0,0,0,0,0,0,0,0,9,3,0.02326,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,610,"                    rule = selectNumberRule(Calendar.YEAR, tokenLen);
",6,0,0,1,2,0,4,0,0,11,49,9,0.02326,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,771,"            return new TwoDigitNumberField(field);
",2,0,0,1,2,0,0,2,0,4,38,6,0.02326,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,773,"            return new PaddedNumberField(field, padding);
",4,0,0,1,2,0,0,2,0,6,45,6,0.02326,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1272,"        PaddedNumberField(int field, int size) {
",6,0,0,1,3,0,0,0,0,6,40,3,0.02326,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1273,"            if (size < 3) {
",2,1,0,1,3,0,0,0,0,3,15,5,0.02326,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1277,"            mField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.02326,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1278,"            mSize = size;
",4,0,0,0,0,0,0,0,0,5,13,5,0.02326,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1279,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02326,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1285,"            return 4;
",0,0,0,0,0,0,0,0,0,0,9,3,0.02326,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1083,"        CharacterLiteral(char value) {
",4,0,0,1,3,0,0,0,0,4,30,3,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1084,"            mValue = value;
",4,0,0,0,0,0,0,0,0,5,15,5,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1085,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1091,"            return 1;
",0,0,0,0,0,0,0,0,0,0,9,3,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,535,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,536,"        if (pattern == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,539,"        mPattern = pattern;
",4,0,0,0,0,0,0,0,0,5,19,4,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,541,"        mTimeZoneForced = (timeZone != null);
",4,1,0,1,2,0,0,0,0,6,37,4,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,542,"        if (timeZone == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,545,"        mTimeZone = timeZone;
",4,0,0,0,0,0,0,0,0,5,21,4,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,547,"        mLocaleForced = (locale != null);
",4,1,0,1,2,0,0,0,0,6,33,4,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,548,"        if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,551,"        mLocale = locale;
",4,0,0,0,0,0,0,0,0,5,17,4,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,552,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,111,"    private static final Map<FastDateFormat, FastDateFormat> cInstanceCache = new HashMap<FastDateFormat, FastDateFormat>(7);
",2,0,0,1,2,3,0,12,0,17,121,2,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,112,"    private static final Map<Object, FastDateFormat> cDateInstanceCache = new HashMap<Object, FastDateFormat>(7);
",2,0,0,1,2,3,0,12,0,17,109,2,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,113,"    private static final Map<Object, FastDateFormat> cTimeInstanceCache = new HashMap<Object, FastDateFormat>(7);
",2,0,0,1,2,3,0,12,0,17,109,2,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,114,"    private static final Map<Object, FastDateFormat> cDateTimeInstanceCache = new HashMap<Object, FastDateFormat>(7);
",2,0,0,1,2,3,0,12,0,17,113,2,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,115,"    private static final Map<Object, String> cTimeZoneDisplayCache = new HashMap<Object, String>(7);
",2,0,0,1,2,3,0,12,0,17,96,2,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,213,"        FastDateFormat emptyFormat = new FastDateFormat(pattern, timeZone, locale);
",8,0,0,1,2,0,0,4,0,12,75,4,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,214,"        FastDateFormat format = cInstanceCache.get(emptyFormat);
",2,0,0,1,2,0,6,2,0,10,56,4,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,215,"        if (format == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,216,"            format = emptyFormat;
",4,0,0,0,0,0,0,0,0,5,21,6,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,217,"            format.init();  // convert shell format into usable one
",0,0,0,1,2,0,4,0,0,4,55,7,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,218,"            cInstanceCache.put(format, format);  // this is OK!
",0,0,0,1,2,0,8,0,0,8,51,7,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,220,"        return format;
",2,0,0,0,0,0,0,0,0,2,14,4,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,558,"        List<Rule> rulesList = parsePattern();
",2,0,0,1,2,0,2,4,0,8,38,4,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,559,"        mRules = rulesList.toArray(new Rule[rulesList.size()]);
",2,0,0,3,6,0,8,2,0,13,55,4,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,561,"        int len = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,562,"        for (int i=mRules.length; --i >= 0; ) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,563,"            len += mRules[i].estimateLength();
",2,0,1,2,4,0,2,0,0,9,34,6,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,566,"        mMaxLengthEstimate = len;
",4,0,0,0,0,0,0,0,0,5,25,4,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,567,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,578,"        DateFormatSymbols symbols = new DateFormatSymbols(mLocale);
",4,0,0,1,2,0,0,4,0,8,59,4,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,579,"        List<Rule> rules = new ArrayList<Rule>();
",2,0,0,1,2,0,0,8,0,10,41,4,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,581,"        String[] ERAs = symbols.getEras();
",2,0,0,2,4,0,4,2,0,8,34,4,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,582,"        String[] months = symbols.getMonths();
",2,0,0,2,4,0,4,2,0,8,38,4,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,583,"        String[] shortMonths = symbols.getShortMonths();
",2,0,0,2,4,0,4,2,0,8,48,4,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,584,"        String[] weekdays = symbols.getWeekdays();
",2,0,0,2,4,0,4,2,0,8,42,4,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,585,"        String[] shortWeekdays = symbols.getShortWeekdays();
",2,0,0,2,4,0,4,2,0,8,52,4,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,586,"        String[] AmPmStrings = symbols.getAmPmStrings();
",2,0,0,2,4,0,4,2,0,8,48,4,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,588,"        int length = mPattern.length();
",2,0,0,1,2,0,4,0,0,6,31,5,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,589,"        int[] indexRef = new int[1];
",2,0,0,2,4,0,0,0,0,2,28,5,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,591,"        for (int i = 0; i < length; i++) {
",8,1,0,1,3,0,0,0,0,10,34,4,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,592,"            indexRef[0] = i;
",2,0,1,1,2,0,0,0,0,5,16,6,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,593,"            String token = parseToken(mPattern, indexRef);
",2,0,0,1,2,0,6,2,0,10,46,6,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,594,"            i = indexRef[0];
",2,0,1,1,2,0,0,0,0,5,16,6,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,596,"            int tokenLen = token.length();
",2,0,0,1,2,0,4,0,0,6,30,7,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,597,"            if (tokenLen == 0) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,602,"            char c = token.charAt(0);
",2,0,0,1,2,0,4,0,0,6,25,7,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,604,"            switch (c) {
",2,0,0,1,3,0,0,0,0,2,12,6,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,609,"                if (tokenLen >= 4) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,616,"                if (tokenLen >= 4) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,683,"                String sub = token.substring(1);
",2,0,0,1,2,0,4,2,0,8,32,7,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,684,"                if (sub.length() == 1) {
",0,1,0,2,5,0,4,0,0,5,24,7,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,685,"                    rule = new CharacterLiteral(sub.charAt(0));
",2,0,0,2,4,0,4,2,0,9,43,9,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,694,"            rules.add(rule);
",0,0,0,1,2,0,6,0,0,6,16,7,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,697,"        return rules;
",2,0,0,0,0,0,0,0,0,2,13,4,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,708,"        StringBuilder buf = new StringBuilder();
",2,0,0,1,2,0,0,4,0,6,40,4,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,710,"        int i = indexRef[0];
",2,0,1,1,2,0,0,0,0,4,20,5,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,711,"        int length = pattern.length();
",2,0,0,1,2,0,4,0,0,6,30,5,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,713,"        char c = pattern.charAt(i);
",2,0,0,1,2,0,6,0,0,8,27,5,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,714,"        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {
",8,7,0,1,3,0,0,0,0,19,51,4,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,717,"            buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,7,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,719,"            while (i + 1 < length) {
",4,2,0,1,3,0,0,0,0,6,24,6,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,720,"                char peek = pattern.charAt(i + 1);
",4,1,0,1,2,0,4,0,0,9,34,9,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,721,"                if (peek == c) {
",4,1,0,1,3,0,0,0,0,5,16,8,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,722,"                    buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,11,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,723,"                    i++;
",2,0,0,0,0,0,0,0,0,3,4,10,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,727,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,730,"            buf.append('\'');
",0,0,0,1,2,0,4,0,0,5,17,7,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,732,"            boolean inLiteral = false;
",2,0,0,0,0,0,0,0,0,3,26,7,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,734,"            for (; i < length; i++) {
",6,1,0,1,3,0,0,0,0,8,25,6,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,735,"                c = pattern.charAt(i);
",2,0,0,1,2,0,6,0,0,9,22,8,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,737,"                if (c == '\'') {
",2,1,0,1,3,0,0,0,0,4,16,8,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,745,"                } else if (!inLiteral &&
",2,1,0,0,2,0,0,0,0,4,24,9,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,747,"                    i--;
",2,0,0,0,0,0,0,0,0,3,4,11,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,748,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,750,"                    buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,12,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,755,"        indexRef[0] = i;
",2,0,1,1,2,0,0,0,0,5,16,4,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,756,"        return buf.toString();
",0,0,0,1,2,0,4,0,0,4,22,5,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,767,"        switch (padding) {
",2,0,0,1,3,0,0,0,0,2,18,4,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1002,"        int total = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1003,"        total += mPattern.hashCode();
",2,0,0,1,2,0,4,0,0,7,29,4,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1004,"        total += mTimeZone.hashCode();
",2,0,0,1,2,0,4,0,0,7,30,4,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1005,"        total += (mTimeZoneForced ? 1 : 0);
",4,0,0,1,2,0,0,0,0,5,35,4,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1006,"        total += mLocale.hashCode();
",2,0,0,1,2,0,4,0,0,7,28,4,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1007,"        total += (mLocaleForced ? 1 : 0);
",4,0,0,1,2,0,0,0,0,5,33,4,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1008,"        return total;
",2,0,0,0,0,0,0,0,0,2,13,4,0.02273,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1358,"                buffer.append(Integer.toString(value));
",0,0,0,2,4,0,10,0,0,10,39,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1147,"        TextField(int field, String[] values) {
",6,0,0,2,5,0,0,2,0,8,39,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1148,"            mField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1149,"            mValues = values;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1150,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1156,"            int max = 0;
",2,0,0,0,0,0,0,0,0,2,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1157,"            for (int i=mValues.length; --i >= 0; ) {
",8,1,0,1,3,0,0,0,0,10,40,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1158,"                int len = mValues[i].length();
",2,0,1,2,4,0,2,0,0,8,30,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1159,"                if (len > max) {
",4,1,0,1,3,0,0,0,0,5,16,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1160,"                    max = len;
",4,0,0,0,0,0,0,0,0,5,10,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1162,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1163,"            return max;
",2,0,0,0,0,0,0,0,0,2,11,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1170,"            buffer.append(mValues[calendar.get(mField)]);
",0,0,1,3,6,0,10,0,0,12,45,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1171,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1489,"        TwentyFourHourField(NumberRule rule) {
",4,0,0,1,3,0,0,2,0,6,38,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1490,"            mRule = rule;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1491,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1497,"            return mRule.estimateLength();
",0,0,0,1,2,0,4,0,0,4,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1504,"            int value = calendar.get(Calendar.HOUR_OF_DAY);
",6,0,0,1,2,0,4,0,0,10,47,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1505,"            if (value == 0) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1506,"                value = calendar.getMaximum(Calendar.HOUR_OF_DAY) + 1;
",6,1,0,1,2,0,4,0,0,12,54,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1508,"            mRule.appendTo(buffer, value);
",0,0,0,1,2,0,8,0,0,8,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1509,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1515,"            mRule.appendTo(buffer, value);
",0,0,0,1,2,0,8,0,0,8,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1516,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1114,"        StringLiteral(String value) {
",4,0,0,1,3,0,0,2,0,6,29,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1115,"            mValue = value;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1116,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1122,"            return mValue.length();
",0,0,0,1,2,0,4,0,0,4,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1129,"            buffer.append(mValue);
",0,0,0,1,2,0,6,0,0,6,22,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1130,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1710,"        public Pair(Object obj1, Object obj2) {
",6,0,0,1,3,1,0,4,0,11,39,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1711,"            mObj1 = obj1;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1712,"            mObj2 = obj2;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1713,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1720,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1721,"                return true;
",0,0,0,0,0,0,0,0,0,1,12,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1724,"            if (!(obj instanceof Pair)) {
",2,0,0,2,5,0,0,2,0,5,29,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1725,"                return false;
",0,0,0,0,0,0,0,0,0,1,13,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1728,"            Pair key = (Pair)obj;
",4,0,0,1,2,0,0,4,0,8,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1730,"            return
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1742,"            return
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1752,"            return ""["" + mObj1 + ':' + mObj2 + ']';
",4,1,0,1,2,0,0,0,0,8,39,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1602,"        TimeZoneNumberRule(boolean colon) {
",4,0,0,1,3,0,0,0,0,4,35,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1603,"            mColon = colon;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1604,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1592,"        static final TimeZoneNumberRule INSTANCE_COLON = new TimeZoneNumberRule(true);
",2,0,0,1,2,2,0,4,0,9,78,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1593,"        static final TimeZoneNumberRule INSTANCE_NO_COLON = new TimeZoneNumberRule(false);
",2,0,0,1,2,2,0,4,0,9,82,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1610,"            return 5;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1617,"            int offset = calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET);
",10,1,0,2,4,0,8,0,0,19,84,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1619,"            if (offset < 0) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1620,"                buffer.append('-');
",0,0,0,1,2,0,4,0,0,5,19,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1621,"                offset = -offset;
",4,0,0,0,0,0,0,0,0,6,17,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1623,"                buffer.append('+');
",0,0,0,1,2,0,4,0,0,5,19,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1626,"            int hours = offset / (60 * 60 * 1000);
",4,2,0,1,2,0,0,0,0,6,38,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1627,"            buffer.append((char)(hours / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1628,"            buffer.append((char)(hours % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1630,"            if (mColon) {
",2,0,0,1,3,0,0,0,0,2,13,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1631,"                buffer.append(':');
",0,0,0,1,2,0,4,0,0,5,19,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1634,"            int minutes = offset / (60 * 1000) - 60 * hours;
",6,4,0,1,2,0,0,0,0,10,48,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1635,"            buffer.append((char)(minutes / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,42,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1636,"            buffer.append((char)(minutes % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,42,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1637,"        }            
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1229,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1230,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1222,"        static final UnpaddedMonthField INSTANCE = new UnpaddedMonthField();
",2,0,0,1,2,2,0,4,0,8,68,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1236,"            return 2;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1243,"            appendTo(buffer, calendar.get(Calendar.MONTH) + 1);
",4,1,0,2,4,0,8,0,0,13,51,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1244,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1250,"            if (value < 10) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1251,"                buffer.append((char)(value + '0'));
",2,1,0,3,6,0,4,0,0,8,35,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1253,"                buffer.append((char)(value / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1254,"                buffer.append((char)(value % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1256,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,537,"            throw new IllegalArgumentException(""The pattern must not be null"");
",0,0,0,1,2,0,0,2,0,4,67,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,543,"            timeZone = TimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,154,"        return getInstance(getDefaultPattern(), null, null);
",0,0,0,2,4,0,4,0,0,6,52,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,167,"        return getInstance(pattern, null, null);
",0,0,0,1,2,0,4,0,0,5,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,196,"        return getInstance(pattern, null, locale);
",0,0,0,1,2,0,6,0,0,7,42,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,235,"        return getDateInstance(style, null, null);
",0,0,0,1,2,0,4,0,0,5,42,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,250,"        return getDateInstance(style, null, locale);
",0,0,0,1,2,0,6,0,0,7,44,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,266,"        return getDateInstance(style, timeZone, null);
",0,0,0,1,2,0,6,0,0,7,46,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,281,"        Object key = Integer.valueOf(style);
",2,0,0,1,2,0,6,2,0,10,36,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,282,"        if (timeZone != null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,283,"            key = new Pair(key, timeZone);
",6,0,0,1,2,0,0,2,0,9,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,286,"        if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,287,"            locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,290,"        key = new Pair(key, locale);
",6,0,0,1,2,0,0,2,0,9,28,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,292,"        FastDateFormat format = cDateInstanceCache.get(key);
",2,0,0,1,2,0,6,2,0,10,52,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,293,"        if (format == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,295,"                SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateInstance(style, locale);
",2,0,0,2,4,0,8,4,0,14,90,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,296,"                String pattern = formatter.toPattern();
",2,0,0,1,2,0,4,2,0,8,39,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,297,"                format = getInstance(pattern, timeZone, locale);
",2,0,0,1,2,0,8,0,0,11,48,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,298,"                cDateInstanceCache.put(key, format);
",0,0,0,1,2,0,8,0,0,8,36,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,302,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,300,"            } catch (ClassCastException ex) {
",2,0,0,1,4,0,0,2,0,4,33,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,301,"                throw new IllegalArgumentException(""No date pattern for locale: "" + locale);
",2,1,0,1,2,0,0,2,0,6,76,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,304,"        return format;
",2,0,0,0,0,0,0,0,0,2,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,319,"        return getTimeInstance(style, null, null);
",0,0,0,1,2,0,4,0,0,5,42,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,334,"        return getTimeInstance(style, null, locale);
",0,0,0,1,2,0,6,0,0,7,44,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,350,"        return getTimeInstance(style, timeZone, null);
",0,0,0,1,2,0,6,0,0,7,46,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,366,"        Object key = Integer.valueOf(style);
",2,0,0,1,2,0,6,2,0,10,36,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,367,"        if (timeZone != null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,368,"            key = new Pair(key, timeZone);
",6,0,0,1,2,0,0,2,0,9,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,370,"        if (locale != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,371,"            key = new Pair(key, locale);
",6,0,0,1,2,0,0,2,0,9,28,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,374,"        FastDateFormat format = cTimeInstanceCache.get(key);
",2,0,0,1,2,0,6,2,0,10,52,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,375,"        if (format == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,376,"            if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,377,"                locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,381,"                SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getTimeInstance(style, locale);
",2,0,0,2,4,0,8,4,0,14,90,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,382,"                String pattern = formatter.toPattern();
",2,0,0,1,2,0,4,2,0,8,39,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,383,"                format = getInstance(pattern, timeZone, locale);
",2,0,0,1,2,0,8,0,0,11,48,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,384,"                cTimeInstanceCache.put(key, format);
",0,0,0,1,2,0,8,0,0,8,36,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,388,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,386,"            } catch (ClassCastException ex) {
",2,0,0,1,4,0,0,2,0,4,33,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,387,"                throw new IllegalArgumentException(""No date pattern for locale: "" + locale);
",2,1,0,1,2,0,0,2,0,6,76,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,390,"        return format;
",2,0,0,0,0,0,0,0,0,2,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,407,"        return getDateTimeInstance(dateStyle, timeStyle, null, null);
",0,0,0,1,2,0,6,0,0,7,61,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,424,"        return getDateTimeInstance(dateStyle, timeStyle, null, locale);
",0,0,0,1,2,0,8,0,0,9,63,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,442,"        return getDateTimeInstance(dateStyle, timeStyle, timeZone, null);
",0,0,0,1,2,0,8,0,0,9,65,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,460,"        Object key = new Pair(Integer.valueOf(dateStyle), Integer.valueOf(timeStyle));
",2,0,0,3,6,0,12,4,0,18,78,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,461,"        if (timeZone != null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,462,"            key = new Pair(key, timeZone);
",6,0,0,1,2,0,0,2,0,9,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,464,"        if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,465,"            locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,467,"        key = new Pair(key, locale);
",6,0,0,1,2,0,0,2,0,9,28,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,469,"        FastDateFormat format = cDateTimeInstanceCache.get(key);
",2,0,0,1,2,0,6,2,0,10,56,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,470,"        if (format == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,472,"                SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,
",2,0,0,1,3,0,8,4,0,14,100,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,474,"                String pattern = formatter.toPattern();
",2,0,0,1,2,0,4,2,0,8,39,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,475,"                format = getInstance(pattern, timeZone, locale);
",2,0,0,1,2,0,8,0,0,11,48,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,476,"                cDateTimeInstanceCache.put(key, format);
",0,0,0,1,2,0,8,0,0,8,40,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,480,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,478,"            } catch (ClassCastException ex) {
",2,0,0,1,4,0,0,2,0,4,33,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,479,"                throw new IllegalArgumentException(""No date time pattern for locale: "" + locale);
",2,1,0,1,2,0,0,2,0,6,81,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,482,"        return format;
",2,0,0,0,0,0,0,0,0,2,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,497,"        Object key = new TimeZoneDisplayKey(tz, daylight, style, locale);
",10,0,0,1,2,0,0,4,0,14,65,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,498,"        String value = cTimeZoneDisplayCache.get(key);
",2,0,0,1,2,0,6,2,0,10,46,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,499,"        if (value == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,501,"            value = tz.getDisplayName(daylight, style, locale);
",2,0,0,1,2,0,10,0,0,13,51,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,502,"            cTimeZoneDisplayCache.put(key, value);
",0,0,0,1,2,0,8,0,0,8,38,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,504,"        return value;
",2,0,0,0,0,0,0,0,0,2,13,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,513,"        if (cDefaultPattern == null) {
",2,1,0,1,3,0,0,0,0,3,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,514,"            cDefaultPattern = new SimpleDateFormat().toPattern();
",2,0,0,2,4,0,2,2,0,7,53,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,516,"        return cDefaultPattern;
",2,0,0,0,0,0,0,0,0,2,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,598,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,606,"                rule = new TextField(Calendar.ERA, ERAs);
",8,0,0,1,2,0,0,2,0,11,41,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,607,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,612,"                    rule = TwoDigitYearField.INSTANCE;
",6,0,0,0,0,0,0,0,0,7,34,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,614,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,617,"                    rule = new TextField(Calendar.MONTH, months);
",8,0,0,1,2,0,0,2,0,11,45,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,619,"                    rule = new TextField(Calendar.MONTH, shortMonths);
",8,0,0,1,2,0,0,2,0,11,50,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,623,"                    rule = UnpaddedMonthField.INSTANCE;
",6,0,0,0,0,0,0,0,0,7,35,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,625,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,630,"                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));
",6,0,0,2,4,0,4,2,0,13,70,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,631,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,642,"                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);
",6,0,0,1,2,0,4,0,0,11,56,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,643,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,645,"                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);
",12,1,0,1,2,0,0,2,0,16,84,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,646,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,648,"                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);
",6,0,0,1,2,0,4,0,0,11,56,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,649,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,651,"                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);
",6,0,0,1,2,0,4,0,0,11,65,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,652,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,654,"                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);
",6,0,0,1,2,0,4,0,0,11,57,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,655,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,657,"                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);
",6,0,0,1,2,0,4,0,0,11,58,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,658,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,660,"                rule = new TextField(Calendar.AM_PM, AmPmStrings);
",8,0,0,1,2,0,0,2,0,11,50,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,661,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,663,"                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));
",6,0,0,2,4,0,4,2,0,13,81,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,664,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,666,"                rule = selectNumberRule(Calendar.HOUR, tokenLen);
",6,0,0,1,2,0,4,0,0,11,49,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,667,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,669,"                if (tokenLen >= 4) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,670,"                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);
",12,0,0,1,2,0,0,2,0,15,80,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,672,"                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);
",12,0,0,1,2,0,0,2,0,15,81,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,674,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,676,"                if (tokenLen == 1) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,677,"                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;
",6,0,0,0,0,0,0,0,0,7,44,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,679,"                    rule = TimeZoneNumberRule.INSTANCE_COLON;
",6,0,0,0,0,0,0,0,0,7,41,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,681,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,687,"                    rule = new StringLiteral(sub);
",4,0,0,1,2,0,0,2,0,7,30,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,689,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,691,"                throw new IllegalArgumentException(""Illegal pattern component: "" + token);
",2,1,0,1,2,0,0,2,0,6,74,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,740,"                        i++;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,741,"                        buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,13,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,769,"            return new UnpaddedNumberField(field);
",2,0,0,1,2,0,0,2,0,4,38,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,790,"        if (obj instanceof Date) {
",2,0,0,1,3,0,0,2,0,4,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,791,"            return format((Date) obj, toAppendTo);
",2,0,0,2,4,0,4,2,0,8,38,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,792,"        } else if (obj instanceof Calendar) {
",2,0,0,1,4,0,0,2,0,4,37,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,793,"            return format((Calendar) obj, toAppendTo);
",2,0,0,2,4,0,4,2,0,8,42,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,794,"        } else if (obj instanceof Long) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,795,"            return format(((Long) obj).longValue(), toAppendTo);
",2,0,0,4,8,0,6,2,0,10,52,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,797,"            throw new IllegalArgumentException(""Unknown class: "" +
",0,1,0,0,1,0,0,2,0,4,54,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,810,"        return format(new Date(millis));
",2,0,0,2,4,0,2,2,0,6,32,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,820,"        Calendar c = new GregorianCalendar(mTimeZone);
",4,0,0,1,2,0,0,4,0,8,46,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,821,"        c.setTime(date);
",0,0,0,1,2,0,6,0,0,6,16,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,822,"        return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();
",2,0,0,3,6,0,6,2,0,10,70,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,845,"        return format(new Date(millis), buf);
",2,0,0,2,4,0,4,2,0,8,37,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,857,"        Calendar c = new GregorianCalendar(mTimeZone);
",4,0,0,1,2,0,0,4,0,8,46,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,858,"        c.setTime(date);
",0,0,0,1,2,0,6,0,0,6,16,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,859,"        return applyRules(c, buf);
",0,0,0,1,2,0,6,0,0,6,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,872,"            calendar = (Calendar) calendar.clone();
",2,0,0,2,4,0,4,2,0,9,39,6,0.00000,1
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,873,"            calendar.setTimeZone(mTimeZone);
",0,0,0,1,2,0,6,0,0,6,32,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,906,"        pos.setIndex(0);
",0,0,0,1,2,0,4,0,0,4,16,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,907,"        pos.setErrorIndex(0);
",0,0,0,1,2,0,4,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,908,"        return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,919,"        return mPattern;
",2,0,0,0,0,0,0,0,0,2,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,933,"        return mTimeZone;
",2,0,0,0,0,0,0,0,0,2,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,944,"        return mTimeZoneForced;
",2,0,0,0,0,0,0,0,0,2,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,953,"        return mLocale;
",2,0,0,0,0,0,0,0,0,2,15,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,966,"        return mMaxLengthEstimate;
",2,0,0,0,0,0,0,0,0,2,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,979,"        if (obj instanceof FastDateFormat == false) {
",2,1,0,1,3,0,0,2,0,6,45,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,980,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,982,"        FastDateFormat other = (FastDateFormat) obj;
",4,0,0,1,2,0,0,4,0,8,44,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,983,"        if (
",0,0,0,0,1,0,0,0,0,0,4,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,990,"            return true;
",0,0,0,0,0,0,0,0,0,1,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,992,"        return false;
",0,0,0,0,0,0,0,0,0,1,13,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1018,"        return ""FastDateFormat["" + mPattern + ""]"";
",2,1,0,1,2,0,0,0,0,5,42,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1032,"        in.defaultReadObject();
",0,0,0,1,2,0,4,0,0,4,23,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1033,"        init();
",0,0,0,1,2,0,2,0,0,2,7,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1034,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1275,"                throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1308,"                    digits = 3;
",2,0,0,0,0,0,0,0,0,3,11,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1314,"                    buffer.append('0');
",0,0,0,1,2,0,4,0,0,5,19,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1447,"        TwelveHourField(NumberRule rule) {
",4,0,0,1,3,0,0,2,0,6,34,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1448,"            mRule = rule;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1449,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1455,"            return mRule.estimateLength();
",0,0,0,1,2,0,4,0,0,4,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1462,"            int value = calendar.get(Calendar.HOUR);
",6,0,0,1,2,0,4,0,0,10,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1463,"            if (value == 0) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1464,"                value = calendar.getLeastMaximum(Calendar.HOUR) + 1;
",6,1,0,1,2,0,4,0,0,12,52,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1466,"            mRule.appendTo(buffer, value);
",0,0,0,1,2,0,8,0,0,8,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1467,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1473,"            mRule.appendTo(buffer, value);
",0,0,0,1,2,0,8,0,0,8,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1474,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1538,"        TimeZoneNameRule(TimeZone timeZone, boolean timeZoneForced, Locale locale, int style) {
",10,0,0,1,3,0,0,4,0,14,87,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1539,"            mTimeZone = timeZone;
",4,0,0,0,0,0,0,0,0,5,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1540,"            mTimeZoneForced = timeZoneForced;
",4,0,0,0,0,0,0,0,0,5,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1541,"            mLocale = locale;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1542,"            mStyle = style;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1544,"            if (timeZoneForced) {
",2,0,0,1,3,0,0,0,0,2,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1545,"                mStandard = getTimeZoneDisplay(timeZone, false, style, locale);
",2,0,0,1,2,0,8,0,0,12,63,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1546,"                mDaylight = getTimeZoneDisplay(timeZone, true, style, locale);
",2,0,0,1,2,0,8,0,0,12,62,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1548,"                mStandard = null;
",2,0,0,0,0,0,0,0,0,3,17,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1549,"                mDaylight = null;
",2,0,0,0,0,0,0,0,0,3,17,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1551,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1557,"            if (mTimeZoneForced) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1558,"                return Math.max(mStandard.length(), mDaylight.length());
",0,0,0,3,6,0,12,0,0,12,56,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1559,"            } else if (mStyle == TimeZone.SHORT) {
",6,1,0,1,4,0,0,0,0,7,38,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1560,"                return 4;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1562,"                return 40;
",0,0,0,0,0,0,0,0,0,0,10,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1570,"            if (mTimeZoneForced) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1571,"                if (mTimeZone.useDaylightTime() && calendar.get(Calendar.DST_OFFSET) != 0) {
",4,2,0,3,7,0,8,0,0,14,76,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1572,"                    buffer.append(mDaylight);
",0,0,0,1,2,0,6,0,0,6,25,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1574,"                    buffer.append(mStandard);
",0,0,0,1,2,0,6,0,0,6,25,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1577,"                TimeZone timeZone = calendar.getTimeZone();
",2,0,0,1,2,0,4,2,0,8,43,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1578,"                if (timeZone.useDaylightTime() && calendar.get(Calendar.DST_OFFSET) != 0) {
",4,2,0,3,7,0,8,0,0,14,75,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1579,"                    buffer.append(getTimeZoneDisplay(timeZone, true, mStyle, mLocale));
",0,0,0,2,4,0,12,0,0,13,67,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1581,"                    buffer.append(getTimeZoneDisplay(timeZone, false, mStyle, mLocale));
",0,0,0,2,4,0,12,0,0,13,68,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1584,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1185,"        UnpaddedNumberField(int field) {
",4,0,0,1,3,0,0,0,0,4,32,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1186,"            mField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1187,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1193,"            return 4;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1200,"            appendTo(buffer, calendar.get(mField));
",0,0,0,2,4,0,10,0,0,10,39,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1201,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1207,"            if (value < 10) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1208,"                buffer.append((char)(value + '0'));
",2,1,0,3,6,0,4,0,0,8,35,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1209,"            } else if (value < 100) {
",2,1,0,1,4,0,0,0,0,3,25,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1210,"                buffer.append((char)(value / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1211,"                buffer.append((char)(value % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1213,"                buffer.append(Integer.toString(value));
",0,0,0,2,4,0,10,0,0,10,39,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1215,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1373,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1374,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1367,"        static final TwoDigitYearField INSTANCE = new TwoDigitYearField();
",2,0,0,1,2,2,0,4,0,8,66,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1380,"            return 2;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1387,"            appendTo(buffer, calendar.get(Calendar.YEAR) % 100);
",4,1,0,2,4,0,8,0,0,13,52,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1388,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1394,"            buffer.append((char)(value / 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1395,"            buffer.append((char)(value % 10 + '0'));
",2,2,0,3,6,0,4,0,0,9,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1396,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1658,"                           boolean daylight, int style, Locale locale) {
",6,0,0,0,2,0,0,2,0,8,45,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1659,"            mTimeZone = timeZone;
",4,0,0,0,0,0,0,0,0,5,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1660,"            if (daylight) {
",2,0,0,1,3,0,0,0,0,2,15,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1661,"                style |= 0x80000000;
",2,0,0,0,0,0,0,0,0,3,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1663,"            mStyle = style;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1664,"            mLocale = locale;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1665,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1672,"            return mStyle * 31 + mLocale.hashCode();
",2,2,0,1,2,0,4,0,0,8,40,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1680,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1681,"                return true;
",0,0,0,0,0,0,0,0,0,1,12,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1683,"            if (obj instanceof TimeZoneDisplayKey) {
",2,0,0,1,3,0,0,2,0,4,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1684,"                TimeZoneDisplayKey other = (TimeZoneDisplayKey)obj;
",4,0,0,1,2,0,0,4,0,8,51,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1685,"                return
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/time/FastDateFormat,38,1690,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,68,"      super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,69,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,95,"        if (expression == false) {
",2,1,0,1,3,0,0,0,0,4,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,96,"            throw new IllegalArgumentException(String.format(message, value));
",0,0,0,2,4,0,8,2,0,10,66,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,98,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,122,"            throw new IllegalArgumentException(String.format(message, Long.valueOf(value)));
",0,0,0,3,6,0,12,2,0,14,80,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,147,"        if (expression == false) {
",2,1,0,1,3,0,0,0,0,4,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,148,"            throw new IllegalArgumentException(String.format(message, new Double(value)));
",2,0,0,3,6,0,6,4,0,12,78,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,150,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,175,"        if (expression == false) {
",2,1,0,1,3,0,0,0,0,4,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,176,"            throw new IllegalArgumentException(String.format(message, values));
",0,0,0,2,4,0,8,2,0,10,67,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,178,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,201,"        if (expression == false) {
",2,1,0,1,3,0,0,0,0,4,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,202,"            throw new IllegalArgumentException(DEFAULT_IS_TRUE_EXCEPTION_MESSAGE);
",2,0,0,1,2,0,0,2,0,4,70,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,204,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,225,"        return notNull(object, DEFAULT_IS_NULL_EXCEPTION_MESSAGE);
",0,0,0,1,2,0,6,0,0,6,58,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,243,"        if (object == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,244,"            throw new NullPointerException(String.format(message, values));
",0,0,0,2,4,0,8,2,0,10,63,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,246,"        return object;
",2,0,0,0,0,0,0,0,0,2,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,268,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,269,"            throw new NullPointerException(String.format(message, values));
",0,0,0,2,4,0,8,2,0,10,63,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,271,"        if (array.length == 0) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,272,"            throw new IllegalArgumentException(String.format(message, values));
",0,0,0,2,4,0,8,2,0,10,67,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,274,"        return array;
",2,0,0,0,0,0,0,0,0,2,13,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,294,"        return notEmpty(array, DEFAULT_NOT_EMPTY_ARRAY_EXCEPTION_MESSAGE);
",0,0,0,1,2,0,6,0,0,6,66,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,316,"        if (collection == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,317,"            throw new NullPointerException(String.format(message, values));
",0,0,0,2,4,0,8,2,0,10,63,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,319,"        if (collection.size() == 0) {
",0,1,0,2,5,0,4,0,0,5,29,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,320,"            throw new IllegalArgumentException(String.format(message, values));
",0,0,0,2,4,0,8,2,0,10,67,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,322,"        return collection;
",2,0,0,0,0,0,0,0,0,2,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,342,"        return notEmpty(collection, DEFAULT_NOT_EMPTY_COLLECTION_EXCEPTION_MESSAGE);
",0,0,0,1,2,0,6,0,0,6,76,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,364,"        if (map == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,365,"            throw new NullPointerException(String.format(message, values));
",0,0,0,2,4,0,8,2,0,10,63,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,367,"        if (map.size() == 0) {
",0,1,0,2,5,0,4,0,0,5,22,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,368,"            throw new IllegalArgumentException(String.format(message, values));
",0,0,0,2,4,0,8,2,0,10,67,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,370,"        return map;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,390,"        return notEmpty(map, DEFAULT_NOT_EMPTY_MAP_EXCEPTION_MESSAGE);
",0,0,0,1,2,0,6,0,0,6,62,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,412,"        if (chars == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,413,"            throw new NullPointerException(String.format(message, values));
",0,0,0,2,4,0,8,2,0,10,63,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,415,"        if (chars.length() == 0) {
",0,1,0,2,5,0,4,0,0,5,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,416,"            throw new IllegalArgumentException(String.format(message, values));
",0,0,0,2,4,0,8,2,0,10,67,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,418,"        return chars;
",2,0,0,0,0,0,0,0,0,2,13,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,439,"        return notEmpty(chars, DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EXCEPTION_MESSAGE);
",0,0,0,1,2,0,6,0,0,6,74,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,462,"        if (chars == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,463,"            throw new NullPointerException(String.format(message, values));
",0,0,0,2,4,0,8,2,0,10,63,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,465,"        if (StringUtils.isBlank(chars)) {
",0,0,0,2,5,0,6,0,0,6,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,466,"            throw new IllegalArgumentException(String.format(message, values));
",0,0,0,2,4,0,8,2,0,10,67,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,468,"        return chars;
",2,0,0,0,0,0,0,0,0,2,13,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,489,"        return notBlank(chars, DEFAULT_NOT_BLANK_EXCEPTION_MESSAGE);
",0,0,0,1,2,0,6,0,0,6,60,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,517,"        Validate.notNull(array);
",0,0,0,1,2,0,6,0,0,6,24,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,518,"        for (int i = 0; i < array.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,519,"            if (array[i] == null) {
",0,1,1,2,5,0,0,0,0,5,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,520,"                Object[] values2 = ArrayUtils.add(values, Integer.valueOf(i));
",2,0,0,3,6,0,12,2,0,16,62,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,521,"                throw new IllegalArgumentException(String.format(message, values2));
",0,0,0,2,4,0,8,2,0,10,68,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,524,"        return array;
",2,0,0,0,0,0,0,0,0,2,13,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,549,"        return noNullElements(array, DEFAULT_NO_NULL_ELEMENTS_ARRAY_EXCEPTION_MESSAGE);
",0,0,0,1,2,0,6,0,0,6,79,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,577,"        Validate.notNull(iterable);
",0,0,0,1,2,0,6,0,0,6,27,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,578,"        int i = 0;
",2,0,0,0,0,0,0,0,0,2,10,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,579,"        for (Iterator<?> it = iterable.iterator(); it.hasNext(); i++) {
",4,0,0,3,7,0,8,2,0,15,63,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,580,"            if (it.next() == null) {
",0,1,0,2,5,0,4,0,0,5,24,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,581,"                Object[] values2 = ArrayUtils.addAll(values, Integer.valueOf(i));
",2,0,0,3,6,0,12,2,0,16,65,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,582,"                throw new IllegalArgumentException(String.format(message, values2));
",0,0,0,2,4,0,8,2,0,10,68,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,585,"        return iterable;
",2,0,0,0,0,0,0,0,0,2,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,610,"        return noNullElements(iterable, DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EXCEPTION_MESSAGE);
",0,0,0,1,2,0,6,0,0,6,87,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,635,"        Validate.notNull(array);
",0,0,0,1,2,0,6,0,0,6,24,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,636,"        if (index < 0 || index >= array.length) {
",8,3,0,1,3,0,0,0,0,11,41,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,637,"            throw new IndexOutOfBoundsException(String.format(message, values));
",0,0,0,2,4,0,8,2,0,10,68,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,639,"        return array;
",2,0,0,0,0,0,0,0,0,2,13,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,664,"        return validIndex(array, index, DEFAULT_VALID_INDEX_ARRAY_EXCEPTION_MESSAGE, Integer.valueOf(index));
",0,0,0,2,4,0,14,0,0,14,101,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,689,"        Validate.notNull(collection);
",0,0,0,1,2,0,6,0,0,6,29,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,690,"        if (index < 0 || index >= collection.size()) {
",4,3,0,2,5,0,4,0,0,11,46,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,691,"            throw new IndexOutOfBoundsException(String.format(message, values));
",0,0,0,2,4,0,8,2,0,10,68,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,693,"        return collection;
",2,0,0,0,0,0,0,0,0,2,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,715,"        return validIndex(collection, index, DEFAULT_VALID_INDEX_COLLECTION_EXCEPTION_MESSAGE, Integer.valueOf(index));
",0,0,0,2,4,0,14,0,0,14,111,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,741,"        Validate.notNull(chars);
",0,0,0,1,2,0,6,0,0,6,24,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,742,"        if (index < 0 || index >= chars.length()) {
",4,3,0,2,5,0,4,0,0,11,43,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,743,"            throw new IndexOutOfBoundsException(String.format(message, values));
",0,0,0,2,4,0,8,2,0,10,68,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,745,"        return chars;
",2,0,0,0,0,0,0,0,0,2,13,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/Validate,38,771,"        return validIndex(chars, index, DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EXCEPTION_MESSAGE, Integer.valueOf(index));
",0,0,0,2,4,0,14,0,0,14,109,5,0.00000,0
