dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy
defect4j,time,org/joda/time/chrono/BaseChronology,11,255,"        int size = period.size();
",2,0,0,1,2,0,4,0,0,6,25,5,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,256,"        int[] values = new int[size];
",2,0,1,2,4,0,0,0,0,4,29,5,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,257,"        if (startInstant != endInstant) {
",4,1,0,1,3,0,0,0,0,5,33,4,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,258,"            for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,6,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,259,"                DurationField field = period.getFieldType(i).getField(this);
",2,0,0,2,4,0,8,2,0,12,60,8,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,260,"                int value = field.getDifference(endInstant, startInstant);
",2,0,0,1,2,0,8,0,0,10,58,9,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,261,"                startInstant = field.add(startInstant, value);
",2,0,0,1,2,0,8,0,0,11,46,8,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,262,"                values[i] = value;
",2,0,1,1,2,0,0,0,0,7,18,8,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,265,"        return values;
",2,0,0,0,0,1,0,0,0,2,14,4,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,276,"        int size = period.size();
",2,0,0,1,2,0,4,0,0,6,25,5,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,277,"        int[] values = new int[size];
",2,0,1,2,4,0,0,0,0,4,29,5,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,278,"        if (duration != 0) {
",2,1,0,1,3,0,0,0,0,3,20,4,1.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,289,"        return values;
",2,0,0,0,0,1,0,0,0,2,14,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,225,"    public DateTimeZoneBuilder() {
",2,0,0,1,3,1,0,0,0,3,30,2,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,226,"        iRuleSets = new ArrayList<RuleSet>(10);
",2,0,0,1,2,0,0,4,0,7,39,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,227,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,252,"        if (iRuleSets.size() > 0) {
",0,1,0,2,5,0,4,0,0,5,27,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,258,"        iRuleSets.add(new RuleSet());
",0,0,0,2,4,0,4,2,0,6,29,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,259,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,268,"        getLastRuleSet().setStandardOffset(standardOffset);
",0,0,0,2,4,0,6,0,0,6,51,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,269,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,309,"        if (fromYear <= toYear) {
",4,1,0,1,3,0,0,0,0,5,25,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,310,"            OfYear ofYear = new OfYear
",2,0,0,0,0,0,0,4,0,6,26,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,312,"            Recurrence recurrence = new Recurrence(ofYear, nameKey, saveMillis);
",8,0,0,1,2,0,0,4,0,12,68,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,313,"            Rule rule = new Rule(recurrence, fromYear, toYear);
",8,0,0,1,2,0,0,4,0,12,51,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,314,"            getLastRuleSet().addRule(rule);
",0,0,0,2,4,0,6,0,0,6,31,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,316,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,320,"        if (iRuleSets.size() == 0) {
",0,1,0,2,5,0,4,0,0,5,28,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,323,"        return iRuleSets.get(iRuleSets.size() - 1);
",0,1,0,2,4,1,8,0,0,9,43,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,333,"        if (id == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,339,"        ArrayList<Transition> transitions = new ArrayList<Transition>();
",2,0,0,1,2,0,0,8,0,10,64,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,343,"        DSTZone tailZone = null;
",2,0,0,0,0,0,0,2,0,4,24,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,345,"        long millis = Long.MIN_VALUE;
",6,0,0,0,0,0,0,0,0,6,29,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,346,"        int saveMillis = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,348,"        int ruleSetCount = iRuleSets.size();
",2,0,0,1,2,0,4,0,0,6,36,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,349,"        for (int i=0; i<ruleSetCount; i++) {
",8,1,0,1,3,0,0,0,0,10,36,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,350,"            RuleSet rs = iRuleSets.get(i);
",2,0,0,1,2,0,6,2,0,10,30,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,351,"            Transition next = rs.firstTransition(millis);
",2,0,0,1,2,0,6,2,0,10,45,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,352,"            if (next == null) {
",2,1,0,1,3,0,0,0,0,3,19,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,355,"            addTransition(transitions, next);
",0,0,0,1,2,0,6,0,0,6,33,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,356,"            millis = next.getMillis();
",2,0,0,1,2,0,4,0,0,7,26,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,357,"            saveMillis = next.getSaveMillis();
",2,0,0,1,2,0,4,0,0,7,34,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,360,"            rs = new RuleSet(rs);
",4,0,0,1,2,0,0,2,0,7,21,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,362,"            while ((next = rs.nextTransition(millis, saveMillis)) != null) {
",2,1,0,3,7,0,8,0,0,12,64,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,363,"                if (addTransition(transitions, next)) {
",0,0,0,2,5,0,6,0,0,6,39,9,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,364,"                    if (tailZone != null) {
",2,1,0,1,3,0,0,0,0,3,23,10,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,366,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,369,"                millis = next.getMillis();
",2,0,0,1,2,0,4,0,0,7,26,8,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,370,"                saveMillis = next.getSaveMillis();
",2,0,0,1,2,0,4,0,0,7,34,8,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,371,"                if (tailZone == null && i == ruleSetCount - 1) {
",6,4,0,1,3,0,0,0,0,10,48,8,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,372,"                    tailZone = rs.buildTailZone(id);
",2,0,0,1,2,0,6,0,0,9,32,10,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,379,"            millis = rs.getUpperLimit(saveMillis);
",2,0,0,1,2,0,6,0,0,9,38,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,383,"        if (transitions.size() == 0) {
",0,1,0,2,5,0,4,0,0,5,30,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,390,"        if (transitions.size() == 1 && tailZone == null) {
",2,3,0,2,5,0,4,0,0,9,50,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,396,"        PrecalculatedZone zone = PrecalculatedZone.create(id, outputID, transitions, tailZone);
",2,0,0,1,2,0,12,2,0,16,87,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,397,"        if (zone.isCachable()) {
",0,0,0,2,5,0,4,0,0,4,24,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,398,"            return CachedDateTimeZone.forZone(zone);
",0,0,0,1,2,1,6,0,0,6,40,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,404,"        int size = transitions.size();
",2,0,0,1,2,0,4,0,0,6,30,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,405,"        if (size == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,406,"            transitions.add(tr);
",0,0,0,1,2,0,6,0,0,6,20,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,407,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,410,"        Transition last = transitions.get(size - 1);
",4,1,0,1,2,0,4,2,0,11,44,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,411,"        if (!tr.isTransitionFrom(last)) {
",0,0,0,2,5,0,6,0,0,7,33,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,417,"        int offsetForLast = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,418,"        if (size >= 2) {
",2,1,0,1,3,0,0,0,0,3,16,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,419,"            offsetForLast = transitions.get(size - 2).getWallOffset();
",4,1,0,2,4,0,6,0,0,12,58,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,421,"        int offsetForNew = last.getWallOffset();
",2,0,0,1,2,0,4,0,0,6,40,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,423,"        long lastLocal = last.getMillis() + offsetForLast;
",4,1,0,1,2,0,4,0,0,9,50,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,424,"        long newLocal = tr.getMillis() + offsetForNew;
",4,1,0,1,2,0,4,0,0,9,46,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,426,"        if (newLocal != lastLocal) {
",4,1,0,1,3,0,0,0,0,5,28,4,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,427,"            transitions.add(tr);
",0,0,0,1,2,0,6,0,0,6,20,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,428,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,1.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,78,"        return cVerbose.get();
",0,0,0,1,2,1,4,0,0,4,22,5,1.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,86,"        return getInstance(DateTimeZone.getDefault());
",0,0,0,2,4,1,6,0,0,6,46,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,816,"        Rule(Recurrence recurrence, int fromYear, int toYear) {
",8,0,0,1,3,0,0,2,0,10,55,3,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,817,"            iRecurrence = recurrence;
",4,0,0,0,0,0,0,0,0,5,25,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,818,"            iFromYear = fromYear;
",4,0,0,0,0,0,0,0,0,5,21,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,819,"            iToYear = toYear;
",4,0,0,0,0,0,0,0,0,5,17,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,820,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,827,"            return iToYear;
",2,0,0,0,0,1,0,0,0,2,15,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,835,"            return iRecurrence.getNameKey();
",0,0,0,1,2,1,4,0,0,4,32,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,839,"            return iRecurrence.getSaveMillis();
",0,0,0,1,2,1,4,0,0,4,35,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,843,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,845,"            final int wallOffset = standardOffset + saveMillis;
",6,1,0,0,0,1,0,0,0,8,51,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,846,"            long testInstant = instant;
",4,0,0,0,0,0,0,0,0,4,27,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,849,"            if (instant == Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,32,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,850,"                year = Integer.MIN_VALUE;
",6,0,0,0,0,0,0,0,0,7,25,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,852,"                year = chrono.year().get(instant + wallOffset);
",6,1,0,2,4,0,6,0,0,14,47,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,855,"            if (year < iFromYear) {
",4,1,0,1,3,0,0,0,0,5,23,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,857,"                testInstant = chrono.year().set(0, iFromYear) - wallOffset;
",4,1,0,2,4,0,8,0,0,14,59,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,860,"                testInstant -= 1;
",2,0,0,0,0,0,0,0,0,3,17,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,863,"            long next = iRecurrence.next(testInstant, standardOffset, saveMillis);
",2,0,0,1,2,0,10,0,0,12,70,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,865,"            if (next > instant) {
",4,1,0,1,3,0,0,0,0,5,21,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,866,"                year = chrono.year().get(next + wallOffset);
",6,1,0,2,4,0,6,0,0,14,44,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,867,"                if (year > iToYear) {
",4,1,0,1,3,0,0,0,0,5,21,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,873,"            return next;
",2,0,0,0,0,1,0,0,0,2,12,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,549,"            if (iMode == 'w') {
",2,1,0,1,3,0,0,0,0,4,19,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,550,"                offset = standardOffset + saveMillis;
",6,1,0,0,0,0,0,0,0,8,37,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,558,"            instant += offset;
",4,0,0,0,0,0,0,0,0,5,18,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,560,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,561,"            long next = chrono.monthOfYear().set(instant, iMonthOfYear);
",2,0,0,2,4,0,10,0,0,12,60,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,563,"            next = chrono.millisOfDay().set(next, 0);
",2,0,0,2,4,0,8,0,0,11,41,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,564,"            next = chrono.millisOfDay().add(next, iMillisOfDay);
",2,0,0,2,4,0,10,0,0,13,52,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,565,"            next = setDayOfMonthNext(chrono, next);
",2,0,0,1,2,0,6,0,0,9,39,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,567,"            if (iDayOfWeek == 0) {
",2,1,0,1,3,0,0,0,0,3,22,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,573,"                next = setDayOfWeek(chrono, next);
",2,0,0,1,2,0,6,0,0,9,34,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,574,"                if (next <= instant) {
",4,1,0,1,3,0,0,0,0,5,22,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,575,"                    next = chrono.year().add(next, 1);
",2,0,0,2,4,0,8,0,0,11,34,9,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,576,"                    next = chrono.monthOfYear().set(next, iMonthOfYear);
",2,0,0,2,4,0,10,0,0,13,52,9,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,577,"                    next = setDayOfMonthNext(chrono, next);
",2,0,0,1,2,0,6,0,0,9,39,9,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,578,"                    next = setDayOfWeek(chrono, next);
",2,0,0,1,2,0,6,0,0,9,34,9,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,583,"            return next - offset;
",4,1,0,0,0,1,0,0,0,5,21,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,672,"                next = setDayOfMonth(chrono, next);
",2,0,0,1,2,0,6,0,0,9,35,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,682,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,683,"            return next;
",2,0,0,0,0,1,0,0,0,2,12,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,706,"            if (iDayOfMonth >= 0) {
",2,1,0,1,3,0,0,0,0,3,23,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,709,"                instant = chrono.dayOfMonth().set(instant, 1);
",2,0,0,2,4,0,8,0,0,11,46,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,710,"                instant = chrono.monthOfYear().add(instant, 1);
",2,0,0,2,4,0,8,0,0,11,47,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,711,"                instant = chrono.dayOfMonth().add(instant, iDayOfMonth);
",2,0,0,2,4,0,10,0,0,13,56,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,713,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,717,"            int dayOfWeek = chrono.dayOfWeek().get(instant);
",2,0,0,2,4,0,8,0,0,10,48,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,718,"            int daysToAdd = iDayOfWeek - dayOfWeek;
",6,1,0,0,0,0,0,0,0,7,39,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,719,"            if (daysToAdd != 0) {
",2,1,0,1,3,0,0,0,0,3,21,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,720,"                if (iAdvance) {
",2,0,0,1,3,0,0,0,0,2,15,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,725,"                    if (daysToAdd > 0) {
",2,1,0,1,3,0,0,0,0,3,20,9,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,729,"                instant = chrono.dayOfWeek().add(instant, daysToAdd);
",2,0,0,2,4,0,10,0,0,13,53,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,731,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,963,"        RuleSet() {
",2,0,0,1,3,0,0,0,0,2,11,3,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,964,"            iRules = new ArrayList<Rule>(10);
",2,0,0,1,2,0,0,4,0,7,33,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,965,"            iUpperYear = Integer.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,7,31,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,966,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,971,"        RuleSet(RuleSet rs) {
",4,0,0,1,3,0,0,2,0,6,21,3,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,972,"            iStandardOffset = rs.iStandardOffset;
",6,0,0,0,0,0,0,0,0,7,37,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,973,"            iRules = new ArrayList<Rule>(rs.iRules);
",6,0,0,1,2,0,0,4,0,11,40,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,974,"            iInitialNameKey = rs.iInitialNameKey;
",6,0,0,0,0,0,0,0,0,7,37,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,975,"            iInitialSaveMillis = rs.iInitialSaveMillis;
",6,0,0,0,0,0,0,0,0,7,43,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,976,"            iUpperYear = rs.iUpperYear;
",6,0,0,0,0,0,0,0,0,7,27,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,977,"            iUpperOfYear = rs.iUpperOfYear;
",6,0,0,0,0,0,0,0,0,7,31,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,978,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,948,"            long now = DateTimeUtils.currentTimeMillis();
",2,0,0,1,2,0,4,0,0,6,45,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,949,"            YEAR_LIMIT = ISOChronology.getInstanceUTC().year().get(now) + 100;
",2,1,0,3,6,0,10,0,0,14,66,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,950,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,985,"            iStandardOffset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,33,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,986,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,994,"            if (!iRules.contains(rule)) {
",0,0,0,2,5,0,6,0,0,7,29,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,995,"                iRules.add(rule);
",0,0,0,1,2,0,6,0,0,6,17,8,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,997,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1011,"            if (iInitialNameKey != null) {
",2,1,0,1,3,0,0,0,0,3,30,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1018,"            ArrayList<Rule> copy = new ArrayList<Rule>(iRules);
",4,0,0,1,2,0,0,8,0,12,51,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1024,"            long millis = Long.MIN_VALUE;
",6,0,0,0,0,0,0,0,0,6,29,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1025,"            int saveMillis = 0;
",2,0,0,0,0,0,0,0,0,2,19,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1026,"            Transition first = null;
",2,0,0,0,0,0,0,2,0,4,24,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1029,"            while ((next = nextTransition(millis, saveMillis)) != null) {
",2,1,0,3,7,0,6,0,0,11,61,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1030,"                millis = next.getMillis();
",2,0,0,1,2,0,4,0,0,7,26,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1032,"                if (millis == firstMillis) {
",4,1,0,1,3,0,0,0,0,5,28,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1037,"                if (millis > firstMillis) {
",4,1,0,1,3,0,0,0,0,5,27,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1038,"                    if (first == null) {
",2,1,0,1,3,0,0,0,0,3,20,9,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1042,"                        for (Rule rule : copy) {
",4,0,0,1,3,0,0,2,0,6,24,11,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1043,"                            if (rule.getSaveMillis() == 0) {
",0,1,0,2,5,0,4,0,0,5,32,13,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1044,"                                first = new Transition(firstMillis, rule, iStandardOffset);
",8,0,0,1,2,0,0,2,0,11,59,15,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1045,"                                break;
",0,0,0,0,0,0,0,0,0,0,6,3,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1047,"                        }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1049,"                    if (first == null) {
",2,1,0,1,3,0,0,0,0,3,20,9,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1066,"            iRules = copy;
",4,0,0,0,0,0,0,0,0,5,14,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1067,"            return first;
",2,0,0,0,0,1,0,0,0,2,13,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1082,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1085,"            Rule nextRule = null;
",2,0,0,0,0,0,0,2,0,4,21,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1086,"            long nextMillis = Long.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,6,33,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1088,"            Iterator<Rule> it = iRules.iterator();
",2,0,0,1,2,0,4,4,0,10,38,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1089,"            while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1090,"                Rule rule = it.next();
",2,0,0,1,2,0,4,2,0,8,22,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1091,"                long next = rule.next(instant, iStandardOffset, saveMillis);
",2,0,0,1,2,0,10,0,0,12,60,8,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1092,"                if (next <= instant) {
",4,1,0,1,3,0,0,0,0,5,22,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1098,"                if (next <= nextMillis) {
",4,1,0,1,3,0,0,0,0,5,25,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1100,"                    nextRule = rule;
",4,0,0,0,0,0,0,0,0,5,16,9,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1101,"                    nextMillis = next;
",4,0,0,0,0,0,0,0,0,5,18,9,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1103,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1105,"            if (nextRule == null) {
",2,1,0,1,3,0,0,0,0,3,23,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1110,"            if (chrono.year().get(nextMillis) >= YEAR_LIMIT) {
",2,1,0,3,7,0,8,0,0,11,50,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1115,"            if (iUpperYear < Integer.MAX_VALUE) {
",6,1,0,1,3,0,0,0,0,7,37,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1124,"            return new Transition(nextMillis, nextRule, iStandardOffset);
",6,0,0,1,2,1,0,2,0,8,61,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1131,"            if (iUpperYear == Integer.MAX_VALUE) {
",6,1,0,1,3,0,0,0,0,7,38,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1132,"                return Long.MAX_VALUE;
",4,0,0,0,0,1,0,0,0,4,22,8,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1141,"            if (iRules.size() == 2) {
",0,1,0,2,5,0,4,0,0,5,25,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1142,"                Rule startRule = iRules.get(0);
",2,0,0,1,2,0,4,2,0,8,31,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1143,"                Rule endRule = iRules.get(1);
",2,0,0,1,2,0,4,2,0,8,29,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1144,"                if (startRule.getToYear() == Integer.MAX_VALUE &&
",4,2,0,1,3,0,4,0,0,10,49,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1154,"                    return new DSTZone(id, iStandardOffset,
",4,0,0,0,1,1,0,2,0,6,39,10,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,890,"        Transition(long millis, Rule rule, int standardOffset) {
",8,0,0,1,3,0,0,2,0,10,56,3,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,891,"            iMillis = millis;
",4,0,0,0,0,0,0,0,0,5,17,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,892,"            iNameKey = rule.getNameKey();
",2,0,0,1,2,0,4,0,0,7,29,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,893,"            iWallOffset = standardOffset + rule.getSaveMillis();
",4,1,0,1,2,0,4,0,0,10,52,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,894,"            iStandardOffset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,33,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,895,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,906,"            return iMillis;
",2,0,0,0,0,1,0,0,0,2,15,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,910,"            return iNameKey;
",2,0,0,0,0,1,0,0,0,2,16,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,914,"            return iWallOffset;
",2,0,0,0,0,1,0,0,0,2,19,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,918,"            return iStandardOffset;
",2,0,0,0,0,1,0,0,0,2,23,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,922,"            return iWallOffset - iStandardOffset;
",4,1,0,0,0,1,0,0,0,5,37,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,929,"            if (other == null) {
",2,1,0,1,3,0,0,0,0,3,20,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,930,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,932,"            return iMillis > other.iMillis &&
",6,2,0,0,0,1,0,0,0,8,33,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1389,"            int size = transitions.size();
",2,0,0,1,2,0,4,0,0,6,30,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1390,"            if (size == 0) {
",2,1,0,1,3,0,0,0,0,3,16,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1394,"            long[] trans = new long[size];
",2,0,1,2,4,0,0,0,0,4,30,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1395,"            int[] wallOffsets = new int[size];
",2,0,1,2,4,0,0,0,0,4,34,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1396,"            int[] standardOffsets = new int[size];
",2,0,1,2,4,0,0,0,0,4,38,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1397,"            String[] nameKeys = new String[size];
",2,0,1,2,4,0,0,4,0,8,37,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1399,"            Transition last = null;
",2,0,0,0,0,0,0,2,0,4,23,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1400,"            for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1401,"                Transition tr = transitions.get(i);
",2,0,0,1,2,0,6,2,0,10,35,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1403,"                if (!tr.isTransitionFrom(last)) {
",0,0,0,2,5,0,6,0,0,7,33,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1407,"                trans[i] = tr.getMillis();
",0,0,1,2,4,0,4,0,0,9,26,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1408,"                wallOffsets[i] = tr.getWallOffset();
",0,0,1,2,4,0,4,0,0,9,36,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1409,"                standardOffsets[i] = tr.getStandardOffset();
",0,0,1,2,4,0,4,0,0,9,44,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1410,"                nameKeys[i] = tr.getNameKey();
",0,0,1,2,4,0,4,0,0,9,30,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1412,"                last = tr;
",4,0,0,0,0,0,0,0,0,5,10,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1417,"            String[] zoneNameData = new String[5];
",2,0,0,2,4,0,0,4,0,6,38,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1418,"            String[][] zoneStrings = new DateFormatSymbols(Locale.ENGLISH).getZoneStrings();
",6,0,0,4,8,0,2,4,0,12,80,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1419,"            for (int j = 0; j < zoneStrings.length; j++) {
",10,1,0,1,3,0,0,0,0,12,46,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1420,"                String[] set = zoneStrings[j];
",2,0,1,2,4,0,0,2,0,8,30,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1421,"                if (set != null && set.length == 5 && id.equals(set[0])) {
",6,4,1,3,7,0,4,0,0,16,58,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1426,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1428,"            for (int i = 0; i < nameKeys.length - 1; i++) {
",10,2,0,1,3,0,0,0,0,13,47,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1429,"                String curNameKey = nameKeys[i];
",2,0,1,1,2,0,0,2,0,8,32,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1430,"                String nextNameKey = nameKeys[i + 1];
",4,1,1,1,2,0,0,2,0,9,37,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1431,"                long curOffset = wallOffsets[i];
",2,0,1,1,2,0,0,0,0,6,32,8,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1432,"                long nextOffset = wallOffsets[i + 1];
",4,1,1,1,2,0,0,0,0,7,37,8,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1433,"                long curStdOffset = standardOffsets[i];
",2,0,1,1,2,0,0,0,0,6,39,8,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1434,"                long nextStdOffset = standardOffsets[i + 1];
",4,1,1,1,2,0,0,0,0,7,44,8,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1435,"                Period p = new Period(trans[i], trans[i + 1], PeriodType.yearMonthDay(), chrono);
",6,1,1,4,8,0,4,4,0,21,81,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1436,"                if (curOffset != nextOffset &&
",4,8,0,0,1,0,0,0,0,12,30,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1457,"            if (tailZone != null) {
",2,1,0,1,3,0,0,0,0,3,23,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1458,"                if (tailZone.iStartRecurrence.getNameKey()
",4,0,0,1,3,0,2,0,0,6,42,9,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1480,"            return new PrecalculatedZone
",0,0,0,0,0,1,0,2,0,2,28,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1690,"            if (iTailZone != null) {
",2,1,0,1,3,0,0,0,0,3,24,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1691,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,761,"            return iOfYear.next(instant, standardOffset, saveMillis);
",0,0,0,1,2,1,10,0,0,10,57,6,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,772,"            return iNameKey;
",2,0,0,0,0,1,0,0,0,2,16,5,1.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,776,"            return iSaveMillis;
",2,0,0,0,0,1,0,0,0,2,19,5,1.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,86,"        return cMillisProvider.getMillis();
",0,0,0,1,2,1,4,0,0,4,35,5,1.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,283,"            return ISOChronology.getInstance();
",0,0,0,1,2,1,4,0,0,4,35,7,1.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,316,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,1.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,317,"            return PeriodType.standard();
",0,0,0,1,2,1,4,0,0,4,29,7,1.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,319,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,1.00000,0
defect4j,time,org/joda/time/PeriodType,11,595,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,1.00000,0
defect4j,time,org/joda/time/PeriodType,11,596,"        iName = name;
",4,0,0,0,0,0,0,0,0,5,13,4,1.00000,0
defect4j,time,org/joda/time/PeriodType,11,597,"        iTypes = types;
",4,0,0,0,0,0,0,0,0,5,15,4,1.00000,0
defect4j,time,org/joda/time/PeriodType,11,598,"        iIndices = indices;
",4,0,0,0,0,0,0,0,0,5,19,4,1.00000,0
defect4j,time,org/joda/time/PeriodType,11,599,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,time,org/joda/time/PeriodType,11,56,"    private static final Map<PeriodType, Object> cTypes = new HashMap<PeriodType, Object>(32);
",2,0,0,1,2,3,0,12,0,17,90,2,1.00000,0
defect4j,time,org/joda/time/PeriodType,11,58,"    static int YEAR_INDEX = 0;
",2,0,0,0,0,1,0,0,0,3,26,2,1.00000,0
defect4j,time,org/joda/time/PeriodType,11,59,"    static int MONTH_INDEX = 1;
",2,0,0,0,0,1,0,0,0,3,27,2,1.00000,0
defect4j,time,org/joda/time/PeriodType,11,60,"    static int WEEK_INDEX = 2;
",2,0,0,0,0,1,0,0,0,3,26,2,1.00000,0
defect4j,time,org/joda/time/PeriodType,11,61,"    static int DAY_INDEX = 3;
",2,0,0,0,0,1,0,0,0,3,25,2,1.00000,0
defect4j,time,org/joda/time/PeriodType,11,62,"    static int HOUR_INDEX = 4;
",2,0,0,0,0,1,0,0,0,3,26,2,1.00000,0
defect4j,time,org/joda/time/PeriodType,11,63,"    static int MINUTE_INDEX = 5;
",2,0,0,0,0,1,0,0,0,3,28,2,1.00000,0
defect4j,time,org/joda/time/PeriodType,11,64,"    static int SECOND_INDEX = 6;
",2,0,0,0,0,1,0,0,0,3,28,2,1.00000,0
defect4j,time,org/joda/time/PeriodType,11,65,"    static int MILLI_INDEX = 7;
",2,0,0,0,0,1,0,0,0,3,27,2,1.00000,0
defect4j,time,org/joda/time/PeriodType,11,102,"        PeriodType type = cStandard;
",4,0,0,0,0,0,0,2,0,6,28,4,1.00000,0
defect4j,time,org/joda/time/PeriodType,11,103,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,1.00000,0
defect4j,time,org/joda/time/PeriodType,11,104,"            type = new PeriodType(
",2,0,0,0,1,0,0,2,0,5,22,6,1.00000,0
defect4j,time,org/joda/time/PeriodType,11,114,"            cStandard = type;
",4,0,0,0,0,0,0,0,0,5,17,6,1.00000,0
defect4j,time,org/joda/time/PeriodType,11,116,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,1.00000,0
defect4j,time,org/joda/time/PeriodType,11,163,"        PeriodType type = cYMD;
",4,0,0,0,0,0,0,2,0,6,23,4,1.00000,0
defect4j,time,org/joda/time/PeriodType,11,164,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,1.00000,0
defect4j,time,org/joda/time/PeriodType,11,165,"            type = new PeriodType(
",2,0,0,0,1,0,0,2,0,5,22,6,1.00000,0
defect4j,time,org/joda/time/PeriodType,11,173,"            cYMD = type;
",4,0,0,0,0,0,0,0,0,5,12,6,1.00000,0
defect4j,time,org/joda/time/PeriodType,11,175,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,1.00000,0
defect4j,time,org/joda/time/PeriodType,11,617,"        return iTypes.length;
",4,0,0,0,0,1,0,0,0,4,21,5,1.00000,0
defect4j,time,org/joda/time/PeriodType,11,628,"        return iTypes[index];
",0,0,1,1,2,1,0,0,0,4,21,5,1.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,515,"            return System.currentTimeMillis();
",0,0,0,1,2,1,4,0,0,4,34,6,1.00000,0
defect4j,time,org/joda/time/DurationFieldType,11,282,"            chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,5,1.00000,0
defect4j,time,org/joda/time/DurationFieldType,11,284,"            switch (iOrdinal) {
",2,0,0,1,3,0,0,0,0,2,19,5,1.00000,0
defect4j,time,org/joda/time/DurationFieldType,11,292,"                    return chronology.years();
",0,0,0,1,2,1,4,0,0,4,26,7,1.00000,0
defect4j,time,org/joda/time/DurationFieldType,11,294,"                    return chronology.months();
",0,0,0,1,2,1,4,0,0,4,27,7,1.00000,0
defect4j,time,org/joda/time/DurationFieldType,11,298,"                    return chronology.days();
",0,0,0,1,2,1,4,0,0,4,25,7,1.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,57,"    private static final ReadablePeriod DUMMY_PERIOD = new AbstractPeriod() {
",2,0,0,1,3,3,0,4,0,9,73,2,1.00000,0
defect4j,time,org/joda/time/base/AbstractPeriod,11,45,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,1.00000,0
defect4j,time,org/joda/time/base/AbstractPeriod,11,46,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,time,org/joda/time/base/AbstractPeriod,11,56,"        return getPeriodType().size();
",0,0,0,2,4,1,4,0,0,4,30,5,1.00000,0
defect4j,time,org/joda/time/base/AbstractPeriod,11,68,"        return getPeriodType().getFieldType(index);
",0,0,0,2,4,1,6,0,0,6,43,5,1.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,106,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,1.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,107,"        type = checkPeriodType(type);
",2,0,0,1,2,0,4,0,0,7,29,4,1.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,108,"        chrono = DateTimeUtils.getChronology(chrono);
",2,0,0,1,2,0,6,0,0,9,45,4,1.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,109,"        iType = type;
",4,0,0,0,0,0,0,0,0,5,13,4,1.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,110,"        iValues = chrono.get(this, startInstant, endInstant);
",2,0,0,1,2,0,8,0,0,11,53,4,1.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,111,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,254,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,1.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,255,"        type = checkPeriodType(type);
",2,0,0,1,2,0,4,0,0,7,29,4,1.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,256,"        chrono = DateTimeUtils.getChronology(chrono);
",2,0,0,1,2,0,6,0,0,9,45,4,1.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,257,"        iType = type;
",4,0,0,0,0,0,0,0,0,5,13,4,1.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,258,"        iValues = chrono.get(this, duration);
",2,0,0,1,2,0,6,0,0,9,37,4,1.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,259,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,57,"    private static final ReadablePeriod DUMMY_PERIOD = new AbstractPeriod() {
",2,0,0,1,3,3,0,4,0,9,73,2,1.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,308,"        return DateTimeUtils.getPeriodType(type);
",0,0,0,1,2,1,6,0,0,6,41,5,1.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,318,"        return iType;
",2,0,0,0,0,1,0,0,0,2,13,4,1.00000,0
defect4j,time,org/joda/time/Period,11,298,"        super(0L, null, null);
",0,0,0,1,2,0,0,0,0,1,22,3,1.00000,0
defect4j,time,org/joda/time/Period,11,299,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,time,org/joda/time/Period,11,490,"        super(startInstant, endInstant, type, chrono);
",8,0,0,1,2,0,0,0,0,8,46,4,1.00000,0
defect4j,time,org/joda/time/Period,11,491,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,time,org/joda/time/Period,11,65,"    public static final Period ZERO = new Period();
",2,0,0,1,2,3,0,4,0,9,47,2,1.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,243,"        if (minuendInstant < subtrahendInstant) {
",4,1,0,1,3,0,0,0,0,5,41,4,1.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,247,"        int minuendYear = iChronology.getYear(minuendInstant);
",2,0,0,1,2,0,6,0,0,8,54,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,248,"        int minuendMonth = iChronology.getMonthOfYear(minuendInstant, minuendYear);
",2,0,0,1,2,0,8,0,0,10,75,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,249,"        int subtrahendYear = iChronology.getYear(subtrahendInstant);
",2,0,0,1,2,0,6,0,0,8,60,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,250,"        int subtrahendMonth = iChronology.getMonthOfYear(subtrahendInstant, subtrahendYear);
",2,0,0,1,2,0,8,0,0,10,84,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,252,"        long difference = (minuendYear - subtrahendYear) * ((long) iMax) + minuendMonth - subtrahendMonth;
",12,4,0,3,6,0,0,0,0,16,98,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,256,"        int minuendDom = iChronology.getDayOfMonth
",2,0,0,0,0,0,4,0,0,6,42,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,258,"        if (minuendDom == iChronology.getDaysInYearMonth(minuendYear, minuendMonth)) {
",2,1,0,2,5,0,8,0,0,11,78,4,1.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,271,"        long minuendRem = minuendInstant
",4,0,0,0,0,0,0,0,0,4,32,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,273,"        long subtrahendRem = subtrahendInstant
",4,0,0,0,0,0,0,0,0,4,38,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,276,"        if (minuendRem < subtrahendRem) {
",4,1,0,1,3,0,0,0,0,5,33,4,1.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,280,"        return difference;
",2,0,0,0,0,1,0,0,0,2,18,4,1.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,11,91,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));
",0,0,0,2,4,1,10,0,0,10,84,5,1.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,253,"        return getDurationField().add(instant, value);
",0,0,0,2,4,1,8,0,0,8,46,5,1.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,11,190,"            return ImpreciseDateTimeField.this
",2,0,0,0,0,1,0,0,0,2,34,7,1.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,11,141,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));
",0,0,0,2,4,1,10,0,0,10,84,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,371,"        long millis = getYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,34,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,372,"        millis += getTotalMillisByYearMonth(year, month);
",2,0,0,1,2,0,6,0,0,9,49,4,1.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,373,"        return millis;
",2,0,0,0,0,1,0,0,0,2,14,4,1.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,402,"            i2 = i2 - unitMillis + 1;
",6,2,0,0,0,0,0,0,0,9,25,6,1.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,410,"            year--;
",2,0,0,0,0,0,0,0,0,3,7,6,1.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,485,"        long yearStart = getYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,37,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,486,"        return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;
",8,3,0,3,6,1,0,0,0,11,76,4,1.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,537,"            daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1))
",8,2,0,2,4,0,0,0,0,11,70,6,1.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,539,"            if (daysSince19700101 < -3) {
",2,1,0,1,3,0,0,0,0,4,29,6,1.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,540,"                return 7 + (int) ((daysSince19700101 + 4) % 7);
",2,3,0,3,6,1,0,0,0,5,47,8,1.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,554,"            return (DateTimeConstants.MILLIS_PER_DAY - 1)
",4,1,0,1,2,1,0,0,0,5,45,8,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,134,"        return ((value > 28 || value < 1) ? getDaysInMonthMax(instant) : 28);
",4,3,0,3,6,1,4,0,0,11,69,6,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,148,"        int minuendYear = getYear(minuendInstant);
",2,0,0,1,2,0,4,0,0,6,42,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,149,"        int subtrahendYear = getYear(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,48,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,152,"        long minuendRem = minuendInstant - getYearMillis(minuendYear);
",4,1,0,1,2,0,4,0,0,9,62,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,153,"        long subtrahendRem = subtrahendInstant - getYearMillis(subtrahendYear);
",4,1,0,1,2,0,4,0,0,9,71,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,156,"        if (subtrahendRem >= FEB_29) {
",4,1,0,1,3,0,0,0,0,5,30,4,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,157,"            if (isLeapYear(subtrahendYear)) {
",0,0,0,2,5,0,4,0,0,4,33,7,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,161,"            } else if (minuendRem >= FEB_29 && isLeapYear(minuendYear)) {
",4,2,0,2,6,0,4,0,0,10,61,7,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,166,"        int difference = minuendYear - subtrahendYear;
",6,1,0,0,0,0,0,0,0,7,46,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,167,"        if (minuendRem < subtrahendRem) {
",4,1,0,1,3,0,0,0,0,5,33,4,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,168,"            difference--;
",2,0,0,0,0,0,0,0,0,3,13,6,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,170,"        return difference;
",2,0,0,0,0,1,0,0,0,2,18,4,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,175,"        int thisYear = getYear(instant);
",2,0,0,1,2,0,4,0,0,6,32,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,176,"        int dayOfYear = getDayOfYear(instant, thisYear);
",2,0,0,1,2,0,6,0,0,8,48,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,177,"        int millisOfDay = getMillisOfDay(instant);
",2,0,0,1,2,0,4,0,0,6,42,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,179,"        if (dayOfYear > (31 + 28)) { // after Feb 28
",2,2,0,2,5,0,0,0,0,4,44,4,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,180,"            if (isLeapYear(thisYear)) {
",0,0,0,2,5,0,4,0,0,4,27,7,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,182,"                if (!isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,5,24,8,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,184,"                    dayOfYear--;
",2,0,0,0,0,0,0,0,0,3,12,10,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,188,"                if (isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,4,23,9,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,190,"                    dayOfYear++;
",2,0,0,0,0,0,0,0,0,3,12,10,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,195,"        instant = getYearMonthDayMillis(year, 1, dayOfYear);
",2,0,0,1,2,0,6,0,0,9,52,4,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,196,"        instant += millisOfDay;
",4,0,0,0,0,0,0,0,0,5,23,4,1.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,198,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,1.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,54,"        return iChronology.getYear(instant);
",0,0,0,1,2,1,6,0,0,6,36,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,58,"        if (years == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,1.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,59,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,1.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,61,"        int thisYear = get(instant);
",2,0,0,1,2,0,4,0,0,6,28,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,62,"        int newYear = FieldUtils.safeAdd(thisYear, years);
",2,0,0,1,2,0,8,0,0,10,50,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,63,"        return set(instant, newYear);
",0,0,0,1,2,1,6,0,0,6,29,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,82,"        FieldUtils.verifyValueBounds
",0,0,0,0,0,0,4,0,0,4,28,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,84,"        return iChronology.setYear(instant, year);
",0,0,0,1,2,1,8,0,0,8,42,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,88,"        if (minuendInstant < subtrahendInstant) {
",4,1,0,1,3,0,0,0,0,5,41,4,1.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,91,"        return iChronology.getYearDifference(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,72,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,11,55,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,1.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,11,96,"        return iChronology.getDaysInMonthMaxForSet(instant, value);
",0,0,0,1,2,1,8,0,0,8,59,5,1.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,11,79,"        if (instant >= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,1.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,11,82,"            return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);
",6,5,0,5,10,1,2,0,0,13,71,6,1.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,11,111,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());
",0,0,0,3,6,0,10,0,0,10,80,5,1.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,11,112,"        return instant + (value - get(instant)) * iUnitMillis;
",6,3,0,2,4,1,4,0,0,13,54,4,1.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,11,131,"        return iRange - 1;
",2,1,0,0,0,1,0,0,0,3,18,4,1.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,209,"            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;
",8,7,0,4,8,0,0,0,0,16,71,6,1.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,11,114,"        long difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);
",2,0,0,1,2,0,8,0,0,10,77,5,1.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,11,115,"        return difference / iUnitMillis;
",4,1,0,0,0,1,0,0,0,5,32,4,1.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,100,"        long diff = val1 - val2;
",6,1,0,0,0,0,0,0,0,7,24,5,1.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,102,"        if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {
",8,5,0,3,7,0,0,0,0,13,45,4,1.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,106,"        return diff;
",2,0,0,0,0,1,0,0,0,2,12,4,1.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,187,"        if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {
",12,3,0,1,3,0,0,0,0,15,63,4,1.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,188,"            return (int) value;
",2,0,0,1,2,1,0,0,0,2,19,7,1.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,11,117,"        return FieldUtils.safeAdd(instant, value);
",0,0,0,1,2,1,8,0,0,8,42,5,1.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,92,"        if (months == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.50000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,98,"        long timePart = iChronology.getMillisOfDay(instant);
",2,0,0,1,2,0,6,0,0,8,52,5,0.50000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,103,"        int thisYear = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,44,5,0.50000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,104,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);
",2,0,0,1,2,0,8,0,0,10,62,5,0.50000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,112,"        int monthToUse = thisMonth - 1 + months;
",6,2,0,0,0,0,0,0,0,8,40,5,0.50000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,113,"        if (monthToUse >= 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.50000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,114,"            yearToUse = thisYear + (monthToUse / iMax);
",8,2,0,1,2,0,0,0,0,11,43,6,0.50000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,115,"            monthToUse = (monthToUse % iMax) + 1;
",6,2,0,1,2,0,0,0,0,9,37,6,0.50000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,136,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);
",2,0,0,1,2,0,10,0,0,12,71,5,0.50000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,137,"        int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);
",2,0,0,1,2,0,8,0,0,10,67,5,0.50000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,138,"        if (dayToUse > maxDay) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.50000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,144,"        long datePart =
",2,0,0,0,0,0,0,0,0,2,15,5,0.50000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,146,"        return datePart + timePart;
",4,1,0,0,0,1,0,0,0,5,27,4,0.50000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,11,182,"            return ImpreciseDateTimeField.this.add(instant, value);
",2,0,0,1,2,1,6,0,0,8,55,6,0.50000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,121,"            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];
",2,1,1,1,2,1,0,0,0,5,43,7,0.50000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,140,"            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];
",2,1,1,1,2,1,0,0,0,5,50,7,0.50000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,213,"                leapYears--;
",2,0,0,0,0,0,0,0,0,3,12,8,0.50000,0
defect4j,time,org/joda/time/field/PreciseDurationField,11,104,"        long addition = value * iUnitMillis;  // safe
",6,1,0,0,0,0,0,0,0,7,45,5,0.50000,0
defect4j,time,org/joda/time/field/PreciseDurationField,11,105,"        return FieldUtils.safeAdd(instant, addition);
",0,0,0,1,2,1,8,0,0,8,45,5,0.50000,0
defect4j,time,org/joda/time/field/FieldUtils,11,82,"        long sum = val1 + val2;
",6,1,0,0,0,0,0,0,0,7,23,5,0.50000,0
defect4j,time,org/joda/time/field/FieldUtils,11,84,"        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {
",8,5,0,3,7,0,0,0,0,13,45,4,0.50000,0
defect4j,time,org/joda/time/field/FieldUtils,11,88,"        return sum;
",2,0,0,0,0,1,0,0,0,2,11,4,0.50000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,68,"    static ThreadLocal<Boolean> cVerbose = new ThreadLocal<Boolean>();
",2,0,0,1,2,1,0,8,0,11,66,2,0.33333,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,70,"        cVerbose.set(Boolean.FALSE);
",4,0,0,1,2,0,4,0,0,8,28,5,0.33333,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,71,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.33333,1
defect4j,time,org/joda/time/chrono/ISOChronology,11,77,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.33333,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,298,"        FieldUtils.verifyValueBounds(this, month, MIN, iMax);
",0,0,0,1,2,0,10,0,0,10,53,5,0.33333,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,300,"        int thisYear = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,44,5,0.33333,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,302,"        int thisDom = iChronology.getDayOfMonth(instant, thisYear);
",2,0,0,1,2,0,8,0,0,10,59,5,0.33333,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,303,"        int maxDom = iChronology.getDaysInYearMonth(thisYear, month);
",2,0,0,1,2,0,8,0,0,10,61,5,0.33333,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,304,"        if (thisDom > maxDom) {
",4,1,0,1,3,0,0,0,0,5,23,4,0.33333,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,309,"        return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +
",0,1,0,1,2,1,10,0,0,11,68,4,0.33333,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,399,"        long unitMillis = getAverageMillisPerYearDividedByTwo();
",2,0,0,1,2,0,2,0,0,4,56,5,0.33333,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,400,"        long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();
",4,2,0,2,4,0,2,0,0,8,64,5,0.33333,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,401,"        if (i2 < 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.33333,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,404,"        int year = (int) (i2 / unitMillis);
",6,1,0,2,4,0,0,0,0,7,35,5,0.33333,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,406,"        long yearStart = getYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,37,5,0.33333,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,407,"        long diff = instant - yearStart;
",6,1,0,0,0,0,0,0,0,7,32,5,0.33333,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,409,"        if (diff < 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.33333,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,411,"        } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {
",6,2,0,1,4,0,0,0,0,8,61,5,0.33333,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,428,"        return year;
",2,0,0,0,0,1,0,0,0,2,12,4,0.33333,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,448,"        int year = getYear(millis);
",2,0,0,1,2,0,4,0,0,6,27,5,0.33333,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,449,"        int month = getMonthOfYear(millis, year);
",2,0,0,1,2,0,6,0,0,8,41,5,0.33333,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,450,"        return getDayOfMonth(millis, year, month);
",0,0,0,1,2,1,8,0,0,8,42,5,0.33333,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,458,"        int month = getMonthOfYear(millis, year);
",2,0,0,1,2,0,6,0,0,8,41,5,0.33333,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,459,"        return getDayOfMonth(millis, year, month);
",0,0,0,1,2,1,8,0,0,8,42,5,0.33333,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,468,"        long dateMillis = getYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,38,5,0.33333,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,469,"        dateMillis += getTotalMillisByYearMonth(year, month);
",2,0,0,1,2,0,6,0,0,9,53,4,0.33333,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,470,"        return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;
",8,3,0,3,6,1,0,0,0,11,76,4,0.33333,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,534,"        if (instant >= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.33333,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,551,"        if (instant >= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.33333,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,552,"            return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);
",6,1,0,2,4,1,0,0,0,7,58,8,0.33333,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,88,"        int i = (int)((millis - getYearMillis(year)) >> 10);
",4,2,0,4,8,0,4,0,0,10,52,5,0.33333,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,93,"        return
",0,0,0,0,0,1,0,0,0,0,6,3,0.33333,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,11,47,"        return iChronology.getDayOfMonth(instant);
",0,0,0,1,2,1,6,0,0,6,42,5,0.33333,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,11,78,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(),
",0,0,0,1,3,0,8,0,0,8,60,5,0.33333,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,11,80,"        return instant + (value - get(instant)) * iUnitMillis;
",6,3,0,2,4,1,4,0,0,13,54,4,0.33333,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,11,56,"        return iChronology.getDayOfWeek(instant);
",0,0,0,1,2,1,6,0,0,6,41,5,0.33333,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,233,"        return MILLIS_PER_YEAR / 2;
",2,1,0,0,0,1,0,0,0,3,27,4,0.33333,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,241,"        return (1970L * MILLIS_PER_YEAR) / 2;
",2,2,0,1,2,1,0,0,0,4,37,4,0.33333,0
defect4j,time,org/joda/time/field/FieldUtils,11,217,"        if ((value < lowerBound) || (value > upperBound)) {
",8,3,0,3,7,0,0,0,0,11,51,4,0.33333,0
defect4j,time,org/joda/time/field/FieldUtils,11,222,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.33333,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,96,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.20000,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,99,"        int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);
",4,2,0,2,4,0,6,0,0,12,66,5,0.20000,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,100,"        ISOChronology chrono = cFastCache[index];
",2,0,1,1,2,0,0,2,0,8,41,4,0.20000,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,101,"        if (chrono != null && chrono.getZone() == zone) {
",4,3,0,2,5,0,4,0,0,11,49,4,0.20000,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,104,"        synchronized (cCache) {
",2,0,0,1,3,0,0,0,0,2,23,4,0.20000,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,105,"            chrono = cCache.get(zone);
",2,0,0,1,2,0,6,0,0,9,26,6,0.20000,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,106,"            if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.20000,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,110,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,111,"        cFastCache[index] = chrono;
",2,0,1,1,2,0,0,0,0,7,27,4,0.20000,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,112,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.20000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,11,141,"        return iUnitField;
",2,0,0,0,0,1,0,0,0,2,18,4,0.20000,0
defect4j,time,org/joda/time/field/FieldUtils,11,64,"        int sum = val1 + val2;
",6,1,0,0,0,0,0,0,0,7,22,5,0.20000,0
defect4j,time,org/joda/time/field/FieldUtils,11,66,"        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {
",8,5,0,3,7,0,0,0,0,13,45,4,0.20000,0
defect4j,time,org/joda/time/field/FieldUtils,11,70,"        return sum;
",2,0,0,0,0,1,0,0,0,2,11,4,0.20000,0
defect4j,time,org/joda/time/DateTimeZone,11,147,"                        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.16667,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,123,"            return MIN_DAYS_PER_MONTH_ARRAY[month - 1];
",2,1,1,1,2,1,0,0,0,5,43,7,0.16667,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,142,"            return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];
",2,1,1,1,2,1,0,0,0,5,50,7,0.16667,0
defect4j,time,org/joda/time/DurationField,11,30,"public abstract class DurationField implements Comparable<DurationField> {
",2,0,0,0,1,2,0,4,0,8,74,1,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,153,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,154,"        iName = name;
",4,0,0,0,0,0,0,0,0,5,13,4,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,155,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,73,"    private static final DateTimeFieldType ERA_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,80,2,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,76,"    private static final DateTimeFieldType YEAR_OF_ERA_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,88,2,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,79,"    private static final DateTimeFieldType CENTURY_OF_ERA_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,91,2,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,82,"    private static final DateTimeFieldType YEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,92,2,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,85,"    private static final DateTimeFieldType YEAR_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,81,2,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,88,"    private static final DateTimeFieldType DAY_OF_YEAR_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,88,2,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,91,"    private static final DateTimeFieldType MONTH_OF_YEAR_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,90,2,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,94,"    private static final DateTimeFieldType DAY_OF_MONTH_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,89,2,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,97,"    private static final DateTimeFieldType WEEKYEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,96,2,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,100,"    private static final DateTimeFieldType WEEKYEAR_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,85,2,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,103,"    private static final DateTimeFieldType WEEK_OF_WEEKYEAR_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,93,2,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,106,"    private static final DateTimeFieldType DAY_OF_WEEK_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,88,2,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,110,"    private static final DateTimeFieldType HALFDAY_OF_DAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,91,2,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,113,"    private static final DateTimeFieldType HOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,92,2,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,116,"    private static final DateTimeFieldType CLOCKHOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,97,2,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,119,"    private static final DateTimeFieldType CLOCKHOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,93,2,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,122,"    private static final DateTimeFieldType HOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,88,2,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,125,"    private static final DateTimeFieldType MINUTE_OF_DAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,90,2,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,128,"    private static final DateTimeFieldType MINUTE_OF_HOUR_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,91,2,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,131,"    private static final DateTimeFieldType SECOND_OF_DAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,90,2,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,134,"    private static final DateTimeFieldType SECOND_OF_MINUTE_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,93,2,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,137,"    private static final DateTimeFieldType MILLIS_OF_DAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,90,2,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,140,"    private static final DateTimeFieldType MILLIS_OF_SECOND_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,93,2,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,164,"        return MILLIS_OF_SECOND_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,4,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,173,"        return MILLIS_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,4,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,182,"        return SECOND_OF_MINUTE_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,4,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,191,"        return SECOND_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,4,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,200,"        return MINUTE_OF_HOUR_TYPE;
",2,0,0,0,0,1,0,0,0,2,27,4,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,209,"        return MINUTE_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,4,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,218,"        return HOUR_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,4,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,227,"        return CLOCKHOUR_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,4,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,236,"        return HOUR_OF_HALFDAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,28,4,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,245,"        return CLOCKHOUR_OF_HALFDAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,33,4,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,254,"        return HALFDAY_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,27,4,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,264,"        return DAY_OF_WEEK_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,4,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,273,"        return DAY_OF_MONTH_TYPE;
",2,0,0,0,0,1,0,0,0,2,25,4,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,282,"        return DAY_OF_YEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,4,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,291,"        return WEEK_OF_WEEKYEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,4,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,300,"        return WEEKYEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,21,4,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,309,"        return WEEKYEAR_OF_CENTURY_TYPE;
",2,0,0,0,0,1,0,0,0,2,32,4,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,318,"        return MONTH_OF_YEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,4,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,327,"        return YEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,17,4,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,336,"        return YEAR_OF_ERA_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,4,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,345,"        return YEAR_OF_CENTURY_TYPE;
",2,0,0,0,0,1,0,0,0,2,28,4,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,354,"        return CENTURY_OF_ERA_TYPE;
",2,0,0,0,0,1,0,0,0,2,27,4,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,363,"        return ERA_TYPE;
",2,0,0,0,0,1,0,0,0,2,16,4,0.14286,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,54,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.14286,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,55,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,660,"        return UnsupportedDurationField.getInstance(DurationFieldType.eras());
",0,0,0,2,4,1,8,0,0,8,70,5,0.14286,0
defect4j,time,org/joda/time/Chronology,11,63,"public abstract class Chronology {
",2,0,0,0,1,2,0,0,0,4,34,1,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,689,"    protected DateTimeZone(String id) {
",4,0,0,1,3,1,0,2,0,7,35,2,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,690,"        if (id == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,693,"        iID = id;
",4,0,0,0,0,0,0,0,0,5,9,4,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,694,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,95,"    public static final DateTimeZone UTC = new FixedDateTimeZone(""UTC"", ""UTC"", 0, 0);
",2,0,0,1,2,3,0,4,0,11,81,2,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,115,"        setProvider0(null);
",0,0,0,1,2,0,2,0,0,3,19,4,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,116,"        setNameProvider0(null);
",0,0,0,1,2,0,2,0,0,3,23,4,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,117,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,133,"        DateTimeZone zone = cDefault;
",4,0,0,0,0,0,0,2,0,6,29,4,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,134,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,135,"            synchronized(DateTimeZone.class) {
",0,0,0,1,3,0,0,2,0,2,34,8,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,136,"                zone = cDefault;
",4,0,0,0,0,0,0,0,0,5,16,8,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,137,"                if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,8,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,138,"                    DateTimeZone temp = null;
",2,0,0,0,0,0,0,2,0,4,25,10,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,141,"                            String id = System.getProperty(""user.timezone"");
",2,0,0,1,2,0,4,2,0,9,48,14,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,142,"                            if (id != null) {  // null check avoids stack overflow
",2,1,0,1,3,0,0,0,0,3,54,14,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,143,"                                temp = forID(id);
",2,0,0,1,2,0,4,0,0,7,17,16,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,148,"                        if (temp == null) {
",2,1,0,1,3,0,0,0,0,3,19,12,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,153,"                    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,154,"                    if (temp == null) {
",2,1,0,1,3,0,0,0,0,3,19,10,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,157,"                    cDefault = zone = temp;
",6,0,0,0,0,0,0,0,0,8,23,10,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,159,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,161,"        return zone;
",2,0,0,0,0,1,0,0,0,2,12,4,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,174,"        SecurityManager sm = System.getSecurityManager();
",2,0,0,1,2,0,4,2,0,8,49,4,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,175,"        if (sm != null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,178,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,181,"        synchronized(DateTimeZone.class) {
",0,0,0,1,3,0,0,2,0,2,34,6,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,182,"            cDefault = zone;
",4,0,0,0,0,0,0,0,0,5,16,6,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,183,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,184,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,204,"        if (id == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,207,"        if (id.equals(""UTC"")) {
",0,0,0,2,5,0,4,0,0,5,23,5,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,210,"        DateTimeZone zone = cProvider.getZone(id);
",2,0,0,1,2,0,6,2,0,10,42,4,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,211,"        if (zone != null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,212,"            return zone;
",2,0,0,0,0,1,0,0,0,2,12,6,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,415,"        if (provider == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,416,"            provider = getDefaultProvider();
",2,0,0,1,2,0,2,0,0,5,32,6,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,418,"        Set<String> ids = provider.getAvailableIDs();
",2,0,0,1,2,0,4,4,0,10,45,4,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,419,"        if (ids == null || ids.size() == 0) {
",2,3,0,2,5,0,4,0,0,9,37,4,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,423,"        if (!ids.contains(""UTC"")) {
",0,0,0,2,5,0,4,0,0,6,27,4,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,426,"        if (!UTC.equals(provider.getZone(""UTC""))) {
",0,0,0,3,7,0,8,0,0,10,43,4,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,429,"        cProvider = provider;
",4,0,0,0,0,0,0,0,0,5,21,4,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,430,"        cAvailableIDs = ids;
",4,0,0,0,0,0,0,0,0,5,20,4,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,431,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,443,"        Provider provider = null;
",2,0,0,0,0,0,0,2,0,4,25,4,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,446,"            String providerClass =
",2,0,0,0,0,0,0,2,0,4,22,6,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,448,"            if (providerClass != null) {
",2,1,0,1,3,0,0,0,0,3,28,6,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,458,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,460,"        if (provider == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,462,"                provider = new ZoneInfoProvider(""org/joda/time/tz/data"");
",2,0,0,1,2,0,0,2,0,6,57,8,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,466,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,469,"        if (provider == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,473,"        return provider;
",2,0,0,0,0,1,0,0,0,2,16,4,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,514,"        if (nameProvider == null) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,515,"            nameProvider = getDefaultNameProvider();
",2,0,0,1,2,0,2,0,0,5,40,6,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,517,"        cNameProvider = nameProvider;
",4,0,0,0,0,0,0,0,0,5,29,4,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,518,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,529,"        NameProvider nameProvider = null;
",2,0,0,0,0,0,0,2,0,4,33,4,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,531,"            String providerClass = System.getProperty(""org.joda.time.DateTimeZone.NameProvider"");
",2,0,0,1,2,0,4,2,0,9,85,6,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,532,"            if (providerClass != null) {
",2,1,0,1,3,0,0,0,0,3,28,6,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,542,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,544,"        if (nameProvider == null) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,545,"            nameProvider = new DefaultNameProvider();
",2,0,0,1,2,0,0,2,0,5,41,6,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,548,"        return nameProvider;
",2,0,0,0,0,1,0,0,0,2,20,4,0.14286,0
defect4j,time,org/joda/time/DateTimeZone,11,706,"        return iID;
",2,0,0,0,0,1,0,0,0,2,11,4,0.14286,0
defect4j,time,org/joda/time/DateTimeField,11,33,"public abstract class DateTimeField {
",2,0,0,0,1,2,0,0,0,4,37,1,0.14286,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,11,70,"    private UnsupportedDurationField(DurationFieldType type) {
",4,0,0,1,3,1,0,2,0,7,58,2,0.14286,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,11,71,"        iType = type;
",4,0,0,0,0,0,0,0,0,5,13,4,0.14286,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,11,72,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,11,49,"        if (cCache == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.14286,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,11,50,"            cCache = new HashMap<DurationFieldType, UnsupportedDurationField>(7);
",2,0,0,1,2,0,0,6,0,9,69,6,0.14286,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,11,51,"            field = null;
",2,0,0,0,0,0,0,0,0,3,13,6,0.14286,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,11,53,"            field = cCache.get(type);
",2,0,0,1,2,0,6,0,0,9,25,6,0.14286,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,11,55,"        if (field == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.14286,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,11,56,"            field = new UnsupportedDurationField(type);
",4,0,0,1,2,0,0,2,0,7,43,6,0.14286,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,11,57,"            cCache.put(type, field);
",0,0,0,1,2,0,8,0,0,8,24,7,0.14286,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,11,59,"        return field;
",2,0,0,0,0,1,0,0,0,2,13,4,0.14286,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,11,92,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,95,"        if (in instanceof DataInput) {
",2,0,0,1,3,0,0,2,0,4,30,5,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,98,"            return readFrom((DataInput)new DataInputStream(in), id);
",2,0,0,3,6,1,4,4,0,10,56,7,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,110,"        switch (in.readUnsignedByte()) {
",0,0,0,2,5,0,4,0,0,4,32,5,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,119,"            return CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in, id));
",0,0,0,2,4,1,12,0,0,12,70,6,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,183,"        int v = in.readUnsignedByte();
",2,0,0,1,2,0,4,0,0,6,30,5,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,184,"        switch (v >> 6) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,187,"            v = (v << (32 - 6)) >> (32 - 6);
",4,4,0,3,6,0,0,0,0,9,32,5,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,188,"            return v * (30 * 60000L);
",2,2,0,1,2,1,0,0,0,4,25,5,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,192,"            v = (v << (32 - 6)) >> (32 - 30);
",4,4,0,3,6,0,0,0,0,9,33,5,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,193,"            v |= (in.readUnsignedByte()) << 16;
",2,1,0,2,4,0,4,0,0,8,35,5,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,194,"            v |= (in.readUnsignedByte()) << 8;
",2,1,0,2,4,0,4,0,0,8,34,5,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,195,"            v |= (in.readUnsignedByte());
",2,0,0,2,4,0,4,0,0,7,29,5,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,196,"            return v * 60000L;
",2,1,0,0,0,1,0,0,0,3,18,5,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,200,"            long w = (((long)v) << (64 - 6)) >> (64 - 38);
",4,4,0,5,10,0,0,0,0,8,46,6,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,201,"            w |= (in.readUnsignedByte()) << 24;
",2,1,0,2,4,0,4,0,0,8,35,5,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,202,"            w |= (in.readUnsignedByte()) << 16;
",2,1,0,2,4,0,4,0,0,8,35,5,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,203,"            w |= (in.readUnsignedByte()) << 8;
",2,1,0,2,4,0,4,0,0,8,34,5,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,204,"            w |= (in.readUnsignedByte());
",2,0,0,2,4,0,4,0,0,7,29,5,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,205,"            return w * 1000L;
",2,1,0,0,0,1,0,0,0,3,17,5,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,209,"            return in.readLong();
",0,0,0,1,2,1,4,0,0,4,21,6,0.14286,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,87,"        super(zone.getID());
",0,0,0,2,4,0,4,0,0,4,20,5,0.14286,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,84,"    private final Info[] iInfoCache = new Info[cInfoCacheMask + 1];
",4,1,0,2,4,2,0,4,0,11,63,2,0.14286,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,88,"        iZone = zone;
",4,0,0,0,0,0,0,0,0,5,13,4,0.14286,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,89,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,39,"            i = Integer.getInteger(""org.joda.time.tz.CachedDateTimeZone.size"");
",2,0,0,1,2,0,4,0,0,8,67,6,0.14286,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,42,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,45,"        if (i == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.14286,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,48,"            cacheSize = 512; // (1 << 9)
",2,0,0,1,2,0,0,0,0,3,28,6,0.14286,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,61,"        cInfoCacheMask = cacheSize - 1;
",4,1,0,0,0,0,0,0,0,6,31,4,0.14286,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,62,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,68,"        if (zone instanceof CachedDateTimeZone) {
",2,0,0,1,3,0,0,2,0,4,41,5,0.14286,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,71,"        return new CachedDateTimeZone(zone);
",2,0,0,1,2,1,0,2,0,4,36,5,0.14286,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,11,38,"        super(id);
",2,0,0,1,2,0,0,0,0,2,10,4,0.14286,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,11,39,"        iNameKey = nameKey;
",4,0,0,0,0,0,0,0,0,5,19,4,0.14286,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,11,40,"        iWallOffset = wallOffset;
",4,0,0,0,0,0,0,0,0,5,25,4,0.14286,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,11,41,"        iStandardOffset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,33,4,0.14286,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,11,42,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,11,88,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.14286,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,11,89,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.14286,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,11,102,"        return getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;
",4,4,0,2,4,1,4,0,0,12,68,4,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,82,"        this(resourcePath, null, false);
",2,0,0,1,2,0,0,0,0,3,32,4,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,83,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,106,"    {
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,107,"        if (resourcePath == null) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,110,"        if (!resourcePath.endsWith(""/"")) {
",0,0,0,2,5,0,4,0,0,6,34,4,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,111,"            resourcePath += '/';
",2,0,0,0,0,0,0,0,0,4,20,6,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,114,"        iFileDir = null;
",2,0,0,0,0,0,0,0,0,3,16,4,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,115,"        iResourcePath = resourcePath;
",4,0,0,0,0,0,0,0,0,5,29,4,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,117,"        if (loader == null && !favorSystemLoader) {
",4,2,0,1,3,0,0,0,0,7,43,4,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,118,"            loader = getClass().getClassLoader();
",2,0,0,2,4,0,4,0,0,7,37,6,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,121,"        iLoader = loader;
",4,0,0,0,0,0,0,0,0,5,17,4,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,123,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));
",2,0,0,2,4,0,4,0,0,8,60,4,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,124,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,136,"        if (id == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,140,"        Object obj = iZoneInfoMap.get(id);
",2,0,0,1,2,0,6,2,0,10,34,4,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,141,"        if (obj == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,145,"        if (id.equals(obj)) {
",0,0,0,2,5,0,6,0,0,6,21,5,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,147,"            return loadZoneData(id);
",0,0,0,1,2,1,4,0,0,4,24,7,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,150,"        if (obj instanceof SoftReference<?>) {
",2,0,0,1,3,0,0,2,0,4,38,5,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,152,"            SoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;
",4,0,0,1,2,0,0,8,0,12,68,6,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,153,"            DateTimeZone tz = ref.get();
",2,0,0,1,2,0,4,2,0,8,28,6,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,154,"            if (tz != null) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,155,"                return tz;
",2,0,0,0,0,1,0,0,0,2,10,8,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,174,"        return new TreeSet<String>(iZoneInfoMap.keySet());
",0,0,0,2,4,1,4,4,0,8,50,5,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,196,"        if (iFileDir != null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,199,"            String path = iResourcePath.concat(name);
",2,0,0,1,2,0,6,2,0,10,41,6,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,200,"            if (iLoader != null) {
",2,1,0,1,3,0,0,0,0,3,22,6,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,201,"                in = iLoader.getResourceAsStream(path);
",2,0,0,1,2,0,6,0,0,9,39,8,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,205,"            if (in == null) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,214,"        return in;
",2,0,0,0,0,1,0,0,0,2,10,4,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,224,"        InputStream in = null;
",2,0,0,0,0,0,0,2,0,4,22,4,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,226,"            in = openResource(id);
",2,0,0,1,2,0,4,0,0,7,22,6,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,227,"            DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);
",2,0,0,1,2,0,8,2,0,12,55,6,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,228,"            iZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));
",2,0,0,2,4,0,6,4,0,12,58,7,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,229,"            return tz;
",2,0,0,0,0,1,0,0,0,2,10,6,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,236,"                if (in != null) {
",2,1,0,1,3,0,0,0,0,3,17,8,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,237,"                    in.close();
",0,0,0,1,2,0,4,0,0,4,11,11,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,240,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,252,"        Map<String, Object> map = new ConcurrentHashMap<String, Object>();
",2,0,0,1,2,0,0,12,0,14,66,4,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,253,"        DataInputStream din = new DataInputStream(in);
",4,0,0,1,2,0,0,4,0,8,46,4,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,255,"            readZoneInfoMap(din, map);
",0,0,0,1,2,0,6,0,0,6,26,7,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,258,"                din.close();
",0,0,0,1,2,0,4,0,0,4,12,9,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,260,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,262,"        map.put(""UTC"", new SoftReference<DateTimeZone>(DateTimeZone.UTC));
",4,0,0,2,4,0,4,4,0,13,66,5,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,263,"        return map;
",2,0,0,0,0,1,0,0,0,2,11,4,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,274,"        int size = din.readUnsignedShort();
",2,0,0,1,2,0,4,0,0,6,35,5,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,275,"        String[] pool = new String[size];
",2,0,1,2,4,0,0,4,0,8,33,4,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,276,"        for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,4,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,277,"            pool[i] = din.readUTF().intern();
",0,0,1,3,6,0,6,0,0,11,33,6,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,281,"        size = din.readUnsignedShort();
",2,0,0,1,2,0,4,0,0,7,31,4,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,282,"        for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,4,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,284,"                zimap.put(pool[din.readUnsignedShort()], pool[din.readUnsignedShort()]);
",0,0,1,5,10,0,12,0,0,16,72,9,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,287,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,289,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,122,"        super(base, null);
",2,0,0,1,2,0,0,0,0,3,18,3,0.14286,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,123,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,63,"    private static final Map<DateTimeZone, ISOChronology> cCache = new HashMap<DateTimeZone, ISOChronology>();
",2,0,0,1,2,3,0,12,0,17,106,2,0.14286,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,65,"        cFastCache = new ISOChronology[FAST_CACHE_SIZE];
",2,0,1,1,2,0,0,2,0,7,48,4,0.14286,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,66,"        INSTANCE_UTC = new ISOChronology(GregorianChronology.getInstanceUTC());
",2,0,0,2,4,0,4,2,0,9,71,4,0.14286,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,67,"        cCache.put(DateTimeZone.UTC, INSTANCE_UTC);
",4,0,0,1,2,0,6,0,0,10,43,5,0.14286,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,68,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,169,"        if (getBase().getZone() == DateTimeZone.UTC) {
",4,1,0,3,7,0,4,0,0,9,46,4,0.14286,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,171,"            fields.centuryOfEra = new DividedDateTimeField(
",4,0,0,0,1,0,0,2,0,7,47,6,0.14286,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,173,"            fields.yearOfCentury = new RemainderDateTimeField(
",4,0,0,0,1,0,0,2,0,7,50,6,0.14286,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,175,"            fields.weekyearOfCentury = new RemainderDateTimeField(
",4,0,0,0,1,0,0,2,0,7,54,6,0.14286,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,178,"            fields.centuries = fields.centuryOfEra.getDurationField();
",8,0,0,1,2,0,2,0,0,11,58,6,0.14286,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,180,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,99,"    protected AssembledChronology(Chronology base, Object param) {
",6,0,0,1,3,1,0,4,0,11,62,2,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,100,"        iBase = base;
",4,0,0,0,0,0,0,0,0,5,13,4,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,101,"        iParam = param;
",4,0,0,0,0,0,0,0,0,5,15,4,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,102,"        setFields();
",0,0,0,1,2,0,2,0,0,2,12,5,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,103,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,156,"        return iMillis;
",2,0,0,0,0,1,0,0,0,2,15,4,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,160,"        return iMillisOfSecond;
",2,0,0,0,0,1,0,0,0,2,23,4,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,164,"        return iMillisOfDay;
",2,0,0,0,0,1,0,0,0,2,20,4,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,168,"        return iSeconds;
",2,0,0,0,0,1,0,0,0,2,16,4,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,172,"        return iSecondOfMinute;
",2,0,0,0,0,1,0,0,0,2,23,4,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,176,"        return iSecondOfDay;
",2,0,0,0,0,1,0,0,0,2,20,4,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,180,"        return iMinutes;
",2,0,0,0,0,1,0,0,0,2,16,4,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,184,"        return iMinuteOfHour;
",2,0,0,0,0,1,0,0,0,2,21,4,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,188,"        return iMinuteOfDay;
",2,0,0,0,0,1,0,0,0,2,20,4,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,192,"        return iHours;
",2,0,0,0,0,1,0,0,0,2,14,4,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,196,"        return iHourOfDay;
",2,0,0,0,0,1,0,0,0,2,18,4,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,200,"        return iClockhourOfDay;
",2,0,0,0,0,1,0,0,0,2,23,4,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,204,"        return iHalfdays;
",2,0,0,0,0,1,0,0,0,2,17,4,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,208,"        return iHourOfHalfday;
",2,0,0,0,0,1,0,0,0,2,22,4,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,212,"        return iClockhourOfHalfday;
",2,0,0,0,0,1,0,0,0,2,27,4,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,216,"        return iHalfdayOfDay;
",2,0,0,0,0,1,0,0,0,2,21,4,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,220,"        return iDays;
",2,0,0,0,0,1,0,0,0,2,13,4,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,224,"        return iDayOfWeek;
",2,0,0,0,0,1,0,0,0,2,18,4,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,228,"        return iDayOfMonth;
",2,0,0,0,0,1,0,0,0,2,19,4,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,232,"        return iDayOfYear;
",2,0,0,0,0,1,0,0,0,2,18,4,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,236,"        return iWeeks;
",2,0,0,0,0,1,0,0,0,2,14,4,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,240,"        return iWeekOfWeekyear;
",2,0,0,0,0,1,0,0,0,2,23,4,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,244,"        return iWeekyears;
",2,0,0,0,0,1,0,0,0,2,18,4,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,248,"        return iWeekyear;
",2,0,0,0,0,1,0,0,0,2,17,4,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,252,"        return iWeekyearOfCentury;
",2,0,0,0,0,1,0,0,0,2,26,4,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,256,"        return iMonths;
",2,0,0,0,0,1,0,0,0,2,15,4,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,260,"        return iMonthOfYear;
",2,0,0,0,0,1,0,0,0,2,20,4,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,264,"        return iYears;
",2,0,0,0,0,1,0,0,0,2,14,4,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,268,"        return iYear;
",2,0,0,0,0,1,0,0,0,2,13,4,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,272,"        return iYearOfEra;
",2,0,0,0,0,1,0,0,0,2,18,4,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,276,"        return iYearOfCentury;
",2,0,0,0,0,1,0,0,0,2,22,4,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,280,"        return iCenturies;
",2,0,0,0,0,1,0,0,0,2,18,4,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,284,"        return iCenturyOfEra;
",2,0,0,0,0,1,0,0,0,2,21,4,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,288,"        return iEras;
",2,0,0,0,0,1,0,0,0,2,13,4,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,292,"        return iEra;
",2,0,0,0,0,1,0,0,0,2,12,4,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,308,"        return iBase;
",2,0,0,0,0,1,0,0,0,2,13,4,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,319,"        Fields fields = new Fields();
",2,0,0,1,2,0,0,4,0,6,29,4,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,320,"        if (iBase != null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,321,"            fields.copyFieldsFrom(iBase);
",0,0,0,1,2,0,6,0,0,6,29,7,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,323,"        assemble(fields);
",0,0,0,1,2,0,4,0,0,4,17,5,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,327,"            iMillis    = (f = fields.millis)    != null ? f : super.millis();
",12,1,0,2,4,0,0,0,0,15,65,5,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,328,"            iSeconds   = (f = fields.seconds)   != null ? f : super.seconds();
",12,1,0,2,4,0,0,0,0,15,66,5,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,329,"            iMinutes   = (f = fields.minutes)   != null ? f : super.minutes();
",12,1,0,2,4,0,0,0,0,15,66,5,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,330,"            iHours     = (f = fields.hours)     != null ? f : super.hours();
",12,1,0,2,4,0,0,0,0,15,64,5,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,331,"            iHalfdays  = (f = fields.halfdays)  != null ? f : super.halfdays();
",12,1,0,2,4,0,0,0,0,15,67,5,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,332,"            iDays      = (f = fields.days)      != null ? f : super.days();
",12,1,0,2,4,0,0,0,0,15,63,5,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,333,"            iWeeks     = (f = fields.weeks)     != null ? f : super.weeks();
",12,1,0,2,4,0,0,0,0,15,64,5,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,334,"            iWeekyears = (f = fields.weekyears) != null ? f : super.weekyears();
",12,1,0,2,4,0,0,0,0,15,68,5,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,335,"            iMonths    = (f = fields.months)    != null ? f : super.months();
",12,1,0,2,4,0,0,0,0,15,65,5,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,336,"            iYears     = (f = fields.years)     != null ? f : super.years();
",12,1,0,2,4,0,0,0,0,15,64,5,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,337,"            iCenturies = (f = fields.centuries) != null ? f : super.centuries();
",12,1,0,2,4,0,0,0,0,15,68,5,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,338,"            iEras      = (f = fields.eras)      != null ? f : super.eras();
",12,1,0,2,4,0,0,0,0,15,63,5,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,343,"            iMillisOfSecond     = (f = fields.millisOfSecond)     != null ? f : super.millisOfSecond();
",12,1,0,2,4,0,0,0,0,15,91,5,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,344,"            iMillisOfDay        = (f = fields.millisOfDay)        != null ? f : super.millisOfDay();
",12,1,0,2,4,0,0,0,0,15,88,5,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,345,"            iSecondOfMinute     = (f = fields.secondOfMinute)     != null ? f : super.secondOfMinute();
",12,1,0,2,4,0,0,0,0,15,91,5,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,346,"            iSecondOfDay        = (f = fields.secondOfDay)        != null ? f : super.secondOfDay();
",12,1,0,2,4,0,0,0,0,15,88,5,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,347,"            iMinuteOfHour       = (f = fields.minuteOfHour)       != null ? f : super.minuteOfHour();
",12,1,0,2,4,0,0,0,0,15,89,5,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,348,"            iMinuteOfDay        = (f = fields.minuteOfDay)        != null ? f : super.minuteOfDay();
",12,1,0,2,4,0,0,0,0,15,88,5,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,349,"            iHourOfDay          = (f = fields.hourOfDay)          != null ? f : super.hourOfDay();
",12,1,0,2,4,0,0,0,0,15,86,5,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,350,"            iClockhourOfDay     = (f = fields.clockhourOfDay)     != null ? f : super.clockhourOfDay();
",12,1,0,2,4,0,0,0,0,15,91,5,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,351,"            iHourOfHalfday      = (f = fields.hourOfHalfday)      != null ? f : super.hourOfHalfday();
",12,1,0,2,4,0,0,0,0,15,90,5,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,352,"            iClockhourOfHalfday = (f = fields.clockhourOfHalfday) != null ? f : super.clockhourOfHalfday();
",12,1,0,2,4,0,0,0,0,15,95,5,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,353,"            iHalfdayOfDay       = (f = fields.halfdayOfDay)       != null ? f : super.halfdayOfDay();
",12,1,0,2,4,0,0,0,0,15,89,5,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,354,"            iDayOfWeek          = (f = fields.dayOfWeek)          != null ? f : super.dayOfWeek();
",12,1,0,2,4,0,0,0,0,15,86,5,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,355,"            iDayOfMonth         = (f = fields.dayOfMonth)         != null ? f : super.dayOfMonth();
",12,1,0,2,4,0,0,0,0,15,87,5,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,356,"            iDayOfYear          = (f = fields.dayOfYear)          != null ? f : super.dayOfYear();
",12,1,0,2,4,0,0,0,0,15,86,5,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,357,"            iWeekOfWeekyear     = (f = fields.weekOfWeekyear)     != null ? f : super.weekOfWeekyear();
",12,1,0,2,4,0,0,0,0,15,91,5,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,358,"            iWeekyear           = (f = fields.weekyear)           != null ? f : super.weekyear();
",12,1,0,2,4,0,0,0,0,15,85,5,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,359,"            iWeekyearOfCentury  = (f = fields.weekyearOfCentury)  != null ? f : super.weekyearOfCentury();
",12,1,0,2,4,0,0,0,0,15,94,5,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,360,"            iMonthOfYear        = (f = fields.monthOfYear)        != null ? f : super.monthOfYear();
",12,1,0,2,4,0,0,0,0,15,88,5,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,361,"            iYear               = (f = fields.year)               != null ? f : super.year();
",12,1,0,2,4,0,0,0,0,15,81,5,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,362,"            iYearOfEra          = (f = fields.yearOfEra)          != null ? f : super.yearOfEra();
",12,1,0,2,4,0,0,0,0,15,86,5,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,363,"            iYearOfCentury      = (f = fields.yearOfCentury)      != null ? f : super.yearOfCentury();
",12,1,0,2,4,0,0,0,0,15,90,5,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,364,"            iCenturyOfEra       = (f = fields.centuryOfEra)       != null ? f : super.centuryOfEra();
",12,1,0,2,4,0,0,0,0,15,89,5,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,365,"            iEra                = (f = fields.era)                != null ? f : super.era();
",12,1,0,2,4,0,0,0,0,15,80,5,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,369,"        if (iBase == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,370,"            flags = 0;
",2,0,0,0,0,0,0,0,0,3,10,6,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,372,"            flags = 
",2,0,0,0,0,0,0,0,0,3,7,6,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,385,"        iBaseFlags = flags;
",4,0,0,0,0,0,0,0,0,5,19,4,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,386,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,504,"        {
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,505,"            if (mode != 'u' && mode != 'w' && mode != 's') {
",6,5,0,1,3,0,0,0,0,14,48,5,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,509,"            iMode = mode;
",4,0,0,0,0,0,0,0,0,5,13,5,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,510,"            iMonthOfYear = monthOfYear;
",4,0,0,0,0,0,0,0,0,5,27,5,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,511,"            iDayOfMonth = dayOfMonth;
",4,0,0,0,0,0,0,0,0,5,25,5,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,512,"            iDayOfWeek = dayOfWeek;
",4,0,0,0,0,0,0,0,0,5,23,5,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,513,"            iAdvance = advanceDayOfWeek;
",4,0,0,0,0,0,0,0,0,5,28,5,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,514,"            iMillisOfDay = millisOfDay;
",4,0,0,0,0,0,0,0,0,5,27,5,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,515,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,482,"            return new OfYear((char)in.readUnsignedByte(),
",0,0,0,2,5,1,4,2,0,6,46,6,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1176,"            super(id);
",2,0,0,1,2,0,0,0,0,2,10,5,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1177,"            iStandardOffset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,33,5,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1178,"            iStartRecurrence = startRecurrence;
",4,0,0,0,0,0,0,0,0,5,35,5,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1179,"            iEndRecurrence = endRecurrence;
",4,0,0,0,0,0,0,0,0,5,31,5,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1180,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1166,"            return new DSTZone(id, (int)readMillis(in), 
",2,0,0,2,5,1,4,2,0,8,43,6,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1500,"            super(id);
",2,0,0,1,2,0,0,0,0,2,10,5,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1501,"            iTransitions = transitions;
",4,0,0,0,0,0,0,0,0,5,27,5,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1502,"            iWallOffsets = wallOffsets;
",4,0,0,0,0,0,0,0,0,5,27,5,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1503,"            iStandardOffsets = standardOffsets;
",4,0,0,0,0,0,0,0,0,5,35,5,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1504,"            iNameKeys = nameKeys;
",4,0,0,0,0,0,0,0,0,5,21,5,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1505,"            iTailZone = tailZone;
",4,0,0,0,0,0,0,0,0,5,21,5,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1506,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1341,"            int poolSize = in.readUnsignedShort();
",2,0,0,1,2,0,4,0,0,6,38,6,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1342,"            String[] pool = new String[poolSize];
",2,0,1,2,4,0,0,4,0,8,37,5,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1343,"            for (int i=0; i<poolSize; i++) {
",8,1,0,1,3,0,0,0,0,10,32,5,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1344,"                pool[i] = in.readUTF();
",0,0,1,2,4,0,4,0,0,9,23,7,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1347,"            int size = in.readInt();
",2,0,0,1,2,0,4,0,0,6,24,6,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1348,"            long[] transitions = new long[size];
",2,0,1,2,4,0,0,0,0,4,36,6,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1349,"            int[] wallOffsets = new int[size];
",2,0,1,2,4,0,0,0,0,4,34,6,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1350,"            int[] standardOffsets = new int[size];
",2,0,1,2,4,0,0,0,0,4,38,6,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1351,"            String[] nameKeys = new String[size];
",2,0,1,2,4,0,0,4,0,8,37,5,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1353,"            for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,5,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1354,"                transitions[i] = readMillis(in);
",0,0,1,2,4,0,4,0,0,9,32,7,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1355,"                wallOffsets[i] = (int)readMillis(in);
",0,0,1,3,6,0,4,0,0,9,37,7,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1356,"                standardOffsets[i] = (int)readMillis(in);
",0,0,1,3,6,0,4,0,0,9,41,7,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1359,"                    if (poolSize < 256) {
",2,1,0,1,3,0,0,0,0,3,21,9,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1360,"                        index = in.readUnsignedByte();
",2,0,0,1,2,0,4,0,0,7,30,11,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1364,"                    nameKeys[i] = pool[index];
",0,0,1,2,4,0,0,0,0,9,26,9,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1367,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1370,"            DSTZone tailZone = null;
",2,0,0,0,0,0,0,2,0,4,24,5,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1371,"            if (in.readBoolean()) {
",0,0,0,2,5,0,4,0,0,4,23,6,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1372,"                tailZone = DSTZone.readFrom(in, id);
",2,0,0,1,2,0,8,0,0,11,36,7,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1375,"            return new PrecalculatedZone
",0,0,0,0,0,1,0,2,0,2,28,7,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,747,"        Recurrence(OfYear ofYear, String nameKey, int saveMillis) {
",8,0,0,1,3,0,0,4,0,12,59,3,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,748,"            iOfYear = ofYear;
",4,0,0,0,0,0,0,0,0,5,17,5,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,749,"            iNameKey = nameKey;
",4,0,0,0,0,0,0,0,0,5,19,5,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,750,"            iSaveMillis = saveMillis;
",4,0,0,0,0,0,0,0,0,5,25,5,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,751,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,740,"            return new Recurrence(OfYear.readFrom(in), in.readUTF(), (int)readMillis(in));
",0,0,0,5,10,1,14,2,0,16,78,6,0.14286,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,11,39,"    public DefaultNameProvider() {
",2,0,0,1,3,1,0,0,0,3,30,2,0.14286,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,11,37,"    private HashMap<Locale, Map<String, Map<String, Object>>> iByLocaleCache = createCache();
",2,0,0,1,2,1,2,14,0,19,89,2,0.14286,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,11,40,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,11,99,"        return new HashMap(7);
",0,0,0,1,2,1,0,2,0,2,22,6,0.14286,0
defect4j,time,org/joda/time/DateTimeUtils,11,39,"    private static final SystemMillisProvider SYSTEM_MILLIS_PROVIDER = new SystemMillisProvider();
",2,0,0,1,2,3,0,4,0,9,94,2,0.14286,0
defect4j,time,org/joda/time/DateTimeUtils,11,41,"    private static volatile MillisProvider cMillisProvider = SYSTEM_MILLIS_PROVIDER;
",4,0,0,0,0,3,0,2,0,9,80,2,0.14286,0
defect4j,time,org/joda/time/DateTimeUtils,11,47,"        Map<String, DateTimeZone> map = new LinkedHashMap<String, DateTimeZone>();
",2,0,0,1,2,0,0,12,0,14,74,4,0.14286,0
defect4j,time,org/joda/time/DateTimeUtils,11,48,"        map.put(""UT"", DateTimeZone.UTC);
",4,0,0,1,2,0,4,0,0,9,32,5,0.14286,0
defect4j,time,org/joda/time/DateTimeUtils,11,49,"        map.put(""UTC"", DateTimeZone.UTC);
",4,0,0,1,2,0,4,0,0,9,33,5,0.14286,0
defect4j,time,org/joda/time/DateTimeUtils,11,50,"        map.put(""GMT"", DateTimeZone.UTC);
",4,0,0,1,2,0,4,0,0,9,33,5,0.14286,0
defect4j,time,org/joda/time/DateTimeUtils,11,51,"        put(map, ""EST"", ""America/New_York"");
",0,0,0,1,2,0,4,0,0,6,36,5,0.14286,0
defect4j,time,org/joda/time/DateTimeUtils,11,52,"        put(map, ""EDT"", ""America/New_York"");
",0,0,0,1,2,0,4,0,0,6,36,5,0.14286,0
defect4j,time,org/joda/time/DateTimeUtils,11,53,"        put(map, ""CST"", ""America/Chicago"");
",0,0,0,1,2,0,4,0,0,6,35,5,0.14286,0
defect4j,time,org/joda/time/DateTimeUtils,11,54,"        put(map, ""CDT"", ""America/Chicago"");
",0,0,0,1,2,0,4,0,0,6,35,5,0.14286,0
defect4j,time,org/joda/time/DateTimeUtils,11,55,"        put(map, ""MST"", ""America/Denver"");
",0,0,0,1,2,0,4,0,0,6,34,5,0.14286,0
defect4j,time,org/joda/time/DateTimeUtils,11,56,"        put(map, ""MDT"", ""America/Denver"");
",0,0,0,1,2,0,4,0,0,6,34,5,0.14286,0
defect4j,time,org/joda/time/DateTimeUtils,11,57,"        put(map, ""PST"", ""America/Los_Angeles"");
",0,0,0,1,2,0,4,0,0,6,39,5,0.14286,0
defect4j,time,org/joda/time/DateTimeUtils,11,58,"        put(map, ""PDT"", ""America/Los_Angeles"");
",0,0,0,1,2,0,4,0,0,6,39,5,0.14286,0
defect4j,time,org/joda/time/DateTimeUtils,11,59,"        cZoneNames = Collections.unmodifiableMap(map);
",2,0,0,1,2,0,6,0,0,9,46,4,0.14286,0
defect4j,time,org/joda/time/DateTimeUtils,11,60,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/DateTimeUtils,11,63,"            map.put(name, DateTimeZone.forID(id));
",0,0,0,2,4,0,12,0,0,12,38,7,0.14286,0
defect4j,time,org/joda/time/DateTimeUtils,11,66,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/DateTimeUtils,11,67,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/DateTimeUtils,11,282,"        if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.14286,0
defect4j,time,org/joda/time/DateTimeUtils,11,285,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.14286,0
defect4j,time,org/joda/time/DateTimeUtils,11,509,"    static class SystemMillisProvider implements MillisProvider {
",2,0,0,0,1,1,0,2,0,5,61,2,0.14286,0
defect4j,time,org/joda/time/DurationFieldType,11,94,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.14286,0
defect4j,time,org/joda/time/DurationFieldType,11,95,"        iName = name;
",4,0,0,0,0,0,0,0,0,5,13,4,0.14286,0
defect4j,time,org/joda/time/DurationFieldType,11,96,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/DurationFieldType,11,60,"    static final DurationFieldType ERAS_TYPE = new StandardDurationFieldType(""eras"", ERAS);
",4,0,0,1,2,2,0,4,0,11,87,2,0.14286,0
defect4j,time,org/joda/time/DurationFieldType,11,62,"    static final DurationFieldType CENTURIES_TYPE = new StandardDurationFieldType(""centuries"", CENTURIES);
",4,0,0,1,2,2,0,4,0,11,102,2,0.14286,0
defect4j,time,org/joda/time/DurationFieldType,11,64,"    static final DurationFieldType WEEKYEARS_TYPE = new StandardDurationFieldType(""weekyears"", WEEKYEARS);
",4,0,0,1,2,2,0,4,0,11,102,2,0.14286,0
defect4j,time,org/joda/time/DurationFieldType,11,66,"    static final DurationFieldType YEARS_TYPE = new StandardDurationFieldType(""years"", YEARS);
",4,0,0,1,2,2,0,4,0,11,90,2,0.14286,0
defect4j,time,org/joda/time/DurationFieldType,11,68,"    static final DurationFieldType MONTHS_TYPE = new StandardDurationFieldType(""months"", MONTHS);
",4,0,0,1,2,2,0,4,0,11,93,2,0.14286,0
defect4j,time,org/joda/time/DurationFieldType,11,70,"    static final DurationFieldType WEEKS_TYPE = new StandardDurationFieldType(""weeks"", WEEKS);
",4,0,0,1,2,2,0,4,0,11,90,2,0.14286,0
defect4j,time,org/joda/time/DurationFieldType,11,72,"    static final DurationFieldType DAYS_TYPE = new StandardDurationFieldType(""days"", DAYS);
",4,0,0,1,2,2,0,4,0,11,87,2,0.14286,0
defect4j,time,org/joda/time/DurationFieldType,11,74,"    static final DurationFieldType HALFDAYS_TYPE = new StandardDurationFieldType(""halfdays"", HALFDAYS);
",4,0,0,1,2,2,0,4,0,11,99,2,0.14286,0
defect4j,time,org/joda/time/DurationFieldType,11,76,"    static final DurationFieldType HOURS_TYPE = new StandardDurationFieldType(""hours"", HOURS);
",4,0,0,1,2,2,0,4,0,11,90,2,0.14286,0
defect4j,time,org/joda/time/DurationFieldType,11,78,"    static final DurationFieldType MINUTES_TYPE = new StandardDurationFieldType(""minutes"", MINUTES);
",4,0,0,1,2,2,0,4,0,11,96,2,0.14286,0
defect4j,time,org/joda/time/DurationFieldType,11,80,"    static final DurationFieldType SECONDS_TYPE = new StandardDurationFieldType(""seconds"", SECONDS);
",4,0,0,1,2,2,0,4,0,11,96,2,0.14286,0
defect4j,time,org/joda/time/DurationFieldType,11,82,"    static final DurationFieldType MILLIS_TYPE = new StandardDurationFieldType(""millis"", MILLIS);
",4,0,0,1,2,2,0,4,0,11,93,2,0.14286,0
defect4j,time,org/joda/time/DurationFieldType,11,105,"        return MILLIS_TYPE;
",2,0,0,0,0,1,0,0,0,2,19,4,0.14286,0
defect4j,time,org/joda/time/DurationFieldType,11,114,"        return SECONDS_TYPE;
",2,0,0,0,0,1,0,0,0,2,20,4,0.14286,0
defect4j,time,org/joda/time/DurationFieldType,11,123,"        return MINUTES_TYPE;
",2,0,0,0,0,1,0,0,0,2,20,4,0.14286,0
defect4j,time,org/joda/time/DurationFieldType,11,132,"        return HOURS_TYPE;
",2,0,0,0,0,1,0,0,0,2,18,4,0.14286,0
defect4j,time,org/joda/time/DurationFieldType,11,141,"        return HALFDAYS_TYPE;
",2,0,0,0,0,1,0,0,0,2,21,4,0.14286,0
defect4j,time,org/joda/time/DurationFieldType,11,151,"        return DAYS_TYPE;
",2,0,0,0,0,1,0,0,0,2,17,4,0.14286,0
defect4j,time,org/joda/time/DurationFieldType,11,160,"        return WEEKS_TYPE;
",2,0,0,0,0,1,0,0,0,2,18,4,0.14286,0
defect4j,time,org/joda/time/DurationFieldType,11,169,"        return WEEKYEARS_TYPE;
",2,0,0,0,0,1,0,0,0,2,22,4,0.14286,0
defect4j,time,org/joda/time/DurationFieldType,11,178,"        return MONTHS_TYPE;
",2,0,0,0,0,1,0,0,0,2,19,4,0.14286,0
defect4j,time,org/joda/time/DurationFieldType,11,187,"        return YEARS_TYPE;
",2,0,0,0,0,1,0,0,0,2,18,4,0.14286,0
defect4j,time,org/joda/time/DurationFieldType,11,196,"        return CENTURIES_TYPE;
",2,0,0,0,0,1,0,0,0,2,22,4,0.14286,0
defect4j,time,org/joda/time/DurationFieldType,11,205,"        return ERAS_TYPE;
",2,0,0,0,0,1,0,0,0,2,17,4,0.14286,0
defect4j,time,org/joda/time/DurationFieldType,11,259,"            super(name);
",2,0,0,1,2,0,0,0,0,2,12,5,0.14286,0
defect4j,time,org/joda/time/DurationFieldType,11,260,"            iOrdinal = ordinal;
",4,0,0,0,0,0,0,0,0,5,19,5,0.14286,0
defect4j,time,org/joda/time/DurationFieldType,11,261,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/DurationFieldType,11,278,"            return (1 << iOrdinal);
",2,1,0,1,2,1,0,0,0,3,23,6,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,444,"            super(name);
",2,0,0,1,2,0,0,0,0,2,12,5,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,445,"            iOrdinal = ordinal;
",4,0,0,0,0,0,0,0,0,5,19,5,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,446,"            iUnitType = unitType;
",4,0,0,0,0,0,0,0,0,5,21,5,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,447,"            iRangeType = rangeType;
",4,0,0,0,0,0,0,0,0,5,23,5,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,448,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,452,"            return iUnitType;
",2,0,0,0,0,1,0,0,0,2,17,5,0.14286,0
defect4j,time,org/joda/time/DateTimeFieldType,11,457,"            return iRangeType;
",2,0,0,0,0,1,0,0,0,2,18,5,0.14286,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,11,37,"        super(chronology, 2);
",2,0,0,1,2,0,0,0,0,2,21,4,0.14286,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,11,38,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,51,"        super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth());
",0,0,0,3,6,0,8,0,0,8,78,5,0.14286,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,52,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,53,"        iMax = iChronology.getMaxMonth();
",2,0,0,1,2,0,4,0,0,7,33,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,54,"        iLeapMonth = leapMonth;
",4,0,0,0,0,0,0,0,0,5,23,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,55,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,11,55,"        super(type);
",2,0,0,1,2,0,0,0,0,2,12,4,0.14286,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,11,56,"        iUnitMillis = unitMillis;
",4,0,0,0,0,0,0,0,0,5,25,4,0.14286,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,11,57,"        iDurationField = new LinkedDurationField(type.getDurationType());
",2,0,0,2,4,0,4,2,0,9,65,4,0.14286,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,11,58,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,11,137,"        return iDurationField;
",2,0,0,0,0,1,0,0,0,2,22,4,0.14286,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,50,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.14286,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,51,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.14286,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,54,"        iType = type;
",4,0,0,0,0,0,0,0,0,5,13,4,0.14286,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,55,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,58,"        return iType;
",2,0,0,0,0,1,0,0,0,2,13,4,0.14286,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,69,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.14286,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,11,151,"        LinkedDurationField(DurationFieldType type) {
",4,0,0,1,3,0,0,2,0,6,45,3,0.14286,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,11,152,"            super(type);
",2,0,0,1,2,0,0,0,0,2,12,5,0.14286,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,11,153,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/field/BaseDurationField,11,47,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.14286,0
defect4j,time,org/joda/time/field/BaseDurationField,11,48,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.14286,0
defect4j,time,org/joda/time/field/BaseDurationField,11,51,"        iType = type;
",4,0,0,0,0,0,0,0,0,5,13,4,0.14286,0
defect4j,time,org/joda/time/field/BaseDurationField,11,52,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/field/BaseDurationField,11,66,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,131,"        super(base, param);
",4,0,0,1,2,0,0,0,0,4,19,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,126,"    private transient final YearInfo[] iYearInfoCache = new YearInfo[CACHE_SIZE];
",2,0,1,2,4,3,0,4,0,11,77,2,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,133,"        if (minDaysInFirstWeek < 1 || minDaysInFirstWeek > 7) {
",4,3,0,1,3,0,0,0,0,7,55,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,138,"        iMinDaysInFirstWeek = minDaysInFirstWeek;
",4,0,0,0,0,0,0,0,0,5,41,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,139,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,76,"        cMillisField = MillisDurationField.INSTANCE;
",6,0,0,0,0,0,0,0,0,7,44,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,77,"        cSecondsField = new PreciseDurationField
",2,0,0,0,0,0,0,2,0,5,40,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,79,"        cMinutesField = new PreciseDurationField
",2,0,0,0,0,0,0,2,0,5,40,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,81,"        cHoursField = new PreciseDurationField
",2,0,0,0,0,0,0,2,0,5,38,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,83,"        cHalfdaysField = new PreciseDurationField
",2,0,0,0,0,0,0,2,0,5,41,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,85,"        cDaysField = new PreciseDurationField
",2,0,0,0,0,0,0,2,0,5,37,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,87,"        cWeeksField = new PreciseDurationField
",2,0,0,0,0,0,0,2,0,5,38,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,90,"        cMillisOfSecondField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,47,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,93,"        cMillisOfDayField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,44,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,96,"        cSecondOfMinuteField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,47,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,99,"        cSecondOfDayField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,44,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,102,"        cMinuteOfHourField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,45,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,105,"        cMinuteOfDayField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,44,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,108,"        cHourOfDayField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,42,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,111,"        cHourOfHalfdayField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,46,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,114,"        cClockhourOfDayField = new ZeroIsMaxDateTimeField
",2,0,0,0,0,0,0,2,0,5,49,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,117,"        cClockhourOfHalfdayField = new ZeroIsMaxDateTimeField
",2,0,0,0,0,0,0,2,0,5,53,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,120,"        cHalfdayOfDayField = new HalfdayField();
",2,0,0,1,2,0,0,2,0,5,40,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,121,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,143,"        if ((base = getBase()) != null) {
",2,1,0,3,7,0,2,0,0,7,33,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,146,"        return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,5,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,241,"        fields.millis = cMillisField;
",6,0,0,0,0,0,0,0,0,7,29,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,242,"        fields.seconds = cSecondsField;
",6,0,0,0,0,0,0,0,0,7,31,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,243,"        fields.minutes = cMinutesField;
",6,0,0,0,0,0,0,0,0,7,31,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,244,"        fields.hours = cHoursField;
",6,0,0,0,0,0,0,0,0,7,27,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,245,"        fields.halfdays = cHalfdaysField;
",6,0,0,0,0,0,0,0,0,7,33,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,246,"        fields.days = cDaysField;
",6,0,0,0,0,0,0,0,0,7,25,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,247,"        fields.weeks = cWeeksField;
",6,0,0,0,0,0,0,0,0,7,27,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,249,"        fields.millisOfSecond = cMillisOfSecondField;
",6,0,0,0,0,0,0,0,0,7,45,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,250,"        fields.millisOfDay = cMillisOfDayField;
",6,0,0,0,0,0,0,0,0,7,39,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,251,"        fields.secondOfMinute = cSecondOfMinuteField;
",6,0,0,0,0,0,0,0,0,7,45,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,252,"        fields.secondOfDay = cSecondOfDayField;
",6,0,0,0,0,0,0,0,0,7,39,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,253,"        fields.minuteOfHour = cMinuteOfHourField;
",6,0,0,0,0,0,0,0,0,7,41,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,254,"        fields.minuteOfDay = cMinuteOfDayField;
",6,0,0,0,0,0,0,0,0,7,39,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,255,"        fields.hourOfDay = cHourOfDayField;
",6,0,0,0,0,0,0,0,0,7,35,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,256,"        fields.hourOfHalfday = cHourOfHalfdayField;
",6,0,0,0,0,0,0,0,0,7,43,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,257,"        fields.clockhourOfDay = cClockhourOfDayField;
",6,0,0,0,0,0,0,0,0,7,45,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,258,"        fields.clockhourOfHalfday = cClockhourOfHalfdayField;
",6,0,0,0,0,0,0,0,0,7,53,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,259,"        fields.halfdayOfDay = cHalfdayOfDayField;
",6,0,0,0,0,0,0,0,0,7,41,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,264,"        fields.year = new BasicYearDateTimeField(this);
",4,0,0,1,2,0,0,2,0,7,47,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,265,"        fields.yearOfEra = new GJYearOfEraDateTimeField(fields.year, this);
",8,0,0,1,2,0,0,2,0,11,67,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,268,"        DateTimeField field = new OffsetDateTimeField(
",2,0,0,0,1,0,0,4,0,6,46,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,270,"        fields.centuryOfEra = new DividedDateTimeField(
",4,0,0,0,1,0,0,2,0,7,47,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,273,"        field = new RemainderDateTimeField(
",2,0,0,0,1,0,0,2,0,5,35,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,275,"        fields.yearOfCentury = new OffsetDateTimeField(
",4,0,0,0,1,0,0,2,0,7,47,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,278,"        fields.era = new GJEraDateTimeField(this);
",4,0,0,1,2,0,0,2,0,7,42,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,279,"        fields.dayOfWeek = new GJDayOfWeekDateTimeField(this, fields.days);
",8,0,0,1,2,0,0,2,0,11,67,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,280,"        fields.dayOfMonth = new BasicDayOfMonthDateTimeField(this, fields.days);
",8,0,0,1,2,0,0,2,0,11,72,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,281,"        fields.dayOfYear = new BasicDayOfYearDateTimeField(this, fields.days);
",8,0,0,1,2,0,0,2,0,11,70,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,282,"        fields.monthOfYear = new GJMonthOfYearDateTimeField(this);
",4,0,0,1,2,0,0,2,0,7,58,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,283,"        fields.weekyear = new BasicWeekyearDateTimeField(this);
",4,0,0,1,2,0,0,2,0,7,55,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,284,"        fields.weekOfWeekyear = new BasicWeekOfWeekyearDateTimeField(this, fields.weeks);
",8,0,0,1,2,0,0,2,0,11,81,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,286,"        field = new RemainderDateTimeField(
",2,0,0,0,1,0,0,2,0,5,35,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,288,"        fields.weekyearOfCentury = new OffsetDateTimeField(
",4,0,0,0,1,0,0,2,0,7,51,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,294,"        fields.years = fields.year.getDurationField();
",8,0,0,1,2,0,2,0,0,11,46,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,295,"        fields.centuries = fields.centuryOfEra.getDurationField();
",8,0,0,1,2,0,2,0,0,11,58,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,296,"        fields.months = fields.monthOfYear.getDurationField();
",8,0,0,1,2,0,2,0,0,11,54,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,297,"        fields.weekyears = fields.weekyear.getDurationField();
",8,0,0,1,2,0,2,0,0,11,54,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,298,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,360,"        return getYearInfo(year).iFirstDayMillis;
",2,0,0,1,2,1,4,0,0,6,41,5,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,385,"        long millis = getYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,34,5,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,386,"        millis += getTotalMillisByYearMonth(year, month);
",2,0,0,1,2,0,6,0,0,9,49,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,387,"        return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;
",8,3,0,2,4,1,0,0,0,11,74,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,691,"        return 12;
",0,0,0,0,0,1,0,0,0,0,10,3,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,738,"        YearInfo info = iYearInfoCache[year & CACHE_MASK];
",6,1,1,1,2,0,0,2,0,11,50,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,739,"        if (info == null || info.iYear != year) {
",8,3,0,1,3,0,0,0,0,11,41,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,740,"            info = new YearInfo(year, calculateFirstDayOfYearMillis(year));
",4,0,0,2,4,0,4,2,0,11,63,6,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,741,"            iYearInfoCache[year & CACHE_MASK] = info;
",6,1,1,1,2,0,0,0,0,10,41,6,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,743,"        return info;
",2,0,0,0,0,1,0,0,0,2,12,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,50,"abstract class BasicChronology extends AssembledChronology {
",2,0,0,0,1,1,0,2,0,5,60,1,0.14286,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,11,46,"        super(DateTimeFieldType.era());
",0,0,0,2,4,0,4,0,0,4,31,5,0.14286,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,11,47,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.14286,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,11,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,44,"        super(DateTimeFieldType.weekyear(), chronology.getAverageMillisPerYear());
",0,0,0,3,6,0,8,0,0,8,74,5,0.14286,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,45,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,46,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,75,"        super(base, param, minDaysInFirstWeek);
",6,0,0,1,2,0,0,0,0,6,39,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,76,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,42,"    private static final int[] MIN_DAYS_PER_MONTH_ARRAY = {
",2,0,0,1,3,3,0,0,0,5,55,2,0.14286,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,45,"    private static final int[] MAX_DAYS_PER_MONTH_ARRAY = {
",2,0,0,1,3,3,0,0,0,5,55,2,0.14286,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,53,"        MIN_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];
",2,0,0,1,2,0,0,0,0,3,47,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,54,"        MAX_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];
",2,0,0,1,2,0,0,0,0,3,47,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,56,"        long minSum = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.14286,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,57,"        long maxSum = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.14286,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,58,"        for (int i = 0; i < 11; i++) {
",6,1,0,1,3,0,0,0,0,8,30,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,59,"            long millis = MIN_DAYS_PER_MONTH_ARRAY[i]
",2,0,1,1,2,0,0,0,0,6,41,7,0.14286,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,61,"            minSum += millis;
",4,0,0,0,0,0,0,0,0,5,17,6,0.14286,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,62,"            MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = minSum;
",4,1,1,1,2,0,0,0,0,8,48,6,0.14286,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,64,"            millis = MAX_DAYS_PER_MONTH_ARRAY[i]
",2,0,1,1,2,0,0,0,0,7,36,6,0.14286,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,66,"            maxSum += millis;
",4,0,0,0,0,0,0,0,0,5,17,6,0.14286,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,67,"            MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = maxSum;
",4,1,1,1,2,0,0,0,0,8,48,6,0.14286,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,69,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,120,"        if (isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,4,23,5,0.14286,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,139,"        if (isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,4,23,5,0.14286,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,45,"        super(DateTimeFieldType.year(), chronology.getAverageMillisPerYear());
",0,0,0,3,6,0,8,0,0,8,70,5,0.14286,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,46,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,119,"        return iChronology.getMaxYear();
",0,0,0,1,2,1,4,0,0,4,32,5,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,436,"        Fields() {
",2,0,0,1,3,0,0,0,0,2,10,3,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,437,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,445,"                if (isSupported(f = chrono.millis())) {
",2,0,0,3,7,0,6,0,0,9,39,7,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,446,"                    millis = f;
",4,0,0,0,0,0,0,0,0,5,11,8,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,448,"                if (isSupported(f = chrono.seconds())) {
",2,0,0,3,7,0,6,0,0,9,40,7,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,449,"                    seconds = f;
",4,0,0,0,0,0,0,0,0,5,12,8,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,451,"                if (isSupported(f = chrono.minutes())) {
",2,0,0,3,7,0,6,0,0,9,40,7,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,452,"                    minutes = f;
",4,0,0,0,0,0,0,0,0,5,12,8,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,454,"                if (isSupported(f = chrono.hours())) {
",2,0,0,3,7,0,6,0,0,9,38,7,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,455,"                    hours = f;
",4,0,0,0,0,0,0,0,0,5,10,8,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,457,"                if (isSupported(f = chrono.halfdays())) {
",2,0,0,3,7,0,6,0,0,9,41,7,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,458,"                    halfdays = f;
",4,0,0,0,0,0,0,0,0,5,13,8,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,460,"                if (isSupported(f = chrono.days())) {
",2,0,0,3,7,0,6,0,0,9,37,7,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,461,"                    days = f;
",4,0,0,0,0,0,0,0,0,5,9,8,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,463,"                if (isSupported(f = chrono.weeks())) {
",2,0,0,3,7,0,6,0,0,9,38,7,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,464,"                    weeks = f;
",4,0,0,0,0,0,0,0,0,5,10,8,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,466,"                if (isSupported(f = chrono.weekyears())) {
",2,0,0,3,7,0,6,0,0,9,42,7,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,467,"                    weekyears = f;
",4,0,0,0,0,0,0,0,0,5,14,8,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,469,"                if (isSupported(f = chrono.months())) {
",2,0,0,3,7,0,6,0,0,9,39,7,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,470,"                    months = f;
",4,0,0,0,0,0,0,0,0,5,11,8,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,472,"                if (isSupported(f = chrono.years())) {
",2,0,0,3,7,0,6,0,0,9,38,7,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,473,"                    years = f;
",4,0,0,0,0,0,0,0,0,5,10,8,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,475,"                if (isSupported(f = chrono.centuries())) {
",2,0,0,3,7,0,6,0,0,9,42,7,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,476,"                    centuries = f;
",4,0,0,0,0,0,0,0,0,5,14,8,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,478,"                if (isSupported(f = chrono.eras())) {
",2,0,0,3,7,0,6,0,0,9,37,7,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,485,"                if (isSupported(f = chrono.millisOfSecond())) {
",2,0,0,3,7,0,6,0,0,9,47,7,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,486,"                    millisOfSecond = f;
",4,0,0,0,0,0,0,0,0,5,19,8,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,488,"                if (isSupported(f = chrono.millisOfDay())) {
",2,0,0,3,7,0,6,0,0,9,44,7,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,489,"                    millisOfDay = f;
",4,0,0,0,0,0,0,0,0,5,16,8,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,491,"                if (isSupported(f = chrono.secondOfMinute())) {
",2,0,0,3,7,0,6,0,0,9,47,7,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,492,"                    secondOfMinute = f;
",4,0,0,0,0,0,0,0,0,5,19,8,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,494,"                if (isSupported(f = chrono.secondOfDay())) {
",2,0,0,3,7,0,6,0,0,9,44,7,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,495,"                    secondOfDay = f;
",4,0,0,0,0,0,0,0,0,5,16,8,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,497,"                if (isSupported(f = chrono.minuteOfHour())) {
",2,0,0,3,7,0,6,0,0,9,45,7,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,498,"                    minuteOfHour = f;
",4,0,0,0,0,0,0,0,0,5,17,8,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,500,"                if (isSupported(f = chrono.minuteOfDay())) {
",2,0,0,3,7,0,6,0,0,9,44,7,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,501,"                    minuteOfDay = f;
",4,0,0,0,0,0,0,0,0,5,16,8,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,503,"                if (isSupported(f = chrono.hourOfDay())) {
",2,0,0,3,7,0,6,0,0,9,42,7,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,504,"                    hourOfDay = f;
",4,0,0,0,0,0,0,0,0,5,14,8,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,506,"                if (isSupported(f = chrono.clockhourOfDay())) {
",2,0,0,3,7,0,6,0,0,9,47,7,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,507,"                    clockhourOfDay = f;
",4,0,0,0,0,0,0,0,0,5,19,8,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,509,"                if (isSupported(f = chrono.hourOfHalfday())) {
",2,0,0,3,7,0,6,0,0,9,46,7,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,510,"                    hourOfHalfday = f;
",4,0,0,0,0,0,0,0,0,5,18,8,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,512,"                if (isSupported(f = chrono.clockhourOfHalfday())) {
",2,0,0,3,7,0,6,0,0,9,51,7,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,513,"                    clockhourOfHalfday = f;
",4,0,0,0,0,0,0,0,0,5,23,8,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,515,"                if (isSupported(f = chrono.halfdayOfDay())) {
",2,0,0,3,7,0,6,0,0,9,45,7,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,516,"                    halfdayOfDay = f;
",4,0,0,0,0,0,0,0,0,5,17,8,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,518,"                if (isSupported(f = chrono.dayOfWeek())) {
",2,0,0,3,7,0,6,0,0,9,42,7,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,519,"                    dayOfWeek = f;
",4,0,0,0,0,0,0,0,0,5,14,8,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,521,"                if (isSupported(f = chrono.dayOfMonth())) {
",2,0,0,3,7,0,6,0,0,9,43,7,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,522,"                    dayOfMonth = f;
",4,0,0,0,0,0,0,0,0,5,15,8,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,524,"                if (isSupported(f = chrono.dayOfYear())) {
",2,0,0,3,7,0,6,0,0,9,42,7,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,525,"                    dayOfYear = f;
",4,0,0,0,0,0,0,0,0,5,14,8,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,527,"                if (isSupported(f = chrono.weekOfWeekyear())) {
",2,0,0,3,7,0,6,0,0,9,47,7,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,528,"                    weekOfWeekyear = f;
",4,0,0,0,0,0,0,0,0,5,19,8,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,530,"                if (isSupported(f = chrono.weekyear())) {
",2,0,0,3,7,0,6,0,0,9,41,7,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,531,"                    weekyear = f;
",4,0,0,0,0,0,0,0,0,5,13,8,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,533,"                if (isSupported(f = chrono.weekyearOfCentury())) {
",2,0,0,3,7,0,6,0,0,9,50,7,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,534,"                    weekyearOfCentury = f;
",4,0,0,0,0,0,0,0,0,5,22,8,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,536,"                if (isSupported(f = chrono.monthOfYear())) {
",2,0,0,3,7,0,6,0,0,9,44,7,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,537,"                    monthOfYear = f;
",4,0,0,0,0,0,0,0,0,5,16,8,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,539,"                if (isSupported(f = chrono.year())) {
",2,0,0,3,7,0,6,0,0,9,37,7,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,540,"                    year = f;
",4,0,0,0,0,0,0,0,0,5,9,8,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,542,"                if (isSupported(f = chrono.yearOfEra())) {
",2,0,0,3,7,0,6,0,0,9,42,7,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,543,"                    yearOfEra = f;
",4,0,0,0,0,0,0,0,0,5,14,8,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,545,"                if (isSupported(f = chrono.yearOfCentury())) {
",2,0,0,3,7,0,6,0,0,9,46,7,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,546,"                    yearOfCentury = f;
",4,0,0,0,0,0,0,0,0,5,18,8,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,548,"                if (isSupported(f = chrono.centuryOfEra())) {
",2,0,0,3,7,0,6,0,0,9,45,7,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,549,"                    centuryOfEra = f;
",4,0,0,0,0,0,0,0,0,5,17,8,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,551,"                if (isSupported(f = chrono.era())) {
",2,0,0,3,7,0,6,0,0,9,36,7,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,552,"                    era = f;
",4,0,0,0,0,0,0,0,0,5,8,8,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,555,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,558,"            return field == null ? false : field.isSupported();
",2,1,0,1,2,1,4,0,0,8,51,6,0.14286,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,562,"            return field == null ? false : field.isSupported();
",2,1,0,1,2,1,4,0,0,8,51,6,0.14286,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,11,40,"        super(yearField, DateTimeFieldType.yearOfEra());
",2,0,0,2,4,0,4,0,0,6,48,4,0.14286,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,11,41,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.14286,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,11,42,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,11,93,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.14286,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,11,97,"        return getWrappedField().getMaximumValue();
",0,0,0,2,4,1,4,0,0,4,43,5,0.14286,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,11,54,"        super(type);
",2,0,0,1,2,0,0,0,0,2,12,4,0.14286,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,11,55,"        if (field == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.14286,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,11,58,"        if (!field.isSupported()) {
",0,0,0,2,5,0,4,0,0,5,27,4,0.14286,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,11,61,"        iField = field;
",4,0,0,0,0,0,0,0,0,5,15,4,0.14286,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,11,62,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,11,70,"        return iField;
",2,0,0,0,0,1,0,0,0,2,14,4,0.14286,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,11,86,"        return iField.getDurationField();
",0,0,0,1,2,1,4,0,0,4,33,5,0.14286,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,11,41,"        super(DateTimeFieldType.dayOfMonth(), days);
",2,0,0,2,4,0,4,0,0,6,44,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,11,42,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,11,43,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,11,48,"        super(type);
",2,0,0,1,2,0,0,0,0,2,12,4,0.14286,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,11,50,"        if (!unit.isPrecise()) {
",0,0,0,2,5,0,4,0,0,5,24,4,0.14286,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,11,54,"        iUnitMillis = unit.getUnitMillis();
",2,0,0,1,2,0,4,0,0,7,35,4,0.14286,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,11,55,"        if (iUnitMillis < 1) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.14286,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,11,59,"        iUnitField = unit;
",4,0,0,0,0,0,0,0,0,5,18,4,0.14286,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,11,60,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,11,150,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.14286,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,11,154,"        return iUnitMillis;
",2,0,0,0,0,1,0,0,0,2,19,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,750,"            super(DateTimeFieldType.halfdayOfDay(), cHalfdaysField, cDaysField);
",4,0,0,2,4,0,4,0,0,8,68,5,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,751,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,11,57,"        super(type, unit);
",4,0,0,1,2,0,0,0,0,4,18,4,0.14286,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,11,59,"        if (!range.isPrecise()) {
",0,0,0,2,5,0,4,0,0,5,25,4,0.14286,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,11,63,"        long rangeMillis = range.getUnitMillis();
",2,0,0,1,2,0,4,0,0,6,41,5,0.14286,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,11,64,"        iRange = (int)(rangeMillis / getUnitMillis());
",4,1,0,3,6,0,2,0,0,8,46,4,0.14286,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,11,65,"        if (iRange < 2) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.14286,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,11,69,"        iRangeField = range;
",4,0,0,0,0,0,0,0,0,5,20,4,0.14286,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,11,70,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,11,46,"        super(GregorianChronology.getInstanceUTC().year(), DateTimeFieldType.yearOfEra());
",0,0,0,4,8,0,10,0,0,10,82,5,0.14286,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,11,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,11,40,"    static final DateTimeField INSTANCE = new ISOYearOfEraDateTimeField();
",2,0,0,1,2,2,0,4,0,8,70,2,0.14286,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,11,87,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.14286,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,11,91,"        return getWrappedField().getMaximumValue();
",0,0,0,2,4,1,4,0,0,4,43,5,0.14286,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,11,45,"        super(DateTimeFieldType.dayOfWeek(), days);
",2,0,0,2,4,0,4,0,0,6,43,4,0.14286,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,11,46,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.14286,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,11,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,148,"        super(base, param, minDaysInFirstWeek);
",6,0,0,1,2,0,0,0,0,6,39,4,0.14286,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,149,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,68,"    private static final Map<DateTimeZone, GregorianChronology[]> cCache = new HashMap<DateTimeZone, GregorianChronology[]>();
",2,0,0,3,6,3,0,12,0,17,122,2,0.14286,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,71,"        INSTANCE_UTC = getInstance(DateTimeZone.UTC);
",6,0,0,1,2,0,2,0,0,9,45,4,0.14286,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,72,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,81,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.14286,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,100,"        return getInstance(zone, 4);
",0,0,0,1,2,1,4,0,0,4,28,5,0.14286,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,111,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.14286,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,115,"        synchronized (cCache) {
",2,0,0,1,3,0,0,0,0,2,23,4,0.14286,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,116,"            GregorianChronology[] chronos = cCache.get(zone);
",2,0,0,2,4,0,6,2,0,10,49,6,0.14286,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,117,"            if (chronos == null) {
",2,1,0,1,3,0,0,0,0,3,22,6,0.14286,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,118,"                chronos = new GregorianChronology[7];
",2,0,0,1,2,0,0,2,0,5,37,8,0.14286,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,119,"                cCache.put(zone, chronos);
",0,0,0,1,2,0,8,0,0,8,26,9,0.14286,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,122,"                chrono = chronos[minDaysInFirstWeek - 1];
",4,1,1,1,2,0,0,0,0,8,41,8,0.14286,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,126,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,127,"            if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.14286,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,128,"                if (zone == DateTimeZone.UTC) {
",6,1,0,1,3,0,0,0,0,7,31,8,0.14286,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,129,"                    chrono = new GregorianChronology(null, null, minDaysInFirstWeek);
",4,0,0,1,2,0,0,2,0,8,65,10,0.14286,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,135,"                chronos[minDaysInFirstWeek - 1] = chrono;
",4,1,1,1,2,0,0,0,0,8,41,8,0.14286,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,137,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,138,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.14286,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,191,"        if (getBase() == null) {
",0,1,0,2,5,0,2,0,0,4,24,4,0.14286,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,192,"            super.assemble(fields);
",4,0,0,1,2,0,0,0,0,4,23,7,0.14286,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,194,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,197,"        return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);
",6,8,0,5,10,1,0,0,0,14,69,4,0.14286,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,202,"        int leapYears = year / 100;
",4,1,0,0,0,0,0,0,0,5,27,5,0.14286,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,203,"        if (year < 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.14286,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,211,"            leapYears = (year >> 2) - leapYears + (leapYears >> 2);
",8,4,0,2,4,0,0,0,0,13,55,6,0.14286,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,212,"            if (isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,4,23,7,0.14286,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,217,"        return (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;
",10,4,0,2,4,1,0,0,0,14,90,4,0.14286,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,221,"        return MIN_YEAR;
",2,0,0,0,0,1,0,0,0,2,16,4,0.14286,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,225,"        return MAX_YEAR;
",2,0,0,0,0,1,0,0,0,2,16,4,0.14286,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,229,"        return MILLIS_PER_YEAR;
",2,0,0,0,0,1,0,0,0,2,23,4,0.14286,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,237,"        return MILLIS_PER_MONTH;
",2,0,0,0,0,1,0,0,0,2,24,4,0.14286,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,45,"public final class GregorianChronology extends BasicGJChronology {
",2,0,0,0,1,2,0,2,0,6,66,1,0.14286,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,56,"        super(field, type);
",4,0,0,1,2,0,0,0,0,4,19,4,0.14286,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,58,"        if (divisor < 2) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.14286,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,62,"        DurationField unitField = field.getDurationField();
",2,0,0,1,2,0,4,2,0,8,51,4,0.14286,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,63,"        if (unitField == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.14286,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,66,"            iDurationField = new ScaledDurationField(
",2,0,0,0,1,0,0,2,0,5,41,6,0.14286,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,70,"        iDivisor = divisor;
",4,0,0,0,0,0,0,0,0,5,19,4,0.14286,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,72,"        int i = field.getMinimumValue();
",2,0,0,1,2,0,4,0,0,6,32,5,0.14286,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,73,"        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);
",12,5,0,3,6,0,0,0,0,17,59,5,0.14286,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,75,"        int j = field.getMaximumValue();
",2,0,0,1,2,0,4,0,0,6,32,5,0.14286,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,76,"        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);
",12,5,0,3,6,0,0,0,0,17,59,5,0.14286,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,78,"        iMin = min;
",4,0,0,0,0,0,0,0,0,5,11,4,0.14286,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,79,"        iMax = max;
",4,0,0,0,0,0,0,0,0,5,11,4,0.14286,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,80,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,182,"        return iDurationField;
",2,0,0,0,0,1,0,0,0,2,22,4,0.14286,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,11,52,"        super(field, type);
",4,0,0,1,2,0,0,0,0,4,19,4,0.14286,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,11,54,"        if (divisor < 2) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.14286,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,11,58,"        DurationField rangeField = field.getDurationField();
",2,0,0,1,2,0,4,2,0,8,52,4,0.14286,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,11,59,"        if (rangeField == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.14286,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,11,62,"            iRangeField = new ScaledDurationField(
",2,0,0,0,1,0,0,2,0,5,38,6,0.14286,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,11,66,"        iDivisor = divisor;
",4,0,0,0,0,0,0,0,0,5,19,4,0.14286,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,11,67,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,11,76,"        this(dividedField, dividedField.getType());
",2,0,0,2,4,0,4,0,0,6,43,4,0.14286,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,11,77,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,11,87,"        super(dividedField.getWrappedField(), type);
",2,0,0,2,4,0,4,0,0,6,44,4,0.14286,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,11,88,"        iDivisor = dividedField.iDivisor;
",6,0,0,0,0,0,0,0,0,7,33,4,0.14286,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,11,89,"        iRangeField = dividedField.iDurationField;
",6,0,0,0,0,0,0,0,0,7,42,4,0.14286,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,11,90,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,11,148,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.14286,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,11,158,"        return iDivisor - 1;
",2,1,0,0,0,1,0,0,0,3,20,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,11,42,"        super(DateTimeFieldType.weekOfWeekyear(), weeks);
",2,0,0,2,4,0,4,0,0,6,49,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,11,43,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,11,44,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,11,41,"        super(DateTimeFieldType.dayOfYear(), days);
",2,0,0,2,4,0,4,0,0,6,43,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,11,42,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,11,43,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/field/PreciseDurationField,11,43,"        super(type);
",2,0,0,1,2,0,0,0,0,2,12,4,0.14286,0
defect4j,time,org/joda/time/field/PreciseDurationField,11,44,"        iUnitMillis = unitMillis;
",4,0,0,0,0,0,0,0,0,5,25,4,0.14286,0
defect4j,time,org/joda/time/field/PreciseDurationField,11,45,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/field/PreciseDurationField,11,54,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.14286,0
defect4j,time,org/joda/time/field/PreciseDurationField,11,63,"        return iUnitMillis;
",2,0,0,0,0,1,0,0,0,2,19,4,0.14286,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,11,45,"        super(field, type);
",4,0,0,1,2,0,0,0,0,4,19,4,0.14286,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,11,46,"        if (field.getMinimumValue() != 0) {
",0,1,0,2,5,0,4,0,0,5,35,4,0.14286,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,11,49,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,11,46,"        this(field, (field == null ? null : field.getType()), offset, Integer.MIN_VALUE, Integer.MAX_VALUE);
",14,1,0,3,6,0,4,0,0,19,100,4,0.14286,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,11,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,11,58,"        this(field, type, offset, Integer.MIN_VALUE, Integer.MAX_VALUE);
",14,0,0,1,2,0,0,0,0,14,64,4,0.14286,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,11,59,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,11,73,"        super(field, type);
",4,0,0,1,2,0,0,0,0,4,19,4,0.14286,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,11,75,"        if (offset == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.14286,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,11,79,"        iOffset = offset;
",4,0,0,0,0,0,0,0,0,5,17,4,0.14286,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,11,81,"        if (minValue < (field.getMinimumValue() + offset)) {
",4,2,0,3,7,0,4,0,0,10,52,4,0.14286,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,11,82,"            iMin = field.getMinimumValue() + offset;
",4,1,0,1,2,0,4,0,0,10,40,6,0.14286,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,11,86,"        if (maxValue > (field.getMaximumValue() + offset)) {
",4,2,0,3,7,0,4,0,0,10,52,4,0.14286,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,11,87,"            iMax = field.getMaximumValue() + offset;
",4,1,0,1,2,0,4,0,0,10,40,6,0.14286,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,11,91,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,11,174,"        return iMin;
",2,0,0,0,0,1,0,0,0,2,12,4,0.14286,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,11,183,"        return iMax;
",2,0,0,0,0,1,0,0,0,2,12,4,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,770,"        YearInfo(int year, long firstDayMillis) {
",6,0,0,1,3,0,0,0,0,6,41,3,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,771,"            iYear = year;
",4,0,0,0,0,0,0,0,0,5,13,5,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,772,"            iFirstDayMillis = firstDayMillis;
",4,0,0,0,0,0,0,0,0,5,33,5,0.14286,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,773,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/field/ScaledDurationField,11,47,"        super(field, type);
",4,0,0,1,2,0,0,0,0,4,19,4,0.14286,0
defect4j,time,org/joda/time/field/ScaledDurationField,11,48,"        if (scalar == 0 || scalar == 1) {
",4,3,0,1,3,0,0,0,0,7,33,4,0.14286,0
defect4j,time,org/joda/time/field/ScaledDurationField,11,51,"        iScalar = scalar;
",4,0,0,0,0,0,0,0,0,5,17,4,0.14286,0
defect4j,time,org/joda/time/field/ScaledDurationField,11,52,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/field/DecoratedDurationField,11,52,"        super(type);
",2,0,0,1,2,0,0,0,0,2,12,4,0.14286,0
defect4j,time,org/joda/time/field/DecoratedDurationField,11,53,"        if (field == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.14286,0
defect4j,time,org/joda/time/field/DecoratedDurationField,11,56,"        if (!field.isSupported()) {
",0,0,0,2,5,0,4,0,0,5,27,4,0.14286,0
defect4j,time,org/joda/time/field/DecoratedDurationField,11,59,"        iField = field;
",4,0,0,0,0,0,0,0,0,5,15,4,0.14286,0
defect4j,time,org/joda/time/field/DecoratedDurationField,11,60,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/field/MillisDurationField,11,44,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.14286,0
defect4j,time,org/joda/time/field/MillisDurationField,11,45,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,time,org/joda/time/field/MillisDurationField,11,38,"    public static final DurationField INSTANCE = new MillisDurationField();
",2,0,0,1,2,3,0,4,0,9,71,2,0.14286,0
defect4j,time,org/joda/time/field/MillisDurationField,11,62,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.14286,0
defect4j,time,org/joda/time/field/MillisDurationField,11,71,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.14286,0
defect4j,time,org/joda/time/field/MillisDurationField,11,80,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.14286,0
defect4j,time,org/joda/time/DurationField,11,209,"        if (value == Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/DurationField,11,210,"            return subtract(instant, (long) value);
",2,0,0,2,4,1,4,0,0,6,39,7,0.00000,0
defect4j,time,org/joda/time/DurationField,11,212,"        return add(instant, -value);
",2,0,0,1,2,1,4,0,0,7,28,5,0.00000,0
defect4j,time,org/joda/time/DurationField,11,224,"        if (value == Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,30,4,0.00000,0
defect4j,time,org/joda/time/DurationField,11,225,"            throw new ArithmeticException(""Long.MIN_VALUE cannot be negated"");
",0,0,0,1,2,0,0,2,0,3,66,7,0.00000,0
defect4j,time,org/joda/time/DurationField,11,227,"        return add(instant, -value);
",2,0,0,1,2,1,4,0,0,7,28,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,1282,"        Stub(String id) {
",4,0,0,1,3,0,0,2,0,6,17,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,1283,"            iID = id;
",4,0,0,0,0,0,0,0,0,5,9,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,1284,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,1287,"            out.writeUTF(iID);
",0,0,0,1,2,0,6,0,0,6,18,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,1288,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,1291,"            iID = in.readUTF();
",2,0,0,1,2,0,4,0,0,7,19,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,1292,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,1295,"            return forID(iID);
",0,0,0,1,2,1,4,0,0,4,18,6,0.00000,0
defect4j,time,org/joda/time/IllegalInstantException,11,53,"        super(message);
",2,0,0,1,2,0,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/IllegalInstantException,11,54,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalInstantException,11,63,"        super(createMessage(instantLocal, zoneId));
",0,0,0,2,4,0,6,0,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/IllegalInstantException,11,64,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalInstantException,11,67,"        String localDateTime = DateTimeFormat.forPattern(""yyyy-MM-dd'T'HH:mm:ss.SSS"").print(new Instant(instantLocal));
",4,0,0,3,6,0,6,4,0,15,111,4,0.00000,0
defect4j,time,org/joda/time/IllegalInstantException,11,68,"        String zone = (zoneId != null ? "" ("" + zoneId + "")"" : """");
",6,2,0,2,4,0,0,2,0,13,58,4,0.00000,0
defect4j,time,org/joda/time/IllegalInstantException,11,69,"        return ""Illegal instant due to time zone offset transition (daylight savings time 'gap'): "" + localDateTime + zone;
",4,1,0,1,2,1,0,0,0,6,115,4,0.00000,0
defect4j,time,org/joda/time/IllegalInstantException,11,80,"        if (ex instanceof IllegalInstantException) {
",2,0,0,1,3,0,0,2,0,4,44,5,0.00000,0
defect4j,time,org/joda/time/IllegalInstantException,11,81,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/IllegalInstantException,11,83,"        while (ex.getCause() != null && ex.getCause() != ex) {
",2,3,0,3,7,0,8,0,0,13,54,4,0.00000,0
defect4j,time,org/joda/time/IllegalInstantException,11,84,"            return isIllegalInstant(ex.getCause());
",0,0,0,2,4,1,6,0,0,6,39,7,0.00000,0
defect4j,time,org/joda/time/IllegalInstantException,11,86,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,378,"        return iName;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,410,"        return getField(chronology).isSupported();
",0,0,0,2,4,1,6,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,419,"        return getName();
",0,0,0,1,2,1,2,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,41,"public abstract class DateTimeFieldType implements Serializable {
",2,0,0,0,1,2,0,2,0,6,65,1,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,604,"        Chronology chrono = new BaseChronology() {
",2,0,0,1,3,0,0,4,0,6,42,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,606,"                return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,609,"                return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,612,"                return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,615,"                return getClass().getName();
",0,0,0,2,4,1,4,0,0,4,28,11,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,102,"        long instant = year().set(0, year);
",2,0,0,2,4,0,6,0,0,8,35,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,103,"        instant = monthOfYear().set(instant, monthOfYear);
",2,0,0,2,4,0,8,0,0,11,50,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,104,"        instant = dayOfMonth().set(instant, dayOfMonth);
",2,0,0,2,4,0,8,0,0,11,48,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,105,"        return millisOfDay().set(instant, millisOfDay);
",0,0,0,2,4,1,8,0,0,8,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,132,"        long instant = year().set(0, year);
",2,0,0,2,4,0,6,0,0,8,35,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,133,"        instant = monthOfYear().set(instant, monthOfYear);
",2,0,0,2,4,0,8,0,0,11,50,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,134,"        instant = dayOfMonth().set(instant, dayOfMonth);
",2,0,0,2,4,0,8,0,0,11,48,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,135,"        instant = hourOfDay().set(instant, hourOfDay);
",2,0,0,2,4,0,8,0,0,11,46,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,136,"        instant = minuteOfHour().set(instant, minuteOfHour);
",2,0,0,2,4,0,8,0,0,11,52,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,137,"        instant = secondOfMinute().set(instant, secondOfMinute);
",2,0,0,2,4,0,8,0,0,11,56,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,138,"        return millisOfSecond().set(instant, millisOfSecond);
",0,0,0,2,4,1,8,0,0,8,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,163,"        instant = hourOfDay().set(instant, hourOfDay);
",2,0,0,2,4,0,8,0,0,11,46,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,164,"        instant = minuteOfHour().set(instant, minuteOfHour);
",2,0,0,2,4,0,8,0,0,11,52,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,165,"        instant = secondOfMinute().set(instant, secondOfMinute);
",2,0,0,2,4,0,8,0,0,11,56,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,166,"        return millisOfSecond().set(instant, millisOfSecond);
",0,0,0,2,4,1,8,0,0,8,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,183,"        int size = partial.size();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,184,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,185,"            int value = values[i];
",2,0,1,1,2,0,0,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,186,"            DateTimeField field = partial.getField(i);
",2,0,0,1,2,0,6,2,0,10,42,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,187,"            if (value < field.getMinimumValue()) {
",2,1,0,2,5,0,4,0,0,7,38,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,188,"                throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,192,"            if (value > field.getMaximumValue()) {
",2,1,0,2,5,0,4,0,0,7,38,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,193,"                throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,199,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,200,"            int value = values[i];
",2,0,1,1,2,0,0,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,201,"            DateTimeField field = partial.getField(i);
",2,0,0,1,2,0,6,2,0,10,42,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,202,"            if (value < field.getMinimumValue(partial, values)) {
",2,1,0,2,5,0,8,0,0,11,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,203,"                throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,207,"            if (value > field.getMaximumValue(partial, values)) {
",2,1,0,2,5,0,8,0,0,11,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,208,"                throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,213,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,223,"        int size = partial.size();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,224,"        int[] values = new int[size];
",2,0,1,2,4,0,0,0,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,225,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,226,"            values[i] = partial.getFieldType(i).getField(this).get(instant);
",0,0,1,4,8,0,12,0,0,17,64,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,228,"        return values;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,239,"        for (int i = 0, isize = partial.size(); i < isize; i++) {
",10,1,0,2,5,0,4,0,0,16,57,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,240,"            instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));
",2,0,0,4,8,0,18,0,0,21,83,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,242,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,279,"            long current = 0;
",2,0,0,0,0,0,0,0,0,2,17,7,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,280,"            for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,281,"                DurationField field = period.getFieldType(i).getField(this);
",2,0,0,2,4,0,8,2,0,12,60,8,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,282,"                if (field.isPrecise()) {
",0,0,0,2,5,0,4,0,0,4,24,9,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,283,"                    int value = field.getDifference(duration, current);
",2,0,0,1,2,0,8,0,0,10,51,11,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,284,"                    current = field.add(current, value);
",2,0,0,1,2,0,8,0,0,11,36,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,285,"                    values[i] = value;
",2,0,1,1,2,0,0,0,0,7,18,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,301,"        if (scalar != 0 && period != null) {
",4,3,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,302,"            for (int i = 0, isize = period.size(); i < isize; i++) {
",10,1,0,2,5,0,4,0,0,16,56,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,303,"                long value = period.getValue(i); // use long to allow for multiplication (fits OK)
",2,0,0,2,4,0,6,0,0,8,82,9,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,304,"                if (value != 0) {
",2,1,0,1,3,0,0,0,0,3,17,8,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,305,"                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);
",6,1,0,3,6,0,12,0,0,20,77,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,309,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,322,"        if (duration == 0 || scalar == 0) {
",4,3,0,1,3,0,0,0,0,7,35,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,323,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,325,"        long add = FieldUtils.safeMultiply(duration, scalar);
",2,0,0,1,2,0,8,0,0,10,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,326,"        return FieldUtils.safeAdd(instant, add);
",0,0,0,1,2,1,8,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,337,"        return UnsupportedDurationField.getInstance(DurationFieldType.millis());
",0,0,0,2,4,1,8,0,0,8,72,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,346,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfSecond(), millis());
",0,0,0,3,6,1,10,0,0,10,90,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,355,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfDay(), millis());
",0,0,0,3,6,1,10,0,0,10,87,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,366,"        return UnsupportedDurationField.getInstance(DurationFieldType.seconds());
",0,0,0,2,4,1,8,0,0,8,73,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,375,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfMinute(), seconds());
",0,0,0,3,6,1,10,0,0,10,91,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,384,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfDay(), seconds());
",0,0,0,3,6,1,10,0,0,10,88,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,395,"        return UnsupportedDurationField.getInstance(DurationFieldType.minutes());
",0,0,0,2,4,1,8,0,0,8,73,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,404,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfHour(), minutes());
",0,0,0,3,6,1,10,0,0,10,89,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,413,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfDay(), minutes());
",0,0,0,3,6,1,10,0,0,10,88,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,424,"        return UnsupportedDurationField.getInstance(DurationFieldType.hours());
",0,0,0,2,4,1,8,0,0,8,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,433,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfDay(), hours());
",0,0,0,3,6,1,10,0,0,10,84,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,442,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfDay(), hours());
",0,0,0,3,6,1,10,0,0,10,89,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,453,"        return UnsupportedDurationField.getInstance(DurationFieldType.halfdays());
",0,0,0,2,4,1,8,0,0,8,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,462,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfHalfday(), hours());
",0,0,0,3,6,1,10,0,0,10,88,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,471,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfHalfday(), hours());
",0,0,0,3,6,1,10,0,0,10,93,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,480,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.halfdayOfDay(), halfdays());
",0,0,0,3,6,1,10,0,0,10,90,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,491,"        return UnsupportedDurationField.getInstance(DurationFieldType.days());
",0,0,0,2,4,1,8,0,0,8,70,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,504,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfWeek(), days());
",0,0,0,3,6,1,10,0,0,10,83,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,513,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfMonth(), days());
",0,0,0,3,6,1,10,0,0,10,84,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,522,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfYear(), days());
",0,0,0,3,6,1,10,0,0,10,83,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,533,"        return UnsupportedDurationField.getInstance(DurationFieldType.weeks());
",0,0,0,2,4,1,8,0,0,8,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,542,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekOfWeekyear(), weeks());
",0,0,0,3,6,1,10,0,0,10,89,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,553,"        return UnsupportedDurationField.getInstance(DurationFieldType.weekyears());
",0,0,0,2,4,1,8,0,0,8,75,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,562,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyear(), weekyears());
",0,0,0,3,6,1,10,0,0,10,87,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,571,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyearOfCentury(), weekyears());
",0,0,0,3,6,1,10,0,0,10,96,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,582,"        return UnsupportedDurationField.getInstance(DurationFieldType.months());
",0,0,0,2,4,1,8,0,0,8,72,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,591,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.monthOfYear(), months());
",0,0,0,3,6,1,10,0,0,10,87,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,602,"        return UnsupportedDurationField.getInstance(DurationFieldType.years());
",0,0,0,2,4,1,8,0,0,8,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,611,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.year(), years());
",0,0,0,3,6,1,10,0,0,10,79,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,620,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfEra(), years());
",0,0,0,3,6,1,10,0,0,10,84,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,629,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfCentury(), years());
",0,0,0,3,6,1,10,0,0,10,88,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,640,"        return UnsupportedDurationField.getInstance(DurationFieldType.centuries());
",0,0,0,2,4,1,8,0,0,8,75,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,649,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.centuryOfEra(), centuries());
",0,0,0,3,6,1,10,0,0,10,91,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,11,669,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.era(), eras());
",0,0,0,3,6,1,10,0,0,10,77,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,691,"            throw new IllegalArgumentException(""Id must not be null"");
",0,0,0,1,2,0,0,2,0,4,58,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,145,"                        } catch (RuntimeException ex) {
",2,0,0,1,4,0,0,2,0,4,31,14,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,149,"                            temp = forTimeZone(TimeZone.getDefault());
",2,0,0,2,4,0,6,0,0,9,42,14,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,151,"                    } catch (IllegalArgumentException ex) {
",2,0,0,1,4,0,0,2,0,4,39,12,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,155,"                        temp = UTC;
",4,0,0,0,0,0,0,0,0,5,11,12,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,176,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setDefault""));
",0,0,0,2,4,0,4,2,0,7,70,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,179,"            throw new IllegalArgumentException(""The datetime zone must not be null"");
",0,0,0,1,2,0,0,2,0,4,73,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,205,"            return getDefault();
",0,0,0,1,2,1,2,0,0,2,20,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,208,"            return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,214,"        if (id.startsWith(""+"") || id.startsWith(""-"")) {
",0,1,0,3,7,0,8,0,0,11,47,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,215,"            int offset = parseOffset(id);
",2,0,0,1,2,0,4,0,0,6,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,216,"            if (offset == 0L) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,217,"                return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,219,"                id = printOffset(offset);
",2,0,0,1,2,0,4,0,0,7,25,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,220,"                return fixedOffsetZone(id, offset);
",0,0,0,1,2,1,6,0,0,6,35,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,223,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");
",2,1,0,1,2,0,0,2,0,7,90,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,237,"        return forOffsetHoursMinutes(hoursOffset, 0);
",0,0,0,1,2,1,4,0,0,4,45,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,254,"        if (hoursOffset == 0 && minutesOffset == 0) {
",4,3,0,1,3,0,0,0,0,7,45,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,255,"            return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,257,"        if (minutesOffset < 0 || minutesOffset > 59) {
",4,3,0,1,3,0,0,0,0,7,46,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,258,"            throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);
",2,1,0,1,2,0,0,2,0,6,77,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,260,"        int offset = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,262,"            int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);
",2,0,0,1,2,0,6,0,0,8,62,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,263,"            if (hoursInMinutes < 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,264,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);
",4,0,0,1,2,0,6,0,0,12,67,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,266,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);
",2,0,0,1,2,0,8,0,0,11,66,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,268,"            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
",6,0,0,1,2,0,6,0,0,13,85,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,271,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,269,"        } catch (ArithmeticException ex) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,270,"            throw new IllegalArgumentException(""Offset is too large"");
",0,0,0,1,2,0,0,2,0,3,58,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,272,"        return forOffsetMillis(offset);
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,282,"        String id = printOffset(millisOffset);
",2,0,0,1,2,0,4,2,0,8,38,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,283,"        return fixedOffsetZone(id, millisOffset);
",0,0,0,1,2,1,6,0,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,302,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,303,"            return getDefault();
",0,0,0,1,2,1,2,0,0,2,20,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,305,"        final String id = zone.getID();
",2,0,0,1,2,1,4,2,0,9,31,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,306,"        if (id.equals(""UTC"")) {
",0,0,0,2,5,0,4,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,307,"            return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,311,"        DateTimeZone dtz = null;
",2,0,0,0,0,0,0,2,0,4,24,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,312,"        String convId = getConvertedId(id);
",2,0,0,1,2,0,4,2,0,8,35,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,313,"        if (convId != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,314,"            dtz = cProvider.getZone(convId);
",2,0,0,1,2,0,6,0,0,9,32,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,316,"        if (dtz == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,317,"            dtz = cProvider.getZone(id);
",2,0,0,1,2,0,6,0,0,9,28,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,319,"        if (dtz != null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,320,"            return dtz;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,324,"        if (convId == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,325,"            convId = zone.getID();
",2,0,0,1,2,0,4,0,0,7,22,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,326,"            if (convId.startsWith(""GMT+"") || convId.startsWith(""GMT-"")) {
",0,1,0,3,7,0,8,0,0,11,61,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,327,"                convId = convId.substring(3);
",2,0,0,1,2,0,4,0,0,7,29,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,328,"                int offset = parseOffset(convId);
",2,0,0,1,2,0,4,0,0,6,33,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,329,"                if (offset == 0L) {
",2,1,0,1,3,0,0,0,0,3,19,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,330,"                    return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,11,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,332,"                    convId = printOffset(offset);
",2,0,0,1,2,0,4,0,0,7,29,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,333,"                    return fixedOffsetZone(convId, offset);
",0,0,0,1,2,1,6,0,0,6,39,11,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,337,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");
",2,1,0,1,2,0,0,2,0,7,90,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,349,"        if (offset == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,350,"            return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,352,"        if (iFixedOffsetCache == null) {
",2,1,0,1,3,0,0,0,0,3,32,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,353,"            iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();
",2,0,0,1,2,0,0,8,0,11,71,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,356,"        Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);
",2,0,0,1,2,0,6,4,0,12,56,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,357,"        if (ref != null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,358,"            zone = ref.get();
",2,0,0,1,2,0,4,0,0,7,17,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,359,"            if (zone != null) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,360,"                return zone;
",2,0,0,0,0,1,0,0,0,2,12,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,363,"        zone = new FixedDateTimeZone(id, null, offset, offset);
",8,0,0,1,2,0,0,2,0,12,55,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,364,"        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));
",2,0,0,2,4,0,6,4,0,12,65,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,365,"        return zone;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,374,"        return cAvailableIDs;
",2,0,0,0,0,1,0,0,0,2,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,387,"        return cProvider;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,401,"        SecurityManager sm = System.getSecurityManager();
",2,0,0,1,2,0,4,2,0,8,49,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,402,"        if (sm != null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,403,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setProvider""));
",0,0,0,2,4,0,4,2,0,7,71,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,405,"        setProvider0(provider);
",0,0,0,1,2,0,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,406,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,420,"            throw new IllegalArgumentException
",0,0,0,0,0,0,0,2,0,2,34,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,424,"            throw new IllegalArgumentException(""The provider doesn't support UTC"");
",0,0,0,1,2,0,0,2,0,3,71,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,427,"            throw new IllegalArgumentException(""Invalid UTC zone provided"");
",0,0,0,1,2,0,0,2,0,3,64,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,450,"                    provider = (Provider) Class.forName(providerClass).newInstance();
",2,0,0,3,6,0,8,2,0,13,65,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,454,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,451,"                } catch (Exception ex) {
",2,0,0,1,4,0,0,2,0,4,24,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,452,"                    Thread thread = Thread.currentThread();
",2,0,0,1,2,0,4,2,0,8,39,11,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,453,"                    thread.getThreadGroup().uncaughtException(thread, ex);
",0,0,0,2,4,0,10,0,0,10,54,12,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,456,"        } catch (SecurityException ex) {
",2,0,0,1,4,0,0,2,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,463,"            } catch (Exception ex) {
",2,0,0,1,4,0,0,2,0,4,24,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,464,"                Thread thread = Thread.currentThread();
",2,0,0,1,2,0,4,2,0,8,39,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,465,"                thread.getThreadGroup().uncaughtException(thread, ex);
",0,0,0,2,4,0,10,0,0,10,54,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,470,"            provider = new UTCProvider();
",2,0,0,1,2,0,0,2,0,5,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,486,"        return cNameProvider;
",2,0,0,0,0,1,0,0,0,2,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,500,"        SecurityManager sm = System.getSecurityManager();
",2,0,0,1,2,0,4,2,0,8,49,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,501,"        if (sm != null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,502,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setNameProvider""));
",0,0,0,2,4,0,4,2,0,7,75,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,504,"        setNameProvider0(nameProvider);
",0,0,0,1,2,0,4,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,505,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,534,"                    nameProvider = (NameProvider) Class.forName(providerClass).newInstance();
",2,0,0,3,6,0,8,2,0,13,73,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,538,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,535,"                } catch (Exception ex) {
",2,0,0,1,4,0,0,2,0,4,24,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,536,"                    Thread thread = Thread.currentThread();
",2,0,0,1,2,0,4,2,0,8,39,11,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,537,"                    thread.getThreadGroup().uncaughtException(thread, ex);
",0,0,0,2,4,0,10,0,0,10,54,12,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,540,"        } catch (SecurityException ex) {
",2,0,0,1,4,0,0,2,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,559,"        Map<String, String> map = cZoneIdConversion;
",4,0,0,0,0,0,0,6,0,10,44,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,560,"        if (map == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,562,"            map = new HashMap<String, String>();
",2,0,0,1,2,0,0,6,0,9,36,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,563,"            map.put(""GMT"", ""UTC"");
",0,0,0,1,2,0,4,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,564,"            map.put(""WET"", ""WET"");
",0,0,0,1,2,0,4,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,565,"            map.put(""CET"", ""CET"");
",0,0,0,1,2,0,4,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,566,"            map.put(""MET"", ""CET"");
",0,0,0,1,2,0,4,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,567,"            map.put(""ECT"", ""CET"");
",0,0,0,1,2,0,4,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,568,"            map.put(""EET"", ""EET"");
",0,0,0,1,2,0,4,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,569,"            map.put(""MIT"", ""Pacific/Apia"");
",0,0,0,1,2,0,4,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,570,"            map.put(""HST"", ""Pacific/Honolulu"");  // JDK 1.1 compatible
",0,0,0,1,2,0,4,0,0,6,58,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,571,"            map.put(""AST"", ""America/Anchorage"");
",0,0,0,1,2,0,4,0,0,6,36,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,572,"            map.put(""PST"", ""America/Los_Angeles"");
",0,0,0,1,2,0,4,0,0,6,38,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,573,"            map.put(""MST"", ""America/Denver"");  // JDK 1.1 compatible
",0,0,0,1,2,0,4,0,0,6,56,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,574,"            map.put(""PNT"", ""America/Phoenix"");
",0,0,0,1,2,0,4,0,0,6,34,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,575,"            map.put(""CST"", ""America/Chicago"");
",0,0,0,1,2,0,4,0,0,6,34,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,576,"            map.put(""EST"", ""America/New_York"");  // JDK 1.1 compatible
",0,0,0,1,2,0,4,0,0,6,58,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,577,"            map.put(""IET"", ""America/Indiana/Indianapolis"");
",0,0,0,1,2,0,4,0,0,6,47,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,578,"            map.put(""PRT"", ""America/Puerto_Rico"");
",0,0,0,1,2,0,4,0,0,6,38,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,579,"            map.put(""CNT"", ""America/St_Johns"");
",0,0,0,1,2,0,4,0,0,6,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,580,"            map.put(""AGT"", ""America/Argentina/Buenos_Aires"");
",0,0,0,1,2,0,4,0,0,6,49,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,581,"            map.put(""BET"", ""America/Sao_Paulo"");
",0,0,0,1,2,0,4,0,0,6,36,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,582,"            map.put(""ART"", ""Africa/Cairo"");
",0,0,0,1,2,0,4,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,583,"            map.put(""CAT"", ""Africa/Harare"");
",0,0,0,1,2,0,4,0,0,6,32,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,584,"            map.put(""EAT"", ""Africa/Addis_Ababa"");
",0,0,0,1,2,0,4,0,0,6,37,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,585,"            map.put(""NET"", ""Asia/Yerevan"");
",0,0,0,1,2,0,4,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,586,"            map.put(""PLT"", ""Asia/Karachi"");
",0,0,0,1,2,0,4,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,587,"            map.put(""IST"", ""Asia/Kolkata"");
",0,0,0,1,2,0,4,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,588,"            map.put(""BST"", ""Asia/Dhaka"");
",0,0,0,1,2,0,4,0,0,6,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,589,"            map.put(""VST"", ""Asia/Ho_Chi_Minh"");
",0,0,0,1,2,0,4,0,0,6,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,590,"            map.put(""CTT"", ""Asia/Shanghai"");
",0,0,0,1,2,0,4,0,0,6,32,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,591,"            map.put(""JST"", ""Asia/Tokyo"");
",0,0,0,1,2,0,4,0,0,6,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,592,"            map.put(""ACT"", ""Australia/Darwin"");
",0,0,0,1,2,0,4,0,0,6,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,593,"            map.put(""AET"", ""Australia/Sydney"");
",0,0,0,1,2,0,4,0,0,6,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,594,"            map.put(""SST"", ""Pacific/Guadalcanal"");
",0,0,0,1,2,0,4,0,0,6,38,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,595,"            map.put(""NST"", ""Pacific/Auckland"");
",0,0,0,1,2,0,4,0,0,6,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,596,"            cZoneIdConversion = map;
",4,0,0,0,0,0,0,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,598,"        return map.get(id);
",0,0,0,1,2,1,6,0,0,6,19,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,604,"        Chronology chrono = new BaseChronology() {
",2,0,0,1,3,0,0,4,0,6,42,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,618,"        return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);
",0,0,0,4,8,1,10,0,0,11,72,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,631,"        StringBuffer buf = new StringBuffer();
",2,0,0,1,2,0,0,4,0,6,38,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,632,"        if (offset >= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,633,"            buf.append('+');
",0,0,0,1,2,0,4,0,0,5,16,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,635,"            buf.append('-');
",0,0,0,1,2,0,4,0,0,5,16,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,636,"            offset = -offset;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,639,"        int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,0,0,0,0,0,0,9,55,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,640,"        FormatUtils.appendPaddedInteger(buf, hours, 2);
",0,0,0,1,2,0,8,0,0,8,47,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,641,"        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,1,2,0,0,0,0,10,58,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,643,"        int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,9,59,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,644,"        buf.append(':');
",0,0,0,1,2,0,4,0,0,5,16,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,645,"        FormatUtils.appendPaddedInteger(buf, minutes, 2);
",0,0,0,1,2,0,8,0,0,8,49,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,646,"        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,10,56,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,647,"        if (offset == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,648,"            return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,651,"        int seconds = offset / DateTimeConstants.MILLIS_PER_SECOND;
",8,1,0,0,0,0,0,0,0,9,59,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,652,"        buf.append(':');
",0,0,0,1,2,0,4,0,0,5,16,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,653,"        FormatUtils.appendPaddedInteger(buf, seconds, 2);
",0,0,0,1,2,0,8,0,0,8,49,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,654,"        offset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;
",8,1,0,0,0,0,0,0,0,10,56,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,655,"        if (offset == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,656,"            return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,659,"        buf.append('.');
",0,0,0,1,2,0,4,0,0,5,16,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,660,"        FormatUtils.appendPaddedInteger(buf, offset, 3);
",0,0,0,1,2,0,8,0,0,8,48,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,661,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,670,"        if (cOffsetFormatter == null) {
",2,1,0,1,3,0,0,0,0,3,31,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,671,"            cOffsetFormatter = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,49,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,675,"        return cOffsetFormatter;
",2,0,0,0,0,1,0,0,0,2,24,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,729,"        return getShortName(instant, null);
",0,0,0,1,2,1,4,0,0,5,35,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,744,"        if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,745,"            locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,747,"        String nameKey = getNameKey(instant);
",2,0,0,1,2,0,4,2,0,8,37,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,748,"        if (nameKey == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,749,"            return iID;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,751,"        String name = cNameProvider.getShortName(locale, iID, nameKey);
",2,0,0,1,2,0,10,2,0,14,63,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,752,"        if (name != null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,753,"            return name;
",2,0,0,0,0,1,0,0,0,2,12,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,755,"        return printOffset(getOffset(instant));
",0,0,0,2,4,1,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,769,"        return getName(instant, null);
",0,0,0,1,2,1,4,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,784,"        if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,785,"            locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,787,"        String nameKey = getNameKey(instant);
",2,0,0,1,2,0,4,2,0,8,37,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,788,"        if (nameKey == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,789,"            return iID;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,791,"        String name = cNameProvider.getName(locale, iID, nameKey);
",2,0,0,1,2,0,10,2,0,14,58,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,792,"        if (name != null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,793,"            return name;
",2,0,0,0,0,1,0,0,0,2,12,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,795,"        return printOffset(getOffset(instant));
",0,0,0,2,4,1,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,813,"        if (instant == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,814,"            return getOffset(DateTimeUtils.currentTimeMillis());
",0,0,0,2,4,1,6,0,0,6,52,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,816,"        return getOffset(instant.getMillis());
",0,0,0,2,4,1,6,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,844,"        return getOffset(instant) == getStandardOffset(instant);
",0,1,0,2,4,1,8,0,0,9,56,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,882,"        final int offsetLocal = getOffset(instantLocal);
",2,0,0,1,2,1,4,0,0,7,48,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,884,"        final long instantAdjusted = instantLocal - offsetLocal;
",6,1,0,0,0,1,0,0,0,8,56,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,885,"        final int offsetAdjusted = getOffset(instantAdjusted);
",2,0,0,1,2,1,4,0,0,7,54,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,887,"        if (offsetLocal != offsetAdjusted) {
",4,1,0,1,3,0,0,0,0,5,36,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,890,"            if ((offsetLocal - offsetAdjusted) < 0) {
",4,2,0,2,5,0,0,0,0,6,41,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,894,"                long nextLocal = nextTransition(instantAdjusted);
",2,0,0,1,2,0,4,0,0,6,49,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,895,"                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
",6,1,0,1,2,0,2,0,0,9,66,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,896,"                if (nextLocal != nextAdjusted) {
",4,1,0,1,3,0,0,0,0,5,32,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,897,"                    return offsetLocal;
",2,0,0,0,0,1,0,0,0,2,19,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,899,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,900,"        } else if (offsetLocal >= 0) {
",2,1,0,1,4,0,0,0,0,3,30,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,901,"            long prev = previousTransition(instantAdjusted);
",2,0,0,1,2,0,4,0,0,6,48,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,902,"            if (prev < instantAdjusted) {
",4,1,0,1,3,0,0,0,0,5,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,903,"                int offsetPrev = getOffset(prev);
",2,0,0,1,2,0,4,0,0,6,33,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,904,"                int diff = offsetPrev - offsetLocal;
",6,1,0,0,0,0,0,0,0,7,36,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,905,"                if (instantAdjusted - prev <= diff) {
",6,2,0,1,3,0,0,0,0,8,37,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,906,"                    return offsetPrev;
",2,0,0,0,0,1,0,0,0,2,18,11,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,910,"        return offsetAdjusted;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,924,"        int offset = getOffset(instantUTC);
",2,0,0,1,2,0,4,0,0,6,35,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,925,"        long instantLocal = instantUTC + offset;
",6,1,0,0,0,0,0,0,0,7,40,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,927,"        if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {
",8,5,0,3,7,0,0,0,0,13,68,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,928,"            throw new ArithmeticException(""Adding time zone offset caused overflow"");
",0,0,0,1,2,0,0,2,0,3,73,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,930,"        return instantLocal;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,951,"        int offsetOriginal = getOffset(originalInstantUTC);
",2,0,0,1,2,0,4,0,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,952,"        long instantUTC = instantLocal - offsetOriginal;
",6,1,0,0,0,0,0,0,0,7,48,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,953,"        int offsetLocalFromOriginal = getOffset(instantUTC);
",2,0,0,1,2,0,4,0,0,6,52,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,954,"        if (offsetLocalFromOriginal == offsetOriginal) {
",4,1,0,1,3,0,0,0,0,5,48,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,955,"            return instantUTC;
",2,0,0,0,0,1,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,957,"        return convertLocalToUTC(instantLocal, strict);
",0,0,0,1,2,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,974,"        int offsetLocal = getOffset(instantLocal);
",2,0,0,1,2,0,4,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,976,"        int offset = getOffset(instantLocal - offsetLocal);
",6,1,0,1,2,0,2,0,0,9,51,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,978,"        if (offsetLocal != offset) {
",4,1,0,1,3,0,0,0,0,5,28,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,982,"            if (strict || offsetLocal < 0) {
",4,2,0,1,3,0,0,0,0,6,32,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,984,"                long nextLocal = nextTransition(instantLocal - offsetLocal);
",6,1,0,1,2,0,2,0,0,9,60,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,985,"                if (nextLocal == (instantLocal - offsetLocal)) {
",6,2,0,2,5,0,0,0,0,8,48,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,986,"                    nextLocal = Long.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,7,27,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,988,"                long nextAdjusted = nextTransition(instantLocal - offset);
",6,1,0,1,2,0,2,0,0,9,58,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,989,"                if (nextAdjusted == (instantLocal - offset)) {
",6,2,0,2,5,0,0,0,0,8,46,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,990,"                    nextAdjusted = Long.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,7,30,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,992,"                if (nextLocal != nextAdjusted) {
",4,1,0,1,3,0,0,0,0,5,32,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,994,"                    if (strict) {
",2,0,0,1,3,0,0,0,0,2,13,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,996,"                        throw new IllegalInstantException(instantLocal, getID());
",2,0,0,2,4,0,2,2,0,6,57,13,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,1001,"                        offset = offsetLocal;
",4,0,0,0,0,0,0,0,0,5,21,12,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,1007,"        long instantUTC = instantLocal - offset;
",6,1,0,0,0,0,0,0,0,7,40,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,1009,"        if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {
",8,5,0,3,7,0,0,0,0,13,69,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,1010,"            throw new ArithmeticException(""Subtracting time zone offset caused overflow"");
",0,0,0,1,2,0,0,2,0,3,78,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,1012,"        return instantUTC;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,1026,"        if (newZone == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,1027,"            newZone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,36,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,1029,"        if (newZone == this) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,1030,"            return oldInstant;
",2,0,0,0,0,1,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,1032,"        long instantLocal = convertUTCToLocal(oldInstant);
",2,0,0,1,2,0,4,0,0,6,50,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,1033,"        return newZone.convertLocalToUTC(instantLocal, false, oldInstant);
",0,0,0,1,2,1,8,0,0,9,66,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,1143,"        if (isFixed()) {
",0,0,0,2,5,0,2,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,1144,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,1147,"            localDateTime.toDateTime(this);
",0,0,0,1,2,0,4,0,0,4,31,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,1148,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,1149,"        } catch (IllegalInstantException ex) {
",2,0,0,1,4,0,0,2,0,4,38,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,1150,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,1165,"        long instantBefore = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;
",8,2,0,0,0,0,0,0,0,10,69,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,1166,"        long instantAfter = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;
",8,2,0,0,0,0,0,0,0,10,68,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,1167,"        long offsetBefore = getOffset(instantBefore);
",2,0,0,1,2,0,4,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,1168,"        long offsetAfter = getOffset(instantAfter);
",2,0,0,1,2,0,4,0,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,1169,"        if (offsetBefore <= offsetAfter) {
",4,1,0,1,3,0,0,0,0,5,34,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,1170,"            return instant;  // not an overlap (less than is a gap, equal is normal case)
",2,0,0,1,2,1,0,0,0,2,77,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,1174,"        long diff = offsetBefore - offsetAfter;
",6,1,0,0,0,0,0,0,0,7,39,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,1175,"        long transition = nextTransition(instantBefore);
",2,0,0,1,2,0,4,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,1176,"        long overlapStart = transition - diff;
",6,1,0,0,0,0,0,0,0,7,38,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,1177,"        long overlapEnd = transition + diff;
",6,1,0,0,0,0,0,0,0,7,36,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,1178,"        if (instant < overlapStart || instant >= overlapEnd) {
",8,3,0,1,3,0,0,0,0,11,54,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,1179,"          return instant;  // not an overlap
",2,0,0,0,0,1,0,0,0,2,34,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,1183,"        long afterStart = instant - overlapStart;
",6,1,0,0,0,0,0,0,0,7,41,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,1184,"        if (afterStart >= diff) {
",4,1,0,1,3,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,1186,"          return earlierOrLater ? instant : instant - diff;
",8,1,0,0,0,1,0,0,0,9,49,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,1189,"          return earlierOrLater ? instant + diff : instant;
",8,1,0,0,0,1,0,0,0,9,49,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,1231,"        return java.util.TimeZone.getTimeZone(iID);
",6,0,0,1,2,1,4,0,0,10,43,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,1248,"        return 57 + getID().hashCode();
",0,1,0,2,4,1,4,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,1256,"        return getID();
",0,0,0,1,2,1,2,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,11,1266,"        return new Stub(iID);
",2,0,0,1,2,1,0,2,0,4,21,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,82,"    private UnsupportedDateTimeField(DateTimeFieldType type, DurationField durationField) {
",6,0,0,1,3,1,0,4,0,11,87,2,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,83,"        if (type == null || durationField == null) {
",4,3,0,1,3,0,0,0,0,7,44,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,84,"            throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,8,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,86,"        iType = type;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,87,"        iDurationField = durationField;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,88,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,55,"        if (cCache == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,56,"            cCache = new HashMap<DateTimeFieldType, UnsupportedDateTimeField>(7);
",2,0,0,1,2,0,0,6,0,9,69,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,57,"            field = null;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,59,"            field = cCache.get(type);
",2,0,0,1,2,0,6,0,0,9,25,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,60,"            if (field != null && field.getDurationField() != durationField) {
",4,3,0,2,5,0,4,0,0,11,65,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,61,"                field = null;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,64,"        if (field == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,65,"            field = new UnsupportedDateTimeField(type, durationField);
",6,0,0,1,2,0,0,2,0,9,58,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,66,"            cCache.put(type, field);
",0,0,0,1,2,0,8,0,0,8,24,7,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,68,"        return field;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,95,"        return iType;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,99,"        return iType.getName();
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,108,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,117,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,126,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,135,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,144,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,153,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,162,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,171,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,180,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,189,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,198,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,207,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,216,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,225,"        return getDurationField().add(instant, value);
",0,0,0,2,4,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,234,"        return getDurationField().add(instant, value);
",0,0,0,2,4,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,243,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,252,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,261,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,270,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,279,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,75,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,288,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,81,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,297,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,306,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,315,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,324,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,333,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,343,"        return iDurationField;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,352,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,361,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,370,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,379,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,388,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,397,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,406,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,415,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,424,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,433,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,442,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,451,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,460,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,469,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,478,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,487,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,496,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,505,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,514,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,523,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,533,"        return ""UnsupportedDateTimeField"";
",0,0,0,0,0,1,0,0,0,1,34,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,540,"        return getInstance(iType, iDurationField);
",0,0,0,1,2,1,6,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,11,544,"        return new UnsupportedOperationException(iType + "" field is unsupported"");
",2,1,0,1,2,1,0,2,0,6,74,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,11,79,"        return iType;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,11,83,"        return iType.getName();
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,11,101,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,11,110,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,11,119,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,11,128,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,11,137,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,11,146,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,11,155,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,11,164,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,11,173,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,11,182,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,11,191,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,11,200,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,11,209,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,11,218,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,11,227,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,11,238,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,11,239,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,11,240,"        } else if (obj instanceof UnsupportedDurationField) {
",2,0,0,1,4,0,0,2,0,4,53,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,11,241,"            UnsupportedDurationField other = (UnsupportedDurationField) obj;
",4,0,0,1,2,0,0,4,0,8,64,7,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,11,242,"            if (other.getName() == null) {
",0,1,0,2,5,0,4,0,0,5,30,7,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,11,243,"                return (getName() == null);
",0,1,0,2,4,1,2,0,0,4,27,10,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,11,245,"            return (other.getName().equals(getName()));
",0,0,0,4,8,1,8,0,0,8,43,9,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,11,247,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,11,256,"        return getName().hashCode();
",0,0,0,2,4,1,4,0,0,4,28,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,11,265,"        return ""UnsupportedDurationField["" + getName() + ']';
",0,1,0,2,4,1,2,0,0,5,53,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,11,272,"        return getInstance(iType);
",0,0,0,1,2,1,4,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,11,276,"        return new UnsupportedOperationException(iType + "" field is unsupported"");
",2,1,0,1,2,1,0,2,0,6,74,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,11,32,"public final class UnsupportedDurationField extends DurationField implements Serializable {
",2,0,0,0,1,2,0,4,0,8,91,1,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));
",0,0,0,3,6,0,12,0,0,14,79,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,109,"        iDateTimeFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,110,"        iDurationFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,111,"        iFieldName = fieldType.getName();
",2,0,0,1,2,0,4,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,112,"        iNumberValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,113,"        iStringValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,114,"        iLowerBound = lowerBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,115,"        iUpperBound = upperBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,116,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,117,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,129,"        super(createMessage(fieldType.getName(), value, null, null, explain));
",0,0,0,3,6,0,10,0,0,12,70,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,130,"        iDateTimeFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,131,"        iDurationFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,132,"        iFieldName = fieldType.getName();
",2,0,0,1,2,0,4,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,133,"        iNumberValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,134,"        iStringValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,135,"        iLowerBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,136,"        iUpperBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,137,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,138,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,150,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));
",0,0,0,3,6,0,12,0,0,14,79,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,151,"        iDateTimeFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,152,"        iDurationFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,153,"        iFieldName = fieldType.getName();
",2,0,0,1,2,0,4,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,154,"        iNumberValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,155,"        iStringValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,156,"        iLowerBound = lowerBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,157,"        iUpperBound = upperBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,158,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,159,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,171,"        super(createMessage(fieldName, value, lowerBound, upperBound, null));
",0,0,0,2,4,0,10,0,0,12,69,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,172,"        iDateTimeFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,173,"        iDurationFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,174,"        iFieldName = fieldName;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,175,"        iNumberValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,176,"        iStringValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,177,"        iLowerBound = lowerBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,178,"        iUpperBound = upperBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,179,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,180,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,189,"        super(createMessage(fieldType.getName(), value));
",0,0,0,3,6,0,8,0,0,8,49,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,190,"        iDateTimeFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,191,"        iDurationFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,192,"        iFieldName = fieldType.getName();
",2,0,0,1,2,0,4,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,193,"        iStringValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,194,"        iNumberValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,195,"        iLowerBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,196,"        iUpperBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,197,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,198,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,207,"        super(createMessage(fieldType.getName(), value));
",0,0,0,3,6,0,8,0,0,8,49,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,208,"        iDateTimeFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,209,"        iDurationFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,210,"        iFieldName = fieldType.getName();
",2,0,0,1,2,0,4,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,211,"        iStringValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,212,"        iNumberValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,213,"        iLowerBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,214,"        iUpperBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,215,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,216,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,225,"        super(createMessage(fieldName, value));
",0,0,0,2,4,0,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,226,"        iDateTimeFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,227,"        iDurationFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,228,"        iFieldName = fieldName;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,229,"        iStringValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,230,"        iNumberValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,231,"        iLowerBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,232,"        iUpperBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,233,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,234,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,41,"        StringBuilder buf = new StringBuilder()
",2,0,0,1,2,0,0,4,0,6,39,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,44,"        if (lowerBound == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,45,"            if (upperBound == null) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,46,"                buf.append(""is not supported"");
",0,0,0,1,2,0,4,0,0,5,31,9,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,48,"                buf.append(""must not be larger than "").append(upperBound);
",0,0,0,2,4,0,8,0,0,9,58,9,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,50,"        } else if (upperBound == null) {
",2,1,0,1,4,0,0,0,0,3,32,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,51,"            buf.append(""must not be smaller than "").append(lowerBound);
",0,0,0,2,4,0,8,0,0,9,59,8,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,53,"            buf.append(""must be in the range ["")
",0,0,0,1,3,0,4,0,0,5,36,12,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,59,"        if (explain != null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,60,"            buf.append("": "").append(explain);
",0,0,0,2,4,0,8,0,0,9,33,7,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,63,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,74,"        StringBuffer buf = new StringBuffer().append(""Value "");
",2,0,0,2,4,0,2,4,0,9,55,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,76,"        if (value == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,77,"            buf.append(""null"");
",0,0,0,1,2,0,4,0,0,5,19,7,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,79,"            buf.append('""');
",0,0,0,1,2,0,4,0,0,5,16,7,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,80,"            buf.append(value);
",0,0,0,1,2,0,6,0,0,6,18,7,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,81,"            buf.append('""');
",0,0,0,1,2,0,4,0,0,5,16,7,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,84,"        buf.append("" for "").append(fieldName).append(' ').append(""is not supported"");
",0,0,0,4,8,0,12,0,0,15,77,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,86,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,243,"        return iDateTimeFieldType;
",2,0,0,0,0,1,0,0,0,2,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,252,"        return iDurationFieldType;
",2,0,0,0,0,1,0,0,0,2,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,261,"        return iFieldName;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,270,"        return iNumberValue;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,279,"        return iStringValue;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,288,"        String value = iStringValue;
",4,0,0,0,0,0,0,2,0,6,28,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,289,"        if (value == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,290,"            value = String.valueOf(iNumberValue);
",2,0,0,1,2,0,6,0,0,9,37,6,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,292,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,301,"        return iLowerBound;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,310,"        return iUpperBound;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,314,"        return iMessage;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,323,"        if (iMessage == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,324,"            iMessage = message;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,325,"        } else if (message != null) {
",2,1,0,1,4,0,0,0,0,3,29,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,326,"            iMessage = message + "": "" + iMessage;
",6,1,0,0,0,0,0,0,0,9,37,7,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,11,328,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,654,"        Rule(StringTokenizer st) {
",4,0,0,1,3,0,0,2,0,6,26,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,655,"            iName = st.nextToken().intern();
",2,0,0,2,4,0,6,0,0,9,32,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,656,"            iFromYear = parseYear(st.nextToken(), 0);
",2,0,0,2,4,0,6,0,0,9,41,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,657,"            iToYear = parseYear(st.nextToken(), iFromYear);
",2,0,0,2,4,0,8,0,0,11,47,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,658,"            if (iToYear < iFromYear) {
",4,1,0,1,3,0,0,0,0,5,26,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,659,"                throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,9,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,661,"            iType = parseOptional(st.nextToken());
",2,0,0,2,4,0,6,0,0,9,38,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,662,"            iDateTimeOfYear = new DateTimeOfYear(st);
",4,0,0,1,2,0,0,2,0,7,41,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,663,"            iSaveMillis = parseTime(st.nextToken());
",2,0,0,2,4,0,6,0,0,9,40,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,664,"            iLetterS = parseOptional(st.nextToken());
",2,0,0,2,4,0,6,0,0,9,41,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,665,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,671,"            String nameKey = formatName(nameFormat);
",2,0,0,1,2,0,4,2,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,672,"            iDateTimeOfYear.addRecurring
",0,0,0,0,0,0,4,0,0,4,28,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,674,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,677,"            int index = nameFormat.indexOf('/');
",2,0,0,1,2,0,4,0,0,7,36,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,678,"            if (index > 0) {
",2,1,0,1,3,0,0,0,0,3,16,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,679,"                if (iSaveMillis == 0) {
",2,1,0,1,3,0,0,0,0,3,23,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,681,"                    return nameFormat.substring(0, index).intern();
",0,0,0,2,4,1,8,0,0,8,47,10,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,683,"                    return nameFormat.substring(index + 1).intern();
",2,1,0,2,4,1,6,0,0,9,48,10,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,686,"            index = nameFormat.indexOf(""%s"");
",2,0,0,1,2,0,4,0,0,8,33,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,687,"            if (index < 0) {
",2,1,0,1,3,0,0,0,0,3,16,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,688,"                return nameFormat;
",2,0,0,0,0,1,0,0,0,2,18,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,690,"            String left = nameFormat.substring(0, index);
",2,0,0,1,2,0,6,2,0,10,45,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,691,"            String right = nameFormat.substring(index + 2);
",4,1,0,1,2,0,4,2,0,11,47,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,693,"            if (iLetterS == null) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,694,"                name = left.concat(right);
",2,0,0,1,2,0,6,0,0,9,26,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,696,"                name = left + iLetterS + right;
",8,1,0,0,0,0,0,0,0,10,31,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,698,"            return name.intern();
",0,0,0,1,2,1,4,0,0,4,21,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,702,"            return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,96,"            return readFrom((DataInput)in, id);
",2,0,0,2,4,1,4,2,0,8,35,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,112,"            DateTimeZone fixed = new FixedDateTimeZone
",2,0,0,0,0,0,0,4,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,114,"            if (fixed.equals(DateTimeZone.UTC)) {
",4,0,0,2,5,0,4,0,0,8,37,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,115,"                fixed = DateTimeZone.UTC;
",6,0,0,0,0,0,0,0,0,7,25,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,117,"            return fixed;
",2,0,0,0,0,1,0,0,0,2,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,121,"            return PrecalculatedZone.readFrom(in, id);
",0,0,0,1,2,1,8,0,0,8,42,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,123,"            throw new IOException(""Invalid encoding"");
",0,0,0,1,2,0,0,2,0,3,42,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,140,"        if (millis % (30 * 60000L) == 0) {
",2,3,0,2,5,0,0,0,0,5,34,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,142,"            long units = millis / (30 * 60000L);
",4,2,0,1,2,0,0,0,0,6,36,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,143,"            if (((units << (64 - 6)) >> (64 - 6)) == units) {
",4,5,0,5,11,0,0,0,0,9,49,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,145,"                out.writeByte((int)(units & 0x3f));
",2,1,0,3,6,0,4,0,0,7,35,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,146,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,150,"        if (millis % 60000L == 0) {
",2,2,0,1,3,0,0,0,0,4,27,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,152,"            long minutes = millis / 60000L;
",4,1,0,0,0,0,0,0,0,5,31,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,153,"            if (((minutes << (64 - 30)) >> (64 - 30)) == minutes) {
",4,5,0,5,11,0,0,0,0,9,55,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,155,"                out.writeInt(0x40000000 | (int)(minutes & 0x3fffffff));
",2,2,0,3,6,0,4,0,0,8,55,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,156,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,160,"        if (millis % 1000L == 0) {
",2,2,0,1,3,0,0,0,0,4,26,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,162,"            long seconds = millis / 1000L;
",4,1,0,0,0,0,0,0,0,5,30,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,163,"            if (((seconds << (64 - 38)) >> (64 - 38)) == seconds) {
",4,5,0,5,11,0,0,0,0,9,55,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,165,"                out.writeByte(0x80 | (int)((seconds >> 32) & 0x3f));
",2,3,0,4,8,0,4,0,0,9,52,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,166,"                out.writeInt((int)(seconds & 0xffffffff));
",2,1,0,3,6,0,4,0,0,7,42,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,167,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,175,"        out.writeByte(millis < 0 ? 0xff : 0xc0);
",2,1,0,1,2,0,4,0,0,7,40,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,176,"        out.writeLong(millis);
",0,0,0,1,2,0,6,0,0,6,22,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,177,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,215,"        if (""UTC"".equals(id) && id.equals(nameKey) &&
",0,2,0,2,5,0,10,0,0,13,45,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,217,"            return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,219,"        return new FixedDateTimeZone(id, nameKey, wallOffset, standardOffset);
",8,0,0,1,2,1,0,2,0,10,70,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,253,"            OfYear ofYear = new OfYear
",2,0,0,0,0,0,0,4,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,255,"            RuleSet lastRuleSet = iRuleSets.get(iRuleSets.size() - 1);
",2,1,0,2,4,0,8,2,0,13,58,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,256,"            lastRuleSet.setUpperLimit(year, ofYear);
",0,0,0,1,2,0,8,0,0,8,40,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,276,"        getLastRuleSet().setFixedSavings(nameKey, saveMillis);
",0,0,0,2,4,0,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,277,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,321,"            addCutover(Integer.MIN_VALUE, 'w', 1, 1, 0, false, 0);
",4,0,0,1,2,0,2,0,0,8,54,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,334,"            throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,353,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,384,"            if (tailZone != null) {
",2,1,0,1,3,0,0,0,0,3,23,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,386,"                return tailZone;
",2,0,0,0,0,1,0,0,0,2,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,388,"            return buildFixedZone(id, ""UTC"", 0, 0);
",0,0,0,1,2,1,4,0,0,5,39,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,391,"            Transition tr = transitions.get(0);
",2,0,0,1,2,0,4,2,0,8,35,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,392,"            return buildFixedZone(id, tr.getNameKey(),
",0,0,0,1,3,1,8,0,0,8,42,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,400,"        return zone;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,412,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,431,"        transitions.remove(size - 1);
",2,1,0,1,2,0,4,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,432,"        return addTransition(transitions, tr);
",0,0,0,1,2,1,6,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,443,"        if (out instanceof DataOutput) {
",2,0,0,1,3,0,0,2,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,444,"            writeTo(zoneID, (DataOutput)out);
",2,0,0,2,4,0,4,2,0,8,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,446,"            writeTo(zoneID, (DataOutput)new DataOutputStream(out));
",2,0,0,3,6,0,4,4,0,10,55,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,448,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,459,"        DateTimeZone zone = toDateTimeZone(zoneID, false);
",2,0,0,1,2,0,4,2,0,9,50,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,461,"        if (zone instanceof FixedDateTimeZone) {
",2,0,0,1,3,0,0,2,0,4,40,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,462,"            out.writeByte('F'); // 'F' for fixed
",0,0,0,1,2,0,4,0,0,5,36,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,463,"            out.writeUTF(zone.getNameKey(0));
",0,0,0,2,4,0,8,0,0,8,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,464,"            writeMillis(out, zone.getOffset(0));
",0,0,0,2,4,0,8,0,0,8,36,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,465,"            writeMillis(out, zone.getStandardOffset(0));
",0,0,0,2,4,0,8,0,0,8,44,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,467,"            if (zone instanceof CachedDateTimeZone) {
",2,0,0,1,3,0,0,2,0,4,41,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,468,"                out.writeByte('C'); // 'C' for cached, precalculated
",0,0,0,1,2,0,4,0,0,5,52,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,469,"                zone = ((CachedDateTimeZone)zone).getUncachedZone();
",4,0,0,3,6,0,2,2,0,9,52,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,471,"                out.writeByte('P'); // 'P' for precalculated, uncached
",0,0,0,1,2,0,4,0,0,5,54,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,473,"            ((PrecalculatedZone)zone).writeTo(out);
",2,0,0,3,6,0,4,2,0,8,39,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,475,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,40,"        } catch (SecurityException e) {
",2,0,0,1,4,0,0,2,0,4,31,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,41,"            i = null;
",2,0,0,0,0,0,0,0,0,3,9,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,50,"            cacheSize = i.intValue();
",2,0,0,1,2,0,4,0,0,7,25,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,52,"            cacheSize--;
",2,0,0,0,0,0,0,0,0,3,12,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,53,"            int shift = 0;
",2,0,0,0,0,0,0,0,0,2,14,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,54,"            while (cacheSize > 0) {
",2,1,0,1,3,0,0,0,0,3,23,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,55,"                shift++;
",2,0,0,0,0,0,0,0,0,3,8,8,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,56,"                cacheSize >>= 1;
",2,0,0,0,0,0,0,0,0,3,16,8,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,58,"            cacheSize = 1 << shift;
",4,1,0,0,0,0,0,0,0,6,23,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,69,"            return (CachedDateTimeZone)zone;
",2,0,0,1,2,1,0,2,0,4,32,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,95,"        return iZone;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,99,"        return getInfo(instant).getNameKey(instant);
",0,0,0,2,4,1,8,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,103,"        return getInfo(instant).getOffset(instant);
",0,0,0,2,4,1,8,0,0,8,43,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,107,"        return getInfo(instant).getStandardOffset(instant);
",0,0,0,2,4,1,8,0,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,111,"        return iZone.isFixed();
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,115,"        return iZone.nextTransition(instant);
",0,0,0,1,2,1,6,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,119,"        return iZone.previousTransition(instant);
",0,0,0,1,2,1,6,0,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,123,"        return iZone.hashCode();
",0,0,0,1,2,1,4,0,0,4,24,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,127,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,128,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,130,"        if (obj instanceof CachedDateTimeZone) {
",2,0,0,1,3,0,0,2,0,4,40,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,131,"            return iZone.equals(((CachedDateTimeZone)obj).iZone);
",4,0,0,3,6,1,4,2,0,10,53,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,133,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,140,"        int period = (int)(millis >> 32);
",4,1,0,2,4,0,0,0,0,5,33,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,141,"        Info[] cache = iInfoCache;
",4,0,0,1,2,0,0,2,0,6,26,4,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,142,"        int index = period & cInfoCacheMask;
",6,1,0,0,0,0,0,0,0,7,36,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,143,"        Info info = cache[index];
",2,0,1,1,2,0,0,2,0,8,25,4,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,144,"        if (info == null || (int)((info.iPeriodStart >> 32)) != period) {
",8,4,0,4,9,0,0,0,0,12,65,4,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,145,"            info = createInfo(millis);
",2,0,0,1,2,0,4,0,0,7,26,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,146,"            cache[index] = info;
",2,0,1,1,2,0,0,0,0,7,20,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,148,"        return info;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,152,"        long periodStart = millis & (0xffffffffL << 32);
",4,2,0,1,2,0,0,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,153,"        Info info = new Info(iZone, periodStart);
",6,0,0,1,2,0,0,4,0,10,41,4,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,155,"        long end = periodStart | 0xffffffffL;
",4,1,0,0,0,0,0,0,0,5,37,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,156,"        Info chain = info;
",4,0,0,0,0,0,0,2,0,6,18,4,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,158,"            long next = iZone.nextTransition(periodStart);
",2,0,0,1,2,0,6,0,0,8,46,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,159,"            if (next == periodStart || next > end) {
",8,3,0,1,3,0,0,0,0,11,40,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,160,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,162,"            periodStart = next;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,163,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));
",10,0,0,2,4,0,0,2,0,14,57,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,164,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,166,"        return info;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/JodaTimePermission,11,57,"        super(name);
",2,0,0,1,2,0,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/JodaTimePermission,11,58,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,11,45,"        return iNameKey;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,11,49,"        return iWallOffset;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,11,53,"        return iStandardOffset;
",2,0,0,0,0,1,0,0,0,2,23,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,11,57,"        return iWallOffset;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,11,61,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,11,65,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,11,69,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,11,77,"        String id = getID();
",2,0,0,1,2,0,2,2,0,6,20,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,11,78,"        if (id.length() == 6 && (id.startsWith(""+"") || id.startsWith(""-""))) {
",0,3,0,5,11,0,12,0,0,17,69,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,11,81,"            return java.util.TimeZone.getTimeZone(""GMT"" + getID());
",6,1,0,2,4,1,4,0,0,12,55,7,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,11,84,"        return new java.util.SimpleTimeZone(iWallOffset, getID());
",8,0,0,2,4,1,2,0,0,10,58,5,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,11,91,"        if (obj instanceof FixedDateTimeZone) {
",2,0,0,1,3,0,0,2,0,4,39,5,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,11,92,"            FixedDateTimeZone other = (FixedDateTimeZone) obj;
",4,0,0,1,2,0,0,4,0,8,50,6,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,11,93,"            return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,11,98,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,180,"        Info(DateTimeZone zone, long periodStart) {
",6,0,0,1,3,0,0,2,0,8,43,3,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,177,"        private int iOffset = Integer.MIN_VALUE;
",6,0,0,0,0,1,0,0,0,7,40,3,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,178,"        private int iStandardOffset = Integer.MIN_VALUE;
",6,0,0,0,0,1,0,0,0,7,48,3,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,181,"            iPeriodStart = periodStart;
",4,0,0,0,0,0,0,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,182,"            iZoneRef = zone;
",4,0,0,0,0,0,0,0,0,5,16,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,183,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,186,"            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {
",8,3,0,1,3,0,0,0,0,11,59,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,187,"                if (iNameKey == null) {
",2,1,0,1,3,0,0,0,0,3,23,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,188,"                    iNameKey = iZoneRef.getNameKey(iPeriodStart);
",2,0,0,1,2,0,6,0,0,9,45,9,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,190,"                return iNameKey;
",2,0,0,0,0,1,0,0,0,2,16,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,192,"            return iNextInfo.getNameKey(millis);
",0,0,0,1,2,1,6,0,0,6,36,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,196,"            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {
",8,3,0,1,3,0,0,0,0,11,59,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,197,"                if (iOffset == Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,35,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,198,"                    iOffset = iZoneRef.getOffset(iPeriodStart);
",2,0,0,1,2,0,6,0,0,9,43,9,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,200,"                return iOffset;
",2,0,0,0,0,1,0,0,0,2,15,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,202,"            return iNextInfo.getOffset(millis);
",0,0,0,1,2,1,6,0,0,6,35,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,206,"            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {
",8,3,0,1,3,0,0,0,0,11,59,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,207,"                if (iStandardOffset == Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,43,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,208,"                    iStandardOffset = iZoneRef.getStandardOffset(iPeriodStart);
",2,0,0,1,2,0,6,0,0,9,59,9,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,210,"                return iStandardOffset;
",2,0,0,0,0,1,0,0,0,2,23,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,11,212,"            return iNextInfo.getStandardOffset(millis);
",0,0,0,1,2,1,6,0,0,6,43,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,56,"    public ZoneInfoProvider(File fileDir) throws IOException {
",6,0,0,1,3,1,0,2,0,9,58,2,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,57,"        if (fileDir == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,58,"            throw new IllegalArgumentException(""No file directory provided"");
",0,0,0,1,2,0,0,2,0,3,65,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,60,"        if (!fileDir.exists()) {
",0,0,0,2,5,0,4,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,61,"            throw new IOException(""File directory doesn't exist: "" + fileDir);
",2,1,0,1,2,0,0,2,0,6,66,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,63,"        if (!fileDir.isDirectory()) {
",0,0,0,2,5,0,4,0,0,5,29,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,64,"            throw new IOException(""File doesn't refer to a directory: "" + fileDir);
",2,1,0,1,2,0,0,2,0,6,71,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,67,"        iFileDir = fileDir;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,68,"        iResourcePath = null;
",2,0,0,0,0,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,69,"        iLoader = null;
",2,0,0,0,0,0,0,0,0,3,15,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,71,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));
",2,0,0,2,4,0,4,0,0,8,60,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,72,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,96,"        this(resourcePath, loader, true);
",4,0,0,1,2,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,97,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,108,"            throw new IllegalArgumentException(""No resource path provided"");
",0,0,0,1,2,0,0,2,0,3,64,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,137,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,142,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,158,"            return loadZoneData(id);
",0,0,0,1,2,1,4,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,162,"        return getZone((String)obj);
",2,0,0,2,4,1,2,2,0,6,28,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,183,"        Thread t = Thread.currentThread();
",2,0,0,1,2,0,4,2,0,8,34,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,184,"        t.getThreadGroup().uncaughtException(t, ex);
",0,0,0,2,4,0,10,0,0,10,44,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,185,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,197,"            in = new FileInputStream(new File(iFileDir, name));
",6,0,0,2,4,0,0,4,0,11,51,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,203,"                in = ClassLoader.getSystemResourceAsStream(path);
",2,0,0,1,2,0,6,0,0,9,49,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,206,"                StringBuilder buf = new StringBuilder(40)
",2,0,0,1,2,0,0,4,0,6,41,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,211,"                throw new IOException(buf.toString());
",0,0,0,2,4,0,4,2,0,6,38,9,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,239,"            } catch (IOException ex) {
",2,0,0,1,4,0,0,2,0,4,26,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,230,"        } catch (IOException ex) {
",2,0,0,1,4,0,0,2,0,4,26,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,231,"            uncaughtException(ex);
",0,0,0,1,2,0,4,0,0,4,22,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,232,"            iZoneInfoMap.remove(id);
",0,0,0,1,2,0,6,0,0,6,24,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,233,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,235,"            try {
",0,0,0,0,1,0,0,0,0,0,5,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,259,"            } catch (IOException ex) {
",2,0,0,1,4,0,0,2,0,4,26,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,261,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,257,"            try {
",0,0,0,0,1,0,0,0,0,0,5,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,285,"            } catch (ArrayIndexOutOfBoundsException ex) {
",2,0,0,1,4,0,0,2,0,4,45,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,11,286,"                throw new IOException(""Corrupt zone info map"");
",0,0,0,1,2,0,0,2,0,3,47,10,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,354,"    public ZoneInfoCompiler() {
",2,0,0,1,3,1,0,0,0,3,27,2,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,355,"        iRuleSets = new HashMap<String, RuleSet>();
",2,0,0,1,2,0,0,6,0,9,43,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,356,"        iZones = new ArrayList<Zone>();
",2,0,0,1,2,0,0,4,0,7,31,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,357,"        iLinks = new ArrayList<String>();
",2,0,0,1,2,0,0,4,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,358,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,94,"        if (args.length == 0) {
",4,1,0,1,3,0,0,0,0,5,23,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,95,"            printUsage();
",0,0,0,1,2,0,2,0,0,2,13,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,96,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,99,"        File inputDir = null;
",2,0,0,0,0,0,0,2,0,4,21,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,100,"        File outputDir = null;
",2,0,0,0,0,0,0,2,0,4,22,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,101,"        boolean verbose = false;
",2,0,0,0,0,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,104,"        for (i=0; i<args.length; i++) {
",10,1,0,1,3,0,0,0,0,13,31,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,106,"                if (""-src"".equals(args[i])) {
",0,0,1,3,7,0,2,0,0,7,29,9,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,107,"                    inputDir = new File(args[++i]);
",4,0,1,2,4,0,0,2,0,10,31,10,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,108,"                } else if (""-dst"".equals(args[i])) {
",0,0,1,3,8,0,2,0,0,7,36,10,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,109,"                    outputDir = new File(args[++i]);
",4,0,1,2,4,0,0,2,0,10,32,11,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,110,"                } else if (""-verbose"".equals(args[i])) {
",0,0,1,3,8,0,2,0,0,7,40,11,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,111,"                    verbose = true;
",2,0,0,0,0,0,0,0,0,4,15,12,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,112,"                } else if (""-?"".equals(args[i])) {
",0,0,1,3,8,0,2,0,0,7,34,12,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,113,"                    printUsage();
",0,0,0,1,2,0,2,0,0,2,13,14,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,114,"                    return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,116,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,121,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,118,"            } catch (IndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,39,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,119,"                printUsage();
",0,0,0,1,2,0,2,0,0,2,13,10,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,120,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,124,"        if (i >= args.length) {
",6,1,0,1,3,0,0,0,0,7,23,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,125,"            printUsage();
",0,0,0,1,2,0,2,0,0,2,13,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,126,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,129,"        File[] sources = new File[args.length - i];
",8,1,0,2,4,0,0,4,0,13,43,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,130,"        for (int j=0; i<args.length; i++,j++) {
",12,1,0,1,3,0,0,0,0,15,39,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,131,"            sources[j] = inputDir == null ? new File(args[i]) : new File(inputDir, args[i]);
",4,1,1,5,10,0,0,4,0,24,80,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,134,"        cVerbose.set(verbose);
",0,0,0,1,2,0,6,0,0,6,22,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,135,"        ZoneInfoCompiler zic = new ZoneInfoCompiler();
",2,0,0,1,2,0,0,4,0,6,46,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,136,"        zic.compile(outputDir, sources);
",0,0,0,1,2,0,8,0,0,8,32,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,137,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,140,"        System.out.println(""Usage: java org.joda.time.tz.ZoneInfoCompiler <options> <source files>"");
",4,0,0,1,2,0,2,0,0,7,93,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,141,"        System.out.println(""where possible options include:"");
",4,0,0,1,2,0,2,0,0,7,54,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,142,"        System.out.println(""  -src <directory>    Specify where to read source files"");
",4,0,0,1,2,0,2,0,0,7,79,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,143,"        System.out.println(""  -dst <directory>    Specify where to write generated files"");
",4,0,0,1,2,0,2,0,0,7,83,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,144,"        System.out.println(""  -verbose            Output verbosely (default false)"");
",4,0,0,2,4,0,2,0,0,7,77,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,145,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,148,"        if (cStartOfYear == null) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,149,"            cStartOfYear = new DateTimeOfYear();
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,151,"        return cStartOfYear;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,155,"        if (cLenientISO == null) {
",2,1,0,1,3,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,156,"            cLenientISO = LenientChronology.getInstance(ISOChronology.getInstanceUTC());
",2,0,0,2,4,0,8,0,0,11,76,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,158,"        return cLenientISO;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,166,"        Map<String, Short> idToIndex = new HashMap<String, Short>(zimap.size());
",2,0,0,2,4,0,4,12,0,18,72,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,167,"        TreeMap<Short, String> indexToId = new TreeMap<Short, String>();
",2,0,0,1,2,0,0,12,0,14,64,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,169,"        short count = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,170,"        for (Entry<String, DateTimeZone> entry : zimap.entrySet()) {
",2,0,0,2,5,0,4,6,0,12,60,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,171,"            String id = (String)entry.getKey();
",2,0,0,2,4,0,4,4,0,10,35,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,172,"            if (!idToIndex.containsKey(id)) {
",0,0,0,2,5,0,6,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,173,"                Short index = Short.valueOf(count);
",2,0,0,1,2,0,6,2,0,10,35,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,174,"                idToIndex.put(id, index);
",0,0,0,1,2,0,8,0,0,8,25,9,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,175,"                indexToId.put(index, id);
",0,0,0,1,2,0,8,0,0,8,25,9,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,176,"                if (++count == 0) {
",2,1,0,1,3,0,0,0,0,4,19,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,177,"                    throw new InternalError(""Too many time zone ids"");
",0,0,0,1,2,0,0,2,0,3,50,11,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,180,"            id = ((DateTimeZone)entry.getValue()).getID();
",2,0,0,4,8,0,6,2,0,11,46,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,181,"            if (!idToIndex.containsKey(id)) {
",0,0,0,2,5,0,6,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,182,"                Short index = Short.valueOf(count);
",2,0,0,1,2,0,6,2,0,10,35,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,183,"                idToIndex.put(id, index);
",0,0,0,1,2,0,8,0,0,8,25,9,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,184,"                indexToId.put(index, id);
",0,0,0,1,2,0,8,0,0,8,25,9,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,185,"                if (++count == 0) {
",2,1,0,1,3,0,0,0,0,4,19,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,186,"                    throw new InternalError(""Too many time zone ids"");
",0,0,0,1,2,0,0,2,0,3,50,11,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,189,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,192,"        dout.writeShort(indexToId.size());
",0,0,0,2,4,0,8,0,0,8,34,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,193,"        for (String id : indexToId.values()) {
",2,0,0,2,5,0,4,2,0,8,38,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,194,"            dout.writeUTF(id);
",0,0,0,1,2,0,6,0,0,6,18,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,195,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,198,"        dout.writeShort(zimap.size());
",0,0,0,2,4,0,8,0,0,8,30,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,199,"        for (Entry<String, DateTimeZone> entry : zimap.entrySet()) {
",2,0,0,2,5,0,4,6,0,12,60,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,200,"            String id = entry.getKey();
",2,0,0,1,2,0,4,2,0,8,27,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,201,"            dout.writeShort(idToIndex.get(id).shortValue());
",0,0,0,3,6,0,12,0,0,12,48,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,202,"            id = entry.getValue().getID();
",2,0,0,2,4,0,6,0,0,9,30,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,203,"            dout.writeShort(idToIndex.get(id).shortValue());
",0,0,0,3,6,0,12,0,0,12,48,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,204,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,205,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,208,"        str = str.toLowerCase();
",2,0,0,1,2,0,4,0,0,7,24,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,209,"        if (str.equals(""minimum"") || str.equals(""min"")) {
",0,1,0,3,7,0,8,0,0,11,49,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,210,"            return Integer.MIN_VALUE;
",4,0,0,0,0,1,0,0,0,4,25,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,211,"        } else if (str.equals(""maximum"") || str.equals(""max"")) {
",0,1,0,3,8,0,8,0,0,11,56,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,212,"            return Integer.MAX_VALUE;
",4,0,0,0,0,1,0,0,0,4,25,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,213,"        } else if (str.equals(""only"")) {
",0,0,0,2,6,0,4,0,0,5,32,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,214,"            return def;
",2,0,0,0,0,1,0,0,0,2,11,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,216,"        return Integer.parseInt(str);
",0,0,0,1,2,1,6,0,0,6,29,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,220,"        DateTimeField field = ISOChronology.getInstanceUTC().monthOfYear();
",2,0,0,2,4,0,6,2,0,10,67,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,221,"        return field.get(field.set(0, str, Locale.ENGLISH));
",4,0,0,2,4,1,10,0,0,14,52,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,225,"        DateTimeField field = ISOChronology.getInstanceUTC().dayOfWeek();
",2,0,0,2,4,0,6,2,0,10,65,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,226,"        return field.get(field.set(0, str, Locale.ENGLISH));
",4,0,0,2,4,1,10,0,0,14,52,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,230,"        return (str.equals(""-"")) ? null : str;
",2,0,0,2,4,1,4,0,0,7,38,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,234,"        DateTimeFormatter p = ISODateTimeFormat.hourMinuteSecondFraction();
",2,0,0,1,2,0,4,2,0,8,67,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,235,"        MutableDateTime mdt = new MutableDateTime(0, getLenientISOChronology());
",2,0,0,2,4,0,2,4,0,8,72,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,236,"        int pos = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,237,"        if (str.startsWith(""-"")) {
",0,0,0,2,5,0,4,0,0,5,26,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,238,"            pos = 1;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,240,"        int newPos = p.parseInto(mdt, str, pos);
",2,0,0,1,2,0,10,0,0,12,40,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,241,"        if (newPos == ~pos) {
",4,1,0,1,3,0,0,0,0,6,21,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,242,"            throw new IllegalArgumentException(str);
",2,0,0,1,2,0,0,2,0,4,40,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,244,"        int millis = (int)mdt.getMillis();
",2,0,0,2,4,0,4,0,0,6,34,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,245,"        if (pos == 1) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,246,"            millis = -millis;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,248,"        return millis;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,252,"        switch (c) {
",2,0,0,1,3,0,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,255,"            return 's';
",0,0,0,0,0,1,0,0,0,1,11,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,258,"            return 'u';
",0,0,0,0,0,1,0,0,0,1,11,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,261,"            return 'w';
",0,0,0,0,0,1,0,0,0,1,11,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,269,"        if (!id.equals(tz.getID())) {
",0,0,0,3,7,0,8,0,0,9,29,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,270,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,275,"        long millis = ISOChronology.getInstanceUTC().year().set(0, 1850);
",2,0,0,3,6,0,8,0,0,10,65,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,276,"        long end = ISOChronology.getInstanceUTC().year().set(0, 2050);
",2,0,0,3,6,0,8,0,0,10,62,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,278,"        int offset = tz.getOffset(millis);
",2,0,0,1,2,0,6,0,0,8,34,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,279,"        String key = tz.getNameKey(millis);
",2,0,0,1,2,0,6,2,0,10,35,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,281,"        List<Long> transitions = new ArrayList<Long>();
",2,0,0,1,2,0,0,8,0,10,47,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,284,"            long next = tz.nextTransition(millis);
",2,0,0,1,2,0,6,0,0,8,38,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,285,"            if (next == millis || next > end) {
",8,3,0,1,3,0,0,0,0,11,35,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,286,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,289,"            millis = next;
",4,0,0,0,0,0,0,0,0,5,14,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,291,"            int nextOffset = tz.getOffset(millis);
",2,0,0,1,2,0,6,0,0,8,38,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,292,"            String nextKey = tz.getNameKey(millis);
",2,0,0,1,2,0,6,2,0,10,39,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,294,"            if (offset == nextOffset
",4,1,0,0,1,0,0,0,0,5,24,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,296,"                System.out.println(""*d* Error in "" + tz.getID() + "" ""
",4,1,0,1,3,0,6,0,0,13,53,9,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,299,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,302,"            if (nextKey == null || (nextKey.length() < 3 && !""??"".equals(nextKey))) {
",2,4,0,4,9,0,8,0,0,16,73,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,303,"                System.out.println(""*s* Error in "" + tz.getID() + "" ""
",4,1,0,1,3,0,6,0,0,13,53,9,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,307,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,310,"            transitions.add(Long.valueOf(millis));
",0,0,0,2,4,0,10,0,0,10,38,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,312,"            offset = nextOffset;
",4,0,0,0,0,0,0,0,0,5,20,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,313,"            key = nextKey;
",4,0,0,0,0,0,0,0,0,5,14,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,314,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,318,"        millis = ISOChronology.getInstanceUTC().year().set(0, 2050);
",2,0,0,3,6,0,8,0,0,11,60,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,319,"        end = ISOChronology.getInstanceUTC().year().set(0, 1850);
",2,0,0,3,6,0,8,0,0,11,57,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,321,"        for (int i=transitions.size(); --i>= 0; ) {
",4,1,0,2,5,0,4,0,0,10,43,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,322,"            long prev = tz.previousTransition(millis);
",2,0,0,1,2,0,6,0,0,8,42,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,323,"            if (prev == millis || prev < end) {
",8,3,0,1,3,0,0,0,0,11,35,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,324,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,327,"            millis = prev;
",4,0,0,0,0,0,0,0,0,5,14,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,329,"            long trans = transitions.get(i).longValue();
",2,0,0,2,4,0,8,0,0,10,44,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,331,"            if (trans - 1 != millis) {
",4,2,0,1,3,0,0,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,332,"                System.out.println(""*r* Error in "" + tz.getID() + "" ""
",4,1,0,1,3,0,6,0,0,13,53,9,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,338,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,340,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,342,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,367,"        if (sources != null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,368,"            for (int i=0; i<sources.length; i++) {
",10,1,0,1,3,0,0,0,0,12,38,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,369,"                BufferedReader in = new BufferedReader(new FileReader(sources[i]));
",2,0,1,3,6,0,0,6,0,12,67,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,370,"                parseDataFile(in);
",0,0,0,1,2,0,4,0,0,4,18,9,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,371,"                in.close();
",0,0,0,1,2,0,4,0,0,4,11,9,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,375,"        if (outputDir != null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,376,"            if (!outputDir.exists()) {
",0,0,0,2,5,0,4,0,0,5,26,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,377,"                if (!outputDir.mkdirs()) {
",0,0,0,2,5,0,4,0,0,5,26,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,378,"                    throw new IOException(""Destination directory doesn't exist and cannot be created: "" + outputDir);
",2,1,0,1,2,0,0,2,0,6,97,11,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,381,"            if (!outputDir.isDirectory()) {
",0,0,0,2,5,0,4,0,0,5,31,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,382,"                throw new IOException(""Destination is not a directory: "" + outputDir);
",2,1,0,1,2,0,0,2,0,6,70,9,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,386,"        Map<String, DateTimeZone> map = new TreeMap<String, DateTimeZone>();
",2,0,0,1,2,0,0,12,0,14,68,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,388,"        System.out.println(""Writing zoneinfo files"");
",4,0,0,1,2,0,2,0,0,7,45,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,389,"        for (int i=0; i<iZones.size(); i++) {
",6,1,0,2,5,0,4,0,0,12,37,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,390,"            Zone zone = iZones.get(i);
",2,0,0,1,2,0,6,2,0,10,26,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,391,"            DateTimeZoneBuilder builder = new DateTimeZoneBuilder();
",2,0,0,1,2,0,0,4,0,6,56,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,392,"            zone.addToBuilder(builder, iRuleSets);
",0,0,0,1,2,0,8,0,0,8,38,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,393,"            final DateTimeZone original = builder.toDateTimeZone(zone.iName, true);
",6,0,0,1,2,1,4,2,0,14,71,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,394,"            DateTimeZone tz = original;
",4,0,0,0,0,0,0,2,0,6,27,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,395,"            if (test(tz.getID(), tz)) {
",0,0,0,3,7,0,8,0,0,8,27,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,396,"                map.put(tz.getID(), tz);
",0,0,0,2,4,0,10,0,0,10,24,9,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,397,"                if (outputDir != null) {
",2,1,0,1,3,0,0,0,0,3,24,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,398,"                    if (ZoneInfoCompiler.verbose()) {
",0,0,0,2,5,0,4,0,0,4,33,11,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,399,"                        System.out.println(""Writing "" + tz.getID());
",4,1,0,2,4,0,6,0,0,12,44,13,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,401,"                    File file = new File(outputDir, tz.getID());
",4,0,0,2,4,0,4,4,0,12,44,10,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,402,"                    if (!file.getParentFile().exists()) {
",0,0,0,3,7,0,6,0,0,7,37,10,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,403,"                        file.getParentFile().mkdirs();
",0,0,0,2,4,0,6,0,0,6,30,13,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,405,"                    OutputStream out = new FileOutputStream(file);
",4,0,0,1,2,0,0,4,0,8,46,10,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,407,"                        builder.writeTo(zone.iName, out);
",4,0,0,1,2,0,6,0,0,10,33,13,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,409,"                        out.close();
",0,0,0,1,2,0,4,0,0,4,12,13,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,410,"                    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,413,"                    InputStream in = new FileInputStream(file);
",4,0,0,1,2,0,0,4,0,8,43,10,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,414,"                    DateTimeZone tz2 = DateTimeZoneBuilder.readFrom(in, tz.getID());
",2,0,0,2,4,0,10,2,0,14,64,10,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,415,"                    in.close();
",0,0,0,1,2,0,4,0,0,4,11,11,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,417,"                    if (!original.equals(tz2)) {
",0,0,0,2,5,0,6,0,0,7,28,10,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,418,"                        System.out.println(""*e* Error in "" + tz.getID() +
",4,1,0,1,3,0,6,0,0,12,49,13,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,425,"        for (int pass=0; pass<2; pass++) {
",6,1,0,1,3,0,0,0,0,8,34,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,426,"            for (int i=0; i<iLinks.size(); i += 2) {
",6,1,0,2,5,0,4,0,0,12,40,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,427,"                String id = iLinks.get(i);
",2,0,0,1,2,0,6,2,0,10,26,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,428,"                String alias = iLinks.get(i + 1);
",4,1,0,1,2,0,4,2,0,11,33,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,429,"                DateTimeZone tz = map.get(id);
",2,0,0,1,2,0,6,2,0,10,30,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,430,"                if (tz == null) {
",2,1,0,1,3,0,0,0,0,3,17,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,431,"                    if (pass > 0) {
",2,1,0,1,3,0,0,0,0,3,15,10,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,432,"                        System.out.println(""Cannot find time zone '"" + id +
",6,1,0,0,1,0,2,0,0,10,51,13,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,436,"                    map.put(alias, tz);
",0,0,0,1,2,0,8,0,0,8,19,11,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,441,"        if (outputDir != null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,442,"            System.out.println(""Writing ZoneInfoMap"");
",4,0,0,1,2,0,2,0,0,7,42,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,443,"            File file = new File(outputDir, ""ZoneInfoMap"");
",4,0,0,1,2,0,0,4,0,9,47,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,444,"            if (!file.getParentFile().exists()) {
",0,0,0,3,7,0,6,0,0,7,37,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,445,"                file.getParentFile().mkdirs();
",0,0,0,2,4,0,6,0,0,6,30,9,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,448,"            OutputStream out = new FileOutputStream(file);
",4,0,0,1,2,0,0,4,0,8,46,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,449,"            DataOutputStream dout = new DataOutputStream(out);
",4,0,0,1,2,0,0,4,0,8,50,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,452,"                Map<String, DateTimeZone> zimap = new TreeMap<String, DateTimeZone>(String.CASE_INSENSITIVE_ORDER);
",6,0,0,1,2,0,0,12,0,18,99,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,453,"                zimap.putAll(map);
",0,0,0,1,2,0,6,0,0,6,18,9,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,454,"                writeZoneInfoMap(dout, zimap);
",0,0,0,1,2,0,6,0,0,6,30,9,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,456,"                dout.close();
",0,0,0,1,2,0,4,0,0,4,13,9,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,457,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,460,"        return map;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,464,"        Zone zone = null;
",2,0,0,0,0,0,0,2,0,4,17,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,466,"        while ((line = in.readLine()) != null) {
",2,1,0,3,7,0,4,0,0,8,40,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,467,"            String trimmed = line.trim();
",2,0,0,1,2,0,4,2,0,8,29,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,468,"            if (trimmed.length() == 0 || trimmed.charAt(0) == '#') {
",0,3,0,3,7,0,8,0,0,12,56,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,469,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,472,"            int index = line.indexOf('#');
",2,0,0,1,2,0,4,0,0,7,30,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,473,"            if (index >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,474,"                line = line.substring(0, index);
",2,0,0,1,2,0,6,0,0,9,32,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,479,"            StringTokenizer st = new StringTokenizer(line, "" \t"");
",4,0,0,1,2,0,0,4,0,9,54,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,481,"            if (Character.isWhitespace(line.charAt(0)) && st.hasMoreTokens()) {
",0,1,0,4,9,0,12,0,0,13,67,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,482,"                if (zone != null) {
",2,1,0,1,3,0,0,0,0,3,19,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,484,"                    zone.chain(st);
",0,0,0,1,2,0,6,0,0,6,15,11,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,488,"                if (zone != null) {
",2,1,0,1,3,0,0,0,0,3,19,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,489,"                    iZones.add(zone);
",0,0,0,1,2,0,6,0,0,6,17,11,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,491,"                zone = null;
",2,0,0,0,0,0,0,0,0,3,12,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,494,"            if (st.hasMoreTokens()) {
",0,0,0,2,5,0,4,0,0,4,25,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,495,"                String token = st.nextToken();
",2,0,0,1,2,0,4,2,0,8,30,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,496,"                if (token.equalsIgnoreCase(""Rule"")) {
",0,0,0,2,5,0,4,0,0,5,37,9,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,497,"                    Rule r = new Rule(st);
",4,0,0,1,2,0,0,4,0,8,22,10,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,498,"                    RuleSet rs = iRuleSets.get(r.iName);
",6,0,0,1,2,0,4,2,0,12,36,10,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,499,"                    if (rs == null) {
",2,1,0,1,3,0,0,0,0,3,17,10,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,500,"                        rs = new RuleSet(r);
",4,0,0,1,2,0,0,2,0,7,20,12,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,501,"                        iRuleSets.put(r.iName, rs);
",4,0,0,1,2,0,6,0,0,10,27,13,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,503,"                        rs.addRule(r);
",0,0,0,1,2,0,6,0,0,6,14,13,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,505,"                } else if (token.equalsIgnoreCase(""Zone"")) {
",0,0,0,2,6,0,4,0,0,5,44,10,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,506,"                    zone = new Zone(st);
",4,0,0,1,2,0,0,2,0,7,20,11,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,507,"                } else if (token.equalsIgnoreCase(""Link"")) {
",0,0,0,2,6,0,4,0,0,5,44,11,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,508,"                    iLinks.add(st.nextToken());
",0,0,0,2,4,0,8,0,0,8,27,13,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,509,"                    iLinks.add(st.nextToken());
",0,0,0,2,4,0,8,0,0,8,27,13,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,511,"                    System.out.println(""Unknown line: "" + line);
",6,1,0,1,2,0,2,0,0,10,44,13,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,514,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,516,"        if (zone != null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,517,"            iZones.add(zone);
",0,0,0,1,2,0,6,0,0,6,17,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,519,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,97,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,102,"            return chrono;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,107,"                chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));
",2,0,0,2,4,0,8,2,0,13,76,8,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,108,"                cCache.put(zone, chrono);
",0,0,0,1,2,0,8,0,0,8,25,9,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,133,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,143,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,144,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,146,"        if (zone == getZone()) {
",2,1,0,2,5,0,2,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,147,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,149,"        return getInstance(zone);
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,160,"        String str = ""ISOChronology"";
",2,0,0,0,0,0,0,2,0,5,29,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,161,"        DateTimeZone zone = getZone();
",2,0,0,1,2,0,2,2,0,6,30,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,162,"        if (zone != null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,163,"            str = str + '[' + zone.getID() + ']';
",4,1,0,2,4,0,4,0,0,12,37,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,165,"        return str;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,190,"        return super.equals(obj);
",4,0,0,1,2,1,0,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,200,"        return ""ISO"".hashCode() * 11 + getZone().hashCode();
",0,2,0,3,6,1,6,0,0,9,52,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,208,"        return new Stub(getZone());
",0,0,0,2,4,1,2,2,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,107,"        if ((base = iBase) != null) {
",4,1,0,2,5,0,0,0,0,6,29,4,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,108,"            return base.getZone();
",0,0,0,1,2,1,4,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,110,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,118,"        if ((base = iBase) != null && (iBaseFlags & 6) == 6) {
",6,4,0,3,7,0,0,0,0,11,54,4,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,120,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);
",0,0,0,1,2,1,12,0,0,12,74,7,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,122,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);
",10,0,0,1,2,1,0,0,0,10,75,5,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,131,"        if ((base = iBase) != null && (iBaseFlags & 5) == 5) {
",6,4,0,3,7,0,0,0,0,11,54,4,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,133,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,
",0,0,0,0,1,1,10,0,0,10,60,7,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,136,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth,
",8,0,0,0,1,1,0,0,0,8,61,5,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,146,"        if ((base = iBase) != null && (iBaseFlags & 1) == 1) {
",6,4,0,3,7,0,0,0,0,11,54,4,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,148,"            return base.getDateTimeMillis
",0,0,0,0,0,1,4,0,0,4,29,7,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,151,"        return super.getDateTimeMillis
",2,0,0,0,0,1,0,0,0,2,30,5,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,315,"        return iParam;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,389,"        in.defaultReadObject();
",0,0,0,1,2,0,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,390,"        setFields();
",0,0,0,1,2,0,2,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,391,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,59,"        super(base, null);
",2,0,0,1,2,0,0,0,0,3,18,3,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,60,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,45,"        if (base == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,46,"            throw new IllegalArgumentException(""Must supply a chronology"");
",0,0,0,1,2,0,0,2,0,3,63,7,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,48,"        return new LenientChronology(base);
",2,0,0,1,2,1,0,2,0,4,35,5,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,63,"        if (iWithUTC == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,64,"            if (getZone() == DateTimeZone.UTC) {
",4,1,0,2,5,0,2,0,0,7,36,6,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,65,"                iWithUTC = this;
",2,0,0,0,0,0,0,0,0,3,16,8,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,67,"                iWithUTC = LenientChronology.getInstance(getBase().withUTC());
",2,0,0,3,6,0,8,0,0,11,62,8,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,70,"        return iWithUTC;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,74,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,75,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,77,"        if (zone == DateTimeZone.UTC) {
",6,1,0,1,3,0,0,0,0,7,31,4,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,78,"            return withUTC();
",0,0,0,1,2,1,2,0,0,2,17,7,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,80,"        if (zone == getZone()) {
",2,1,0,2,5,0,2,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,81,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,83,"        return LenientChronology.getInstance(getBase().withZone(zone));
",0,0,0,3,6,1,10,0,0,10,63,5,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,87,"        fields.year = convertField(fields.year);
",8,0,0,1,2,0,2,0,0,11,40,4,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,88,"        fields.yearOfEra = convertField(fields.yearOfEra);
",8,0,0,1,2,0,2,0,0,11,50,4,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,89,"        fields.yearOfCentury = convertField(fields.yearOfCentury);
",8,0,0,1,2,0,2,0,0,11,58,4,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,90,"        fields.centuryOfEra = convertField(fields.centuryOfEra);
",8,0,0,1,2,0,2,0,0,11,56,4,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,91,"        fields.era = convertField(fields.era);
",8,0,0,1,2,0,2,0,0,11,38,4,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,92,"        fields.dayOfWeek = convertField(fields.dayOfWeek);
",8,0,0,1,2,0,2,0,0,11,50,4,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,93,"        fields.dayOfMonth = convertField(fields.dayOfMonth);
",8,0,0,1,2,0,2,0,0,11,52,4,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,94,"        fields.dayOfYear = convertField(fields.dayOfYear);
",8,0,0,1,2,0,2,0,0,11,50,4,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,95,"        fields.monthOfYear = convertField(fields.monthOfYear);
",8,0,0,1,2,0,2,0,0,11,54,4,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,96,"        fields.weekOfWeekyear = convertField(fields.weekOfWeekyear);
",8,0,0,1,2,0,2,0,0,11,60,4,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,97,"        fields.weekyear = convertField(fields.weekyear);
",8,0,0,1,2,0,2,0,0,11,48,4,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,98,"        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury);
",8,0,0,1,2,0,2,0,0,11,66,4,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,100,"        fields.millisOfSecond = convertField(fields.millisOfSecond);
",8,0,0,1,2,0,2,0,0,11,60,4,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,101,"        fields.millisOfDay = convertField(fields.millisOfDay);
",8,0,0,1,2,0,2,0,0,11,54,4,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,102,"        fields.secondOfMinute = convertField(fields.secondOfMinute);
",8,0,0,1,2,0,2,0,0,11,60,4,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,103,"        fields.secondOfDay = convertField(fields.secondOfDay);
",8,0,0,1,2,0,2,0,0,11,54,4,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,104,"        fields.minuteOfHour = convertField(fields.minuteOfHour);
",8,0,0,1,2,0,2,0,0,11,56,4,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,105,"        fields.minuteOfDay = convertField(fields.minuteOfDay);
",8,0,0,1,2,0,2,0,0,11,54,4,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,106,"        fields.hourOfDay = convertField(fields.hourOfDay);
",8,0,0,1,2,0,2,0,0,11,50,4,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,107,"        fields.hourOfHalfday = convertField(fields.hourOfHalfday);
",8,0,0,1,2,0,2,0,0,11,58,4,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,108,"        fields.clockhourOfDay = convertField(fields.clockhourOfDay);
",8,0,0,1,2,0,2,0,0,11,60,4,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,109,"        fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday);
",8,0,0,1,2,0,2,0,0,11,68,4,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,110,"        fields.halfdayOfDay = convertField(fields.halfdayOfDay);
",8,0,0,1,2,0,2,0,0,11,56,4,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,111,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,114,"        return LenientDateTimeField.getInstance(field, getBase());
",0,0,0,2,4,1,8,0,0,8,58,5,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,127,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,128,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,130,"        if (obj instanceof LenientChronology == false) {
",2,1,0,1,3,0,0,2,0,6,48,4,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,131,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,133,"        LenientChronology chrono = (LenientChronology) obj;
",4,0,0,1,2,0,0,4,0,8,51,4,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,134,"        return getBase().equals(chrono.getBase());
",0,0,0,3,6,1,8,0,0,8,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,144,"        return 236548278 + getBase().hashCode() * 7;
",0,2,0,2,4,1,4,0,0,6,44,4,0.00000,0
defect4j,time,org/joda/time/chrono/LenientChronology,11,153,"        return ""LenientChronology["" + getBase().toString() + ']';
",0,1,0,3,6,1,4,0,0,7,57,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,529,"        DateTimeOfYear() {
",2,0,0,1,3,0,0,0,0,2,18,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,530,"            iMonthOfYear = 1;
",2,0,0,0,0,0,0,0,0,3,17,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,531,"            iDayOfMonth = 1;
",2,0,0,0,0,0,0,0,0,3,16,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,532,"            iDayOfWeek = 0;
",2,0,0,0,0,0,0,0,0,3,15,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,533,"            iAdvanceDayOfWeek = false;
",2,0,0,0,0,0,0,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,534,"            iMillisOfDay = 0;
",2,0,0,0,0,0,0,0,0,3,17,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,535,"            iZoneChar = 'w';
",2,0,0,0,0,0,0,0,0,4,16,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,536,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,538,"        DateTimeOfYear(StringTokenizer st) {
",4,0,0,1,3,0,0,2,0,6,36,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,539,"            int month = 1;
",2,0,0,0,0,0,0,0,0,2,14,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,540,"            int day = 1;
",2,0,0,0,0,0,0,0,0,2,12,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,541,"            int dayOfWeek = 0;
",2,0,0,0,0,0,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,542,"            int millis = 0;
",2,0,0,0,0,0,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,543,"            boolean advance = false;
",2,0,0,0,0,0,0,0,0,3,24,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,544,"            char zoneChar = 'w';
",2,0,0,0,0,0,0,0,0,3,20,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,546,"            if (st.hasMoreTokens()) {
",0,0,0,2,5,0,4,0,0,4,25,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,547,"                month = parseMonth(st.nextToken());
",2,0,0,2,4,0,6,0,0,9,35,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,549,"                if (st.hasMoreTokens()) {
",0,0,0,2,5,0,4,0,0,4,25,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,550,"                    String str = st.nextToken();
",2,0,0,1,2,0,4,2,0,8,28,9,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,551,"                    if (str.startsWith(""last"")) {
",0,0,0,2,5,0,4,0,0,5,29,10,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,552,"                        day = -1;
",2,0,0,0,0,0,0,0,0,4,9,11,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,553,"                        dayOfWeek = parseDayOfWeek(str.substring(4));
",2,0,0,2,4,0,6,0,0,9,45,11,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,554,"                        advance = false;
",2,0,0,0,0,0,0,0,0,4,16,11,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,557,"                            day = Integer.parseInt(str);
",2,0,0,1,2,0,6,0,0,9,28,13,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,558,"                            dayOfWeek = 0;
",2,0,0,0,0,0,0,0,0,3,14,13,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,559,"                            advance = false;
",2,0,0,0,0,0,0,0,0,4,16,13,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,576,"                        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,560,"                        } catch (NumberFormatException e) {
",2,0,0,1,4,0,0,2,0,4,35,13,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,561,"                            int index = str.indexOf("">="");
",2,0,0,1,2,0,4,0,0,7,30,15,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,562,"                            if (index > 0) {
",2,1,0,1,3,0,0,0,0,3,16,14,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,563,"                                day = Integer.parseInt(str.substring(index + 2));
",4,1,0,2,4,0,8,0,0,14,49,16,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,564,"                                dayOfWeek = parseDayOfWeek(str.substring(0, index));
",2,0,0,2,4,0,8,0,0,11,52,16,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,565,"                                advance = true;
",2,0,0,0,0,0,0,0,0,4,15,16,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,567,"                                index = str.indexOf(""<="");
",2,0,0,1,2,0,4,0,0,8,26,16,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,568,"                                if (index > 0) {
",2,1,0,1,3,0,0,0,0,3,16,16,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,569,"                                    day = Integer.parseInt(str.substring(index + 2));
",4,1,0,2,4,0,8,0,0,14,49,18,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,570,"                                    dayOfWeek = parseDayOfWeek(str.substring(0, index));
",2,0,0,2,4,0,8,0,0,11,52,18,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,571,"                                    advance = false;
",2,0,0,0,0,0,0,0,0,4,16,18,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,573,"                                    throw new IllegalArgumentException(str);
",2,0,0,1,2,0,0,2,0,4,40,19,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,579,"                    if (st.hasMoreTokens()) {
",0,0,0,2,5,0,4,0,0,4,25,10,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,580,"                        str = st.nextToken();
",2,0,0,1,2,0,4,0,0,7,21,11,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,581,"                        zoneChar = parseZoneChar(str.charAt(str.length() - 1));
",2,1,0,3,6,0,10,0,0,14,55,11,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,582,"                        if (str.equals(""24:00"")) {
",0,0,0,2,5,0,4,0,0,5,26,12,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,583,"                            LocalDate date = (day == -1 ?
",4,1,0,0,1,0,0,2,0,8,29,13,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,586,"                            advance = (day != -1);
",4,1,0,1,2,0,0,0,0,7,22,13,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,587,"                            month = date.getMonthOfYear();
",2,0,0,1,2,0,4,0,0,7,30,13,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,588,"                            day = date.getDayOfMonth();
",2,0,0,1,2,0,4,0,0,7,27,13,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,589,"                            dayOfWeek = ((dayOfWeek - 1 + 1) % 7) + 1;
",4,4,0,2,4,0,0,0,0,9,42,13,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,590,"                        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,591,"                            millis = parseTime(str);
",2,0,0,1,2,0,4,0,0,7,24,13,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,597,"            iMonthOfYear = month;
",4,0,0,0,0,0,0,0,0,5,21,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,598,"            iDayOfMonth = day;
",4,0,0,0,0,0,0,0,0,5,18,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,599,"            iDayOfWeek = dayOfWeek;
",4,0,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,600,"            iAdvanceDayOfWeek = advance;
",4,0,0,0,0,0,0,0,0,5,28,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,601,"            iMillisOfDay = millis;
",4,0,0,0,0,0,0,0,0,5,22,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,602,"            iZoneChar = zoneChar;
",4,0,0,0,0,0,0,0,0,5,21,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,603,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,611,"            builder.addRecurringSavings(nameKey, saveMillis,
",0,0,0,0,1,0,8,0,0,8,48,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,619,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,625,"            builder.addCutover(year,
",0,0,0,0,1,0,6,0,0,6,24,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,632,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,635,"            return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,751,"            this(st.nextToken(), st);
",2,0,0,2,4,0,4,0,0,6,25,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,752,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,754,"        private Zone(String name, StringTokenizer st) {
",6,0,0,1,3,1,0,4,0,11,47,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,755,"            iName = name.intern();
",2,0,0,1,2,0,4,0,0,7,22,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,756,"            iOffsetMillis = parseTime(st.nextToken());
",2,0,0,2,4,0,6,0,0,9,42,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,757,"            iRules = parseOptional(st.nextToken());
",2,0,0,2,4,0,6,0,0,9,39,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,758,"            iFormat = st.nextToken().intern();
",2,0,0,2,4,0,6,0,0,9,34,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,760,"            int year = Integer.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,6,29,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,761,"            DateTimeOfYear dtOfYear = getStartOfYear();
",2,0,0,1,2,0,2,2,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,763,"            if (st.hasMoreTokens()) {
",0,0,0,2,5,0,4,0,0,4,25,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,764,"                year = Integer.parseInt(st.nextToken());
",2,0,0,2,4,0,8,0,0,11,40,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,765,"                if (st.hasMoreTokens()) {
",0,0,0,2,5,0,4,0,0,4,25,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,766,"                    dtOfYear = new DateTimeOfYear(st);
",4,0,0,1,2,0,0,2,0,7,34,9,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,770,"            iUntilYear = year;
",4,0,0,0,0,0,0,0,0,5,18,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,771,"            iUntilDateTimeOfYear = dtOfYear;
",4,0,0,0,0,0,0,0,0,5,32,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,772,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,775,"            if (iNext != null) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,776,"                iNext.chain(st);
",0,0,0,1,2,0,6,0,0,6,16,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,778,"                iNext = new Zone(iName, st);
",6,0,0,1,2,0,0,2,0,9,28,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,780,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,794,"            addToBuilder(this, builder, ruleSets);
",0,0,0,1,2,0,6,0,0,6,38,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,795,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,801,"            for (; zone != null; zone = zone.iNext) {
",8,1,0,1,3,0,0,0,0,10,41,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,802,"                builder.setStandardOffset(zone.iOffsetMillis);
",4,0,0,1,2,0,4,0,0,8,46,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,804,"                if (zone.iRules == null) {
",4,1,0,1,3,0,0,0,0,5,26,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,805,"                    builder.setFixedSavings(zone.iFormat, 0);
",4,0,0,1,2,0,4,0,0,8,41,10,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,809,"                        int saveMillis = parseTime(zone.iRules);
",6,0,0,1,2,0,2,0,0,8,40,12,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,810,"                        builder.setFixedSavings(zone.iFormat, saveMillis);
",4,0,0,1,2,0,6,0,0,10,50,12,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,819,"                    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,812,"                    catch (Exception e) {
",2,0,0,1,3,0,0,2,0,4,21,11,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,813,"                        RuleSet rs = ruleSets.get(zone.iRules);
",6,0,0,1,2,0,4,2,0,12,39,12,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,814,"                        if (rs == null) {
",2,1,0,1,3,0,0,0,0,3,17,12,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,815,"                            throw new IllegalArgumentException
",0,0,0,0,0,0,0,2,0,2,34,16,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,818,"                        rs.addRecurring(builder, zone.iFormat);
",4,0,0,1,2,0,6,0,0,10,39,13,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,822,"                if (zone.iUntilYear == Integer.MAX_VALUE) {
",8,1,0,1,3,0,0,0,0,9,43,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,823,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,826,"                zone.iUntilDateTimeOfYear.addCutover(builder, zone.iUntilYear);
",8,0,0,1,2,0,4,0,0,12,63,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,828,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,831,"            String str =
",2,0,0,0,0,0,0,2,0,4,12,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,840,"            if (iNext == null) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,841,"                return str;
",2,0,0,0,0,1,0,0,0,2,11,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,844,"            return str + ""...\n"" + iNext.toString();
",2,1,0,1,2,1,4,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,717,"        RuleSet(Rule rule) {
",4,0,0,1,3,0,0,2,0,6,20,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,718,"            iRules = new ArrayList<Rule>();
",2,0,0,1,2,0,0,4,0,7,31,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,719,"            iRules.add(rule);
",0,0,0,1,2,0,6,0,0,6,17,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,720,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,723,"            if (!(rule.iName.equals(iRules.get(0).iName))) {
",6,0,0,4,9,0,6,0,0,13,48,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,724,"                throw new IllegalArgumentException(""Rule name mismatch"");
",0,0,0,1,2,0,0,2,0,3,57,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,726,"            iRules.add(rule);
",0,0,0,1,2,0,6,0,0,6,17,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,727,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,733,"            for (int i=0; i<iRules.size(); i++) {
",6,1,0,2,5,0,4,0,0,12,37,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,734,"                Rule rule = iRules.get(i);
",2,0,0,1,2,0,6,2,0,10,26,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,735,"                rule.addRecurring(builder, nameFormat);
",0,0,0,1,2,0,8,0,0,8,39,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoCompiler,11,737,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,823,"            return iFromYear;
",2,0,0,0,0,1,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,831,"            return iRecurrence.getOfYear();
",0,0,0,1,2,1,4,0,0,4,31,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,869,"                    next = instant;
",4,0,0,0,0,0,0,0,0,5,15,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,506,"                throw new IllegalArgumentException(""Unknown mode: "" + mode);
",2,1,0,1,2,0,0,2,0,6,60,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,522,"            if (iMode == 'w') {
",2,1,0,1,3,0,0,0,0,4,19,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,523,"                offset = standardOffset + saveMillis;
",6,1,0,0,0,0,0,0,0,8,37,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,524,"            } else if (iMode == 's') {
",2,1,0,1,4,0,0,0,0,4,26,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,525,"                offset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,24,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,527,"                offset = 0;
",2,0,0,0,0,0,0,0,0,3,11,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,530,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,531,"            long millis = chrono.year().set(0, year);
",2,0,0,2,4,0,8,0,0,10,41,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,532,"            millis = chrono.monthOfYear().set(millis, iMonthOfYear);
",2,0,0,2,4,0,10,0,0,13,56,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,533,"            millis = chrono.millisOfDay().set(millis, iMillisOfDay);
",2,0,0,2,4,0,10,0,0,13,56,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,534,"            millis = setDayOfMonth(chrono, millis);
",2,0,0,1,2,0,6,0,0,9,39,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,536,"            if (iDayOfWeek != 0) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,537,"                millis = setDayOfWeek(chrono, millis);
",2,0,0,1,2,0,6,0,0,9,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,541,"            return millis - offset;
",4,1,0,0,0,1,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,551,"            } else if (iMode == 's') {
",2,1,0,1,4,0,0,0,0,4,26,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,552,"                offset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,24,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,554,"                offset = 0;
",2,0,0,0,0,0,0,0,0,3,11,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,568,"                if (next <= instant) {
",4,1,0,1,3,0,0,0,0,5,22,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,569,"                    next = chrono.year().add(next, 1);
",2,0,0,2,4,0,8,0,0,11,34,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,570,"                    next = setDayOfMonthNext(chrono, next);
",2,0,0,1,2,0,6,0,0,9,39,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,591,"            if (iMode == 'w') {
",2,1,0,1,3,0,0,0,0,4,19,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,592,"                offset = standardOffset + saveMillis;
",6,1,0,0,0,0,0,0,0,8,37,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,593,"            } else if (iMode == 's') {
",2,1,0,1,4,0,0,0,0,4,26,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,594,"                offset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,24,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,596,"                offset = 0;
",2,0,0,0,0,0,0,0,0,3,11,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,600,"            instant += offset;
",4,0,0,0,0,0,0,0,0,5,18,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,602,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,603,"            long prev = chrono.monthOfYear().set(instant, iMonthOfYear);
",2,0,0,2,4,0,10,0,0,12,60,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,605,"            prev = chrono.millisOfDay().set(prev, 0);
",2,0,0,2,4,0,8,0,0,11,41,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,606,"            prev = chrono.millisOfDay().add(prev, iMillisOfDay);
",2,0,0,2,4,0,10,0,0,13,52,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,607,"            prev = setDayOfMonthPrevious(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,43,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,609,"            if (iDayOfWeek == 0) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,610,"                if (prev >= instant) {
",4,1,0,1,3,0,0,0,0,5,22,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,611,"                    prev = chrono.year().add(prev, -1);
",2,0,0,2,4,0,8,0,0,12,35,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,612,"                    prev = setDayOfMonthPrevious(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,43,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,615,"                prev = setDayOfWeek(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,34,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,616,"                if (prev >= instant) {
",4,1,0,1,3,0,0,0,0,5,22,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,617,"                    prev = chrono.year().add(prev, -1);
",2,0,0,2,4,0,8,0,0,12,35,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,618,"                    prev = chrono.monthOfYear().set(prev, iMonthOfYear);
",2,0,0,2,4,0,10,0,0,13,52,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,619,"                    prev = setDayOfMonthPrevious(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,43,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,620,"                    prev = setDayOfWeek(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,34,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,625,"            return prev - offset;
",4,1,0,0,0,1,0,0,0,5,21,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,629,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,630,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,632,"            if (obj instanceof OfYear) {
",2,0,0,1,3,0,0,2,0,4,28,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,633,"                OfYear other = (OfYear)obj;
",4,0,0,1,2,0,0,4,0,8,27,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,634,"                return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,642,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,659,"            out.writeByte(iMode);
",0,0,0,1,2,0,6,0,0,6,21,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,660,"            out.writeByte(iMonthOfYear);
",0,0,0,1,2,0,6,0,0,6,28,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,661,"            out.writeByte(iDayOfMonth);
",0,0,0,1,2,0,6,0,0,6,27,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,662,"            out.writeByte(iDayOfWeek);
",0,0,0,1,2,0,6,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,663,"            out.writeBoolean(iAdvance);
",0,0,0,1,2,0,6,0,0,6,27,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,664,"            writeMillis(out, iMillisOfDay);
",0,0,0,1,2,0,6,0,0,6,31,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,665,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,673,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,674,"                if (iMonthOfYear == 2 && iDayOfMonth == 29) {
",4,3,0,1,3,0,0,0,0,7,45,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,675,"                    while (chrono.year().isLeap(next) == false) {
",0,1,0,3,7,0,8,0,0,10,45,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,676,"                        next = chrono.year().add(next, 1);
",2,0,0,2,4,0,8,0,0,11,34,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,678,"                    next = setDayOfMonth(chrono, next);
",2,0,0,1,2,0,6,0,0,9,35,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,680,"                    throw e;
",2,0,0,0,0,0,0,0,0,2,8,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,691,"                prev = setDayOfMonth(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,35,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,701,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,692,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,693,"                if (iMonthOfYear == 2 && iDayOfMonth == 29) {
",4,3,0,1,3,0,0,0,0,7,45,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,694,"                    while (chrono.year().isLeap(prev) == false) {
",0,1,0,3,7,0,8,0,0,10,45,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,695,"                        prev = chrono.year().add(prev, -1);
",2,0,0,2,4,0,8,0,0,12,35,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,697,"                    prev = setDayOfMonth(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,35,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,699,"                    throw e;
",2,0,0,0,0,0,0,0,0,2,8,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,702,"            return prev;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,707,"                instant = chrono.dayOfMonth().set(instant, iDayOfMonth);
",2,0,0,2,4,0,10,0,0,13,56,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,721,"                    if (daysToAdd < 0) {
",2,1,0,1,3,0,0,0,0,3,20,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,722,"                        daysToAdd += 7;
",2,0,0,0,0,0,0,0,0,3,15,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,726,"                        daysToAdd -= 7;
",2,0,0,0,0,0,0,0,0,3,15,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1183,"            return findMatchingRecurrence(instant).getNameKey();
",0,0,0,2,4,1,6,0,0,6,52,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1187,"            return iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();
",2,1,0,2,4,1,6,0,0,9,73,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1191,"            return iStandardOffset;
",2,0,0,0,0,1,0,0,0,2,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1195,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1199,"            int standardOffset = iStandardOffset;
",4,0,0,0,0,0,0,0,0,4,37,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1200,"            Recurrence startRecurrence = iStartRecurrence;
",4,0,0,0,0,0,0,2,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1201,"            Recurrence endRecurrence = iEndRecurrence;
",4,0,0,0,0,0,0,2,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1206,"                start = startRecurrence.next
",2,0,0,0,0,0,4,0,0,7,28,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1208,"                if (instant > 0 && start < 0) {
",4,3,0,1,3,0,0,0,0,7,31,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1210,"                    start = instant;
",4,0,0,0,0,0,0,0,0,5,16,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1218,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1212,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1214,"                start = instant;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1215,"            } catch (ArithmeticException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1217,"                start = instant;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1221,"                end = endRecurrence.next
",2,0,0,0,0,0,4,0,0,7,24,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1223,"                if (instant > 0 && end < 0) {
",4,3,0,1,3,0,0,0,0,7,29,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1225,"                    end = instant;
",4,0,0,0,0,0,0,0,0,5,14,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1233,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1227,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1229,"                end = instant;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1230,"            } catch (ArithmeticException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1232,"                end = instant;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1235,"            return (start > end) ? end : start;
",8,1,0,1,2,1,0,0,0,9,35,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1241,"            instant++;
",2,0,0,0,0,0,0,0,0,3,10,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1243,"            int standardOffset = iStandardOffset;
",4,0,0,0,0,0,0,0,0,4,37,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1244,"            Recurrence startRecurrence = iStartRecurrence;
",4,0,0,0,0,0,0,2,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1245,"            Recurrence endRecurrence = iEndRecurrence;
",4,0,0,0,0,0,0,2,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1250,"                start = startRecurrence.previous
",2,0,0,0,0,0,4,0,0,7,32,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1252,"                if (instant < 0 && start > 0) {
",4,3,0,1,3,0,0,0,0,7,31,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1254,"                    start = instant;
",4,0,0,0,0,0,0,0,0,5,16,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1262,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1256,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1258,"                start = instant;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1259,"            } catch (ArithmeticException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1261,"                start = instant;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1265,"                end = endRecurrence.previous
",2,0,0,0,0,0,4,0,0,7,28,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1267,"                if (instant < 0 && end > 0) {
",4,3,0,1,3,0,0,0,0,7,29,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1269,"                    end = instant;
",4,0,0,0,0,0,0,0,0,5,14,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1277,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1271,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1273,"                end = instant;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1274,"            } catch (ArithmeticException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1276,"                end = instant;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1279,"            return ((start > end) ? start : end) - 1;
",8,2,0,2,4,1,0,0,0,10,41,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1283,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1284,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1286,"            if (obj instanceof DSTZone) {
",2,0,0,1,3,0,0,2,0,4,29,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1287,"                DSTZone other = (DSTZone)obj;
",4,0,0,1,2,0,0,4,0,8,29,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1288,"                return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1294,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1298,"            writeMillis(out, iStandardOffset);
",0,0,0,1,2,0,6,0,0,6,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1299,"            iStartRecurrence.writeTo(out);
",0,0,0,1,2,0,6,0,0,6,30,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1300,"            iEndRecurrence.writeTo(out);
",0,0,0,1,2,0,6,0,0,6,28,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1301,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1304,"            int standardOffset = iStandardOffset;
",4,0,0,0,0,0,0,0,0,4,37,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1305,"            Recurrence startRecurrence = iStartRecurrence;
",4,0,0,0,0,0,0,2,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1306,"            Recurrence endRecurrence = iEndRecurrence;
",4,0,0,0,0,0,0,2,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1311,"                start = startRecurrence.next
",2,0,0,0,0,0,4,0,0,7,28,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1319,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1313,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1315,"                start = instant;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1316,"            } catch (ArithmeticException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1318,"                start = instant;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1322,"                end = endRecurrence.next
",2,0,0,0,0,0,4,0,0,7,24,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1330,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1324,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1326,"                end = instant;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1327,"            } catch (ArithmeticException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1329,"                end = instant;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1332,"            return (start > end) ? startRecurrence : endRecurrence;
",8,1,0,1,2,1,0,0,0,9,55,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,981,"            return iStandardOffset;
",2,0,0,0,0,1,0,0,0,2,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,989,"            iInitialNameKey = nameKey;
",4,0,0,0,0,0,0,0,0,5,26,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,990,"            iInitialSaveMillis = saveMillis;
",4,0,0,0,0,0,0,0,0,5,32,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,991,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1000,"            iUpperYear = year;
",4,0,0,0,0,0,0,0,0,5,18,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1001,"            iUpperOfYear = ofYear;
",4,0,0,0,0,0,0,0,0,5,22,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1002,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1013,"                return new Transition(firstMillis, iInitialNameKey,
",4,0,0,0,1,1,0,2,0,6,51,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1033,"                    first = new Transition(firstMillis, next);
",6,0,0,1,2,0,0,2,0,9,42,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1034,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1053,"                        first = new Transition(firstMillis, next.getNameKey(),
",4,0,0,1,3,0,4,2,0,11,54,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1061,"                first = new Transition(firstMillis, next);
",6,0,0,1,2,0,0,2,0,9,42,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1063,"                saveMillis = next.getSaveMillis();
",2,0,0,1,2,0,4,0,0,7,34,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1093,"                    it.remove();
",0,0,0,1,2,0,4,0,0,4,12,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1094,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1106,"                return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1111,"                return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1116,"                long upperMillis =
",2,0,0,0,0,0,0,0,0,2,18,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1118,"                if (nextMillis >= upperMillis) {
",4,1,0,1,3,0,0,0,0,5,32,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1120,"                    return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1134,"            return iUpperOfYear.setInstant(iUpperYear, iStandardOffset, saveMillis);
",0,0,0,1,2,1,10,0,0,10,72,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1158,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,883,"        Transition(long millis, Transition tr) {
",6,0,0,1,3,0,0,2,0,8,40,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,884,"            iMillis = millis;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,885,"            iNameKey = tr.iNameKey;
",6,0,0,0,0,0,0,0,0,7,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,886,"            iWallOffset = tr.iWallOffset;
",6,0,0,0,0,0,0,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,887,"            iStandardOffset = tr.iStandardOffset;
",6,0,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,888,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,898,"                   int wallOffset, int standardOffset) {
",4,0,0,0,2,0,0,0,0,4,37,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,899,"            iMillis = millis;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,900,"            iNameKey = nameKey;
",4,0,0,0,0,0,0,0,0,5,19,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,901,"            iWallOffset = wallOffset;
",4,0,0,0,0,0,0,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,902,"            iStandardOffset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,33,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,903,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1362,"                        index = in.readUnsignedShort();
",2,0,0,1,2,0,4,0,0,7,31,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1365,"                } catch (ArrayIndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,44,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1366,"                    throw new IOException(""Invalid encoding"");
",0,0,0,1,2,0,0,2,0,3,42,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1391,"                throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1404,"                    throw new IllegalArgumentException(id);
",2,0,0,1,2,0,0,2,0,4,39,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1422,"                    zoneNameData = set;
",4,0,0,0,0,0,0,0,0,5,19,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1443,"                    if (ZoneInfoCompiler.verbose()) {
",0,0,0,2,5,0,4,0,0,4,33,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1444,"                        System.out.println(""Fixing duplicate name key - "" + nextNameKey);
",6,1,0,1,2,0,2,0,0,10,65,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1445,"                        System.out.println(""     - "" + new DateTime(trans[i], chrono) +
",6,1,1,2,5,0,2,2,0,16,63,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1448,"                    if (curOffset > nextOffset) {
",4,1,0,1,3,0,0,0,0,5,29,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1449,"                        nameKeys[i] = (curNameKey + ""-Summer"").intern();
",2,1,1,3,6,0,2,0,0,11,48,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1450,"                    } else if (curOffset < nextOffset) {
",4,1,0,1,4,0,0,0,0,5,36,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1451,"                        nameKeys[i + 1] = (nextNameKey + ""-Summer"").intern();
",4,2,1,3,6,0,2,0,0,12,53,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1452,"                        i++;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1460,"                    if (ZoneInfoCompiler.verbose()) {
",0,0,0,2,5,0,4,0,0,4,33,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1461,"                        System.out.println(""Fixing duplicate recurrent name key - "" +
",4,1,0,0,1,0,2,0,0,8,61,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1464,"                    if (tailZone.iStartRecurrence.getSaveMillis() > 0) {
",4,1,0,2,5,0,2,0,0,7,52,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1465,"                        tailZone = new DSTZone(
",2,0,0,0,1,0,0,2,0,5,23,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1471,"                        tailZone = new DSTZone(
",2,0,0,0,1,0,0,2,0,5,23,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1509,"            long[] transitions = iTransitions;
",4,0,0,1,2,0,0,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1510,"            int i = Arrays.binarySearch(transitions, instant);
",2,0,0,1,2,0,8,0,0,10,50,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1511,"            if (i >= 0) {
",2,1,0,1,3,0,0,0,0,3,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1512,"                return iNameKeys[i];
",0,0,1,1,2,1,0,0,0,4,20,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1514,"            i = ~i;
",4,0,0,0,0,0,0,0,0,6,7,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1515,"            if (i < transitions.length) {
",6,1,0,1,3,0,0,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1516,"                if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1517,"                    return iNameKeys[i - 1];
",2,1,1,1,2,1,0,0,0,5,24,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1519,"                return ""UTC"";
",0,0,0,0,0,1,0,0,0,1,13,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1521,"            if (iTailZone == null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1522,"                return iNameKeys[i - 1];
",2,1,1,1,2,1,0,0,0,5,24,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1524,"            return iTailZone.getNameKey(instant);
",0,0,0,1,2,1,6,0,0,6,37,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1528,"            long[] transitions = iTransitions;
",4,0,0,1,2,0,0,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1529,"            int i = Arrays.binarySearch(transitions, instant);
",2,0,0,1,2,0,8,0,0,10,50,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1530,"            if (i >= 0) {
",2,1,0,1,3,0,0,0,0,3,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1531,"                return iWallOffsets[i];
",0,0,1,1,2,1,0,0,0,4,23,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1533,"            i = ~i;
",4,0,0,0,0,0,0,0,0,6,7,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1534,"            if (i < transitions.length) {
",6,1,0,1,3,0,0,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1535,"                if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1536,"                    return iWallOffsets[i - 1];
",2,1,1,1,2,1,0,0,0,5,27,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1538,"                return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1540,"            if (iTailZone == null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1541,"                return iWallOffsets[i - 1];
",2,1,1,1,2,1,0,0,0,5,27,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1543,"            return iTailZone.getOffset(instant);
",0,0,0,1,2,1,6,0,0,6,36,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1547,"            long[] transitions = iTransitions;
",4,0,0,1,2,0,0,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1548,"            int i = Arrays.binarySearch(transitions, instant);
",2,0,0,1,2,0,8,0,0,10,50,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1549,"            if (i >= 0) {
",2,1,0,1,3,0,0,0,0,3,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1550,"                return iStandardOffsets[i];
",0,0,1,1,2,1,0,0,0,4,27,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1552,"            i = ~i;
",4,0,0,0,0,0,0,0,0,6,7,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1553,"            if (i < transitions.length) {
",6,1,0,1,3,0,0,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1554,"                if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1555,"                    return iStandardOffsets[i - 1];
",2,1,1,1,2,1,0,0,0,5,31,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1557,"                return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1559,"            if (iTailZone == null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1560,"                return iStandardOffsets[i - 1];
",2,1,1,1,2,1,0,0,0,5,31,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1562,"            return iTailZone.getStandardOffset(instant);
",0,0,0,1,2,1,6,0,0,6,44,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1566,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1570,"            long[] transitions = iTransitions;
",4,0,0,1,2,0,0,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1571,"            int i = Arrays.binarySearch(transitions, instant);
",2,0,0,1,2,0,8,0,0,10,50,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1572,"            i = (i >= 0) ? (i + 1) : ~i;
",8,2,0,2,4,0,0,0,0,12,28,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1573,"            if (i < transitions.length) {
",6,1,0,1,3,0,0,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1574,"                return transitions[i];
",0,0,1,1,2,1,0,0,0,4,22,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1576,"            if (iTailZone == null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1577,"                return instant;
",2,0,0,0,0,1,0,0,0,2,15,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1579,"            long end = transitions[transitions.length - 1];
",6,1,1,1,2,0,0,0,0,9,47,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1580,"            if (instant < end) {
",4,1,0,1,3,0,0,0,0,5,20,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1581,"                instant = end;
",4,0,0,0,0,0,0,0,0,5,14,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1583,"            return iTailZone.nextTransition(instant);
",0,0,0,1,2,1,6,0,0,6,41,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1587,"            long[] transitions = iTransitions;
",4,0,0,1,2,0,0,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1588,"            int i = Arrays.binarySearch(transitions, instant);
",2,0,0,1,2,0,8,0,0,10,50,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1589,"            if (i >= 0) {
",2,1,0,1,3,0,0,0,0,3,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1590,"                if (instant > Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,31,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1591,"                    return instant - 1;
",2,1,0,0,0,1,0,0,0,3,19,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1593,"                return instant;
",2,0,0,0,0,1,0,0,0,2,15,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1595,"            i = ~i;
",4,0,0,0,0,0,0,0,0,6,7,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1596,"            if (i < transitions.length) {
",6,1,0,1,3,0,0,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1597,"                if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1598,"                    long prev = transitions[i - 1];
",4,1,1,1,2,0,0,0,0,7,31,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1599,"                    if (prev > Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,28,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1600,"                        return prev - 1;
",2,1,0,0,0,1,0,0,0,3,16,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1603,"                return instant;
",2,0,0,0,0,1,0,0,0,2,15,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1605,"            if (iTailZone != null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1606,"                long prev = iTailZone.previousTransition(instant);
",2,0,0,1,2,0,6,0,0,8,50,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1607,"                if (prev < instant) {
",4,1,0,1,3,0,0,0,0,5,21,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1608,"                    return prev;
",2,0,0,0,0,1,0,0,0,2,12,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1611,"            long prev = transitions[i - 1];
",4,1,1,1,2,0,0,0,0,7,31,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1612,"            if (prev > Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,28,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1613,"                return prev - 1;
",2,1,0,0,0,1,0,0,0,3,16,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1615,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1619,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1620,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1622,"            if (obj instanceof PrecalculatedZone) {
",2,0,0,1,3,0,0,2,0,4,39,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1623,"                PrecalculatedZone other = (PrecalculatedZone)obj;
",4,0,0,1,2,0,0,4,0,8,49,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1624,"                return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1634,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1638,"            int size = iTransitions.length;
",6,0,0,0,0,0,0,0,0,6,31,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1641,"            Set<String> poolSet = new HashSet<String>();
",2,0,0,1,2,0,0,8,0,10,44,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1642,"            for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1643,"                poolSet.add(iNameKeys[i]);
",0,0,1,2,4,0,4,0,0,8,26,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1646,"            int poolSize = poolSet.size();
",2,0,0,1,2,0,4,0,0,6,30,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1647,"            if (poolSize > 65535) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1648,"                throw new UnsupportedOperationException(""String pool is too large"");
",0,0,0,1,2,0,0,2,0,3,68,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1650,"            String[] pool = new String[poolSize];
",2,0,1,2,4,0,0,4,0,8,37,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1651,"            Iterator<String> it = poolSet.iterator();
",2,0,0,1,2,0,4,4,0,10,41,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1652,"            for (int i=0; it.hasNext(); i++) {
",4,0,0,2,5,0,4,0,0,9,34,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1653,"                pool[i] = it.next();
",0,0,1,2,4,0,4,0,0,9,20,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1657,"            out.writeShort(poolSize);
",0,0,0,1,2,0,6,0,0,6,25,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1658,"            for (int i=0; i<poolSize; i++) {
",8,1,0,1,3,0,0,0,0,10,32,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1659,"                out.writeUTF(pool[i]);
",0,0,1,2,4,0,4,0,0,8,22,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1662,"            out.writeInt(size);
",0,0,0,1,2,0,6,0,0,6,19,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1664,"            for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1665,"                writeMillis(out, iTransitions[i]);
",0,0,1,2,4,0,4,0,0,8,34,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1666,"                writeMillis(out, iWallOffsets[i]);
",0,0,1,2,4,0,4,0,0,8,34,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1667,"                writeMillis(out, iStandardOffsets[i]);
",0,0,1,2,4,0,4,0,0,8,38,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1670,"                String nameKey = iNameKeys[i];
",2,0,1,1,2,0,0,2,0,8,30,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1671,"                for (int j=0; j<poolSize; j++) {
",8,1,0,1,3,0,0,0,0,10,32,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1672,"                    if (pool[j].equals(nameKey)) {
",0,0,1,3,7,0,4,0,0,8,30,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1673,"                        if (poolSize < 256) {
",2,1,0,1,3,0,0,0,0,3,21,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1674,"                            out.writeByte(j);
",0,0,0,1,2,0,6,0,0,6,17,14,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1676,"                            out.writeShort(j);
",0,0,0,1,2,0,6,0,0,6,18,14,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1678,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1683,"            out.writeBoolean(iTailZone != null);
",2,1,0,1,2,0,4,0,0,7,36,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1684,"            if (iTailZone != null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1685,"                iTailZone.writeTo(out);
",0,0,0,1,2,0,6,0,0,6,23,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1687,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1693,"            long[] transitions = iTransitions;
",4,0,0,1,2,0,0,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1694,"            if (transitions.length <= 1) {
",4,1,0,1,3,0,0,0,0,5,30,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1695,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1700,"            double distances = 0;
",2,0,0,0,0,0,0,0,0,2,21,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1701,"            int count = 0;
",2,0,0,0,0,0,0,0,0,2,14,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1703,"            for (int i=1; i<transitions.length; i++) {
",10,1,0,1,3,0,0,0,0,12,42,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1704,"                long diff = transitions[i] - transitions[i - 1];
",4,2,1,2,4,0,0,0,0,12,48,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1705,"                if (diff < ((366L + 365) * 24 * 60 * 60 * 1000)) {
",2,3,0,3,7,0,0,0,0,5,50,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1706,"                    distances += (double)diff;
",4,0,0,1,2,0,0,0,0,5,26,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1707,"                    count++;
",2,0,0,0,0,0,0,0,0,3,8,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1711,"            if (count > 0) {
",2,1,0,1,3,0,0,0,0,3,16,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1712,"                double avg = distances / count;
",6,1,0,0,0,0,0,0,0,7,31,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1713,"                avg /= 24 * 60 * 60 * 1000;
",2,1,0,0,0,0,0,0,0,4,27,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1714,"                if (avg >= 25) {
",2,1,0,1,3,0,0,0,0,3,16,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1721,"                    return true;
",0,0,0,0,0,1,0,0,0,1,12,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,1725,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,754,"            return iOfYear;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,768,"            return iOfYear.previous(instant, standardOffset, saveMillis);
",0,0,0,1,2,1,10,0,0,10,61,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,780,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,781,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,783,"            if (obj instanceof Recurrence) {
",2,0,0,1,3,0,0,2,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,784,"                Recurrence other = (Recurrence)obj;
",4,0,0,1,2,0,0,4,0,8,35,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,785,"                return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,790,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,794,"            iOfYear.writeTo(out);
",0,0,0,1,2,0,6,0,0,6,21,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,795,"            out.writeUTF(iNameKey);
",0,0,0,1,2,0,6,0,0,6,23,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,796,"            writeMillis(out, iSaveMillis);
",0,0,0,1,2,0,6,0,0,6,30,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,797,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,800,"            return new Recurrence(iOfYear, nameKey, iSaveMillis);
",6,0,0,1,2,1,0,2,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,11,804,"            return rename((iNameKey + appendNameKey).intern());
",4,1,0,3,6,1,4,0,0,9,51,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,11,43,"        String[] nameSet = getNameSet(locale, id, nameKey);
",2,0,0,2,4,0,8,2,0,12,51,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,11,44,"        return nameSet == null ? null : nameSet[0];
",2,1,1,1,2,1,0,0,0,5,43,5,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,11,48,"        String[] nameSet = getNameSet(locale, id, nameKey);
",2,0,0,2,4,0,8,2,0,12,51,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,11,49,"        return nameSet == null ? null : nameSet[1];
",2,1,1,1,2,1,0,0,0,5,43,5,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,11,53,"        if (locale == null || id == null || nameKey == null) {
",6,5,0,1,3,0,0,0,0,11,54,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,11,54,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,11,57,"        Map<String, Map<String, Object>> byIdCache = iByLocaleCache.get(locale);
",2,0,0,1,2,0,6,10,0,18,72,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,11,58,"        if (byIdCache == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,11,59,"            iByLocaleCache.put(locale, byIdCache = createCache());
",2,0,0,2,4,0,8,0,0,11,54,7,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,11,62,"        Map<String, Object> byNameKeyCache = byIdCache.get(id);
",2,0,0,1,2,0,6,6,0,14,55,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,11,63,"        if (byNameKeyCache == null) {
",2,1,0,1,3,0,0,0,0,3,29,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,11,64,"            byIdCache.put(id, byNameKeyCache = createCache());
",2,0,0,2,4,0,8,0,0,11,50,7,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,11,66,"            String[][] zoneStringsEn = DateTimeUtils.getDateFormatSymbols(Locale.ENGLISH).getZoneStrings();
",6,0,0,4,8,0,6,2,0,14,95,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,11,67,"            String[] setEn = null;
",2,0,0,1,2,0,0,2,0,4,22,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,11,68,"            for (String[] strings : zoneStringsEn) {
",4,0,0,2,5,0,0,2,0,6,40,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,11,69,"              if (strings != null && strings.length == 5 && id.equals(strings[0])) {
",6,4,1,3,7,0,4,0,0,16,70,8,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,11,70,"                setEn = strings;
",4,0,0,0,0,0,0,0,0,5,16,10,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,11,71,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,11,74,"            String[][] zoneStringsLoc = DateTimeUtils.getDateFormatSymbols(locale).getZoneStrings();
",2,0,0,4,8,0,8,2,0,12,88,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,11,75,"            String[] setLoc = null;
",2,0,0,1,2,0,0,2,0,4,23,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,11,76,"            for (String[] strings : zoneStringsLoc) {
",4,0,0,2,5,0,0,2,0,6,41,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,11,77,"              if (strings != null && strings.length == 5 && id.equals(strings[0])) {
",6,4,1,3,7,0,4,0,0,16,70,8,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,11,78,"                setLoc = strings;
",4,0,0,0,0,0,0,0,0,5,17,10,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,11,79,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,11,83,"            if (setEn != null && setLoc != null) {
",4,3,0,1,3,0,0,0,0,7,38,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,11,84,"              byNameKeyCache.put(setEn[2], new String[] {setLoc[2], setLoc[1]});
",0,0,1,6,12,0,4,2,0,12,66,9,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,11,88,"              if (setEn[2].equals(setEn[4])) {
",0,0,1,4,9,0,2,0,0,6,32,9,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,11,89,"                  byNameKeyCache.put(setEn[4] + ""-Summer"", new String[] {setLoc[4], setLoc[3]});
",0,1,1,6,12,0,4,2,0,14,78,11,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,11,91,"                  byNameKeyCache.put(setEn[4], new String[] {setLoc[4], setLoc[3]});
",0,0,1,6,12,0,4,2,0,12,66,11,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,11,95,"        return (String[]) byNameKeyCache.get(nameKey);
",0,0,0,3,6,1,6,2,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,73,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,74,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,64,"        } catch (RuntimeException ex) {
",2,0,0,1,4,0,0,2,0,4,31,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,98,"        checkPermission();
",0,0,0,1,2,0,2,0,0,2,18,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,99,"        cMillisProvider = SYSTEM_MILLIS_PROVIDER;
",4,0,0,0,0,0,0,0,0,5,41,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,100,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,112,"        checkPermission();
",0,0,0,1,2,0,2,0,0,2,18,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,113,"        cMillisProvider = new FixedMillisProvider(fixedMillis);
",4,0,0,1,2,0,0,2,0,7,55,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,114,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,127,"        checkPermission();
",0,0,0,1,2,0,2,0,0,2,18,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,128,"        if (offsetMillis == 0) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,129,"            cMillisProvider = SYSTEM_MILLIS_PROVIDER;
",4,0,0,0,0,0,0,0,0,5,41,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,131,"            cMillisProvider = new OffsetMillisProvider(offsetMillis);
",4,0,0,1,2,0,0,2,0,7,57,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,133,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,146,"        if (millisProvider == null) {
",2,1,0,1,3,0,0,0,0,3,29,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,147,"            throw new IllegalArgumentException(""The MillisProvider must not be null"");
",0,0,0,1,2,0,0,2,0,4,74,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,149,"        checkPermission();
",0,0,0,1,2,0,2,0,0,2,18,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,150,"        cMillisProvider = millisProvider;
",4,0,0,0,0,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,151,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,159,"        SecurityManager sm = System.getSecurityManager();
",2,0,0,1,2,0,4,2,0,8,49,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,160,"        if (sm != null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,161,"            sm.checkPermission(new JodaTimePermission(""CurrentTime.setProvider""));
",0,0,0,2,4,0,4,2,0,7,70,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,163,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,176,"        if (instant == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,177,"            return DateTimeUtils.currentTimeMillis();
",0,0,0,1,2,1,4,0,0,4,41,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,179,"        return instant.getMillis();
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,194,"        if (instant == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,195,"            return ISOChronology.getInstance();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,197,"        Chronology chrono = instant.getChronology();
",2,0,0,1,2,0,4,2,0,8,44,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,198,"        if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,199,"            return ISOChronology.getInstance();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,201,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,217,"        Chronology chrono = null;
",2,0,0,0,0,0,0,2,0,4,25,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,218,"        if (start != null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,219,"            chrono = start.getChronology();
",2,0,0,1,2,0,4,0,0,7,31,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,220,"        } else if (end != null) {
",2,1,0,1,4,0,0,0,0,3,25,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,221,"            chrono = end.getChronology();
",2,0,0,1,2,0,4,0,0,7,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,223,"        if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,224,"            chrono = ISOChronology.getInstance();
",2,0,0,1,2,0,4,0,0,7,37,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,226,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,241,"        if (interval == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,242,"            return ISOChronology.getInstance();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,244,"        Chronology chrono = interval.getChronology();
",2,0,0,1,2,0,4,2,0,8,45,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,245,"        if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,246,"            return ISOChronology.getInstance();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,248,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,264,"        if (interval == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,265,"            long now = DateTimeUtils.currentTimeMillis();
",2,0,0,1,2,0,4,0,0,6,45,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,266,"            interval = new Interval(now, now);
",6,0,0,1,2,0,0,2,0,9,34,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,268,"        return interval;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,299,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,300,"            return DateTimeZone.getDefault();
",0,0,0,1,2,1,4,0,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,302,"        return zone;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,333,"        if (duration == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,334,"            return 0L;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,336,"        return duration.getMillis();
",0,0,0,1,2,1,4,0,0,4,28,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,364,"        if (partial == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,365,"            throw new IllegalArgumentException(""Partial must not be null"");
",0,0,0,1,2,0,0,2,0,4,63,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,367,"        DurationFieldType lastType = null;
",2,0,0,0,0,0,0,2,0,4,34,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,368,"        for (int i = 0; i < partial.size(); i++) {
",6,1,0,2,5,0,4,0,0,12,42,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,369,"            DateTimeField loopField = partial.getField(i);
",2,0,0,1,2,0,6,2,0,10,46,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,370,"            if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,371,"                if (loopField.getRangeDurationField().getType() != lastType) {
",2,1,0,3,7,0,6,0,0,9,62,8,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,372,"                    return false;
",0,0,0,0,0,1,0,0,0,1,13,10,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,375,"            lastType = loopField.getDurationField().getType();
",2,0,0,2,4,0,6,0,0,9,50,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,377,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,395,"            Method method = DateFormatSymbols.class.getMethod(""getInstance"", new Class[] {Locale.class});
",2,0,0,3,6,0,2,8,0,13,93,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,396,"            return (DateFormatSymbols) method.invoke(null, new Object[] {locale});
",2,0,0,4,8,1,4,4,0,10,70,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,397,"        } catch (Exception ex) {
",2,0,0,1,4,0,0,2,0,4,24,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,398,"            return new DateFormatSymbols(locale);
",2,0,0,1,2,1,0,2,0,4,37,8,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,412,"        return cZoneNames;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,424,"        cZoneNames = Collections.unmodifiableMap(new HashMap<String, DateTimeZone>(names));
",4,0,0,2,4,0,4,6,0,15,83,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,425,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,451,"        double epochDay = epochMillis / 86400000d;
",4,1,0,0,0,0,0,0,0,5,42,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,452,"        return epochDay + 2440587.5d;
",2,1,0,0,0,1,0,0,0,3,29,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,471,"        return (long) Math.floor(toJulianDay(epochMillis) + 0.5d);
",0,1,0,3,6,1,8,0,0,9,58,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,484,"        double epochDay = julianDay - 2440587.5d;
",4,1,0,0,0,0,0,0,0,5,41,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,485,"        return (long) (epochDay * 86400000d);
",2,1,0,2,4,1,0,0,0,3,37,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,134,"        PeriodType type = cYMDTime;
",4,0,0,0,0,0,0,2,0,6,27,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,135,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,136,"            type = new PeriodType(
",2,0,0,0,1,0,0,2,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,146,"            cYMDTime = type;
",4,0,0,0,0,0,0,0,0,5,16,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,148,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,193,"        PeriodType type = cYWDTime;
",4,0,0,0,0,0,0,2,0,6,27,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,194,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,195,"            type = new PeriodType(
",2,0,0,0,1,0,0,2,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,205,"            cYWDTime = type;
",4,0,0,0,0,0,0,0,0,5,16,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,207,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,222,"        PeriodType type = cYWD;
",4,0,0,0,0,0,0,2,0,6,23,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,223,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,224,"            type = new PeriodType(
",2,0,0,0,1,0,0,2,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,232,"            cYWD = type;
",4,0,0,0,0,0,0,0,0,5,12,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,234,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,251,"        PeriodType type = cYDTime;
",4,0,0,0,0,0,0,2,0,6,26,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,252,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,253,"            type = new PeriodType(
",2,0,0,0,1,0,0,2,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,262,"            cYDTime = type;
",4,0,0,0,0,0,0,0,0,5,15,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,264,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,278,"        PeriodType type = cYD;
",4,0,0,0,0,0,0,2,0,6,22,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,279,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,280,"            type = new PeriodType(
",2,0,0,0,1,0,0,2,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,287,"            cYD = type;
",4,0,0,0,0,0,0,0,0,5,11,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,289,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,305,"        PeriodType type = cDTime;
",4,0,0,0,0,0,0,2,0,6,25,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,306,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,307,"            type = new PeriodType(
",2,0,0,0,1,0,0,2,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,316,"            cDTime = type;
",4,0,0,0,0,0,0,0,0,5,14,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,318,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,333,"        PeriodType type = cTime;
",4,0,0,0,0,0,0,2,0,6,24,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,334,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,335,"            type = new PeriodType(
",2,0,0,0,1,0,0,2,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,343,"            cTime = type;
",4,0,0,0,0,0,0,0,0,5,13,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,345,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,354,"        PeriodType type = cYears;
",4,0,0,0,0,0,0,2,0,6,25,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,355,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,356,"            type = new PeriodType(
",2,0,0,0,1,0,0,2,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,361,"            cYears = type;
",4,0,0,0,0,0,0,0,0,5,14,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,363,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,372,"        PeriodType type = cMonths;
",4,0,0,0,0,0,0,2,0,6,26,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,373,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,374,"            type = new PeriodType(
",2,0,0,0,1,0,0,2,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,379,"            cMonths = type;
",4,0,0,0,0,0,0,0,0,5,15,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,381,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,390,"        PeriodType type = cWeeks;
",4,0,0,0,0,0,0,2,0,6,25,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,391,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,392,"            type = new PeriodType(
",2,0,0,0,1,0,0,2,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,397,"            cWeeks = type;
",4,0,0,0,0,0,0,0,0,5,14,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,399,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,408,"        PeriodType type = cDays;
",4,0,0,0,0,0,0,2,0,6,24,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,409,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,410,"            type = new PeriodType(
",2,0,0,0,1,0,0,2,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,415,"            cDays = type;
",4,0,0,0,0,0,0,0,0,5,13,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,417,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,426,"        PeriodType type = cHours;
",4,0,0,0,0,0,0,2,0,6,25,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,427,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,428,"            type = new PeriodType(
",2,0,0,0,1,0,0,2,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,433,"            cHours = type;
",4,0,0,0,0,0,0,0,0,5,14,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,435,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,444,"        PeriodType type = cMinutes;
",4,0,0,0,0,0,0,2,0,6,27,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,445,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,446,"            type = new PeriodType(
",2,0,0,0,1,0,0,2,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,451,"            cMinutes = type;
",4,0,0,0,0,0,0,0,0,5,16,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,453,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,462,"        PeriodType type = cSeconds;
",4,0,0,0,0,0,0,2,0,6,27,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,463,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,464,"            type = new PeriodType(
",2,0,0,0,1,0,0,2,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,469,"            cSeconds = type;
",4,0,0,0,0,0,0,0,0,5,16,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,471,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,480,"        PeriodType type = cMillis;
",4,0,0,0,0,0,0,2,0,6,26,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,481,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,482,"            type = new PeriodType(
",2,0,0,0,1,0,0,2,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,487,"            cMillis = type;
",4,0,0,0,0,0,0,0,0,5,15,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,489,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,502,"        if (types == null || types.length == 0) {
",6,3,0,1,3,0,0,0,0,9,41,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,503,"            throw new IllegalArgumentException(""Types array must not be null or empty"");
",0,0,0,1,2,0,0,2,0,4,76,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,505,"        for (int i = 0; i < types.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,506,"            if (types[i] == null) {
",0,1,1,2,5,0,0,0,0,5,23,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,507,"                throw new IllegalArgumentException(""Types array must not contain null"");
",0,0,0,1,2,0,0,2,0,4,72,8,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,510,"        Map<PeriodType, Object> cache = cTypes;
",4,0,0,0,0,0,0,6,0,10,39,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,511,"        if (cache.isEmpty()) {
",0,0,0,2,5,0,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,512,"            cache.put(standard(), standard());
",0,0,0,3,6,0,8,0,0,8,34,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,513,"            cache.put(yearMonthDayTime(), yearMonthDayTime());
",0,0,0,3,6,0,8,0,0,8,50,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,514,"            cache.put(yearMonthDay(), yearMonthDay());
",0,0,0,3,6,0,8,0,0,8,42,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,515,"            cache.put(yearWeekDayTime(), yearWeekDayTime());
",0,0,0,3,6,0,8,0,0,8,48,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,516,"            cache.put(yearWeekDay(), yearWeekDay());
",0,0,0,3,6,0,8,0,0,8,40,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,517,"            cache.put(yearDayTime(), yearDayTime());
",0,0,0,3,6,0,8,0,0,8,40,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,518,"            cache.put(yearDay(), yearDay());
",0,0,0,3,6,0,8,0,0,8,32,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,519,"            cache.put(dayTime(), dayTime());
",0,0,0,3,6,0,8,0,0,8,32,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,520,"            cache.put(time(), time());
",0,0,0,3,6,0,8,0,0,8,26,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,521,"            cache.put(years(), years());
",0,0,0,3,6,0,8,0,0,8,28,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,522,"            cache.put(months(), months());
",0,0,0,3,6,0,8,0,0,8,30,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,523,"            cache.put(weeks(), weeks());
",0,0,0,3,6,0,8,0,0,8,28,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,524,"            cache.put(days(), days());
",0,0,0,3,6,0,8,0,0,8,26,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,525,"            cache.put(hours(), hours());
",0,0,0,3,6,0,8,0,0,8,28,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,526,"            cache.put(minutes(), minutes());
",0,0,0,3,6,0,8,0,0,8,32,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,527,"            cache.put(seconds(), seconds());
",0,0,0,3,6,0,8,0,0,8,32,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,528,"            cache.put(millis(), millis());
",0,0,0,3,6,0,8,0,0,8,30,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,530,"        PeriodType inPartType = new PeriodType(null, types, null);
",4,0,0,1,2,0,0,4,0,9,58,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,531,"        Object cached = cache.get(inPartType);
",2,0,0,1,2,0,6,2,0,10,38,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,532,"        if (cached instanceof PeriodType) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,533,"            return (PeriodType) cached;
",2,0,0,1,2,1,0,2,0,4,27,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,535,"        if (cached != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,536,"            throw new IllegalArgumentException(""PeriodType does not support fields: "" + cached);
",2,1,0,1,2,0,0,2,0,6,84,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,538,"        PeriodType type = standard();
",2,0,0,1,2,0,2,2,0,6,29,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,539,"        List<DurationFieldType> list = new ArrayList<DurationFieldType>(Arrays.asList(types));
",2,0,0,2,4,0,6,8,0,16,86,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,540,"        if (list.remove(DurationFieldType.years()) == false) {
",0,1,0,3,7,0,8,0,0,10,54,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,541,"            type = type.withYearsRemoved();
",2,0,0,1,2,0,4,0,0,7,31,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,543,"        if (list.remove(DurationFieldType.months()) == false) {
",0,1,0,3,7,0,8,0,0,10,55,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,544,"            type = type.withMonthsRemoved();
",2,0,0,1,2,0,4,0,0,7,32,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,546,"        if (list.remove(DurationFieldType.weeks()) == false) {
",0,1,0,3,7,0,8,0,0,10,54,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,547,"            type = type.withWeeksRemoved();
",2,0,0,1,2,0,4,0,0,7,31,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,549,"        if (list.remove(DurationFieldType.days()) == false) {
",0,1,0,3,7,0,8,0,0,10,53,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,550,"            type = type.withDaysRemoved();
",2,0,0,1,2,0,4,0,0,7,30,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,552,"        if (list.remove(DurationFieldType.hours()) == false) {
",0,1,0,3,7,0,8,0,0,10,54,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,553,"            type = type.withHoursRemoved();
",2,0,0,1,2,0,4,0,0,7,31,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,555,"        if (list.remove(DurationFieldType.minutes()) == false) {
",0,1,0,3,7,0,8,0,0,10,56,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,556,"            type = type.withMinutesRemoved();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,558,"        if (list.remove(DurationFieldType.seconds()) == false) {
",0,1,0,3,7,0,8,0,0,10,56,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,559,"            type = type.withSecondsRemoved();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,561,"        if (list.remove(DurationFieldType.millis()) == false) {
",0,1,0,3,7,0,8,0,0,10,55,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,562,"            type = type.withMillisRemoved();
",2,0,0,1,2,0,4,0,0,7,32,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,564,"        if (list.size() > 0) {
",0,1,0,2,5,0,4,0,0,5,22,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,565,"            cache.put(inPartType, list);
",0,0,0,1,2,0,8,0,0,8,28,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,566,"            throw new IllegalArgumentException(""PeriodType does not support fields: "" + list);
",2,1,0,1,2,0,0,2,0,6,82,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,569,"        PeriodType checkPartType = new PeriodType(null, type.iTypes, null);
",6,0,0,1,2,0,0,4,0,11,67,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,570,"        PeriodType checkedType = (PeriodType) cache.get(checkPartType);
",2,0,0,2,4,0,6,4,0,12,63,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,571,"        if (checkedType != null) {
",2,1,0,1,3,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,572,"            cache.put(checkPartType, checkedType);
",0,0,0,1,2,0,8,0,0,8,38,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,573,"            return checkedType;
",2,0,0,0,0,1,0,0,0,2,19,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,575,"        cache.put(checkPartType, type);
",0,0,0,1,2,0,8,0,0,8,31,5,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,576,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,608,"        return iName;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,638,"        return (indexOf(type) >= 0);
",0,1,0,2,4,1,4,0,0,5,28,5,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,648,"        for (int i = 0, isize = size(); i < isize; i++) {
",10,1,0,2,5,0,2,0,0,14,49,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,649,"            if (iTypes[i] == type) {
",2,1,1,2,5,0,0,0,0,7,24,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,650,"                return i;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,653,"        return -1;
",0,0,0,0,0,1,0,0,0,1,10,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,662,"        return ""PeriodType["" + getName() + ""]"";
",0,1,0,2,4,1,2,0,0,5,39,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,674,"        int realIndex = iIndices[index];
",2,0,1,1,2,0,0,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,675,"        return (realIndex == -1 ? 0 : period.getValue(realIndex));
",2,1,0,2,4,1,6,0,0,10,58,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,688,"        int realIndex = iIndices[index];
",2,0,1,1,2,0,0,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,689,"        if (realIndex == -1) {
",2,1,0,1,3,0,0,0,0,4,22,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,690,"            throw new UnsupportedOperationException(""Field is not supported"");
",0,0,0,1,2,0,0,2,0,3,66,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,692,"        values[realIndex] = newValue;
",2,0,1,1,2,0,0,0,0,7,29,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,693,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,707,"        if (valueToAdd == 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,708,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,710,"        int realIndex = iIndices[index];
",2,0,1,1,2,0,0,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,711,"        if (realIndex == -1) {
",2,1,0,1,3,0,0,0,0,4,22,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,712,"            throw new UnsupportedOperationException(""Field is not supported"");
",0,0,0,1,2,0,0,2,0,3,66,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,714,"        values[realIndex] = FieldUtils.safeAdd(values[realIndex], valueToAdd);
",0,0,1,3,6,0,6,0,0,15,70,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,715,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,725,"        return withFieldRemoved(0, ""NoYears"");
",0,0,0,1,2,1,2,0,0,3,38,5,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,734,"        return withFieldRemoved(1, ""NoMonths"");
",0,0,0,1,2,1,2,0,0,3,39,5,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,743,"        return withFieldRemoved(2, ""NoWeeks"");
",0,0,0,1,2,1,2,0,0,3,38,5,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,752,"        return withFieldRemoved(3, ""NoDays"");
",0,0,0,1,2,1,2,0,0,3,37,5,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,761,"        return withFieldRemoved(4, ""NoHours"");
",0,0,0,1,2,1,2,0,0,3,38,5,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,770,"        return withFieldRemoved(5, ""NoMinutes"");
",0,0,0,1,2,1,2,0,0,3,40,5,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,779,"        return withFieldRemoved(6, ""NoSeconds"");
",0,0,0,1,2,1,2,0,0,3,40,5,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,788,"        return withFieldRemoved(7, ""NoMillis"");
",0,0,0,1,2,1,2,0,0,3,39,5,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,799,"        int fieldIndex = iIndices[indicesIndex];
",2,0,1,1,2,0,0,0,0,6,40,5,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,800,"        if (fieldIndex == -1) {
",2,1,0,1,3,0,0,0,0,4,23,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,801,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,804,"        DurationFieldType[] types = new DurationFieldType[size() - 1];
",2,1,0,3,6,0,2,4,0,9,62,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,805,"        for (int i = 0; i < iTypes.length; i++) {
",10,1,0,1,3,0,0,0,0,12,41,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,806,"            if (i < fieldIndex) {
",4,1,0,1,3,0,0,0,0,5,21,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,807,"                types[i] = iTypes[i];
",0,0,1,2,4,0,0,0,0,9,21,8,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,808,"            } else if (i > fieldIndex) {
",4,1,0,1,4,0,0,0,0,5,28,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,809,"                types[i - 1] = iTypes[i];
",2,1,1,2,4,0,0,0,0,10,25,9,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,813,"        int[] indices = new int[8];
",2,0,0,2,4,0,0,0,0,2,27,5,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,814,"        for (int i = 0; i < indices.length; i++) {
",10,1,0,1,3,0,0,0,0,12,42,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,815,"            if (i < indicesIndex) {
",4,1,0,1,3,0,0,0,0,5,23,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,816,"                indices[i] = iIndices[i];
",0,0,1,2,4,0,0,0,0,9,25,8,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,817,"            } else if (i > indicesIndex) {
",4,1,0,1,4,0,0,0,0,5,30,7,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,818,"                indices[i] = (iIndices[i] == -1 ? -1 : iIndices[i] - 1);
",0,2,1,4,8,0,0,0,0,17,56,9,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,820,"                indices[i] = -1;
",0,0,1,1,2,0,0,0,0,6,16,9,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,823,"        return new PeriodType(getName() + name, types, indices);
",6,1,0,2,4,1,2,2,0,11,56,5,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,835,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,836,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,838,"        if (obj instanceof PeriodType == false) {
",2,1,0,1,3,0,0,2,0,6,41,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,839,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,841,"        PeriodType other = (PeriodType) obj;
",4,0,0,1,2,0,0,4,0,8,36,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,842,"        return (Arrays.equals(iTypes, other.iTypes));
",4,0,0,2,4,1,6,0,0,10,45,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,851,"        int hash = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,852,"        for (int i = 0; i < iTypes.length; i++) {
",10,1,0,1,3,0,0,0,0,12,41,4,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,853,"            hash += iTypes[i].hashCode();
",2,0,1,2,4,0,2,0,0,9,29,6,0.00000,0
defect4j,time,org/joda/time/PeriodType,11,855,"        return hash;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,11,216,"        return iName;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,11,234,"        return getField(chronology).isSupported();
",0,0,0,2,4,1,6,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,11,243,"        return getName();
",0,0,0,1,2,1,2,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,11,266,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,11,267,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,11,269,"            if (obj instanceof StandardDurationFieldType) {
",2,0,0,1,3,0,0,2,0,4,47,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,11,270,"                return iOrdinal == ((StandardDurationFieldType) obj).iOrdinal;
",6,1,0,2,4,1,0,2,0,9,62,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,11,272,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,11,286,"                    return chronology.eras();
",0,0,0,1,2,1,4,0,0,4,25,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,11,288,"                    return chronology.centuries();
",0,0,0,1,2,1,4,0,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,11,290,"                    return chronology.weekyears();
",0,0,0,1,2,1,4,0,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,11,296,"                    return chronology.weeks();
",0,0,0,1,2,1,4,0,0,4,26,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,11,300,"                    return chronology.halfdays();
",0,0,0,1,2,1,4,0,0,4,29,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,11,302,"                    return chronology.hours();
",0,0,0,1,2,1,4,0,0,4,26,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,11,304,"                    return chronology.minutes();
",0,0,0,1,2,1,4,0,0,4,28,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,11,306,"                    return chronology.seconds();
",0,0,0,1,2,1,4,0,0,4,28,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,11,308,"                    return chronology.millis();
",0,0,0,1,2,1,4,0,0,4,27,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,11,311,"                    throw new InternalError();
",0,0,0,1,2,0,0,2,0,2,26,8,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,11,321,"            switch (iOrdinal) {
",2,0,0,1,3,0,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,11,323,"                    return ERAS_TYPE;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,11,325,"                    return CENTURIES_TYPE;
",2,0,0,0,0,1,0,0,0,2,22,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,11,327,"                    return WEEKYEARS_TYPE;
",2,0,0,0,0,1,0,0,0,2,22,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,11,329,"                    return YEARS_TYPE;
",2,0,0,0,0,1,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,11,331,"                    return MONTHS_TYPE;
",2,0,0,0,0,1,0,0,0,2,19,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,11,333,"                    return WEEKS_TYPE;
",2,0,0,0,0,1,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,11,335,"                    return DAYS_TYPE;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,11,337,"                    return HALFDAYS_TYPE;
",2,0,0,0,0,1,0,0,0,2,21,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,11,339,"                    return HOURS_TYPE;
",2,0,0,0,0,1,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,11,341,"                    return MINUTES_TYPE;
",2,0,0,0,0,1,0,0,0,2,20,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,11,343,"                    return SECONDS_TYPE;
",2,0,0,0,0,1,0,0,0,2,20,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,11,345,"                    return MILLIS_TYPE;
",2,0,0,0,0,1,0,0,0,2,19,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,11,348,"                    return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,59,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,62,"            return PeriodType.time();
",0,0,0,1,2,1,4,0,0,4,25,9,0.00000,0
defect4j,time,org/joda/time/base/AbstractPeriod,11,79,"        DurationFieldType[] result = new DurationFieldType[size()];
",2,0,0,3,6,0,2,4,0,8,59,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPeriod,11,80,"        for (int i = 0; i < result.length; i++) {
",10,1,0,1,3,0,0,0,0,12,41,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPeriod,11,81,"            result[i] = getFieldType(i);
",0,0,1,2,4,0,4,0,0,9,28,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPeriod,11,83,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPeriod,11,95,"        int[] result = new int[size()];
",2,0,0,3,6,0,2,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractPeriod,11,96,"        for (int i = 0; i < result.length; i++) {
",10,1,0,1,3,0,0,0,0,12,41,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPeriod,11,97,"            result[i] = getValue(i);
",0,0,1,2,4,0,4,0,0,9,24,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPeriod,11,99,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPeriod,11,113,"        int index = indexOf(type);
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractPeriod,11,114,"        if (index == -1) {
",2,1,0,1,3,0,0,0,0,4,18,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPeriod,11,115,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/base/AbstractPeriod,11,117,"        return getValue(index);
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractPeriod,11,127,"        return getPeriodType().isSupported(type);
",0,0,0,2,4,1,6,0,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractPeriod,11,137,"        return getPeriodType().indexOf(type);
",0,0,0,2,4,1,6,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractPeriod,11,147,"        return new Period(this);
",0,0,0,1,2,1,0,2,0,2,24,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPeriod,11,158,"        return new MutablePeriod(this);
",0,0,0,1,2,1,0,2,0,2,31,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPeriod,11,183,"        if (this == period) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPeriod,11,184,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPeriod,11,186,"        if (period instanceof ReadablePeriod == false) {
",2,1,0,1,3,0,0,2,0,6,48,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPeriod,11,187,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPeriod,11,189,"        ReadablePeriod other = (ReadablePeriod) period;
",4,0,0,1,2,0,0,4,0,8,47,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPeriod,11,190,"        if (size() != other.size()) {
",0,1,0,3,7,0,6,0,0,7,29,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPeriod,11,191,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPeriod,11,193,"        for (int i = 0, isize = size(); i < isize; i++) {
",10,1,0,2,5,0,2,0,0,14,49,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPeriod,11,194,"            if (getValue(i) != other.getValue(i) || getFieldType(i) != other.getFieldType(i)) {
",0,3,0,5,11,0,20,0,0,23,83,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPeriod,11,195,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,time,org/joda/time/base/AbstractPeriod,11,198,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPeriod,11,207,"        int total = 17;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractPeriod,11,208,"        for (int i = 0, isize = size(); i < isize; i++) {
",10,1,0,2,5,0,2,0,0,14,49,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPeriod,11,209,"            total = 27 * total + getValue(i);
",4,2,0,1,2,0,4,0,0,11,33,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPeriod,11,210,"            total = 27 * total + getFieldType(i).hashCode();
",4,2,0,2,4,0,6,0,0,13,48,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPeriod,11,212,"        return total;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPeriod,11,228,"        return ISOPeriodFormat.standard().print(this);
",0,0,0,2,4,1,6,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractPeriod,11,240,"        if (formatter == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPeriod,11,241,"            return toString();
",0,0,0,1,2,1,2,0,0,2,18,7,0.00000,0
defect4j,time,org/joda/time/base/AbstractPeriod,11,243,"        return formatter.print(this);
",0,0,0,1,2,1,4,0,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,90,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,91,"        type = checkPeriodType(type);
",2,0,0,1,2,0,4,0,0,7,29,4,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,92,"        iType = type;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,93,"        iValues = setPeriodInternal(years, months, weeks, days, hours, minutes, seconds, millis); // internal method
",2,0,0,1,2,0,18,0,0,21,108,4,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,94,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,122,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,123,"        type = checkPeriodType(type);
",2,0,0,1,2,0,4,0,0,7,29,4,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,124,"        if (startInstant == null && endInstant == null) {
",4,3,0,1,3,0,0,0,0,7,49,4,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,125,"            iType = type;
",4,0,0,0,0,0,0,0,0,5,13,6,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,126,"            iValues = new int[size()];
",2,0,0,2,4,0,2,0,0,5,26,6,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,128,"            long startMillis = DateTimeUtils.getInstantMillis(startInstant);
",2,0,0,1,2,0,6,0,0,8,64,7,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,129,"            long endMillis = DateTimeUtils.getInstantMillis(endInstant);
",2,0,0,1,2,0,6,0,0,8,60,7,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,130,"            Chronology chrono = DateTimeUtils.getIntervalChronology(startInstant, endInstant);
",2,0,0,1,2,0,8,2,0,12,82,6,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,131,"            iType = type;
",4,0,0,0,0,0,0,0,0,5,13,6,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,132,"            iValues = chrono.get(this, startMillis, endMillis);
",2,0,0,1,2,0,8,0,0,11,51,6,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,134,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,155,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,156,"        if (start == null || end == null) {
",4,3,0,1,3,0,0,0,0,7,35,4,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,157,"            throw new IllegalArgumentException(""ReadablePartial objects must not be null"");
",0,0,0,1,2,0,0,2,0,4,79,6,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,159,"        if (start instanceof BaseLocal && end instanceof BaseLocal && start.getClass() == end.getClass()) {
",4,2,0,3,7,0,8,4,0,18,99,4,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,161,"            type = checkPeriodType(type);
",2,0,0,1,2,0,4,0,0,7,29,6,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,162,"            long startMillis = ((BaseLocal) start).getLocalMillis();
",4,0,0,3,6,0,2,2,0,8,56,7,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,163,"            long endMillis = ((BaseLocal) end).getLocalMillis();
",4,0,0,3,6,0,2,2,0,8,52,7,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,164,"            Chronology chrono = start.getChronology();
",2,0,0,1,2,0,4,2,0,8,42,6,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,165,"            chrono = DateTimeUtils.getChronology(chrono);
",2,0,0,1,2,0,6,0,0,9,45,6,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,166,"            iType = type;
",4,0,0,0,0,0,0,0,0,5,13,6,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,167,"            iValues = chrono.get(this, startMillis, endMillis);
",2,0,0,1,2,0,8,0,0,11,51,6,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,168,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,169,"            if (start.size() != end.size()) {
",0,1,0,3,7,0,8,0,0,9,33,6,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,170,"                throw new IllegalArgumentException(""ReadablePartial objects must have the same set of fields"");
",0,0,0,1,2,0,0,2,0,3,95,9,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,172,"            for (int i = 0, isize = start.size(); i < isize; i++) {
",10,1,0,2,5,0,4,0,0,16,55,6,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,173,"                if (start.getFieldType(i) != end.getFieldType(i)) {
",0,1,0,3,7,0,12,0,0,13,51,8,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,174,"                    throw new IllegalArgumentException(""ReadablePartial objects must have the same set of fields"");
",0,0,0,1,2,0,0,2,0,3,95,11,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,177,"            if (DateTimeUtils.isContiguous(start) == false) {
",0,1,0,2,5,0,6,0,0,8,49,6,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,178,"                throw new IllegalArgumentException(""ReadablePartial objects must be contiguous"");
",0,0,0,1,2,0,0,2,0,3,81,9,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,180,"            iType = checkPeriodType(type);
",2,0,0,1,2,0,4,0,0,7,30,6,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,181,"            Chronology chrono = DateTimeUtils.getChronology(start.getChronology()).withUTC();
",2,0,0,3,6,0,10,2,0,14,81,6,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,182,"            iValues = chrono.get(this, chrono.set(start, 0L), chrono.set(end, 0L));
",2,0,0,3,6,0,16,0,0,19,71,6,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,184,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,194,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,195,"        type = checkPeriodType(type);
",2,0,0,1,2,0,4,0,0,7,29,4,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,196,"        long startMillis = DateTimeUtils.getInstantMillis(startInstant);
",2,0,0,1,2,0,6,0,0,8,64,5,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,197,"        long durationMillis = DateTimeUtils.getDurationMillis(duration);
",2,0,0,1,2,0,6,0,0,8,64,5,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,198,"        long endMillis = FieldUtils.safeAdd(startMillis, durationMillis);
",2,0,0,1,2,0,8,0,0,10,65,5,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,199,"        Chronology chrono = DateTimeUtils.getInstantChronology(startInstant);
",2,0,0,1,2,0,6,2,0,10,69,4,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,200,"        iType = type;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,201,"        iValues = chrono.get(this, startMillis, endMillis);
",2,0,0,1,2,0,8,0,0,11,51,4,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,202,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,212,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,213,"        type = checkPeriodType(type);
",2,0,0,1,2,0,4,0,0,7,29,4,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,214,"        long durationMillis = DateTimeUtils.getDurationMillis(duration);
",2,0,0,1,2,0,6,0,0,8,64,5,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,215,"        long endMillis = DateTimeUtils.getInstantMillis(endInstant);
",2,0,0,1,2,0,6,0,0,8,60,5,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,216,"        long startMillis = FieldUtils.safeSubtract(endMillis, durationMillis);
",2,0,0,1,2,0,8,0,0,10,70,5,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,217,"        Chronology chrono = DateTimeUtils.getInstantChronology(endInstant);
",2,0,0,1,2,0,6,2,0,10,67,4,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,218,"        iType = type;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,219,"        iValues = chrono.get(this, startMillis, endMillis);
",2,0,0,1,2,0,8,0,0,11,51,4,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,220,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,231,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,235,"        iType = PeriodType.standard();
",2,0,0,1,2,0,4,0,0,7,30,4,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,236,"        int[] values = ISOChronology.getInstanceUTC().get(DUMMY_PERIOD, duration);
",2,0,0,3,6,0,10,0,0,12,74,5,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,237,"        iValues = new int[8];
",2,0,0,1,2,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,238,"        System.arraycopy(values, 0, iValues, 4, 4);
",0,0,0,1,2,0,8,0,0,8,43,5,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,239,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,271,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,272,"        PeriodConverter converter = ConverterManager.getInstance().getPeriodConverter(period);
",2,0,0,2,4,0,8,2,0,12,86,4,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,273,"        type = (type == null ? converter.getPeriodType(period) : type);
",6,1,0,2,4,0,6,0,0,14,63,4,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,274,"        type = checkPeriodType(type);
",2,0,0,1,2,0,4,0,0,7,29,4,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,275,"        iType = type;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,276,"        if (this instanceof ReadWritablePeriod) {
",0,0,0,1,3,0,0,2,0,2,41,6,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,277,"            iValues = new int[size()];
",2,0,0,2,4,0,2,0,0,5,26,6,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,278,"            chrono = DateTimeUtils.getChronology(chrono);
",2,0,0,1,2,0,6,0,0,9,45,6,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,279,"            converter.setInto((ReadWritablePeriod) this, period, chrono);
",0,0,0,2,4,0,8,2,0,10,61,7,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,281,"            iValues = new MutablePeriod(period, type, chrono).getValues();
",8,0,0,2,4,0,2,2,0,13,62,6,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,283,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,293,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,294,"        iType = type;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,295,"        iValues = values;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,296,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,329,"        return iValues[index];
",0,0,1,1,2,1,0,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,350,"        long startMillis = DateTimeUtils.getInstantMillis(startInstant);
",2,0,0,1,2,0,6,0,0,8,64,5,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,351,"        Chronology chrono = DateTimeUtils.getInstantChronology(startInstant);
",2,0,0,1,2,0,6,2,0,10,69,4,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,352,"        long endMillis = chrono.add(this, startMillis, 1);
",2,0,0,1,2,0,6,0,0,8,50,5,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,353,"        return new Duration(startMillis, endMillis);
",4,0,0,1,2,1,0,2,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,374,"        long endMillis = DateTimeUtils.getInstantMillis(endInstant);
",2,0,0,1,2,0,6,0,0,8,60,5,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,375,"        Chronology chrono = DateTimeUtils.getInstantChronology(endInstant);
",2,0,0,1,2,0,6,2,0,10,67,4,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,376,"        long startMillis = chrono.add(this, endMillis, -1);
",2,0,0,1,2,0,6,0,0,9,51,5,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,377,"        return new Duration(startMillis, endMillis);
",4,0,0,1,2,1,0,2,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,390,"        int index = indexOf(type);
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,391,"        if (index == -1) {
",2,1,0,1,3,0,0,0,0,4,18,4,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,392,"            if (newValue != 0) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,393,"                throw new IllegalArgumentException(
",0,0,0,0,1,0,0,2,0,2,35,10,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,397,"            values[index] = newValue;
",2,0,1,1,2,0,0,0,0,7,25,6,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,399,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,409,"        if (period == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,410,"            setValues(new int[size()]);
",0,0,0,3,6,0,4,0,0,4,27,7,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,412,"            setPeriodInternal(period);
",0,0,0,1,2,0,4,0,0,4,26,7,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,414,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,420,"        int[] newValues = new int[size()];
",2,0,0,3,6,0,2,0,0,4,34,5,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,421,"        for (int i = 0, isize = period.size(); i < isize; i++) {
",10,1,0,2,5,0,4,0,0,16,56,4,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,422,"            DurationFieldType type = period.getFieldType(i);
",2,0,0,1,2,0,6,2,0,10,48,6,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,423,"            int value = period.getValue(i);
",2,0,0,1,2,0,6,0,0,8,31,7,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,424,"            checkAndUpdate(type, newValues, value);
",0,0,0,1,2,0,8,0,0,8,39,7,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,426,"        setValues(newValues);
",0,0,0,1,2,0,4,0,0,4,21,5,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,427,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,444,"        int[] newValues = setPeriodInternal(years, months, weeks, days, hours, minutes, seconds, millis);
",2,0,0,2,4,0,18,0,0,20,97,5,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,445,"        setValues(newValues);
",0,0,0,1,2,0,4,0,0,4,21,5,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,446,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,453,"        int[] newValues = new int[size()];
",2,0,0,3,6,0,2,0,0,4,34,5,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,454,"        checkAndUpdate(DurationFieldType.years(), newValues, years);
",0,0,0,2,4,0,10,0,0,10,60,5,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,455,"        checkAndUpdate(DurationFieldType.months(), newValues, months);
",0,0,0,2,4,0,10,0,0,10,62,5,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,456,"        checkAndUpdate(DurationFieldType.weeks(), newValues, weeks);
",0,0,0,2,4,0,10,0,0,10,60,5,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,457,"        checkAndUpdate(DurationFieldType.days(), newValues, days);
",0,0,0,2,4,0,10,0,0,10,58,5,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,458,"        checkAndUpdate(DurationFieldType.hours(), newValues, hours);
",0,0,0,2,4,0,10,0,0,10,60,5,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,459,"        checkAndUpdate(DurationFieldType.minutes(), newValues, minutes);
",0,0,0,2,4,0,10,0,0,10,64,5,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,460,"        checkAndUpdate(DurationFieldType.seconds(), newValues, seconds);
",0,0,0,2,4,0,10,0,0,10,64,5,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,461,"        checkAndUpdate(DurationFieldType.millis(), newValues, millis);
",0,0,0,2,4,0,10,0,0,10,62,5,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,462,"        return newValues;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,474,"        setFieldInto(iValues, field, value);
",0,0,0,1,2,0,8,0,0,8,36,5,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,475,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,486,"        int index = indexOf(field);
",2,0,0,1,2,0,4,0,0,6,27,5,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,487,"        if (index == -1) {
",2,1,0,1,3,0,0,0,0,4,18,4,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,488,"            if (value != 0 || field == null) {
",4,3,0,1,3,0,0,0,0,7,34,6,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,489,"                throw new IllegalArgumentException(
",0,0,0,0,1,0,0,2,0,2,35,10,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,493,"            values[index] = value;
",2,0,1,1,2,0,0,0,0,7,22,6,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,495,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,505,"        addFieldInto(iValues, field, value);
",0,0,0,1,2,0,8,0,0,8,36,5,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,506,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,517,"        int index = indexOf(field);
",2,0,0,1,2,0,4,0,0,6,27,5,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,518,"        if (index == -1) {
",2,1,0,1,3,0,0,0,0,4,18,4,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,519,"            if (value != 0 || field == null) {
",4,3,0,1,3,0,0,0,0,7,34,6,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,520,"                throw new IllegalArgumentException(
",0,0,0,0,1,0,0,2,0,2,35,10,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,524,"            values[index] = FieldUtils.safeAdd(values[index], value);
",0,0,1,3,6,0,6,0,0,15,57,6,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,526,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,535,"        if (period != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,536,"            setValues(mergePeriodInto(getValues(), period));
",0,0,0,3,6,0,8,0,0,8,48,7,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,538,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,549,"        for (int i = 0, isize = period.size(); i < isize; i++) {
",10,1,0,2,5,0,4,0,0,16,56,4,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,550,"            DurationFieldType type = period.getFieldType(i);
",2,0,0,1,2,0,6,2,0,10,48,6,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,551,"            int value = period.getValue(i);
",2,0,0,1,2,0,6,0,0,8,31,7,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,552,"            checkAndUpdate(type, values, value);
",0,0,0,1,2,0,8,0,0,8,36,7,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,554,"        return values;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,564,"        if (period != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,565,"            setValues(addPeriodInto(getValues(), period));
",0,0,0,3,6,0,8,0,0,8,46,7,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,567,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,578,"        for (int i = 0, isize = period.size(); i < isize; i++) {
",10,1,0,2,5,0,4,0,0,16,56,4,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,579,"            DurationFieldType type = period.getFieldType(i);
",2,0,0,1,2,0,6,2,0,10,48,6,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,580,"            int value = period.getValue(i);
",2,0,0,1,2,0,6,0,0,8,31,7,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,581,"            if (value != 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,582,"                int index = indexOf(type);
",2,0,0,1,2,0,4,0,0,6,26,9,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,583,"                if (index == -1) {
",2,1,0,1,3,0,0,0,0,4,18,8,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,584,"                    throw new IllegalArgumentException(
",0,0,0,0,1,0,0,2,0,2,35,12,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,587,"                    values[index] = FieldUtils.safeAdd(getValue(index), value);
",0,0,1,3,6,0,10,0,0,15,59,10,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,591,"        return values;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,603,"        iValues[index] = value;
",2,0,1,1,2,0,0,0,0,7,23,4,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,604,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,616,"        System.arraycopy(values, 0, iValues, 0, iValues.length);
",4,0,0,1,2,0,8,0,0,12,56,5,0.00000,0
defect4j,time,org/joda/time/base/BasePeriod,11,617,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/Period,11,312,"        super(0, 0, 0, 0, hours, minutes, seconds, millis, PeriodType.standard());
",8,0,0,2,4,0,4,0,0,12,74,4,0.00000,0
defect4j,time,org/joda/time/Period,11,313,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/Period,11,329,"        super(years, months, weeks, days, hours, minutes, seconds, millis, PeriodType.standard());
",16,0,0,2,4,0,4,0,0,20,90,4,0.00000,0
defect4j,time,org/joda/time/Period,11,330,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/Period,11,352,"        super(years, months, weeks, days, hours, minutes, seconds, millis, type);
",18,0,0,1,2,0,0,0,0,18,73,4,0.00000,0
defect4j,time,org/joda/time/Period,11,353,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/Period,11,382,"        super(duration);
",2,0,0,1,2,0,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/Period,11,383,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/Period,11,402,"        super(duration, type, null);
",4,0,0,1,2,0,0,0,0,5,28,3,0.00000,0
defect4j,time,org/joda/time/Period,11,403,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/Period,11,423,"        super(duration, null, chronology);
",4,0,0,1,2,0,0,0,0,5,34,3,0.00000,0
defect4j,time,org/joda/time/Period,11,424,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/Period,11,444,"        super(duration, type, chronology);
",6,0,0,1,2,0,0,0,0,6,34,4,0.00000,0
defect4j,time,org/joda/time/Period,11,445,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/Period,11,455,"        super(startInstant, endInstant, null, null);
",4,0,0,1,2,0,0,0,0,5,44,3,0.00000,0
defect4j,time,org/joda/time/Period,11,456,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/Period,11,466,"        super(startInstant, endInstant, type, null);
",6,0,0,1,2,0,0,0,0,7,44,3,0.00000,0
defect4j,time,org/joda/time/Period,11,467,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/Period,11,478,"        super(startInstant, endInstant, null, chrono);
",6,0,0,1,2,0,0,0,0,7,46,3,0.00000,0
defect4j,time,org/joda/time/Period,11,479,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/Period,11,501,"        super(startInstant, endInstant, null);
",4,0,0,1,2,0,0,0,0,5,38,3,0.00000,0
defect4j,time,org/joda/time/Period,11,502,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/Period,11,512,"        super(startInstant, endInstant, type);
",6,0,0,1,2,0,0,0,0,6,38,4,0.00000,0
defect4j,time,org/joda/time/Period,11,513,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/Period,11,537,"        super(start, end, null);
",4,0,0,1,2,0,0,0,0,5,24,3,0.00000,0
defect4j,time,org/joda/time/Period,11,538,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/Period,11,563,"        super(start, end, type);
",6,0,0,1,2,0,0,0,0,6,24,4,0.00000,0
defect4j,time,org/joda/time/Period,11,564,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/Period,11,573,"        super(startInstant, duration, null);
",4,0,0,1,2,0,0,0,0,5,36,3,0.00000,0
defect4j,time,org/joda/time/Period,11,574,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/Period,11,584,"        super(startInstant, duration, type);
",6,0,0,1,2,0,0,0,0,6,36,4,0.00000,0
defect4j,time,org/joda/time/Period,11,585,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/Period,11,594,"        super(duration, endInstant, null);
",4,0,0,1,2,0,0,0,0,5,34,3,0.00000,0
defect4j,time,org/joda/time/Period,11,595,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/Period,11,605,"        super(duration, endInstant, type);
",6,0,0,1,2,0,0,0,0,6,34,4,0.00000,0
defect4j,time,org/joda/time/Period,11,606,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/Period,11,621,"        super(period, null, null);
",2,0,0,1,2,0,0,0,0,3,26,3,0.00000,0
defect4j,time,org/joda/time/Period,11,622,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/Period,11,638,"        super(period, type, null);
",4,0,0,1,2,0,0,0,0,5,26,3,0.00000,0
defect4j,time,org/joda/time/Period,11,639,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/Period,11,655,"        super(period, null, chrono);
",4,0,0,1,2,0,0,0,0,5,28,3,0.00000,0
defect4j,time,org/joda/time/Period,11,656,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/Period,11,673,"        super(period, type, chrono);
",6,0,0,1,2,0,0,0,0,6,28,4,0.00000,0
defect4j,time,org/joda/time/Period,11,674,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/Period,11,683,"        super(values, type);
",4,0,0,1,2,0,0,0,0,4,20,4,0.00000,0
defect4j,time,org/joda/time/Period,11,684,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/Period,11,81,"        return parse(str, ISOPeriodFormat.standard());
",0,0,0,2,4,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/Period,11,92,"        return formatter.parsePeriod(str);
",0,0,0,1,2,1,6,0,0,6,34,5,0.00000,0
defect4j,time,org/joda/time/Period,11,110,"        return new Period(new int[] {years, 0, 0, 0, 0, 0, 0, 0, 0}, PeriodType.standard());
",2,0,0,4,8,1,4,2,0,8,84,5,0.00000,0
defect4j,time,org/joda/time/Period,11,127,"        return new Period(new int[] {0, months, 0, 0, 0, 0, 0, 0}, PeriodType.standard());
",2,0,0,4,8,1,4,2,0,8,82,5,0.00000,0
defect4j,time,org/joda/time/Period,11,144,"        return new Period(new int[] {0, 0, weeks, 0, 0, 0, 0, 0}, PeriodType.standard());
",2,0,0,4,8,1,4,2,0,8,81,5,0.00000,0
defect4j,time,org/joda/time/Period,11,161,"        return new Period(new int[] {0, 0, 0, days, 0, 0, 0, 0}, PeriodType.standard());
",2,0,0,4,8,1,4,2,0,8,80,5,0.00000,0
defect4j,time,org/joda/time/Period,11,178,"        return new Period(new int[] {0, 0, 0, 0, hours, 0, 0, 0}, PeriodType.standard());
",2,0,0,4,8,1,4,2,0,8,81,5,0.00000,0
defect4j,time,org/joda/time/Period,11,195,"        return new Period(new int[] {0, 0, 0, 0, 0, minutes, 0, 0}, PeriodType.standard());
",2,0,0,4,8,1,4,2,0,8,83,5,0.00000,0
defect4j,time,org/joda/time/Period,11,212,"        return new Period(new int[] {0, 0, 0, 0, 0, 0, seconds, 0}, PeriodType.standard());
",2,0,0,4,8,1,4,2,0,8,83,5,0.00000,0
defect4j,time,org/joda/time/Period,11,226,"        return new Period(new int[] {0, 0, 0, 0, 0, 0, 0, millis}, PeriodType.standard());
",2,0,0,4,8,1,4,2,0,8,82,5,0.00000,0
defect4j,time,org/joda/time/Period,11,257,"        if (start == null || end == null) {
",4,3,0,1,3,0,0,0,0,7,35,4,0.00000,0
defect4j,time,org/joda/time/Period,11,258,"            throw new IllegalArgumentException(""ReadablePartial objects must not be null"");
",0,0,0,1,2,0,0,2,0,4,79,6,0.00000,0
defect4j,time,org/joda/time/Period,11,260,"        if (start.size() != end.size()) {
",0,1,0,3,7,0,8,0,0,9,33,4,0.00000,0
defect4j,time,org/joda/time/Period,11,261,"            throw new IllegalArgumentException(""ReadablePartial objects must have the same set of fields"");
",0,0,0,1,2,0,0,2,0,3,95,7,0.00000,0
defect4j,time,org/joda/time/Period,11,263,"        DurationFieldType[] types = new DurationFieldType[start.size()];
",2,0,0,3,6,0,4,4,0,10,64,4,0.00000,0
defect4j,time,org/joda/time/Period,11,264,"        int[] values = new int[start.size()];
",2,0,0,3,6,0,4,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/Period,11,265,"        for (int i = 0, isize = start.size(); i < isize; i++) {
",10,1,0,2,5,0,4,0,0,16,55,4,0.00000,0
defect4j,time,org/joda/time/Period,11,266,"            if (start.getFieldType(i) != end.getFieldType(i)) {
",0,1,0,3,7,0,12,0,0,13,51,6,0.00000,0
defect4j,time,org/joda/time/Period,11,267,"                throw new IllegalArgumentException(""ReadablePartial objects must have the same set of fields"");
",0,0,0,1,2,0,0,2,0,3,95,9,0.00000,0
defect4j,time,org/joda/time/Period,11,269,"            types[i] = start.getFieldType(i).getDurationType();
",0,0,1,3,6,0,8,0,0,13,51,6,0.00000,0
defect4j,time,org/joda/time/Period,11,270,"            if (i > 0 && types[i - 1] == types[i]) {
",4,4,1,3,7,0,0,0,0,14,40,6,0.00000,0
defect4j,time,org/joda/time/Period,11,271,"                throw new IllegalArgumentException(""ReadablePartial objects must not have overlapping fields"");
",0,0,0,1,2,0,0,2,0,3,95,9,0.00000,0
defect4j,time,org/joda/time/Period,11,273,"            values[i] = end.getValue(i) - start.getValue(i);
",0,1,1,3,6,0,12,0,0,18,48,6,0.00000,0
defect4j,time,org/joda/time/Period,11,275,"        return new Period(values, PeriodType.forFields(types));
",2,0,0,2,4,1,6,2,0,10,55,5,0.00000,0
defect4j,time,org/joda/time/Period,11,694,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/Period,11,704,"        return getPeriodType().getIndexedField(this, PeriodType.YEAR_INDEX);
",4,0,0,2,4,1,4,0,0,8,68,5,0.00000,0
defect4j,time,org/joda/time/Period,11,713,"        return getPeriodType().getIndexedField(this, PeriodType.MONTH_INDEX);
",4,0,0,2,4,1,4,0,0,8,69,5,0.00000,0
defect4j,time,org/joda/time/Period,11,722,"        return getPeriodType().getIndexedField(this, PeriodType.WEEK_INDEX);
",4,0,0,2,4,1,4,0,0,8,68,5,0.00000,0
defect4j,time,org/joda/time/Period,11,731,"        return getPeriodType().getIndexedField(this, PeriodType.DAY_INDEX);
",4,0,0,2,4,1,4,0,0,8,67,5,0.00000,0
defect4j,time,org/joda/time/Period,11,741,"        return getPeriodType().getIndexedField(this, PeriodType.HOUR_INDEX);
",4,0,0,2,4,1,4,0,0,8,68,5,0.00000,0
defect4j,time,org/joda/time/Period,11,750,"        return getPeriodType().getIndexedField(this, PeriodType.MINUTE_INDEX);
",4,0,0,2,4,1,4,0,0,8,70,5,0.00000,0
defect4j,time,org/joda/time/Period,11,759,"        return getPeriodType().getIndexedField(this, PeriodType.SECOND_INDEX);
",4,0,0,2,4,1,4,0,0,8,70,5,0.00000,0
defect4j,time,org/joda/time/Period,11,768,"        return getPeriodType().getIndexedField(this, PeriodType.MILLI_INDEX);
",4,0,0,2,4,1,4,0,0,8,69,5,0.00000,0
defect4j,time,org/joda/time/Period,11,783,"        type = DateTimeUtils.getPeriodType(type);
",2,0,0,1,2,0,6,0,0,9,41,4,0.00000,0
defect4j,time,org/joda/time/Period,11,784,"        if (type.equals(getPeriodType())) {
",0,0,0,3,7,0,6,0,0,6,35,5,0.00000,0
defect4j,time,org/joda/time/Period,11,785,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/Period,11,787,"        return new Period(this, type);
",2,0,0,1,2,1,0,2,0,4,30,5,0.00000,0
defect4j,time,org/joda/time/Period,11,801,"        if (period == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/Period,11,802,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/Period,11,804,"        int[] newValues = getValues();  // cloned
",2,0,0,2,4,0,2,0,0,4,41,5,0.00000,0
defect4j,time,org/joda/time/Period,11,805,"        newValues = super.mergePeriodInto(newValues, period);
",8,0,0,1,2,0,0,0,0,9,53,4,0.00000,0
defect4j,time,org/joda/time/Period,11,806,"        return new Period(newValues, getPeriodType());
",2,0,0,2,4,1,2,2,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/Period,11,821,"        if (field == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/Period,11,822,"            throw new IllegalArgumentException(""Field must not be null"");
",0,0,0,1,2,0,0,2,0,4,61,6,0.00000,0
defect4j,time,org/joda/time/Period,11,824,"        int[] newValues = getValues();  // cloned
",2,0,0,2,4,0,2,0,0,4,41,5,0.00000,0
defect4j,time,org/joda/time/Period,11,825,"        super.setFieldInto(newValues, field, value);
",8,0,0,1,2,0,0,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/Period,11,826,"        return new Period(newValues, getPeriodType());
",2,0,0,2,4,1,2,2,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/Period,11,840,"        if (field == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/Period,11,841,"            throw new IllegalArgumentException(""Field must not be null"");
",0,0,0,1,2,0,0,2,0,4,61,6,0.00000,0
defect4j,time,org/joda/time/Period,11,843,"        if (value == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/Period,11,844,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/Period,11,846,"        int[] newValues = getValues();  // cloned
",2,0,0,2,4,0,2,0,0,4,41,5,0.00000,0
defect4j,time,org/joda/time/Period,11,847,"        super.addFieldInto(newValues, field, value);
",8,0,0,1,2,0,0,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/Period,11,848,"        return new Period(newValues, getPeriodType());
",2,0,0,2,4,1,2,2,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/Period,11,862,"        int[] values = getValues();  // cloned
",2,0,0,2,4,0,2,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/Period,11,863,"        getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years);
",4,0,0,2,4,0,8,0,0,12,76,5,0.00000,0
defect4j,time,org/joda/time/Period,11,864,"        return new Period(values, getPeriodType());
",2,0,0,2,4,1,2,2,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/Period,11,877,"        int[] values = getValues();  // cloned
",2,0,0,2,4,0,2,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/Period,11,878,"        getPeriodType().setIndexedField(this, PeriodType.MONTH_INDEX, values, months);
",4,0,0,2,4,0,8,0,0,12,78,5,0.00000,0
defect4j,time,org/joda/time/Period,11,879,"        return new Period(values, getPeriodType());
",2,0,0,2,4,1,2,2,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/Period,11,892,"        int[] values = getValues();  // cloned
",2,0,0,2,4,0,2,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/Period,11,893,"        getPeriodType().setIndexedField(this, PeriodType.WEEK_INDEX, values, weeks);
",4,0,0,2,4,0,8,0,0,12,76,5,0.00000,0
defect4j,time,org/joda/time/Period,11,894,"        return new Period(values, getPeriodType());
",2,0,0,2,4,1,2,2,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/Period,11,907,"        int[] values = getValues();  // cloned
",2,0,0,2,4,0,2,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/Period,11,908,"        getPeriodType().setIndexedField(this, PeriodType.DAY_INDEX, values, days);
",4,0,0,2,4,0,8,0,0,12,74,5,0.00000,0
defect4j,time,org/joda/time/Period,11,909,"        return new Period(values, getPeriodType());
",2,0,0,2,4,1,2,2,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/Period,11,922,"        int[] values = getValues();  // cloned
",2,0,0,2,4,0,2,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/Period,11,923,"        getPeriodType().setIndexedField(this, PeriodType.HOUR_INDEX, values, hours);
",4,0,0,2,4,0,8,0,0,12,76,5,0.00000,0
defect4j,time,org/joda/time/Period,11,924,"        return new Period(values, getPeriodType());
",2,0,0,2,4,1,2,2,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/Period,11,937,"        int[] values = getValues();  // cloned
",2,0,0,2,4,0,2,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/Period,11,938,"        getPeriodType().setIndexedField(this, PeriodType.MINUTE_INDEX, values, minutes);
",4,0,0,2,4,0,8,0,0,12,80,5,0.00000,0
defect4j,time,org/joda/time/Period,11,939,"        return new Period(values, getPeriodType());
",2,0,0,2,4,1,2,2,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/Period,11,952,"        int[] values = getValues();  // cloned
",2,0,0,2,4,0,2,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/Period,11,953,"        getPeriodType().setIndexedField(this, PeriodType.SECOND_INDEX, values, seconds);
",4,0,0,2,4,0,8,0,0,12,80,5,0.00000,0
defect4j,time,org/joda/time/Period,11,954,"        return new Period(values, getPeriodType());
",2,0,0,2,4,1,2,2,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/Period,11,967,"        int[] values = getValues();  // cloned
",2,0,0,2,4,0,2,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/Period,11,968,"        getPeriodType().setIndexedField(this, PeriodType.MILLI_INDEX, values, millis);
",4,0,0,2,4,0,8,0,0,12,78,5,0.00000,0
defect4j,time,org/joda/time/Period,11,969,"        return new Period(values, getPeriodType());
",2,0,0,2,4,1,2,2,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/Period,11,991,"        if (period == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/Period,11,992,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/Period,11,994,"        int[] values = getValues();  // cloned
",2,0,0,2,4,0,2,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/Period,11,995,"        getPeriodType().addIndexedField(this, PeriodType.YEAR_INDEX, values, period.get(DurationFieldType.YEARS_TYPE));
",8,0,0,3,6,0,10,0,0,18,111,5,0.00000,0
defect4j,time,org/joda/time/Period,11,996,"        getPeriodType().addIndexedField(this, PeriodType.MONTH_INDEX, values, period.get(DurationFieldType.MONTHS_TYPE));
",8,0,0,3,6,0,10,0,0,18,113,5,0.00000,0
defect4j,time,org/joda/time/Period,11,997,"        getPeriodType().addIndexedField(this, PeriodType.WEEK_INDEX, values, period.get(DurationFieldType.WEEKS_TYPE));
",8,0,0,3,6,0,10,0,0,18,111,5,0.00000,0
defect4j,time,org/joda/time/Period,11,998,"        getPeriodType().addIndexedField(this, PeriodType.DAY_INDEX, values, period.get(DurationFieldType.DAYS_TYPE));
",8,0,0,3,6,0,10,0,0,18,109,5,0.00000,0
defect4j,time,org/joda/time/Period,11,999,"        getPeriodType().addIndexedField(this, PeriodType.HOUR_INDEX, values, period.get(DurationFieldType.HOURS_TYPE));
",8,0,0,3,6,0,10,0,0,18,111,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1000,"        getPeriodType().addIndexedField(this, PeriodType.MINUTE_INDEX, values, period.get(DurationFieldType.MINUTES_TYPE));
",8,0,0,3,6,0,10,0,0,18,115,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1001,"        getPeriodType().addIndexedField(this, PeriodType.SECOND_INDEX, values, period.get(DurationFieldType.SECONDS_TYPE));
",8,0,0,3,6,0,10,0,0,18,115,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1002,"        getPeriodType().addIndexedField(this, PeriodType.MILLI_INDEX, values, period.get(DurationFieldType.MILLIS_TYPE));
",8,0,0,3,6,0,10,0,0,18,113,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1003,"        return new Period(values, getPeriodType());
",2,0,0,2,4,1,2,2,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1017,"        if (years == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1018,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/Period,11,1020,"        int[] values = getValues();  // cloned
",2,0,0,2,4,0,2,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1021,"        getPeriodType().addIndexedField(this, PeriodType.YEAR_INDEX, values, years);
",4,0,0,2,4,0,8,0,0,12,76,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1022,"        return new Period(values, getPeriodType());
",2,0,0,2,4,1,2,2,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1035,"        if (months == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1036,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/Period,11,1038,"        int[] values = getValues();  // cloned
",2,0,0,2,4,0,2,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1039,"        getPeriodType().addIndexedField(this, PeriodType.MONTH_INDEX, values, months);
",4,0,0,2,4,0,8,0,0,12,78,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1040,"        return new Period(values, getPeriodType());
",2,0,0,2,4,1,2,2,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1053,"        if (weeks == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1054,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/Period,11,1056,"        int[] values = getValues();  // cloned
",2,0,0,2,4,0,2,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1057,"        getPeriodType().addIndexedField(this, PeriodType.WEEK_INDEX, values, weeks);
",4,0,0,2,4,0,8,0,0,12,76,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1058,"        return new Period(values, getPeriodType());
",2,0,0,2,4,1,2,2,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1071,"        if (days == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1072,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/Period,11,1074,"        int[] values = getValues();  // cloned
",2,0,0,2,4,0,2,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1075,"        getPeriodType().addIndexedField(this, PeriodType.DAY_INDEX, values, days);
",4,0,0,2,4,0,8,0,0,12,74,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1076,"        return new Period(values, getPeriodType());
",2,0,0,2,4,1,2,2,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1089,"        if (hours == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1090,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/Period,11,1092,"        int[] values = getValues();  // cloned
",2,0,0,2,4,0,2,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1093,"        getPeriodType().addIndexedField(this, PeriodType.HOUR_INDEX, values, hours);
",4,0,0,2,4,0,8,0,0,12,76,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1094,"        return new Period(values, getPeriodType());
",2,0,0,2,4,1,2,2,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1107,"        if (minutes == 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1108,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/Period,11,1110,"        int[] values = getValues();  // cloned
",2,0,0,2,4,0,2,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1111,"        getPeriodType().addIndexedField(this, PeriodType.MINUTE_INDEX, values, minutes);
",4,0,0,2,4,0,8,0,0,12,80,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1112,"        return new Period(values, getPeriodType());
",2,0,0,2,4,1,2,2,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1125,"        if (seconds == 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1126,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/Period,11,1128,"        int[] values = getValues();  // cloned
",2,0,0,2,4,0,2,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1129,"        getPeriodType().addIndexedField(this, PeriodType.SECOND_INDEX, values, seconds);
",4,0,0,2,4,0,8,0,0,12,80,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1130,"        return new Period(values, getPeriodType());
",2,0,0,2,4,1,2,2,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1143,"        if (millis == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1144,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/Period,11,1146,"        int[] values = getValues();  // cloned
",2,0,0,2,4,0,2,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1147,"        getPeriodType().addIndexedField(this, PeriodType.MILLI_INDEX, values, millis);
",4,0,0,2,4,0,8,0,0,12,78,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1148,"        return new Period(values, getPeriodType());
",2,0,0,2,4,1,2,2,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1170,"        if (period == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1171,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/Period,11,1173,"        int[] values = getValues();  // cloned
",2,0,0,2,4,0,2,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1174,"        getPeriodType().addIndexedField(this, PeriodType.YEAR_INDEX, values, -period.get(DurationFieldType.YEARS_TYPE));
",8,0,0,3,6,0,10,0,0,19,112,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1175,"        getPeriodType().addIndexedField(this, PeriodType.MONTH_INDEX, values, -period.get(DurationFieldType.MONTHS_TYPE));
",8,0,0,3,6,0,10,0,0,19,114,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1176,"        getPeriodType().addIndexedField(this, PeriodType.WEEK_INDEX, values, -period.get(DurationFieldType.WEEKS_TYPE));
",8,0,0,3,6,0,10,0,0,19,112,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1177,"        getPeriodType().addIndexedField(this, PeriodType.DAY_INDEX, values, -period.get(DurationFieldType.DAYS_TYPE));
",8,0,0,3,6,0,10,0,0,19,110,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1178,"        getPeriodType().addIndexedField(this, PeriodType.HOUR_INDEX, values, -period.get(DurationFieldType.HOURS_TYPE));
",8,0,0,3,6,0,10,0,0,19,112,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1179,"        getPeriodType().addIndexedField(this, PeriodType.MINUTE_INDEX, values, -period.get(DurationFieldType.MINUTES_TYPE));
",8,0,0,3,6,0,10,0,0,19,116,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1180,"        getPeriodType().addIndexedField(this, PeriodType.SECOND_INDEX, values, -period.get(DurationFieldType.SECONDS_TYPE));
",8,0,0,3,6,0,10,0,0,19,116,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1181,"        getPeriodType().addIndexedField(this, PeriodType.MILLI_INDEX, values, -period.get(DurationFieldType.MILLIS_TYPE));
",8,0,0,3,6,0,10,0,0,19,114,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1182,"        return new Period(values, getPeriodType());
",2,0,0,2,4,1,2,2,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1196,"        return plusYears(-years);
",2,0,0,1,2,1,2,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1209,"        return plusMonths(-months);
",2,0,0,1,2,1,2,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1222,"        return plusWeeks(-weeks);
",2,0,0,1,2,1,2,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1235,"        return plusDays(-days);
",2,0,0,1,2,1,2,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1248,"        return plusHours(-hours);
",2,0,0,1,2,1,2,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1261,"        return plusMinutes(-minutes);
",2,0,0,1,2,1,2,0,0,5,29,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1274,"        return plusSeconds(-seconds);
",2,0,0,1,2,1,2,0,0,5,29,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1287,"        return plusMillis(-millis);
",2,0,0,1,2,1,2,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1301,"        if (this == ZERO || scalar == 1) {
",4,3,0,1,3,0,0,0,0,7,34,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1302,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/Period,11,1304,"        int[] values = getValues();  // cloned
",2,0,0,2,4,0,2,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1305,"        for (int i = 0; i < values.length; i++) {
",10,1,0,1,3,0,0,0,0,12,41,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1306,"            values[i] = FieldUtils.safeMultiply(values[i], scalar);
",0,0,1,3,6,0,6,0,0,15,55,6,0.00000,0
defect4j,time,org/joda/time/Period,11,1308,"        return new Period(values, getPeriodType());
",2,0,0,2,4,1,2,2,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1319,"        return multipliedBy(-1);
",0,0,0,1,2,1,2,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1343,"        checkYearsAndMonths(""Weeks"");
",0,0,0,1,2,0,2,0,0,3,29,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1344,"        long millis = getMillis();  // assign to a long
",2,0,0,1,2,0,2,0,0,4,47,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1345,"        millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;
",6,1,0,3,6,0,2,0,0,10,70,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1346,"        millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;
",6,1,0,3,6,0,2,0,0,10,70,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1347,"        millis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR;
",6,1,0,3,6,0,2,0,0,10,66,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1348,"        millis += ((long) getDays()) * DateTimeConstants.MILLIS_PER_DAY;
",6,1,0,3,6,0,2,0,0,10,64,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1349,"        long weeks = ((long) getWeeks()) + millis / DateTimeConstants.MILLIS_PER_WEEK;
",8,2,0,3,6,0,2,0,0,12,78,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1350,"        return Weeks.weeks(FieldUtils.safeToInt(weeks));
",0,0,0,2,4,1,10,0,0,10,48,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1373,"        checkYearsAndMonths(""Days"");
",0,0,0,1,2,0,2,0,0,3,28,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1374,"        long millis = getMillis();  // assign to a long
",2,0,0,1,2,0,2,0,0,4,47,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1375,"        millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;
",6,1,0,3,6,0,2,0,0,10,70,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1376,"        millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;
",6,1,0,3,6,0,2,0,0,10,70,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1377,"        millis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR;
",6,1,0,3,6,0,2,0,0,10,66,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1378,"        long days = millis / DateTimeConstants.MILLIS_PER_DAY;
",8,1,0,0,0,0,0,0,0,9,54,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1379,"        days = FieldUtils.safeAdd(days, getDays());
",2,0,0,2,4,0,8,0,0,11,43,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1380,"        days = FieldUtils.safeAdd(days, ((long) getWeeks()) * ((long) DateTimeConstants.DAYS_PER_WEEK));
",6,1,0,6,12,0,8,0,0,16,96,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1381,"        return Days.days(FieldUtils.safeToInt(days));
",0,0,0,2,4,1,10,0,0,10,45,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1404,"        checkYearsAndMonths(""Hours"");
",0,0,0,1,2,0,2,0,0,3,29,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1405,"        long millis = getMillis();  // assign to a long
",2,0,0,1,2,0,2,0,0,4,47,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1406,"        millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;
",6,1,0,3,6,0,2,0,0,10,70,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1407,"        millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;
",6,1,0,3,6,0,2,0,0,10,70,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1408,"        long hours = millis / DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,0,0,0,0,0,0,9,56,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1409,"        hours = FieldUtils.safeAdd(hours, getHours());
",2,0,0,2,4,0,8,0,0,11,46,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1410,"        hours = FieldUtils.safeAdd(hours, ((long) getDays()) * ((long) DateTimeConstants.HOURS_PER_DAY));
",6,1,0,6,12,0,8,0,0,16,97,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1411,"        hours = FieldUtils.safeAdd(hours, ((long) getWeeks()) * ((long) DateTimeConstants.HOURS_PER_WEEK));
",6,1,0,6,12,0,8,0,0,16,99,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1412,"        return Hours.hours(FieldUtils.safeToInt(hours));
",0,0,0,2,4,1,10,0,0,10,48,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1435,"        checkYearsAndMonths(""Minutes"");
",0,0,0,1,2,0,2,0,0,3,31,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1436,"        long millis = getMillis();  // assign to a long
",2,0,0,1,2,0,2,0,0,4,47,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1437,"        millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;
",6,1,0,3,6,0,2,0,0,10,70,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1438,"        long minutes = millis / DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,9,60,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1439,"        minutes = FieldUtils.safeAdd(minutes, getMinutes());
",2,0,0,2,4,0,8,0,0,11,52,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1440,"        minutes = FieldUtils.safeAdd(minutes, ((long) getHours()) * ((long) DateTimeConstants.MINUTES_PER_HOUR));
",6,1,0,6,12,0,8,0,0,16,105,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1441,"        minutes = FieldUtils.safeAdd(minutes, ((long) getDays()) * ((long) DateTimeConstants.MINUTES_PER_DAY));
",6,1,0,6,12,0,8,0,0,16,103,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1442,"        minutes = FieldUtils.safeAdd(minutes, ((long) getWeeks()) * ((long) DateTimeConstants.MINUTES_PER_WEEK));
",6,1,0,6,12,0,8,0,0,16,105,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1443,"        return Minutes.minutes(FieldUtils.safeToInt(minutes));
",0,0,0,2,4,1,10,0,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1466,"        checkYearsAndMonths(""Seconds"");
",0,0,0,1,2,0,2,0,0,3,31,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1467,"        long seconds = getMillis() / DateTimeConstants.MILLIS_PER_SECOND;
",6,1,0,1,2,0,2,0,0,9,65,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1468,"        seconds = FieldUtils.safeAdd(seconds, getSeconds());
",2,0,0,2,4,0,8,0,0,11,52,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1469,"        seconds = FieldUtils.safeAdd(seconds, ((long) getMinutes()) * ((long) DateTimeConstants.SECONDS_PER_MINUTE));
",6,1,0,6,12,0,8,0,0,16,109,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1470,"        seconds = FieldUtils.safeAdd(seconds, ((long) getHours()) * ((long) DateTimeConstants.SECONDS_PER_HOUR));
",6,1,0,6,12,0,8,0,0,16,105,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1471,"        seconds = FieldUtils.safeAdd(seconds, ((long) getDays()) * ((long) DateTimeConstants.SECONDS_PER_DAY));
",6,1,0,6,12,0,8,0,0,16,103,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1472,"        seconds = FieldUtils.safeAdd(seconds, ((long) getWeeks()) * ((long) DateTimeConstants.SECONDS_PER_WEEK));
",6,1,0,6,12,0,8,0,0,16,105,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1473,"        return Seconds.seconds(FieldUtils.safeToInt(seconds));
",0,0,0,2,4,1,10,0,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1496,"        checkYearsAndMonths(""Duration"");
",0,0,0,1,2,0,2,0,0,3,32,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1497,"        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
",2,0,0,1,2,0,2,0,0,4,83,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1498,"        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
",6,1,0,6,12,0,2,0,0,10,81,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1499,"        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
",6,1,0,6,12,0,2,0,0,10,81,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1500,"        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
",6,1,0,6,12,0,2,0,0,10,77,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1501,"        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
",6,1,0,6,12,0,2,0,0,10,75,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1502,"        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
",6,1,0,6,12,0,2,0,0,10,77,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1503,"        return new Duration(millis);
",2,0,0,1,2,1,0,2,0,4,28,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1513,"        if (getMonths() != 0) {
",0,1,0,2,5,0,2,0,0,3,23,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1514,"            throw new UnsupportedOperationException(""Cannot convert to "" + destintionType + "" as this period contains months and months vary in length"");
",2,1,0,1,2,0,0,2,0,7,141,7,0.00000,0
defect4j,time,org/joda/time/Period,11,1516,"        if (getYears() != 0) {
",0,1,0,2,5,0,2,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1517,"            throw new UnsupportedOperationException(""Cannot convert to "" + destintionType + "" as this period contains years and years vary in length"");
",2,1,0,1,2,0,0,2,0,7,139,7,0.00000,0
defect4j,time,org/joda/time/Period,11,1519,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/Period,11,1548,"        return normalizedStandard(PeriodType.standard());
",0,0,0,2,4,1,6,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1584,"        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
",2,0,0,1,2,0,2,0,0,4,83,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1585,"        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
",6,1,0,6,12,0,2,0,0,10,81,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1586,"        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
",6,1,0,6,12,0,2,0,0,10,81,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1587,"        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
",6,1,0,6,12,0,2,0,0,10,77,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1588,"        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
",6,1,0,6,12,0,2,0,0,10,75,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1589,"        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
",6,1,0,6,12,0,2,0,0,10,77,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1590,"        Period result = new Period(millis, DateTimeUtils.getPeriodType(type), ISOChronology.getInstanceUTC());
",4,0,0,3,6,0,10,4,0,18,102,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1591,"        int years = getYears();
",2,0,0,1,2,0,2,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1592,"        int months = getMonths();
",2,0,0,1,2,0,2,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/Period,11,1593,"        if (years != 0 || months != 0) {
",4,3,0,1,3,0,0,0,0,7,32,4,0.00000,0
defect4j,time,org/joda/time/Period,11,1594,"            years = FieldUtils.safeAdd(years, months / 12);
",4,1,0,1,2,0,6,0,0,12,47,6,0.00000,0
defect4j,time,org/joda/time/Period,11,1595,"            months = months % 12;
",4,1,0,0,0,0,0,0,0,6,21,6,0.00000,0
defect4j,time,org/joda/time/Period,11,1596,"            if (years != 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.00000,0
defect4j,time,org/joda/time/Period,11,1597,"                result = result.withYears(years);
",2,0,0,1,2,0,6,0,0,9,33,8,0.00000,0
defect4j,time,org/joda/time/Period,11,1599,"            if (months != 0) {
",2,1,0,1,3,0,0,0,0,3,18,6,0.00000,0
defect4j,time,org/joda/time/Period,11,1600,"                result = result.withMonths(months);
",2,0,0,1,2,0,6,0,0,9,35,8,0.00000,0
defect4j,time,org/joda/time/Period,11,1603,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,463,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,464,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,466,"            if (obj instanceof StandardDateTimeFieldType) {
",2,0,0,1,3,0,0,2,0,4,47,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,467,"                return iOrdinal == ((StandardDateTimeFieldType) obj).iOrdinal;
",6,1,0,2,4,1,0,2,0,9,62,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,469,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,475,"            return (1 << iOrdinal);
",2,1,0,1,2,1,0,0,0,3,23,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,480,"            chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,5,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,482,"            switch (iOrdinal) {
",2,0,0,1,3,0,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,484,"                    return chronology.era();
",0,0,0,1,2,1,4,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,486,"                    return chronology.yearOfEra();
",0,0,0,1,2,1,4,0,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,488,"                    return chronology.centuryOfEra();
",0,0,0,1,2,1,4,0,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,490,"                    return chronology.yearOfCentury();
",0,0,0,1,2,1,4,0,0,4,34,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,492,"                    return chronology.year();
",0,0,0,1,2,1,4,0,0,4,25,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,494,"                    return chronology.dayOfYear();
",0,0,0,1,2,1,4,0,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,496,"                    return chronology.monthOfYear();
",0,0,0,1,2,1,4,0,0,4,32,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,498,"                    return chronology.dayOfMonth();
",0,0,0,1,2,1,4,0,0,4,31,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,500,"                    return chronology.weekyearOfCentury();
",0,0,0,1,2,1,4,0,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,502,"                    return chronology.weekyear();
",0,0,0,1,2,1,4,0,0,4,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,504,"                    return chronology.weekOfWeekyear();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,506,"                    return chronology.dayOfWeek();
",0,0,0,1,2,1,4,0,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,508,"                    return chronology.halfdayOfDay();
",0,0,0,1,2,1,4,0,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,510,"                    return chronology.hourOfHalfday();
",0,0,0,1,2,1,4,0,0,4,34,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,512,"                    return chronology.clockhourOfHalfday();
",0,0,0,1,2,1,4,0,0,4,39,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,514,"                    return chronology.clockhourOfDay();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,516,"                    return chronology.hourOfDay();
",0,0,0,1,2,1,4,0,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,518,"                    return chronology.minuteOfDay();
",0,0,0,1,2,1,4,0,0,4,32,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,520,"                    return chronology.minuteOfHour();
",0,0,0,1,2,1,4,0,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,522,"                    return chronology.secondOfDay();
",0,0,0,1,2,1,4,0,0,4,32,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,524,"                    return chronology.secondOfMinute();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,526,"                    return chronology.millisOfDay();
",0,0,0,1,2,1,4,0,0,4,32,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,528,"                    return chronology.millisOfSecond();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,531,"                    throw new InternalError();
",0,0,0,1,2,0,0,2,0,2,26,8,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,541,"            switch (iOrdinal) {
",2,0,0,1,3,0,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,543,"                    return ERA_TYPE;
",2,0,0,0,0,1,0,0,0,2,16,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,545,"                    return YEAR_OF_ERA_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,547,"                    return CENTURY_OF_ERA_TYPE;
",2,0,0,0,0,1,0,0,0,2,27,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,549,"                    return YEAR_OF_CENTURY_TYPE;
",2,0,0,0,0,1,0,0,0,2,28,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,551,"                    return YEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,553,"                    return DAY_OF_YEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,555,"                    return MONTH_OF_YEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,557,"                    return DAY_OF_MONTH_TYPE;
",2,0,0,0,0,1,0,0,0,2,25,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,559,"                    return WEEKYEAR_OF_CENTURY_TYPE;
",2,0,0,0,0,1,0,0,0,2,32,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,561,"                    return WEEKYEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,21,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,563,"                    return WEEK_OF_WEEKYEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,565,"                    return DAY_OF_WEEK_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,567,"                    return HALFDAY_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,27,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,569,"                    return HOUR_OF_HALFDAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,28,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,571,"                    return CLOCKHOUR_OF_HALFDAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,33,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,573,"                    return CLOCKHOUR_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,575,"                    return HOUR_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,577,"                    return MINUTE_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,579,"                    return MINUTE_OF_HOUR_TYPE;
",2,0,0,0,0,1,0,0,0,2,27,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,581,"                    return SECOND_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,583,"                    return SECOND_OF_MINUTE_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,585,"                    return MILLIS_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,587,"                    return MILLIS_OF_SECOND_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,11,590,"                    return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,11,42,"        return GJLocaleSymbols.forLocale(locale).monthOfYearValueToText(fieldValue);
",0,0,0,2,4,1,10,0,0,10,76,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,11,47,"        return GJLocaleSymbols.forLocale(locale).monthOfYearValueToShortText(fieldValue);
",0,0,0,2,4,1,10,0,0,10,81,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,11,52,"        return GJLocaleSymbols.forLocale(locale).monthOfYearTextToValue(text);
",0,0,0,2,4,1,10,0,0,10,70,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,11,57,"        return GJLocaleSymbols.forLocale(locale).getMonthMaxTextLength();
",0,0,0,2,4,1,8,0,0,8,65,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,11,62,"        return GJLocaleSymbols.forLocale(locale).getMonthMaxShortTextLength();
",0,0,0,2,4,1,8,0,0,8,70,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,59,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,72,"        return iChronology.getMonthOfYear(instant);
",0,0,0,1,2,1,6,0,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,93,"            return instant; // the easy case
",2,0,0,0,0,1,0,0,0,2,32,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,117,"            yearToUse = thisYear + (monthToUse / iMax) - 1;
",8,3,0,1,2,0,0,0,0,12,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,118,"            monthToUse = Math.abs(monthToUse);
",2,0,0,1,2,0,6,0,0,9,34,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,119,"            int remMonthToUse = monthToUse % iMax;
",6,1,0,0,0,0,0,0,0,7,38,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,121,"            if (remMonthToUse == 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,122,"                remMonthToUse = iMax;
",4,0,0,0,0,0,0,0,0,5,21,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,124,"            monthToUse = iMax - remMonthToUse + 1;
",6,2,0,0,0,0,0,0,0,9,38,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,126,"            if (monthToUse == 1) {
",2,1,0,1,3,0,0,0,0,3,22,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,127,"                yearToUse += 1;
",2,0,0,0,0,0,0,0,0,3,15,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,139,"            dayToUse = maxDay;
",4,0,0,0,0,0,0,0,0,5,18,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,151,"        int i_months = (int)months;
",4,0,0,1,2,0,0,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,152,"        if (i_months == months) {
",4,1,0,1,3,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,153,"            return add(instant, i_months);
",0,0,0,1,2,1,6,0,0,6,30,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,158,"        long timePart = iChronology.getMillisOfDay(instant);
",2,0,0,1,2,0,6,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,160,"        int thisYear = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,161,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);
",2,0,0,1,2,0,8,0,0,10,62,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,164,"        long monthToUse = thisMonth - 1 + months;
",6,2,0,0,0,0,0,0,0,8,41,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,165,"        if (monthToUse >= 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,166,"            yearToUse = thisYear + (monthToUse / iMax);
",8,2,0,1,2,0,0,0,0,11,43,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,167,"            monthToUse = (monthToUse % iMax) + 1;
",6,2,0,1,2,0,0,0,0,9,37,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,169,"            yearToUse = thisYear + (monthToUse / iMax) - 1;
",8,3,0,1,2,0,0,0,0,12,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,170,"            monthToUse = Math.abs(monthToUse);
",2,0,0,1,2,0,6,0,0,9,34,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,171,"            int remMonthToUse = (int)(monthToUse % iMax);
",6,1,0,2,4,0,0,0,0,7,45,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,172,"            if (remMonthToUse == 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,173,"                remMonthToUse = iMax;
",4,0,0,0,0,0,0,0,0,5,21,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,175,"            monthToUse = iMax - remMonthToUse + 1;
",6,2,0,0,0,0,0,0,0,9,38,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,176,"            if (monthToUse == 1) {
",2,1,0,1,3,0,0,0,0,3,22,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,177,"                yearToUse += 1;
",2,0,0,0,0,0,0,0,0,3,15,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,181,"        if (yearToUse < iChronology.getMinYear() ||
",2,2,0,1,3,0,4,0,0,8,43,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,184,"            throw new IllegalArgumentException
",0,0,0,0,0,0,0,2,0,2,34,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,188,"        int i_yearToUse = (int)yearToUse;
",4,0,0,1,2,0,0,0,0,4,33,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,189,"        int i_monthToUse = (int)monthToUse;
",4,0,0,1,2,0,0,0,0,4,35,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,191,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);
",2,0,0,1,2,0,10,0,0,12,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,192,"        int maxDay = iChronology.getDaysInYearMonth(i_yearToUse, i_monthToUse);
",2,0,0,1,2,0,8,0,0,10,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,193,"        if (dayToUse > maxDay) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,194,"            dayToUse = maxDay;
",4,0,0,0,0,0,0,0,0,5,18,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,197,"        long datePart =
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,199,"        return datePart + timePart;
",4,1,0,0,0,1,0,0,0,5,27,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,206,"        if (valueToAdd == 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,207,"            return values;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,209,"        if (partial.size() > 0 && partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear()) && fieldIndex == 0) {
",2,4,0,5,11,0,14,0,0,20,111,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,211,"            int curMonth0 = partial.getValue(0) - 1;
",2,1,0,1,2,0,4,0,0,7,40,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,212,"            int newMonth = ((curMonth0 + (valueToAdd % 12) + 12) % 12) + 1;
",6,4,0,3,6,0,0,0,0,10,63,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,213,"            return set(partial, 0, values, newMonth);
",0,0,0,1,2,1,8,0,0,8,41,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,215,"        if (DateTimeUtils.isContiguous(partial)) {
",0,0,0,2,5,0,6,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,216,"            long instant = 0L;
",2,0,0,0,0,0,0,0,0,2,18,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,217,"            for (int i = 0, isize = partial.size(); i < isize; i++) {
",10,1,0,2,5,0,4,0,0,16,57,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,218,"                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
",2,0,1,4,8,0,14,0,0,21,80,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,220,"            instant = add(instant, valueToAdd);
",2,0,0,1,2,0,6,0,0,9,35,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,221,"            return iChronology.get(partial, instant);
",0,0,0,1,2,1,8,0,0,8,41,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,223,"            return super.add(partial, fieldIndex, values, valueToAdd);
",10,0,0,1,2,1,0,0,0,10,58,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,238,"        return set(instant, FieldUtils.getWrappedValue(get(instant), months, MIN, iMax));
",0,0,0,3,6,1,18,0,0,18,81,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,244,"            return -getDifference(subtrahendInstant, minuendInstant);
",0,0,0,1,2,1,6,0,0,7,57,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,260,"            int subtrahendDom = iChronology.getDayOfMonth
",2,0,0,0,0,0,4,0,0,6,45,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,262,"            if (subtrahendDom > minuendDom) {
",4,1,0,1,3,0,0,0,0,5,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,266,"                subtrahendInstant = iChronology.dayOfMonth().set(subtrahendInstant, minuendDom);
",2,0,0,2,4,0,10,0,0,13,80,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,277,"            difference--;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,306,"            thisDom = maxDom;
",4,0,0,0,0,0,0,0,0,5,17,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,315,"        return iChronology.years();
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,320,"        int thisYear = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,321,"        if (iChronology.isLeapYear(thisYear)) {
",0,0,0,2,5,0,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,322,"            return (iChronology.getMonthOfYear(instant, thisYear) == iLeapMonth);
",2,1,0,2,4,1,8,0,0,11,69,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,324,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,329,"        return isLeap(instant) ? 1 : 0;
",0,0,0,1,2,1,4,0,0,4,31,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,334,"        return iChronology.days();
",0,0,0,1,2,1,4,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,339,"        return MIN;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,344,"        return iMax;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,349,"        int year = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,350,"        int month = iChronology.getMonthOfYear(instant, year);
",2,0,0,1,2,0,8,0,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,351,"        return iChronology.getYearMonthMillis(year, month);
",0,0,0,1,2,1,8,0,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,356,"        return instant - roundFloor(instant);
",2,1,0,1,2,1,4,0,0,7,37,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,11,364,"        return iChronology.monthOfYear();
",0,0,0,1,2,1,4,0,0,4,33,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,11,118,"        if (minuendInstant < subtrahendInstant) {
",4,1,0,1,3,0,0,0,0,5,41,4,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,11,119,"            return -getDifferenceAsLong(subtrahendInstant, minuendInstant);
",0,0,0,1,2,1,6,0,0,7,63,6,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,11,122,"        long difference = (minuendInstant - subtrahendInstant) / iUnitMillis;
",8,2,0,1,2,0,0,0,0,10,69,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,11,123,"        if (add(subtrahendInstant, difference) < minuendInstant) {
",2,1,0,2,5,0,6,0,0,9,58,4,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,11,125,"                difference++;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,11,126,"            } while (add(subtrahendInstant, difference) <= minuendInstant);
",2,1,0,2,5,0,6,0,0,9,63,6,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,11,127,"            difference--;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,11,128,"        } else if (add(subtrahendInstant, difference) > minuendInstant) {
",2,1,0,2,6,0,6,0,0,9,65,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,11,130,"                difference--;
",2,0,0,0,0,0,0,0,0,3,13,9,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,11,131,"            } while (add(subtrahendInstant, difference) > minuendInstant);
",2,1,0,2,5,0,6,0,0,9,62,7,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,11,133,"        return difference;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,11,145,"        return iUnitMillis;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,52,"            throw new IllegalArgumentException(""The type must not be null"");
",0,0,0,1,2,0,0,2,0,4,64,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,62,"        return iType.getName();
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,94,"        return getAsText(get(instant), locale);
",0,0,0,2,4,1,8,0,0,8,39,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,106,"        return getAsText(instant, null);
",0,0,0,1,2,1,4,0,0,5,32,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,121,"        return getAsText(fieldValue, locale);
",0,0,0,1,2,1,6,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,136,"        return getAsText(partial, partial.get(getType()), locale);
",0,0,0,3,6,1,12,0,0,12,58,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,153,"        return Integer.toString(fieldValue);
",0,0,0,1,2,1,6,0,0,6,36,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,168,"        return getAsShortText(get(instant), locale);
",0,0,0,2,4,1,8,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,180,"        return getAsShortText(instant, null);
",0,0,0,1,2,1,4,0,0,5,37,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,195,"        return getAsShortText(fieldValue, locale);
",0,0,0,1,2,1,6,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,210,"        return getAsShortText(partial, partial.get(getType()), locale);
",0,0,0,3,6,1,12,0,0,12,63,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,227,"        return getAsText(fieldValue, locale);
",0,0,0,1,2,1,6,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,267,"        return getDurationField().add(instant, value);
",0,0,0,2,4,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,298,"        if (valueToAdd == 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,299,"            return values;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,304,"        DateTimeField nextField = null;
",2,0,0,0,0,0,0,2,0,4,31,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,306,"        while (valueToAdd > 0) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,307,"            int max = getMaximumValue(instant, values);
",2,0,0,1,2,0,6,0,0,8,43,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,308,"            long proposed = values[fieldIndex] + valueToAdd;
",4,1,1,1,2,0,0,0,0,9,48,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,309,"            if (proposed <= max) {
",4,1,0,1,3,0,0,0,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,310,"                values[fieldIndex] = (int) proposed;
",2,0,1,2,4,0,0,0,0,7,36,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,311,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,313,"            if (nextField == null) {
",2,1,0,1,3,0,0,0,0,3,24,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,314,"                if (fieldIndex == 0) {
",2,1,0,1,3,0,0,0,0,3,22,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,315,"                    throw new IllegalArgumentException(""Maximum value exceeded for add"");
",0,0,0,1,2,0,0,2,0,3,69,11,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,317,"                nextField = instant.getField(fieldIndex - 1);
",4,1,0,1,2,0,4,0,0,10,45,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,319,"                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {
",0,1,0,5,11,0,10,0,0,11,82,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,320,"                    throw new IllegalArgumentException(""Fields invalid for add"");
",0,0,0,1,2,0,0,2,0,3,61,11,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,323,"            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add
",4,2,1,2,4,0,0,0,0,11,74,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,324,"            values = nextField.add(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field
",4,1,0,1,2,0,8,0,0,14,90,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,325,"            values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero
",0,0,1,2,4,0,6,0,0,11,83,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,326,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,327,"        while (valueToAdd < 0) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,328,"            int min = getMinimumValue(instant, values);
",2,0,0,1,2,0,6,0,0,8,43,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,329,"            long proposed = values[fieldIndex] + valueToAdd;
",4,1,1,1,2,0,0,0,0,9,48,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,330,"            if (proposed >= min) {
",4,1,0,1,3,0,0,0,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,331,"                values[fieldIndex] = (int) proposed;
",2,0,1,2,4,0,0,0,0,7,36,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,332,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,334,"            if (nextField == null) {
",2,1,0,1,3,0,0,0,0,3,24,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,335,"                if (fieldIndex == 0) {
",2,1,0,1,3,0,0,0,0,3,22,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,336,"                    throw new IllegalArgumentException(""Maximum value exceeded for add"");
",0,0,0,1,2,0,0,2,0,3,69,11,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,338,"                nextField = instant.getField(fieldIndex - 1);
",4,1,0,1,2,0,4,0,0,10,45,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,339,"                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {
",0,1,0,5,11,0,10,0,0,11,82,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,340,"                    throw new IllegalArgumentException(""Fields invalid for add"");
",0,0,0,1,2,0,0,2,0,3,61,11,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,343,"            valueToAdd -= (min - 1) - values[fieldIndex];  // reduce the amount to add
",4,2,1,2,4,0,0,0,0,11,74,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,344,"            values = nextField.add(instant, fieldIndex - 1, values, -1);  // subtract 1 from next bigger field
",4,1,0,1,2,0,8,0,0,15,98,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,345,"            values[fieldIndex] = getMaximumValue(instant, values);  // reset this field to max value
",0,0,1,2,4,0,6,0,0,11,88,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,346,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,348,"        return set(instant, fieldIndex, values, values[fieldIndex]);  // adjusts smaller fields
",0,0,1,2,4,1,8,0,0,12,87,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,379,"        if (valueToAdd == 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,380,"            return values;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,385,"        DateTimeField nextField = null;
",2,0,0,0,0,0,0,2,0,4,31,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,387,"        while (valueToAdd > 0) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,388,"            int max = getMaximumValue(instant, values);
",2,0,0,1,2,0,6,0,0,8,43,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,389,"            long proposed = values[fieldIndex] + valueToAdd;
",4,1,1,1,2,0,0,0,0,9,48,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,390,"            if (proposed <= max) {
",4,1,0,1,3,0,0,0,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,391,"                values[fieldIndex] = (int) proposed;
",2,0,1,2,4,0,0,0,0,7,36,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,392,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,394,"            if (nextField == null) {
",2,1,0,1,3,0,0,0,0,3,24,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,395,"                if (fieldIndex == 0) {
",2,1,0,1,3,0,0,0,0,3,22,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,396,"                    valueToAdd -= (max + 1) - values[fieldIndex];
",4,2,1,2,4,0,0,0,0,11,45,10,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,397,"                    values[fieldIndex] = getMinimumValue(instant, values);
",0,0,1,2,4,0,6,0,0,11,54,10,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,398,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,400,"                nextField = instant.getField(fieldIndex - 1);
",4,1,0,1,2,0,4,0,0,10,45,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,402,"                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {
",0,1,0,5,11,0,10,0,0,11,82,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,403,"                    throw new IllegalArgumentException(""Fields invalid for add"");
",0,0,0,1,2,0,0,2,0,3,61,11,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,406,"            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add
",4,2,1,2,4,0,0,0,0,11,74,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,407,"            values = nextField.addWrapPartial(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field
",4,1,0,1,2,0,8,0,0,14,101,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,408,"            values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero
",0,0,1,2,4,0,6,0,0,11,83,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,409,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,410,"        while (valueToAdd < 0) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,411,"            int min = getMinimumValue(instant, values);
",2,0,0,1,2,0,6,0,0,8,43,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,412,"            long proposed = values[fieldIndex] + valueToAdd;
",4,1,1,1,2,0,0,0,0,9,48,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,413,"            if (proposed >= min) {
",4,1,0,1,3,0,0,0,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,414,"                values[fieldIndex] = (int) proposed;
",2,0,1,2,4,0,0,0,0,7,36,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,415,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,417,"            if (nextField == null) {
",2,1,0,1,3,0,0,0,0,3,24,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,418,"                if (fieldIndex == 0) {
",2,1,0,1,3,0,0,0,0,3,22,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,419,"                    valueToAdd -= (min - 1) - values[fieldIndex];
",4,2,1,2,4,0,0,0,0,11,45,10,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,420,"                    values[fieldIndex] = getMaximumValue(instant, values);
",0,0,1,2,4,0,6,0,0,11,54,10,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,421,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,423,"                nextField = instant.getField(fieldIndex - 1);
",4,1,0,1,2,0,4,0,0,10,45,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,424,"                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {
",0,1,0,5,11,0,10,0,0,11,82,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,425,"                    throw new IllegalArgumentException(""Fields invalid for add"");
",0,0,0,1,2,0,0,2,0,3,61,11,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,428,"            valueToAdd -= (min - 1) - values[fieldIndex];  // reduce the amount to add
",4,2,1,2,4,0,0,0,0,11,74,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,429,"            values = nextField.addWrapPartial(instant, fieldIndex - 1, values, -1);  // subtract 1 from next bigger field
",4,1,0,1,2,0,8,0,0,15,109,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,430,"            values[fieldIndex] = getMaximumValue(instant, values);  // reset this field to max value
",0,0,1,2,4,0,6,0,0,11,88,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,431,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,433,"        return set(instant, fieldIndex, values, values[fieldIndex]);  // adjusts smaller fields
",0,0,1,2,4,1,8,0,0,12,87,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,461,"        int current = get(instant);
",2,0,0,1,2,0,4,0,0,6,27,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,462,"        int wrapped = FieldUtils.getWrappedValue
",2,0,0,0,0,0,4,0,0,6,40,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,464,"        return set(instant, wrapped);
",0,0,0,1,2,1,6,0,0,6,29,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,495,"        int current = values[fieldIndex];
",2,0,1,1,2,0,0,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,496,"        int wrapped = FieldUtils.getWrappedValue
",2,0,0,0,0,0,4,0,0,6,40,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,498,"        return set(instant, fieldIndex, values, wrapped);  // adjusts smaller fields
",0,0,0,1,2,1,10,0,0,10,76,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,522,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,75,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,545,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,81,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,585,"        FieldUtils.verifyValueBounds(this, newValue, getMinimumValue(partial, values), getMaximumValue(partial, values));
",0,0,0,3,6,0,18,0,0,18,113,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,586,"        values[fieldIndex] = newValue;
",2,0,1,1,2,0,0,0,0,7,30,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,589,"        for (int i = fieldIndex + 1; i < partial.size(); i++) {
",8,2,0,2,5,0,4,0,0,15,55,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,590,"            DateTimeField field = partial.getField(i);
",2,0,0,1,2,0,6,2,0,10,42,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,591,"            if (values[i] > field.getMaximumValue(partial, values)) {
",0,1,1,3,7,0,8,0,0,13,57,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,592,"                values[i] = field.getMaximumValue(partial, values);
",0,0,1,2,4,0,8,0,0,13,51,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,594,"            if (values[i] < field.getMinimumValue(partial, values)) {
",0,1,1,3,7,0,8,0,0,13,57,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,595,"                values[i] = field.getMinimumValue(partial, values);
",0,0,1,2,4,0,8,0,0,13,51,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,598,"        return values;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,618,"        int value = convertText(text, locale);
",2,0,0,1,2,0,6,0,0,8,38,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,619,"        return set(instant, value);
",0,0,0,1,2,1,6,0,0,6,27,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,635,"        return set(instant, text, null);
",0,0,0,1,2,1,6,0,0,7,32,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,654,"        int value = convertText(text, locale);
",2,0,0,1,2,0,6,0,0,8,38,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,655,"        return set(instant, fieldIndex, values, value);
",0,0,0,1,2,1,10,0,0,10,47,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,668,"            return Integer.parseInt(text);
",0,0,0,1,2,1,6,0,0,6,30,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,669,"        } catch (NumberFormatException ex) {
",2,0,0,1,4,0,0,2,0,4,36,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,670,"            throw new IllegalFieldValueException(getType(), text);
",2,0,0,2,4,0,2,2,0,6,54,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,704,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,716,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,726,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,746,"        return getMinimumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,758,"        return getMinimumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,772,"        return getMinimumValue(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,792,"        return getMaximumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,804,"        return getMaximumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,818,"        return getMaximumValue(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,829,"        int max = getMaximumValue();
",2,0,0,1,2,0,2,0,0,4,28,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,830,"        if (max >= 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,831,"            if (max < 10) {
",2,1,0,1,3,0,0,0,0,3,15,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,832,"                return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,833,"            } else if (max < 100) {
",2,1,0,1,4,0,0,0,0,3,23,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,834,"                return 2;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,835,"            } else if (max < 1000) {
",2,1,0,1,4,0,0,0,0,3,24,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,836,"                return 3;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,839,"        return Integer.toString(max).length();
",0,0,0,2,4,1,8,0,0,8,38,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,850,"        return getMaximumTextLength(locale);
",0,0,0,1,2,1,4,0,0,4,36,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,886,"        long newInstant = roundFloor(instant);
",2,0,0,1,2,0,4,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,887,"        if (newInstant != instant) {
",4,1,0,1,3,0,0,0,0,5,28,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,888,"            instant = add(newInstant, 1);
",2,0,0,1,2,0,4,0,0,7,29,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,890,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,903,"        long floor = roundFloor(instant);
",2,0,0,1,2,0,4,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,904,"        long ceiling = roundCeiling(instant);
",2,0,0,1,2,0,4,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,906,"        long diffFromFloor = instant - floor;
",6,1,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,907,"        long diffToCeiling = ceiling - instant;
",6,1,0,0,0,0,0,0,0,7,39,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,909,"        if (diffFromFloor <= diffToCeiling) {
",4,1,0,1,3,0,0,0,0,5,37,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,911,"            return floor;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,913,"            return ceiling;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,927,"        long floor = roundFloor(instant);
",2,0,0,1,2,0,4,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,928,"        long ceiling = roundCeiling(instant);
",2,0,0,1,2,0,4,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,930,"        long diffFromFloor = instant - floor;
",6,1,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,931,"        long diffToCeiling = ceiling - instant;
",6,1,0,0,0,0,0,0,0,7,39,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,933,"        if (diffToCeiling <= diffFromFloor) {
",4,1,0,1,3,0,0,0,0,5,37,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,935,"            return ceiling;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,937,"            return floor;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,955,"        long floor = roundFloor(instant);
",2,0,0,1,2,0,4,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,956,"        long ceiling = roundCeiling(instant);
",2,0,0,1,2,0,4,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,958,"        long diffFromFloor = instant - floor;
",6,1,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,959,"        long diffToCeiling = ceiling - instant;
",6,1,0,0,0,0,0,0,0,7,39,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,961,"        if (diffFromFloor < diffToCeiling) {
",4,1,0,1,3,0,0,0,0,5,36,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,963,"            return floor;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,964,"        } else if (diffToCeiling < diffFromFloor) {
",4,1,0,1,4,0,0,0,0,5,43,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,966,"            return ceiling;
",2,0,0,0,0,1,0,0,0,2,15,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,970,"            if ((get(ceiling) & 1) == 0) {
",0,2,0,3,7,0,4,0,0,6,30,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,971,"                return ceiling;
",2,0,0,0,0,1,0,0,0,2,15,9,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,973,"            return floor;
",2,0,0,0,0,1,0,0,0,2,13,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,994,"        return instant - roundFloor(instant);
",2,1,0,1,2,1,4,0,0,7,37,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,11,1003,"        return ""DateTimeField["" + getName() + ']';
",0,1,0,2,4,1,2,0,0,5,42,4,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,11,156,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,11,160,"            return iUnitMillis;
",2,0,0,0,0,1,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,11,164,"            return ImpreciseDateTimeField.this
",2,0,0,0,0,1,0,0,0,2,34,7,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,11,169,"            return ImpreciseDateTimeField.this
",2,0,0,0,0,1,0,0,0,2,34,7,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,11,174,"            return ImpreciseDateTimeField.this.add(instant, value) - instant;
",4,1,0,1,2,1,6,0,0,11,65,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,11,178,"            return ImpreciseDateTimeField.this.add(instant, value) - instant;
",4,1,0,1,2,1,6,0,0,11,65,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,11,186,"            return ImpreciseDateTimeField.this.add(instant, value);
",2,0,0,1,2,1,6,0,0,8,55,6,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,11,195,"            return ImpreciseDateTimeField.this
",2,0,0,0,0,1,0,0,0,2,34,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,11,49,"            throw new IllegalArgumentException(""The type must not be null"");
",0,0,0,1,2,0,0,2,0,4,64,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,11,55,"        return iType;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,11,59,"        return iType.getName();
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,11,79,"        return FieldUtils.safeToInt(getValueAsLong(duration));
",0,0,0,2,4,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,11,91,"        return duration / getUnitMillis();
",2,1,0,1,2,1,2,0,0,5,34,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,11,111,"        return FieldUtils.safeToInt(getValueAsLong(duration, instant));
",0,0,0,2,4,1,10,0,0,10,63,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,11,123,"        return value * getUnitMillis();  // safe
",2,1,0,1,2,1,2,0,0,5,40,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,11,135,"        return FieldUtils.safeMultiply(value, getUnitMillis());
",0,0,0,2,4,1,8,0,0,8,55,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,11,146,"        long otherMillis = otherField.getUnitMillis();
",2,0,0,1,2,0,4,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,11,147,"        long thisMillis = getUnitMillis();
",2,0,0,1,2,0,2,0,0,4,34,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,11,149,"        if (thisMillis == otherMillis) {
",4,1,0,1,3,0,0,0,0,5,32,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,11,150,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,11,152,"        if (thisMillis < otherMillis) {
",4,1,0,1,3,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,11,153,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,11,155,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,11,165,"        return ""DurationField["" + getName() + ']';
",0,1,0,2,4,1,2,0,0,5,42,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,11,38,"public abstract class BaseDurationField extends DurationField implements Serializable {
",2,0,0,0,1,2,0,4,0,8,87,1,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,134,"            throw new IllegalArgumentException
",0,0,0,0,0,0,0,2,0,2,34,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,144,"            return base.getZone();
",0,0,0,1,2,1,4,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,153,"        if ((base = getBase()) != null) {
",2,1,0,3,7,0,2,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,154,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);
",0,0,0,1,2,1,12,0,0,12,74,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,157,"        FieldUtils.verifyValueBounds
",0,0,0,0,0,0,4,0,0,4,28,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,159,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;
",2,1,0,1,2,1,8,0,0,11,74,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,167,"        if ((base = getBase()) != null) {
",2,1,0,3,7,0,2,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,168,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,
",0,0,0,0,1,1,10,0,0,10,60,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,172,"        FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);
",0,0,0,2,4,0,10,0,0,10,78,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,173,"        FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);
",0,0,0,2,4,0,10,0,0,10,84,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,174,"        FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);
",0,0,0,2,4,0,10,0,0,10,88,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,175,"        FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);
",0,0,0,2,4,0,10,0,0,10,89,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,177,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth)
",0,0,0,1,2,1,8,0,0,8,59,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,185,"        return iMinDaysInFirstWeek;
",2,0,0,0,0,1,0,0,0,2,27,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,196,"        return super.equals(obj);
",4,0,0,1,2,1,0,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,206,"        return getClass().getName().hashCode() * 11 + getZone().hashCode() + getMinimumDaysInFirstWeek();
",0,3,0,6,12,1,12,0,0,15,97,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,217,"        StringBuilder sb = new StringBuilder(60);
",2,0,0,1,2,0,0,4,0,6,41,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,218,"        String name = getClass().getName();
",2,0,0,2,4,0,4,2,0,8,35,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,219,"        int index = name.lastIndexOf('.');
",2,0,0,1,2,0,4,0,0,7,34,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,220,"        if (index >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,221,"            name = name.substring(index + 1);
",4,1,0,1,2,0,4,0,0,10,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,223,"        sb.append(name);
",0,0,0,1,2,0,6,0,0,6,16,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,224,"        sb.append('[');
",0,0,0,1,3,0,4,0,0,5,15,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,225,"        DateTimeZone zone = getZone();
",2,0,0,1,2,0,2,2,0,6,30,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,226,"        if (zone != null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,227,"            sb.append(zone.getID());
",0,0,0,2,4,0,8,0,0,8,24,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,229,"        if (getMinimumDaysInFirstWeek() != 4) {
",0,1,0,2,5,0,2,0,0,3,39,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,230,"            sb.append("",mdfw="");
",0,0,0,1,2,0,4,0,0,5,20,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,231,"            sb.append(getMinimumDaysInFirstWeek());
",0,0,0,2,4,0,6,0,0,6,39,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,233,"        sb.append(']');
",0,0,0,1,3,0,4,0,0,5,15,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,234,"        return sb.toString();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,307,"        return 366;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,317,"        return isLeapYear(year) ? 366 : 365;
",0,0,0,1,2,1,4,0,0,4,36,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,327,"        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,328,"        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);
",4,1,0,1,2,0,2,0,0,7,59,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,329,"        return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);
",8,2,0,3,6,1,0,0,0,10,89,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,339,"        long jan1millis = getYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,340,"        int jan1dayOfWeek = getDayOfWeek(jan1millis);
",2,0,0,1,2,0,4,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,342,"        if (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {
",4,2,0,2,5,0,0,0,0,6,48,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,344,"            return jan1millis + (8 - jan1dayOfWeek)
",4,2,0,1,2,1,0,0,0,6,39,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,348,"            return jan1millis - (jan1dayOfWeek - 1)
",4,2,0,1,2,1,0,0,0,6,39,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,414,"            if (isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,4,23,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,415,"                oneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;
",6,1,0,0,0,0,0,0,0,8,50,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,417,"                oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;
",6,1,0,0,0,0,0,0,0,8,50,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,420,"            yearStart += oneYear;
",4,0,0,0,0,0,0,0,0,5,21,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,422,"            if (yearStart <= instant) {
",4,1,0,1,3,0,0,0,0,5,27,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,424,"                year++;
",2,0,0,0,0,0,0,0,0,3,7,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,435,"        return getMonthOfYear(millis, getYear(millis));
",0,0,0,2,4,1,8,0,0,8,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,477,"        return getDayOfYear(instant, getYear(instant));
",0,0,0,2,4,1,8,0,0,8,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,493,"        int year = getYear(instant);
",2,0,0,1,2,0,4,0,0,6,28,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,494,"        int week = getWeekOfWeekyear(instant, year);
",2,0,0,1,2,0,6,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,495,"        if (week == 1) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,496,"            return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);
",6,1,0,1,2,1,2,0,0,9,60,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,497,"        } else if (week > 51) {
",2,1,0,1,4,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,498,"            return getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));
",6,2,0,2,4,1,2,0,0,10,66,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,500,"            return year;
",2,0,0,0,0,1,0,0,0,2,12,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,508,"        return getWeekOfWeekyear(instant, getYear(instant));
",0,0,0,2,4,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,516,"        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,517,"        if (instant < firstWeekMillis1) {
",4,1,0,1,3,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,518,"            return getWeeksInYear(year - 1);
",2,1,0,1,2,1,2,0,0,5,32,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,520,"        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);
",4,1,0,1,2,0,2,0,0,7,59,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,521,"        if (instant >= firstWeekMillis2) {
",4,1,0,1,3,0,0,0,0,5,34,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,522,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,524,"        return (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;
",8,3,0,3,6,1,0,0,0,11,84,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,535,"            daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;
",8,1,0,0,0,0,0,0,0,10,63,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,544,"        return 1 + (int) ((daysSince19700101 + 3) % 7);
",2,3,0,3,6,1,0,0,0,5,47,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,565,"        return 31;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,575,"        int thisYear = getYear(instant);
",2,0,0,1,2,0,4,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,576,"        int thisMonth = getMonthOfYear(instant, thisYear);
",2,0,0,1,2,0,6,0,0,8,50,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,577,"        return getDaysInYearMonth(thisYear, thisMonth);
",0,0,0,1,2,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,590,"        return getDaysInMonthMax(instant);
",0,0,0,1,2,1,4,0,0,4,34,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,603,"        FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());
",0,0,0,4,8,0,14,0,0,14,89,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,604,"        FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));
",0,0,0,3,6,0,14,0,0,14,97,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,605,"        FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));
",0,0,0,3,6,0,16,0,0,16,115,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,606,"        return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);
",0,0,0,1,2,1,8,0,0,8,60,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,682,"        return getMaxMonth();
",0,0,0,1,2,1,2,0,0,2,21,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,11,51,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,11,60,"        if (iChronology.getYear(instant) <= 0) {
",0,1,0,2,5,0,6,0,0,7,40,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,11,61,"            return DateTimeConstants.BCE;
",4,0,0,0,0,1,0,0,0,4,29,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,11,63,"            return DateTimeConstants.CE;
",4,0,0,0,0,1,0,0,0,4,28,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,11,68,"        return GJLocaleSymbols.forLocale(locale).eraValueToText(fieldValue);
",0,0,0,2,4,1,10,0,0,10,68,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,11,80,"        FieldUtils.verifyValueBounds(this, era, DateTimeConstants.BCE, DateTimeConstants.CE);
",8,0,0,1,2,0,6,0,0,14,85,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,11,82,"        int oldEra = get(instant);
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,11,83,"        if (oldEra != era) {
",4,1,0,1,3,0,0,0,0,5,20,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,11,84,"            int year = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,40,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,11,85,"            return iChronology.setYear(instant, -year);
",2,0,0,1,2,1,6,0,0,9,43,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,11,87,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,11,92,"        return set(instant, GJLocaleSymbols.forLocale(locale).eraTextToValue(text));
",0,0,0,3,6,1,14,0,0,14,76,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,11,96,"        if (get(instant) == DateTimeConstants.CE) {
",4,1,0,2,5,0,4,0,0,9,43,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,11,97,"            return iChronology.setYear(0, 1);
",0,0,0,1,2,1,4,0,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,11,99,"            return Long.MIN_VALUE;
",4,0,0,0,0,1,0,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,11,104,"        if (get(instant) == DateTimeConstants.BCE) {
",4,1,0,2,5,0,4,0,0,9,44,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,11,105,"            return iChronology.setYear(0, 1);
",0,0,0,1,2,1,4,0,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,11,107,"            return Long.MAX_VALUE;
",4,0,0,0,0,1,0,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,11,113,"        return roundFloor(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,11,118,"        return roundFloor(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,11,123,"        return roundFloor(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,11,127,"        return UnsupportedDurationField.getInstance(DurationFieldType.eras());
",0,0,0,2,4,1,8,0,0,8,70,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,11,131,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,11,135,"        return DateTimeConstants.BCE;
",4,0,0,0,0,1,0,0,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,11,139,"        return DateTimeConstants.CE;
",4,0,0,0,0,1,0,0,0,4,28,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,11,143,"        return GJLocaleSymbols.forLocale(locale).getEraMaxTextLength();
",0,0,0,2,4,1,8,0,0,8,63,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,11,150,"        return iChronology.era();
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,49,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,60,"        return iChronology.getWeekyear(instant);
",0,0,0,1,2,1,6,0,0,6,40,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,72,"        if (years == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,73,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,75,"        return set(instant, get(instant) + years);
",2,1,0,2,4,1,8,0,0,11,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,79,"        return add(instant, FieldUtils.safeToInt(value));
",0,0,0,2,4,1,10,0,0,10,49,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,92,"        return add(instant, years);
",0,0,0,1,2,1,6,0,0,6,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,96,"        if (minuendInstant < subtrahendInstant) {
",4,1,0,1,3,0,0,0,0,5,41,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,97,"            return -getDifference(subtrahendInstant, minuendInstant);
",0,0,0,1,2,1,6,0,0,7,57,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,100,"        int minuendWeekyear = get(minuendInstant);
",2,0,0,1,2,0,4,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,101,"        int subtrahendWeekyear = get(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,103,"        long minuendRem = remainder(minuendInstant);
",2,0,0,1,2,0,4,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,104,"        long subtrahendRem = remainder(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,50,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,107,"        if (subtrahendRem >= WEEK_53 && iChronology.getWeeksInYear(minuendWeekyear) <= 52) {
",4,3,0,2,5,0,6,0,0,13,84,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,108,"            subtrahendRem -= DateTimeConstants.MILLIS_PER_WEEK;
",6,0,0,0,0,0,0,0,0,7,51,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,111,"        int difference = minuendWeekyear - subtrahendWeekyear;
",6,1,0,0,0,0,0,0,0,7,54,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,112,"        if (minuendRem < subtrahendRem) {
",4,1,0,1,3,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,113,"            difference--;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,115,"        return difference;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,128,"        FieldUtils.verifyValueBounds(this, Math.abs(year),
",0,0,0,1,3,0,10,0,0,10,50,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,133,"        int thisWeekyear = get( instant );
",2,0,0,1,2,0,4,0,0,6,34,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,134,"        if ( thisWeekyear == year ) {
",4,1,0,1,3,0,0,0,0,5,29,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,135,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,140,"        int thisDow = iChronology.getDayOfWeek(instant);
",2,0,0,1,2,0,6,0,0,8,48,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,144,"        int weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );
",2,0,0,1,2,0,6,0,0,8,65,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,145,"        int weeksInToYear = iChronology.getWeeksInYear( year );
",2,0,0,1,2,0,6,0,0,8,55,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,146,"        int maxOutWeeks = (weeksInToYear < weeksInFromYear) ?
",6,1,0,1,2,0,0,0,0,7,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,154,"        int setToWeek = iChronology.getWeekOfWeekyear(instant);
",2,0,0,1,2,0,6,0,0,8,55,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,155,"        if ( setToWeek > maxOutWeeks ) {
",4,1,0,1,3,0,0,0,0,5,32,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,156,"            setToWeek = maxOutWeeks;
",4,0,0,0,0,0,0,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,162,"        long workInstant = instant; // Get a copy
",4,0,0,0,0,0,0,0,0,4,41,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,168,"        workInstant = iChronology.setYear( workInstant, year );
",2,0,0,1,2,0,8,0,0,11,55,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,173,"        int workWoyYear = get( workInstant );
",2,0,0,1,2,0,4,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,179,"        if ( workWoyYear < year ) {
",4,1,0,1,3,0,0,0,0,5,27,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,180,"            workInstant += DateTimeConstants.MILLIS_PER_WEEK;
",6,0,0,0,0,0,0,0,0,7,49,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,181,"        } else if ( workWoyYear > year ) {
",4,1,0,1,4,0,0,0,0,5,34,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,182,"            workInstant -= DateTimeConstants.MILLIS_PER_WEEK;
",6,0,0,0,0,0,0,0,0,7,49,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,189,"        int currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);
",2,0,0,1,2,0,6,0,0,8,64,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,191,"        workInstant = workInstant + (setToWeek - currentWoyWeek)
",8,2,0,1,2,0,0,0,0,11,56,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,200,"        workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );
",2,0,0,2,4,0,10,0,0,13,66,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,204,"        return workInstant;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,208,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,212,"        return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) > 52;
",0,1,0,2,4,1,10,0,0,11,73,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,216,"        return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) - 52;
",0,1,0,2,4,1,10,0,0,11,73,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,220,"        return iChronology.weeks();
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,224,"        return iChronology.getMinYear();
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,228,"        return iChronology.getMaxYear();
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,234,"        instant = iChronology.weekOfWeekyear().roundFloor(instant);
",2,0,0,2,4,0,8,0,0,11,59,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,235,"        int wow = iChronology.getWeekOfWeekyear(instant);
",2,0,0,1,2,0,6,0,0,8,49,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,236,"        if (wow > 1) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,237,"            instant -= ((long) DateTimeConstants.MILLIS_PER_WEEK) * (wow - 1);
",8,2,0,3,6,0,0,0,0,11,66,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,239,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,243,"        return instant - roundFloor(instant);
",2,1,0,1,2,1,4,0,0,7,37,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,11,250,"        return iChronology.weekyear();
",0,0,0,1,2,1,4,0,0,4,30,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,129,"        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];
",2,1,1,1,2,1,0,0,0,5,43,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,158,"                if (!isLeapYear(minuendYear)) {
",0,0,0,2,5,0,4,0,0,5,31,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,159,"                    subtrahendRem -= DateTimeConstants.MILLIS_PER_DAY;
",6,0,0,0,0,0,0,0,0,7,50,10,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,11,162,"                minuendRem -= DateTimeConstants.MILLIS_PER_DAY;
",6,0,0,0,0,0,0,0,0,7,47,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,50,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,67,"        return add(instant, FieldUtils.safeToInt(years));
",0,0,0,2,4,1,10,0,0,10,49,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,71,"        if (years == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,72,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,75,"        int thisYear = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,76,"        int wrappedYear = FieldUtils.getWrappedValue
",2,0,0,0,0,0,4,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,78,"        return set(instant, wrappedYear);
",0,0,0,1,2,1,6,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,89,"            return -iChronology.getYearDifference(subtrahendInstant, minuendInstant);
",0,0,0,1,2,1,8,0,0,9,73,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,95,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,99,"        return iChronology.isLeapYear(get(instant));
",0,0,0,2,4,1,8,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,103,"        if (iChronology.isLeapYear(get(instant))) {
",0,0,0,3,7,0,8,0,0,8,43,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,104,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,106,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,111,"        return iChronology.days();
",0,0,0,1,2,1,4,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,115,"        return iChronology.getMinYear();
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,123,"        return iChronology.getYearMillis(get(instant));
",0,0,0,2,4,1,8,0,0,8,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,127,"        int year = get(instant);
",2,0,0,1,2,0,4,0,0,6,24,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,128,"        long yearStartMillis = iChronology.getYearMillis(year);
",2,0,0,1,2,0,6,0,0,8,55,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,129,"        if (instant != yearStartMillis) {
",4,1,0,1,3,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,131,"            instant = iChronology.getYearMillis(year + 1);
",4,1,0,1,2,0,4,0,0,10,46,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,133,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,137,"        return instant - roundFloor(instant);
",2,1,0,1,2,1,4,0,0,7,37,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,11,144,"        return iChronology.year();
",0,0,0,1,2,1,4,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,11,479,"                    eras = f;
",4,0,0,0,0,0,0,0,0,5,9,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,11,45,"        int year = getWrappedField().get(instant);
",2,0,0,2,4,0,6,0,0,8,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,11,46,"        if (year <= 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,11,47,"            year = 1 - year;
",4,1,0,0,0,0,0,0,0,6,16,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,11,49,"        return year;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,11,53,"        return getWrappedField().add(instant, years);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,11,57,"        return getWrappedField().add(instant, years);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,11,61,"        return getWrappedField().addWrapField(instant, years);
",0,0,0,2,4,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,11,65,"        return getWrappedField().addWrapField(instant, fieldIndex, values, years);
",0,0,0,2,4,1,12,0,0,12,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,11,69,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,11,73,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,80,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,11,85,"        FieldUtils.verifyValueBounds(this, year, 1, getMaximumValue());
",0,0,0,2,4,0,8,0,0,8,63,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,11,86,"        if (iChronology.getYear(instant) <= 0) {
",0,1,0,2,5,0,6,0,0,7,40,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,11,87,"            year = 1 - year;
",4,1,0,0,0,0,0,0,0,6,16,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,11,89,"        return super.set(instant, year);
",6,0,0,1,2,1,0,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,11,101,"        return getWrappedField().roundFloor(instant);
",0,0,0,2,4,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,11,105,"        return getWrappedField().roundCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,11,109,"        return getWrappedField().remainder(instant);
",0,0,0,2,4,1,6,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,11,116,"        return iChronology.yearOfEra();
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,11,56,"            throw new IllegalArgumentException(""The field must not be null"");
",0,0,0,1,2,0,0,2,0,4,65,6,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,11,59,"            throw new IllegalArgumentException(""The field must be supported"");
",0,0,0,1,2,0,0,2,0,3,66,7,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,11,74,"        return iField.isLenient();
",0,0,0,1,2,1,4,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,11,78,"        return iField.get(instant);
",0,0,0,1,2,1,6,0,0,6,27,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,11,82,"        return iField.set(instant, value);
",0,0,0,1,2,1,8,0,0,8,34,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,11,90,"        return iField.getRangeDurationField();
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,11,94,"        return iField.getMinimumValue();
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,11,98,"        return iField.getMaximumValue();
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,11,102,"        return iField.roundFloor(instant);
",0,0,0,1,2,1,6,0,0,6,34,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,11,51,"        return iChronology.months();
",0,0,0,1,2,1,4,0,0,4,28,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,11,59,"        return iChronology.getDaysInMonthMax();
",0,0,0,1,2,1,4,0,0,4,39,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,11,63,"        return iChronology.getDaysInMonthMax(instant);
",0,0,0,1,2,1,6,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,11,67,"        if (partial.isSupported(DateTimeFieldType.monthOfYear())) {
",0,0,0,3,7,0,8,0,0,8,59,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,11,68,"            int month = partial.get(DateTimeFieldType.monthOfYear());
",2,0,0,2,4,0,8,0,0,10,57,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,11,69,"            if (partial.isSupported(DateTimeFieldType.year())) {
",0,0,0,3,7,0,8,0,0,8,52,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,11,70,"                int year = partial.get(DateTimeFieldType.year());
",2,0,0,2,4,0,8,0,0,10,49,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,11,71,"                return iChronology.getDaysInYearMonth(year, month);
",0,0,0,1,2,1,8,0,0,8,51,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,11,73,"            return iChronology.getDaysInMonthMax(month);
",0,0,0,1,2,1,6,0,0,6,44,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,11,75,"        return getMaximumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,11,79,"        int size = partial.size();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,11,80,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,11,81,"            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {
",0,1,0,3,7,0,10,0,0,11,65,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,11,82,"                int month = values[i];
",2,0,1,1,2,0,0,0,0,6,22,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,11,83,"                for (int j = 0; j < size; j++) {
",8,1,0,1,3,0,0,0,0,10,32,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,11,84,"                    if (partial.getFieldType(j) == DateTimeFieldType.year()) {
",0,1,0,3,7,0,10,0,0,11,58,10,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,11,85,"                        int year = values[j];
",2,0,1,1,2,0,0,0,0,6,21,13,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,11,86,"                        return iChronology.getDaysInYearMonth(year, month);
",0,0,0,1,2,1,8,0,0,8,51,13,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,11,89,"                return iChronology.getDaysInMonthMax(month);
",0,0,0,1,2,1,6,0,0,6,44,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,11,92,"        return getMaximumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,11,103,"        return iChronology.dayOfMonth();
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,11,51,"            throw new IllegalArgumentException(""Unit duration field must be precise"");
",0,0,0,1,2,0,0,2,0,3,74,7,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,11,56,"            throw new IllegalArgumentException(""The unit milliseconds must be at least 1"");
",0,0,0,1,2,0,0,2,0,3,79,7,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,11,66,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,11,92,"        if (instant >= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,11,93,"            return instant - instant % iUnitMillis;
",6,2,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,11,95,"            instant += 1;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,11,96,"            return instant - instant % iUnitMillis - iUnitMillis;
",8,3,0,0,0,1,0,0,0,11,53,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,11,109,"        if (instant > 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,11,110,"            instant -= 1;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,11,111,"            return instant - instant % iUnitMillis + iUnitMillis;
",8,3,0,0,0,1,0,0,0,11,53,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,11,113,"            return instant - instant % iUnitMillis;
",6,2,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,11,126,"        if (instant >= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,11,127,"            return instant % iUnitMillis;
",4,1,0,0,0,1,0,0,0,5,29,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,11,129,"            return (instant + 1) % iUnitMillis + iUnitMillis - 1;
",6,4,0,1,2,1,0,0,0,10,53,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,11,163,"        return getMaximumValue(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,754,"            return GJLocaleSymbols.forLocale(locale).halfdayValueToText(fieldValue);
",0,0,0,2,4,1,10,0,0,10,72,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,758,"            return set(millis, GJLocaleSymbols.forLocale(locale).halfdayTextToValue(text));
",0,0,0,3,6,1,14,0,0,14,79,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,11,762,"            return GJLocaleSymbols.forLocale(locale).getHalfdayMaxTextLength();
",0,0,0,2,4,1,8,0,0,8,67,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,11,60,"            throw new IllegalArgumentException(""Range duration field must be precise"");
",0,0,0,1,2,0,0,2,0,3,75,7,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,11,66,"            throw new IllegalArgumentException(""The effective range must be at least 2"");
",0,0,0,1,2,0,0,2,0,3,77,7,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,11,80,"            return (int) ((instant / getUnitMillis()) % iRange);
",4,2,0,4,8,1,2,0,0,8,52,8,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,11,95,"        int thisValue = get(instant);
",2,0,0,1,2,0,4,0,0,6,29,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,11,96,"        int wrappedValue = FieldUtils.getWrappedValue
",2,0,0,0,0,0,4,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,11,99,"        return instant + (wrappedValue - thisValue) * getUnitMillis();
",6,3,0,2,4,1,2,0,0,11,62,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,11,122,"        return iRangeField;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,11,143,"        return iRange;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,281,"            super(field.getType());
",0,0,0,2,4,0,4,0,0,4,23,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,282,"            if (!field.isSupported()) {
",0,0,0,2,5,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,283,"                throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,9,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,285,"            iField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,286,"            iTimeField = useTimeArithmetic(field);
",2,0,0,1,2,0,4,0,0,7,38,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,287,"            iZone = zone;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,288,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,291,"            return iTimeField ? iField.isPrecise() : iField.isPrecise() && this.iZone.isFixed();
",4,1,0,3,6,1,10,0,0,15,84,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,295,"            return iField.getUnitMillis();
",0,0,0,1,2,1,4,0,0,4,30,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,299,"            return iField.getValue(duration, addOffset(instant));
",0,0,0,2,4,1,10,0,0,10,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,303,"            return iField.getValueAsLong(duration, addOffset(instant));
",0,0,0,2,4,1,10,0,0,10,59,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,307,"            return iField.getMillis(value, addOffset(instant));
",0,0,0,2,4,1,10,0,0,10,51,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,311,"            return iField.getMillis(value, addOffset(instant));
",0,0,0,2,4,1,10,0,0,10,51,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,315,"            int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,316,"            instant = iField.add(instant + offset, value);
",6,1,0,1,2,0,6,0,0,14,46,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,317,"            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));
",6,1,0,2,4,1,4,0,0,11,79,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,321,"            int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,322,"            instant = iField.add(instant + offset, value);
",6,1,0,1,2,0,6,0,0,14,46,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,323,"            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));
",6,1,0,2,4,1,4,0,0,11,79,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,327,"            int offset = getOffsetToAdd(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,328,"            return iField.getDifference
",0,0,0,0,0,1,4,0,0,4,27,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,334,"            int offset = getOffsetToAdd(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,335,"            return iField.getDifferenceAsLong
",0,0,0,0,0,1,4,0,0,4,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,341,"            int offset = this.iZone.getOffset(instant);
",4,0,0,1,2,0,4,0,0,8,43,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,342,"            long sum = instant + offset;
",6,1,0,0,0,0,0,0,0,7,28,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,344,"            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {
",8,5,0,3,7,0,0,0,0,13,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,345,"                throw new ArithmeticException(""Adding time zone offset caused overflow"");
",0,0,0,1,2,0,0,2,0,3,73,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,347,"            return offset;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,351,"            int offset = this.iZone.getOffsetFromLocal(instant);
",4,0,0,1,2,0,4,0,0,8,52,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,352,"            long diff = instant - offset;
",6,1,0,0,0,0,0,0,0,7,29,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,354,"            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {
",8,5,0,3,7,0,0,0,0,13,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,355,"                throw new ArithmeticException(""Subtracting time zone offset caused overflow"");
",0,0,0,1,2,0,0,2,0,3,78,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,357,"            return offset;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,361,"            return iZone.convertUTCToLocal(instant);
",0,0,0,1,2,1,6,0,0,6,40,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,81,"        super(base, zone);
",4,0,0,1,2,0,0,0,0,4,18,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,82,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,55,"        if (base == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,56,"            throw new IllegalArgumentException(""Must supply a chronology"");
",0,0,0,1,2,0,0,2,0,3,63,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,58,"        base = base.withUTC();
",2,0,0,1,2,0,4,0,0,7,22,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,59,"        if (base == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,60,"            throw new IllegalArgumentException(""UTC chronology must not be null"");
",0,0,0,1,2,0,0,2,0,4,70,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,62,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,63,"            throw new IllegalArgumentException(""DateTimeZone must not be null"");
",0,0,0,1,2,0,0,2,0,4,68,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,65,"        return new ZonedChronology(base, zone);
",4,0,0,1,2,1,0,2,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,71,"        return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;
",6,4,0,1,2,1,4,0,0,14,87,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,85,"        return (DateTimeZone)getParam();
",0,0,0,2,4,1,2,2,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,89,"        return getBase();
",0,0,0,1,2,1,2,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,93,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,94,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,96,"        if (zone == getParam()) {
",2,1,0,2,5,0,2,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,97,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,99,"        if (zone == DateTimeZone.UTC) {
",6,1,0,1,3,0,0,0,0,7,31,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,100,"            return getBase();
",0,0,0,1,2,1,2,0,0,2,17,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,102,"        return new ZonedChronology(getBase(), zone);
",2,0,0,2,4,1,2,2,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,109,"        return localToUTC(getBase().getDateTimeMillis
",0,0,0,1,3,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,118,"        return localToUTC(getBase().getDateTimeMillis
",0,0,0,1,3,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,128,"        return localToUTC(getBase().getDateTimeMillis
",0,0,0,1,3,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,138,"        DateTimeZone zone = getZone();
",2,0,0,1,2,0,2,2,0,6,30,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,139,"        int offset = zone.getOffsetFromLocal(localInstant);
",2,0,0,1,2,0,6,0,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,140,"        localInstant -= offset;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,141,"        if (offset != zone.getOffset(localInstant)) {
",2,1,0,2,5,0,6,0,0,9,45,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,142,"            throw new IllegalInstantException(localInstant, zone.getID());
",2,0,0,2,4,0,4,2,0,8,62,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,144,"        return localInstant;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,150,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();
",2,0,0,1,2,0,0,12,0,14,66,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,154,"        fields.eras = convertField(fields.eras, converted);
",8,0,0,1,2,0,4,0,0,13,51,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,155,"        fields.centuries = convertField(fields.centuries, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,156,"        fields.years = convertField(fields.years, converted);
",8,0,0,1,2,0,4,0,0,13,53,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,157,"        fields.months = convertField(fields.months, converted);
",8,0,0,1,2,0,4,0,0,13,55,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,158,"        fields.weekyears = convertField(fields.weekyears, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,159,"        fields.weeks = convertField(fields.weeks, converted);
",8,0,0,1,2,0,4,0,0,13,53,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,160,"        fields.days = convertField(fields.days, converted);
",8,0,0,1,2,0,4,0,0,13,51,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,162,"        fields.halfdays = convertField(fields.halfdays, converted);
",8,0,0,1,2,0,4,0,0,13,59,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,163,"        fields.hours = convertField(fields.hours, converted);
",8,0,0,1,2,0,4,0,0,13,53,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,164,"        fields.minutes = convertField(fields.minutes, converted);
",8,0,0,1,2,0,4,0,0,13,57,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,165,"        fields.seconds = convertField(fields.seconds, converted);
",8,0,0,1,2,0,4,0,0,13,57,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,166,"        fields.millis = convertField(fields.millis, converted);
",8,0,0,1,2,0,4,0,0,13,55,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,170,"        fields.year = convertField(fields.year, converted);
",8,0,0,1,2,0,4,0,0,13,51,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,171,"        fields.yearOfEra = convertField(fields.yearOfEra, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,172,"        fields.yearOfCentury = convertField(fields.yearOfCentury, converted);
",8,0,0,1,2,0,4,0,0,13,69,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,173,"        fields.centuryOfEra = convertField(fields.centuryOfEra, converted);
",8,0,0,1,2,0,4,0,0,13,67,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,174,"        fields.era = convertField(fields.era, converted);
",8,0,0,1,2,0,4,0,0,13,49,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,175,"        fields.dayOfWeek = convertField(fields.dayOfWeek, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,176,"        fields.dayOfMonth = convertField(fields.dayOfMonth, converted);
",8,0,0,1,2,0,4,0,0,13,63,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,177,"        fields.dayOfYear = convertField(fields.dayOfYear, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,178,"        fields.monthOfYear = convertField(fields.monthOfYear, converted);
",8,0,0,1,2,0,4,0,0,13,65,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,179,"        fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);
",8,0,0,1,2,0,4,0,0,13,71,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,180,"        fields.weekyear = convertField(fields.weekyear, converted);
",8,0,0,1,2,0,4,0,0,13,59,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,181,"        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);
",8,0,0,1,2,0,4,0,0,13,77,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,183,"        fields.millisOfSecond = convertField(fields.millisOfSecond, converted);
",8,0,0,1,2,0,4,0,0,13,71,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,184,"        fields.millisOfDay = convertField(fields.millisOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,65,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,185,"        fields.secondOfMinute = convertField(fields.secondOfMinute, converted);
",8,0,0,1,2,0,4,0,0,13,71,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,186,"        fields.secondOfDay = convertField(fields.secondOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,65,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,187,"        fields.minuteOfHour = convertField(fields.minuteOfHour, converted);
",8,0,0,1,2,0,4,0,0,13,67,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,188,"        fields.minuteOfDay = convertField(fields.minuteOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,65,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,189,"        fields.hourOfDay = convertField(fields.hourOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,190,"        fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);
",8,0,0,1,2,0,4,0,0,13,69,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,191,"        fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,71,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,192,"        fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);
",8,0,0,1,2,0,4,0,0,13,79,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,193,"        fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,67,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,194,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,197,"        if (field == null || !field.isSupported()) {
",2,2,0,2,5,0,4,0,0,9,44,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,198,"            return field;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,200,"        if (converted.containsKey(field)) {
",0,0,0,2,5,0,6,0,0,6,35,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,201,"            return (DurationField)converted.get(field);
",0,0,0,2,4,1,6,2,0,8,43,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,203,"        ZonedDurationField zonedField = new ZonedDurationField(field, getZone());
",4,0,0,2,4,0,2,4,0,10,73,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,204,"        converted.put(field, zonedField);
",0,0,0,1,2,0,8,0,0,8,33,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,205,"        return zonedField;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,209,"        if (field == null || !field.isSupported()) {
",2,2,0,2,5,0,4,0,0,9,44,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,210,"            return field;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,212,"        if (converted.containsKey(field)) {
",0,0,0,2,5,0,6,0,0,6,35,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,213,"            return (DateTimeField)converted.get(field);
",0,0,0,2,4,1,6,2,0,8,43,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,215,"        ZonedDateTimeField zonedField =
",2,0,0,0,0,0,0,2,0,4,31,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,220,"        converted.put(field, zonedField);
",0,0,0,1,2,0,8,0,0,8,33,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,221,"        return zonedField;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,234,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,235,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,237,"        if (obj instanceof ZonedChronology == false) {
",2,1,0,1,3,0,0,2,0,6,46,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,238,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,240,"        ZonedChronology chrono = (ZonedChronology) obj;
",4,0,0,1,2,0,0,4,0,8,47,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,241,"        return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,253,"        return 326565 + getZone().hashCode() * 11 + getBase().hashCode() * 7;
",0,4,0,4,8,1,8,0,0,12,69,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,262,"        return ""ZonedChronology["" + getBase() + "", "" + getZone().getID() + ']';
",0,1,0,4,8,1,6,0,0,10,71,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,386,"            super(field.getType());
",0,0,0,2,4,0,4,0,0,4,23,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,387,"            if (!field.isSupported()) {
",0,0,0,2,5,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,388,"                throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,9,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,390,"            iField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,391,"            iZone = zone;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,392,"            iDurationField = durationField;
",4,0,0,0,0,0,0,0,0,5,31,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,393,"            iTimeField = useTimeArithmetic(durationField);
",2,0,0,1,2,0,4,0,0,7,46,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,394,"            iRangeDurationField = rangeDurationField;
",4,0,0,0,0,0,0,0,0,5,41,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,395,"            iLeapDurationField = leapDurationField;
",4,0,0,0,0,0,0,0,0,5,39,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,396,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,399,"            return iField.isLenient();
",0,0,0,1,2,1,4,0,0,4,26,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,403,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,404,"            return iField.get(localInstant);
",0,0,0,1,2,1,6,0,0,6,32,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,408,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,409,"            return iField.getAsText(localInstant, locale);
",0,0,0,1,2,1,8,0,0,8,46,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,413,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,414,"            return iField.getAsShortText(localInstant, locale);
",0,0,0,1,2,1,8,0,0,8,51,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,418,"            return iField.getAsText(fieldValue, locale);
",0,0,0,1,2,1,8,0,0,8,44,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,422,"            return iField.getAsShortText(fieldValue, locale);
",0,0,0,1,2,1,8,0,0,8,49,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,426,"            if (iTimeField) {
",2,0,0,1,3,0,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,427,"                int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,428,"                long localInstant = iField.add(instant + offset, value);
",6,1,0,1,2,0,6,0,0,13,56,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,429,"                return localInstant - offset;
",4,1,0,0,0,1,0,0,0,5,29,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,431,"               long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,432,"               localInstant = iField.add(localInstant, value);
",2,0,0,1,2,0,8,0,0,11,47,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,433,"               return iZone.convertLocalToUTC(localInstant, false, instant);
",0,0,0,1,2,1,8,0,0,9,61,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,438,"            if (iTimeField) {
",2,0,0,1,3,0,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,439,"                int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,440,"                long localInstant = iField.add(instant + offset, value);
",6,1,0,1,2,0,6,0,0,13,56,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,441,"                return localInstant - offset;
",4,1,0,0,0,1,0,0,0,5,29,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,443,"               long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,444,"               localInstant = iField.add(localInstant, value);
",2,0,0,1,2,0,8,0,0,11,47,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,445,"               return iZone.convertLocalToUTC(localInstant, false, instant);
",0,0,0,1,2,1,8,0,0,9,61,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,450,"            if (iTimeField) {
",2,0,0,1,3,0,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,451,"                int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,452,"                long localInstant = iField.addWrapField(instant + offset, value);
",6,1,0,1,2,0,6,0,0,13,65,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,453,"                return localInstant - offset;
",4,1,0,0,0,1,0,0,0,5,29,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,455,"                long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,456,"                localInstant = iField.addWrapField(localInstant, value);
",2,0,0,1,2,0,8,0,0,11,56,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,457,"                return iZone.convertLocalToUTC(localInstant, false, instant);
",0,0,0,1,2,1,8,0,0,9,61,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,462,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,463,"            localInstant = iField.set(localInstant, value);
",2,0,0,1,2,0,8,0,0,11,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,464,"            long result = iZone.convertLocalToUTC(localInstant, false, instant);
",2,0,0,1,2,0,8,0,0,11,68,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,465,"            if (get(result) != value) {
",2,1,0,2,5,0,4,0,0,7,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,466,"                IllegalInstantException cause = new IllegalInstantException(localInstant,  iZone.getID());
",4,0,0,2,4,0,4,4,0,12,90,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,467,"                IllegalFieldValueException ex = new IllegalFieldValueException(iField.getType(), Integer.valueOf(value), cause.getMessage());
",2,0,0,4,8,0,14,4,0,20,125,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,468,"                ex.initCause(cause);
",0,0,0,1,2,0,6,0,0,6,20,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,469,"                throw ex;
",2,0,0,0,0,0,0,0,0,2,9,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,471,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,476,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,477,"            localInstant = iField.set(localInstant, text, locale);
",2,0,0,1,2,0,10,0,0,13,54,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,478,"            return iZone.convertLocalToUTC(localInstant, false, instant);
",0,0,0,1,2,1,8,0,0,9,61,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,482,"            int offset = getOffsetToAdd(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,483,"            return iField.getDifference
",0,0,0,0,0,1,4,0,0,4,27,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,489,"            int offset = getOffsetToAdd(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,490,"            return iField.getDifferenceAsLong
",0,0,0,0,0,1,4,0,0,4,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,496,"            return iDurationField;
",2,0,0,0,0,1,0,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,500,"            return iRangeDurationField;
",2,0,0,0,0,1,0,0,0,2,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,504,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,505,"            return iField.isLeap(localInstant);
",0,0,0,1,2,1,6,0,0,6,35,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,509,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,510,"            return iField.getLeapAmount(localInstant);
",0,0,0,1,2,1,6,0,0,6,42,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,514,"            return iLeapDurationField;
",2,0,0,0,0,1,0,0,0,2,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,518,"            if (iTimeField) {
",2,0,0,1,3,0,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,519,"                int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,520,"                instant = iField.roundFloor(instant + offset);
",6,1,0,1,2,0,4,0,0,12,46,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,521,"                return instant - offset;
",4,1,0,0,0,1,0,0,0,5,24,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,523,"                long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,524,"                localInstant = iField.roundFloor(localInstant);
",2,0,0,1,2,0,6,0,0,9,47,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,525,"                return iZone.convertLocalToUTC(localInstant, false, instant);
",0,0,0,1,2,1,8,0,0,9,61,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,530,"            if (iTimeField) {
",2,0,0,1,3,0,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,531,"                int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,532,"                instant = iField.roundCeiling(instant + offset);
",6,1,0,1,2,0,4,0,0,12,48,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,533,"                return instant - offset;
",4,1,0,0,0,1,0,0,0,5,24,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,535,"                long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,536,"                localInstant = iField.roundCeiling(localInstant);
",2,0,0,1,2,0,6,0,0,9,49,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,537,"                return iZone.convertLocalToUTC(localInstant, false, instant);
",0,0,0,1,2,1,8,0,0,9,61,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,542,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,543,"            return iField.remainder(localInstant);
",0,0,0,1,2,1,6,0,0,6,38,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,547,"            return iField.getMinimumValue();
",0,0,0,1,2,1,4,0,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,551,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,552,"            return iField.getMinimumValue(localInstant);
",0,0,0,1,2,1,6,0,0,6,44,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,556,"            return iField.getMinimumValue(instant);
",0,0,0,1,2,1,6,0,0,6,39,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,560,"            return iField.getMinimumValue(instant, values);
",0,0,0,1,2,1,8,0,0,8,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,564,"            return iField.getMaximumValue();
",0,0,0,1,2,1,4,0,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,568,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,569,"            return iField.getMaximumValue(localInstant);
",0,0,0,1,2,1,6,0,0,6,44,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,573,"            return iField.getMaximumValue(instant);
",0,0,0,1,2,1,6,0,0,6,39,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,577,"            return iField.getMaximumValue(instant, values);
",0,0,0,1,2,1,8,0,0,8,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,581,"            return iField.getMaximumTextLength(locale);
",0,0,0,1,2,1,6,0,0,6,43,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,585,"            return iField.getMaximumShortTextLength(locale);
",0,0,0,1,2,1,6,0,0,6,48,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,589,"            int offset = this.iZone.getOffset(instant);
",4,0,0,1,2,0,4,0,0,8,43,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,590,"            long sum = instant + offset;
",6,1,0,0,0,0,0,0,0,7,28,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,592,"            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {
",8,5,0,3,7,0,0,0,0,13,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,593,"                throw new ArithmeticException(""Adding time zone offset caused overflow"");
",0,0,0,1,2,0,0,2,0,3,73,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,11,595,"            return offset;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,11,50,"        int year = getWrappedField().get(instant);
",2,0,0,2,4,0,6,0,0,8,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,11,51,"        return year < 0 ? -year : year;
",6,1,0,0,0,1,0,0,0,8,31,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,11,55,"        return getWrappedField().add(instant, years);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,11,59,"        return getWrappedField().add(instant, years);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,11,63,"        return getWrappedField().addWrapField(instant, years);
",0,0,0,2,4,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,11,67,"        return getWrappedField().addWrapField(instant, fieldIndex, values, years);
",0,0,0,2,4,1,12,0,0,12,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,11,71,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,11,75,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,80,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,11,79,"        FieldUtils.verifyValueBounds(this, year, 0, getMaximumValue());
",0,0,0,2,4,0,8,0,0,8,63,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,11,80,"        if (getWrappedField().get(instant) < 0) {
",0,1,0,3,7,0,6,0,0,7,41,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,11,81,"            year = -year;
",4,0,0,0,0,0,0,0,0,6,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,11,83,"        return super.set(instant, year);
",6,0,0,1,2,1,0,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,11,95,"        return getWrappedField().roundFloor(instant);
",0,0,0,2,4,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,11,99,"        return getWrappedField().roundCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,11,103,"        return getWrappedField().remainder(instant);
",0,0,0,2,4,1,6,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,11,110,"        return INSTANCE;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,11,67,"        return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToText(fieldValue);
",0,0,0,2,4,1,10,0,0,10,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,11,78,"        return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToShortText(fieldValue);
",0,0,0,2,4,1,10,0,0,10,79,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,11,90,"        return GJLocaleSymbols.forLocale(locale).dayOfWeekTextToValue(text);
",0,0,0,2,4,1,10,0,0,10,68,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,11,94,"        return iChronology.weeks();
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,11,103,"        return DateTimeConstants.MONDAY;
",4,0,0,0,0,1,0,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,11,112,"        return DateTimeConstants.SUNDAY;
",4,0,0,0,0,1,0,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,11,122,"        return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxTextLength();
",0,0,0,2,4,1,8,0,0,8,69,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,11,132,"        return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxShortTextLength();
",0,0,0,2,4,1,8,0,0,8,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,11,139,"        return iChronology.dayOfWeek();
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,90,"        return getInstance(DateTimeZone.getDefault(), 4);
",0,0,0,2,4,1,6,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,112,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,123,"            } catch (ArrayIndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,44,8,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,124,"                throw new IllegalArgumentException
",0,0,0,0,0,0,0,2,0,2,34,11,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,131,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);
",6,0,0,1,2,0,4,0,0,11,59,10,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,132,"                    chrono = new GregorianChronology
",2,0,0,0,0,0,0,2,0,5,32,10,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,155,"        Chronology base = getBase();
",2,0,0,1,2,0,2,2,0,6,28,4,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,156,"        int minDays = getMinimumDaysInFirstWeek();
",2,0,0,1,2,0,2,0,0,4,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,157,"        minDays = (minDays == 0 ? 4 : minDays);  // handle rename of BaseGJChronology
",6,1,0,1,2,0,0,0,0,8,77,4,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,158,"        return base == null ?
",2,1,0,0,0,1,0,0,0,3,21,5,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,171,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,181,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,182,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,184,"        if (zone == getZone()) {
",2,1,0,2,5,0,2,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,185,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,11,187,"        return getInstance(zone);
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,59,"            throw new IllegalArgumentException(""The divisor must be at least 2"");
",0,0,0,1,2,0,0,2,0,3,69,7,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,64,"            iDurationField = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,90,"        super(remainderField.getWrappedField(), type);
",2,0,0,2,4,0,4,0,0,6,46,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,91,"        int divisor = iDivisor = remainderField.iDivisor;
",8,0,0,0,0,0,0,0,0,9,49,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,92,"        iDurationField = remainderField.iRangeField;
",6,0,0,0,0,0,0,0,0,7,44,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,94,"        DateTimeField field = getWrappedField();
",2,0,0,1,2,0,2,2,0,6,40,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,95,"        int i = field.getMinimumValue();
",2,0,0,1,2,0,4,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,96,"        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);
",12,5,0,3,6,0,0,0,0,17,59,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,98,"        int j = field.getMaximumValue();
",2,0,0,1,2,0,4,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,99,"        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);
",12,5,0,3,6,0,0,0,0,17,59,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,101,"        iMin = min;
",4,0,0,0,0,0,0,0,0,5,11,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,102,"        iMax = max;
",4,0,0,0,0,0,0,0,0,5,11,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,103,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,112,"        int value = getWrappedField().get(instant);
",2,0,0,2,4,0,6,0,0,8,43,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,113,"        if (value >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,114,"            return value / iDivisor;
",4,1,0,0,0,1,0,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,116,"            return ((value + 1) / iDivisor) - 1;
",4,3,0,2,4,1,0,0,0,7,36,6,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,129,"        return getWrappedField().add(instant, amount * iDivisor);
",4,1,0,2,4,1,6,0,0,11,57,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,141,"        return getWrappedField().add(instant, amount * iDivisor);
",4,1,0,2,4,1,6,0,0,11,57,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,153,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));
",0,0,0,3,6,1,18,0,0,18,82,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,157,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iDivisor;
",2,1,0,2,4,1,8,0,0,11,85,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,161,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iDivisor;
",2,1,0,2,4,1,8,0,0,11,91,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,173,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);
",0,0,0,1,2,0,10,0,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,174,"        int remainder = getRemainder(getWrappedField().get(instant));
",2,0,0,3,6,0,8,0,0,10,61,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,175,"        return getWrappedField().set(instant, value * iDivisor + remainder);
",6,2,0,2,4,1,6,0,0,14,68,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,191,"        return iMin;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,200,"        return iMax;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,204,"        DateTimeField field = getWrappedField();
",2,0,0,1,2,0,2,2,0,6,40,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,205,"        return field.roundFloor(field.set(instant, get(instant) * iDivisor));
",2,1,0,3,6,1,14,0,0,17,69,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,209,"        return set(instant, get(getWrappedField().remainder(instant)));
",0,0,0,4,8,1,12,0,0,12,63,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,218,"        return iDivisor;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,222,"        if (value >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,223,"            return value % iDivisor;
",4,1,0,0,0,1,0,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,11,225,"            return (iDivisor - 1) + ((value + 1) % iDivisor);
",6,4,0,3,6,1,0,0,0,10,49,6,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,11,55,"            throw new IllegalArgumentException(""The divisor must be at least 2"");
",0,0,0,1,2,0,0,2,0,3,69,7,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,11,60,"            iRangeField = null;
",2,0,0,0,0,0,0,0,0,3,19,6,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,11,100,"        int value = getWrappedField().get(instant);
",2,0,0,2,4,0,6,0,0,8,43,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,11,101,"        if (value >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,11,102,"            return value % iDivisor;
",4,1,0,0,0,1,0,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,11,104,"            return (iDivisor - 1) + ((value + 1) % iDivisor);
",6,4,0,3,6,1,0,0,0,10,49,6,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,11,118,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, 0, iDivisor - 1));
",2,1,0,3,6,1,14,0,0,17,87,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,11,130,"        FieldUtils.verifyValueBounds(this, value, 0, iDivisor - 1);
",2,1,0,1,2,0,6,0,0,9,59,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,11,131,"        int divided = getDivided(getWrappedField().get(instant));
",2,0,0,3,6,0,8,0,0,10,57,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,11,132,"        return getWrappedField().set(instant, divided * iDivisor + value);
",6,2,0,2,4,1,6,0,0,14,66,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,11,139,"        return iRangeField;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,11,162,"        return getWrappedField().roundFloor(instant);
",0,0,0,2,4,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,11,166,"        return getWrappedField().roundCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,11,170,"        return getWrappedField().roundHalfFloor(instant);
",0,0,0,2,4,1,6,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,11,174,"        return getWrappedField().roundHalfCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,11,178,"        return getWrappedField().roundHalfEven(instant);
",0,0,0,2,4,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,11,182,"        return getWrappedField().remainder(instant);
",0,0,0,2,4,1,6,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,11,191,"        return iDivisor;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,11,195,"        if (value >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,11,196,"            return value / iDivisor;
",4,1,0,0,0,1,0,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,11,198,"            return ((value + 1) / iDivisor) - 1;
",4,3,0,2,4,1,0,0,0,7,36,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,11,54,"        return iChronology.getWeekOfWeekyear(instant);
",0,0,0,1,2,1,6,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,11,58,"        return iChronology.weekyears();
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,11,65,"        return super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY)
",8,2,0,1,2,1,0,0,0,10,71,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,11,70,"        return super.roundCeiling(instant + 3 * DateTimeConstants.MILLIS_PER_DAY)
",8,2,0,1,2,1,0,0,0,10,73,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,11,75,"        return super.remainder(instant + 3 * DateTimeConstants.MILLIS_PER_DAY);
",8,2,0,1,2,1,0,0,0,10,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,11,79,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,11,83,"        return 53;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,11,87,"        int weekyear = iChronology.getWeekyear(instant);
",2,0,0,1,2,0,6,0,0,8,48,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,11,88,"        return iChronology.getWeeksInYear(weekyear);
",0,0,0,1,2,1,6,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,11,92,"        if (partial.isSupported(DateTimeFieldType.weekyear())) {
",0,0,0,3,7,0,8,0,0,8,56,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,11,93,"            int weekyear = partial.get(DateTimeFieldType.weekyear());
",2,0,0,2,4,0,8,0,0,10,57,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,11,94,"            return iChronology.getWeeksInYear(weekyear);
",0,0,0,1,2,1,6,0,0,6,44,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,11,96,"        return 53;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,11,100,"        int size = partial.size();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,11,101,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,11,102,"            if (partial.getFieldType(i) == DateTimeFieldType.weekyear()) {
",0,1,0,3,7,0,10,0,0,11,62,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,11,103,"                int weekyear = values[i];
",2,0,1,1,2,0,0,0,0,6,25,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,11,104,"                return iChronology.getWeeksInYear(weekyear);
",0,0,0,1,2,1,6,0,0,6,44,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,11,107,"        return 53;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,11,111,"        return value > 52 ? getMaximumValue(instant) : 52;
",2,1,0,1,2,1,4,0,0,7,50,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,11,118,"        return iChronology.weekOfWeekyear();
",0,0,0,1,2,1,4,0,0,4,36,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,11,52,"        return iChronology.getDayOfYear(instant);
",0,0,0,1,2,1,6,0,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,11,56,"        return iChronology.years();
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,11,60,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,11,64,"        return iChronology.getDaysInYearMax();
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,11,68,"        int year = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,11,69,"        return iChronology.getDaysInYear(year);
",0,0,0,1,2,1,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,11,73,"        if (partial.isSupported(DateTimeFieldType.year())) {
",0,0,0,3,7,0,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,11,74,"            int year = partial.get(DateTimeFieldType.year());
",2,0,0,2,4,0,8,0,0,10,49,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,11,75,"            return iChronology.getDaysInYear(year);
",0,0,0,1,2,1,6,0,0,6,39,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,11,77,"        return iChronology.getDaysInYearMax();
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,11,81,"        int size = partial.size();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,11,82,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,11,83,"            if (partial.getFieldType(i) == DateTimeFieldType.year()) {
",0,1,0,3,7,0,10,0,0,11,58,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,11,84,"                int year = values[i];
",2,0,1,1,2,0,0,0,0,6,21,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,11,85,"                return iChronology.getDaysInYear(year);
",0,0,0,1,2,1,6,0,0,6,39,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,11,88,"        return iChronology.getDaysInYearMax();
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,11,92,"        int maxLessOne = iChronology.getDaysInYearMax() - 1;
",2,1,0,1,2,0,4,0,0,7,52,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,11,93,"        return (value > maxLessOne || value < 1) ? getMaximumValue(instant) : maxLessOne;
",8,3,0,2,4,1,4,0,0,15,81,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,11,100,"        return iChronology.dayOfYear();
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,216,"        Stub(DateTimeZone zone) {
",4,0,0,1,3,0,0,2,0,6,25,3,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,217,"            iZone = zone;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,218,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,221,"            return ISOChronology.getInstance(iZone);
",0,0,0,1,2,1,6,0,0,6,40,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,225,"            out.writeObject(iZone);
",0,0,0,1,2,0,6,0,0,6,23,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,226,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,231,"            iZone = (DateTimeZone)in.readObject();
",2,0,0,2,4,0,4,2,0,9,38,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,11,232,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,11,76,"        return duration / iUnitMillis;  // safe
",4,1,0,0,0,1,0,0,0,5,39,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,11,88,"        return value * iUnitMillis;  // safe
",4,1,0,0,0,1,0,0,0,5,36,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,11,100,"        return FieldUtils.safeMultiply(value, iUnitMillis);
",0,0,0,1,2,1,8,0,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,11,109,"        long addition = FieldUtils.safeMultiply(value, iUnitMillis);
",2,0,0,1,2,0,8,0,0,10,60,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,11,110,"        return FieldUtils.safeAdd(instant, addition);
",0,0,0,1,2,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,11,127,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,11,128,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,11,129,"        } else if (obj instanceof PreciseDurationField) {
",2,0,0,1,4,0,0,2,0,4,49,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,11,130,"            PreciseDurationField other = (PreciseDurationField) obj;
",4,0,0,1,2,0,0,4,0,8,56,7,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,11,131,"            return (getType() == other.getType()) && (iUnitMillis == other.iUnitMillis);
",6,3,0,4,8,1,6,0,0,15,76,7,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,11,133,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,11,142,"        long millis = iUnitMillis;
",4,0,0,0,0,0,0,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,11,143,"        int hash = (int) (millis ^ (millis >>> 32));
",6,2,0,3,6,0,0,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,11,144,"        hash += getType().hashCode();
",2,0,0,2,4,0,4,0,0,7,29,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,11,145,"        return hash;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,11,47,"            throw new IllegalArgumentException(""Wrapped field's minumum value must be zero"");
",0,0,0,1,2,0,0,2,0,3,81,7,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,11,52,"        int value = getWrappedField().get(instant);
",2,0,0,2,4,0,6,0,0,8,43,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,11,53,"        if (value == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,11,54,"            value = getMaximumValue();
",2,0,0,1,2,0,2,0,0,5,26,6,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,11,56,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,11,60,"        return getWrappedField().add(instant, value);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,11,64,"        return getWrappedField().add(instant, value);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,11,68,"        return getWrappedField().addWrapField(instant, value);
",0,0,0,2,4,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,11,72,"        return getWrappedField().addWrapField(instant, fieldIndex, values, valueToAdd);
",0,0,0,2,4,1,12,0,0,12,79,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,11,76,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,74,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,11,80,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,80,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,11,84,"        int max = getMaximumValue();
",2,0,0,1,2,0,2,0,0,4,28,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,11,85,"        FieldUtils.verifyValueBounds(this, value, 1, max);
",0,0,0,1,2,0,8,0,0,8,50,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,11,86,"        if (value == max) {
",4,1,0,1,3,0,0,0,0,5,19,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,11,87,"            value = 0;
",2,0,0,0,0,0,0,0,0,3,10,6,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,11,89,"        return getWrappedField().set(instant, value);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,11,93,"        return getWrappedField().isLeap(instant);
",0,0,0,2,4,1,6,0,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,11,97,"        return getWrappedField().getLeapAmount(instant);
",0,0,0,2,4,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,11,101,"        return getWrappedField().getLeapDurationField();
",0,0,0,2,4,1,4,0,0,4,48,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,11,110,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,11,119,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,11,128,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,11,137,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,11,147,"        return getWrappedField().getMaximumValue() + 1;
",0,1,0,2,4,1,4,0,0,5,47,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,11,157,"        return getWrappedField().getMaximumValue(instant) + 1;
",0,1,0,2,4,1,6,0,0,7,54,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,11,167,"        return getWrappedField().getMaximumValue(instant) + 1;
",0,1,0,2,4,1,6,0,0,7,54,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,11,177,"        return getWrappedField().getMaximumValue(instant, values) + 1;
",0,1,0,2,4,1,8,0,0,9,62,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,11,181,"        return getWrappedField().roundFloor(instant);
",0,0,0,2,4,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,11,185,"        return getWrappedField().roundCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,11,189,"        return getWrappedField().roundHalfFloor(instant);
",0,0,0,2,4,1,6,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,11,193,"        return getWrappedField().roundHalfCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,11,197,"        return getWrappedField().roundHalfEven(instant);
",0,0,0,2,4,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,11,201,"        return getWrappedField().remainder(instant);
",0,0,0,2,4,1,6,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,11,76,"            throw new IllegalArgumentException(""The offset cannot be zero"");
",0,0,0,1,2,0,0,2,0,3,64,7,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,11,84,"            iMin = minValue;
",4,0,0,0,0,0,0,0,0,5,16,6,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,11,89,"            iMax = maxValue;
",4,0,0,0,0,0,0,0,0,5,16,6,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,11,100,"        return super.get(instant) + iOffset;
",6,1,0,1,2,1,0,0,0,7,36,4,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,11,112,"        instant = super.add(instant, amount);
",8,0,0,1,2,0,0,0,0,9,37,4,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,11,113,"        FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);
",0,0,0,2,4,0,12,0,0,12,61,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,11,114,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,11,126,"        instant = super.add(instant, amount);
",8,0,0,1,2,0,0,0,0,9,37,4,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,11,127,"        FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);
",0,0,0,2,4,0,12,0,0,12,61,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,11,128,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,11,140,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));
",0,0,0,3,6,1,18,0,0,18,82,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,11,152,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);
",0,0,0,1,2,0,10,0,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,11,153,"        return super.set(instant, value - iOffset);
",8,1,0,1,2,1,0,0,0,9,43,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,11,157,"        return getWrappedField().isLeap(instant);
",0,0,0,2,4,1,6,0,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,11,161,"        return getWrappedField().getLeapAmount(instant);
",0,0,0,2,4,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,11,165,"        return getWrappedField().getLeapDurationField();
",0,0,0,2,4,1,4,0,0,4,48,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,11,187,"        return getWrappedField().roundFloor(instant);
",0,0,0,2,4,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,11,191,"        return getWrappedField().roundCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,11,195,"        return getWrappedField().roundHalfFloor(instant);
",0,0,0,2,4,1,6,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,11,199,"        return getWrappedField().roundHalfCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,11,203,"        return getWrappedField().roundHalfEven(instant);
",0,0,0,2,4,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,11,207,"        return getWrappedField().remainder(instant);
",0,0,0,2,4,1,6,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,11,216,"        return iOffset;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,530,"        FixedMillisProvider(long fixedMillis) {
",4,0,0,1,3,0,0,0,0,4,39,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,531,"            iMillis = fixedMillis;
",4,0,0,0,0,0,0,0,0,5,22,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,532,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,539,"            return iMillis;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,554,"        OffsetMillisProvider(long offsetMillis) {
",4,0,0,1,3,0,0,0,0,4,41,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,555,"            iMillis = offsetMillis;
",4,0,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,556,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,11,563,"            return System.currentTimeMillis() + iMillis;
",2,1,0,1,2,1,4,0,0,7,44,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,36,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,37,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,49,"        if (value == Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,50,"            throw new ArithmeticException(""Integer.MIN_VALUE cannot be negated"");
",0,0,0,1,2,0,0,2,0,3,69,7,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,52,"        return -value;
",2,0,0,0,0,1,0,0,0,3,14,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,67,"            throw new ArithmeticException
",0,0,0,0,0,0,0,2,0,2,29,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,85,"            throw new ArithmeticException
",0,0,0,0,0,0,0,2,0,2,29,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,103,"            throw new ArithmeticException
",0,0,0,0,0,0,0,2,0,2,29,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,119,"        long total = (long) val1 * (long) val2;
",6,1,0,2,4,0,0,0,0,7,39,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,120,"        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {
",12,3,0,1,3,0,0,0,0,15,61,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,121,"          throw new ArithmeticException(""Multiplication overflows an int: "" + val1 + "" * "" + val2);
",4,1,0,1,2,0,0,2,0,9,89,7,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,123,"        return (int) total;
",2,0,0,1,2,1,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,136,"        switch (val2) {
",2,0,0,1,3,0,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,138,"                if (val1 == Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,139,"                    throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);
",4,1,0,1,2,0,0,2,0,9,89,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,141,"                return -val1;
",2,0,0,0,0,1,0,0,0,3,13,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,143,"                return 0L;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,145,"                return val1;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,147,"        long total = val1 * val2;
",6,1,0,0,0,0,0,0,0,7,25,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,148,"        if (total / val2 != val1) {
",6,2,0,1,3,0,0,0,0,8,27,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,149,"          throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);
",4,1,0,1,2,0,0,2,0,9,89,7,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,151,"        return total;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,163,"        if (val2 == 1) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,164,"            return val1;
",2,0,0,0,0,1,0,0,0,2,12,6,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,166,"        if (val1 == 1) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,167,"            return val2;
",2,0,0,0,0,1,0,0,0,2,12,6,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,169,"        if (val1 == 0 || val2 == 0) {
",4,3,0,1,3,0,0,0,0,7,29,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,170,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,172,"        long total = val1 * val2;
",6,1,0,0,0,0,0,0,0,7,25,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,173,"        if (total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1 || val2 == Long.MIN_VALUE && val1 == -1) {
",22,10,0,1,3,0,0,0,0,34,107,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,174,"            throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);
",4,1,0,1,2,0,0,2,0,9,89,7,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,176,"        return total;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,190,"        throw new ArithmeticException(""Value cannot fit in an int: "" + value);
",2,1,0,1,2,0,0,2,0,6,70,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,202,"        long val = FieldUtils.safeMultiply(val1, val2);
",2,0,0,1,2,0,8,0,0,10,47,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,203,"        return FieldUtils.safeToInt(val);
",0,0,0,1,2,1,6,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,218,"            throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,235,"        if ((value < lowerBound) || (value > upperBound)) {
",8,3,0,3,7,0,0,0,0,11,51,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,236,"            throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,240,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,252,"        if ((value < lowerBound) || (value > upperBound)) {
",8,3,0,3,7,0,0,0,0,11,51,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,253,"            throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,257,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,276,"        return getWrappedValue(currentValue + wrapValue, minValue, maxValue);
",4,1,0,1,2,1,6,0,0,11,69,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,292,"        if (minValue >= maxValue) {
",4,1,0,1,3,0,0,0,0,5,27,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,293,"            throw new IllegalArgumentException(""MIN > MAX"");
",0,0,0,1,2,0,0,2,0,3,48,7,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,296,"        int wrapRange = maxValue - minValue + 1;
",6,2,0,0,0,0,0,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,297,"        value -= minValue;
",4,0,0,0,0,0,0,0,0,5,18,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,299,"        if (value >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,300,"            return (value % wrapRange) + minValue;
",6,2,0,1,2,1,0,0,0,8,38,6,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,303,"        int remByRange = (-value) % wrapRange;
",6,1,0,1,2,0,0,0,0,8,38,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,305,"        if (remByRange == 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,306,"            return 0 + minValue;
",2,1,0,0,0,1,0,0,0,3,20,6,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,308,"        return (wrapRange - remByRange) + minValue;
",6,2,0,1,2,1,0,0,0,8,43,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,321,"        if (object1 == object2) {
",4,1,0,1,3,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,322,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,324,"        if (object1 == null || object2 == null) {
",4,3,0,1,3,0,0,0,0,7,41,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,325,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,11,327,"        return object1.equals(object2);
",0,0,0,1,2,1,6,0,0,6,31,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,11,49,"            throw new IllegalArgumentException(""The scalar must not be 0 or 1"");
",0,0,0,1,2,0,0,2,0,3,68,7,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,11,55,"        return getWrappedField().getValue(duration) / iScalar;
",2,1,0,2,4,1,6,0,0,9,54,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,11,59,"        return getWrappedField().getValueAsLong(duration) / iScalar;
",2,1,0,2,4,1,6,0,0,9,60,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,11,63,"        return getWrappedField().getValue(duration, instant) / iScalar;
",2,1,0,2,4,1,8,0,0,11,63,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,11,67,"        return getWrappedField().getValueAsLong(duration, instant) / iScalar;
",2,1,0,2,4,1,8,0,0,11,69,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,11,71,"        long scaled = ((long) value) * ((long) iScalar);
",6,1,0,4,8,0,0,0,0,7,48,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,11,72,"        return getWrappedField().getMillis(scaled);
",0,0,0,2,4,1,6,0,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,11,76,"        long scaled = FieldUtils.safeMultiply(value, iScalar);
",2,0,0,1,2,0,8,0,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,11,77,"        return getWrappedField().getMillis(scaled);
",0,0,0,2,4,1,6,0,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,11,81,"        long scaled = ((long) value) * ((long) iScalar);
",6,1,0,4,8,0,0,0,0,7,48,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,11,82,"        return getWrappedField().getMillis(scaled, instant);
",0,0,0,2,4,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,11,86,"        long scaled = FieldUtils.safeMultiply(value, iScalar);
",2,0,0,1,2,0,8,0,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,11,87,"        return getWrappedField().getMillis(scaled, instant);
",0,0,0,2,4,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,11,91,"        long scaled = ((long) value) * ((long) iScalar);
",6,1,0,4,8,0,0,0,0,7,48,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,11,92,"        return getWrappedField().add(instant, scaled);
",0,0,0,2,4,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,11,96,"        long scaled = FieldUtils.safeMultiply(value, iScalar);
",2,0,0,1,2,0,8,0,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,11,97,"        return getWrappedField().add(instant, scaled);
",0,0,0,2,4,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,11,101,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iScalar;
",2,1,0,2,4,1,8,0,0,11,84,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,11,105,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iScalar;
",2,1,0,2,4,1,8,0,0,11,90,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,11,109,"        return getWrappedField().getUnitMillis() * iScalar;
",2,1,0,2,4,1,4,0,0,7,51,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,11,119,"        return iScalar;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,11,130,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,11,131,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,11,132,"        } else if (obj instanceof ScaledDurationField) {
",2,0,0,1,4,0,0,2,0,4,48,6,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,11,133,"            ScaledDurationField other = (ScaledDurationField) obj;
",4,0,0,1,2,0,0,4,0,8,54,7,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,11,134,"            return (getWrappedField().equals(other.getWrappedField())) &&
",0,1,0,4,8,1,8,0,0,9,61,7,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,11,138,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,11,147,"        long scalar = iScalar;
",4,0,0,0,0,0,0,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,11,148,"        int hash = (int) (scalar ^ (scalar >>> 32));
",6,2,0,3,6,0,0,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,11,149,"        hash += getType().hashCode();
",2,0,0,2,4,0,4,0,0,7,29,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,11,150,"        hash += getWrappedField().hashCode();
",2,0,0,2,4,0,4,0,0,7,37,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,11,151,"        return hash;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,11,54,"            throw new IllegalArgumentException(""The field must not be null"");
",0,0,0,1,2,0,0,2,0,4,65,6,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,11,57,"            throw new IllegalArgumentException(""The field must be supported"");
",0,0,0,1,2,0,0,2,0,3,66,7,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,11,69,"        return iField;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,11,73,"        return iField.isPrecise();
",0,0,0,1,2,1,4,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,11,77,"        return iField.getValueAsLong(duration, instant);
",0,0,0,1,2,1,8,0,0,8,48,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,11,81,"        return iField.getMillis(value, instant);
",0,0,0,1,2,1,8,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,11,85,"        return iField.getMillis(value, instant);
",0,0,0,1,2,1,8,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,11,89,"        return iField.add(instant, value);
",0,0,0,1,2,1,8,0,0,8,34,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,11,93,"        return iField.add(instant, value);
",0,0,0,1,2,1,8,0,0,8,34,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,11,97,"        return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,69,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,11,101,"        return iField.getUnitMillis();
",0,0,0,1,2,1,4,0,0,4,30,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,11,49,"        return DurationFieldType.millis();
",0,0,0,1,2,1,4,0,0,4,34,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,11,53,"        return ""millis"";
",0,0,0,0,0,1,0,0,0,1,16,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,11,85,"        return FieldUtils.safeToInt(duration);
",0,0,0,1,2,1,6,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,11,89,"        return duration;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,11,93,"        return FieldUtils.safeToInt(duration);
",0,0,0,1,2,1,6,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,11,97,"        return duration;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,11,101,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,11,105,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,11,109,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,11,113,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,11,121,"        return FieldUtils.safeAdd(instant, value);
",0,0,0,1,2,1,8,0,0,8,42,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,11,125,"        return FieldUtils.safeToInt(FieldUtils.safeSubtract(minuendInstant, subtrahendInstant));
",0,0,0,2,4,1,12,0,0,12,88,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,11,129,"        return FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,66,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,11,134,"        long otherMillis = otherField.getUnitMillis();
",2,0,0,1,2,0,4,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,11,135,"        long thisMillis = getUnitMillis();
",2,0,0,1,2,0,2,0,0,4,34,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,11,137,"        if (thisMillis == otherMillis) {
",4,1,0,1,3,0,0,0,0,5,32,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,11,138,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,11,140,"        if (thisMillis < otherMillis) {
",4,1,0,1,3,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,11,141,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,6,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,11,143,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,11,148,"        if (obj instanceof MillisDurationField) {
",2,0,0,1,3,0,0,2,0,4,41,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,11,149,"            return getUnitMillis() == ((MillisDurationField) obj).getUnitMillis();
",2,1,0,4,8,1,4,2,0,9,70,6,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,11,151,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,11,155,"        return (int) getUnitMillis();
",0,0,0,2,4,1,2,0,0,2,29,6,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,11,164,"        return ""DurationField[millis]"";
",0,0,0,1,2,1,0,0,0,1,31,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,11,171,"        return INSTANCE;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,11,32,"public final class MillisDurationField extends DurationField implements Serializable {
",2,0,0,0,1,2,0,4,0,8,86,1,0.00000,0
