dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,449,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,1,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,452,"        if (StringUtils.isBlank(str)) {
",0,0,0,2,5,0,6,0,0,6,31,5,1,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,455,"        if (str.startsWith(""--"")) {
",0,0,0,2,5,0,4,0,0,5,27,5,1,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,462,"        if (str.startsWith(""0x"") || str.startsWith(""-0x"")) {
",0,1,0,3,7,0,8,0,0,11,52,4,1,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,465,"        char lastChar = str.charAt(str.length() - 1);
",2,1,0,2,4,0,8,0,0,11,45,5,1,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,469,"        int decPos = str.indexOf('.');
",2,0,0,1,2,0,4,0,0,7,30,5,1,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,470,"        int expPos = str.indexOf('e') + str.indexOf('E') + 1;
",2,1,0,2,4,0,8,0,0,13,53,5,1,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,472,"        if (decPos > -1) {
",2,1,0,1,3,0,0,0,0,4,18,4,1,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,484,"            if (expPos > -1) {
",2,1,0,1,3,0,0,0,0,4,18,6,1,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,487,"                mant = str;
",4,0,0,0,0,0,0,0,0,5,11,8,1,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,489,"            dec = null;
",2,0,0,0,0,0,0,0,0,3,11,6,1,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,491,"        if (!Character.isDigit(lastChar)) {
",0,0,0,2,5,0,6,0,0,7,35,4,1,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,492,"            if (expPos > -1 && expPos < str.length() - 1) {
",4,4,0,2,5,0,4,0,0,13,47,6,1,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,495,"                exp = null;
",2,0,0,0,0,0,0,0,0,3,11,8,1,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,498,"            String numeric = str.substring(0, str.length() - 1);
",2,1,0,2,4,0,8,2,0,13,52,6,1,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,499,"            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
",2,1,0,2,4,0,8,0,0,11,55,7,1,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,500,"            switch (lastChar) {
",2,0,0,1,3,0,0,0,0,2,19,6,1,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,503,"                    if (dec == null
",2,1,0,0,1,0,0,0,0,3,15,9,1,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,507,"                            return createLong(numeric);
",0,0,0,1,2,0,4,0,0,4,27,12,1,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,606,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,1,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,609,"        for (int i = str.length() - 1; i >= 0; i--) {
",6,2,0,2,5,0,4,0,0,13,45,4,1,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,610,"            if (str.charAt(i) != '0') {
",0,1,0,2,5,0,6,0,0,8,27,6,1,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,611,"                return false;
",0,0,0,0,0,0,0,0,0,1,13,8,1,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,628,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,1,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,631,"        return Float.valueOf(str);
",0,0,0,1,2,0,6,0,0,6,26,5,1,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,644,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,1,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,647,"        return Double.valueOf(str);
",0,0,0,1,2,0,6,0,0,6,27,5,1,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,661,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,1,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,665,"        return Integer.decode(str);
",0,0,0,1,2,0,6,0,0,6,27,5,1,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,694,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,1,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,697,"        return new BigInteger(str);
",2,0,0,1,2,0,0,2,0,4,27,5,1,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,710,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,1,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,714,"        if (StringUtils.isBlank(str)) {
",0,0,0,2,5,0,6,0,0,6,31,5,1,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,717,"        return new BigDecimal(str);
",2,0,0,1,2,0,0,2,0,4,27,5,1,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,678,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,1,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,681,"        return Long.valueOf(str);
",0,0,0,1,2,0,6,0,0,6,25,5,1,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1288,"        if (StringUtils.isEmpty(str)) {
",0,0,0,2,5,0,6,0,0,6,31,5,1,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1291,"        for (int i = 0; i < str.length(); i++) {
",6,1,0,2,5,0,4,0,0,12,40,4,1,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1292,"            if (!Character.isDigit(str.charAt(i))) {
",0,0,0,3,7,0,10,0,0,11,40,6,1,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1296,"        return true;
",0,0,0,0,0,0,0,0,0,1,12,4,1,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,191,"        return str == null || str.length() == 0;
",2,3,0,1,2,0,4,0,0,9,40,4,1,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,229,"        if (str == null || (strLen = str.length()) == 0) {
",4,3,0,3,7,0,4,0,0,12,50,4,1,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,232,"        for (int i = 0; i < strLen; i++) {
",8,1,0,1,3,0,0,0,0,10,34,4,1,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,233,"            if ((Character.isWhitespace(str.charAt(i)) == false)) {
",0,1,0,4,9,0,10,0,0,12,55,7,1,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,234,"                return false;
",0,0,0,0,0,0,0,0,0,1,13,8,1,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,453,"            throw new NumberFormatException(""A blank string is not a valid number"");
",0,0,0,1,2,0,0,2,0,3,72,7,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,460,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,476,"                    throw new NumberFormatException(str + "" is not a valid number."");
",2,1,0,1,2,0,0,2,0,6,65,11,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,485,"                mant = str.substring(0, expPos);
",2,0,0,1,2,0,6,0,0,9,32,8,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,508,"                        } catch (NumberFormatException nfe) {
",2,0,0,1,4,0,0,2,0,4,37,11,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,511,"                        return createBigInteger(numeric);
",0,0,0,1,2,0,4,0,0,4,33,10,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,514,"                    throw new NumberFormatException(str + "" is not a valid number."");
",2,1,0,1,2,0,0,2,0,6,65,8,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,527,"                    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,525,"                    } catch (NumberFormatException nfe) {
",2,0,0,1,4,0,0,2,0,4,37,9,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,538,"                    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,536,"                    } catch (NumberFormatException nfe) {
",2,0,0,1,4,0,0,2,0,4,37,9,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,541,"                    } catch (NumberFormatException e) {
",2,0,0,1,4,0,0,2,0,4,35,9,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,581,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,579,"                } catch (NumberFormatException nfe) {
",2,0,0,1,4,0,0,2,0,4,37,10,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,584,"                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
",2,3,0,5,11,0,8,0,0,15,66,10,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,585,"                        return d;
",2,0,0,0,0,0,0,0,0,2,9,12,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,587,"                } catch (NumberFormatException nfe) {
",2,0,0,1,4,0,0,2,0,4,37,10,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,591,"                return createBigDecimal(str);
",0,0,0,1,2,0,4,0,0,4,29,9,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,614,"        return str.length() > 0;
",0,1,0,1,2,0,4,0,0,5,24,4,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1313,"        if (StringUtils.isEmpty(str)) {
",0,0,0,2,5,0,6,0,0,6,31,5,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1314,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1316,"        char[] chars = str.toCharArray();
",2,0,0,2,4,0,4,0,0,6,33,5,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1317,"        int sz = chars.length;
",6,0,0,0,0,0,0,0,0,6,22,5,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1318,"        boolean hasExp = false;
",2,0,0,0,0,0,0,0,0,3,23,5,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1319,"        boolean hasDecPoint = false;
",2,0,0,0,0,0,0,0,0,3,28,5,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1320,"        boolean allowSigns = false;
",2,0,0,0,0,0,0,0,0,3,27,5,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1321,"        boolean foundDigit = false;
",2,0,0,0,0,0,0,0,0,3,27,5,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1323,"        int start = (chars[0] == '-') ? 1 : 0;
",2,1,1,2,4,0,0,0,0,6,38,5,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1324,"        if (sz > start + 1) {
",4,2,0,1,3,0,0,0,0,6,21,4,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1325,"            if (chars[start] == '0' && chars[start + 1] == 'x') {
",2,4,1,3,7,0,0,0,0,14,53,6,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1326,"                int i = start + 2;
",4,1,0,0,0,0,0,0,0,5,18,9,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1327,"                if (i == sz) {
",4,1,0,1,3,0,0,0,0,5,14,8,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1331,"                for (; i < chars.length; i++) {
",8,1,0,1,3,0,0,0,0,10,31,8,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1332,"                    if ((chars[i] < '0' || chars[i] > '9')
",0,3,1,3,7,0,0,0,0,13,38,13,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1335,"                        return false;
",0,0,0,0,0,0,0,0,0,1,13,12,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1338,"                return true;
",0,0,0,0,0,0,0,0,0,1,12,8,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1341,"        sz--; // don't want to loop to the last char, check it afterwords
",2,0,0,0,0,0,0,0,0,3,65,4,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1343,"        int i = start;
",4,0,0,0,0,0,0,0,0,4,14,5,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1346,"        while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {
",12,6,0,2,5,0,0,0,0,19,61,4,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1347,"            if (chars[i] >= '0' && chars[i] <= '9') {
",0,3,1,3,7,0,0,0,0,13,41,6,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1348,"                foundDigit = true;
",2,0,0,0,0,0,0,0,0,4,18,8,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1349,"                allowSigns = false;
",2,0,0,0,0,0,0,0,0,4,19,8,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1351,"            } else if (chars[i] == '.') {
",0,1,1,2,6,0,0,0,0,6,29,7,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1352,"                if (hasDecPoint || hasExp) {
",4,1,0,1,3,0,0,0,0,5,28,9,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1354,"                    return false;
",0,0,0,0,0,0,0,0,0,1,13,11,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1356,"                hasDecPoint = true;
",2,0,0,0,0,0,0,0,0,4,19,9,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1357,"            } else if (chars[i] == 'e' || chars[i] == 'E') {
",0,3,1,3,8,0,0,0,0,13,48,8,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1359,"                if (hasExp) {
",2,0,0,1,3,0,0,0,0,2,13,10,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1363,"                if (!foundDigit) {
",2,0,0,1,3,0,0,0,0,3,18,10,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1366,"                hasExp = true;
",2,0,0,0,0,0,0,0,0,4,14,10,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1367,"                allowSigns = true;
",2,0,0,0,0,0,0,0,0,4,18,10,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1368,"            } else if (chars[i] == '+' || chars[i] == '-') {
",0,3,1,3,8,0,0,0,0,13,48,9,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1369,"                if (!allowSigns) {
",2,0,0,1,3,0,0,0,0,3,18,11,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1370,"                    return false;
",0,0,0,0,0,0,0,0,0,1,13,13,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1372,"                allowSigns = false;
",2,0,0,0,0,0,0,0,0,4,19,11,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1373,"                foundDigit = false; // we need a digit after the E
",2,0,0,0,0,0,0,0,0,4,50,11,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1375,"                return false;
",0,0,0,0,0,0,0,0,0,1,13,11,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1377,"            i++;
",2,0,0,0,0,0,0,0,0,3,4,6,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1379,"        if (i < chars.length) {
",6,1,0,1,3,0,0,0,0,7,23,4,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1380,"            if (chars[i] >= '0' && chars[i] <= '9') {
",0,3,1,3,7,0,0,0,0,13,41,6,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1382,"                return true;
",0,0,0,0,0,0,0,0,0,1,12,8,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1384,"            if (chars[i] == 'e' || chars[i] == 'E') {
",0,3,1,3,7,0,0,0,0,13,41,6,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1386,"                return false;
",0,0,0,0,0,0,0,0,0,1,13,8,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1388,"            if (!allowSigns
",2,0,0,0,1,0,0,0,0,3,15,7,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1393,"                return foundDigit;
",2,0,0,0,0,0,0,0,0,2,18,8,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1395,"            if (chars[i] == 'l'
",0,1,1,1,3,0,0,0,0,6,19,7,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1398,"                return foundDigit && !hasExp;
",4,1,0,0,0,0,0,0,0,6,29,8,1.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1401,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,1.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,230,"            return true;
",0,0,0,0,0,0,0,0,0,1,12,6,0.50000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,41,"    public static final Long LONG_ZERO = new Long(0L);
",2,0,0,1,2,3,0,4,0,9,50,2,0.07273,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,43,"    public static final Long LONG_ONE = new Long(1L);
",2,0,0,1,2,3,0,4,0,9,49,2,0.07273,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,45,"    public static final Long LONG_MINUS_ONE = new Long(-1L);
",2,0,0,1,2,3,0,4,0,10,56,2,0.07273,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,47,"    public static final Integer INTEGER_ZERO = new Integer(0);
",2,0,0,1,2,3,0,4,0,9,58,2,0.07273,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,49,"    public static final Integer INTEGER_ONE = new Integer(1);
",2,0,0,1,2,3,0,4,0,9,57,2,0.07273,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,51,"    public static final Integer INTEGER_MINUS_ONE = new Integer(-1);
",2,0,0,1,2,3,0,4,0,10,64,2,0.07273,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,53,"    public static final Short SHORT_ZERO = new Short((short) 0);
",2,0,0,2,4,3,0,4,0,9,60,2,0.07273,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,55,"    public static final Short SHORT_ONE = new Short((short) 1);
",2,0,0,2,4,3,0,4,0,9,59,2,0.07273,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,57,"    public static final Short SHORT_MINUS_ONE = new Short((short) -1);
",2,0,0,2,4,3,0,4,0,10,66,2,0.07273,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,59,"    public static final Byte BYTE_ZERO = Byte.valueOf((byte) 0);
",2,0,0,2,4,3,4,2,0,11,60,2,0.07273,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,61,"    public static final Byte BYTE_ONE = Byte.valueOf((byte) 1);
",2,0,0,2,4,3,4,2,0,11,59,2,0.07273,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,63,"    public static final Byte BYTE_MINUS_ONE = Byte.valueOf((byte) -1);
",2,0,0,2,4,3,4,2,0,12,66,2,0.07273,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,65,"    public static final Double DOUBLE_ZERO = new Double(0.0d);
",2,0,0,1,2,3,0,4,0,9,58,2,0.07273,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,67,"    public static final Double DOUBLE_ONE = new Double(1.0d);
",2,0,0,1,2,3,0,4,0,9,57,2,0.07273,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,69,"    public static final Double DOUBLE_MINUS_ONE = new Double(-1.0d);
",2,0,0,1,2,3,0,4,0,10,64,2,0.07273,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,71,"    public static final Float FLOAT_ZERO = new Float(0.0f);
",2,0,0,1,2,3,0,4,0,9,55,2,0.07273,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,73,"    public static final Float FLOAT_ONE = new Float(1.0f);
",2,0,0,1,2,3,0,4,0,9,54,2,0.07273,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,75,"    public static final Float FLOAT_MINUS_ONE = new Float(-1.0f);
",2,0,0,1,2,3,0,4,0,10,61,2,0.07273,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,87,"    public static final String AWT_TOOLKIT = getSystemProperty(""awt.toolkit"");
",2,0,0,1,2,3,2,2,0,10,74,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,105,"    public static final String FILE_ENCODING = getSystemProperty(""file.encoding"");
",2,0,0,1,2,3,2,2,0,10,78,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,122,"    public static final String FILE_SEPARATOR = getSystemProperty(""file.separator"");
",2,0,0,1,2,3,2,2,0,10,80,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,138,"    public static final String JAVA_AWT_FONTS = getSystemProperty(""java.awt.fonts"");
",2,0,0,1,2,3,2,2,0,10,80,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,154,"    public static final String JAVA_AWT_GRAPHICSENV = getSystemProperty(""java.awt.graphicsenv"");
",2,0,0,1,2,3,2,2,0,10,92,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,175,"    public static final String JAVA_AWT_HEADLESS = getSystemProperty(""java.awt.headless"");
",2,0,0,1,2,3,2,2,0,10,86,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,191,"    public static final String JAVA_AWT_PRINTERJOB = getSystemProperty(""java.awt.printerjob"");
",2,0,0,1,2,3,2,2,0,10,90,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,207,"    public static final String JAVA_CLASS_PATH = getSystemProperty(""java.class.path"");
",2,0,0,1,2,3,2,2,0,10,82,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,224,"    public static final String JAVA_CLASS_VERSION = getSystemProperty(""java.class.version"");
",2,0,0,1,2,3,2,2,0,10,88,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,241,"    public static final String JAVA_COMPILER = getSystemProperty(""java.compiler"");
",2,0,0,1,2,3,2,2,0,10,78,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,258,"    public static final String JAVA_ENDORSED_DIRS = getSystemProperty(""java.endorsed.dirs"");
",2,0,0,1,2,3,2,2,0,10,88,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,275,"    public static final String JAVA_EXT_DIRS = getSystemProperty(""java.ext.dirs"");
",2,0,0,1,2,3,2,2,0,10,78,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,291,"    public static final String JAVA_HOME = getSystemProperty(JAVA_HOME_KEY);
",2,0,0,1,2,3,4,2,0,11,72,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,307,"    public static final String JAVA_IO_TMPDIR = getSystemProperty(JAVA_IO_TMPDIR_KEY);
",2,0,0,1,2,3,4,2,0,11,82,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,324,"    public static final String JAVA_LIBRARY_PATH = getSystemProperty(""java.library.path"");
",2,0,0,1,2,3,2,2,0,10,86,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,342,"    public static final String JAVA_RUNTIME_NAME = getSystemProperty(""java.runtime.name"");
",2,0,0,1,2,3,2,2,0,10,86,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,360,"    public static final String JAVA_RUNTIME_VERSION = getSystemProperty(""java.runtime.version"");
",2,0,0,1,2,3,2,2,0,10,92,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,377,"    public static final String JAVA_SPECIFICATION_NAME = getSystemProperty(""java.specification.name"");
",2,0,0,1,2,3,2,2,0,10,98,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,394,"    public static final String JAVA_SPECIFICATION_VENDOR = getSystemProperty(""java.specification.vendor"");
",2,0,0,1,2,3,2,2,0,10,102,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,411,"    public static final String JAVA_SPECIFICATION_VERSION = getSystemProperty(""java.specification.version"");
",2,0,0,1,2,3,2,2,0,10,104,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,428,"    public static final String JAVA_UTIL_PREFS_PREFERENCES_FACTORY = 
",2,0,0,0,0,3,0,2,0,7,64,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,445,"    public static final String JAVA_VENDOR = getSystemProperty(""java.vendor"");
",2,0,0,1,2,3,2,2,0,10,74,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,461,"    public static final String JAVA_VENDOR_URL = getSystemProperty(""java.vendor.url"");
",2,0,0,1,2,3,2,2,0,10,82,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,477,"    public static final String JAVA_VERSION = getSystemProperty(""java.version"");
",2,0,0,1,2,3,2,2,0,10,76,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,495,"    public static final String JAVA_VM_INFO = getSystemProperty(""java.vm.info"");
",2,0,0,1,2,3,2,2,0,10,76,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,512,"    public static final String JAVA_VM_NAME = getSystemProperty(""java.vm.name"");
",2,0,0,1,2,3,2,2,0,10,76,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,529,"    public static final String JAVA_VM_SPECIFICATION_NAME = getSystemProperty(""java.vm.specification.name"");
",2,0,0,1,2,3,2,2,0,10,104,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,546,"    public static final String JAVA_VM_SPECIFICATION_VENDOR = getSystemProperty(""java.vm.specification.vendor"");
",2,0,0,1,2,3,2,2,0,10,108,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,563,"    public static final String JAVA_VM_SPECIFICATION_VERSION = getSystemProperty(""java.vm.specification.version"");
",2,0,0,1,2,3,2,2,0,10,110,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,580,"    public static final String JAVA_VM_VENDOR = getSystemProperty(""java.vm.vendor"");
",2,0,0,1,2,3,2,2,0,10,80,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,597,"    public static final String JAVA_VM_VERSION = getSystemProperty(""java.vm.version"");
",2,0,0,1,2,3,2,2,0,10,82,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,614,"    public static final String LINE_SEPARATOR = getSystemProperty(""line.separator"");
",2,0,0,1,2,3,2,2,0,10,80,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,630,"    public static final String OS_ARCH = getSystemProperty(""os.arch"");
",2,0,0,1,2,3,2,2,0,10,66,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,646,"    public static final String OS_NAME = getSystemProperty(""os.name"");
",2,0,0,1,2,3,2,2,0,10,66,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,662,"    public static final String OS_VERSION = getSystemProperty(""os.version"");
",2,0,0,1,2,3,2,2,0,10,72,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,679,"    public static final String PATH_SEPARATOR = getSystemProperty(""path.separator"");
",2,0,0,1,2,3,2,2,0,10,80,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,698,"    public static final String USER_COUNTRY = 
",2,0,0,0,0,3,0,2,0,7,41,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,717,"    public static final String USER_DIR = getSystemProperty(USER_DIR_KEY);
",2,0,0,1,2,3,4,2,0,11,70,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,733,"    public static final String USER_HOME = getSystemProperty(USER_HOME_KEY);
",2,0,0,1,2,3,4,2,0,11,72,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,751,"    public static final String USER_LANGUAGE = getSystemProperty(""user.language"");
",2,0,0,1,2,3,2,2,0,10,78,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,767,"    public static final String USER_NAME = getSystemProperty(""user.name"");
",2,0,0,1,2,3,2,2,0,10,70,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,784,"    public static final String USER_TIMEZONE = getSystemProperty(""user.timezone"");
",2,0,0,1,2,3,2,2,0,10,78,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,798,"    public static final String JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();
",2,0,0,1,2,3,2,2,0,9,74,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,818,"    public static final float JAVA_VERSION_FLOAT = getJavaVersionAsFloat();
",2,0,0,1,2,3,2,0,0,7,71,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,833,"    public static final int JAVA_VERSION_INT = getJavaVersionAsInt();
",2,0,0,1,2,3,2,0,0,7,65,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,846,"    public static final boolean IS_JAVA_1_1 = getJavaVersionMatches(""1.1"");
",2,0,0,1,2,3,2,0,0,8,71,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,854,"    public static final boolean IS_JAVA_1_2 = getJavaVersionMatches(""1.2"");
",2,0,0,1,2,3,2,0,0,8,71,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,862,"    public static final boolean IS_JAVA_1_3 = getJavaVersionMatches(""1.3"");
",2,0,0,1,2,3,2,0,0,8,71,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,870,"    public static final boolean IS_JAVA_1_4 = getJavaVersionMatches(""1.4"");
",2,0,0,1,2,3,2,0,0,8,71,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,878,"    public static final boolean IS_JAVA_1_5 = getJavaVersionMatches(""1.5"");
",2,0,0,1,2,3,2,0,0,8,71,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,886,"    public static final boolean IS_JAVA_1_6 = getJavaVersionMatches(""1.6"");
",2,0,0,1,2,3,2,0,0,8,71,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,896,"    public static final boolean IS_JAVA_1_7 = getJavaVersionMatches(""1.7"");
",2,0,0,1,2,3,2,0,0,8,71,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,914,"    public static final boolean IS_OS_AIX = getOSMatches(""AIX"");
",2,0,0,1,2,3,2,0,0,8,60,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,924,"    public static final boolean IS_OS_HP_UX = getOSMatches(""HP-UX"");
",2,0,0,1,2,3,2,0,0,8,64,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,934,"    public static final boolean IS_OS_IRIX = getOSMatches(""Irix"");
",2,0,0,1,2,3,2,0,0,8,62,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,944,"    public static final boolean IS_OS_LINUX = getOSMatches(""Linux"") || getOSMatches(""LINUX"");
",2,1,0,2,4,3,4,0,0,12,89,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,954,"    public static final boolean IS_OS_MAC = getOSMatches(""Mac"");
",2,0,0,1,2,3,2,0,0,8,60,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,964,"    public static final boolean IS_OS_MAC_OSX = getOSMatches(""Mac OS X"");
",2,0,0,1,2,3,2,0,0,8,69,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,974,"    public static final boolean IS_OS_OS2 = getOSMatches(""OS/2"");
",2,0,0,1,2,3,2,0,0,8,61,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,984,"    public static final boolean IS_OS_SOLARIS = getOSMatches(""Solaris"");
",2,0,0,1,2,3,2,0,0,8,68,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,994,"    public static final boolean IS_OS_SUN_OS = getOSMatches(""SunOS"");
",2,0,0,1,2,3,2,0,0,8,65,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1005,"    public static final boolean IS_OS_UNIX =
",2,0,0,0,0,3,0,0,0,5,40,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1017,"    public static final boolean IS_OS_WINDOWS = getOSMatches(OS_NAME_WINDOWS_PREFIX);
",2,0,0,1,2,3,4,0,0,9,81,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1027,"    public static final boolean IS_OS_WINDOWS_2000 = getOSMatches(OS_NAME_WINDOWS_PREFIX, ""5.0"");
",2,0,0,1,2,3,4,0,0,10,93,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1037,"    public static final boolean IS_OS_WINDOWS_95 = getOSMatches(OS_NAME_WINDOWS_PREFIX + "" 9"", ""4.0"");
",4,1,0,1,2,3,2,0,0,12,98,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1048,"    public static final boolean IS_OS_WINDOWS_98 = getOSMatches(OS_NAME_WINDOWS_PREFIX + "" 9"", ""4.1"");
",4,1,0,1,2,3,2,0,0,12,98,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1059,"    public static final boolean IS_OS_WINDOWS_ME = getOSMatches(OS_NAME_WINDOWS_PREFIX, ""4.9"");
",2,0,0,1,2,3,4,0,0,10,91,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1070,"    public static final boolean IS_OS_WINDOWS_NT = getOSMatches(OS_NAME_WINDOWS_PREFIX + "" NT"");
",4,1,0,1,2,3,2,0,0,11,92,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1081,"    public static final boolean IS_OS_WINDOWS_XP = getOSMatches(OS_NAME_WINDOWS_PREFIX, ""5.1"");
",2,0,0,1,2,3,4,0,0,10,91,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1092,"    public static final boolean IS_OS_WINDOWS_VISTA = getOSMatches(OS_NAME_WINDOWS_PREFIX, ""6.0""); 
",2,0,0,1,2,3,4,0,0,10,94,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1102,"    public static final boolean IS_OS_WINDOWS_7 = getOSMatches(OS_NAME_WINDOWS_PREFIX, ""6.1""); 
",2,0,0,1,2,3,4,0,0,10,90,2,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1133,"        if (JAVA_VERSION_TRIMMED == null) {
",2,1,0,1,3,0,0,0,0,3,35,4,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1136,"        String str = JAVA_VERSION_TRIMMED.substring(0, 3);
",2,0,0,1,2,0,4,2,0,8,50,4,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1137,"        if (JAVA_VERSION_TRIMMED.length() >= 5) {
",0,1,0,2,5,0,4,0,0,5,41,4,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1138,"            str = str + JAVA_VERSION_TRIMMED.substring(4, 5);
",4,1,0,1,2,0,4,0,0,10,49,6,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1141,"            return Float.parseFloat(str);
",0,0,0,1,2,0,6,0,0,6,29,7,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1162,"        if (JAVA_VERSION_TRIMMED == null) {
",2,1,0,1,3,0,0,0,0,3,35,4,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1165,"        String str = JAVA_VERSION_TRIMMED.substring(0, 1);
",2,0,0,1,2,0,4,2,0,8,50,4,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1166,"        str = str + JAVA_VERSION_TRIMMED.substring(2, 3);
",4,1,0,1,2,0,4,0,0,10,49,4,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1167,"        if (JAVA_VERSION_TRIMMED.length() >= 5) {
",0,1,0,2,5,0,4,0,0,5,41,4,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1168,"            str = str + JAVA_VERSION_TRIMMED.substring(4, 5);
",4,1,0,1,2,0,4,0,0,10,49,6,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1173,"            return Integer.parseInt(str);
",0,0,0,1,2,0,6,0,0,6,29,7,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1185,"        if (JAVA_VERSION != null) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1186,"            for (int i = 0; i < JAVA_VERSION.length(); i++) {
",6,1,0,2,5,0,4,0,0,12,49,6,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1187,"                char ch = JAVA_VERSION.charAt(i);
",2,0,0,1,2,0,6,0,0,8,33,9,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1188,"                if (ch >= '0' && ch <= '9') {
",4,3,0,1,3,0,0,0,0,9,29,8,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1189,"                    return JAVA_VERSION.substring(i);
",0,0,0,1,2,0,6,0,0,6,33,11,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1203,"        if (JAVA_VERSION_TRIMMED == null) {
",2,1,0,1,3,0,0,0,0,3,35,4,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1206,"        return JAVA_VERSION_TRIMMED.startsWith(versionPrefix);
",0,0,0,1,2,0,6,0,0,6,54,5,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1216,"        if (OS_NAME == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1219,"        return OS_NAME.startsWith(osNamePrefix);
",0,0,0,1,2,0,6,0,0,6,40,5,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1230,"        if (OS_NAME == null || OS_VERSION == null) {
",4,3,0,1,3,0,0,0,0,7,44,4,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1233,"        return OS_NAME.startsWith(osNamePrefix) && OS_VERSION.startsWith(osVersionPrefix);
",0,1,0,2,4,0,12,0,0,13,82,4,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1249,"            return System.getProperty(property);
",0,0,0,1,2,0,6,0,0,6,36,7,0.06667,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1274,"        return JAVA_VERSION_FLOAT >= requiredVersion;
",4,1,0,0,0,0,0,0,0,5,45,4,0.06667,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,85,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,86,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,107,"        return toInt(str, 0);
",0,0,0,1,2,0,4,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,128,"        if(str == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,129,"            return defaultValue;
",2,0,0,0,0,0,0,0,0,2,20,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,132,"            return Integer.parseInt(str);
",0,0,0,1,2,0,6,0,0,6,29,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,133,"        } catch (NumberFormatException nfe) {
",2,0,0,1,4,0,0,2,0,4,37,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,134,"            return defaultValue;
",2,0,0,0,0,0,0,0,0,2,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,156,"        return toLong(str, 0L);
",0,0,0,1,2,0,4,0,0,4,23,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,177,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,178,"            return defaultValue;
",2,0,0,0,0,0,0,0,0,2,20,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,181,"            return Long.parseLong(str);
",0,0,0,1,2,0,6,0,0,6,27,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,182,"        } catch (NumberFormatException nfe) {
",2,0,0,1,4,0,0,2,0,4,37,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,183,"            return defaultValue;
",2,0,0,0,0,0,0,0,0,2,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,206,"        return toFloat(str, 0.0f);
",0,0,0,1,2,0,4,0,0,4,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,229,"      if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,230,"          return defaultValue;
",2,0,0,0,0,0,0,0,0,2,20,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,233,"          return Float.parseFloat(str);
",0,0,0,1,2,0,6,0,0,6,29,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,234,"      } catch (NumberFormatException nfe) {
",2,0,0,1,4,0,0,2,0,4,37,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,235,"          return defaultValue;
",2,0,0,0,0,0,0,0,0,2,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,258,"        return toDouble(str, 0.0d);
",0,0,0,1,2,0,4,0,0,4,27,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,281,"      if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,282,"          return defaultValue;
",2,0,0,0,0,0,0,0,0,2,20,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,285,"          return Double.parseDouble(str);
",0,0,0,1,2,0,6,0,0,6,31,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,286,"      } catch (NumberFormatException nfe) {
",2,0,0,1,4,0,0,2,0,4,37,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,287,"          return defaultValue;
",2,0,0,0,0,0,0,0,0,2,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,309,"        return toByte(str, (byte) 0);
",0,0,0,2,4,0,4,0,0,4,29,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,329,"        if(str == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,330,"            return defaultValue;
",2,0,0,0,0,0,0,0,0,2,20,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,333,"            return Byte.parseByte(str);
",0,0,0,1,2,0,6,0,0,6,27,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,334,"        } catch (NumberFormatException nfe) {
",2,0,0,1,4,0,0,2,0,4,37,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,335,"            return defaultValue;
",2,0,0,0,0,0,0,0,0,2,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,356,"        return toShort(str, (short) 0);
",0,0,0,2,4,0,4,0,0,4,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,376,"        if(str == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,377,"            return defaultValue;
",2,0,0,0,0,0,0,0,0,2,20,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,380,"            return Short.parseShort(str);
",0,0,0,1,2,0,6,0,0,6,29,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,381,"        } catch (NumberFormatException nfe) {
",2,0,0,1,4,0,0,2,0,4,37,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,382,"            return defaultValue;
",2,0,0,0,0,0,0,0,0,2,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,450,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,463,"            return createInteger(str);
",0,0,0,1,2,0,4,0,0,4,26,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,474,"            if (expPos > -1) {
",2,1,0,1,3,0,0,0,0,4,18,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,475,"                if (expPos < decPos) {
",4,1,0,1,3,0,0,0,0,5,22,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,478,"                dec = str.substring(decPos + 1, expPos);
",4,1,0,1,2,0,6,0,0,12,40,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,480,"                dec = str.substring(decPos + 1);
",4,1,0,1,2,0,4,0,0,10,32,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,482,"            mant = str.substring(0, decPos);
",2,0,0,1,2,0,6,0,0,9,32,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,493,"                exp = str.substring(expPos + 1, str.length() - 1);
",4,2,0,2,4,0,8,0,0,15,50,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,518,"                        Float f = NumberUtils.createFloat(numeric);
",2,0,0,1,2,0,6,2,0,10,43,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,519,"                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
",2,3,0,5,11,0,8,0,0,15,65,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,522,"                            return f;
",2,0,0,0,0,0,0,0,0,2,9,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,532,"                        Double d = NumberUtils.createDouble(numeric);
",2,0,0,1,2,0,6,2,0,10,45,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,533,"                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
",2,3,0,5,11,0,8,0,0,15,65,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,534,"                            return d;
",2,0,0,0,0,0,0,0,0,2,9,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,540,"                        return createBigDecimal(numeric);
",0,0,0,1,2,0,4,0,0,4,33,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,546,"                    throw new NumberFormatException(str + "" is not a valid number."");
",2,1,0,1,2,0,0,2,0,6,65,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,552,"            if (expPos > -1 && expPos < str.length() - 1) {
",4,4,0,2,5,0,4,0,0,13,47,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,553,"                exp = str.substring(expPos + 1, str.length());
",4,1,0,2,4,0,8,0,0,14,46,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,555,"                exp = null;
",2,0,0,0,0,0,0,0,0,3,11,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,557,"            if (dec == null && exp == null) {
",4,3,0,1,3,0,0,0,0,7,33,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,560,"                    return createInteger(str);
",0,0,0,1,2,0,4,0,0,4,26,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,561,"                } catch (NumberFormatException nfe) {
",2,0,0,1,4,0,0,2,0,4,37,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,565,"                    return createLong(str);
",0,0,0,1,2,0,4,0,0,4,23,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,566,"                } catch (NumberFormatException nfe) {
",2,0,0,1,4,0,0,2,0,4,37,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,569,"                return createBigInteger(str);
",0,0,0,1,2,0,4,0,0,4,29,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,573,"                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
",2,1,0,2,4,0,8,0,0,11,55,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,575,"                    Float f = createFloat(str);
",2,0,0,1,2,0,4,2,0,8,27,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,576,"                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
",2,3,0,5,11,0,8,0,0,15,65,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,577,"                        return f;
",2,0,0,0,0,0,0,0,0,2,9,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,583,"                    Double d = createDouble(str);
",2,0,0,1,2,0,4,2,0,8,29,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,589,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,607,"            return true;
",0,0,0,0,0,0,0,0,0,1,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,629,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,645,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,662,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,679,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,695,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,711,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,715,"            throw new NumberFormatException(""A blank string is not a valid number"");
",0,0,0,1,2,0,0,2,0,3,72,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,732,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,733,"            throw new IllegalArgumentException(""The Array must not be null"");
",0,0,0,1,2,0,0,2,0,4,65,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,734,"        } else if (array.length == 0) {
",4,1,0,1,4,0,0,0,0,5,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,735,"            throw new IllegalArgumentException(""Array cannot be empty."");
",0,0,0,1,2,0,0,2,0,3,61,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,739,"        long min = array[0];
",2,0,1,1,2,0,0,0,0,4,20,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,740,"        for (int i = 1; i < array.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,741,"            if (array[i] < min) {
",2,1,1,2,5,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,742,"                min = array[i];
",2,0,1,1,2,0,0,0,0,7,15,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,746,"        return min;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,759,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,760,"            throw new IllegalArgumentException(""The Array must not be null"");
",0,0,0,1,2,0,0,2,0,4,65,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,761,"        } else if (array.length == 0) {
",4,1,0,1,4,0,0,0,0,5,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,762,"            throw new IllegalArgumentException(""Array cannot be empty."");
",0,0,0,1,2,0,0,2,0,3,61,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,766,"        int min = array[0];
",2,0,1,1,2,0,0,0,0,4,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,767,"        for (int j = 1; j < array.length; j++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,768,"            if (array[j] < min) {
",2,1,1,2,5,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,769,"                min = array[j];
",2,0,1,1,2,0,0,0,0,7,15,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,773,"        return min;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,786,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,787,"            throw new IllegalArgumentException(""The Array must not be null"");
",0,0,0,1,2,0,0,2,0,4,65,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,788,"        } else if (array.length == 0) {
",4,1,0,1,4,0,0,0,0,5,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,789,"            throw new IllegalArgumentException(""Array cannot be empty."");
",0,0,0,1,2,0,0,2,0,3,61,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,793,"        short min = array[0];
",2,0,1,1,2,0,0,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,794,"        for (int i = 1; i < array.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,795,"            if (array[i] < min) {
",2,1,1,2,5,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,796,"                min = array[i];
",2,0,1,1,2,0,0,0,0,7,15,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,800,"        return min;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,813,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,814,"            throw new IllegalArgumentException(""The Array must not be null"");
",0,0,0,1,2,0,0,2,0,4,65,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,815,"        } else if (array.length == 0) {
",4,1,0,1,4,0,0,0,0,5,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,816,"            throw new IllegalArgumentException(""Array cannot be empty."");
",0,0,0,1,2,0,0,2,0,3,61,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,820,"        byte min = array[0];
",2,0,1,1,2,0,0,0,0,4,20,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,821,"        for (int i = 1; i < array.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,822,"            if (array[i] < min) {
",2,1,1,2,5,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,823,"                min = array[i];
",2,0,1,1,2,0,0,0,0,7,15,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,827,"        return min;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,841,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,842,"            throw new IllegalArgumentException(""The Array must not be null"");
",0,0,0,1,2,0,0,2,0,4,65,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,843,"        } else if (array.length == 0) {
",4,1,0,1,4,0,0,0,0,5,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,844,"            throw new IllegalArgumentException(""Array cannot be empty."");
",0,0,0,1,2,0,0,2,0,3,61,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,848,"        double min = array[0];
",2,0,1,1,2,0,0,0,0,4,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,849,"        for (int i = 1; i < array.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,850,"            if (Double.isNaN(array[i])) {
",0,0,1,3,7,0,4,0,0,8,29,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,851,"                return Double.NaN;
",4,0,0,0,0,0,0,0,0,4,18,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,853,"            if (array[i] < min) {
",2,1,1,2,5,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,854,"                min = array[i];
",2,0,1,1,2,0,0,0,0,7,15,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,858,"        return min;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,872,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,873,"            throw new IllegalArgumentException(""The Array must not be null"");
",0,0,0,1,2,0,0,2,0,4,65,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,874,"        } else if (array.length == 0) {
",4,1,0,1,4,0,0,0,0,5,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,875,"            throw new IllegalArgumentException(""Array cannot be empty."");
",0,0,0,1,2,0,0,2,0,3,61,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,879,"        float min = array[0];
",2,0,1,1,2,0,0,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,880,"        for (int i = 1; i < array.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,881,"            if (Float.isNaN(array[i])) {
",0,0,1,3,7,0,4,0,0,8,28,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,882,"                return Float.NaN;
",4,0,0,0,0,0,0,0,0,4,17,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,884,"            if (array[i] < min) {
",2,1,1,2,5,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,885,"                min = array[i];
",2,0,1,1,2,0,0,0,0,7,15,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,889,"        return min;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,904,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,905,"            throw new IllegalArgumentException(""The Array must not be null"");
",0,0,0,1,2,0,0,2,0,4,65,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,906,"        } else if (array.length == 0) {
",4,1,0,1,4,0,0,0,0,5,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,907,"            throw new IllegalArgumentException(""Array cannot be empty."");
",0,0,0,1,2,0,0,2,0,3,61,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,911,"        long max = array[0];
",2,0,1,1,2,0,0,0,0,4,20,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,912,"        for (int j = 1; j < array.length; j++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,913,"            if (array[j] > max) {
",2,1,1,2,5,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,914,"                max = array[j];
",2,0,1,1,2,0,0,0,0,7,15,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,918,"        return max;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,931,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,932,"            throw new IllegalArgumentException(""The Array must not be null"");
",0,0,0,1,2,0,0,2,0,4,65,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,933,"        } else if (array.length == 0) {
",4,1,0,1,4,0,0,0,0,5,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,934,"            throw new IllegalArgumentException(""Array cannot be empty."");
",0,0,0,1,2,0,0,2,0,3,61,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,938,"        int max = array[0];
",2,0,1,1,2,0,0,0,0,4,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,939,"        for (int j = 1; j < array.length; j++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,940,"            if (array[j] > max) {
",2,1,1,2,5,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,941,"                max = array[j];
",2,0,1,1,2,0,0,0,0,7,15,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,945,"        return max;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,958,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,959,"            throw new IllegalArgumentException(""The Array must not be null"");
",0,0,0,1,2,0,0,2,0,4,65,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,960,"        } else if (array.length == 0) {
",4,1,0,1,4,0,0,0,0,5,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,961,"            throw new IllegalArgumentException(""Array cannot be empty."");
",0,0,0,1,2,0,0,2,0,3,61,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,965,"        short max = array[0];
",2,0,1,1,2,0,0,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,966,"        for (int i = 1; i < array.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,967,"            if (array[i] > max) {
",2,1,1,2,5,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,968,"                max = array[i];
",2,0,1,1,2,0,0,0,0,7,15,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,972,"        return max;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,985,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,986,"            throw new IllegalArgumentException(""The Array must not be null"");
",0,0,0,1,2,0,0,2,0,4,65,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,987,"        } else if (array.length == 0) {
",4,1,0,1,4,0,0,0,0,5,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,988,"            throw new IllegalArgumentException(""Array cannot be empty."");
",0,0,0,1,2,0,0,2,0,3,61,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,992,"        byte max = array[0];
",2,0,1,1,2,0,0,0,0,4,20,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,993,"        for (int i = 1; i < array.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,994,"            if (array[i] > max) {
",2,1,1,2,5,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,995,"                max = array[i];
",2,0,1,1,2,0,0,0,0,7,15,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,999,"        return max;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1013,"        if (array== null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1014,"            throw new IllegalArgumentException(""The Array must not be null"");
",0,0,0,1,2,0,0,2,0,4,65,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1015,"        } else if (array.length == 0) {
",4,1,0,1,4,0,0,0,0,5,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1016,"            throw new IllegalArgumentException(""Array cannot be empty."");
",0,0,0,1,2,0,0,2,0,3,61,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1020,"        double max = array[0];
",2,0,1,1,2,0,0,0,0,4,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1021,"        for (int j = 1; j < array.length; j++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1022,"            if (Double.isNaN(array[j])) {
",0,0,1,3,7,0,4,0,0,8,29,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1023,"                return Double.NaN;
",4,0,0,0,0,0,0,0,0,4,18,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1025,"            if (array[j] > max) {
",2,1,1,2,5,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1026,"                max = array[j];
",2,0,1,1,2,0,0,0,0,7,15,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1030,"        return max;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1044,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1045,"            throw new IllegalArgumentException(""The Array must not be null"");
",0,0,0,1,2,0,0,2,0,4,65,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1046,"        } else if (array.length == 0) {
",4,1,0,1,4,0,0,0,0,5,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1047,"            throw new IllegalArgumentException(""Array cannot be empty."");
",0,0,0,1,2,0,0,2,0,3,61,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1051,"        float max = array[0];
",2,0,1,1,2,0,0,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1052,"        for (int j = 1; j < array.length; j++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1053,"            if (Float.isNaN(array[j])) {
",0,0,1,3,7,0,4,0,0,8,28,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1054,"                return Float.NaN;
",4,0,0,0,0,0,0,0,0,4,17,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1056,"            if (array[j] > max) {
",2,1,1,2,5,0,0,0,0,7,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1057,"                max = array[j];
",2,0,1,1,2,0,0,0,0,7,15,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1061,"        return max;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1075,"        if (b < a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1076,"            a = b;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1078,"        if (c < a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1079,"            a = c;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1081,"        return a;
",2,0,0,0,0,0,0,0,0,2,9,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1093,"        if (b < a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1094,"            a = b;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1096,"        if (c < a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1097,"            a = c;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1099,"        return a;
",2,0,0,0,0,0,0,0,0,2,9,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1111,"        if (b < a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1112,"            a = b;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1114,"        if (c < a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1115,"            a = c;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1117,"        return a;
",2,0,0,0,0,0,0,0,0,2,9,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1129,"        if (b < a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1130,"            a = b;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1132,"        if (c < a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1133,"            a = c;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1135,"        return a;
",2,0,0,0,0,0,0,0,0,2,9,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1151,"        return Math.min(Math.min(a, b), c);
",0,0,0,2,4,0,14,0,0,14,35,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1167,"        return Math.min(Math.min(a, b), c);
",0,0,0,2,4,0,14,0,0,14,35,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1181,"        if (b > a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1182,"            a = b;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1184,"        if (c > a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1185,"            a = c;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1187,"        return a;
",2,0,0,0,0,0,0,0,0,2,9,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1199,"        if (b > a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1200,"            a = b;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1202,"        if (c > a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1203,"            a = c;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1205,"        return a;
",2,0,0,0,0,0,0,0,0,2,9,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1217,"        if (b > a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1218,"            a = b;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1220,"        if (c > a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1221,"            a = c;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1223,"        return a;
",2,0,0,0,0,0,0,0,0,2,9,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1235,"        if (b > a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1236,"            a = b;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1238,"        if (c > a) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1239,"            a = c;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1241,"        return a;
",2,0,0,0,0,0,0,0,0,2,9,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1257,"        return Math.max(Math.max(a, b), c);
",0,0,0,2,4,0,14,0,0,14,35,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1273,"        return Math.max(Math.max(a, b), c);
",0,0,0,2,4,0,14,0,0,14,35,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1289,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1293,"                return false;
",0,0,0,0,0,0,0,0,0,1,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1328,"                    return false; // str == ""0x""
",0,0,0,0,0,0,0,0,0,1,28,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1361,"                    return false;
",0,0,0,0,0,0,0,0,0,1,13,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1364,"                    return false;
",0,0,0,0,0,0,0,0,0,1,13,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/math/NumberUtils,36,1405,"        return !allowSigns && foundDigit;
",4,1,0,0,0,0,0,0,0,6,33,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,167,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,168,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,209,"        return !StringUtils.isEmpty(str);
",0,0,0,1,2,0,6,0,0,7,33,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,237,"        return true;
",0,0,0,0,0,0,0,0,0,1,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,257,"        return !StringUtils.isBlank(str);
",0,0,0,1,2,0,6,0,0,7,33,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,286,"        return str == null ? null : str.trim();
",2,1,0,1,2,0,4,0,0,7,39,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,312,"        String ts = trim(str);
",2,0,0,1,2,0,4,2,0,8,22,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,313,"        return isEmpty(ts) ? null : ts;
",2,0,0,1,2,0,4,0,0,7,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,338,"        return str == null ? EMPTY : str.trim();
",4,1,0,1,2,0,4,0,0,9,40,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,366,"        return strip(str, null);
",0,0,0,1,2,0,4,0,0,5,24,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,393,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,394,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,396,"        str = strip(str, null);
",2,0,0,1,2,0,4,0,0,8,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,397,"        return str.length() == 0 ? null : str;
",2,1,0,1,2,0,4,0,0,7,38,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,423,"        return str == null ? EMPTY : strip(str, null);
",4,1,0,1,2,0,4,0,0,10,46,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,453,"        if (isEmpty(str)) {
",0,0,0,2,5,0,4,0,0,4,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,454,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,456,"        str = stripStart(str, stripChars);
",2,0,0,1,2,0,6,0,0,9,34,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,457,"        return stripEnd(str, stripChars);
",0,0,0,1,2,0,6,0,0,6,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,486,"        if (str == null || (strLen = str.length()) == 0) {
",4,3,0,3,7,0,4,0,0,12,50,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,487,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,489,"        int start = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,490,"        if (stripChars == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,491,"            while ((start != strLen) && Character.isWhitespace(str.charAt(start))) {
",4,2,0,4,9,0,10,0,0,16,72,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,492,"                start++;
",2,0,0,0,0,0,0,0,0,3,8,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,494,"        } else if (stripChars.length() == 0) {
",0,1,0,2,6,0,4,0,0,5,38,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,495,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,497,"            while ((start != strLen) && (stripChars.indexOf(str.charAt(start)) != -1)) {
",4,3,0,5,11,0,10,0,0,18,76,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,498,"                start++;
",2,0,0,0,0,0,0,0,0,3,8,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,501,"        return str.substring(start);
",0,0,0,1,2,0,6,0,0,6,28,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,530,"        if (str == null || (end = str.length()) == 0) {
",4,3,0,3,7,0,4,0,0,12,47,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,531,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,534,"        if (stripChars == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,535,"            while ((end != 0) && Character.isWhitespace(str.charAt(end - 1))) {
",4,3,0,4,9,0,8,0,0,15,67,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,536,"                end--;
",2,0,0,0,0,0,0,0,0,3,6,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,538,"        } else if (stripChars.length() == 0) {
",0,1,0,2,6,0,4,0,0,5,38,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,539,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,541,"            while ((end != 0) && (stripChars.indexOf(str.charAt(end - 1)) != -1)) {
",4,4,0,5,11,0,8,0,0,17,71,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,542,"                end--;
",2,0,0,0,0,0,0,0,0,3,6,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,545,"        return str.substring(0, end);
",0,0,0,1,2,0,6,0,0,6,29,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,570,"        return stripAll(strs, null);
",0,0,0,1,2,0,4,0,0,5,28,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,600,"        if (strs == null || (strsLen = strs.length) == 0) {
",8,3,0,2,5,0,0,0,0,12,51,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,601,"            return strs;
",2,0,0,0,0,0,0,0,0,2,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,603,"        String[] newArr = new String[strsLen];
",2,0,1,2,4,0,0,4,0,8,38,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,604,"        for (int i = 0; i < strsLen; i++) {
",8,1,0,1,3,0,0,0,0,10,35,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,605,"            newArr[i] = strip(strs[i], stripChars);
",0,0,1,3,6,0,4,0,0,13,39,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,607,"        return newArr;
",2,0,0,0,0,0,0,0,0,2,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,627,"        if(input == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,628,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,630,"        if(SystemUtils.isJavaVersionAtLeast(1.6f)) {
",0,0,0,2,5,0,4,0,0,4,44,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,637,"                Class<?> normalizerFormClass = ClassUtils.getClass(""java.text.Normalizer$Form"", false);
",2,0,0,1,2,0,4,2,0,10,87,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,640,"                Class<?> normalizerClass = ClassUtils.getClass(""java.text.Normalizer"", false);
",2,0,0,1,2,0,4,2,0,10,78,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,643,"                java.lang.reflect.Method method = normalizerClass.getMethod(""normalize"", CharSequence.class, normalizerFormClass );
",10,0,0,1,2,0,6,2,0,19,115,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,646,"                java.lang.reflect.Field nfd = normalizerFormClass.getField(""NFD"");
",10,0,0,1,2,0,4,0,0,15,66,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,649,"                String decomposed = (String) method.invoke( null, input, nfd.get(null) );
",2,0,0,3,6,0,10,4,0,16,73,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,652,"                java.util.regex.Pattern accentPattern = java.util.regex.Pattern.compile(""\\p{InCombiningDiacriticalMarks}+"");
",18,0,0,2,4,0,2,0,0,21,109,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,653,"                return accentPattern.matcher(decomposed).replaceAll("""");
",0,0,0,2,4,0,8,0,0,9,56,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,654,"            } catch(ClassNotFoundException cnfe) {
",2,0,0,1,4,0,0,2,0,4,38,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,655,"                throw new RuntimeException(""ClassNotFoundException occurred during 1.6 backcompat code"", cnfe);
",2,0,0,1,2,0,0,2,0,5,95,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,656,"            } catch(NoSuchMethodException nsme) {
",2,0,0,1,4,0,0,2,0,4,37,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,657,"                throw new RuntimeException(""NoSuchMethodException occurred during 1.6 backcompat code"", nsme);
",2,0,0,1,2,0,0,2,0,5,94,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,658,"            } catch(NoSuchFieldException nsfe) {
",2,0,0,1,4,0,0,2,0,4,36,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,659,"                throw new RuntimeException(""NoSuchFieldException occurred during 1.6 backcompat code"", nsfe);
",2,0,0,1,2,0,0,2,0,5,93,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,660,"            } catch(IllegalAccessException iae) {
",2,0,0,1,4,0,0,2,0,4,37,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,661,"                throw new RuntimeException(""IllegalAccessException occurred during 1.6 backcompat code"", iae);
",2,0,0,1,2,0,0,2,0,5,94,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,662,"            } catch(IllegalArgumentException iae) {
",2,0,0,1,4,0,0,2,0,4,39,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,663,"                throw new RuntimeException(""IllegalArgumentException occurred during 1.6 backcompat code"", iae);
",2,0,0,1,2,0,0,2,0,5,96,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,664,"            } catch(java.lang.reflect.InvocationTargetException ite) {
",10,0,0,1,4,0,0,0,0,10,58,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,665,"                throw new RuntimeException(""InvocationTargetException occurred during 1.6 backcompat code"", ite);
",2,0,0,1,2,0,0,2,0,5,97,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,666,"            } catch(SecurityException se) {
",2,0,0,1,4,0,0,2,0,4,31,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,667,"                throw new RuntimeException(""SecurityException occurred during 1.6 backcompat code"", se);
",2,0,0,1,2,0,0,2,0,5,88,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,670,"            throw new UnsupportedOperationException(""The stripAccents(String) method is not supported until Java 1.6"");
",0,0,0,2,4,0,0,2,0,3,107,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,697,"        return str1 == null ? str2 == null : str1.equals(str2);
",4,2,0,1,2,0,6,0,0,12,55,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,722,"        return str1 == null ? str2 == null : str1.equalsIgnoreCase(str2);
",4,2,0,1,2,0,6,0,0,12,65,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,747,"        if (isEmpty(str)) {
",0,0,0,2,5,0,4,0,0,4,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,748,"            return -1;
",0,0,0,0,0,0,0,0,0,1,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,750,"        return str.indexOf(searchChar);
",0,0,0,1,2,0,6,0,0,6,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,779,"        if (isEmpty(str)) {
",0,0,0,2,5,0,4,0,0,4,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,780,"            return -1;
",0,0,0,0,0,0,0,0,0,1,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,782,"        return str.indexOf(searchChar, startPos);
",0,0,0,1,2,0,8,0,0,8,41,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,808,"        if (str == null || searchStr == null) {
",4,3,0,1,3,0,0,0,0,7,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,809,"            return -1;
",0,0,0,0,0,0,0,0,0,1,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,811,"        return str.indexOf(searchStr);
",0,0,0,1,2,0,6,0,0,6,30,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,848,"        return ordinalIndexOf(str, searchStr, ordinal, false);
",0,0,0,1,2,0,8,0,0,9,54,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,853,"        if (str == null || searchStr == null || ordinal <= 0) {
",6,5,0,1,3,0,0,0,0,11,55,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,854,"            return INDEX_NOT_FOUND;
",2,0,0,0,0,0,0,0,0,2,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,856,"        if (searchStr.length() == 0) {
",0,1,0,2,5,0,4,0,0,5,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,857,"            return lastIndex ? str.length() : 0;
",2,0,0,1,2,0,4,0,0,6,36,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,859,"        int found = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,860,"        int index = lastIndex ? str.length() : INDEX_NOT_FOUND;
",6,0,0,1,2,0,4,0,0,10,55,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,862,"            if(lastIndex) {
",2,0,0,1,3,0,0,0,0,2,15,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,863,"                index = str.lastIndexOf(searchStr, index - 1);
",4,1,0,1,2,0,6,0,0,12,46,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,865,"                index = str.indexOf(searchStr, index + 1);
",4,1,0,1,2,0,6,0,0,12,42,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,867,"            if (index < 0) {
",2,1,0,1,3,0,0,0,0,3,16,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,868,"                return index;
",2,0,0,0,0,0,0,0,0,2,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,870,"            found++;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,871,"        } while (found < ordinal);
",4,1,0,1,3,0,0,0,0,5,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,872,"        return index;
",2,0,0,0,0,0,0,0,0,2,13,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,907,"        if (str == null || searchStr == null) {
",4,3,0,1,3,0,0,0,0,7,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,908,"            return -1;
",0,0,0,0,0,0,0,0,0,1,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,911,"        if (searchStr.length() == 0 && startPos >= str.length()) {
",2,3,0,3,7,0,8,0,0,13,58,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,912,"            return str.length();
",0,0,0,1,2,0,4,0,0,4,20,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,914,"        return str.indexOf(searchStr, startPos);
",0,0,0,1,2,0,8,0,0,8,40,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,942,"        return indexOfIgnoreCase(str, searchStr, 0);
",0,0,0,1,2,0,6,0,0,6,44,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,977,"        if (str == null || searchStr == null) {
",4,3,0,1,3,0,0,0,0,7,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,978,"            return -1;
",0,0,0,0,0,0,0,0,0,1,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,980,"        if (startPos < 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,981,"            startPos = 0;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,983,"        int endLimit = (str.length() - searchStr.length()) + 1;
",2,2,0,3,6,0,8,0,0,12,55,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,984,"        if (startPos > endLimit) {
",4,1,0,1,3,0,0,0,0,5,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,985,"            return -1;
",0,0,0,0,0,0,0,0,0,1,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,987,"        if (searchStr.length() == 0) {
",0,1,0,2,5,0,4,0,0,5,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,988,"            return startPos;
",2,0,0,0,0,0,0,0,0,2,16,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,990,"        for (int i = startPos; i < endLimit; i++) {
",10,1,0,1,3,0,0,0,0,12,43,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,991,"            if (str.regionMatches(true, i, searchStr, 0, searchStr.length())) {
",0,0,0,3,7,0,12,0,0,13,67,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,992,"                return i;
",2,0,0,0,0,0,0,0,0,2,9,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,995,"        return -1;
",0,0,0,0,0,0,0,0,0,1,10,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1020,"        if (isEmpty(str)) {
",0,0,0,2,5,0,4,0,0,4,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1021,"            return -1;
",0,0,0,0,0,0,0,0,0,1,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1023,"        return str.lastIndexOf(searchChar);
",0,0,0,1,2,0,6,0,0,6,35,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1054,"        if (isEmpty(str)) {
",0,0,0,2,5,0,4,0,0,4,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1055,"            return -1;
",0,0,0,0,0,0,0,0,0,1,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1057,"        return str.lastIndexOf(searchChar, startPos);
",0,0,0,1,2,0,8,0,0,8,45,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1083,"        if (str == null || searchStr == null) {
",4,3,0,1,3,0,0,0,0,7,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1084,"            return -1;
",0,0,0,0,0,0,0,0,0,1,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1086,"        return str.lastIndexOf(searchStr);
",0,0,0,1,2,0,6,0,0,6,34,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1123,"        return ordinalIndexOf(str, searchStr, ordinal, true);
",0,0,0,1,2,0,8,0,0,9,53,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1155,"        if (str == null || searchStr == null) {
",4,3,0,1,3,0,0,0,0,7,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1156,"            return -1;
",0,0,0,0,0,0,0,0,0,1,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1158,"        return str.lastIndexOf(searchStr, startPos);
",0,0,0,1,2,0,8,0,0,8,44,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1184,"        if (str == null || searchStr == null) {
",4,3,0,1,3,0,0,0,0,7,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1185,"            return -1;
",0,0,0,0,0,0,0,0,0,1,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1187,"        return lastIndexOfIgnoreCase(str, searchStr, str.length());
",0,0,0,2,4,0,10,0,0,10,59,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1219,"        if (str == null || searchStr == null) {
",4,3,0,1,3,0,0,0,0,7,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1220,"            return -1;
",0,0,0,0,0,0,0,0,0,1,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1222,"        if (startPos > (str.length() - searchStr.length())) {
",2,2,0,4,9,0,8,0,0,12,53,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1223,"            startPos = str.length() - searchStr.length();
",2,1,0,2,4,0,8,0,0,12,45,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1225,"        if (startPos < 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1226,"            return -1;
",0,0,0,0,0,0,0,0,0,1,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1228,"        if (searchStr.length() == 0) {
",0,1,0,2,5,0,4,0,0,5,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1229,"            return startPos;
",2,0,0,0,0,0,0,0,0,2,16,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1232,"        for (int i = startPos; i >= 0; i--) {
",8,1,0,1,3,0,0,0,0,10,37,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1233,"            if (str.regionMatches(true, i, searchStr, 0, searchStr.length())) {
",0,0,0,3,7,0,12,0,0,13,67,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1234,"                return i;
",2,0,0,0,0,0,0,0,0,2,9,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1237,"        return -1;
",0,0,0,0,0,0,0,0,0,1,10,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1262,"        if (isEmpty(str)) {
",0,0,0,2,5,0,4,0,0,4,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1263,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1265,"        return str.indexOf(searchChar) >= 0;
",0,1,0,1,2,0,6,0,0,7,36,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1290,"        if (str == null || searchStr == null) {
",4,3,0,1,3,0,0,0,0,7,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1291,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1293,"        return str.indexOf(searchStr) >= 0;
",0,1,0,1,2,0,6,0,0,7,35,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1320,"        if (str == null || searchStr == null) {
",4,3,0,1,3,0,0,0,0,7,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1321,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1323,"        int len = searchStr.length();
",2,0,0,1,2,0,4,0,0,6,29,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1324,"        int max = str.length() - len;
",4,1,0,1,2,0,4,0,0,9,29,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1325,"        for (int i = 0; i <= max; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1326,"            if (str.regionMatches(true, i, searchStr, 0, len)) {
",0,0,0,2,5,0,10,0,0,11,52,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1327,"                return true;
",0,0,0,0,0,0,0,0,0,1,12,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1330,"        return false;
",0,0,0,0,0,0,0,0,0,1,13,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1358,"        if (isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {
",0,1,0,3,7,0,10,0,0,11,54,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1359,"            return -1;
",0,0,0,0,0,0,0,0,0,1,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1361,"        for (int i = 0; i < str.length(); i++) {
",6,1,0,2,5,0,4,0,0,12,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1362,"            char ch = str.charAt(i);
",2,0,0,1,2,0,6,0,0,8,24,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1363,"            for (int j = 0; j < searchChars.length; j++) {
",10,1,0,1,3,0,0,0,0,12,46,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1364,"                if (searchChars[j] == ch) {
",2,1,1,2,5,0,0,0,0,7,27,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1365,"                    return i;
",2,0,0,0,0,0,0,0,0,2,9,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1369,"        return -1;
",0,0,0,0,0,0,0,0,0,1,10,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1395,"        if (isEmpty(str) || isEmpty(searchChars)) {
",0,1,0,3,7,0,8,0,0,9,43,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1396,"            return -1;
",0,0,0,0,0,0,0,0,0,1,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1398,"        return indexOfAny(str, searchChars.toCharArray());
",0,0,0,2,4,0,8,0,0,8,50,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1427,"        if (str == null || str.length() == 0 || searchChars == null || searchChars.length == 0) {
",8,7,0,2,5,0,4,0,0,19,89,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1428,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1430,"        for (int i = 0; i < str.length(); i++) {
",6,1,0,2,5,0,4,0,0,12,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1431,"            char ch = str.charAt(i);
",2,0,0,1,2,0,6,0,0,8,24,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1432,"            for (int j = 0; j < searchChars.length; j++) {
",10,1,0,1,3,0,0,0,0,12,46,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1433,"                if (searchChars[j] == ch) {
",2,1,1,2,5,0,0,0,0,7,27,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1434,"                    return true;
",0,0,0,0,0,0,0,0,0,1,12,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1438,"        return false;
",0,0,0,0,0,0,0,0,0,1,13,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1469,"        if (searchChars == null) {
",2,1,0,1,3,0,0,0,0,3,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1470,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1472,"        return containsAny(str, searchChars.toCharArray());
",0,0,0,2,4,0,8,0,0,8,51,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1500,"        if (isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {
",0,1,0,3,7,0,10,0,0,11,54,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1501,"            return -1;
",0,0,0,0,0,0,0,0,0,1,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1503,"        outer : for (int i = 0; i < str.length(); i++) {
",8,1,0,2,5,0,4,0,0,14,48,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1504,"            char ch = str.charAt(i);
",2,0,0,1,2,0,6,0,0,8,24,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1505,"            for (int j = 0; j < searchChars.length; j++) {
",10,1,0,1,3,0,0,0,0,12,46,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1506,"                if (searchChars[j] == ch) {
",2,1,1,2,5,0,0,0,0,7,27,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1507,"                    continue outer;
",2,0,0,0,0,0,0,0,0,2,15,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1510,"            return i;
",2,0,0,0,0,0,0,0,0,2,9,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1512,"        return -1;
",0,0,0,0,0,0,0,0,0,1,10,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1538,"        if (isEmpty(str) || isEmpty(searchChars)) {
",0,1,0,3,7,0,8,0,0,9,43,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1539,"            return -1;
",0,0,0,0,0,0,0,0,0,1,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1541,"        for (int i = 0; i < str.length(); i++) {
",6,1,0,2,5,0,4,0,0,12,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1542,"            if (searchChars.indexOf(str.charAt(i)) < 0) {
",0,1,0,3,7,0,10,0,0,11,45,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1543,"                return i;
",2,0,0,0,0,0,0,0,0,2,9,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1546,"        return -1;
",0,0,0,0,0,0,0,0,0,1,10,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1574,"        if ((valid == null) || (str == null)) {
",4,3,0,3,7,0,0,0,0,7,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1575,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1577,"        if (str.length() == 0) {
",0,1,0,2,5,0,4,0,0,5,24,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1578,"            return true;
",0,0,0,0,0,0,0,0,0,1,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1580,"        if (valid.length == 0) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1581,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1583,"        return indexOfAnyBut(str, valid) == -1;
",0,1,0,1,2,0,6,0,0,8,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1609,"        if (str == null || validChars == null) {
",4,3,0,1,3,0,0,0,0,7,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1610,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1612,"        return containsOnly(str, validChars.toCharArray());
",0,0,0,2,4,0,8,0,0,8,51,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1640,"        if (str == null || invalidChars == null) {
",4,3,0,1,3,0,0,0,0,7,42,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1641,"            return true;
",0,0,0,0,0,0,0,0,0,1,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1643,"        int strSize = str.length();
",2,0,0,1,2,0,4,0,0,6,27,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1644,"        int validSize = invalidChars.length;
",6,0,0,0,0,0,0,0,0,6,36,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1645,"        for (int i = 0; i < strSize; i++) {
",8,1,0,1,3,0,0,0,0,10,35,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1646,"            char ch = str.charAt(i);
",2,0,0,1,2,0,6,0,0,8,24,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1647,"            for (int j = 0; j < validSize; j++) {
",8,1,0,1,3,0,0,0,0,10,37,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1648,"                if (invalidChars[j] == ch) {
",2,1,1,2,5,0,0,0,0,7,28,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1649,"                    return false;
",0,0,0,0,0,0,0,0,0,1,13,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1653,"        return true;
",0,0,0,0,0,0,0,0,0,1,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1679,"        if (str == null || invalidChars == null) {
",4,3,0,1,3,0,0,0,0,7,42,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1680,"            return true;
",0,0,0,0,0,0,0,0,0,1,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1682,"        return containsNone(str, invalidChars.toCharArray());
",0,0,0,2,4,0,8,0,0,8,53,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1714,"        if ((str == null) || (searchStrs == null)) {
",4,3,0,3,7,0,0,0,0,7,44,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1715,"            return -1;
",0,0,0,0,0,0,0,0,0,1,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1717,"        int sz = searchStrs.length;
",6,0,0,0,0,0,0,0,0,6,27,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1720,"        int ret = Integer.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,6,28,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1722,"        int tmp = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1723,"        for (int i = 0; i < sz; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1724,"            String search = searchStrs[i];
",2,0,1,1,2,0,0,2,0,8,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1725,"            if (search == null) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1726,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1728,"            tmp = str.indexOf(search);
",2,0,0,1,2,0,6,0,0,9,26,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1729,"            if (tmp == -1) {
",2,1,0,1,3,0,0,0,0,4,16,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1730,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1733,"            if (tmp < ret) {
",4,1,0,1,3,0,0,0,0,5,16,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1734,"                ret = tmp;
",4,0,0,0,0,0,0,0,0,5,10,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1738,"        return (ret == Integer.MAX_VALUE) ? -1 : ret;
",8,1,0,1,2,0,0,0,0,10,45,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1767,"        if ((str == null) || (searchStrs == null)) {
",4,3,0,3,7,0,0,0,0,7,44,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1768,"            return -1;
",0,0,0,0,0,0,0,0,0,1,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1770,"        int sz = searchStrs.length;
",6,0,0,0,0,0,0,0,0,6,27,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1771,"        int ret = -1;
",2,0,0,0,0,0,0,0,0,3,13,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1772,"        int tmp = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1773,"        for (int i = 0; i < sz; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1774,"            String search = searchStrs[i];
",2,0,1,1,2,0,0,2,0,8,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1775,"            if (search == null) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1776,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1778,"            tmp = str.lastIndexOf(search);
",2,0,0,1,2,0,6,0,0,9,30,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1779,"            if (tmp > ret) {
",4,1,0,1,3,0,0,0,0,5,16,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1780,"                ret = tmp;
",4,0,0,0,0,0,0,0,0,5,10,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1783,"        return ret;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1813,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1814,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1818,"        if (start < 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1819,"            start = str.length() + start; // remember start is negative
",4,1,0,1,2,0,4,0,0,10,59,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1822,"        if (start < 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1823,"            start = 0;
",2,0,0,0,0,0,0,0,0,3,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1825,"        if (start > str.length()) {
",2,1,0,2,5,0,4,0,0,7,27,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1826,"            return EMPTY;
",2,0,0,0,0,0,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1829,"        return str.substring(start);
",0,0,0,1,2,0,6,0,0,6,28,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1868,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1869,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1873,"        if (end < 0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1874,"            end = str.length() + end; // remember end is negative
",4,1,0,1,2,0,4,0,0,10,53,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1876,"        if (start < 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1877,"            start = str.length() + start; // remember start is negative
",4,1,0,1,2,0,4,0,0,10,59,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1881,"        if (end > str.length()) {
",2,1,0,2,5,0,4,0,0,7,25,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1882,"            end = str.length();
",2,0,0,1,2,0,4,0,0,7,19,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1886,"        if (start > end) {
",4,1,0,1,3,0,0,0,0,5,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1887,"            return EMPTY;
",2,0,0,0,0,0,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1890,"        if (start < 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1891,"            start = 0;
",2,0,0,0,0,0,0,0,0,3,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1893,"        if (end < 0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1894,"            end = 0;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1897,"        return str.substring(start, end);
",0,0,0,1,2,0,8,0,0,8,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1923,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1924,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1926,"        if (len < 0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1927,"            return EMPTY;
",2,0,0,0,0,0,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1929,"        if (str.length() <= len) {
",2,1,0,2,5,0,4,0,0,7,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1930,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1932,"        return str.substring(0, len);
",0,0,0,1,2,0,6,0,0,6,29,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1956,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1957,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1959,"        if (len < 0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1960,"            return EMPTY;
",2,0,0,0,0,0,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1962,"        if (str.length() <= len) {
",2,1,0,2,5,0,4,0,0,7,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1963,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1965,"        return str.substring(str.length() - len);
",2,1,0,2,4,0,8,0,0,11,41,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1993,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1994,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1996,"        if (len < 0 || pos > str.length()) {
",4,3,0,2,5,0,4,0,0,11,36,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1997,"            return EMPTY;
",2,0,0,0,0,0,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,1999,"        if (pos < 0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2000,"            pos = 0;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2002,"        if (str.length() <= (pos + len)) {
",4,2,0,3,7,0,4,0,0,10,34,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2003,"            return str.substring(pos);
",0,0,0,1,2,0,6,0,0,6,26,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2005,"        return str.substring(pos, pos + len);
",4,1,0,1,2,0,6,0,0,11,37,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2038,"        if (isEmpty(str) || separator == null) {
",2,2,0,2,5,0,4,0,0,9,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2039,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2041,"        if (separator.length() == 0) {
",0,1,0,2,5,0,4,0,0,5,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2042,"            return EMPTY;
",2,0,0,0,0,0,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2044,"        int pos = str.indexOf(separator);
",2,0,0,1,2,0,6,0,0,8,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2045,"        if (pos == -1) {
",2,1,0,1,3,0,0,0,0,4,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2046,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2048,"        return str.substring(0, pos);
",0,0,0,1,2,0,6,0,0,6,29,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2080,"        if (isEmpty(str)) {
",0,0,0,2,5,0,4,0,0,4,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2081,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2083,"        if (separator == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2084,"            return EMPTY;
",2,0,0,0,0,0,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2086,"        int pos = str.indexOf(separator);
",2,0,0,1,2,0,6,0,0,8,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2087,"        if (pos == -1) {
",2,1,0,1,3,0,0,0,0,4,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2088,"            return EMPTY;
",2,0,0,0,0,0,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2090,"        return str.substring(pos + separator.length());
",2,1,0,2,4,0,8,0,0,11,47,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2121,"        if (isEmpty(str) || isEmpty(separator)) {
",0,1,0,3,7,0,8,0,0,9,41,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2122,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2124,"        int pos = str.lastIndexOf(separator);
",2,0,0,1,2,0,6,0,0,8,37,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2125,"        if (pos == -1) {
",2,1,0,1,3,0,0,0,0,4,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2126,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2128,"        return str.substring(0, pos);
",0,0,0,1,2,0,6,0,0,6,29,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2161,"        if (isEmpty(str)) {
",0,0,0,2,5,0,4,0,0,4,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2162,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2164,"        if (isEmpty(separator)) {
",0,0,0,2,5,0,4,0,0,4,25,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2165,"            return EMPTY;
",2,0,0,0,0,0,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2167,"        int pos = str.lastIndexOf(separator);
",2,0,0,1,2,0,6,0,0,8,37,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2168,"        if (pos == -1 || pos == (str.length() - separator.length())) {
",4,4,0,4,9,0,8,0,0,17,62,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2169,"            return EMPTY;
",2,0,0,0,0,0,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2171,"        return str.substring(pos + separator.length());
",2,1,0,2,4,0,8,0,0,11,47,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2198,"        return substringBetween(str, tag, tag);
",0,0,0,1,2,0,8,0,0,8,39,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2229,"        if (str == null || open == null || close == null) {
",6,5,0,1,3,0,0,0,0,11,51,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2230,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2232,"        int start = str.indexOf(open);
",2,0,0,1,2,0,6,0,0,8,30,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2233,"        if (start != -1) {
",2,1,0,1,3,0,0,0,0,4,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2234,"            int end = str.indexOf(close, start + open.length());
",4,1,0,2,4,0,10,0,0,15,52,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2235,"            if (end != -1) {
",2,1,0,1,3,0,0,0,0,4,16,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2236,"                return str.substring(start + open.length(), end);
",2,1,0,2,4,0,10,0,0,13,49,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2239,"        return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2265,"        if (str == null || isEmpty(open) || isEmpty(close)) {
",2,3,0,3,7,0,8,0,0,15,53,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2266,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2268,"        int strLen = str.length();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2269,"        if (strLen == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2270,"            return ArrayUtils.EMPTY_STRING_ARRAY;
",4,0,0,0,0,0,0,0,0,4,37,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2272,"        int closeLen = close.length();
",2,0,0,1,2,0,4,0,0,6,30,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2273,"        int openLen = open.length();
",2,0,0,1,2,0,4,0,0,6,28,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2274,"        List<String> list = new ArrayList<String>();
",2,0,0,1,2,0,0,8,0,10,44,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2275,"        int pos = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2276,"        while (pos < (strLen - closeLen)) {
",6,2,0,2,5,0,0,0,0,8,35,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2277,"            int start = str.indexOf(open, pos);
",2,0,0,1,2,0,8,0,0,10,35,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2278,"            if (start < 0) {
",2,1,0,1,3,0,0,0,0,3,16,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2279,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2281,"            start += openLen;
",4,0,0,0,0,0,0,0,0,5,17,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2282,"            int end = str.indexOf(close, start);
",2,0,0,1,2,0,8,0,0,10,36,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2283,"            if (end < 0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2284,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2286,"            list.add(str.substring(start, end));
",0,0,0,2,4,0,12,0,0,12,36,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2287,"            pos = end + closeLen;
",6,1,0,0,0,0,0,0,0,8,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2288,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2289,"        if (list.isEmpty()) {
",0,0,0,2,5,0,4,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2290,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2292,"        return list.toArray(new String [list.size()]);
",0,0,0,3,6,0,8,2,0,10,46,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2323,"        return split(str, null, -1);
",0,0,0,1,2,0,4,0,0,6,28,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2351,"        return splitWorker(str, separatorChar, false);
",0,0,0,1,2,0,6,0,0,7,46,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2380,"        return splitWorker(str, separatorChars, -1, false);
",0,0,0,1,2,0,6,0,0,8,51,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2414,"        return splitWorker(str, separatorChars, max, false);
",0,0,0,1,2,0,8,0,0,9,52,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2441,"        return splitByWholeSeparatorWorker( str, separator, -1, false ) ;
",0,0,0,1,2,0,6,0,0,8,65,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2472,"        return splitByWholeSeparatorWorker(str, separator, max, false);
",0,0,0,1,2,0,8,0,0,9,63,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2501,"        return splitByWholeSeparatorWorker(str, separator, -1, true);
",0,0,0,1,2,0,6,0,0,8,61,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2534,"        return splitByWholeSeparatorWorker(str, separator, max, true);
",0,0,0,1,2,0,8,0,0,9,62,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2554,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2555,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2558,"        int len = str.length();
",2,0,0,1,2,0,4,0,0,6,23,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2560,"        if (len == 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2561,"            return ArrayUtils.EMPTY_STRING_ARRAY;
",4,0,0,0,0,0,0,0,0,4,37,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2564,"        if ((separator == null) || (EMPTY.equals(separator))) {
",2,2,0,4,9,0,6,0,0,10,55,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2566,"            return splitWorker(str, null, max, preserveAllTokens);
",0,0,0,1,2,0,8,0,0,9,54,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2569,"        int separatorLength = separator.length();
",2,0,0,1,2,0,4,0,0,6,41,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2571,"        ArrayList<String> substrings = new ArrayList<String>();
",2,0,0,1,2,0,0,8,0,10,55,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2572,"        int numberOfSubstrings = 0;
",2,0,0,0,0,0,0,0,0,2,27,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2573,"        int beg = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2574,"        int end = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2575,"        while (end < len) {
",4,1,0,1,3,0,0,0,0,5,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2576,"            end = str.indexOf(separator, beg);
",2,0,0,1,2,0,8,0,0,11,34,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2578,"            if (end > -1) {
",2,1,0,1,3,0,0,0,0,4,15,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2579,"                if (end > beg) {
",4,1,0,1,3,0,0,0,0,5,16,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2580,"                    numberOfSubstrings += 1;
",2,0,0,0,0,0,0,0,0,3,24,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2582,"                    if (numberOfSubstrings == max) {
",4,1,0,1,3,0,0,0,0,5,32,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2583,"                        end = len;
",4,0,0,0,0,0,0,0,0,5,10,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2584,"                        substrings.add(str.substring(beg));
",0,0,0,2,4,0,10,0,0,10,35,13,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2588,"                        substrings.add(str.substring(beg, end));
",0,0,0,2,4,0,12,0,0,12,40,13,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2593,"                        beg = end + separatorLength;
",6,1,0,0,0,0,0,0,0,8,28,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2597,"                    if (preserveAllTokens) {
",2,0,0,1,3,0,0,0,0,2,24,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2598,"                        numberOfSubstrings += 1;
",2,0,0,0,0,0,0,0,0,3,24,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2599,"                        if (numberOfSubstrings == max) {
",4,1,0,1,3,0,0,0,0,5,32,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2600,"                            end = len;
",4,0,0,0,0,0,0,0,0,5,10,14,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2601,"                            substrings.add(str.substring(beg));
",0,0,0,2,4,0,10,0,0,10,35,15,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2603,"                            substrings.add(EMPTY);
",0,0,0,1,2,0,6,0,0,6,22,15,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2606,"                    beg = end + separatorLength;
",6,1,0,0,0,0,0,0,0,8,28,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2610,"                substrings.add(str.substring(beg));
",0,0,0,2,4,0,10,0,0,10,35,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2611,"                end = len;
",4,0,0,0,0,0,0,0,0,5,10,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2615,"        return substrings.toArray(new String[substrings.size()]);
",0,0,0,3,6,0,8,2,0,10,57,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2644,"        return splitWorker(str, null, -1, true);
",0,0,0,1,2,0,4,0,0,7,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2680,"        return splitWorker(str, separatorChar, true);
",0,0,0,1,2,0,6,0,0,7,45,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2698,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2699,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2701,"        int len = str.length();
",2,0,0,1,2,0,4,0,0,6,23,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2702,"        if (len == 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2703,"            return ArrayUtils.EMPTY_STRING_ARRAY;
",4,0,0,0,0,0,0,0,0,4,37,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2705,"        List<String> list = new ArrayList<String>();
",2,0,0,1,2,0,0,8,0,10,44,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2706,"        int i = 0, start = 0;
",4,0,0,0,0,0,0,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2707,"        boolean match = false;
",2,0,0,0,0,0,0,0,0,3,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2708,"        boolean lastMatch = false;
",2,0,0,0,0,0,0,0,0,3,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2709,"        while (i < len) {
",4,1,0,1,3,0,0,0,0,5,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2710,"            if (str.charAt(i) == separatorChar) {
",2,1,0,2,5,0,6,0,0,9,37,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2711,"                if (match || preserveAllTokens) {
",4,1,0,1,3,0,0,0,0,5,33,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2712,"                    list.add(str.substring(start, i));
",0,0,0,2,4,0,12,0,0,12,34,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2713,"                    match = false;
",2,0,0,0,0,0,0,0,0,4,14,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2714,"                    lastMatch = true;
",2,0,0,0,0,0,0,0,0,4,17,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2716,"                start = ++i;
",4,0,0,0,0,0,0,0,0,6,12,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2717,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2719,"            lastMatch = false;
",2,0,0,0,0,0,0,0,0,4,18,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2720,"            match = true;
",2,0,0,0,0,0,0,0,0,4,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2721,"            i++;
",2,0,0,0,0,0,0,0,0,3,4,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2723,"        if (match || (preserveAllTokens && lastMatch)) {
",6,2,0,2,5,0,0,0,0,8,48,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2724,"            list.add(str.substring(start, i));
",0,0,0,2,4,0,12,0,0,12,34,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2726,"        return list.toArray(new String[list.size()]);
",0,0,0,3,6,0,8,2,0,10,45,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2763,"        return splitWorker(str, separatorChars, -1, true);
",0,0,0,1,2,0,6,0,0,8,50,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2803,"        return splitWorker(str, separatorChars, max, true);
",0,0,0,1,2,0,8,0,0,9,51,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2825,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2826,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2828,"        int len = str.length();
",2,0,0,1,2,0,4,0,0,6,23,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2829,"        if (len == 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2830,"            return ArrayUtils.EMPTY_STRING_ARRAY;
",4,0,0,0,0,0,0,0,0,4,37,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2832,"        List<String> list = new ArrayList<String>();
",2,0,0,1,2,0,0,8,0,10,44,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2833,"        int sizePlus1 = 1;
",2,0,0,0,0,0,0,0,0,2,18,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2834,"        int i = 0, start = 0;
",4,0,0,0,0,0,0,0,0,4,21,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2835,"        boolean match = false;
",2,0,0,0,0,0,0,0,0,3,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2836,"        boolean lastMatch = false;
",2,0,0,0,0,0,0,0,0,3,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2837,"        if (separatorChars == null) {
",2,1,0,1,3,0,0,0,0,3,29,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2839,"            while (i < len) {
",4,1,0,1,3,0,0,0,0,5,17,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2840,"                if (Character.isWhitespace(str.charAt(i))) {
",0,0,0,3,7,0,10,0,0,10,44,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2841,"                    if (match || preserveAllTokens) {
",4,1,0,1,3,0,0,0,0,5,33,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2842,"                        lastMatch = true;
",2,0,0,0,0,0,0,0,0,4,17,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2843,"                        if (sizePlus1++ == max) {
",4,1,0,1,3,0,0,0,0,6,25,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2844,"                            i = len;
",4,0,0,0,0,0,0,0,0,5,8,14,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2845,"                            lastMatch = false;
",2,0,0,0,0,0,0,0,0,4,18,14,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2847,"                        list.add(str.substring(start, i));
",0,0,0,2,4,0,12,0,0,12,34,13,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2848,"                        match = false;
",2,0,0,0,0,0,0,0,0,4,14,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2850,"                    start = ++i;
",4,0,0,0,0,0,0,0,0,6,12,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2851,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2853,"                lastMatch = false;
",2,0,0,0,0,0,0,0,0,4,18,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2854,"                match = true;
",2,0,0,0,0,0,0,0,0,4,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2855,"                i++;
",2,0,0,0,0,0,0,0,0,3,4,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2857,"        } else if (separatorChars.length() == 1) {
",0,1,0,2,6,0,4,0,0,5,42,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2859,"            char sep = separatorChars.charAt(0);
",2,0,0,1,2,0,4,0,0,6,36,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2860,"            while (i < len) {
",4,1,0,1,3,0,0,0,0,5,17,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2861,"                if (str.charAt(i) == sep) {
",2,1,0,2,5,0,6,0,0,9,27,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2862,"                    if (match || preserveAllTokens) {
",4,1,0,1,3,0,0,0,0,5,33,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2863,"                        lastMatch = true;
",2,0,0,0,0,0,0,0,0,4,17,13,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2864,"                        if (sizePlus1++ == max) {
",4,1,0,1,3,0,0,0,0,6,25,13,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2865,"                            i = len;
",4,0,0,0,0,0,0,0,0,5,8,15,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2866,"                            lastMatch = false;
",2,0,0,0,0,0,0,0,0,4,18,15,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2868,"                        list.add(str.substring(start, i));
",0,0,0,2,4,0,12,0,0,12,34,14,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2869,"                        match = false;
",2,0,0,0,0,0,0,0,0,4,14,13,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2871,"                    start = ++i;
",4,0,0,0,0,0,0,0,0,6,12,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2872,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2874,"                lastMatch = false;
",2,0,0,0,0,0,0,0,0,4,18,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2875,"                match = true;
",2,0,0,0,0,0,0,0,0,4,13,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2876,"                i++;
",2,0,0,0,0,0,0,0,0,3,4,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2878,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2880,"            while (i < len) {
",4,1,0,1,3,0,0,0,0,5,17,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2881,"                if (separatorChars.indexOf(str.charAt(i)) >= 0) {
",0,1,0,3,7,0,10,0,0,11,49,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2882,"                    if (match || preserveAllTokens) {
",4,1,0,1,3,0,0,0,0,5,33,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2883,"                        lastMatch = true;
",2,0,0,0,0,0,0,0,0,4,17,13,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2884,"                        if (sizePlus1++ == max) {
",4,1,0,1,3,0,0,0,0,6,25,13,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2885,"                            i = len;
",4,0,0,0,0,0,0,0,0,5,8,15,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2886,"                            lastMatch = false;
",2,0,0,0,0,0,0,0,0,4,18,15,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2888,"                        list.add(str.substring(start, i));
",0,0,0,2,4,0,12,0,0,12,34,14,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2889,"                        match = false;
",2,0,0,0,0,0,0,0,0,4,14,13,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2891,"                    start = ++i;
",4,0,0,0,0,0,0,0,0,6,12,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2892,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2894,"                lastMatch = false;
",2,0,0,0,0,0,0,0,0,4,18,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2895,"                match = true;
",2,0,0,0,0,0,0,0,0,4,13,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2896,"                i++;
",2,0,0,0,0,0,0,0,0,3,4,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2899,"        if (match || (preserveAllTokens && lastMatch)) {
",6,2,0,2,5,0,0,0,0,8,48,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2900,"            list.add(str.substring(start, i));
",0,0,0,2,4,0,12,0,0,12,34,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2902,"        return list.toArray(new String[list.size()]);
",0,0,0,3,6,0,8,2,0,10,45,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2925,"        return splitByCharacterType(str, false);
",0,0,0,1,2,0,4,0,0,5,40,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2953,"        return splitByCharacterType(str, true);
",0,0,0,1,2,0,4,0,0,5,39,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2971,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2972,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2974,"        if (str.length() == 0) {
",0,1,0,2,5,0,4,0,0,5,24,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2975,"            return ArrayUtils.EMPTY_STRING_ARRAY;
",4,0,0,0,0,0,0,0,0,4,37,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2977,"        char[] c = str.toCharArray();
",2,0,0,2,4,0,4,0,0,6,29,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2978,"        List<String> list = new ArrayList<String>();
",2,0,0,1,2,0,0,8,0,10,44,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2979,"        int tokenStart = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2980,"        int currentType = Character.getType(c[tokenStart]);
",2,0,1,2,4,0,4,0,0,10,51,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2981,"        for (int pos = tokenStart + 1; pos < c.length; pos++) {
",12,2,0,1,3,0,0,0,0,15,55,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2982,"            int type = Character.getType(c[pos]);
",2,0,1,2,4,0,4,0,0,10,37,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2983,"            if (type == currentType) {
",4,1,0,1,3,0,0,0,0,5,26,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2984,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2986,"            if (camelCase && type == Character.LOWERCASE_LETTER && currentType == Character.UPPERCASE_LETTER) {
",14,4,0,1,3,0,0,0,0,18,99,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2987,"                int newTokenStart = pos - 1;
",4,1,0,0,0,0,0,0,0,5,28,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2988,"                if (newTokenStart != tokenStart) {
",4,1,0,1,3,0,0,0,0,5,34,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2989,"                    list.add(new String(c, tokenStart, newTokenStart - tokenStart));
",8,1,0,2,4,0,4,2,0,15,64,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2990,"                    tokenStart = newTokenStart;
",4,0,0,0,0,0,0,0,0,5,27,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2992,"            } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2993,"                list.add(new String(c, tokenStart, pos - tokenStart));
",8,1,0,2,4,0,4,2,0,15,54,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2994,"                tokenStart = pos;
",4,0,0,0,0,0,0,0,0,5,17,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2996,"            currentType = type;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2998,"        list.add(new String(c, tokenStart, c.length - tokenStart));
",10,1,0,2,4,0,4,2,0,17,59,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,2999,"        return list.toArray(new String[list.size()]);
",0,0,0,3,6,0,8,2,0,10,45,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3025,"        return join(array, null);
",0,0,0,1,2,0,4,0,0,5,25,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3051,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3052,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3055,"        return join(array, separator, 0, array.length);
",4,0,0,1,2,0,6,0,0,10,47,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3085,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3086,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3088,"        int bufSize = (endIndex - startIndex);
",6,1,0,1,2,0,0,0,0,7,38,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3089,"        if (bufSize <= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3090,"            return EMPTY;
",2,0,0,0,0,0,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3093,"        bufSize *= ((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + 1);
",2,2,1,6,12,0,4,0,0,17,90,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3094,"        StringBuilder buf = new StringBuilder(bufSize);
",4,0,0,1,2,0,0,4,0,8,47,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3096,"        for (int i = startIndex; i < endIndex; i++) {
",10,1,0,1,3,0,0,0,0,12,45,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3097,"            if (i > startIndex) {
",4,1,0,1,3,0,0,0,0,5,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3098,"                buf.append(separator);
",0,0,0,1,2,0,6,0,0,6,22,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3100,"            if (array[i] != null) {
",0,1,1,2,5,0,0,0,0,5,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3101,"                buf.append(array[i]);
",0,0,1,2,4,0,4,0,0,8,21,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3104,"        return buf.toString();
",0,0,0,1,2,0,4,0,0,4,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3132,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3133,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3135,"        return join(array, separator, 0, array.length);
",4,0,0,1,2,0,6,0,0,10,47,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3166,"        if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3167,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3169,"        if (separator == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3170,"            separator = EMPTY;
",4,0,0,0,0,0,0,0,0,5,18,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3175,"        int bufSize = (endIndex - startIndex);
",6,1,0,1,2,0,0,0,0,7,38,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3176,"        if (bufSize <= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3177,"            return EMPTY;
",2,0,0,0,0,0,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3180,"        bufSize *= ((array[startIndex] == null ? 16 : array[startIndex].toString().length())
",2,1,1,5,11,0,4,0,0,16,84,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3183,"        StringBuilder buf = new StringBuilder(bufSize);
",4,0,0,1,2,0,0,4,0,8,47,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3185,"        for (int i = startIndex; i < endIndex; i++) {
",10,1,0,1,3,0,0,0,0,12,45,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3186,"            if (i > startIndex) {
",4,1,0,1,3,0,0,0,0,5,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3187,"                buf.append(separator);
",0,0,0,1,2,0,6,0,0,6,22,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3189,"            if (array[i] != null) {
",0,1,1,2,5,0,0,0,0,5,23,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3190,"                buf.append(array[i]);
",0,0,1,2,4,0,4,0,0,8,21,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3193,"        return buf.toString();
",0,0,0,1,2,0,4,0,0,4,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3213,"        if (iterator == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3214,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3216,"        if (!iterator.hasNext()) {
",0,0,0,2,5,0,4,0,0,5,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3217,"            return EMPTY;
",2,0,0,0,0,0,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3219,"        Object first = iterator.next();
",2,0,0,1,2,0,4,2,0,8,31,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3220,"        if (!iterator.hasNext()) {
",0,0,0,2,5,0,4,0,0,5,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3221,"            return ObjectUtils.toString(first);
",0,0,0,1,2,0,6,0,0,6,35,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3225,"        StringBuilder buf = new StringBuilder(256); // Java default is 16, probably too small
",2,0,0,1,2,0,0,4,0,6,85,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3226,"        if (first != null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3227,"            buf.append(first);
",0,0,0,1,2,0,6,0,0,6,18,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3230,"        while (iterator.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,28,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3231,"            buf.append(separator);
",0,0,0,1,2,0,6,0,0,6,22,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3232,"            Object obj = iterator.next();
",2,0,0,1,2,0,4,2,0,8,29,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3233,"            if (obj != null) {
",2,1,0,1,3,0,0,0,0,3,18,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3234,"                buf.append(obj);
",0,0,0,1,2,0,6,0,0,6,16,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3236,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3238,"        return buf.toString();
",0,0,0,1,2,0,4,0,0,4,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3257,"        if (iterator == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3258,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3260,"        if (!iterator.hasNext()) {
",0,0,0,2,5,0,4,0,0,5,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3261,"            return EMPTY;
",2,0,0,0,0,0,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3263,"        Object first = iterator.next();
",2,0,0,1,2,0,4,2,0,8,31,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3264,"        if (!iterator.hasNext()) {
",0,0,0,2,5,0,4,0,0,5,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3265,"            return ObjectUtils.toString(first);
",0,0,0,1,2,0,6,0,0,6,35,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3269,"        StringBuilder buf = new StringBuilder(256); // Java default is 16, probably too small
",2,0,0,1,2,0,0,4,0,6,85,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3270,"        if (first != null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3271,"            buf.append(first);
",0,0,0,1,2,0,6,0,0,6,18,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3274,"        while (iterator.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,28,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3275,"            if (separator != null) {
",2,1,0,1,3,0,0,0,0,3,24,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3276,"                buf.append(separator);
",0,0,0,1,2,0,6,0,0,6,22,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3278,"            Object obj = iterator.next();
",2,0,0,1,2,0,4,2,0,8,29,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3279,"            if (obj != null) {
",2,1,0,1,3,0,0,0,0,3,18,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3280,"                buf.append(obj);
",0,0,0,1,2,0,6,0,0,6,16,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3282,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3283,"        return buf.toString();
",0,0,0,1,2,0,4,0,0,4,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3301,"        if (iterable == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3302,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3304,"        return join(iterable.iterator(), separator);
",0,0,0,2,4,0,8,0,0,8,44,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3322,"        if (iterable == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3323,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3325,"        return join(iterable.iterator(), separator);
",0,0,0,2,4,0,8,0,0,8,44,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3345,"        if (isEmpty(str)) {
",0,0,0,2,5,0,4,0,0,4,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3346,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3348,"        int sz = str.length();
",2,0,0,1,2,0,4,0,0,6,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3349,"        char[] chs = new char[sz];
",2,0,1,2,4,0,0,0,0,4,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3350,"        int count = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3351,"        for (int i = 0; i < sz; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3352,"            if (!Character.isWhitespace(str.charAt(i))) {
",0,0,0,3,7,0,10,0,0,11,45,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3353,"                chs[count++] = str.charAt(i);
",2,0,1,2,4,0,6,0,0,12,29,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3356,"        if (count == sz) {
",4,1,0,1,3,0,0,0,0,5,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3357,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3359,"        return new String(chs, 0, count);
",4,0,0,1,2,0,0,2,0,6,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3389,"        if (isEmpty(str) || isEmpty(remove)) {
",0,1,0,3,7,0,8,0,0,9,38,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3390,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3392,"        if (str.startsWith(remove)){
",0,0,0,2,5,0,6,0,0,6,28,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3393,"            return str.substring(remove.length());
",0,0,0,2,4,0,8,0,0,8,38,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3395,"        return str;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3424,"        if (isEmpty(str) || isEmpty(remove)) {
",0,1,0,3,7,0,8,0,0,9,38,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3425,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3427,"        if (startsWithIgnoreCase(str, remove)) {
",0,0,0,2,5,0,6,0,0,6,40,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3428,"            return str.substring(remove.length());
",0,0,0,2,4,0,8,0,0,8,38,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3430,"        return str;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3458,"        if (isEmpty(str) || isEmpty(remove)) {
",0,1,0,3,7,0,8,0,0,9,38,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3459,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3461,"        if (str.endsWith(remove)) {
",0,0,0,2,5,0,6,0,0,6,27,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3462,"            return str.substring(0, str.length() - remove.length());
",0,1,0,3,6,0,12,0,0,13,56,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3464,"        return str;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3492,"        if (isEmpty(str) || isEmpty(remove)) {
",0,1,0,3,7,0,8,0,0,9,38,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3493,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3495,"        if (endsWithIgnoreCase(str, remove)) {
",0,0,0,2,5,0,6,0,0,6,38,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3496,"            return str.substring(0, str.length() - remove.length());
",0,1,0,3,6,0,12,0,0,13,56,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3498,"        return str;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3525,"        if (isEmpty(str) || isEmpty(remove)) {
",0,1,0,3,7,0,8,0,0,9,38,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3526,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3528,"        return replace(str, remove, EMPTY, -1);
",0,0,0,1,2,0,8,0,0,9,39,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3551,"        if (isEmpty(str) || str.indexOf(remove) == -1) {
",0,2,0,3,7,0,10,0,0,13,48,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3552,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3554,"        char[] chars = str.toCharArray();
",2,0,0,2,4,0,4,0,0,6,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3555,"        int pos = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3556,"        for (int i = 0; i < chars.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3557,"            if (chars[i] != remove) {
",2,1,1,2,5,0,0,0,0,7,25,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3558,"                chars[pos++] = chars[i];
",2,0,1,2,4,0,0,0,0,10,24,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3561,"        return new String(chars, 0, pos);
",4,0,0,1,2,0,0,2,0,6,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3590,"        return replace(text, searchString, replacement, 1);
",0,0,0,1,2,0,8,0,0,8,51,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3617,"        return replace(text, searchString, replacement, -1);
",0,0,0,1,2,0,8,0,0,9,52,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3649,"        if (isEmpty(text) || isEmpty(searchString) || replacement == null || max == 0) {
",4,4,0,3,7,0,8,0,0,18,80,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3650,"            return text;
",2,0,0,0,0,0,0,0,0,2,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3652,"        int start = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3653,"        int end = text.indexOf(searchString, start);
",2,0,0,1,2,0,8,0,0,10,44,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3654,"        if (end == -1) {
",2,1,0,1,3,0,0,0,0,4,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3655,"            return text;
",2,0,0,0,0,0,0,0,0,2,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3657,"        int replLength = searchString.length();
",2,0,0,1,2,0,4,0,0,6,39,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3658,"        int increase = replacement.length() - replLength;
",4,1,0,1,2,0,4,0,0,9,49,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3659,"        increase = (increase < 0 ? 0 : increase);
",6,1,0,1,2,0,0,0,0,8,41,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3660,"        increase *= (max < 0 ? 16 : (max > 64 ? 64 : max));
",8,2,0,2,4,0,0,0,0,11,51,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3661,"        StringBuilder buf = new StringBuilder(text.length() + increase);
",4,1,0,2,4,0,4,4,0,13,64,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3662,"        while (end != -1) {
",2,1,0,1,3,0,0,0,0,4,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3663,"            buf.append(text.substring(start, end)).append(replacement);
",0,0,0,3,6,0,16,0,0,16,59,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3664,"            start = end + replLength;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3665,"            if (--max == 0) {
",2,1,0,1,3,0,0,0,0,4,17,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3666,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3668,"            end = text.indexOf(searchString, start);
",2,0,0,1,2,0,8,0,0,11,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3670,"        buf.append(text.substring(start));
",0,0,0,2,4,0,10,0,0,10,34,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3671,"        return buf.toString();
",0,0,0,1,2,0,4,0,0,4,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3714,"        return replaceEach(text, searchList, replacementList, false, 0);
",0,0,0,1,2,0,8,0,0,9,64,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3765,"        int timeToLive = searchList == null ? 0 : searchList.length;
",8,1,0,0,0,0,0,0,0,9,60,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3766,"        return replaceEach(text, searchList, replacementList, true, timeToLive);
",0,0,0,1,2,0,10,0,0,11,72,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3824,"        if (text == null || text.length() == 0 || searchList == null || 
",4,8,0,1,3,0,4,0,0,16,63,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3827,"            return text;
",2,0,0,0,0,0,0,0,0,2,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3831,"        if (timeToLive < 0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3832,"            throw new IllegalStateException(""TimeToLive of "" + timeToLive + "" is less than 0: "" + text);
",4,1,0,1,2,0,0,2,0,9,92,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3835,"        int searchLength = searchList.length;
",6,0,0,0,0,0,0,0,0,6,37,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3836,"        int replacementLength = replacementList.length;
",6,0,0,0,0,0,0,0,0,6,47,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3839,"        if (searchLength != replacementLength) {
",4,1,0,1,3,0,0,0,0,5,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3840,"            throw new IllegalArgumentException(""Search and Replace array lengths don't match: ""
",0,0,0,0,1,0,0,2,0,3,83,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3847,"        boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];
",2,0,1,2,4,0,0,0,0,4,64,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3850,"        int textIndex = -1;
",2,0,0,0,0,0,0,0,0,3,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3851,"        int replaceIndex = -1;
",2,0,0,0,0,0,0,0,0,3,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3852,"        int tempIndex = -1;
",2,0,0,0,0,0,0,0,0,3,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3856,"        for (int i = 0; i < searchLength; i++) {
",8,1,0,1,3,0,0,0,0,10,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3857,"            if (noMoreMatchesForReplIndex[i] || searchList[i] == null || 
",0,4,1,2,5,0,0,0,0,12,60,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3860,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3862,"            tempIndex = text.indexOf(searchList[i]);
",2,0,1,2,4,0,4,0,0,11,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3865,"            if (tempIndex == -1) {
",2,1,0,1,3,0,0,0,0,4,22,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3866,"                noMoreMatchesForReplIndex[i] = true;
",0,0,1,1,2,0,0,0,0,6,36,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3868,"                if (textIndex == -1 || tempIndex < textIndex) {
",6,3,0,1,3,0,0,0,0,10,47,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3869,"                    textIndex = tempIndex;
",4,0,0,0,0,0,0,0,0,5,22,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3870,"                    replaceIndex = i;
",4,0,0,0,0,0,0,0,0,5,17,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3877,"        if (textIndex == -1) {
",2,1,0,1,3,0,0,0,0,4,22,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3878,"            return text;
",2,0,0,0,0,0,0,0,0,2,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3881,"        int start = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3884,"        int increase = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3887,"        for (int i = 0; i < searchList.length; i++) {
",10,1,0,1,3,0,0,0,0,12,45,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3888,"            if (searchList[i] == null || replacementList[i] == null) {
",0,3,1,3,7,0,0,0,0,11,58,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3889,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3891,"            int greater = replacementList[i].length() - searchList[i].length();
",2,1,1,4,8,0,4,0,0,15,67,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3892,"            if (greater > 0) {
",2,1,0,1,3,0,0,0,0,3,18,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3893,"                increase += 3 * greater; // assume 3 matches
",4,1,0,0,0,0,0,0,0,6,44,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3897,"        increase = Math.min(increase, text.length() / 5);
",2,1,0,2,4,0,10,0,0,14,49,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3899,"        StringBuilder buf = new StringBuilder(text.length() + increase);
",4,1,0,2,4,0,4,4,0,13,64,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3901,"        while (textIndex != -1) {
",2,1,0,1,3,0,0,0,0,4,25,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3903,"            for (int i = start; i < textIndex; i++) {
",10,1,0,1,3,0,0,0,0,12,41,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3904,"                buf.append(text.charAt(i));
",0,0,0,2,4,0,10,0,0,10,27,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3906,"            buf.append(replacementList[replaceIndex]);
",0,0,1,2,4,0,4,0,0,8,42,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3908,"            start = textIndex + searchList[replaceIndex].length();
",4,1,1,2,4,0,2,0,0,12,54,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3910,"            textIndex = -1;
",2,0,0,0,0,0,0,0,0,4,15,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3911,"            replaceIndex = -1;
",2,0,0,0,0,0,0,0,0,4,18,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3912,"            tempIndex = -1;
",2,0,0,0,0,0,0,0,0,4,15,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3915,"            for (int i = 0; i < searchLength; i++) {
",8,1,0,1,3,0,0,0,0,10,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3916,"                if (noMoreMatchesForReplIndex[i] || searchList[i] == null || 
",0,4,1,2,5,0,0,0,0,12,60,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3919,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3921,"                tempIndex = text.indexOf(searchList[i], start);
",2,0,1,2,4,0,6,0,0,13,47,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3924,"                if (tempIndex == -1) {
",2,1,0,1,3,0,0,0,0,4,22,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3925,"                    noMoreMatchesForReplIndex[i] = true;
",0,0,1,1,2,0,0,0,0,6,36,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3927,"                    if (textIndex == -1 || tempIndex < textIndex) {
",6,3,0,1,3,0,0,0,0,10,47,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3928,"                        textIndex = tempIndex;
",4,0,0,0,0,0,0,0,0,5,22,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3929,"                        replaceIndex = i;
",4,0,0,0,0,0,0,0,0,5,17,12,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3936,"        int textLength = text.length();
",2,0,0,1,2,0,4,0,0,6,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3937,"        for (int i = start; i < textLength; i++) {
",10,1,0,1,3,0,0,0,0,12,42,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3938,"            buf.append(text.charAt(i));
",0,0,0,2,4,0,10,0,0,10,27,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3940,"        String result = buf.toString();
",2,0,0,1,2,0,4,2,0,8,31,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3941,"        if (!repeat) {
",2,0,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3942,"            return result;
",2,0,0,0,0,0,0,0,0,2,14,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3945,"        return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);
",2,1,0,1,2,0,10,0,0,13,80,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3971,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3972,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,3974,"        return str.replace(searchChar, replaceChar);
",0,0,0,1,2,0,8,0,0,8,44,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4014,"        if (isEmpty(str) || isEmpty(searchChars)) {
",0,1,0,3,7,0,8,0,0,9,43,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4015,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4017,"        if (replaceChars == null) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4018,"            replaceChars = EMPTY;
",4,0,0,0,0,0,0,0,0,5,21,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4020,"        boolean modified = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4021,"        int replaceCharsLength = replaceChars.length();
",2,0,0,1,2,0,4,0,0,6,47,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4022,"        int strLength = str.length();
",2,0,0,1,2,0,4,0,0,6,29,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4023,"        StringBuilder buf = new StringBuilder(strLength);
",4,0,0,1,2,0,0,4,0,8,49,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4024,"        for (int i = 0; i < strLength; i++) {
",8,1,0,1,3,0,0,0,0,10,37,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4025,"            char ch = str.charAt(i);
",2,0,0,1,2,0,6,0,0,8,24,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4026,"            int index = searchChars.indexOf(ch);
",2,0,0,1,2,0,6,0,0,8,36,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4027,"            if (index >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4028,"                modified = true;
",2,0,0,0,0,0,0,0,0,4,16,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4029,"                if (index < replaceCharsLength) {
",4,1,0,1,3,0,0,0,0,5,33,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4030,"                    buf.append(replaceChars.charAt(index));
",0,0,0,2,4,0,10,0,0,10,39,11,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4033,"                buf.append(ch);
",0,0,0,1,2,0,6,0,0,6,15,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4036,"        if (modified) {
",2,0,0,1,3,0,0,0,0,2,15,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4037,"            return buf.toString();
",0,0,0,1,2,0,4,0,0,4,22,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4039,"        return str;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4074,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4075,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4077,"        if (overlay == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4078,"            overlay = EMPTY;
",4,0,0,0,0,0,0,0,0,5,16,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4080,"        int len = str.length();
",2,0,0,1,2,0,4,0,0,6,23,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4081,"        if (start < 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4082,"            start = 0;
",2,0,0,0,0,0,0,0,0,3,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4084,"        if (start > len) {
",4,1,0,1,3,0,0,0,0,5,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4085,"            start = len;
",4,0,0,0,0,0,0,0,0,5,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4087,"        if (end < 0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4088,"            end = 0;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4090,"        if (end > len) {
",4,1,0,1,3,0,0,0,0,5,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4091,"            end = len;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4093,"        if (start > end) {
",4,1,0,1,3,0,0,0,0,5,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4094,"            int temp = start;
",4,0,0,0,0,0,0,0,0,4,17,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4095,"            start = end;
",4,0,0,0,0,0,0,0,0,5,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4096,"            end = temp;
",4,0,0,0,0,0,0,0,0,5,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4098,"        return new StringBuilder(len + start - end + overlay.length() + 1)
",6,4,0,2,4,0,4,2,0,16,66,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4133,"        if (isEmpty(str)) {
",0,0,0,2,5,0,4,0,0,4,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4134,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4137,"        if (str.length() == 1) {
",0,1,0,2,5,0,4,0,0,5,24,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4138,"            char ch = str.charAt(0);
",2,0,0,1,2,0,4,0,0,6,24,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4139,"            if (ch == CharUtils.CR || ch == CharUtils.LF) {
",12,3,0,1,3,0,0,0,0,15,47,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4140,"                return EMPTY;
",2,0,0,0,0,0,0,0,0,2,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4142,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4145,"        int lastIdx = str.length() - 1;
",2,1,0,1,2,0,4,0,0,7,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4146,"        char last = str.charAt(lastIdx);
",2,0,0,1,2,0,6,0,0,8,32,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4148,"        if (last == CharUtils.LF) {
",6,1,0,1,3,0,0,0,0,7,27,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4149,"            if (str.charAt(lastIdx - 1) == CharUtils.CR) {
",6,2,0,2,5,0,4,0,0,12,46,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4150,"                lastIdx--;
",2,0,0,0,0,0,0,0,0,3,10,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4152,"        } else if (last != CharUtils.CR) {
",6,1,0,1,4,0,0,0,0,7,34,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4153,"            lastIdx++;
",2,0,0,0,0,0,0,0,0,3,10,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4155,"        return str.substring(0, lastIdx);
",0,0,0,1,2,0,6,0,0,6,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4185,"        if (isEmpty(str) || separator == null) {
",2,2,0,2,5,0,4,0,0,9,40,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4186,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4188,"        if (str.endsWith(separator)) {
",0,0,0,2,5,0,6,0,0,6,30,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4189,"            return str.substring(0, str.length() - separator.length());
",0,1,0,3,6,0,12,0,0,13,59,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4191,"        return str;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4220,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4221,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4223,"        int strLen = str.length();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4224,"        if (strLen < 2) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4225,"            return EMPTY;
",2,0,0,0,0,0,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4227,"        int lastIdx = strLen - 1;
",4,1,0,0,0,0,0,0,0,5,25,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4228,"        String ret = str.substring(0, lastIdx);
",2,0,0,1,2,0,6,2,0,10,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4229,"        char last = str.charAt(lastIdx);
",2,0,0,1,2,0,6,0,0,8,32,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4230,"        if (last == CharUtils.LF) {
",6,1,0,1,3,0,0,0,0,7,27,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4231,"            if (ret.charAt(lastIdx - 1) == CharUtils.CR) {
",6,2,0,2,5,0,4,0,0,12,46,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4232,"                return ret.substring(0, lastIdx - 1);
",2,1,0,1,2,0,4,0,0,7,37,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4235,"        return ret;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4264,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4265,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4267,"        if (repeat <= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4268,"            return EMPTY;
",2,0,0,0,0,0,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4270,"        int inputLength = str.length();
",2,0,0,1,2,0,4,0,0,6,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4271,"        if (repeat == 1 || inputLength == 0) {
",4,3,0,1,3,0,0,0,0,7,38,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4272,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4274,"        if (inputLength == 1 && repeat <= PAD_LIMIT) {
",6,3,0,1,3,0,0,0,0,9,46,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4275,"            return padding(repeat, str.charAt(0));
",0,0,0,2,4,0,8,0,0,8,38,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4278,"        int outputLength = inputLength * repeat;
",6,1,0,0,0,0,0,0,0,7,40,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4279,"        switch (inputLength) {
",2,0,0,1,3,0,0,0,0,2,22,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4281,"                char ch = str.charAt(0);
",2,0,0,1,2,0,4,0,0,6,24,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4282,"                char[] output1 = new char[outputLength];
",2,0,1,2,4,0,0,0,0,4,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4283,"                for (int i = repeat - 1; i >= 0; i--) {
",8,2,0,1,3,0,0,0,0,11,39,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4284,"                    output1[i] = ch;
",2,0,1,1,2,0,0,0,0,7,16,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4286,"                return new String(output1);
",2,0,0,1,2,0,0,2,0,4,27,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4288,"                char ch0 = str.charAt(0);
",2,0,0,1,2,0,4,0,0,6,25,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4289,"                char ch1 = str.charAt(1);
",2,0,0,1,2,0,4,0,0,6,25,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4290,"                char[] output2 = new char[outputLength];
",2,0,1,2,4,0,0,0,0,4,40,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4291,"                for (int i = repeat * 2 - 2; i >= 0; i--, i--) {
",10,3,0,1,3,0,0,0,0,15,48,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4292,"                    output2[i] = ch0;
",2,0,1,1,2,0,0,0,0,7,17,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4293,"                    output2[i + 1] = ch1;
",4,1,1,1,2,0,0,0,0,8,21,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4295,"                return new String(output2);
",2,0,0,1,2,0,0,2,0,4,27,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4297,"                StringBuilder buf = new StringBuilder(outputLength);
",4,0,0,1,2,0,0,4,0,8,52,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4298,"                for (int i = 0; i < repeat; i++) {
",8,1,0,1,3,0,0,0,0,10,34,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4299,"                    buf.append(str);
",0,0,0,1,2,0,6,0,0,6,16,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4301,"                return buf.toString();
",0,0,0,1,2,0,4,0,0,4,22,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4325,"        if(str == null || separator == null) {
",4,3,0,1,3,0,0,0,0,7,38,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4326,"            return repeat(str, repeat);
",0,0,0,1,2,0,6,0,0,6,27,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4329,"            String result = repeat(str + separator, repeat);
",6,1,0,1,2,0,4,2,0,13,48,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4330,"            return removeEnd(result, separator);
",0,0,0,1,2,0,6,0,0,6,36,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4358,"        if (repeat < 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4359,"            throw new IndexOutOfBoundsException(""Cannot pad a negative amount: "" + repeat);
",2,1,0,1,2,0,0,2,0,6,79,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4361,"        final char[] buf = new char[repeat];
",2,0,1,2,4,1,0,0,0,5,36,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4362,"        for (int i = 0; i < buf.length; i++) {
",10,1,0,1,3,0,0,0,0,12,38,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4363,"            buf[i] = padChar;
",2,0,1,1,2,0,0,0,0,7,17,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4365,"        return new String(buf);
",2,0,0,1,2,0,0,2,0,4,23,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4388,"        return rightPad(str, size, ' ');
",0,0,0,1,2,0,6,0,0,7,32,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4413,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4414,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4416,"        int pads = size - str.length();
",4,1,0,1,2,0,4,0,0,9,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4417,"        if (pads <= 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4418,"            return str; // returns original String when possible
",2,0,0,0,0,0,0,0,0,2,52,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4420,"        if (pads > PAD_LIMIT) {
",4,1,0,1,3,0,0,0,0,5,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4421,"            return rightPad(str, size, String.valueOf(padChar));
",0,0,0,2,4,0,12,0,0,12,52,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4423,"        return str.concat(padding(pads, padChar));
",0,0,0,2,4,0,10,0,0,10,42,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4450,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4451,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4453,"        if (isEmpty(padStr)) {
",0,0,0,2,5,0,4,0,0,4,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4454,"            padStr = "" "";
",2,0,0,0,0,0,0,0,0,4,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4456,"        int padLen = padStr.length();
",2,0,0,1,2,0,4,0,0,6,29,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4457,"        int strLen = str.length();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4458,"        int pads = size - strLen;
",6,1,0,0,0,0,0,0,0,7,25,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4459,"        if (pads <= 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4460,"            return str; // returns original String when possible
",2,0,0,0,0,0,0,0,0,2,52,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4462,"        if (padLen == 1 && pads <= PAD_LIMIT) {
",6,3,0,1,3,0,0,0,0,9,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4463,"            return rightPad(str, size, padStr.charAt(0));
",0,0,0,2,4,0,10,0,0,10,45,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4466,"        if (pads == padLen) {
",4,1,0,1,3,0,0,0,0,5,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4467,"            return str.concat(padStr);
",0,0,0,1,2,0,6,0,0,6,26,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4468,"        } else if (pads < padLen) {
",4,1,0,1,4,0,0,0,0,5,27,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4469,"            return str.concat(padStr.substring(0, pads));
",0,0,0,2,4,0,10,0,0,10,45,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4471,"            char[] padding = new char[pads];
",2,0,1,2,4,0,0,0,0,4,32,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4472,"            char[] padChars = padStr.toCharArray();
",2,0,0,2,4,0,4,0,0,6,39,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4473,"            for (int i = 0; i < pads; i++) {
",8,1,0,1,3,0,0,0,0,10,32,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4474,"                padding[i] = padChars[i % padLen];
",4,1,1,2,4,0,0,0,0,12,34,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4476,"            return str.concat(new String(padding));
",2,0,0,2,4,0,4,2,0,8,39,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4500,"        return leftPad(str, size, ' ');
",0,0,0,1,2,0,6,0,0,7,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4525,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4526,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4528,"        int pads = size - str.length();
",4,1,0,1,2,0,4,0,0,9,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4529,"        if (pads <= 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4530,"            return str; // returns original String when possible
",2,0,0,0,0,0,0,0,0,2,52,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4532,"        if (pads > PAD_LIMIT) {
",4,1,0,1,3,0,0,0,0,5,23,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4533,"            return leftPad(str, size, String.valueOf(padChar));
",0,0,0,2,4,0,12,0,0,12,51,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4535,"        return padding(pads, padChar).concat(str);
",0,0,0,2,4,0,10,0,0,10,42,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4562,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4563,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4565,"        if (isEmpty(padStr)) {
",0,0,0,2,5,0,4,0,0,4,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4566,"            padStr = "" "";
",2,0,0,0,0,0,0,0,0,4,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4568,"        int padLen = padStr.length();
",2,0,0,1,2,0,4,0,0,6,29,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4569,"        int strLen = str.length();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4570,"        int pads = size - strLen;
",6,1,0,0,0,0,0,0,0,7,25,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4571,"        if (pads <= 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4572,"            return str; // returns original String when possible
",2,0,0,0,0,0,0,0,0,2,52,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4574,"        if (padLen == 1 && pads <= PAD_LIMIT) {
",6,3,0,1,3,0,0,0,0,9,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4575,"            return leftPad(str, size, padStr.charAt(0));
",0,0,0,2,4,0,10,0,0,10,44,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4578,"        if (pads == padLen) {
",4,1,0,1,3,0,0,0,0,5,21,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4579,"            return padStr.concat(str);
",0,0,0,1,2,0,6,0,0,6,26,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4580,"        } else if (pads < padLen) {
",4,1,0,1,4,0,0,0,0,5,27,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4581,"            return padStr.substring(0, pads).concat(str);
",0,0,0,2,4,0,10,0,0,10,45,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4583,"            char[] padding = new char[pads];
",2,0,1,2,4,0,0,0,0,4,32,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4584,"            char[] padChars = padStr.toCharArray();
",2,0,0,2,4,0,4,0,0,6,39,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4585,"            for (int i = 0; i < pads; i++) {
",8,1,0,1,3,0,0,0,0,10,32,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4586,"                padding[i] = padChars[i % padLen];
",4,1,1,2,4,0,0,0,0,12,34,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4588,"            return new String(padding).concat(str);
",2,0,0,2,4,0,4,2,0,8,39,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4601,"        return str == null ? 0 : str.length();
",2,1,0,1,2,0,4,0,0,7,38,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4630,"        return center(str, size, ' ');
",0,0,0,1,2,0,6,0,0,7,30,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4658,"        if (str == null || size <= 0) {
",4,3,0,1,3,0,0,0,0,7,31,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4659,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4661,"        int strLen = str.length();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4662,"        int pads = size - strLen;
",6,1,0,0,0,0,0,0,0,7,25,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4663,"        if (pads <= 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4664,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4666,"        str = leftPad(str, strLen + pads / 2, padChar);
",6,2,0,1,2,0,6,0,0,15,47,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4667,"        str = rightPad(str, size, padChar);
",2,0,0,1,2,0,8,0,0,11,35,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4668,"        return str;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4698,"        if (str == null || size <= 0) {
",4,3,0,1,3,0,0,0,0,7,31,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4699,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4701,"        if (isEmpty(padStr)) {
",0,0,0,2,5,0,4,0,0,4,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4702,"            padStr = "" "";
",2,0,0,0,0,0,0,0,0,4,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4704,"        int strLen = str.length();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4705,"        int pads = size - strLen;
",6,1,0,0,0,0,0,0,0,7,25,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4706,"        if (pads <= 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4707,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4709,"        str = leftPad(str, strLen + pads / 2, padStr);
",6,2,0,1,2,0,6,0,0,15,46,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4710,"        str = rightPad(str, size, padStr);
",2,0,0,1,2,0,8,0,0,11,34,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4711,"        return str;
",2,0,0,0,0,0,0,0,0,2,11,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4736,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4737,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4739,"        return str.toUpperCase();
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4759,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4760,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4762,"        return str.toUpperCase(locale);
",0,0,0,1,2,0,6,0,0,6,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4785,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4786,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4788,"        return str.toLowerCase();
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4808,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4809,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4811,"        return str.toLowerCase(locale);
",0,0,0,1,2,0,6,0,0,6,31,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4836,"        if (str == null || (strLen = str.length()) == 0) {
",4,3,0,3,7,0,4,0,0,12,50,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4837,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4839,"        return new StringBuilder(strLen)
",2,0,0,1,2,0,0,2,0,4,32,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4867,"        if (str == null || (strLen = str.length()) == 0) {
",4,3,0,3,7,0,4,0,0,12,50,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4868,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4870,"        return new StringBuilder(strLen)
",2,0,0,1,2,0,0,2,0,4,32,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4905,"        if (str == null || (strLen = str.length()) == 0) {
",4,3,0,3,7,0,4,0,0,12,50,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4906,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4908,"        StringBuilder buffer = new StringBuilder(strLen);
",4,0,0,1,2,0,0,4,0,8,49,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4910,"        char ch = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4911,"        for (int i = 0; i < strLen; i++) {
",8,1,0,1,3,0,0,0,0,10,34,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4912,"            ch = str.charAt(i);
",2,0,0,1,2,0,6,0,0,9,19,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4913,"            if (Character.isUpperCase(ch)) {
",0,0,0,2,5,0,6,0,0,6,32,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4914,"                ch = Character.toLowerCase(ch);
",2,0,0,1,2,0,6,0,0,9,31,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4915,"            } else if (Character.isTitleCase(ch)) {
",0,0,0,2,6,0,6,0,0,6,39,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4916,"                ch = Character.toLowerCase(ch);
",2,0,0,1,2,0,6,0,0,9,31,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4917,"            } else if (Character.isLowerCase(ch)) {
",0,0,0,2,6,0,6,0,0,6,39,9,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4918,"                ch = Character.toUpperCase(ch);
",2,0,0,1,2,0,6,0,0,9,31,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4920,"            buffer.append(ch);
",0,0,0,1,2,0,6,0,0,6,18,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4922,"        return buffer.toString();
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4947,"        if (isEmpty(str) || isEmpty(sub)) {
",0,1,0,3,7,0,8,0,0,9,35,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4948,"            return 0;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4950,"        int count = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4951,"        int idx = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4952,"        while ((idx = str.indexOf(sub, idx)) != -1) {
",2,1,0,3,7,0,8,0,0,13,45,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4953,"            count++;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4954,"            idx += sub.length();
",2,0,0,1,2,0,4,0,0,7,20,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4956,"        return count;
",2,0,0,0,0,0,0,0,0,2,13,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4980,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4981,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4983,"        int sz = str.length();
",2,0,0,1,2,0,4,0,0,6,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4984,"        for (int i = 0; i < sz; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4985,"            if (Character.isLetter(str.charAt(i)) == false) {
",0,1,0,3,7,0,10,0,0,12,49,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4986,"                return false;
",0,0,0,0,0,0,0,0,0,1,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,4989,"        return true;
",0,0,0,0,0,0,0,0,0,1,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5014,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5015,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5017,"        int sz = str.length();
",2,0,0,1,2,0,4,0,0,6,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5018,"        for (int i = 0; i < sz; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5019,"            if ((Character.isLetter(str.charAt(i)) == false) && (str.charAt(i) != ' ')) {
",0,3,0,6,13,0,16,0,0,21,77,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5020,"                return false;
",0,0,0,0,0,0,0,0,0,1,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5023,"        return true;
",0,0,0,0,0,0,0,0,0,1,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5047,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5048,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5050,"        int sz = str.length();
",2,0,0,1,2,0,4,0,0,6,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5051,"        for (int i = 0; i < sz; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5052,"            if (Character.isLetterOrDigit(str.charAt(i)) == false) {
",0,1,0,3,7,0,10,0,0,12,56,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5053,"                return false;
",0,0,0,0,0,0,0,0,0,1,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5056,"        return true;
",0,0,0,0,0,0,0,0,0,1,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5081,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5082,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5084,"        int sz = str.length();
",2,0,0,1,2,0,4,0,0,6,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5085,"        for (int i = 0; i < sz; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5086,"            if ((Character.isLetterOrDigit(str.charAt(i)) == false) && (str.charAt(i) != ' ')) {
",0,3,0,6,13,0,16,0,0,21,84,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5087,"                return false;
",0,0,0,0,0,0,0,0,0,1,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5090,"        return true;
",0,0,0,0,0,0,0,0,0,1,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5119,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5120,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5122,"        int sz = str.length();
",2,0,0,1,2,0,4,0,0,6,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5123,"        for (int i = 0; i < sz; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5124,"            if (CharUtils.isAsciiPrintable(str.charAt(i)) == false) {
",0,1,0,3,7,0,10,0,0,12,57,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5125,"                return false;
",0,0,0,0,0,0,0,0,0,1,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5128,"        return true;
",0,0,0,0,0,0,0,0,0,1,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5153,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5154,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5156,"        int sz = str.length();
",2,0,0,1,2,0,4,0,0,6,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5157,"        for (int i = 0; i < sz; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5158,"            if (Character.isDigit(str.charAt(i)) == false) {
",0,1,0,3,7,0,10,0,0,12,48,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5159,"                return false;
",0,0,0,0,0,0,0,0,0,1,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5162,"        return true;
",0,0,0,0,0,0,0,0,0,1,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5189,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5190,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5192,"        int sz = str.length();
",2,0,0,1,2,0,4,0,0,6,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5193,"        for (int i = 0; i < sz; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5194,"            if ((Character.isDigit(str.charAt(i)) == false) && (str.charAt(i) != ' ')) {
",0,3,0,6,13,0,16,0,0,21,76,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5195,"                return false;
",0,0,0,0,0,0,0,0,0,1,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5198,"        return true;
",0,0,0,0,0,0,0,0,0,1,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5221,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5222,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5224,"        int sz = str.length();
",2,0,0,1,2,0,4,0,0,6,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5225,"        for (int i = 0; i < sz; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5226,"            if ((Character.isWhitespace(str.charAt(i)) == false)) {
",0,1,0,4,9,0,10,0,0,12,55,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5227,"                return false;
",0,0,0,0,0,0,0,0,0,1,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5230,"        return true;
",0,0,0,0,0,0,0,0,0,1,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5251,"        if (str == null || isEmpty(str)) {
",2,2,0,2,5,0,4,0,0,9,34,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5252,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5254,"        int sz = str.length();
",2,0,0,1,2,0,4,0,0,6,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5255,"        for (int i = 0; i < sz; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5256,"            if (Character.isLowerCase(str.charAt(i)) == false) {
",0,1,0,3,7,0,10,0,0,12,52,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5257,"                return false;
",0,0,0,0,0,0,0,0,0,1,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5260,"        return true;
",0,0,0,0,0,0,0,0,0,1,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5281,"        if (str == null || isEmpty(str)) {
",2,2,0,2,5,0,4,0,0,9,34,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5282,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5284,"        int sz = str.length();
",2,0,0,1,2,0,4,0,0,6,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5285,"        for (int i = 0; i < sz; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5286,"            if (Character.isUpperCase(str.charAt(i)) == false) {
",0,1,0,3,7,0,10,0,0,12,52,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5287,"                return false;
",0,0,0,0,0,0,0,0,0,1,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5290,"        return true;
",0,0,0,0,0,0,0,0,0,1,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5312,"        return str == null ? EMPTY : str;
",6,1,0,0,0,0,0,0,0,7,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5333,"        return str == null ? defaultStr : str;
",6,1,0,0,0,0,0,0,0,7,38,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5354,"        return StringUtils.isEmpty(str) ? defaultStr : str;
",4,0,0,1,2,0,6,0,0,10,51,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5374,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5375,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5377,"        return new StringBuilder(str).reverse().toString();
",2,0,0,3,6,0,4,2,0,8,51,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5400,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5401,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5405,"        String[] strs = split(str, separatorChar);
",2,0,0,2,4,0,6,2,0,10,42,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5406,"        ArrayUtils.reverse(strs);
",0,0,0,1,2,0,6,0,0,6,25,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5407,"        return join(strs, separatorChar);
",0,0,0,1,2,0,6,0,0,6,33,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5445,"        return abbreviate(str, 0, maxWidth);
",0,0,0,1,2,0,6,0,0,6,36,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5484,"        if (str == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5485,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5487,"        if (maxWidth < 4) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5488,"            throw new IllegalArgumentException(""Minimum abbreviation width is 4"");
",0,0,0,1,2,0,0,2,0,3,70,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5490,"        if (str.length() <= maxWidth) {
",2,1,0,2,5,0,4,0,0,7,31,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5491,"            return str;
",2,0,0,0,0,0,0,0,0,2,11,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5493,"        if (offset > str.length()) {
",2,1,0,2,5,0,4,0,0,7,28,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5494,"            offset = str.length();
",2,0,0,1,2,0,4,0,0,7,22,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5496,"        if ((str.length() - offset) < (maxWidth - 3)) {
",4,3,0,4,9,0,4,0,0,11,47,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5497,"            offset = str.length() - (maxWidth - 3);
",4,2,0,2,4,0,4,0,0,11,39,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5499,"        if (offset <= 4) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5500,"            return str.substring(0, maxWidth - 3) + ""..."";
",2,2,0,1,2,0,4,0,0,9,46,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5502,"        if (maxWidth < 7) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5503,"            throw new IllegalArgumentException(""Minimum abbreviation width with offset is 7"");
",0,0,0,1,2,0,0,2,0,3,82,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5505,"        if ((offset + (maxWidth - 3)) < str.length()) {
",4,3,0,4,9,0,4,0,0,11,47,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5506,"            return ""..."" + abbreviate(str.substring(offset), maxWidth - 3);
",2,2,0,2,4,0,8,0,0,13,63,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5508,"        return ""..."" + str.substring(str.length() - (maxWidth - 3));
",2,3,0,3,6,0,8,0,0,14,60,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5539,"        if (str1 == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5540,"            return str2;
",2,0,0,0,0,0,0,0,0,2,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5542,"        if (str2 == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5543,"            return str1;
",2,0,0,0,0,0,0,0,0,2,12,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5545,"        int at = indexOfDifference(str1, str2);
",2,0,0,1,2,0,6,0,0,8,39,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5546,"        if (at == -1) {
",2,1,0,1,3,0,0,0,0,4,15,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5547,"            return EMPTY;
",2,0,0,0,0,0,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5549,"        return str2.substring(at);
",0,0,0,1,2,0,6,0,0,6,26,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5576,"        if (str1 == str2) {
",4,1,0,1,3,0,0,0,0,5,19,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5577,"            return -1;
",0,0,0,0,0,0,0,0,0,1,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5579,"        if (str1 == null || str2 == null) {
",4,3,0,1,3,0,0,0,0,7,35,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5580,"            return 0;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5583,"        for (i = 0; i < str1.length() && i < str2.length(); ++i) {
",8,3,0,3,7,0,8,0,0,21,58,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5584,"            if (str1.charAt(i) != str2.charAt(i)) {
",0,1,0,3,7,0,12,0,0,13,39,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5585,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5588,"        if (i < str2.length() || i < str1.length()) {
",4,3,0,3,7,0,8,0,0,15,45,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5589,"            return i;
",2,0,0,0,0,0,0,0,0,2,9,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5591,"        return -1;
",0,0,0,0,0,0,0,0,0,1,10,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5626,"        if (strs == null || strs.length <= 1) {
",6,3,0,1,3,0,0,0,0,9,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5627,"            return -1;
",0,0,0,0,0,0,0,0,0,1,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5629,"        boolean anyStringNull = false;
",2,0,0,0,0,0,0,0,0,3,30,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5630,"        boolean allStringsNull = true;
",2,0,0,0,0,0,0,0,0,3,30,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5631,"        int arrayLen = strs.length;
",6,0,0,0,0,0,0,0,0,6,27,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5632,"        int shortestStrLen = Integer.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,6,39,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5633,"        int longestStrLen = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5638,"        for (int i = 0; i < arrayLen; i++) {
",8,1,0,1,3,0,0,0,0,10,36,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5639,"            if (strs[i] == null) {
",0,1,1,2,5,0,0,0,0,5,22,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5640,"                anyStringNull = true;
",2,0,0,0,0,0,0,0,0,4,21,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5641,"                shortestStrLen = 0;
",2,0,0,0,0,0,0,0,0,3,19,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5643,"                allStringsNull = false;
",2,0,0,0,0,0,0,0,0,4,23,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5644,"                shortestStrLen = Math.min(strs[i].length(), shortestStrLen);
",2,0,1,3,6,0,8,0,0,15,60,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5645,"                longestStrLen = Math.max(strs[i].length(), longestStrLen);
",2,0,1,3,6,0,8,0,0,15,58,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5650,"        if (allStringsNull || (longestStrLen == 0 && !anyStringNull)) {
",6,3,0,2,5,0,0,0,0,10,63,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5651,"            return -1;
",0,0,0,0,0,0,0,0,0,1,10,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5655,"        if (shortestStrLen == 0) {
",2,1,0,1,3,0,0,0,0,3,26,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5656,"            return 0;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5660,"        int firstDiff = -1;
",2,0,0,0,0,0,0,0,0,3,19,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5661,"        for (int stringPos = 0; stringPos < shortestStrLen; stringPos++) {
",8,1,0,1,3,0,0,0,0,10,66,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5662,"            char comparisonChar = strs[0].charAt(stringPos);
",2,0,1,2,4,0,4,0,0,8,48,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5663,"            for (int arrayPos = 1; arrayPos < arrayLen; arrayPos++) {
",8,1,0,1,3,0,0,0,0,10,57,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5664,"                if (strs[arrayPos].charAt(stringPos) != comparisonChar) {
",2,1,1,3,7,0,4,0,0,11,57,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5665,"                    firstDiff = stringPos;
",4,0,0,0,0,0,0,0,0,5,22,10,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5666,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5669,"            if (firstDiff != -1) {
",2,1,0,1,3,0,0,0,0,4,22,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5670,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5674,"        if (firstDiff == -1 && shortestStrLen != longestStrLen) {
",6,3,0,1,3,0,0,0,0,10,57,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5678,"            return shortestStrLen;
",2,0,0,0,0,0,0,0,0,2,22,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5680,"        return firstDiff;
",2,0,0,0,0,0,0,0,0,2,17,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5717,"        if (strs == null || strs.length == 0) {
",6,3,0,1,3,0,0,0,0,9,39,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5718,"            return EMPTY;
",2,0,0,0,0,0,0,0,0,2,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5720,"        int smallestIndexOfDiff = indexOfDifference(strs);
",2,0,0,1,2,0,4,0,0,6,50,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5721,"        if (smallestIndexOfDiff == -1) {
",2,1,0,1,3,0,0,0,0,4,32,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5723,"            if (strs[0] == null) {
",0,1,1,2,5,0,0,0,0,3,22,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5724,"                return EMPTY;
",2,0,0,0,0,0,0,0,0,2,13,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5726,"            return strs[0];
",0,0,1,1,2,0,0,0,0,2,15,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5727,"        } else if (smallestIndexOfDiff == 0) {
",2,1,0,1,4,0,0,0,0,3,38,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5729,"            return EMPTY;
",2,0,0,0,0,0,0,0,0,2,13,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5732,"            return strs[0].substring(0, smallestIndexOfDiff);
",0,0,1,2,4,0,4,0,0,6,49,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5773,"        if (s == null || t == null) {
",4,3,0,1,3,0,0,0,0,7,29,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5774,"            throw new IllegalArgumentException(""Strings must not be null"");
",0,0,0,1,2,0,0,2,0,4,63,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5794,"        int n = s.length(); // length of s
",2,0,0,1,2,0,4,0,0,6,34,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5795,"        int m = t.length(); // length of t
",2,0,0,1,2,0,4,0,0,6,34,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5797,"        if (n == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5798,"            return m;
",2,0,0,0,0,0,0,0,0,2,9,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5799,"        } else if (m == 0) {
",2,1,0,1,4,0,0,0,0,3,20,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5800,"            return n;
",2,0,0,0,0,0,0,0,0,2,9,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5803,"        if (n > m) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5805,"            String tmp = s;
",4,0,0,0,0,0,0,2,0,6,15,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5806,"            s = t;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5807,"            t = tmp;
",4,0,0,0,0,0,0,0,0,5,8,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5808,"            n = m;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5809,"            m = t.length();
",2,0,0,1,2,0,4,0,0,7,15,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5812,"        int p[] = new int[n+1]; //'previous' cost array, horizontally
",4,1,0,2,4,0,0,0,0,5,61,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5813,"        int d[] = new int[n+1]; // cost array, horizontally
",4,1,0,2,4,0,0,0,0,5,51,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5824,"        for (i = 0; i<=n; i++) {
",8,1,0,1,3,0,0,0,0,11,24,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5825,"            p[i] = i;
",2,0,1,1,2,0,0,0,0,7,9,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5828,"        for (j = 1; j<=m; j++) {
",8,1,0,1,3,0,0,0,0,11,24,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5829,"            t_j = t.charAt(j-1);
",4,1,0,1,2,0,4,0,0,10,20,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5830,"            d[0] = j;
",2,0,1,1,2,0,0,0,0,5,9,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5832,"            for (i=1; i<=n; i++) {
",8,1,0,1,3,0,0,0,0,11,22,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5833,"                cost = s.charAt(i-1)==t_j ? 0 : 1;
",6,2,0,1,2,0,4,0,0,13,34,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5835,"                d[i] = Math.min(Math.min(d[i-1]+1, p[i]+1),  p[i-1]+cost);
",6,5,1,6,12,0,8,0,0,32,58,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5839,"            _d = p;
",4,0,0,0,0,0,0,0,0,5,7,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5840,"            p = d;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5841,"            d = _d;
",4,0,0,0,0,0,0,0,0,5,7,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5846,"        return p[n];
",0,0,1,1,2,0,0,0,0,4,12,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5895,"        return startsWith(str, prefix, false);
",0,0,0,1,2,0,6,0,0,7,38,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5920,"        return startsWith(str, prefix, true);
",0,0,0,1,2,0,6,0,0,7,37,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5935,"        if (str == null || prefix == null) {
",4,3,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5936,"            return (str == null && prefix == null);
",4,3,0,1,2,0,0,0,0,7,39,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5938,"        if (prefix.length() > str.length()) {
",0,1,0,3,7,0,8,0,0,9,37,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5939,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5941,"        return str.regionMatches(ignoreCase, 0, prefix, 0, prefix.length());
",0,0,0,2,4,0,12,0,0,12,68,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5963,"        if (isEmpty(string) || ArrayUtils.isEmpty(searchStrings)) {
",0,1,0,3,7,0,10,0,0,11,59,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5964,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5966,"        for (int i = 0; i < searchStrings.length; i++) {
",10,1,0,1,3,0,0,0,0,12,48,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5967,"            String searchString = searchStrings[i];
",2,0,1,1,2,0,0,2,0,8,39,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5968,"            if (StringUtils.startsWith(string, searchString)) {
",0,0,0,2,5,0,8,0,0,8,51,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5969,"                return true;
",0,0,0,0,0,0,0,0,0,1,12,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,5972,"        return false;
",0,0,0,0,0,0,0,0,0,1,13,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,6001,"        return endsWith(str, suffix, false);
",0,0,0,1,2,0,6,0,0,7,36,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,6027,"        return endsWith(str, suffix, true);
",0,0,0,1,2,0,6,0,0,7,35,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,6042,"        if (str == null || suffix == null) {
",4,3,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,6043,"            return (str == null && suffix == null);
",4,3,0,1,2,0,0,0,0,7,39,7,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,6045,"        if (suffix.length() > str.length()) {
",0,1,0,3,7,0,8,0,0,9,37,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,6046,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,6048,"        int strOffset = str.length() - suffix.length();
",2,1,0,2,4,0,8,0,0,11,47,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/StringUtils,36,6049,"        return str.regionMatches(ignoreCase, strOffset, suffix, 0, suffix.length());
",0,0,0,2,4,0,14,0,0,14,76,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1114,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1115,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1134,"            return 0f;
",0,0,0,0,0,0,0,0,0,0,10,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1142,"        } catch (Exception ex) {
",2,0,0,1,4,0,0,2,0,4,24,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1143,"            return 0;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1163,"            return 0;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1170,"            str = str + ""0"";
",4,1,0,0,0,0,0,0,0,7,16,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1174,"        } catch (Exception ex) {
",2,0,0,1,4,0,0,2,0,4,24,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1175,"            return 0;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1193,"        return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1204,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1217,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1231,"            return false;
",0,0,0,0,0,0,0,0,0,1,13,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1250,"        } catch (SecurityException ex) {
",2,0,0,1,4,0,0,2,0,4,32,6,0.00000,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1252,"            System.err.println(
",4,0,0,0,1,0,2,0,0,6,19,8,0.00000,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1256,"            return null;
",0,0,0,0,0,0,0,0,0,0,12,3,0.00000,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1292,"        return JAVA_VERSION_INT >= requiredVersion;
",4,1,0,0,0,0,0,0,0,5,43,4,0.00000,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1306,"        return JAVA_AWT_HEADLESS != null ? JAVA_AWT_HEADLESS.equals(Boolean.TRUE.toString()) : false;
",6,1,0,2,4,0,6,0,0,14,93,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1319,"        return new File(System.getProperty(JAVA_HOME_KEY));
",0,0,0,2,4,0,6,2,0,8,51,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1333,"        return new File(System.getProperty(JAVA_IO_TMPDIR_KEY));
",0,0,0,2,4,0,6,2,0,8,56,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1347,"        return new File(System.getProperty(USER_DIR_KEY));
",0,0,0,2,4,0,6,2,0,8,50,5,0.00000,0
defect4j,lang,org/apache/commons/lang3/SystemUtils,36,1361,"        return new File(System.getProperty(USER_HOME_KEY));
",0,0,0,2,4,0,6,2,0,8,51,5,0.00000,0
