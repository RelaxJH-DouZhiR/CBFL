dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy
defect4j,time,org/joda/time/IllegalFieldValueException,14,314,"        return iMessage;
",2,0,0,0,0,1,0,0,0,2,16,4,18.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,206,"        if (valueToAdd == 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,4.92308,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,210,"        if (DateTimeUtils.isContiguous(partial)) {
",0,0,0,2,5,0,6,0,0,6,42,5,4.92308,1
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,211,"            long instant = 0L;
",2,0,0,0,0,0,0,0,0,2,18,7,4.92308,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,212,"            for (int i = 0, isize = partial.size(); i < isize; i++) {
",10,1,0,2,5,0,4,0,0,16,57,6,4.92308,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,213,"                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
",2,0,1,4,8,0,14,0,0,21,80,8,4.92308,0
defect4j,time,org/joda/time/MonthDay,14,518,"        int[] newValues = getValues();
",2,0,0,2,4,0,2,0,0,4,30,5,4.92308,0
defect4j,time,org/joda/time/MonthDay,14,519,"        newValues = getField(index).add(this, index, newValues, amount);
",2,0,0,2,4,0,12,0,0,15,64,4,4.92308,0
defect4j,time,org/joda/time/MonthDay,14,515,"        if (amount == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,3.55556,0
defect4j,time,org/joda/time/MonthDay,14,514,"        int index = indexOfSupported(fieldType);
",2,0,0,1,2,0,4,0,0,6,40,5,3.04762,0
defect4j,time,org/joda/time/DateTimeUtils,14,347,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,2.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,334,"        if (partial == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,1.88235,0
defect4j,time,org/joda/time/DateTimeUtils,14,337,"        DurationFieldType lastType = null;
",2,0,0,0,0,0,0,2,0,4,34,4,1.88235,0
defect4j,time,org/joda/time/DateTimeUtils,14,338,"        for (int i = 0; i < partial.size(); i++) {
",6,1,0,2,5,0,4,0,0,12,42,4,1.88235,0
defect4j,time,org/joda/time/DateTimeUtils,14,339,"            DateTimeField loopField = partial.getField(i);
",2,0,0,1,2,0,6,2,0,10,46,6,1.88235,0
defect4j,time,org/joda/time/DateTimeUtils,14,340,"            if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,1.88235,0
defect4j,time,org/joda/time/DateTimeUtils,14,341,"                if (loopField.getRangeDurationField().getType() != lastType) {
",2,1,0,3,7,0,6,0,0,9,62,8,1.88235,0
defect4j,time,org/joda/time/DateTimeUtils,14,345,"            lastType = loopField.getDurationField().getType();
",2,0,0,2,4,0,6,0,0,9,50,6,1.88235,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,129,"        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];
",2,1,1,1,2,1,0,0,0,5,43,5,1.14286,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,89,"                return iChronology.getDaysInMonthMax(month);
",0,0,0,1,2,1,6,0,0,6,44,9,1.14286,0
defect4j,time,org/joda/time/base/AbstractPartial,14,223,"        return index;
",2,0,0,0,0,1,0,0,0,2,13,4,0.95522,0
defect4j,time,org/joda/time/MonthDay,14,352,"        super(new int[] {monthOfYear, dayOfMonth}, chronology);
",6,0,0,3,6,0,0,0,0,6,55,4,0.91429,0
defect4j,time,org/joda/time/MonthDay,14,353,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.91429,0
defect4j,time,org/joda/time/MonthDay,14,592,"        return withFieldAdded(DurationFieldType.months(), months);
",0,0,0,2,4,1,8,0,0,8,58,5,0.90000,0
defect4j,time,org/joda/time/MonthDay,14,652,"        return withFieldAdded(DurationFieldType.months(), FieldUtils.safeNegate(months));
",0,0,0,3,6,1,12,0,0,12,81,5,0.90000,0
defect4j,time,org/joda/time/MonthDay,14,410,"            return chrono.monthOfYear();
",0,0,0,1,2,1,4,0,0,4,28,6,0.87671,0
defect4j,time,org/joda/time/MonthDay,14,412,"            return chrono.dayOfMonth();
",0,0,0,1,2,1,4,0,0,4,27,6,0.87671,0
defect4j,time,org/joda/time/MonthDay,14,408,"        switch (index) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.86486,0
defect4j,time,org/joda/time/base/AbstractPartial,14,204,"                return i;
",2,0,0,0,0,1,0,0,0,2,9,8,0.82051,0
defect4j,time,org/joda/time/base/AbstractPartial,14,219,"        int index = indexOf(type);
",2,0,0,1,2,0,4,0,0,6,26,5,0.75294,0
defect4j,time,org/joda/time/base/AbstractPartial,14,220,"        if (index == -1) {
",2,1,0,1,3,0,0,0,0,4,18,4,0.75294,0
defect4j,time,org/joda/time/MonthDay,14,426,"        return FIELD_TYPES[index];
",0,0,1,1,2,1,0,0,0,4,26,5,0.68085,0
defect4j,time,org/joda/time/base/AbstractPartial,14,202,"        for (int i = 0, isize = size(); i < isize; i++) {
",10,1,0,2,5,0,2,0,0,14,49,4,0.66667,0
defect4j,time,org/joda/time/base/AbstractPartial,14,203,"            if (getFieldType(i).getDurationType() == type) {
",2,1,0,3,7,0,6,0,0,9,48,6,0.66667,0
defect4j,time,org/joda/time/MonthDay,14,395,"        return 2;
",0,0,0,0,0,1,0,0,0,0,9,3,0.64646,0
defect4j,time,org/joda/time/MonthDay,14,79,"    private static final DateTimeFieldType[] FIELD_TYPES = new DateTimeFieldType[] {
",2,0,0,2,5,3,0,4,0,9,80,2,0.62136,0
defect4j,time,org/joda/time/MonthDay,14,84,"    private static final DateTimeFormatter PARSER = new DateTimeFormatterBuilder()
",2,0,0,1,2,3,0,4,0,9,78,2,0.62136,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,555,"                    builder.appendLiteral(new String(sub));
",2,0,0,2,4,0,4,2,0,8,39,10,0.52033,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,557,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.52033,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,575,"        int thisYear = getYear(instant);
",2,0,0,1,2,0,4,0,0,6,32,5,0.52033,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,576,"        int thisMonth = getMonthOfYear(instant, thisYear);
",2,0,0,1,2,0,6,0,0,8,50,5,0.52033,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,577,"        return getDaysInYearMonth(thisYear, thisMonth);
",0,0,0,1,2,1,6,0,0,6,47,5,0.52033,0
defect4j,time,org/joda/time/field/FieldUtils,14,218,"            throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,8,0.48000,0
defect4j,time,org/joda/time/base/BasePartial,14,237,"        return (int[]) iValues.clone();
",0,0,0,3,6,1,4,0,0,4,31,6,0.47407,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,82,"                int month = values[i];
",2,0,1,1,2,0,0,0,0,6,22,9,0.44755,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,83,"                for (int j = 0; j < size; j++) {
",8,1,0,1,3,0,0,0,0,10,32,8,0.44755,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,84,"                    if (partial.getFieldType(j) == DateTimeFieldType.year()) {
",0,1,0,3,7,0,10,0,0,11,58,10,0.44755,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,595,"        if (ldp == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.44444,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,596,"            ldp = dateElementParser().withZoneUTC();
",2,0,0,2,4,0,4,0,0,7,40,6,0.44444,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,598,"        return ldp;
",2,0,0,0,0,1,0,0,0,2,11,4,0.44444,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,79,"        int size = partial.size();
",2,0,0,1,2,0,4,0,0,6,26,5,0.41830,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,80,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.41830,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,81,"            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {
",0,1,0,3,7,0,10,0,0,11,65,6,0.41830,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,53,"            buf.append(""must be in the range ["")
",0,0,0,1,3,0,4,0,0,5,36,12,0.37895,0
defect4j,time,org/joda/time/field/FieldUtils,14,49,"        if (value == Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,33,4,0.36364,0
defect4j,time,org/joda/time/field/FieldUtils,14,52,"        return -value;
",2,0,0,0,0,1,0,0,0,3,14,4,0.36364,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,565,"        return 31;
",0,0,0,0,0,1,0,0,0,0,10,3,0.34973,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,486,"                    builder.appendMonthOfYear(tokenLen);
",0,0,0,1,2,0,6,0,0,6,36,10,0.34409,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,488,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.34409,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,490,"                builder.appendDayOfMonth(tokenLen);
",0,0,0,1,2,0,6,0,0,6,35,8,0.33684,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,491,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.33684,0
defect4j,time,org/joda/time/MonthDay,14,780,"        List<DateTimeFieldType> fields = new ArrayList<DateTimeFieldType>();
",2,0,0,1,2,0,0,8,0,10,68,4,0.33333,0
defect4j,time,org/joda/time/MonthDay,14,781,"        fields.add(DateTimeFieldType.monthOfYear());
",0,0,0,2,4,0,8,0,0,8,44,5,0.33333,0
defect4j,time,org/joda/time/MonthDay,14,782,"        fields.add(DateTimeFieldType.dayOfMonth());
",0,0,0,2,4,0,8,0,0,8,43,5,0.33333,0
defect4j,time,org/joda/time/MonthDay,14,783,"        return ISODateTimeFormat.forFields(fields, true, true).print(this);
",0,0,0,2,4,1,8,0,0,10,67,5,0.33333,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,50,"        } else if (upperBound == null) {
",2,1,0,1,4,0,0,0,0,3,32,5,0.32432,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));
",0,0,0,3,6,0,12,0,0,14,79,3,0.31304,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,109,"        iDateTimeFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,31,4,0.31304,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,110,"        iDurationFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.31304,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,111,"        iFieldName = fieldType.getName();
",2,0,0,1,2,0,4,0,0,7,33,4,0.31304,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,112,"        iNumberValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.31304,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,113,"        iStringValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.31304,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,114,"        iLowerBound = lowerBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.31304,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,115,"        iUpperBound = upperBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.31304,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,116,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.31304,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,117,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.31304,0
defect4j,time,org/joda/time/base/AbstractPartial,14,267,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.30769,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,328,"                appendSeparator(bld, extended);
",0,0,0,1,2,0,6,0,0,6,31,10,0.30769,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,329,"                bld.appendDayOfMonth(2);
",0,0,0,1,2,0,4,0,0,4,24,10,0.30769,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,479,"                if (tokenLen >= 3) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.30189,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,59,"        return iChronology.getDaysInMonthMax();
",0,0,0,1,2,1,4,0,0,4,39,5,0.29224,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,41,"        StringBuffer buf = new StringBuffer()
",2,0,0,1,2,0,0,4,0,6,37,4,0.28800,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,44,"        if (lowerBound == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.28800,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,59,"        if (explain != null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.28800,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,63,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.28800,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,323,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,8,0.28571,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,324,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,8,0.28571,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,325,"            bld.appendMonthOfYear(2);
",0,0,0,1,2,0,4,0,0,4,25,8,0.28571,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,326,"            if (fields.remove(DateTimeFieldType.dayOfMonth())) {
",0,0,0,3,7,0,8,0,0,8,52,8,0.28571,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,551,"                    builder.appendLiteral(sub.charAt(0));
",0,0,0,2,4,0,8,0,0,8,37,10,0.27586,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,613,"                    i--;
",2,0,0,0,0,0,0,0,0,3,4,11,0.27468,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,614,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.27468,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,549,"                String sub = token.substring(1);
",2,0,0,1,2,0,4,2,0,8,32,7,0.27350,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,550,"                if (sub.length() == 1) {
",0,1,0,2,5,0,4,0,0,5,24,7,0.27350,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,596,"            buf.append('\'');
",0,0,0,1,2,0,4,0,0,5,17,7,0.27350,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,598,"            boolean inLiteral = false;
",2,0,0,0,0,0,0,0,0,3,26,7,0.27350,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,600,"            for (; i < length; i++) {
",6,1,0,1,3,0,0,0,0,8,25,6,0.27350,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,601,"                c = pattern.charAt(i);
",2,0,0,1,2,0,6,0,0,9,22,8,0.27350,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,603,"                if (c == '\'') {
",2,1,0,1,3,0,0,0,0,4,16,8,0.27350,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,611,"                } else if (!inLiteral &&
",2,1,0,0,2,0,0,0,0,4,24,9,0.27350,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,616,"                    buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,12,0.27350,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,588,"                    buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,11,0.26667,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,589,"                    i++;
",2,0,0,0,0,0,0,0,0,3,4,10,0.26667,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,593,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.26667,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,300,"        return withZone(DateTimeZone.UTC);
",4,0,0,1,2,1,2,0,0,6,34,5,0.26667,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,586,"                char peek = pattern.charAt(i + 1);
",4,1,0,1,2,0,4,0,0,9,34,9,0.25703,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,587,"                if (peek == c) {
",4,1,0,1,3,0,0,0,0,5,16,8,0.25703,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2577,"                iPrinters = null;
",2,0,0,0,0,0,0,0,0,3,17,7,0.24806,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2578,"                iPrintedLengthEstimate = 0;
",2,0,0,0,0,0,0,0,0,3,27,7,0.24806,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,683,"                formatter = builder.toFormatter();
",2,0,0,1,2,0,4,0,0,7,34,8,0.24615,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,685,"                cPatternedCache.put(pattern, formatter);
",0,0,0,1,2,0,8,0,0,8,40,9,0.24615,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,687,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.24615,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,688,"        return formatter;
",2,0,0,0,0,1,0,0,0,2,17,4,0.24615,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,170,"        return createFormatterForPattern(pattern);
",0,0,0,1,2,1,4,0,0,4,42,5,0.24521,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,674,"        if (pattern == null || pattern.length() == 0) {
",2,3,0,2,5,0,4,0,0,9,47,4,0.24521,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,677,"        DateTimeFormatter formatter = null;
",2,0,0,0,0,0,0,2,0,4,35,4,0.24521,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,678,"        synchronized (cPatternedCache) {
",2,0,0,1,3,0,0,0,0,2,32,4,0.24521,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,679,"            formatter = cPatternedCache.get(pattern);
",2,0,0,1,2,0,6,0,0,9,41,6,0.24521,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,680,"            if (formatter == null) {
",2,1,0,1,3,0,0,0,0,3,24,6,0.24521,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,681,"                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();
",2,0,0,1,2,0,0,4,0,6,66,8,0.24521,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,682,"                parsePatternTo(builder, pattern);
",0,0,0,1,2,0,6,0,0,6,33,9,0.24521,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,320,"        if (iZone == zone) {
",4,1,0,1,3,0,0,0,0,5,20,4,0.24427,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,323,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,
",6,0,0,0,1,1,0,2,0,8,56,5,0.24427,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,317,"                nextField = instant.getField(fieldIndex - 1);
",4,1,0,1,2,0,4,0,0,10,45,8,0.23529,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,319,"                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {
",0,1,0,5,11,0,10,0,0,11,82,8,0.23529,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,323,"            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add
",4,2,1,2,4,0,0,0,0,11,74,6,0.23529,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,324,"            values = nextField.add(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field
",4,1,0,1,2,0,8,0,0,14,90,6,0.23529,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,563,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.23273,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,583,"            buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,7,0.23273,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,585,"            while (i + 1 < length) {
",4,2,0,1,3,0,0,0,0,6,24,6,0.23273,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,400,"        int length = pattern.length();
",2,0,0,1,2,0,4,0,0,6,30,5,0.23188,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,401,"        int[] indexRef = new int[1];
",2,0,0,2,4,0,0,0,0,2,28,5,0.23188,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,403,"        for (int i=0; i<length; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.23188,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,404,"            indexRef[0] = i;
",2,0,1,1,2,0,0,0,0,5,16,6,0.23188,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,405,"            String token = parseToken(pattern, indexRef);
",2,0,0,1,2,0,6,2,0,10,45,6,0.23188,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,406,"            i = indexRef[0];
",2,0,1,1,2,0,0,0,0,5,16,6,0.23188,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,408,"            int tokenLen = token.length();
",2,0,0,1,2,0,4,0,0,6,30,7,0.23188,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,409,"            if (tokenLen == 0) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.23188,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,412,"            char c = token.charAt(0);
",2,0,0,1,2,0,4,0,0,6,25,7,0.23188,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,414,"            switch (c) {
",2,0,0,1,3,0,0,0,0,2,12,6,0.23188,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,574,"        StringBuffer buf = new StringBuffer();
",2,0,0,1,2,0,0,4,0,6,38,4,0.23188,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,576,"        int i = indexRef[0];
",2,0,1,1,2,0,0,0,0,4,20,5,0.23188,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,577,"        int length = pattern.length();
",2,0,0,1,2,0,4,0,0,6,30,5,0.23188,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,579,"        char c = pattern.charAt(i);
",2,0,0,1,2,0,6,0,0,8,27,5,0.23188,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,580,"        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {
",8,7,0,1,3,0,0,0,0,19,51,4,0.23188,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,621,"        indexRef[0] = i;
",2,0,1,1,2,0,0,0,0,5,16,4,0.23188,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,622,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.23188,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,147,"    private static final Map<String, DateTimeFormatter> cPatternedCache = new HashMap<String, DateTimeFormatter>(7);
",2,0,0,1,2,3,0,12,0,17,112,2,0.22939,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,149,"    private static final DateTimeFormatter[] cStyleCache = new DateTimeFormatter[25];
",2,0,0,2,4,3,0,4,0,9,81,2,0.22939,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,334,"        return MIN;
",2,0,0,0,0,1,0,0,0,2,11,4,0.22069,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1133,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.21918,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,613,"        if (dpe == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.21918,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,614,"            dpe = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.21918,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,636,"        return dpe;
",2,0,0,0,0,1,0,0,0,2,11,4,0.21918,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,339,"        return iMax;
",2,0,0,0,0,1,0,0,0,2,12,4,0.21918,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1643,"        if (dye == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.21477,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1644,"            dye = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.21477,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1649,"        return dye;
",2,0,0,0,0,1,0,0,0,2,11,4,0.21477,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1633,"        if (dwe == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.21405,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1634,"            dwe = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.21405,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1639,"        return dwe;
",2,0,0,0,0,1,0,0,0,2,11,4,0.21405,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1623,"        if (wwe == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.21333,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1624,"            wwe = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.21333,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1629,"        return wwe;
",2,0,0,0,0,1,0,0,0,2,11,4,0.21333,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,747,"        return appendDecimal(DateTimeFieldType.dayOfYear(), minDigits, 3);
",0,0,0,2,4,1,8,0,0,8,66,5,0.21262,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,322,"        } else if (fields.remove(DateTimeFieldType.monthOfYear())) {
",0,0,0,3,8,0,8,0,0,8,60,6,0.21053,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,215,"            instant = add(instant, valueToAdd);
",2,0,0,1,2,0,6,0,0,9,35,6,0.21053,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,216,"            return iChronology.get(partial, instant);
",0,0,0,1,2,1,8,0,0,8,41,7,0.21053,0
defect4j,time,org/joda/time/MonthDay,14,520,"        return new MonthDay(this, newValues);
",2,0,0,1,2,1,0,2,0,4,37,5,0.21053,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1614,"        if (we == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.20984,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1615,"            we = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.20984,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1619,"        return we;
",2,0,0,0,0,1,0,0,0,2,10,4,0.20984,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,727,"        return appendDecimal(DateTimeFieldType.dayOfWeek(), minDigits, 1);
",0,0,0,2,4,1,8,0,0,8,66,5,0.20915,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,757,"        return appendDecimal(DateTimeFieldType.weekOfWeekyear(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,71,5,0.20317,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,769,"        return appendSignedDecimal(DateTimeFieldType.weekyear(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,79,5,0.20317,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1261,"            return iValue.length();
",0,0,0,1,2,1,4,0,0,4,23,6,0.20000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,370,"        if (text == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.19938,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,373,"        switch (text.length()) {
",0,0,0,2,5,0,4,0,0,4,24,5,0.19938,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,379,"                return append0(new StringLiteral(text));
",2,0,0,2,4,1,2,2,0,6,40,6,0.19938,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1232,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.19938,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1233,"            iValue = value;
",4,0,0,0,0,0,0,0,0,5,15,5,0.19938,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1234,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.19938,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1237,"            return iValue.length();
",0,0,0,1,2,1,4,0,0,4,23,6,0.19938,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,239,"            reducedPrec = dateByMonth(bld, workingFields, extended, strictISO);
",2,0,0,1,2,0,10,0,0,13,67,6,0.19048,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,139,"            dayToUse = maxDay;
",4,0,0,0,0,0,0,0,0,5,18,6,0.19048,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,273,"        if (printer != null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.18286,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,276,"        if (parsers == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.18286,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,279,"        int length = parsers.length;
",6,0,0,0,0,0,0,0,0,6,28,5,0.18286,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,280,"        if (length == 1) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.18286,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,287,"        DateTimeParser[] copyOfParsers = new DateTimeParser[length];
",2,0,1,2,4,0,0,4,0,8,60,4,0.18286,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,289,"        for (i = 0; i < length - 1; i++) {
",8,2,0,1,3,0,0,0,0,12,34,4,0.18286,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,290,"            if ((copyOfParsers[i] = parsers[i]) == null) {
",0,1,1,4,9,0,0,0,0,10,46,6,0.18286,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,294,"        copyOfParsers[i] = parsers[i];
",0,0,1,2,4,0,0,0,0,9,30,4,0.18286,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,296,"        return append0(printer, new MatchingParser(copyOfParsers));
",2,0,0,2,4,1,4,2,0,8,59,5,0.18286,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,307,"        checkParser(parser);
",0,0,0,1,2,0,4,0,0,4,20,5,0.18286,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,308,"        DateTimeParser[] parsers = new DateTimeParser[] {parser, null};
",4,0,0,3,6,0,0,4,0,8,63,4,0.18286,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,309,"        return append0(null, new MatchingParser(parsers));
",2,0,0,2,4,1,2,2,0,8,50,4,0.18286,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,319,"        if (parser == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.18286,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,322,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.18286,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1112,"                    f = parser;
",4,0,0,0,0,0,0,0,0,5,11,10,0.18286,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2752,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.18286,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2753,"            iParsers = parsers;
",4,0,0,0,0,0,0,0,0,5,19,5,0.18286,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2754,"            int est = 0;
",2,0,0,0,0,0,0,0,0,2,12,6,0.18286,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2755,"            for (int i=parsers.length; --i>=0 ;) {
",8,1,0,1,3,0,0,0,0,10,38,5,0.18286,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2756,"                DateTimeParser parser = parsers[i];
",2,0,1,1,2,0,0,2,0,8,35,7,0.18286,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2757,"                if (parser != null) {
",2,1,0,1,3,0,0,0,0,3,21,7,0.18286,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2758,"                    int len = parser.estimateParsedLength();
",2,0,0,1,2,0,4,0,0,6,40,10,0.18286,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2759,"                    if (len > est) {
",4,1,0,1,3,0,0,0,0,5,16,9,0.18286,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2760,"                        est = len;
",4,0,0,0,0,0,0,0,0,5,10,11,0.18286,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2763,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.18286,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2764,"            iParsedLengthEstimate = est;
",4,0,0,0,0,0,0,0,0,5,28,5,0.18286,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2765,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.18286,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2768,"            return iParsedLengthEstimate;
",2,0,0,0,0,1,0,0,0,2,29,5,0.18286,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2684,"            return iParsedLengthEstimate;
",2,0,0,0,0,1,0,0,0,2,29,5,0.18286,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,152,"        Object f = getFormatter();
",2,0,0,1,2,0,2,2,0,6,26,4,0.18234,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,153,"        if (isParser(f)) {
",0,0,0,2,5,0,4,0,0,4,18,5,0.18234,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,154,"            return (DateTimeParser) f;
",2,0,0,1,2,1,0,2,0,4,26,7,0.18234,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,313,"            if (nextField == null) {
",2,1,0,1,3,0,0,0,0,3,24,6,0.18182,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,314,"                if (fieldIndex == 0) {
",2,1,0,1,3,0,0,0,0,3,22,8,0.18182,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1367,"            return iMaxParsedDigits;
",2,0,0,0,0,1,0,0,0,2,24,5,0.17978,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,406,"            return append0(new UnpaddedNumber(fieldType, maxDigits, false));
",4,0,0,2,4,1,2,2,0,9,64,7,0.17877,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1363,"            super(fieldType, maxParsedDigits, signed);
",6,0,0,1,2,0,0,0,0,6,42,5,0.17729,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1364,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.17729,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,549,"        if (extended) {
",2,0,0,1,3,0,0,0,0,2,15,4,0.16667,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,550,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,7,0.16667,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,552,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.16667,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,293,"        boolean reducedPrec = false;
",2,0,0,0,0,0,0,0,0,3,28,5,0.14815,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,294,"        if (fields.remove(DateTimeFieldType.year())) {
",0,0,0,3,7,0,8,0,0,8,46,5,0.14815,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,341,"        return reducedPrec;
",2,0,0,0,0,1,0,0,0,2,19,4,0.14815,0
defect4j,time,org/joda/time/base/BasePartial,14,184,"        iValues = values;
",4,0,0,0,0,0,0,0,0,5,17,4,0.14350,0
defect4j,time,org/joda/time/base/BasePartial,14,185,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14350,0
defect4j,time,org/joda/time/base/BasePartial,14,180,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.14318,0
defect4j,time,org/joda/time/base/BasePartial,14,181,"        chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,4,0.14318,0
defect4j,time,org/joda/time/base/BasePartial,14,182,"        iChronology = chronology.withUTC();
",2,0,0,1,2,0,4,0,0,7,35,4,0.14318,0
defect4j,time,org/joda/time/base/BasePartial,14,183,"        chronology.validate(this, values);
",0,0,0,1,2,0,6,0,0,6,34,5,0.14318,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1541,"                return iWallOffsets[i - 1];
",2,1,1,1,2,1,0,0,0,5,27,8,0.13417,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,127,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.13361,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,128,"        iPrinter = printer;
",4,0,0,0,0,0,0,0,0,5,19,4,0.13361,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,129,"        iParser = parser;
",4,0,0,0,0,0,0,0,0,5,17,4,0.13361,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,130,"        iLocale = locale;
",4,0,0,0,0,0,0,0,0,5,17,4,0.13361,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,131,"        iOffsetParsed = offsetParsed;
",4,0,0,0,0,0,0,0,0,5,29,4,0.13361,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,132,"        iChrono = chrono;
",4,0,0,0,0,0,0,0,0,5,17,4,0.13361,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,133,"        iZone = zone;
",4,0,0,0,0,0,0,0,0,5,13,4,0.13361,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,134,"        iPivotYear = pivotYear;
",4,0,0,0,0,0,0,0,0,5,23,4,0.13361,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,135,"        iDefaultYear = defaultYear;
",4,0,0,0,0,0,0,0,0,5,27,4,0.13361,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,136,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.13361,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1577,"                return instant;
",2,0,0,0,0,1,0,0,0,2,15,7,0.13333,0
defect4j,time,org/joda/time/MonthDay,14,362,"        super(partial, values);
",4,0,0,1,2,0,0,0,0,4,23,4,0.12903,0
defect4j,time,org/joda/time/MonthDay,14,363,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12903,0
defect4j,time,org/joda/time/DateTimeFieldType,14,378,"        return iName;
",2,0,0,0,0,1,0,0,0,2,13,4,0.12329,0
defect4j,time,org/joda/time/base/BasePartial,14,249,"        return iChronology;
",2,0,0,0,0,1,0,0,0,2,19,4,0.12075,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,818,"        return getMaximumValue(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.10978,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,804,"        return getMaximumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.10959,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,213,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.10922,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,199,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.10903,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,200,"            int value = values[i];
",2,0,1,1,2,0,0,0,0,6,22,7,0.10903,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,201,"            DateTimeField field = partial.getField(i);
",2,0,0,1,2,0,6,2,0,10,42,6,0.10903,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,202,"            if (value < field.getMinimumValue(partial, values)) {
",2,1,0,2,5,0,8,0,0,11,53,6,0.10903,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,207,"            if (value > field.getMaximumValue(partial, values)) {
",2,1,0,2,5,0,8,0,0,11,53,6,0.10903,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,758,"        return getMinimumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.10884,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,772,"        return getMinimumValue(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.10884,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,192,"            if (value > field.getMaximumValue()) {
",2,1,0,2,5,0,4,0,0,7,38,6,0.10884,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,183,"        int size = partial.size();
",2,0,0,1,2,0,4,0,0,6,26,5,0.10847,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,184,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.10847,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,185,"            int value = values[i];
",2,0,1,1,2,0,0,0,0,6,22,7,0.10847,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,186,"            DateTimeField field = partial.getField(i);
",2,0,0,1,2,0,6,2,0,10,42,6,0.10847,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,187,"            if (value < field.getMinimumValue()) {
",2,1,0,2,5,0,4,0,0,7,38,6,0.10847,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,475,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.10811,0
defect4j,time,org/joda/time/base/AbstractPartial,14,105,"        return getField(index, getChronology());
",0,0,0,2,4,1,6,0,0,6,40,5,0.10256,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,84,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.10191,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,89,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.10000,0
defect4j,time,org/joda/time/MonthDay,14,612,"        return withFieldAdded(DurationFieldType.days(), days);
",0,0,0,2,4,1,8,0,0,8,54,5,0.10000,0
defect4j,time,org/joda/time/MonthDay,14,672,"        return withFieldAdded(DurationFieldType.days(), FieldUtils.safeNegate(days));
",0,0,0,3,6,1,12,0,0,12,77,5,0.10000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,307,"            int max = getMaximumValue(instant, values);
",2,0,0,1,2,0,6,0,0,8,43,7,0.09756,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,308,"            long proposed = values[fieldIndex] + valueToAdd;
",4,1,1,1,2,0,0,0,0,9,48,7,0.09756,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,309,"            if (proposed <= max) {
",4,1,0,1,3,0,0,0,0,5,22,6,0.09756,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1604,"        if (dme == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.09510,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1605,"            dme = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.09510,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1610,"        return dme;
",2,0,0,0,0,1,0,0,0,2,11,4,0.09510,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1594,"        if (mye == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.09440,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1595,"            mye = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.09440,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1600,"        return mye;
",2,0,0,0,0,1,0,0,0,2,11,4,0.09440,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1585,"        if (ye == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.09182,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1586,"            ye = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.09182,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1590,"        return ye;
",2,0,0,0,0,1,0,0,0,2,10,4,0.09182,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,779,"        return appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,68,5,0.08791,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,517,"            return iLeapDurationField;
",2,0,0,0,0,1,0,0,0,2,26,5,0.08696,0
defect4j,time,org/joda/time/DateTimeFieldType,14,498,"                    return chronology.dayOfMonth();
",0,0,0,1,2,1,4,0,0,4,31,7,0.08684,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,737,"        return appendDecimal(DateTimeFieldType.dayOfMonth(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,67,5,0.08533,0
defect4j,time,org/joda/time/base/AbstractInstant,14,260,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.08399,0
defect4j,time,org/joda/time/chrono/GJChronology,14,204,"            for (int i=chronos.size(); --i>=0; ) {
",4,1,0,2,5,0,4,0,0,10,38,6,0.08388,0
defect4j,time,org/joda/time/chrono/GJChronology,14,205,"                chrono = chronos.get(i);
",2,0,0,1,2,0,6,0,0,9,24,8,0.08388,0
defect4j,time,org/joda/time/chrono/GJChronology,14,206,"                if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&
",2,2,0,1,3,0,4,0,0,8,63,8,0.08388,0
defect4j,time,org/joda/time/chrono/GJChronology,14,209,"                    return chrono;
",2,0,0,0,0,1,0,0,0,2,14,10,0.08388,0
defect4j,time,org/joda/time/chrono/GJChronology,14,397,"        return iCutoverInstant;
",2,0,0,0,0,1,0,0,0,2,23,4,0.08388,0
defect4j,time,org/joda/time/chrono/GJChronology,14,406,"        return iGregorianChronology.getMinimumDaysInFirstWeek();
",0,0,0,1,2,1,4,0,0,4,56,5,0.08388,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,503,"            return iRangeDurationField;
",2,0,0,0,0,1,0,0,0,2,27,5,0.08333,0
defect4j,time,org/joda/time/chrono/GJChronology,14,281,"        super(base, new Object[] {julian, gregorian, cutoverInstant});
",8,0,0,3,6,0,0,2,0,10,62,4,0.08312,0
defect4j,time,org/joda/time/chrono/GJChronology,14,282,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.08312,0
defect4j,time,org/joda/time/chrono/GJChronology,14,220,"            chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
",6,0,0,1,2,0,6,0,0,13,75,6,0.08312,0
defect4j,time,org/joda/time/chrono/GJChronology,14,221,"            chrono = new GJChronology
",2,0,0,0,0,0,0,2,0,5,25,6,0.08312,0
defect4j,time,org/joda/time/chrono/GJChronology,14,477,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.08312,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,791,"        return appendSignedDecimal(DateTimeFieldType.year(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,75,5,0.08290,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,499,"            return iDurationField;
",2,0,0,0,0,1,0,0,0,2,22,5,0.08290,0
defect4j,time,org/joda/time/chrono/GJChronology,14,307,"        return withZone(DateTimeZone.UTC);
",4,0,0,1,2,1,2,0,0,6,34,5,0.08216,0
defect4j,time,org/joda/time/chrono/GJChronology,14,317,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.08216,0
defect4j,time,org/joda/time/chrono/GJChronology,14,320,"        if (zone == getZone()) {
",2,1,0,2,5,0,2,0,0,5,24,4,0.08216,0
defect4j,time,org/joda/time/chrono/GJChronology,14,321,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.08216,0
defect4j,time,org/joda/time/chrono/GJChronology,14,293,"        if ((base = getBase()) != null) {
",2,1,0,3,7,0,2,0,0,7,33,4,0.08184,0
defect4j,time,org/joda/time/chrono/GJChronology,14,296,"        return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,5,0.08184,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,474,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,5,0.08163,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,550,"            return iField.getMinimumValue();
",0,0,0,1,2,1,4,0,0,4,32,6,0.08142,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,567,"            return iField.getMaximumValue();
",0,0,0,1,2,1,4,0,0,4,32,6,0.08142,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2718,"                        addArrayToList(printerList, ((Composite)element).iPrinters);
",4,0,0,3,6,0,4,2,0,10,60,12,0.08112,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2727,"                        addArrayToList(parserList, ((Composite)element).iParsers);
",4,0,0,3,6,0,4,2,0,10,58,12,0.08112,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2736,"            if (array != null) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.08112,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2737,"                for (int i=0; i<array.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,7,0.08112,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2738,"                    list.add(array[i]);
",0,0,1,2,4,0,4,0,0,8,19,10,0.08112,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2741,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.08112,0
defect4j,time,org/joda/time/chrono/GJChronology,14,194,"            cutoverInstant = gregorianCutover.toInstant();
",2,0,0,1,2,0,4,0,0,7,46,6,0.08112,0
defect4j,time,org/joda/time/Instant,14,144,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.08101,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,448,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.08091,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,451,"        if (maxDigits < minDigits) {
",4,1,0,1,3,0,0,0,0,5,28,4,0.08091,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,454,"        if (minDigits < 0 || maxDigits <= 0) {
",4,3,0,1,3,0,0,0,0,7,38,4,0.08091,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,457,"        if (minDigits <= 1) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.08091,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,460,"            return append0(new PaddedNumber(fieldType, maxDigits, true, minDigits));
",6,0,0,2,4,1,2,2,0,11,72,7,0.08091,0
defect4j,time,org/joda/time/DateTimeFieldType,14,496,"                    return chronology.monthOfYear();
",0,0,0,1,2,1,4,0,0,4,32,7,0.08081,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,467,"            long result = iZone.convertLocalToUTC(localInstant, false, instant);
",2,0,0,1,2,0,8,0,0,11,68,6,0.08071,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,468,"            if (get(result) != value) {
",2,1,0,2,5,0,4,0,0,7,27,5,0.08071,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,209,"        if (formatter == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.07940,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,212,"        return append0(formatter.getPrinter(), formatter.getParser());
",0,0,0,3,6,1,10,0,0,10,62,5,0.07940,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,465,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.07940,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,466,"            localInstant = iField.set(localInstant, value);
",2,0,0,1,2,0,8,0,0,11,47,5,0.07940,0
defect4j,time,org/joda/time/DateTimeZone,14,957,"        return convertLocalToUTC(instantLocal, strict);
",0,0,0,1,2,1,6,0,0,6,47,5,0.07931,0
defect4j,time,org/joda/time/DateTimeZone,14,974,"        int offsetLocal = getOffset(instantLocal);
",2,0,0,1,2,0,4,0,0,6,42,5,0.07921,0
defect4j,time,org/joda/time/DateTimeZone,14,976,"        int offset = getOffset(instantLocal - offsetLocal);
",6,1,0,1,2,0,2,0,0,9,51,5,0.07921,0
defect4j,time,org/joda/time/DateTimeZone,14,978,"        if (offsetLocal != offset) {
",4,1,0,1,3,0,0,0,0,5,28,4,0.07921,0
defect4j,time,org/joda/time/DateTimeZone,14,1009,"        long instantUTC = instantLocal - offset;
",6,1,0,0,0,0,0,0,0,7,40,5,0.07921,0
defect4j,time,org/joda/time/DateTimeZone,14,1011,"        if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {
",8,5,0,3,7,0,0,0,0,13,69,4,0.07921,0
defect4j,time,org/joda/time/DateTimeZone,14,1014,"        return instantUTC;
",2,0,0,0,0,1,0,0,0,2,18,4,0.07921,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,172,"        return iParser;
",2,0,0,0,0,1,0,0,0,2,15,4,0.07911,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,154,"        return iPrinter;
",2,0,0,0,0,1,0,0,0,2,16,4,0.07767,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,345,"        iFormatter = null;
",2,0,0,0,0,0,0,0,0,3,18,4,0.07729,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,346,"        iElementPairs.add(printer);
",0,0,0,1,2,0,6,0,0,6,27,5,0.07729,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,347,"        iElementPairs.add(parser);
",0,0,0,1,2,0,6,0,0,6,26,5,0.07729,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,348,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.07729,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1141,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.07583,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1131,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.07565,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1104,"                Object printer = iElementPairs.get(0);
",2,0,0,1,2,0,4,2,0,8,38,8,0.07547,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1105,"                Object parser = iElementPairs.get(1);
",2,0,0,1,2,0,4,2,0,8,37,8,0.07547,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1107,"                if (printer != null) {
",2,1,0,1,3,0,0,0,0,3,22,8,0.07547,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1108,"                    if (printer == parser || parser == null) {
",6,3,0,1,3,0,0,0,0,9,42,10,0.07547,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1109,"                        f = printer;
",4,0,0,0,0,0,0,0,0,5,12,12,0.07547,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,298,"        if (valueToAdd == 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.07273,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,304,"        DateTimeField nextField = null;
",2,0,0,0,0,0,0,2,0,4,31,4,0.07273,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,306,"        while (valueToAdd > 0) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.07273,0
defect4j,time,org/joda/time/base/AbstractInstant,14,259,"        if (this == readableInstant) {
",2,1,0,1,3,0,0,0,0,3,30,4,0.07199,0
defect4j,time,org/joda/time/field/SkipDateTimeField,14,82,"            value--;
",2,0,0,0,0,0,0,0,0,3,8,6,0.07002,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,14,53,"        this(chronology, field, 0);
",4,0,0,1,2,0,0,0,0,4,27,4,0.07002,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,14,54,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07002,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,14,64,"        super(field);
",2,0,0,1,2,0,0,0,0,2,13,4,0.07002,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,14,65,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.07002,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,14,66,"        int min = super.getMinimumValue();
",4,0,0,1,2,0,0,0,0,4,34,5,0.07002,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,14,67,"        if (min < skip) {
",4,1,0,1,3,0,0,0,0,5,17,4,0.07002,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,14,68,"            iMinValue = min + 1;
",4,1,0,0,0,0,0,0,0,6,20,6,0.07002,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,14,74,"        iSkip = skip;
",4,0,0,0,0,0,0,0,0,5,13,4,0.07002,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,14,75,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07002,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,14,87,"        FieldUtils.verifyValueBounds(this, value, iMinValue, getMaximumValue());
",0,0,0,2,4,0,10,0,0,10,72,5,0.07002,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,14,88,"        if (value <= iSkip) {
",4,1,0,1,3,0,0,0,0,5,21,4,0.07002,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,14,89,"            value--;
",2,0,0,0,0,0,0,0,0,3,8,6,0.07002,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,14,91,"        return super.set(millis, value);
",6,0,0,1,2,1,0,0,0,6,32,5,0.07002,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,14,95,"        return iMinValue;
",2,0,0,0,0,1,0,0,0,2,17,4,0.07002,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,128,"        super(base, param);
",4,0,0,1,2,0,0,0,0,4,19,4,0.07002,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,129,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07002,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,65,"    private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField(""BE"");
",2,0,0,1,2,3,0,4,0,10,85,2,0.07002,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,71,"    private static final Map<DateTimeZone, BuddhistChronology> cCache = new HashMap<DateTimeZone, BuddhistChronology>();
",2,0,0,1,2,3,0,12,0,17,116,2,0.07002,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,74,"    private static final BuddhistChronology INSTANCE_UTC = getInstance(DateTimeZone.UTC);
",6,0,0,1,2,3,2,2,0,13,85,2,0.07002,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,104,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.07002,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,107,"        BuddhistChronology chrono = cCache.get(zone);
",2,0,0,1,2,0,6,2,0,10,45,4,0.07002,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,108,"        if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.07002,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,110,"            chrono = new BuddhistChronology(GJChronology.getInstance(zone, null), null);
",2,0,0,2,4,0,6,2,0,12,76,6,0.07002,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,112,"            DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);
",4,0,0,1,2,0,0,4,0,8,64,6,0.07002,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,113,"            chrono = new BuddhistChronology(LimitChronology.getInstance(chrono, lowerLimit, null), """");
",2,0,0,2,4,0,8,2,0,15,91,6,0.07002,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,114,"            cCache.put(zone, chrono);
",0,0,0,1,2,0,8,0,0,8,25,7,0.07002,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,116,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.07002,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,204,"        if (getParam() == null) {
",0,1,0,2,5,0,2,0,0,4,25,4,0.07002,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,206,"            DateTimeField field = fields.year;
",6,0,0,0,0,0,0,2,0,8,34,6,0.07002,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,207,"            fields.year = new OffsetDateTimeField(
",4,0,0,0,1,0,0,2,0,7,38,6,0.07002,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,211,"            field = fields.yearOfEra;
",6,0,0,0,0,0,0,0,0,7,25,6,0.07002,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,212,"            fields.yearOfEra = new DelegatedDateTimeField(
",4,0,0,0,1,0,0,2,0,7,46,6,0.07002,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,216,"            field = fields.weekyear;
",6,0,0,0,0,0,0,0,0,7,24,6,0.07002,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,217,"            fields.weekyear = new OffsetDateTimeField(
",4,0,0,0,1,0,0,2,0,7,42,6,0.07002,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,220,"            field = new OffsetDateTimeField(fields.yearOfEra, 99);
",6,0,0,1,2,0,0,2,0,9,54,6,0.07002,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,221,"            fields.centuryOfEra = new DividedDateTimeField(
",4,0,0,0,1,0,0,2,0,7,47,6,0.07002,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,224,"            field = new RemainderDateTimeField(
",2,0,0,0,1,0,0,2,0,5,35,6,0.07002,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,226,"            fields.yearOfCentury = new OffsetDateTimeField(
",4,0,0,0,1,0,0,2,0,7,47,6,0.07002,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,229,"            field = new RemainderDateTimeField(
",2,0,0,0,1,0,0,2,0,5,35,6,0.07002,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,231,"            fields.weekyearOfCentury = new OffsetDateTimeField(
",4,0,0,0,1,0,0,2,0,7,51,6,0.07002,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,234,"            fields.era = ERA_FIELD;
",6,0,0,0,0,0,0,0,0,7,23,6,0.07002,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,236,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07002,0
defect4j,time,org/joda/time/chrono/GJChronology,14,173,"        return getInstance(zone, gregorianCutover, 4);
",0,0,0,1,2,1,6,0,0,6,46,5,0.06995,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,79,"            if (year == 0) {
",2,1,0,1,3,0,0,0,0,3,16,6,0.06995,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,83,"            year++;
",2,0,0,0,0,0,0,0,0,3,7,6,0.06995,0
defect4j,time,org/joda/time/chrono/GJChronology,14,795,"            return iJulianField.getMinimumValue();
",0,0,0,1,2,1,4,0,0,4,38,6,0.06987,0
defect4j,time,org/joda/time/chrono/GJChronology,14,826,"            return iGregorianField.getMaximumValue();
",0,0,0,1,2,1,4,0,0,4,41,6,0.06987,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,14,152,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);
",0,0,0,1,2,0,10,0,0,10,54,5,0.06972,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,14,153,"        return super.set(instant, value - iOffset);
",8,1,0,1,2,1,0,0,0,9,43,5,0.06972,0
defect4j,time,org/joda/time/chrono/GJChronology,14,192,"            cutoverInstant = DEFAULT_CUTOVER;
",4,0,0,0,0,0,0,0,0,5,33,6,0.06972,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,14,82,"        return iField.set(instant, value);
",0,0,0,1,2,1,8,0,0,8,34,5,0.06964,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,408,"            return append0(new PaddedNumber(fieldType, maxDigits, false, minDigits));
",6,0,0,2,4,1,2,2,0,11,73,7,0.06957,0
defect4j,time,org/joda/time/field/SkipDateTimeField,14,100,"        return iMinValue;
",2,0,0,0,0,1,0,0,0,2,17,4,0.06949,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,396,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.06934,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,399,"        if (maxDigits < minDigits) {
",4,1,0,1,3,0,0,0,0,5,28,4,0.06934,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,402,"        if (minDigits < 0 || maxDigits <= 0) {
",4,3,0,1,3,0,0,0,0,7,38,4,0.06934,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,405,"        if (minDigits <= 1) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.06934,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,136,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth,
",8,0,0,0,1,1,0,0,0,8,61,5,0.06934,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,132,"        long instant = year().set(0, year);
",2,0,0,2,4,0,6,0,0,8,35,5,0.06934,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,133,"        instant = monthOfYear().set(instant, monthOfYear);
",2,0,0,2,4,0,8,0,0,11,50,4,0.06934,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,134,"        instant = dayOfMonth().set(instant, dayOfMonth);
",2,0,0,2,4,0,8,0,0,11,48,4,0.06934,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,135,"        instant = hourOfDay().set(instant, hourOfDay);
",2,0,0,2,4,0,8,0,0,11,46,4,0.06934,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,136,"        instant = minuteOfHour().set(instant, minuteOfHour);
",2,0,0,2,4,0,8,0,0,11,52,4,0.06934,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,137,"        instant = secondOfMinute().set(instant, secondOfMinute);
",2,0,0,2,4,0,8,0,0,11,56,4,0.06934,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,138,"        return millisOfSecond().set(instant, millisOfSecond);
",0,0,0,2,4,1,8,0,0,8,53,5,0.06934,0
defect4j,time,org/joda/time/chrono/GJChronology,14,579,"        return convertByYear(instant, iGregorianChronology, iJulianChronology);
",0,0,0,1,2,1,8,0,0,8,71,5,0.06934,0
defect4j,time,org/joda/time/chrono/GJChronology,14,714,"                    if (instant + iGapDuration < iCutover) {
",6,2,0,1,3,0,0,0,0,8,40,9,0.06934,0
defect4j,time,org/joda/time/chrono/GJChronology,14,715,"                        instant = gregorianToJulian(instant);
",2,0,0,1,2,0,4,0,0,7,37,11,0.06934,0
defect4j,time,org/joda/time/chrono/GJChronology,14,718,"                    if (get(instant) != value) {
",2,1,0,2,5,0,4,0,0,7,28,9,0.06934,0
defect4j,time,org/joda/time/chrono/GJChronology,14,915,"                return gregorianToJulianByYear(instant);
",0,0,0,1,2,1,4,0,0,4,40,8,0.06934,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,228,"        return iChronology.getMaxYear();
",0,0,0,1,2,1,4,0,0,4,32,5,0.06934,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,172,"        return iField.set(instant, value);
",0,0,0,1,2,1,8,0,0,8,34,5,0.06926,0
defect4j,time,org/joda/time/chrono/GJChronology,14,74,"public final class GJChronology extends AssembledChronology {
",2,0,0,0,1,2,0,2,0,6,61,1,0.06926,0
defect4j,time,org/joda/time/chrono/GJChronology,14,647,"                return iJulianField.get(instant);
",0,0,0,1,2,1,6,0,0,6,33,8,0.06926,0
defect4j,time,org/joda/time/chrono/GJChronology,14,724,"                instant = iJulianField.set(instant, value);
",2,0,0,1,2,0,8,0,0,11,43,7,0.06926,0
defect4j,time,org/joda/time/chrono/GJChronology,14,725,"                if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,7,0.06926,0
defect4j,time,org/joda/time/chrono/GJChronology,14,912,"            if (iConvertByWeekyear) {
",2,0,0,1,3,0,0,0,0,2,25,5,0.06926,0
defect4j,time,org/joda/time/chrono/GJChronology,14,710,"            if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,5,0.06897,0
defect4j,time,org/joda/time/chrono/GJChronology,14,711,"                instant = iGregorianField.set(instant, value);
",2,0,0,1,2,0,8,0,0,11,46,7,0.06897,0
defect4j,time,org/joda/time/chrono/GJChronology,14,712,"                if (instant < iCutover) {
",4,1,0,1,3,0,0,0,0,5,25,7,0.06897,0
defect4j,time,org/joda/time/chrono/GJChronology,14,737,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,5,0.06897,0
defect4j,time,org/joda/time/chrono/GJChronology,14,644,"            if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,5,0.06889,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,78,"        if (year <= 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.06867,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,85,"        return year;
",2,0,0,0,0,1,0,0,0,2,12,4,0.06867,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,207,"        return super.getDateMidnightMillis(adjustYearForSet(year), monthOfYear, dayOfMonth);
",6,0,0,2,4,1,4,0,0,10,84,5,0.06867,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,228,"        return iField.getMaximumValue();
",0,0,0,1,2,1,4,0,0,4,32,5,0.06860,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,209,"            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;
",8,7,0,4,8,0,0,0,0,16,71,6,0.06801,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,402,"            i2 = i2 - unitMillis + 1;
",6,2,0,0,0,0,0,0,0,9,25,6,0.06801,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1174,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.06772,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1198,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.06772,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1288,"            return iMaxParsedDigits;
",2,0,0,0,0,1,0,0,0,2,24,5,0.06744,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,145,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);
",6,0,0,1,2,0,4,0,0,11,59,10,0.06744,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,146,"                    chrono = new CopticChronology
",2,0,0,0,0,0,0,2,0,5,29,10,0.06744,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,184,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.06737,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,359,"        return append0(new CharacterLiteral(c));
",2,0,0,2,4,1,2,2,0,6,40,5,0.06723,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1169,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.06723,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1170,"            iValue = value;
",4,0,0,0,0,0,0,0,0,5,15,5,0.06723,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1171,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06723,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2580,"                int size = printerList.size();
",2,0,0,1,2,0,4,0,0,6,30,8,0.06716,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2581,"                iPrinters = new DateTimePrinter[size];
",2,0,1,1,2,0,0,2,0,7,38,7,0.06716,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2582,"                int printEst = 0;
",2,0,0,0,0,0,0,0,0,2,17,8,0.06716,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2583,"                for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,7,0.06716,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2584,"                    DateTimePrinter printer = (DateTimePrinter) printerList.get(i);
",2,0,0,2,4,0,6,4,0,12,63,9,0.06716,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2585,"                    printEst += printer.estimatePrintedLength();
",2,0,0,1,2,0,4,0,0,7,44,9,0.06716,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2586,"                    iPrinters[i] = printer;
",2,0,1,1,2,0,0,0,0,7,23,9,0.06716,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2588,"                iPrintedLengthEstimate = printEst;
",4,0,0,0,0,0,0,0,0,5,34,7,0.06716,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2595,"                int size = parserList.size();
",2,0,0,1,2,0,4,0,0,6,29,8,0.06716,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2596,"                iParsers = new DateTimeParser[size];
",2,0,1,1,2,0,0,2,0,7,36,7,0.06716,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2597,"                int parseEst = 0;
",2,0,0,0,0,0,0,0,0,2,17,8,0.06716,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2598,"                for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,7,0.06716,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2599,"                    DateTimeParser parser = (DateTimeParser) parserList.get(i);
",2,0,0,2,4,0,6,4,0,12,59,9,0.06716,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2600,"                    parseEst += parser.estimateParsedLength();
",2,0,0,1,2,0,4,0,0,7,42,9,0.06716,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2601,"                    iParsers[i] = parser;
",2,0,1,1,2,0,0,0,0,7,21,9,0.06716,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2603,"                iParsedLengthEstimate = parseEst;
",4,0,0,0,0,0,0,0,0,5,33,7,0.06716,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2715,"                Object element = elementPairs.get(i);
",2,0,0,1,2,0,6,2,0,10,37,7,0.06716,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2716,"                if (element instanceof DateTimePrinter) {
",2,0,0,1,3,0,0,2,0,4,41,8,0.06716,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2717,"                    if (element instanceof Composite) {
",2,0,0,1,3,0,0,2,0,4,35,10,0.06716,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2720,"                        printerList.add(element);
",0,0,0,1,2,0,6,0,0,6,25,12,0.06716,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2724,"                element = elementPairs.get(i + 1);
",4,1,0,1,2,0,4,0,0,10,34,7,0.06716,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2725,"                if (element instanceof DateTimeParser) {
",2,0,0,1,3,0,0,2,0,4,40,8,0.06716,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2726,"                    if (element instanceof Composite) {
",2,0,0,1,3,0,0,2,0,4,35,10,0.06716,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2729,"                        parserList.add(element);
",0,0,0,1,2,0,6,0,0,6,24,12,0.06716,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1430,"            return iMaxParsedDigits;
",2,0,0,0,0,1,0,0,0,2,24,5,0.06702,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1425,"            super(fieldType, maxParsedDigits, signed);
",6,0,0,1,2,0,0,0,0,6,42,5,0.06695,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1426,"            iMinPrintedDigits = minPrintedDigits;
",4,0,0,0,0,0,0,0,0,5,37,5,0.06695,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1427,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06695,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1281,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.06688,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1282,"            iFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,23,5,0.06688,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1283,"            iMaxParsedDigits = maxParsedDigits;
",4,0,0,0,0,0,0,0,0,5,35,5,0.06688,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1284,"            iSigned = signed;
",4,0,0,0,0,0,0,0,0,5,17,5,0.06688,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1285,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06688,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1129,"                return ((Composite)f).isPrinter();
",2,0,0,3,6,1,2,2,0,6,34,9,0.06674,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1139,"                return ((Composite)f).isParser();
",2,0,0,3,6,1,2,2,0,6,33,9,0.06674,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2701,"            return iPrinters != null;
",2,1,0,0,0,1,0,0,0,3,25,5,0.06674,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2705,"            return iParsers != null;
",2,1,0,0,0,1,0,0,0,3,24,5,0.06674,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1117,"                f = new Composite(iElementPairs);
",4,0,0,1,2,0,0,2,0,7,33,8,0.06660,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2569,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.06660,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2571,"            List<Object> printerList = new ArrayList<Object>();
",2,0,0,1,2,0,0,8,0,10,51,5,0.06660,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2572,"            List<Object> parserList = new ArrayList<Object>();
",2,0,0,1,2,0,0,8,0,10,50,5,0.06660,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2574,"            decompose(elementPairs, printerList, parserList);
",0,0,0,1,2,0,8,0,0,8,49,6,0.06660,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2576,"            if (printerList.size() <= 0) {
",0,1,0,2,5,0,4,0,0,5,30,5,0.06660,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2591,"            if (parserList.size() <= 0) {
",0,1,0,2,5,0,4,0,0,5,29,5,0.06660,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2605,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06660,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2713,"            int size = elementPairs.size();
",2,0,0,1,2,0,4,0,0,6,31,6,0.06660,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2714,"            for (int i=0; i<size; i+=2) {
",8,1,0,1,3,0,0,0,0,10,29,5,0.06660,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2733,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06660,0
defect4j,time,org/joda/time/chrono/GJChronology,14,788,"            return iGregorianField.getLeapDurationField();
",0,0,0,1,2,1,4,0,0,4,46,6,0.06646,0
defect4j,time,org/joda/time/DateTimeZone,14,955,"            return instantUTC;
",2,0,0,0,0,1,0,0,0,2,18,6,0.06591,0
defect4j,time,org/joda/time/chrono/GJChronology,14,768,"            return iRangeDurationField;
",2,0,0,0,0,1,0,0,0,2,27,5,0.06584,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,541,"            return iLeapDurationField;
",2,0,0,0,0,1,0,0,0,2,26,5,0.06571,0
defect4j,time,org/joda/time/chrono/GJChronology,14,501,"            fields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);
",10,0,0,2,4,0,4,2,0,17,105,6,0.06564,0
defect4j,time,org/joda/time/chrono/GJChronology,14,502,"            fields.millisOfDay = new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis);
",10,0,0,2,4,0,4,2,0,17,96,6,0.06564,0
defect4j,time,org/joda/time/chrono/GJChronology,14,503,"            fields.secondOfMinute = new CutoverField(julian.secondOfMinute(), fields.secondOfMinute, iCutoverMillis);
",10,0,0,2,4,0,4,2,0,17,105,6,0.06564,0
defect4j,time,org/joda/time/chrono/GJChronology,14,504,"            fields.secondOfDay = new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis);
",10,0,0,2,4,0,4,2,0,17,96,6,0.06564,0
defect4j,time,org/joda/time/chrono/GJChronology,14,505,"            fields.minuteOfHour = new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);
",10,0,0,2,4,0,4,2,0,17,99,6,0.06564,0
defect4j,time,org/joda/time/chrono/GJChronology,14,506,"            fields.minuteOfDay = new CutoverField(julian.minuteOfDay(), fields.minuteOfDay, iCutoverMillis);
",10,0,0,2,4,0,4,2,0,17,96,6,0.06564,0
defect4j,time,org/joda/time/chrono/GJChronology,14,507,"            fields.hourOfDay = new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis);
",10,0,0,2,4,0,4,2,0,17,90,6,0.06564,0
defect4j,time,org/joda/time/chrono/GJChronology,14,508,"            fields.hourOfHalfday = new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday, iCutoverMillis);
",10,0,0,2,4,0,4,2,0,17,102,6,0.06564,0
defect4j,time,org/joda/time/chrono/GJChronology,14,509,"            fields.clockhourOfDay = new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis);
",10,0,0,2,4,0,4,2,0,17,105,6,0.06564,0
defect4j,time,org/joda/time/chrono/GJChronology,14,510,"            fields.clockhourOfHalfday = new CutoverField(julian.clockhourOfHalfday(),
",4,0,0,1,3,0,4,2,0,11,73,6,0.06564,0
defect4j,time,org/joda/time/chrono/GJChronology,14,512,"            fields.halfdayOfDay = new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis);
",10,0,0,2,4,0,4,2,0,17,99,6,0.06564,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,14,131,"            instant = iChronology.getYearMillis(year + 1);
",4,1,0,1,2,0,4,0,0,10,46,6,0.06564,0
defect4j,time,org/joda/time/chrono/GJChronology,14,271,"        super(null, new Object[] {julian, gregorian, cutoverInstant});
",6,0,0,3,6,0,0,2,0,9,62,3,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,272,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,105,"    static final Instant DEFAULT_CUTOVER = new Instant(-12219292800000L);
",2,0,0,1,2,2,0,4,0,9,69,2,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,108,"    private static final Map<DateTimeZone, ArrayList<GJChronology>> cCache = new HashMap<DateTimeZone, ArrayList<GJChronology>>();
",2,0,0,1,2,3,0,16,0,21,126,2,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,83,"        return to.getDateTimeMillis
",0,0,0,0,0,1,4,0,0,4,27,5,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,189,"        zone = DateTimeUtils.getZone(zone);
",2,0,0,1,2,0,6,0,0,9,35,4,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,191,"        if (gregorianCutover == null) {
",2,1,0,1,3,0,0,0,0,3,31,4,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,199,"        ArrayList<GJChronology> chronos = cCache.get(zone);
",2,0,0,1,2,0,6,4,0,12,51,4,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,200,"        if (chronos == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,201,"            chronos = new ArrayList<GJChronology>(2);
",2,0,0,1,2,0,0,4,0,7,41,6,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,202,"            cCache.put(zone, chronos);
",0,0,0,1,2,0,8,0,0,8,26,7,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,214,"        if (zone == DateTimeZone.UTC) {
",6,1,0,1,3,0,0,0,0,7,31,4,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,215,"            chrono = new GJChronology
",2,0,0,0,0,0,0,2,0,5,25,6,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,228,"        chronos.add(chrono);
",0,0,0,1,2,0,6,0,0,6,20,5,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,230,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,465,"        Object[] params = (Object[])getParam();
",2,0,0,4,8,0,2,4,0,8,39,4,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,467,"        JulianChronology julian = (JulianChronology)params[0];
",2,0,1,2,4,0,0,4,0,8,54,4,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,468,"        GregorianChronology gregorian = (GregorianChronology)params[1];
",2,0,1,2,4,0,0,4,0,8,63,4,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,469,"        Instant cutoverInstant = (Instant)params[2];
",2,0,1,2,4,0,0,4,0,8,44,4,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,470,"        iCutoverMillis = cutoverInstant.getMillis();
",2,0,0,1,2,0,4,0,0,7,44,4,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,472,"        iJulianChronology = julian;
",4,0,0,0,0,0,0,0,0,5,27,4,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,473,"        iGregorianChronology = gregorian;
",4,0,0,0,0,0,0,0,0,5,33,4,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,474,"        iCutoverInstant = cutoverInstant;
",4,0,0,0,0,0,0,0,0,5,33,4,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,476,"        if (getBase() != null) {
",0,1,0,2,5,0,2,0,0,4,24,4,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,480,"        if (julian.getMinimumDaysInFirstWeek() != gregorian.getMinimumDaysInFirstWeek()) {
",0,1,0,3,7,0,8,0,0,9,82,4,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,485,"        iGapDuration = iCutoverMillis - julianToGregorianByYear(iCutoverMillis);
",4,1,0,1,2,0,4,0,0,10,72,4,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,491,"        fields.copyFieldsFrom(gregorian);
",0,0,0,1,2,0,6,0,0,6,33,5,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,497,"        if (gregorian.millisOfDay().get(iCutoverMillis) == 0) {
",0,1,0,3,7,0,8,0,0,9,55,4,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,517,"            fields.era = new CutoverField(julian.era(), fields.era, iCutoverMillis);
",10,0,0,2,4,0,4,2,0,17,72,5,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,526,"            long cutover = gregorian.year().roundCeiling(iCutoverMillis);
",2,0,0,2,4,0,8,0,0,10,61,6,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,527,"            fields.dayOfYear = new CutoverField(
",4,0,0,0,1,0,0,2,0,7,36,5,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,532,"            long cutover = gregorian.weekyear().roundCeiling(iCutoverMillis);
",2,0,0,2,4,0,8,0,0,10,65,6,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,533,"            fields.weekOfWeekyear = new CutoverField(
",4,0,0,0,1,0,0,2,0,7,41,5,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,541,"            fields.year = new ImpreciseCutoverField(
",4,0,0,0,1,0,0,2,0,7,40,5,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,543,"            fields.years = fields.year.getDurationField();
",8,0,0,1,2,0,2,0,0,11,46,5,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,544,"            fields.yearOfEra = new ImpreciseCutoverField(
",4,0,0,0,1,0,0,2,0,7,45,5,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,546,"            fields.yearOfCentury = new ImpreciseCutoverField(
",4,0,0,0,1,0,0,2,0,7,49,5,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,549,"            fields.centuryOfEra = new ImpreciseCutoverField(
",4,0,0,0,1,0,0,2,0,7,48,5,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,551,"            fields.centuries = fields.centuryOfEra.getDurationField();
",8,0,0,1,2,0,2,0,0,11,58,5,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,553,"            fields.monthOfYear = new ImpreciseCutoverField(
",4,0,0,0,1,0,0,2,0,7,47,5,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,555,"            fields.months = fields.monthOfYear.getDurationField();
",8,0,0,1,2,0,2,0,0,11,54,5,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,557,"            fields.weekyear = new ImpreciseCutoverField(
",4,0,0,0,1,0,0,2,0,7,44,5,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,559,"            fields.weekyearOfCentury = new ImpreciseCutoverField(
",4,0,0,0,1,0,0,2,0,7,53,5,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,561,"            fields.weekyears = fields.weekyear.getDurationField();
",8,0,0,1,2,0,2,0,0,11,54,5,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,567,"            CutoverField cf = new CutoverField
",2,0,0,0,0,0,0,4,0,6,34,5,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,569,"            cf.iRangeDurationField = fields.months;
",8,0,0,0,0,0,0,0,0,9,39,5,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,570,"            fields.dayOfMonth = cf;
",6,0,0,0,0,0,0,0,0,7,23,5,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,572,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,575,"        return convertByYear(instant, iJulianChronology, iGregorianChronology);
",0,0,0,1,2,1,8,0,0,8,71,5,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,612,"            this(julianField, gregorianField, cutoverMillis, false);
",6,0,0,1,2,0,0,0,0,7,56,5,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,613,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,622,"                     long cutoverMillis, boolean convertByWeekyear) {
",4,0,0,0,2,0,0,0,0,4,48,4,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,623,"            super(gregorianField.getType());
",0,0,0,2,4,0,4,0,0,4,32,6,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,624,"            iJulianField = julianField;
",4,0,0,0,0,0,0,0,0,5,27,5,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,625,"            iGregorianField = gregorianField;
",4,0,0,0,0,0,0,0,0,5,33,5,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,626,"            iCutover = cutoverMillis;
",4,0,0,0,0,0,0,0,0,5,25,5,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,627,"            iConvertByWeekyear = convertByWeekyear;
",4,0,0,0,0,0,0,0,0,5,39,5,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,630,"            iDurationField = gregorianField.getDurationField();
",2,0,0,1,2,0,4,0,0,7,51,5,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,632,"            DurationField rangeField = gregorianField.getRangeDurationField();
",2,0,0,1,2,0,4,2,0,8,66,5,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,633,"            if (rangeField == null) {
",2,1,0,1,3,0,0,0,0,3,25,5,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,634,"                rangeField = julianField.getRangeDurationField();
",2,0,0,1,2,0,4,0,0,7,49,7,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,636,"            iRangeDurationField = rangeField;
",4,0,0,0,0,0,0,0,0,5,33,5,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,637,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,764,"            return iDurationField;
",2,0,0,0,0,1,0,0,0,2,22,5,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,934,"            this(julianField, gregorianField, null, cutoverMillis, false);
",6,0,0,1,2,0,0,0,0,7,62,5,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,935,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,945,"            this(julianField, gregorianField, durationField, cutoverMillis, false);
",8,0,0,1,2,0,0,0,0,9,71,5,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,946,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,956,"        {
",0,0,0,0,1,0,0,0,0,0,1,3,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,957,"            super(julianField, gregorianField, cutoverMillis, convertByWeekyear);
",8,0,0,1,2,0,0,0,0,8,69,5,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,958,"            if (durationField == null) {
",2,1,0,1,3,0,0,0,0,3,28,5,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,959,"                durationField = new LinkedDurationField(iDurationField, this);
",4,0,0,1,2,0,0,2,0,7,62,7,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,961,"            iDurationField = durationField;
",4,0,0,0,0,0,0,0,0,5,31,5,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,962,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06557,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,14,127,"        int year = get(instant);
",2,0,0,1,2,0,4,0,0,6,24,5,0.06557,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,14,128,"        long yearStartMillis = iChronology.getYearMillis(year);
",2,0,0,1,2,0,6,0,0,8,55,5,0.06557,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,14,129,"        if (instant != yearStartMillis) {
",4,1,0,1,3,0,0,0,0,5,33,4,0.06557,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,14,133,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,1083,"            super(durationField, durationField.getType());
",2,0,0,2,4,0,4,0,0,6,46,5,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,1084,"            iField = dateTimeField;
",4,0,0,0,0,0,0,0,0,5,23,5,0.06557,0
defect4j,time,org/joda/time/chrono/GJChronology,14,1085,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06557,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,72,"        if (years == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.06551,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,75,"        return set(instant, get(instant) + years);
",2,1,0,2,4,1,8,0,0,11,42,5,0.06551,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,527,"            return iRangeDurationField;
",2,0,0,0,0,1,0,0,0,2,27,5,0.06551,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,253,"        return MILLIS_PER_YEAR / 2;
",2,1,0,0,0,1,0,0,0,3,27,4,0.06537,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,261,"        return (1969L * MILLIS_PER_YEAR + 352L * DateTimeConstants.MILLIS_PER_DAY) / 2;
",6,4,0,1,2,1,0,0,0,10,79,4,0.06537,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,224,"            leapYears = (relativeYear + 3) >> 2;
",4,2,0,1,2,0,0,0,0,7,36,6,0.06531,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,181,"        } else if ( workWoyYear > year ) {
",4,1,0,1,4,0,0,0,0,5,34,5,0.06531,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,523,"            return iDurationField;
",2,0,0,0,0,1,0,0,0,2,22,5,0.06524,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,237,"            instant -= ((long) DateTimeConstants.MILLIS_PER_WEEK) * (wow - 1);
",8,2,0,3,6,0,0,0,0,11,66,6,0.06517,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,886,"        long newInstant = roundFloor(instant);
",2,0,0,1,2,0,4,0,0,6,38,5,0.06504,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,887,"        if (newInstant != instant) {
",4,1,0,1,3,0,0,0,0,5,28,4,0.06504,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,888,"            instant = add(newInstant, 1);
",2,0,0,1,2,0,4,0,0,7,29,6,0.06504,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,890,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.06504,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,211,"        return (year & 3) == 0;
",2,2,0,1,2,1,0,0,0,4,23,4,0.06497,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,219,"        int relativeYear = year - 1968;
",4,1,0,0,0,0,0,0,0,5,31,5,0.06497,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,221,"        if (relativeYear <= 0) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.06497,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,233,"        long millis = (relativeYear * 365L + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY;
",10,3,0,2,4,0,0,0,0,13,89,5,0.06497,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,237,"        return millis - (366L + 352) * DateTimeConstants.MILLIS_PER_DAY;
",6,3,0,1,2,1,0,0,0,9,64,4,0.06497,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,540,"                return 7 + (int) ((daysSince19700101 + 4) % 7);
",2,3,0,3,6,1,0,0,0,5,47,8,0.06484,0
defect4j,time,org/joda/time/field/SkipDateTimeField,14,80,"        int value = super.get(millis);
",6,0,0,1,2,0,0,0,0,6,30,5,0.06478,0
defect4j,time,org/joda/time/field/SkipDateTimeField,14,81,"        if (value <= iSkip) {
",4,1,0,1,3,0,0,0,0,5,21,4,0.06478,0
defect4j,time,org/joda/time/field/SkipDateTimeField,14,84,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.06478,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,537,"            daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1))
",8,2,0,2,4,0,0,0,0,11,70,6,0.06471,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,539,"            if (daysSince19700101 < -3) {
",2,1,0,1,3,0,0,0,0,4,29,6,0.06471,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,496,"            return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);
",6,1,0,1,2,1,2,0,0,9,60,7,0.06465,0
defect4j,time,org/joda/time/DateTimeUtils,14,272,"        return zone;
",2,0,0,0,0,1,0,0,0,2,12,4,0.06458,0
defect4j,time,org/joda/time/DateTimeUtils,14,269,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.06452,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,104,"        Object f = getFormatter();
",2,0,0,1,2,0,2,2,0,6,26,4,0.06452,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,105,"        DateTimePrinter printer = null;
",2,0,0,0,0,0,0,2,0,4,31,4,0.06452,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,106,"        if (isPrinter(f)) {
",0,0,0,2,5,0,4,0,0,4,19,5,0.06452,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,107,"            printer = (DateTimePrinter) f;
",4,0,0,1,2,0,0,2,0,7,30,6,0.06452,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,109,"        DateTimeParser parser = null;
",2,0,0,0,0,0,0,2,0,4,29,4,0.06452,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,110,"        if (isParser(f)) {
",0,0,0,2,5,0,4,0,0,4,18,5,0.06452,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,111,"            parser = (DateTimeParser) f;
",4,0,0,1,2,0,0,2,0,7,28,6,0.06452,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,113,"        if (printer != null || parser != null) {
",4,3,0,1,3,0,0,0,0,7,40,4,0.06452,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,114,"            return new DateTimeFormatter(printer, parser);
",4,0,0,1,2,1,0,2,0,6,46,7,0.06452,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,108,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.06452,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,109,"        iPrinter = printer;
",4,0,0,0,0,0,0,0,0,5,19,4,0.06452,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,110,"        iParser = parser;
",4,0,0,0,0,0,0,0,0,5,17,4,0.06452,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,111,"        iLocale = null;
",2,0,0,0,0,0,0,0,0,3,15,4,0.06452,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,112,"        iOffsetParsed = false;
",2,0,0,0,0,0,0,0,0,4,22,4,0.06452,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,113,"        iChrono = null;
",2,0,0,0,0,0,0,0,0,3,15,4,0.06452,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,114,"        iZone = null;
",2,0,0,0,0,0,0,0,0,3,13,4,0.06452,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,115,"        iPivotYear = null;
",2,0,0,0,0,0,0,0,0,3,18,4,0.06452,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,116,"        iDefaultYear = 2000;
",2,0,0,0,0,0,0,0,0,3,20,4,0.06452,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,117,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06452,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,128,"        FieldUtils.verifyValueBounds(this, Math.abs(year),
",0,0,0,1,3,0,10,0,0,10,50,5,0.06452,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,133,"        int thisWeekyear = get( instant );
",2,0,0,1,2,0,4,0,0,6,34,5,0.06452,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,134,"        if ( thisWeekyear == year ) {
",4,1,0,1,3,0,0,0,0,5,29,4,0.06452,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,140,"        int thisDow = iChronology.getDayOfWeek(instant);
",2,0,0,1,2,0,6,0,0,8,48,5,0.06452,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,144,"        int weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );
",2,0,0,1,2,0,6,0,0,8,65,5,0.06452,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,145,"        int weeksInToYear = iChronology.getWeeksInYear( year );
",2,0,0,1,2,0,6,0,0,8,55,5,0.06452,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,146,"        int maxOutWeeks = (weeksInToYear < weeksInFromYear) ?
",6,1,0,1,2,0,0,0,0,7,53,5,0.06452,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,154,"        int setToWeek = iChronology.getWeekOfWeekyear(instant);
",2,0,0,1,2,0,6,0,0,8,55,5,0.06452,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,155,"        if ( setToWeek > maxOutWeeks ) {
",4,1,0,1,3,0,0,0,0,5,32,4,0.06452,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,162,"        long workInstant = instant; // Get a copy
",4,0,0,0,0,0,0,0,0,4,41,5,0.06452,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,168,"        workInstant = iChronology.setYear( workInstant, year );
",2,0,0,1,2,0,8,0,0,11,55,4,0.06452,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,173,"        int workWoyYear = get( workInstant );
",2,0,0,1,2,0,4,0,0,6,37,5,0.06452,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,179,"        if ( workWoyYear < year ) {
",4,1,0,1,3,0,0,0,0,5,27,4,0.06452,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,189,"        int currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);
",2,0,0,1,2,0,6,0,0,8,64,5,0.06452,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,191,"        workInstant = workInstant + (setToWeek - currentWoyWeek)
",8,2,0,1,2,0,0,0,0,11,56,4,0.06452,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,200,"        workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );
",2,0,0,2,4,0,10,0,0,13,66,4,0.06452,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,204,"        return workInstant;
",2,0,0,0,0,1,0,0,0,2,19,4,0.06452,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,96,"        return iField.get(instant);
",0,0,0,1,2,1,6,0,0,6,27,5,0.06426,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,336,"        iFormatter = null;
",2,0,0,0,0,0,0,0,0,3,18,4,0.06419,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,338,"        iElementPairs.add(element);
",0,0,0,1,2,0,6,0,0,6,27,5,0.06419,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,339,"        iElementPairs.add(element);
",0,0,0,1,2,0,6,0,0,6,27,5,0.06419,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,340,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.06419,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1127,"        if (f instanceof DateTimePrinter) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.06419,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1128,"            if (f instanceof Composite) {
",2,0,0,1,3,0,0,2,0,4,29,7,0.06419,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1137,"        if (f instanceof DateTimeParser) {
",2,0,0,1,3,0,0,2,0,4,34,5,0.06419,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1138,"            if (f instanceof Composite) {
",2,0,0,1,3,0,0,2,0,4,29,7,0.06419,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,234,"        instant = iChronology.weekOfWeekyear().roundFloor(instant);
",2,0,0,2,4,0,8,0,0,11,59,4,0.06413,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,235,"        int wow = iChronology.getWeekOfWeekyear(instant);
",2,0,0,1,2,0,6,0,0,8,49,5,0.06413,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,236,"        if (wow > 1) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.06413,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,239,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.06413,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,14,65,"        return super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY)
",8,2,0,1,2,1,0,0,0,10,71,6,0.06413,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1100,"        Object f = iFormatter;
",4,0,0,0,0,0,0,2,0,6,22,4,0.06406,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1102,"        if (f == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.06406,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1103,"            if (iElementPairs.size() == 2) {
",0,1,0,2,5,0,4,0,0,5,32,6,0.06406,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1116,"            if (f == null) {
",2,1,0,1,3,0,0,0,0,3,16,6,0.06406,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1120,"            iFormatter = f;
",4,0,0,0,0,0,0,0,0,5,15,6,0.06406,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1123,"        return f;
",2,0,0,0,0,1,0,0,0,2,9,4,0.06406,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,327,"        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,55,5,0.06406,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,328,"        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);
",4,1,0,1,2,0,2,0,0,7,59,5,0.06406,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,329,"        return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);
",8,2,0,3,6,1,0,0,0,10,89,6,0.06406,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,83,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.06400,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,84,"        iElementPairs = new ArrayList<Object>();
",2,0,0,1,2,0,0,4,0,7,40,4,0.06400,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,85,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06400,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,185,"        return iMinDaysInFirstWeek;
",2,0,0,0,0,1,0,0,0,2,27,4,0.06387,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,14,95,"            instant += 1;
",2,0,0,0,0,0,0,0,0,3,13,6,0.06368,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,14,96,"            return instant - instant % iUnitMillis - iUnitMillis;
",8,3,0,0,0,1,0,0,0,11,53,6,0.06368,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,50,"public final class JulianChronology extends BasicGJChronology {
",2,0,0,0,1,2,0,2,0,6,63,1,0.06356,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,14,163,"        return getMaximumValue(instant);
",0,0,0,1,2,1,4,0,0,4,32,5,0.06343,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,554,"            return (DateTimeConstants.MILLIS_PER_DAY - 1)
",4,1,0,1,2,1,0,0,0,5,45,8,0.06337,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,60,"        return iChronology.getWeekyear(instant);
",0,0,0,1,2,1,6,0,0,6,40,5,0.06337,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,493,"        int year = getYear(instant);
",2,0,0,1,2,0,4,0,0,6,28,5,0.06305,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,494,"        int week = getWeekOfWeekyear(instant, year);
",2,0,0,1,2,0,6,0,0,8,44,5,0.06305,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,495,"        if (week == 1) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.06305,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,153,"        if ((base = getBase()) != null) {
",2,1,0,3,7,0,2,0,0,7,33,4,0.06287,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,157,"        FieldUtils.verifyValueBounds
",0,0,0,0,0,0,4,0,0,4,28,5,0.06287,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,159,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;
",2,1,0,1,2,1,8,0,0,11,74,4,0.06287,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,414,"            if (isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,4,23,8,0.06275,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,417,"                oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;
",6,1,0,0,0,0,0,0,0,8,50,9,0.06275,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,420,"            yearStart += oneYear;
",4,0,0,0,0,0,0,0,0,5,21,7,0.06275,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,422,"            if (yearStart <= instant) {
",4,1,0,1,3,0,0,0,0,5,27,7,0.06275,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,424,"                year++;
",2,0,0,0,0,0,0,0,0,3,7,9,0.06275,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,14,112,"        return DateTimeConstants.SUNDAY;
",4,0,0,0,0,1,0,0,0,4,32,5,0.06275,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,344,"            return jan1millis + (8 - jan1dayOfWeek)
",4,2,0,1,2,1,0,0,0,6,39,6,0.06268,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,14,103,"        return DateTimeConstants.MONDAY;
",4,0,0,0,0,1,0,0,0,4,32,5,0.06268,0
defect4j,time,org/joda/time/DateTimeZone,14,951,"        int offsetOriginal = getOffset(originalInstantUTC);
",2,0,0,1,2,0,4,0,0,6,51,5,0.06250,0
defect4j,time,org/joda/time/DateTimeZone,14,952,"        long instantUTC = instantLocal - offsetOriginal;
",6,1,0,0,0,0,0,0,0,7,48,5,0.06250,0
defect4j,time,org/joda/time/DateTimeZone,14,953,"        int offsetLocalFromOriginal = getOffset(instantUTC);
",2,0,0,1,2,0,4,0,0,6,52,5,0.06250,0
defect4j,time,org/joda/time/DateTimeZone,14,954,"        if (offsetLocalFromOriginal == offsetOriginal) {
",4,1,0,1,3,0,0,0,0,5,48,4,0.06250,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,508,"        return getWeekOfWeekyear(instant, getYear(instant));
",0,0,0,2,4,1,8,0,0,8,52,5,0.06244,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,14,82,"            return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);
",6,5,0,5,10,1,2,0,0,13,71,6,0.06208,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,516,"        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,55,5,0.06202,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,517,"        if (instant < firstWeekMillis1) {
",4,1,0,1,3,0,0,0,0,5,33,4,0.06202,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,520,"        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);
",4,1,0,1,2,0,2,0,0,7,59,5,0.06202,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,521,"        if (instant >= firstWeekMillis2) {
",4,1,0,1,3,0,0,0,0,5,34,4,0.06202,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,524,"        return (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;
",8,3,0,3,6,1,0,0,0,11,84,4,0.06202,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,339,"        long jan1millis = getYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,38,5,0.06190,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,340,"        int jan1dayOfWeek = getDayOfWeek(jan1millis);
",2,0,0,1,2,0,4,0,0,6,45,5,0.06190,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,342,"        if (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {
",4,2,0,2,5,0,0,0,0,6,48,4,0.06190,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,792,"        return getMaximumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.06089,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,406,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.05937,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,407,"            return iField.get(localInstant);
",0,0,0,1,2,1,6,0,0,6,32,6,0.05937,0
defect4j,time,org/joda/time/Instant,14,118,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.05920,0
defect4j,time,org/joda/time/Instant,14,119,"        iMillis = instant;
",4,0,0,0,0,0,0,0,0,5,18,4,0.05920,0
defect4j,time,org/joda/time/Instant,14,120,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05920,0
defect4j,time,org/joda/time/Instant,14,256,"        return iMillis;
",2,0,0,0,0,1,0,0,0,2,15,4,0.05861,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,161,"        super(base, param, minDaysInFirstWeek);
",6,0,0,1,2,0,0,0,0,6,39,4,0.05818,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,162,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05818,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,63,"    private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField(""AM"");
",2,0,0,1,2,3,0,4,0,10,85,2,0.05818,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,72,"    private static final Map<DateTimeZone, CopticChronology[]> cCache = new HashMap<DateTimeZone, CopticChronology[]>();
",2,0,0,3,6,3,0,12,0,17,116,2,0.05818,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,78,"        INSTANCE_UTC = getInstance(DateTimeZone.UTC);
",6,0,0,1,2,0,2,0,0,9,45,4,0.05818,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,79,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05818,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,108,"        return getInstance(zone, 4);
",0,0,0,1,2,1,4,0,0,4,28,5,0.05818,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,119,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.05818,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,123,"        synchronized (cCache) {
",2,0,0,1,3,0,0,0,0,2,23,4,0.05818,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,124,"            CopticChronology[] chronos = cCache.get(zone);
",2,0,0,2,4,0,6,2,0,10,46,6,0.05818,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,125,"            if (chronos == null) {
",2,1,0,1,3,0,0,0,0,3,22,6,0.05818,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,126,"                chronos = new CopticChronology[7];
",2,0,0,1,2,0,0,2,0,5,34,8,0.05818,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,127,"                cCache.put(zone, chronos);
",0,0,0,1,2,0,8,0,0,8,26,9,0.05818,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,130,"                chrono = chronos[minDaysInFirstWeek - 1];
",4,1,1,1,2,0,0,0,0,8,41,8,0.05818,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,134,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05818,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,135,"            if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.05818,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,136,"                if (zone == DateTimeZone.UTC) {
",6,1,0,1,3,0,0,0,0,7,31,8,0.05818,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,138,"                    chrono = new CopticChronology(null, null, minDaysInFirstWeek);
",4,0,0,1,2,0,0,2,0,8,62,10,0.05818,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,140,"                    DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);
",4,0,0,1,2,0,0,4,0,8,64,10,0.05818,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,141,"                    chrono = new CopticChronology
",2,0,0,0,0,0,0,2,0,5,29,10,0.05818,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,144,"                } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.05818,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,149,"                chronos[minDaysInFirstWeek - 1] = chrono;
",4,1,1,1,2,0,0,0,0,8,41,8,0.05818,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,151,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05818,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,152,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.05818,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,209,"        int relativeYear = year - 1687;
",4,1,0,0,0,0,0,0,0,5,31,5,0.05818,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,211,"        if (relativeYear <= 0) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.05818,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,214,"            leapYears = (relativeYear + 3) >> 2;
",4,2,0,1,2,0,0,0,0,7,36,6,0.05818,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,223,"        long millis = (relativeYear * 365L + leapYears)
",6,3,0,1,2,0,0,0,0,9,47,5,0.05818,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,228,"        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;
",6,3,0,1,2,1,0,0,0,9,64,4,0.05818,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,233,"        return MIN_YEAR;
",2,0,0,0,0,1,0,0,0,2,16,4,0.05818,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,238,"        return MAX_YEAR;
",2,0,0,0,0,1,0,0,0,2,16,4,0.05818,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,248,"        if (getBase() == null) {
",0,1,0,2,5,0,2,0,0,4,24,4,0.05818,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,249,"            super.assemble(fields);
",4,0,0,1,2,0,0,0,0,4,23,7,0.05818,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,252,"            fields.year = new SkipDateTimeField(this, fields.year);
",8,0,0,1,2,0,0,2,0,11,55,6,0.05818,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,253,"            fields.weekyear = new SkipDateTimeField(this, fields.weekyear);
",8,0,0,1,2,0,0,2,0,11,63,6,0.05818,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,255,"            fields.era = ERA_FIELD;
",6,0,0,0,0,0,0,0,0,7,23,6,0.05818,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,256,"            fields.monthOfYear = new BasicMonthOfYearDateTimeField(this, 13);
",4,0,0,1,2,0,0,2,0,7,65,6,0.05818,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,257,"            fields.months = fields.monthOfYear.getDurationField();
",8,0,0,1,2,0,2,0,0,11,54,6,0.05818,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,259,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05818,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,51,"public final class CopticChronology extends BasicFixedMonthChronology {
",2,0,0,0,1,2,0,2,0,6,71,1,0.05818,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,14,59,"        super(base, param, minDaysInFirstWeek);
",6,0,0,1,2,0,0,0,0,6,39,4,0.05730,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,14,60,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05730,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,14,101,"        return ((month - 1) * MILLIS_PER_MONTH);
",4,2,0,2,4,1,0,0,0,6,40,5,0.05730,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,14,117,"        return (month != 13) ? MONTH_LENGTH : (isLeapYear(year) ? 6 : 5);
",4,1,0,3,6,1,4,0,0,9,65,5,0.05730,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,14,143,"        return 13;
",0,0,0,0,0,1,0,0,0,0,10,3,0.05730,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,14,148,"        return MILLIS_PER_YEAR;
",2,0,0,0,0,1,0,0,0,2,23,4,0.05730,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,14,158,"        return MILLIS_PER_MONTH;
",2,0,0,0,0,1,0,0,0,2,24,4,0.05730,0
defect4j,time,org/joda/time/field/DecoratedDurationField,14,101,"        return iField.getUnitMillis();
",0,0,0,1,2,1,4,0,0,4,30,5,0.05654,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1535,"                if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,7,0.05599,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1536,"                    return iWallOffsets[i - 1];
",2,1,1,1,2,1,0,0,0,5,27,10,0.05599,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1574,"                return transitions[i];
",0,0,1,1,2,1,0,0,0,4,22,8,0.05594,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,162,"        super(base, param, minDaysInFirstWeek);
",6,0,0,1,2,0,0,0,0,6,39,4,0.05551,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,163,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05551,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,71,"    private static final Map<DateTimeZone, JulianChronology[]> cCache = new HashMap<DateTimeZone, JulianChronology[]>();
",2,0,0,3,6,3,0,12,0,17,116,2,0.05551,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,74,"        INSTANCE_UTC = getInstance(DateTimeZone.UTC);
",6,0,0,1,2,0,2,0,0,9,45,4,0.05551,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,75,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05551,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,114,"        return getInstance(zone, 4);
",0,0,0,1,2,1,4,0,0,4,28,5,0.05551,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,125,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.05551,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,129,"        synchronized (cCache) {
",2,0,0,1,3,0,0,0,0,2,23,4,0.05551,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,130,"            JulianChronology[] chronos = cCache.get(zone);
",2,0,0,2,4,0,6,2,0,10,46,6,0.05551,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,131,"            if (chronos == null) {
",2,1,0,1,3,0,0,0,0,3,22,6,0.05551,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,132,"                chronos = new JulianChronology[7];
",2,0,0,1,2,0,0,2,0,5,34,8,0.05551,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,133,"                cCache.put(zone, chronos);
",0,0,0,1,2,0,8,0,0,8,26,9,0.05551,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,136,"                chrono = chronos[minDaysInFirstWeek - 1];
",4,1,1,1,2,0,0,0,0,8,41,8,0.05551,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,140,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05551,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,141,"            if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.05551,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,142,"                if (zone == DateTimeZone.UTC) {
",6,1,0,1,3,0,0,0,0,7,31,8,0.05551,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,143,"                    chrono = new JulianChronology(null, null, minDaysInFirstWeek);
",4,0,0,1,2,0,0,2,0,8,62,10,0.05551,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,149,"                chronos[minDaysInFirstWeek - 1] = chrono;
",4,1,1,1,2,0,0,0,0,8,41,8,0.05551,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,151,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05551,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,152,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.05551,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,241,"        return MIN_YEAR;
",2,0,0,0,0,1,0,0,0,2,16,4,0.05551,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,245,"        return MAX_YEAR;
",2,0,0,0,0,1,0,0,0,2,16,4,0.05551,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,249,"        return MILLIS_PER_YEAR;
",2,0,0,0,0,1,0,0,0,2,23,4,0.05551,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,257,"        return MILLIS_PER_MONTH;
",2,0,0,0,0,1,0,0,0,2,24,4,0.05551,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,265,"        if (getBase() == null) {
",0,1,0,2,5,0,2,0,0,4,24,4,0.05551,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,266,"            super.assemble(fields);
",4,0,0,1,2,0,0,0,0,4,23,7,0.05551,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,268,"            fields.year = new SkipDateTimeField(this, fields.year);
",8,0,0,1,2,0,0,2,0,11,55,6,0.05551,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,269,"            fields.weekyear = new SkipDateTimeField(this, fields.weekyear);
",8,0,0,1,2,0,0,2,0,11,63,6,0.05551,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,271,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05551,0
defect4j,time,org/joda/time/DateTimeFieldType,14,480,"            chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,5,0.05338,0
defect4j,time,org/joda/time/DateTimeFieldType,14,482,"            switch (iOrdinal) {
",2,0,0,1,3,0,0,0,0,2,19,5,0.05338,0
defect4j,time,org/joda/time/base/AbstractPartial,14,54,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.05136,0
defect4j,time,org/joda/time/base/AbstractPartial,14,55,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05136,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1540,"            if (iTailZone == null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.05067,0
defect4j,time,org/joda/time/DateTimeZone,14,924,"        int offset = getOffset(instantUTC);
",2,0,0,1,2,0,4,0,0,6,35,5,0.04946,0
defect4j,time,org/joda/time/DateTimeZone,14,925,"        long instantLocal = instantUTC + offset;
",6,1,0,0,0,0,0,0,0,7,40,5,0.04946,0
defect4j,time,org/joda/time/DateTimeZone,14,927,"        if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {
",8,5,0,3,7,0,0,0,0,13,68,4,0.04946,0
defect4j,time,org/joda/time/DateTimeZone,14,930,"        return instantLocal;
",2,0,0,0,0,1,0,0,0,2,20,4,0.04946,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1576,"            if (iTailZone == null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.04942,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,14,92,"        if (instant >= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.04860,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,14,51,"        super(DateTimeFieldType.era());
",0,0,0,2,4,0,4,0,0,4,31,5,0.04598,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,14,52,"        iEraText = text;
",4,0,0,0,0,0,0,0,0,5,16,4,0.04598,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,14,53,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04598,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,14,106,"        return UnsupportedDurationField.getInstance(DurationFieldType.eras());
",0,0,0,2,4,1,8,0,0,8,70,5,0.04598,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,14,111,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.04598,0
defect4j,time,org/joda/time/DateTime,14,527,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,391,"        LimitDurationField(DurationField field) {
",4,0,0,1,3,0,0,2,0,6,41,3,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,392,"            super(field, field.getType());
",2,0,0,2,4,0,4,0,0,6,30,5,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,393,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,99,"        super(base, null);
",2,0,0,1,2,0,0,0,0,3,18,3,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,101,"        iLowerLimit = lowerLimit;
",4,0,0,0,0,0,0,0,0,5,25,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,102,"        iUpperLimit = upperLimit;
",4,0,0,0,0,0,0,0,0,5,25,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,103,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,67,"        if (base == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,71,"        lowerLimit = lowerLimit == null ? null : lowerLimit.toDateTime();
",4,1,0,1,2,0,4,0,0,10,65,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,72,"        upperLimit = upperLimit == null ? null : upperLimit.toDateTime();
",4,1,0,1,2,0,4,0,0,10,65,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,74,"        if (lowerLimit != null && upperLimit != null) {
",4,3,0,1,3,0,0,0,0,7,47,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,81,"        return new LimitChronology(base, (DateTime)lowerLimit, (DateTime)upperLimit);
",6,0,0,3,6,1,0,6,0,12,77,5,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,209,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();
",2,0,0,1,2,0,0,12,0,14,66,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,213,"        fields.eras = convertField(fields.eras, converted);
",8,0,0,1,2,0,4,0,0,13,51,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,214,"        fields.centuries = convertField(fields.centuries, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,215,"        fields.years = convertField(fields.years, converted);
",8,0,0,1,2,0,4,0,0,13,53,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,216,"        fields.months = convertField(fields.months, converted);
",8,0,0,1,2,0,4,0,0,13,55,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,217,"        fields.weekyears = convertField(fields.weekyears, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,218,"        fields.weeks = convertField(fields.weeks, converted);
",8,0,0,1,2,0,4,0,0,13,53,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,219,"        fields.days = convertField(fields.days, converted);
",8,0,0,1,2,0,4,0,0,13,51,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,221,"        fields.halfdays = convertField(fields.halfdays, converted);
",8,0,0,1,2,0,4,0,0,13,59,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,222,"        fields.hours = convertField(fields.hours, converted);
",8,0,0,1,2,0,4,0,0,13,53,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,223,"        fields.minutes = convertField(fields.minutes, converted);
",8,0,0,1,2,0,4,0,0,13,57,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,224,"        fields.seconds = convertField(fields.seconds, converted);
",8,0,0,1,2,0,4,0,0,13,57,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,225,"        fields.millis = convertField(fields.millis, converted);
",8,0,0,1,2,0,4,0,0,13,55,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,229,"        fields.year = convertField(fields.year, converted);
",8,0,0,1,2,0,4,0,0,13,51,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,230,"        fields.yearOfEra = convertField(fields.yearOfEra, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,231,"        fields.yearOfCentury = convertField(fields.yearOfCentury, converted);
",8,0,0,1,2,0,4,0,0,13,69,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,232,"        fields.centuryOfEra = convertField(fields.centuryOfEra, converted);
",8,0,0,1,2,0,4,0,0,13,67,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,233,"        fields.era = convertField(fields.era, converted);
",8,0,0,1,2,0,4,0,0,13,49,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,234,"        fields.dayOfWeek = convertField(fields.dayOfWeek, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,235,"        fields.dayOfMonth = convertField(fields.dayOfMonth, converted);
",8,0,0,1,2,0,4,0,0,13,63,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,236,"        fields.dayOfYear = convertField(fields.dayOfYear, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,237,"        fields.monthOfYear = convertField(fields.monthOfYear, converted);
",8,0,0,1,2,0,4,0,0,13,65,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,238,"        fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);
",8,0,0,1,2,0,4,0,0,13,71,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,239,"        fields.weekyear = convertField(fields.weekyear, converted);
",8,0,0,1,2,0,4,0,0,13,59,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,240,"        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);
",8,0,0,1,2,0,4,0,0,13,77,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,242,"        fields.millisOfSecond = convertField(fields.millisOfSecond, converted);
",8,0,0,1,2,0,4,0,0,13,71,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,243,"        fields.millisOfDay = convertField(fields.millisOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,65,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,244,"        fields.secondOfMinute = convertField(fields.secondOfMinute, converted);
",8,0,0,1,2,0,4,0,0,13,71,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,245,"        fields.secondOfDay = convertField(fields.secondOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,65,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,246,"        fields.minuteOfHour = convertField(fields.minuteOfHour, converted);
",8,0,0,1,2,0,4,0,0,13,67,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,247,"        fields.minuteOfDay = convertField(fields.minuteOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,65,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,248,"        fields.hourOfDay = convertField(fields.hourOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,249,"        fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);
",8,0,0,1,2,0,4,0,0,13,69,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,250,"        fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,71,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,251,"        fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);
",8,0,0,1,2,0,4,0,0,13,79,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,252,"        fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,67,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,253,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,256,"        if (field == null || !field.isSupported()) {
",2,2,0,2,5,0,4,0,0,9,44,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,257,"            return field;
",2,0,0,0,0,1,0,0,0,2,13,6,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,259,"        if (converted.containsKey(field)) {
",0,0,0,2,5,0,6,0,0,6,35,5,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,260,"            return (DurationField)converted.get(field);
",0,0,0,2,4,1,6,2,0,8,43,7,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,262,"        LimitDurationField limitField = new LimitDurationField(field);
",4,0,0,1,2,0,0,4,0,8,62,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,263,"        converted.put(field, limitField);
",0,0,0,1,2,0,8,0,0,8,33,5,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,264,"        return limitField;
",2,0,0,0,0,1,0,0,0,2,18,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,268,"        if (field == null || !field.isSupported()) {
",2,2,0,2,5,0,4,0,0,9,44,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,271,"        if (converted.containsKey(field)) {
",0,0,0,2,5,0,6,0,0,6,35,5,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,274,"        LimitDateTimeField limitField =
",2,0,0,0,0,0,0,2,0,4,31,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,279,"        converted.put(field, limitField);
",0,0,0,1,2,0,8,0,0,8,33,5,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,280,"        return limitField;
",2,0,0,0,0,1,0,0,0,2,18,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,453,"                           DurationField leapDurationField) {
",2,0,0,0,2,0,0,2,0,4,34,4,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,454,"            super(field, field.getType());
",2,0,0,2,4,0,4,0,0,6,30,5,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,455,"            iDurationField = durationField;
",4,0,0,0,0,0,0,0,0,5,31,5,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,456,"            iRangeDurationField = rangeDurationField;
",4,0,0,0,0,0,0,0,0,5,41,5,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,457,"            iLeapDurationField = leapDurationField;
",4,0,0,0,0,0,0,0,0,5,39,5,0.04594,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,458,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04594,0
defect4j,time,org/joda/time/DateTime,14,518,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04517,0
defect4j,time,org/joda/time/DateTime,14,516,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,0.04507,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,271,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04494,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,268,"            fields.retainAll(workingFields);
",0,0,0,1,2,0,6,0,0,6,32,7,0.04444,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,272,"        return bld.toFormatter();
",0,0,0,1,2,1,4,0,0,4,25,5,0.04444,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,233,"        Set<DateTimeFieldType> workingFields = new HashSet<DateTimeFieldType>(fields);
",4,0,0,1,2,0,0,8,0,12,78,4,0.04348,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,234,"        int inputSize = workingFields.size();
",2,0,0,1,2,0,4,0,0,6,37,5,0.04348,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,235,"        boolean reducedPrec = false;
",2,0,0,0,0,0,0,0,0,3,28,5,0.04348,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,236,"        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();
",2,0,0,1,2,0,0,4,0,6,62,4,0.04348,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,238,"        if (workingFields.contains(DateTimeFieldType.monthOfYear())) {
",0,0,0,3,7,0,8,0,0,8,62,5,0.04348,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,255,"        boolean datePresent = (workingFields.size() < inputSize);
",4,1,0,2,4,0,4,0,0,9,57,5,0.04348,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,258,"        time(bld, workingFields, extended, strictISO, reducedPrec, datePresent);
",0,0,0,1,2,0,14,0,0,14,72,5,0.04348,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,261,"        if (bld.canBuildFormatter() == false) {
",0,1,0,2,5,0,4,0,0,6,39,4,0.04348,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,470,"        boolean hour = fields.remove(DateTimeFieldType.hourOfDay());
",2,0,0,2,4,0,8,0,0,10,60,5,0.04348,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,471,"        boolean minute = fields.remove(DateTimeFieldType.minuteOfHour());
",2,0,0,2,4,0,8,0,0,10,65,5,0.04348,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,472,"        boolean second = fields.remove(DateTimeFieldType.secondOfMinute());
",2,0,0,2,4,0,8,0,0,10,67,5,0.04348,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,473,"        boolean milli = fields.remove(DateTimeFieldType.millisOfSecond());
",2,0,0,2,4,0,8,0,0,10,66,5,0.04348,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,474,"        if (!hour && !minute && !second && !milli) {
",8,1,0,1,3,0,0,0,0,13,44,4,0.04348,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,88,"        return iField.isSupported();
",0,0,0,1,2,1,4,0,0,4,28,5,0.04318,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,208,"        return iField.getLeapDurationField();
",0,0,0,1,2,1,4,0,0,4,37,5,0.04318,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,192,"        return iField.getDurationField();
",0,0,0,1,2,1,4,0,0,4,33,5,0.04316,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,167,"        return isFormatter(getFormatter());
",0,0,0,2,4,1,4,0,0,4,35,5,0.04301,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1147,"        return (isPrinter(f) || isParser(f));
",0,1,0,3,6,1,8,0,0,9,37,5,0.04301,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,80,"        return iType;
",2,0,0,0,0,1,0,0,0,2,13,4,0.04295,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,230,"        if (fields == null || fields.size() == 0) {
",2,3,0,2,5,0,4,0,0,9,43,4,0.04255,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,435,"        return getMonthOfYear(millis, getYear(millis));
",0,0,0,2,4,1,8,0,0,8,47,5,0.04213,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,72,"        return iChronology.getMonthOfYear(instant);
",0,0,0,1,2,1,6,0,0,6,43,5,0.04188,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,196,"        return iField.getRangeDurationField();
",0,0,0,1,2,1,4,0,0,4,38,5,0.04153,0
defect4j,time,org/joda/time/field/SkipDateTimeField,14,54,"        this(chronology, field, 0);
",4,0,0,1,2,0,0,0,0,4,27,4,0.04092,0
defect4j,time,org/joda/time/field/SkipDateTimeField,14,55,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04092,0
defect4j,time,org/joda/time/field/SkipDateTimeField,14,65,"        super(field);
",2,0,0,1,2,0,0,0,0,2,13,4,0.04089,0
defect4j,time,org/joda/time/field/SkipDateTimeField,14,66,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.04089,0
defect4j,time,org/joda/time/field/SkipDateTimeField,14,67,"        int min = super.getMinimumValue();
",4,0,0,1,2,0,0,0,0,4,34,5,0.04089,0
defect4j,time,org/joda/time/field/SkipDateTimeField,14,68,"        if (min < skip) {
",4,1,0,1,3,0,0,0,0,5,17,4,0.04089,0
defect4j,time,org/joda/time/field/SkipDateTimeField,14,69,"            iMinValue = min - 1;
",4,1,0,0,0,0,0,0,0,6,20,6,0.04089,0
defect4j,time,org/joda/time/field/SkipDateTimeField,14,75,"        iSkip = skip;
",4,0,0,0,0,0,0,0,0,5,13,4,0.04089,0
defect4j,time,org/joda/time/field/SkipDateTimeField,14,76,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04089,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,212,"        return iField.getMinimumValue();
",0,0,0,1,2,1,4,0,0,4,32,5,0.04089,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,224,"        return iChronology.getMinYear();
",0,0,0,1,2,1,4,0,0,4,32,5,0.04082,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,213,"                leapYears--;
",2,0,0,0,0,0,0,0,0,3,12,8,0.04071,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,52,"        this(field, null);
",2,0,0,1,2,0,0,0,0,2,18,4,0.04066,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,53,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04066,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,62,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.04066,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,63,"        if (field == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.04066,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,66,"        iField = field;
",4,0,0,0,0,0,0,0,0,5,15,4,0.04066,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,67,"        iType = (type == null ? field.getType() : type);
",6,1,0,2,4,0,4,0,0,12,48,4,0.04066,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,68,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04066,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,14,115,"        return iChronology.getMinYear();
",0,0,0,1,2,1,4,0,0,4,32,5,0.03951,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,131,"        if ((base = iBase) != null && (iBaseFlags & 5) == 5) {
",6,4,0,3,7,0,0,0,0,11,54,4,0.03851,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,14,165,"        return getWrappedField().getLeapDurationField();
",0,0,0,2,4,1,4,0,0,4,48,5,0.03787,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,14,56,"        return iChronology.getDayOfWeek(instant);
",0,0,0,1,2,1,6,0,0,6,41,5,0.03780,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,534,"        if (instant >= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.03758,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,134,"        return (value > 28 ? getDaysInMonthMax(instant) : 28);
",2,1,0,2,4,1,4,0,0,7,54,6,0.03704,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,96,"        return iChronology.getDaysInMonthMaxForSet(instant, value);
",0,0,0,1,2,1,8,0,0,8,59,5,0.03704,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,458,"        int month = getMonthOfYear(millis, year);
",2,0,0,1,2,0,6,0,0,8,41,5,0.03697,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,459,"        return getDayOfMonth(millis, year, month);
",0,0,0,1,2,1,8,0,0,8,42,5,0.03697,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,293,"        FieldUtils.verifyValueBounds(this, month, MIN, iMax);
",0,0,0,1,2,0,10,0,0,10,53,5,0.03697,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,295,"        int thisYear = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,44,5,0.03697,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,297,"        int thisDom = iChronology.getDayOfMonth(instant, thisYear);
",2,0,0,1,2,0,8,0,0,10,59,5,0.03697,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,298,"        int maxDom = iChronology.getDaysInYearMonth(thisYear, month);
",2,0,0,1,2,0,8,0,0,10,61,5,0.03697,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,299,"        if (thisDom > maxDom) {
",4,1,0,1,3,0,0,0,0,5,23,4,0.03697,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,304,"        return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +
",0,1,0,1,2,1,10,0,0,11,68,4,0.03697,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,14,82,"        FieldUtils.verifyValueBounds
",0,0,0,0,0,0,4,0,0,4,28,5,0.03655,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,14,84,"        return iChronology.setYear(instant, year);
",0,0,0,1,2,1,8,0,0,8,42,5,0.03655,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,552,"            return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);
",6,1,0,2,4,1,0,0,0,7,58,8,0.03591,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,167,"        if ((base = getBase()) != null) {
",2,1,0,3,7,0,2,0,0,7,33,4,0.03587,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,172,"        FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);
",0,0,0,2,4,0,10,0,0,10,78,5,0.03587,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,173,"        FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);
",0,0,0,2,4,0,10,0,0,10,84,5,0.03587,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,174,"        FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);
",0,0,0,2,4,0,10,0,0,10,88,5,0.03587,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,175,"        FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);
",0,0,0,2,4,0,10,0,0,10,89,5,0.03587,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,177,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth)
",0,0,0,1,2,1,8,0,0,8,59,9,0.03587,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,14,78,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(),
",0,0,0,1,3,0,8,0,0,8,60,5,0.03583,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,14,80,"        return instant + (value - get(instant)) * iUnitMillis;
",6,3,0,2,4,1,4,0,0,13,54,4,0.03583,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,160,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.03583,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,14,111,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());
",0,0,0,3,6,0,10,0,0,10,80,5,0.03579,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,14,112,"        return instant + (value - get(instant)) * iUnitMillis;
",6,3,0,2,4,1,4,0,0,13,54,4,0.03579,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,175,"        int thisYear = getYear(instant);
",2,0,0,1,2,0,4,0,0,6,32,5,0.03571,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,176,"        int dayOfYear = getDayOfYear(instant, thisYear);
",2,0,0,1,2,0,6,0,0,8,48,5,0.03571,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,177,"        int millisOfDay = getMillisOfDay(instant);
",2,0,0,1,2,0,4,0,0,6,42,5,0.03571,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,179,"        if (dayOfYear > (31 + 28)) { // after Feb 28
",2,2,0,2,5,0,0,0,0,4,44,4,0.03571,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,195,"        instant = getYearMonthDayMillis(year, 1, dayOfYear);
",2,0,0,1,2,0,6,0,0,9,52,4,0.03571,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,196,"        instant += millisOfDay;
",4,0,0,0,0,0,0,0,0,5,23,4,0.03571,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,198,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.03571,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,103,"        return getInfo(instant).getOffset(instant);
",0,0,0,2,4,1,8,0,0,8,43,5,0.03567,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,196,"            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {
",8,3,0,1,3,0,0,0,0,11,59,5,0.03567,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,197,"                if (iOffset == Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,35,7,0.03567,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,198,"                    iOffset = iZoneRef.getOffset(iPeriodStart);
",2,0,0,1,2,0,6,0,0,9,43,9,0.03567,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,200,"                return iOffset;
",2,0,0,0,0,1,0,0,0,2,15,7,0.03567,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1533,"            i = ~i;
",4,0,0,0,0,0,0,0,0,6,7,5,0.03567,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1534,"            if (i < transitions.length) {
",6,1,0,1,3,0,0,0,0,7,29,5,0.03567,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1528,"            long[] transitions = iTransitions;
",4,0,0,1,2,0,0,0,0,4,34,6,0.03565,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1529,"            int i = Arrays.binarySearch(transitions, instant);
",2,0,0,1,2,0,8,0,0,10,50,6,0.03565,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1530,"            if (i >= 0) {
",2,1,0,1,3,0,0,0,0,3,13,5,0.03565,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,140,"        int period = (int)(millis >> 32);
",4,1,0,2,4,0,0,0,0,5,33,5,0.03558,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,141,"        Info[] cache = iInfoCache;
",4,0,0,1,2,0,0,2,0,6,26,4,0.03558,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,142,"        int index = period & cInfoCacheMask;
",6,1,0,0,0,0,0,0,0,7,36,5,0.03558,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,143,"        Info info = cache[index];
",2,0,1,1,2,0,0,2,0,8,25,4,0.03558,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,144,"        if (info == null || (int)((info.iPeriodStart >> 32)) != period) {
",8,4,0,4,9,0,0,0,0,12,65,4,0.03558,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,145,"            info = createInfo(millis);
",2,0,0,1,2,0,4,0,0,7,26,6,0.03558,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,146,"            cache[index] = info;
",2,0,1,1,2,0,0,0,0,7,20,6,0.03558,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,148,"        return info;
",2,0,0,0,0,1,0,0,0,2,12,4,0.03558,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,152,"        long periodStart = millis & (0xffffffffL << 32);
",4,2,0,1,2,0,0,0,0,6,48,5,0.03558,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,153,"        Info info = new Info(iZone, periodStart);
",6,0,0,1,2,0,0,4,0,10,41,4,0.03558,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,155,"        long end = periodStart | 0xffffffffL;
",4,1,0,0,0,0,0,0,0,5,37,5,0.03558,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,156,"        Info chain = info;
",4,0,0,0,0,0,0,2,0,6,18,4,0.03558,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,158,"            long next = iZone.nextTransition(periodStart);
",2,0,0,1,2,0,6,0,0,8,46,7,0.03558,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,159,"            if (next == periodStart || next > end) {
",8,3,0,1,3,0,0,0,0,11,40,6,0.03558,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,166,"        return info;
",2,0,0,0,0,1,0,0,0,2,12,4,0.03558,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,180,"        Info(DateTimeZone zone, long periodStart) {
",6,0,0,1,3,0,0,2,0,8,43,3,0.03558,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,177,"        private int iOffset = Integer.MIN_VALUE;
",6,0,0,0,0,1,0,0,0,7,40,3,0.03558,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,178,"        private int iStandardOffset = Integer.MIN_VALUE;
",6,0,0,0,0,1,0,0,0,7,48,3,0.03558,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,181,"            iPeriodStart = periodStart;
",4,0,0,0,0,0,0,0,0,5,27,5,0.03558,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,182,"            iZoneRef = zone;
",4,0,0,0,0,0,0,0,0,5,16,5,0.03558,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,183,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03558,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1570,"            long[] transitions = iTransitions;
",4,0,0,1,2,0,0,0,0,4,34,6,0.03558,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1571,"            int i = Arrays.binarySearch(transitions, instant);
",2,0,0,1,2,0,8,0,0,10,50,6,0.03558,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1572,"            i = (i >= 0) ? (i + 1) : ~i;
",8,2,0,2,4,0,0,0,0,12,28,5,0.03558,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1573,"            if (i < transitions.length) {
",6,1,0,1,3,0,0,0,0,7,29,5,0.03558,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,55,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.03554,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,485,"        long yearStart = getYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,37,5,0.03540,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,486,"        return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;
",8,3,0,3,6,1,0,0,0,11,76,4,0.03540,0
defect4j,time,org/joda/time/base/AbstractPartial,14,255,"        if (this == partial) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.03509,0
defect4j,time,org/joda/time/base/AbstractPartial,14,258,"        if (partial instanceof ReadablePartial == false) {
",2,1,0,1,3,0,0,2,0,6,50,4,0.03509,0
defect4j,time,org/joda/time/base/AbstractPartial,14,261,"        ReadablePartial other = (ReadablePartial) partial;
",4,0,0,1,2,0,0,4,0,8,50,4,0.03509,0
defect4j,time,org/joda/time/base/AbstractPartial,14,262,"        if (size() != other.size()) {
",0,1,0,3,7,0,6,0,0,7,29,4,0.03509,0
defect4j,time,org/joda/time/base/AbstractPartial,14,265,"        for (int i = 0, isize = size(); i < isize; i++) {
",10,1,0,2,5,0,2,0,0,14,49,4,0.03509,0
defect4j,time,org/joda/time/base/AbstractPartial,14,266,"            if (getValue(i) != other.getValue(i) || getFieldType(i) != other.getFieldType(i)) {
",0,3,0,5,11,0,20,0,0,23,83,6,0.03509,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,551,"        if (instant >= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.03505,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2650,"            DateTimePrinter[] elements = iPrinters;
",4,0,0,1,2,0,0,2,0,6,39,5,0.03279,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2651,"            if (elements == null) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.03279,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2655,"            if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,5,0.03279,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2657,"                locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,7,0.03279,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2660,"            int len = elements.length;
",6,0,0,0,0,0,0,0,0,6,26,6,0.03279,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2661,"            for (int i=0; i<len; i++) {
",8,1,0,1,3,0,0,0,0,10,27,5,0.03279,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2662,"                elements[i].printTo(buf, partial, locale);
",0,0,1,2,4,0,8,0,0,12,42,8,0.03279,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2664,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03279,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1190,"            buf.append(iValue);
",0,0,0,1,2,0,6,0,0,6,19,6,0.03279,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1191,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03279,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,123,"            return MIN_DAYS_PER_MONTH_ARRAY[month - 1];
",2,1,1,1,2,1,0,0,0,5,43,7,0.03269,0
defect4j,time,org/joda/time/base/BasePartial,14,196,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.03252,0
defect4j,time,org/joda/time/base/BasePartial,14,197,"        iChronology = base.iChronology;
",6,0,0,0,0,0,0,0,0,7,31,4,0.03252,0
defect4j,time,org/joda/time/base/BasePartial,14,198,"        iValues = values;
",4,0,0,0,0,0,0,0,0,5,17,4,0.03252,0
defect4j,time,org/joda/time/base/BasePartial,14,199,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03252,0
defect4j,time,org/joda/time/base/BaseDateTime,14,256,"        iMillis = checkInstant(instant, iChronology);
",2,0,0,1,2,0,6,0,0,9,45,4,0.03250,0
defect4j,time,org/joda/time/base/BaseDateTime,14,257,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03250,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,14,131,"        return iRange - 1;
",2,1,0,0,0,1,0,0,0,3,18,4,0.03239,0
defect4j,time,org/joda/time/base/BaseDateTime,14,252,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.03237,0
defect4j,time,org/joda/time/base/BaseDateTime,14,253,"        iChronology = checkChronology(chronology);
",2,0,0,1,2,0,4,0,0,7,42,4,0.03237,0
defect4j,time,org/joda/time/base/BaseDateTime,14,254,"        long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
",2,0,0,0,1,0,10,0,0,12,75,5,0.03237,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,448,"        int year = getYear(millis);
",2,0,0,1,2,0,4,0,0,6,27,5,0.03227,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,449,"        int month = getMonthOfYear(millis, year);
",2,0,0,1,2,0,6,0,0,8,41,5,0.03227,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,450,"        return getDayOfMonth(millis, year, month);
",0,0,0,1,2,1,8,0,0,8,42,5,0.03227,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1456,"            if (partial.isSupported(iFieldType)) {
",0,0,0,2,5,0,6,0,0,6,38,6,0.03226,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1458,"                    FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);
",0,0,0,2,4,0,14,0,0,14,81,10,0.03226,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1461,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03226,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1465,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03226,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,47,"        return iChronology.getDayOfMonth(instant);
",0,0,0,1,2,1,6,0,0,6,42,5,0.03211,0
defect4j,time,org/joda/time/field/FieldUtils,14,222,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03206,0
defect4j,time,org/joda/time/field/FieldUtils,14,217,"        if ((value < lowerBound) || (value > upperBound)) {
",8,3,0,3,7,0,0,0,0,11,51,4,0.03205,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,612,"        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());
",2,0,0,3,6,0,4,4,0,10,78,4,0.03200,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,613,"        printTo(buf, partial);
",0,0,0,1,2,0,6,0,0,6,22,5,0.03200,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,614,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.03200,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,14,54,"        return iChronology.getYear(instant);
",0,0,0,1,2,1,6,0,0,6,36,5,0.03198,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,142,"            return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];
",2,1,1,1,2,1,0,0,0,5,50,7,0.03195,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,468,"        long dateMillis = getYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,38,5,0.03187,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,469,"        dateMillis += getTotalMillisByYearMonth(year, month);
",2,0,0,1,2,0,6,0,0,9,53,4,0.03187,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,470,"        return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;
",8,3,0,3,6,1,0,0,0,11,76,4,0.03187,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,533,"        DateTimePrinter printer = requirePrinter();
",2,0,0,1,2,0,2,2,0,6,43,4,0.03175,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,534,"        if (partial == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.03175,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,537,"        printer.printTo(buf, partial, iLocale);
",0,0,0,1,2,0,10,0,0,10,39,5,0.03175,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,538,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03175,0
defect4j,time,org/joda/time/base/AbstractPartial,14,160,"        return (indexOf(type) != -1);
",0,1,0,2,4,1,4,0,0,6,29,5,0.03175,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,88,"        int i = (int)((millis - getYearMillis(year)) >> 10);
",4,2,0,4,8,0,4,0,0,10,52,5,0.03160,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,93,"        return
",0,0,0,0,0,1,0,0,0,0,6,3,0.03160,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,14,79,"        if (instant >= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.03145,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,605,"        FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));
",0,0,0,3,6,0,16,0,0,16,115,5,0.03145,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,606,"        return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);
",0,0,0,1,2,1,8,0,0,8,60,5,0.03145,0
defect4j,time,org/joda/time/field/FieldUtils,14,240,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03142,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,603,"        FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());
",0,0,0,4,8,0,14,0,0,14,89,5,0.03142,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,604,"        FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));
",0,0,0,3,6,0,14,0,0,14,97,5,0.03142,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,682,"        return getMaxMonth();
",0,0,0,1,2,1,2,0,0,2,21,5,0.03142,0
defect4j,time,org/joda/time/field/FieldUtils,14,235,"        if ((value < lowerBound) || (value > upperBound)) {
",8,3,0,3,7,0,0,0,0,11,51,4,0.03140,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,233,"        return MILLIS_PER_YEAR / 2;
",2,1,0,0,0,1,0,0,0,3,27,4,0.03136,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,241,"        return (1970L * MILLIS_PER_YEAR) / 2;
",2,2,0,1,2,1,0,0,0,4,37,4,0.03136,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,120,"        if (isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,4,23,5,0.03125,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,399,"        long unitMillis = getAverageMillisPerYearDividedByTwo();
",2,0,0,1,2,0,2,0,0,4,56,5,0.03117,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,400,"        long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();
",4,2,0,2,4,0,2,0,0,8,64,5,0.03117,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,401,"        if (i2 < 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.03117,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,404,"        int year = (int) (i2 / unitMillis);
",6,1,0,2,4,0,0,0,0,7,35,5,0.03117,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,406,"        long yearStart = getYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,37,5,0.03117,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,407,"        long diff = instant - yearStart;
",6,1,0,0,0,0,0,0,0,7,32,5,0.03117,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,409,"        if (diff < 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.03117,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,411,"        } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {
",6,2,0,1,4,0,0,0,0,8,61,5,0.03117,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,428,"        return year;
",2,0,0,0,0,1,0,0,0,2,12,4,0.03117,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,139,"        if (isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,4,23,5,0.03086,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,77,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.03080,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,221,"        return MIN_YEAR;
",2,0,0,0,0,1,0,0,0,2,16,4,0.03074,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,202,"        int leapYears = year / 100;
",4,1,0,0,0,0,0,0,0,5,27,5,0.03056,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,203,"        if (year < 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.03056,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,211,"            leapYears = (year >> 2) - leapYears + (leapYears >> 2);
",8,4,0,2,4,0,0,0,0,13,55,6,0.03056,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,212,"            if (isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,4,23,7,0.03056,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,217,"        return (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;
",10,4,0,2,4,1,0,0,0,14,90,4,0.03056,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,197,"        return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);
",6,8,0,5,10,1,0,0,0,14,69,4,0.02998,0
defect4j,time,org/joda/time/base/BaseDateTime,14,284,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.02865,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,385,"        long millis = getYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,34,5,0.02819,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,386,"        millis += getTotalMillisByYearMonth(year, month);
",2,0,0,1,2,0,6,0,0,9,49,4,0.02819,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,387,"        return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;
",8,3,0,2,4,1,0,0,0,11,74,4,0.02819,0
defect4j,time,org/joda/time/base/BaseDateTime,14,270,"        return DateTimeUtils.getChronology(chronology);
",0,0,0,1,2,1,6,0,0,6,47,5,0.02798,0
defect4j,time,org/joda/time/base/AbstractDateTime,14,51,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.02787,0
defect4j,time,org/joda/time/base/AbstractDateTime,14,52,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02787,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,360,"        return getYearInfo(year).iFirstDayMillis;
",2,0,0,1,2,1,4,0,0,6,41,5,0.02742,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,738,"        YearInfo info = iYearInfoCache[year & CACHE_MASK];
",6,1,1,1,2,0,0,2,0,11,50,4,0.02742,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,739,"        if (info == null || info.iYear != year) {
",8,3,0,1,3,0,0,0,0,11,41,4,0.02742,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,740,"            info = new YearInfo(year, calculateFirstDayOfYearMillis(year));
",4,0,0,2,4,0,4,2,0,11,63,6,0.02742,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,741,"            iYearInfoCache[year & CACHE_MASK] = info;
",6,1,1,1,2,0,0,0,0,10,41,6,0.02742,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,743,"        return info;
",2,0,0,0,0,1,0,0,0,2,12,4,0.02742,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,770,"        YearInfo(int year, long firstDayMillis) {
",6,0,0,1,3,0,0,0,0,6,41,3,0.02742,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,771,"            iYear = year;
",4,0,0,0,0,0,0,0,0,5,13,5,0.02742,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,772,"            iFirstDayMillis = firstDayMillis;
",4,0,0,0,0,0,0,0,0,5,33,5,0.02742,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,773,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02742,0
defect4j,time,org/joda/time/base/AbstractInstant,14,61,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.02673,0
defect4j,time,org/joda/time/base/AbstractInstant,14,62,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02673,0
defect4j,time,org/joda/time/DateTimeFieldType,14,475,"            return (1 << iOrdinal);
",2,1,0,1,2,1,0,0,0,3,23,6,0.02564,0
defect4j,time,org/joda/time/base/AbstractPartial,14,150,"        return getValue(indexOfSupported(type));
",0,0,0,2,4,1,6,0,0,6,40,5,0.02439,0
defect4j,time,org/joda/time/DateTimeUtils,14,255,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.02333,0
defect4j,time,org/joda/time/DateTimeUtils,14,414,"        FixedMillisProvider(long fixedMillis) {
",4,0,0,1,3,0,0,0,0,4,39,3,0.02315,0
defect4j,time,org/joda/time/DateTimeUtils,14,415,"            iMillis = fixedMillis;
",4,0,0,0,0,0,0,0,0,5,22,5,0.02315,0
defect4j,time,org/joda/time/DateTimeUtils,14,416,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02315,0
defect4j,time,org/joda/time/DateTimeUtils,14,82,"        checkPermission();
",0,0,0,1,2,0,2,0,0,2,18,5,0.02315,0
defect4j,time,org/joda/time/DateTimeUtils,14,83,"        cMillisProvider = new FixedMillisProvider(fixedMillis);
",4,0,0,1,2,0,0,2,0,7,55,4,0.02315,0
defect4j,time,org/joda/time/DateTimeUtils,14,84,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02315,0
defect4j,time,org/joda/time/DateTimeUtils,14,68,"        checkPermission();
",0,0,0,1,2,0,2,0,0,2,18,5,0.02313,0
defect4j,time,org/joda/time/DateTimeUtils,14,69,"        cMillisProvider = SYSTEM_MILLIS_PROVIDER;
",4,0,0,0,0,0,0,0,0,5,41,4,0.02313,0
defect4j,time,org/joda/time/DateTimeUtils,14,70,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02313,0
defect4j,time,org/joda/time/DateTimeUtils,14,129,"        SecurityManager sm = System.getSecurityManager();
",2,0,0,1,2,0,4,2,0,8,49,4,0.02313,0
defect4j,time,org/joda/time/DateTimeUtils,14,130,"        if (sm != null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.02313,0
defect4j,time,org/joda/time/DateTimeUtils,14,133,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02313,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,14,127,"        return UnsupportedDurationField.getInstance(DurationFieldType.eras());
",0,0,0,2,4,1,8,0,0,8,70,5,0.02232,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,14,131,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.02232,0
defect4j,time,org/joda/time/base/AbstractPartial,14,191,"        return index;
",2,0,0,0,0,1,0,0,0,2,13,4,0.02198,0
defect4j,time,org/joda/time/DateTimeZone,14,174,"        SecurityManager sm = System.getSecurityManager();
",2,0,0,1,2,0,4,2,0,8,49,4,0.02188,0
defect4j,time,org/joda/time/DateTimeZone,14,175,"        if (sm != null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.02188,0
defect4j,time,org/joda/time/DateTimeZone,14,178,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.02188,0
defect4j,time,org/joda/time/DateTimeZone,14,181,"        synchronized(DateTimeZone.class) {
",0,0,0,1,3,0,0,2,0,2,34,6,0.02188,0
defect4j,time,org/joda/time/DateTimeZone,14,182,"            cDefault = zone;
",4,0,0,0,0,0,0,0,0,5,16,6,0.02188,0
defect4j,time,org/joda/time/DateTimeZone,14,183,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02188,0
defect4j,time,org/joda/time/DateTimeZone,14,184,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02188,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,123,"        return iZone.hashCode();
",0,0,0,1,2,1,4,0,0,4,24,5,0.02182,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,133,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.02175,0
defect4j,time,org/joda/time/DateTimeZone,14,1250,"        return 57 + getID().hashCode();
",0,1,0,2,4,1,4,0,0,5,31,4,0.02150,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,14,218,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,82,"        super(base, zone);
",4,0,0,1,2,0,0,0,0,4,18,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,83,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,56,"        if (base == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,59,"        base = base.withUTC();
",2,0,0,1,2,0,4,0,0,7,22,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,60,"        if (base == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,63,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,66,"        return new ZonedChronology(base, zone);
",4,0,0,1,2,1,0,2,0,6,39,5,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,72,"        return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;
",6,4,0,1,2,1,4,0,0,14,87,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,86,"        return (DateTimeZone)getParam();
",0,0,0,2,4,1,2,2,0,4,32,5,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,153,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();
",2,0,0,1,2,0,0,12,0,14,66,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,157,"        fields.eras = convertField(fields.eras, converted);
",8,0,0,1,2,0,4,0,0,13,51,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,158,"        fields.centuries = convertField(fields.centuries, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,159,"        fields.years = convertField(fields.years, converted);
",8,0,0,1,2,0,4,0,0,13,53,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,160,"        fields.months = convertField(fields.months, converted);
",8,0,0,1,2,0,4,0,0,13,55,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,161,"        fields.weekyears = convertField(fields.weekyears, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,162,"        fields.weeks = convertField(fields.weeks, converted);
",8,0,0,1,2,0,4,0,0,13,53,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,163,"        fields.days = convertField(fields.days, converted);
",8,0,0,1,2,0,4,0,0,13,51,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,165,"        fields.halfdays = convertField(fields.halfdays, converted);
",8,0,0,1,2,0,4,0,0,13,59,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,166,"        fields.hours = convertField(fields.hours, converted);
",8,0,0,1,2,0,4,0,0,13,53,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,167,"        fields.minutes = convertField(fields.minutes, converted);
",8,0,0,1,2,0,4,0,0,13,57,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,168,"        fields.seconds = convertField(fields.seconds, converted);
",8,0,0,1,2,0,4,0,0,13,57,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,169,"        fields.millis = convertField(fields.millis, converted);
",8,0,0,1,2,0,4,0,0,13,55,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,173,"        fields.year = convertField(fields.year, converted);
",8,0,0,1,2,0,4,0,0,13,51,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,174,"        fields.yearOfEra = convertField(fields.yearOfEra, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,175,"        fields.yearOfCentury = convertField(fields.yearOfCentury, converted);
",8,0,0,1,2,0,4,0,0,13,69,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,176,"        fields.centuryOfEra = convertField(fields.centuryOfEra, converted);
",8,0,0,1,2,0,4,0,0,13,67,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,177,"        fields.era = convertField(fields.era, converted);
",8,0,0,1,2,0,4,0,0,13,49,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,178,"        fields.dayOfWeek = convertField(fields.dayOfWeek, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,179,"        fields.dayOfMonth = convertField(fields.dayOfMonth, converted);
",8,0,0,1,2,0,4,0,0,13,63,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,180,"        fields.dayOfYear = convertField(fields.dayOfYear, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,181,"        fields.monthOfYear = convertField(fields.monthOfYear, converted);
",8,0,0,1,2,0,4,0,0,13,65,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,182,"        fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);
",8,0,0,1,2,0,4,0,0,13,71,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,183,"        fields.weekyear = convertField(fields.weekyear, converted);
",8,0,0,1,2,0,4,0,0,13,59,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,184,"        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);
",8,0,0,1,2,0,4,0,0,13,77,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,186,"        fields.millisOfSecond = convertField(fields.millisOfSecond, converted);
",8,0,0,1,2,0,4,0,0,13,71,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,187,"        fields.millisOfDay = convertField(fields.millisOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,65,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,188,"        fields.secondOfMinute = convertField(fields.secondOfMinute, converted);
",8,0,0,1,2,0,4,0,0,13,71,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,189,"        fields.secondOfDay = convertField(fields.secondOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,65,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,190,"        fields.minuteOfHour = convertField(fields.minuteOfHour, converted);
",8,0,0,1,2,0,4,0,0,13,67,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,191,"        fields.minuteOfDay = convertField(fields.minuteOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,65,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,192,"        fields.hourOfDay = convertField(fields.hourOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,61,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,193,"        fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);
",8,0,0,1,2,0,4,0,0,13,69,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,194,"        fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,71,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,195,"        fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);
",8,0,0,1,2,0,4,0,0,13,79,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,196,"        fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);
",8,0,0,1,2,0,4,0,0,13,67,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,197,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,200,"        if (field == null || !field.isSupported()) {
",2,2,0,2,5,0,4,0,0,9,44,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,201,"            return field;
",2,0,0,0,0,1,0,0,0,2,13,6,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,203,"        if (converted.containsKey(field)) {
",0,0,0,2,5,0,6,0,0,6,35,5,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,204,"            return (DurationField)converted.get(field);
",0,0,0,2,4,1,6,2,0,8,43,7,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,206,"        ZonedDurationField zonedField = new ZonedDurationField(field, getZone());
",4,0,0,2,4,0,2,4,0,10,73,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,207,"        converted.put(field, zonedField);
",0,0,0,1,2,0,8,0,0,8,33,5,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,208,"        return zonedField;
",2,0,0,0,0,1,0,0,0,2,18,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,212,"        if (field == null || !field.isSupported()) {
",2,2,0,2,5,0,4,0,0,9,44,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,215,"        if (converted.containsKey(field)) {
",0,0,0,2,5,0,6,0,0,6,35,5,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,218,"        ZonedDateTimeField zonedField =
",2,0,0,0,0,0,0,2,0,4,31,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,223,"        converted.put(field, zonedField);
",0,0,0,1,2,0,8,0,0,8,33,5,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,224,"        return zonedField;
",2,0,0,0,0,1,0,0,0,2,18,4,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,284,"            super(field.getType());
",0,0,0,2,4,0,4,0,0,4,23,6,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,285,"            if (!field.isSupported()) {
",0,0,0,2,5,0,4,0,0,5,27,5,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,288,"            iField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,289,"            iTimeField = useTimeArithmetic(field);
",2,0,0,1,2,0,4,0,0,7,38,5,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,290,"            iZone = zone;
",4,0,0,0,0,0,0,0,0,5,13,5,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,291,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,298,"            return iField.getUnitMillis();
",0,0,0,1,2,1,4,0,0,4,30,6,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,389,"            super(field.getType());
",0,0,0,2,4,0,4,0,0,4,23,6,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,390,"            if (!field.isSupported()) {
",0,0,0,2,5,0,4,0,0,5,27,5,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,393,"            iField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,394,"            iZone = zone;
",4,0,0,0,0,0,0,0,0,5,13,5,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,395,"            iDurationField = durationField;
",4,0,0,0,0,0,0,0,0,5,31,5,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,396,"            iTimeField = useTimeArithmetic(durationField);
",2,0,0,1,2,0,4,0,0,7,46,5,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,397,"            iRangeDurationField = rangeDurationField;
",4,0,0,0,0,0,0,0,0,5,41,5,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,398,"            iLeapDurationField = leapDurationField;
",4,0,0,0,0,0,0,0,0,5,39,5,0.02149,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,399,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02149,0
defect4j,time,org/joda/time/field/ScaledDurationField,14,109,"        return getWrappedField().getUnitMillis() * iScalar;
",2,1,0,2,4,1,4,0,0,7,51,4,0.02148,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,315,"        return iParam;
",2,0,0,0,0,1,0,0,0,2,14,4,0.02134,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,14,160,"            return iUnitMillis;
",2,0,0,0,0,1,0,0,0,2,19,5,0.02117,0
defect4j,time,org/joda/time/base/AbstractPartial,14,172,"                return i;
",2,0,0,0,0,1,0,0,0,2,9,8,0.02105,0
defect4j,time,org/joda/time/base/AbstractPartial,14,187,"        int index = indexOf(type);
",2,0,0,1,2,0,4,0,0,6,26,5,0.02105,0
defect4j,time,org/joda/time/base/AbstractPartial,14,188,"        if (index == -1) {
",2,1,0,1,3,0,0,0,0,4,18,4,0.02105,0
defect4j,time,org/joda/time/DateTimeUtils,14,252,"        if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.02069,0
defect4j,time,org/joda/time/field/ScaledDurationField,14,147,"        long scalar = iScalar;
",4,0,0,0,0,0,0,0,0,4,22,5,0.02058,0
defect4j,time,org/joda/time/field/ScaledDurationField,14,148,"        int hash = (int) (scalar ^ (scalar >>> 32));
",6,2,0,3,6,0,0,0,0,8,44,5,0.02058,0
defect4j,time,org/joda/time/field/ScaledDurationField,14,149,"        hash += getType().hashCode();
",2,0,0,2,4,0,4,0,0,7,29,4,0.02058,0
defect4j,time,org/joda/time/field/ScaledDurationField,14,150,"        hash += getWrappedField().hashCode();
",2,0,0,2,4,0,4,0,0,7,37,4,0.02058,0
defect4j,time,org/joda/time/field/ScaledDurationField,14,151,"        return hash;
",2,0,0,0,0,1,0,0,0,2,12,4,0.02058,0
defect4j,time,org/joda/time/field/PreciseDurationField,14,142,"        long millis = iUnitMillis;
",4,0,0,0,0,0,0,0,0,4,26,5,0.02058,0
defect4j,time,org/joda/time/field/PreciseDurationField,14,143,"        int hash = (int) (millis ^ (millis >>> 32));
",6,2,0,3,6,0,0,0,0,8,44,5,0.02058,0
defect4j,time,org/joda/time/field/PreciseDurationField,14,144,"        hash += getType().hashCode();
",2,0,0,2,4,0,4,0,0,7,29,4,0.02058,0
defect4j,time,org/joda/time/field/PreciseDurationField,14,145,"        return hash;
",2,0,0,0,0,1,0,0,0,2,12,4,0.02058,0
defect4j,time,org/joda/time/field/MillisDurationField,14,155,"        return (int) getUnitMillis();
",0,0,0,2,4,1,2,0,0,2,29,6,0.02058,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,14,101,"        return getWrappedField().getLeapDurationField();
",0,0,0,2,4,1,4,0,0,4,48,5,0.02058,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,329,"        return iChronology.days();
",0,0,0,1,2,1,4,0,0,4,26,5,0.02058,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,220,"        return iChronology.weeks();
",0,0,0,1,2,1,4,0,0,4,27,5,0.02058,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,14,111,"        return iChronology.days();
",0,0,0,1,2,1,4,0,0,4,26,5,0.02058,0
defect4j,time,org/joda/time/field/MillisDurationField,14,49,"        return DurationFieldType.millis();
",0,0,0,1,2,1,4,0,0,4,34,5,0.02057,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,726,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.02056,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,14,94,"        return iChronology.weeks();
",0,0,0,1,2,1,4,0,0,4,27,5,0.02054,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,14,90,"        return iField.getRangeDurationField();
",0,0,0,1,2,1,4,0,0,4,38,5,0.02050,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,14,139,"        return iRangeField;
",2,0,0,0,0,1,0,0,0,2,19,4,0.02050,0
defect4j,time,org/joda/time/field/DecoratedDurationField,14,69,"        return iField;
",2,0,0,0,0,1,0,0,0,2,14,4,0.02049,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,208,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.02047,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,14,56,"        return iChronology.years();
",0,0,0,1,2,1,4,0,0,4,27,5,0.02047,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,14,58,"        return iChronology.weekyears();
",0,0,0,1,2,1,4,0,0,4,31,5,0.02047,0
defect4j,time,org/joda/time/field/BaseDurationField,14,55,"        return iType;
",2,0,0,0,0,1,0,0,0,2,13,4,0.02046,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,310,"        return iChronology.years();
",0,0,0,1,2,1,4,0,0,4,27,5,0.02042,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,51,"        return iChronology.months();
",0,0,0,1,2,1,4,0,0,4,28,5,0.02042,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,14,95,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.02040,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,122,"        super(base, null);
",2,0,0,1,2,0,0,0,0,3,18,3,0.02027,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,123,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02027,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,63,"    private static final Map<DateTimeZone, ISOChronology> cCache = new HashMap<DateTimeZone, ISOChronology>();
",2,0,0,1,2,3,0,12,0,17,106,2,0.02027,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,65,"        cFastCache = new ISOChronology[FAST_CACHE_SIZE];
",2,0,1,1,2,0,0,2,0,7,48,4,0.02027,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,66,"        INSTANCE_UTC = new ISOChronology(GregorianChronology.getInstanceUTC());
",2,0,0,2,4,0,4,2,0,9,71,4,0.02027,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,67,"        cCache.put(DateTimeZone.UTC, INSTANCE_UTC);
",4,0,0,1,2,0,6,0,0,10,43,5,0.02027,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,68,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02027,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,169,"        if (getBase().getZone() == DateTimeZone.UTC) {
",4,1,0,3,7,0,4,0,0,9,46,4,0.02027,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,171,"            fields.centuryOfEra = new DividedDateTimeField(
",4,0,0,0,1,0,0,2,0,7,47,6,0.02027,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,173,"            fields.yearOfCentury = new RemainderDateTimeField(
",4,0,0,0,1,0,0,2,0,7,50,6,0.02027,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,175,"            fields.weekyearOfCentury = new RemainderDateTimeField(
",4,0,0,0,1,0,0,2,0,7,54,6,0.02027,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,178,"            fields.centuries = fields.centuryOfEra.getDurationField();
",8,0,0,1,2,0,2,0,0,11,58,6,0.02027,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,180,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02027,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,14,46,"        super(GregorianChronology.getInstanceUTC().year(), DateTimeFieldType.yearOfEra());
",0,0,0,4,8,0,10,0,0,10,82,5,0.02027,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,14,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02027,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,14,40,"    static final DateTimeField INSTANCE = new ISOYearOfEraDateTimeField();
",2,0,0,1,2,2,0,4,0,8,70,2,0.02027,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,14,87,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.02027,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,14,91,"        return getWrappedField().getMaximumValue();
",0,0,0,2,4,1,4,0,0,4,43,5,0.02027,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,14,122,"        return iRangeField;
",2,0,0,0,0,1,0,0,0,2,19,4,0.02025,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,81,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.02023,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,146,"        return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,5,0.02018,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,143,"        if ((base = getBase()) != null) {
",2,1,0,3,7,0,2,0,0,7,33,4,0.02013,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,14,141,"        return iUnitField;
",2,0,0,0,0,1,0,0,0,2,18,4,0.02009,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,45,"public final class GregorianChronology extends BasicGJChronology {
",2,0,0,0,1,2,0,2,0,6,66,1,0.01988,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,148,"        super(base, param, minDaysInFirstWeek);
",6,0,0,1,2,0,0,0,0,6,39,4,0.01981,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,149,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01981,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,68,"    private static final Map<DateTimeZone, GregorianChronology[]> cCache = new HashMap<DateTimeZone, GregorianChronology[]>();
",2,0,0,3,6,3,0,12,0,17,122,2,0.01981,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,71,"        INSTANCE_UTC = getInstance(DateTimeZone.UTC);
",6,0,0,1,2,0,2,0,0,9,45,4,0.01981,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,72,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01981,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,100,"        return getInstance(zone, 4);
",0,0,0,1,2,1,4,0,0,4,28,5,0.01981,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,111,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.01981,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,115,"        synchronized (cCache) {
",2,0,0,1,3,0,0,0,0,2,23,4,0.01981,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,116,"            GregorianChronology[] chronos = cCache.get(zone);
",2,0,0,2,4,0,6,2,0,10,49,6,0.01981,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,117,"            if (chronos == null) {
",2,1,0,1,3,0,0,0,0,3,22,6,0.01981,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,118,"                chronos = new GregorianChronology[7];
",2,0,0,1,2,0,0,2,0,5,37,8,0.01981,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,119,"                cCache.put(zone, chronos);
",0,0,0,1,2,0,8,0,0,8,26,9,0.01981,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,122,"                chrono = chronos[minDaysInFirstWeek - 1];
",4,1,1,1,2,0,0,0,0,8,41,8,0.01981,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,126,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01981,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,127,"            if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.01981,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,128,"                if (zone == DateTimeZone.UTC) {
",6,1,0,1,3,0,0,0,0,7,31,8,0.01981,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,129,"                    chrono = new GregorianChronology(null, null, minDaysInFirstWeek);
",4,0,0,1,2,0,0,2,0,8,65,10,0.01981,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,135,"                chronos[minDaysInFirstWeek - 1] = chrono;
",4,1,1,1,2,0,0,0,0,8,41,8,0.01981,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,137,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01981,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,138,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.01981,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,191,"        if (getBase() == null) {
",0,1,0,2,5,0,2,0,0,4,24,4,0.01981,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,192,"            super.assemble(fields);
",4,0,0,1,2,0,0,0,0,4,23,7,0.01981,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,194,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01981,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,225,"        return MAX_YEAR;
",2,0,0,0,0,1,0,0,0,2,16,4,0.01981,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,229,"        return MILLIS_PER_YEAR;
",2,0,0,0,0,1,0,0,0,2,23,4,0.01981,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,237,"        return MILLIS_PER_MONTH;
",2,0,0,0,0,1,0,0,0,2,24,4,0.01981,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,75,"        super(base, param, minDaysInFirstWeek);
",6,0,0,1,2,0,0,0,0,6,39,4,0.01973,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,76,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01973,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,42,"    private static final int[] MIN_DAYS_PER_MONTH_ARRAY = {
",2,0,0,1,3,3,0,0,0,5,55,2,0.01973,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,45,"    private static final int[] MAX_DAYS_PER_MONTH_ARRAY = {
",2,0,0,1,3,3,0,0,0,5,55,2,0.01973,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,53,"        MIN_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];
",2,0,0,1,2,0,0,0,0,3,47,4,0.01973,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,54,"        MAX_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];
",2,0,0,1,2,0,0,0,0,3,47,4,0.01973,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,56,"        long minSum = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.01973,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,57,"        long maxSum = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.01973,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,58,"        for (int i = 0; i < 11; i++) {
",6,1,0,1,3,0,0,0,0,8,30,4,0.01973,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,59,"            long millis = MIN_DAYS_PER_MONTH_ARRAY[i]
",2,0,1,1,2,0,0,0,0,6,41,7,0.01973,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,61,"            minSum += millis;
",4,0,0,0,0,0,0,0,0,5,17,6,0.01973,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,62,"            MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = minSum;
",4,1,1,1,2,0,0,0,0,8,48,6,0.01973,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,64,"            millis = MAX_DAYS_PER_MONTH_ARRAY[i]
",2,0,1,1,2,0,0,0,0,7,36,6,0.01973,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,66,"            maxSum += millis;
",4,0,0,0,0,0,0,0,0,5,17,6,0.01973,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,67,"            MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = maxSum;
",4,1,1,1,2,0,0,0,0,8,48,6,0.01973,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,69,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01973,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,691,"        return 12;
",0,0,0,0,0,1,0,0,0,0,10,3,0.01973,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,321,"            fields.copyFieldsFrom(iBase);
",0,0,0,1,2,0,6,0,0,6,29,7,0.01952,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,372,"            flags = 
",2,0,0,0,0,0,0,0,0,3,7,6,0.01952,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,14,92,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,156,"        return iMillis;
",2,0,0,0,0,1,0,0,0,2,15,4,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,160,"        return iMillisOfSecond;
",2,0,0,0,0,1,0,0,0,2,23,4,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,164,"        return iMillisOfDay;
",2,0,0,0,0,1,0,0,0,2,20,4,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,168,"        return iSeconds;
",2,0,0,0,0,1,0,0,0,2,16,4,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,172,"        return iSecondOfMinute;
",2,0,0,0,0,1,0,0,0,2,23,4,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,176,"        return iSecondOfDay;
",2,0,0,0,0,1,0,0,0,2,20,4,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,180,"        return iMinutes;
",2,0,0,0,0,1,0,0,0,2,16,4,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,184,"        return iMinuteOfHour;
",2,0,0,0,0,1,0,0,0,2,21,4,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,188,"        return iMinuteOfDay;
",2,0,0,0,0,1,0,0,0,2,20,4,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,192,"        return iHours;
",2,0,0,0,0,1,0,0,0,2,14,4,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,196,"        return iHourOfDay;
",2,0,0,0,0,1,0,0,0,2,18,4,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,200,"        return iClockhourOfDay;
",2,0,0,0,0,1,0,0,0,2,23,4,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,204,"        return iHalfdays;
",2,0,0,0,0,1,0,0,0,2,17,4,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,208,"        return iHourOfHalfday;
",2,0,0,0,0,1,0,0,0,2,22,4,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,212,"        return iClockhourOfHalfday;
",2,0,0,0,0,1,0,0,0,2,27,4,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,216,"        return iHalfdayOfDay;
",2,0,0,0,0,1,0,0,0,2,21,4,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,220,"        return iDays;
",2,0,0,0,0,1,0,0,0,2,13,4,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,224,"        return iDayOfWeek;
",2,0,0,0,0,1,0,0,0,2,18,4,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,228,"        return iDayOfMonth;
",2,0,0,0,0,1,0,0,0,2,19,4,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,232,"        return iDayOfYear;
",2,0,0,0,0,1,0,0,0,2,18,4,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,236,"        return iWeeks;
",2,0,0,0,0,1,0,0,0,2,14,4,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,240,"        return iWeekOfWeekyear;
",2,0,0,0,0,1,0,0,0,2,23,4,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,244,"        return iWeekyears;
",2,0,0,0,0,1,0,0,0,2,18,4,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,248,"        return iWeekyear;
",2,0,0,0,0,1,0,0,0,2,17,4,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,252,"        return iWeekyearOfCentury;
",2,0,0,0,0,1,0,0,0,2,26,4,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,256,"        return iMonths;
",2,0,0,0,0,1,0,0,0,2,15,4,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,260,"        return iMonthOfYear;
",2,0,0,0,0,1,0,0,0,2,20,4,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,264,"        return iYears;
",2,0,0,0,0,1,0,0,0,2,14,4,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,272,"        return iYearOfEra;
",2,0,0,0,0,1,0,0,0,2,18,4,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,276,"        return iYearOfCentury;
",2,0,0,0,0,1,0,0,0,2,22,4,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,280,"        return iCenturies;
",2,0,0,0,0,1,0,0,0,2,18,4,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,284,"        return iCenturyOfEra;
",2,0,0,0,0,1,0,0,0,2,21,4,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,288,"        return iEras;
",2,0,0,0,0,1,0,0,0,2,13,4,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,292,"        return iEra;
",2,0,0,0,0,1,0,0,0,2,12,4,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,445,"                if (isSupported(f = chrono.millis())) {
",2,0,0,3,7,0,6,0,0,9,39,7,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,446,"                    millis = f;
",4,0,0,0,0,0,0,0,0,5,11,8,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,448,"                if (isSupported(f = chrono.seconds())) {
",2,0,0,3,7,0,6,0,0,9,40,7,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,449,"                    seconds = f;
",4,0,0,0,0,0,0,0,0,5,12,8,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,451,"                if (isSupported(f = chrono.minutes())) {
",2,0,0,3,7,0,6,0,0,9,40,7,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,452,"                    minutes = f;
",4,0,0,0,0,0,0,0,0,5,12,8,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,454,"                if (isSupported(f = chrono.hours())) {
",2,0,0,3,7,0,6,0,0,9,38,7,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,455,"                    hours = f;
",4,0,0,0,0,0,0,0,0,5,10,8,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,457,"                if (isSupported(f = chrono.halfdays())) {
",2,0,0,3,7,0,6,0,0,9,41,7,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,458,"                    halfdays = f;
",4,0,0,0,0,0,0,0,0,5,13,8,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,460,"                if (isSupported(f = chrono.days())) {
",2,0,0,3,7,0,6,0,0,9,37,7,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,461,"                    days = f;
",4,0,0,0,0,0,0,0,0,5,9,8,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,463,"                if (isSupported(f = chrono.weeks())) {
",2,0,0,3,7,0,6,0,0,9,38,7,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,464,"                    weeks = f;
",4,0,0,0,0,0,0,0,0,5,10,8,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,466,"                if (isSupported(f = chrono.weekyears())) {
",2,0,0,3,7,0,6,0,0,9,42,7,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,467,"                    weekyears = f;
",4,0,0,0,0,0,0,0,0,5,14,8,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,469,"                if (isSupported(f = chrono.months())) {
",2,0,0,3,7,0,6,0,0,9,39,7,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,470,"                    months = f;
",4,0,0,0,0,0,0,0,0,5,11,8,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,472,"                if (isSupported(f = chrono.years())) {
",2,0,0,3,7,0,6,0,0,9,38,7,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,473,"                    years = f;
",4,0,0,0,0,0,0,0,0,5,10,8,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,475,"                if (isSupported(f = chrono.centuries())) {
",2,0,0,3,7,0,6,0,0,9,42,7,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,476,"                    centuries = f;
",4,0,0,0,0,0,0,0,0,5,14,8,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,478,"                if (isSupported(f = chrono.eras())) {
",2,0,0,3,7,0,6,0,0,9,37,7,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,485,"                if (isSupported(f = chrono.millisOfSecond())) {
",2,0,0,3,7,0,6,0,0,9,47,7,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,486,"                    millisOfSecond = f;
",4,0,0,0,0,0,0,0,0,5,19,8,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,488,"                if (isSupported(f = chrono.millisOfDay())) {
",2,0,0,3,7,0,6,0,0,9,44,7,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,489,"                    millisOfDay = f;
",4,0,0,0,0,0,0,0,0,5,16,8,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,491,"                if (isSupported(f = chrono.secondOfMinute())) {
",2,0,0,3,7,0,6,0,0,9,47,7,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,492,"                    secondOfMinute = f;
",4,0,0,0,0,0,0,0,0,5,19,8,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,494,"                if (isSupported(f = chrono.secondOfDay())) {
",2,0,0,3,7,0,6,0,0,9,44,7,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,495,"                    secondOfDay = f;
",4,0,0,0,0,0,0,0,0,5,16,8,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,497,"                if (isSupported(f = chrono.minuteOfHour())) {
",2,0,0,3,7,0,6,0,0,9,45,7,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,498,"                    minuteOfHour = f;
",4,0,0,0,0,0,0,0,0,5,17,8,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,500,"                if (isSupported(f = chrono.minuteOfDay())) {
",2,0,0,3,7,0,6,0,0,9,44,7,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,501,"                    minuteOfDay = f;
",4,0,0,0,0,0,0,0,0,5,16,8,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,503,"                if (isSupported(f = chrono.hourOfDay())) {
",2,0,0,3,7,0,6,0,0,9,42,7,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,504,"                    hourOfDay = f;
",4,0,0,0,0,0,0,0,0,5,14,8,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,506,"                if (isSupported(f = chrono.clockhourOfDay())) {
",2,0,0,3,7,0,6,0,0,9,47,7,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,507,"                    clockhourOfDay = f;
",4,0,0,0,0,0,0,0,0,5,19,8,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,509,"                if (isSupported(f = chrono.hourOfHalfday())) {
",2,0,0,3,7,0,6,0,0,9,46,7,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,510,"                    hourOfHalfday = f;
",4,0,0,0,0,0,0,0,0,5,18,8,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,512,"                if (isSupported(f = chrono.clockhourOfHalfday())) {
",2,0,0,3,7,0,6,0,0,9,51,7,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,513,"                    clockhourOfHalfday = f;
",4,0,0,0,0,0,0,0,0,5,23,8,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,515,"                if (isSupported(f = chrono.halfdayOfDay())) {
",2,0,0,3,7,0,6,0,0,9,45,7,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,516,"                    halfdayOfDay = f;
",4,0,0,0,0,0,0,0,0,5,17,8,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,518,"                if (isSupported(f = chrono.dayOfWeek())) {
",2,0,0,3,7,0,6,0,0,9,42,7,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,519,"                    dayOfWeek = f;
",4,0,0,0,0,0,0,0,0,5,14,8,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,521,"                if (isSupported(f = chrono.dayOfMonth())) {
",2,0,0,3,7,0,6,0,0,9,43,7,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,522,"                    dayOfMonth = f;
",4,0,0,0,0,0,0,0,0,5,15,8,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,524,"                if (isSupported(f = chrono.dayOfYear())) {
",2,0,0,3,7,0,6,0,0,9,42,7,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,525,"                    dayOfYear = f;
",4,0,0,0,0,0,0,0,0,5,14,8,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,527,"                if (isSupported(f = chrono.weekOfWeekyear())) {
",2,0,0,3,7,0,6,0,0,9,47,7,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,528,"                    weekOfWeekyear = f;
",4,0,0,0,0,0,0,0,0,5,19,8,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,530,"                if (isSupported(f = chrono.weekyear())) {
",2,0,0,3,7,0,6,0,0,9,41,7,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,531,"                    weekyear = f;
",4,0,0,0,0,0,0,0,0,5,13,8,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,533,"                if (isSupported(f = chrono.weekyearOfCentury())) {
",2,0,0,3,7,0,6,0,0,9,50,7,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,534,"                    weekyearOfCentury = f;
",4,0,0,0,0,0,0,0,0,5,22,8,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,536,"                if (isSupported(f = chrono.monthOfYear())) {
",2,0,0,3,7,0,6,0,0,9,44,7,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,537,"                    monthOfYear = f;
",4,0,0,0,0,0,0,0,0,5,16,8,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,539,"                if (isSupported(f = chrono.year())) {
",2,0,0,3,7,0,6,0,0,9,37,7,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,540,"                    year = f;
",4,0,0,0,0,0,0,0,0,5,9,8,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,542,"                if (isSupported(f = chrono.yearOfEra())) {
",2,0,0,3,7,0,6,0,0,9,42,7,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,543,"                    yearOfEra = f;
",4,0,0,0,0,0,0,0,0,5,14,8,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,545,"                if (isSupported(f = chrono.yearOfCentury())) {
",2,0,0,3,7,0,6,0,0,9,46,7,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,546,"                    yearOfCentury = f;
",4,0,0,0,0,0,0,0,0,5,18,8,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,548,"                if (isSupported(f = chrono.centuryOfEra())) {
",2,0,0,3,7,0,6,0,0,9,45,7,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,549,"                    centuryOfEra = f;
",4,0,0,0,0,0,0,0,0,5,17,8,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,551,"                if (isSupported(f = chrono.era())) {
",2,0,0,3,7,0,6,0,0,9,36,7,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,552,"                    era = f;
",4,0,0,0,0,0,0,0,0,5,8,8,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,555,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,558,"            return field == null ? false : field.isSupported();
",2,1,0,1,2,1,4,0,0,8,51,6,0.01945,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,562,"            return field == null ? false : field.isSupported();
",2,1,0,1,2,1,4,0,0,8,51,6,0.01945,0
defect4j,time,org/joda/time/DateTimeZone,14,147,"                        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01944,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,14,53,"            field = cCache.get(type);
",2,0,0,1,2,0,6,0,0,9,25,6,0.01944,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,268,"        return iYear;
",2,0,0,0,0,1,0,0,0,2,13,4,0.01944,0
defect4j,time,org/joda/time/DateTimeZone,14,133,"        DateTimeZone zone = cDefault;
",4,0,0,0,0,0,0,2,0,6,29,4,0.01944,0
defect4j,time,org/joda/time/DateTimeZone,14,134,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.01944,0
defect4j,time,org/joda/time/DateTimeZone,14,135,"            synchronized(DateTimeZone.class) {
",0,0,0,1,3,0,0,2,0,2,34,8,0.01944,0
defect4j,time,org/joda/time/DateTimeZone,14,136,"                zone = cDefault;
",4,0,0,0,0,0,0,0,0,5,16,8,0.01944,0
defect4j,time,org/joda/time/DateTimeZone,14,137,"                if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,8,0.01944,0
defect4j,time,org/joda/time/DateTimeZone,14,138,"                    DateTimeZone temp = null;
",2,0,0,0,0,0,0,2,0,4,25,10,0.01944,0
defect4j,time,org/joda/time/DateTimeZone,14,141,"                            String id = System.getProperty(""user.timezone"");
",2,0,0,1,2,0,4,2,0,9,48,14,0.01944,0
defect4j,time,org/joda/time/DateTimeZone,14,142,"                            if (id != null) {  // null check avoids stack overflow
",2,1,0,1,3,0,0,0,0,3,54,14,0.01944,0
defect4j,time,org/joda/time/DateTimeZone,14,143,"                                temp = forID(id);
",2,0,0,1,2,0,4,0,0,7,17,16,0.01944,0
defect4j,time,org/joda/time/DateTimeZone,14,148,"                        if (temp == null) {
",2,1,0,1,3,0,0,0,0,3,19,12,0.01944,0
defect4j,time,org/joda/time/DateTimeZone,14,153,"                    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01944,0
defect4j,time,org/joda/time/DateTimeZone,14,154,"                    if (temp == null) {
",2,1,0,1,3,0,0,0,0,3,19,10,0.01944,0
defect4j,time,org/joda/time/DateTimeZone,14,157,"                    cDefault = zone = temp;
",6,0,0,0,0,0,0,0,0,8,23,10,0.01944,0
defect4j,time,org/joda/time/DateTimeZone,14,159,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01944,0
defect4j,time,org/joda/time/DateTimeZone,14,161,"        return zone;
",2,0,0,0,0,1,0,0,0,2,12,4,0.01944,0
defect4j,time,org/joda/time/DateTimeFieldType,14,164,"        return MILLIS_OF_SECOND_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,4,0.01943,0
defect4j,time,org/joda/time/DateTimeFieldType,14,173,"        return MILLIS_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,4,0.01943,0
defect4j,time,org/joda/time/DateTimeFieldType,14,209,"        return MINUTE_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,4,0.01943,0
defect4j,time,org/joda/time/DateTimeFieldType,14,218,"        return HOUR_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,4,0.01943,0
defect4j,time,org/joda/time/DateTimeFieldType,14,236,"        return HOUR_OF_HALFDAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,28,4,0.01943,0
defect4j,time,org/joda/time/DateTimeFieldType,14,245,"        return CLOCKHOUR_OF_HALFDAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,33,4,0.01943,0
defect4j,time,org/joda/time/DateTimeFieldType,14,254,"        return HALFDAY_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,27,4,0.01943,0
defect4j,time,org/joda/time/DateTimeFieldType,14,264,"        return DAY_OF_WEEK_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,4,0.01943,0
defect4j,time,org/joda/time/DateTimeFieldType,14,282,"        return DAY_OF_YEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,4,0.01943,0
defect4j,time,org/joda/time/DateTimeFieldType,14,291,"        return WEEK_OF_WEEKYEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,4,0.01943,0
defect4j,time,org/joda/time/DateTimeFieldType,14,300,"        return WEEKYEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,21,4,0.01943,0
defect4j,time,org/joda/time/DateTimeFieldType,14,309,"        return WEEKYEAR_OF_CENTURY_TYPE;
",2,0,0,0,0,1,0,0,0,2,32,4,0.01943,0
defect4j,time,org/joda/time/DateTimeFieldType,14,318,"        return MONTH_OF_YEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,4,0.01943,0
defect4j,time,org/joda/time/DateTimeFieldType,14,336,"        return YEAR_OF_ERA_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,4,0.01943,0
defect4j,time,org/joda/time/DateTimeFieldType,14,345,"        return YEAR_OF_CENTURY_TYPE;
",2,0,0,0,0,1,0,0,0,2,28,4,0.01943,0
defect4j,time,org/joda/time/DateTimeFieldType,14,354,"        return CENTURY_OF_ERA_TYPE;
",2,0,0,0,0,1,0,0,0,2,27,4,0.01943,0
defect4j,time,org/joda/time/DateTimeFieldType,14,363,"        return ERA_TYPE;
",2,0,0,0,0,1,0,0,0,2,16,4,0.01943,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,56,"        super(field, type);
",4,0,0,1,2,0,0,0,0,4,19,4,0.01943,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,58,"        if (divisor < 2) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.01943,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,62,"        DurationField unitField = field.getDurationField();
",2,0,0,1,2,0,4,2,0,8,51,4,0.01943,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,63,"        if (unitField == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.01943,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,66,"            iDurationField = new ScaledDurationField(
",2,0,0,0,1,0,0,2,0,5,41,6,0.01943,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,70,"        iDivisor = divisor;
",4,0,0,0,0,0,0,0,0,5,19,4,0.01943,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,72,"        int i = field.getMinimumValue();
",2,0,0,1,2,0,4,0,0,6,32,5,0.01943,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,73,"        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);
",12,5,0,3,6,0,0,0,0,17,59,5,0.01943,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,75,"        int j = field.getMaximumValue();
",2,0,0,1,2,0,4,0,0,6,32,5,0.01943,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,76,"        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);
",12,5,0,3,6,0,0,0,0,17,59,5,0.01943,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,78,"        iMin = min;
",4,0,0,0,0,0,0,0,0,5,11,4,0.01943,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,79,"        iMax = max;
",4,0,0,0,0,0,0,0,0,5,11,4,0.01943,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,80,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01943,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,182,"        return iDurationField;
",2,0,0,0,0,1,0,0,0,2,22,4,0.01943,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,14,54,"        super(type);
",2,0,0,1,2,0,0,0,0,2,12,4,0.01943,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,14,55,"        if (field == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.01943,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,14,58,"        if (!field.isSupported()) {
",0,0,0,2,5,0,4,0,0,5,27,4,0.01943,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,14,61,"        iField = field;
",4,0,0,0,0,0,0,0,0,5,15,4,0.01943,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,14,62,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01943,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,14,70,"        return iField;
",2,0,0,0,0,1,0,0,0,2,14,4,0.01943,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,14,86,"        return iField.getDurationField();
",0,0,0,1,2,1,4,0,0,4,33,5,0.01943,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,14,52,"        super(field, type);
",4,0,0,1,2,0,0,0,0,4,19,4,0.01943,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,14,54,"        if (divisor < 2) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.01943,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,14,58,"        DurationField rangeField = field.getDurationField();
",2,0,0,1,2,0,4,2,0,8,52,4,0.01943,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,14,59,"        if (rangeField == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.01943,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,14,62,"            iRangeField = new ScaledDurationField(
",2,0,0,0,1,0,0,2,0,5,38,6,0.01943,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,14,66,"        iDivisor = divisor;
",4,0,0,0,0,0,0,0,0,5,19,4,0.01943,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,14,67,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01943,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,14,76,"        this(dividedField, dividedField.getType());
",2,0,0,2,4,0,4,0,0,6,43,4,0.01943,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,14,77,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01943,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,14,87,"        super(dividedField.getWrappedField(), type);
",2,0,0,2,4,0,4,0,0,6,44,4,0.01943,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,14,88,"        iDivisor = dividedField.iDivisor;
",6,0,0,0,0,0,0,0,0,7,33,4,0.01943,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,14,89,"        iRangeField = dividedField.iDurationField;
",6,0,0,0,0,0,0,0,0,7,42,4,0.01943,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,14,90,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01943,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,14,148,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.01943,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,14,158,"        return iDivisor - 1;
",2,1,0,0,0,1,0,0,0,3,20,4,0.01943,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,14,55,"        super(type);
",2,0,0,1,2,0,0,0,0,2,12,4,0.01943,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,14,56,"        iUnitMillis = unitMillis;
",4,0,0,0,0,0,0,0,0,5,25,4,0.01943,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,14,57,"        iDurationField = new LinkedDurationField(type.getDurationType());
",2,0,0,2,4,0,4,2,0,9,65,4,0.01943,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,14,58,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01943,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,14,137,"        return iDurationField;
",2,0,0,0,0,1,0,0,0,2,22,4,0.01943,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,14,46,"        this(field, (field == null ? null : field.getType()), offset, Integer.MIN_VALUE, Integer.MAX_VALUE);
",14,1,0,3,6,0,4,0,0,19,100,4,0.01943,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,14,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01943,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,14,58,"        this(field, type, offset, Integer.MIN_VALUE, Integer.MAX_VALUE);
",14,0,0,1,2,0,0,0,0,14,64,4,0.01943,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,14,59,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01943,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,14,73,"        super(field, type);
",4,0,0,1,2,0,0,0,0,4,19,4,0.01943,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,14,75,"        if (offset == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.01943,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,14,79,"        iOffset = offset;
",4,0,0,0,0,0,0,0,0,5,17,4,0.01943,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,14,81,"        if (minValue < (field.getMinimumValue() + offset)) {
",4,2,0,3,7,0,4,0,0,10,52,4,0.01943,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,14,82,"            iMin = field.getMinimumValue() + offset;
",4,1,0,1,2,0,4,0,0,10,40,6,0.01943,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,14,86,"        if (maxValue > (field.getMaximumValue() + offset)) {
",4,2,0,3,7,0,4,0,0,10,52,4,0.01943,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,14,87,"            iMax = field.getMaximumValue() + offset;
",4,1,0,1,2,0,4,0,0,10,40,6,0.01943,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,14,91,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01943,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,14,174,"        return iMin;
",2,0,0,0,0,1,0,0,0,2,12,4,0.01943,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,14,183,"        return iMax;
",2,0,0,0,0,1,0,0,0,2,12,4,0.01943,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,14,151,"        LinkedDurationField(DurationFieldType type) {
",4,0,0,1,3,0,0,2,0,6,45,3,0.01943,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,14,152,"            super(type);
",2,0,0,1,2,0,0,0,0,2,12,5,0.01943,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,14,153,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01943,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,14,45,"        super(field, type);
",4,0,0,1,2,0,0,0,0,4,19,4,0.01943,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,14,46,"        if (field.getMinimumValue() != 0) {
",0,1,0,2,5,0,4,0,0,5,35,4,0.01943,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,14,49,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,99,"    protected AssembledChronology(Chronology base, Object param) {
",6,0,0,1,3,1,0,4,0,11,62,2,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,100,"        iBase = base;
",4,0,0,0,0,0,0,0,0,5,13,4,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,101,"        iParam = param;
",4,0,0,0,0,0,0,0,0,5,15,4,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,102,"        setFields();
",0,0,0,1,2,0,2,0,0,2,12,5,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,103,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,308,"        return iBase;
",2,0,0,0,0,1,0,0,0,2,13,4,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,319,"        Fields fields = new Fields();
",2,0,0,1,2,0,0,4,0,6,29,4,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,320,"        if (iBase != null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,323,"        assemble(fields);
",0,0,0,1,2,0,4,0,0,4,17,5,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,327,"            iMillis    = (f = fields.millis)    != null ? f : super.millis();
",12,1,0,2,4,0,0,0,0,15,65,5,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,328,"            iSeconds   = (f = fields.seconds)   != null ? f : super.seconds();
",12,1,0,2,4,0,0,0,0,15,66,5,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,329,"            iMinutes   = (f = fields.minutes)   != null ? f : super.minutes();
",12,1,0,2,4,0,0,0,0,15,66,5,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,330,"            iHours     = (f = fields.hours)     != null ? f : super.hours();
",12,1,0,2,4,0,0,0,0,15,64,5,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,331,"            iHalfdays  = (f = fields.halfdays)  != null ? f : super.halfdays();
",12,1,0,2,4,0,0,0,0,15,67,5,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,332,"            iDays      = (f = fields.days)      != null ? f : super.days();
",12,1,0,2,4,0,0,0,0,15,63,5,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,333,"            iWeeks     = (f = fields.weeks)     != null ? f : super.weeks();
",12,1,0,2,4,0,0,0,0,15,64,5,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,334,"            iWeekyears = (f = fields.weekyears) != null ? f : super.weekyears();
",12,1,0,2,4,0,0,0,0,15,68,5,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,335,"            iMonths    = (f = fields.months)    != null ? f : super.months();
",12,1,0,2,4,0,0,0,0,15,65,5,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,336,"            iYears     = (f = fields.years)     != null ? f : super.years();
",12,1,0,2,4,0,0,0,0,15,64,5,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,337,"            iCenturies = (f = fields.centuries) != null ? f : super.centuries();
",12,1,0,2,4,0,0,0,0,15,68,5,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,338,"            iEras      = (f = fields.eras)      != null ? f : super.eras();
",12,1,0,2,4,0,0,0,0,15,63,5,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,343,"            iMillisOfSecond     = (f = fields.millisOfSecond)     != null ? f : super.millisOfSecond();
",12,1,0,2,4,0,0,0,0,15,91,5,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,344,"            iMillisOfDay        = (f = fields.millisOfDay)        != null ? f : super.millisOfDay();
",12,1,0,2,4,0,0,0,0,15,88,5,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,345,"            iSecondOfMinute     = (f = fields.secondOfMinute)     != null ? f : super.secondOfMinute();
",12,1,0,2,4,0,0,0,0,15,91,5,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,346,"            iSecondOfDay        = (f = fields.secondOfDay)        != null ? f : super.secondOfDay();
",12,1,0,2,4,0,0,0,0,15,88,5,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,347,"            iMinuteOfHour       = (f = fields.minuteOfHour)       != null ? f : super.minuteOfHour();
",12,1,0,2,4,0,0,0,0,15,89,5,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,348,"            iMinuteOfDay        = (f = fields.minuteOfDay)        != null ? f : super.minuteOfDay();
",12,1,0,2,4,0,0,0,0,15,88,5,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,349,"            iHourOfDay          = (f = fields.hourOfDay)          != null ? f : super.hourOfDay();
",12,1,0,2,4,0,0,0,0,15,86,5,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,350,"            iClockhourOfDay     = (f = fields.clockhourOfDay)     != null ? f : super.clockhourOfDay();
",12,1,0,2,4,0,0,0,0,15,91,5,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,351,"            iHourOfHalfday      = (f = fields.hourOfHalfday)      != null ? f : super.hourOfHalfday();
",12,1,0,2,4,0,0,0,0,15,90,5,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,352,"            iClockhourOfHalfday = (f = fields.clockhourOfHalfday) != null ? f : super.clockhourOfHalfday();
",12,1,0,2,4,0,0,0,0,15,95,5,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,353,"            iHalfdayOfDay       = (f = fields.halfdayOfDay)       != null ? f : super.halfdayOfDay();
",12,1,0,2,4,0,0,0,0,15,89,5,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,354,"            iDayOfWeek          = (f = fields.dayOfWeek)          != null ? f : super.dayOfWeek();
",12,1,0,2,4,0,0,0,0,15,86,5,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,355,"            iDayOfMonth         = (f = fields.dayOfMonth)         != null ? f : super.dayOfMonth();
",12,1,0,2,4,0,0,0,0,15,87,5,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,356,"            iDayOfYear          = (f = fields.dayOfYear)          != null ? f : super.dayOfYear();
",12,1,0,2,4,0,0,0,0,15,86,5,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,357,"            iWeekOfWeekyear     = (f = fields.weekOfWeekyear)     != null ? f : super.weekOfWeekyear();
",12,1,0,2,4,0,0,0,0,15,91,5,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,358,"            iWeekyear           = (f = fields.weekyear)           != null ? f : super.weekyear();
",12,1,0,2,4,0,0,0,0,15,85,5,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,359,"            iWeekyearOfCentury  = (f = fields.weekyearOfCentury)  != null ? f : super.weekyearOfCentury();
",12,1,0,2,4,0,0,0,0,15,94,5,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,360,"            iMonthOfYear        = (f = fields.monthOfYear)        != null ? f : super.monthOfYear();
",12,1,0,2,4,0,0,0,0,15,88,5,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,361,"            iYear               = (f = fields.year)               != null ? f : super.year();
",12,1,0,2,4,0,0,0,0,15,81,5,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,362,"            iYearOfEra          = (f = fields.yearOfEra)          != null ? f : super.yearOfEra();
",12,1,0,2,4,0,0,0,0,15,86,5,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,363,"            iYearOfCentury      = (f = fields.yearOfCentury)      != null ? f : super.yearOfCentury();
",12,1,0,2,4,0,0,0,0,15,90,5,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,364,"            iCenturyOfEra       = (f = fields.centuryOfEra)       != null ? f : super.centuryOfEra();
",12,1,0,2,4,0,0,0,0,15,89,5,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,365,"            iEra                = (f = fields.era)                != null ? f : super.era();
",12,1,0,2,4,0,0,0,0,15,80,5,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,369,"        if (iBase == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,370,"            flags = 0;
",2,0,0,0,0,0,0,0,0,3,10,6,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,385,"        iBaseFlags = flags;
",4,0,0,0,0,0,0,0,0,5,19,4,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,386,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01943,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,660,"        return UnsupportedDurationField.getInstance(DurationFieldType.eras());
",0,0,0,2,4,1,8,0,0,8,70,5,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,436,"        Fields() {
",2,0,0,1,3,0,0,0,0,2,10,3,0.01943,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,437,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,131,"        super(base, param);
",4,0,0,1,2,0,0,0,0,4,19,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,126,"    private transient final YearInfo[] iYearInfoCache = new YearInfo[CACHE_SIZE];
",2,0,1,2,4,3,0,4,0,11,77,2,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,133,"        if (minDaysInFirstWeek < 1 || minDaysInFirstWeek > 7) {
",4,3,0,1,3,0,0,0,0,7,55,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,138,"        iMinDaysInFirstWeek = minDaysInFirstWeek;
",4,0,0,0,0,0,0,0,0,5,41,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,139,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,76,"        cMillisField = MillisDurationField.INSTANCE;
",6,0,0,0,0,0,0,0,0,7,44,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,77,"        cSecondsField = new PreciseDurationField
",2,0,0,0,0,0,0,2,0,5,40,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,79,"        cMinutesField = new PreciseDurationField
",2,0,0,0,0,0,0,2,0,5,40,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,81,"        cHoursField = new PreciseDurationField
",2,0,0,0,0,0,0,2,0,5,38,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,83,"        cHalfdaysField = new PreciseDurationField
",2,0,0,0,0,0,0,2,0,5,41,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,85,"        cDaysField = new PreciseDurationField
",2,0,0,0,0,0,0,2,0,5,37,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,87,"        cWeeksField = new PreciseDurationField
",2,0,0,0,0,0,0,2,0,5,38,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,90,"        cMillisOfSecondField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,47,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,93,"        cMillisOfDayField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,44,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,96,"        cSecondOfMinuteField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,47,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,99,"        cSecondOfDayField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,44,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,102,"        cMinuteOfHourField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,45,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,105,"        cMinuteOfDayField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,44,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,108,"        cHourOfDayField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,42,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,111,"        cHourOfHalfdayField = new PreciseDateTimeField
",2,0,0,0,0,0,0,2,0,5,46,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,114,"        cClockhourOfDayField = new ZeroIsMaxDateTimeField
",2,0,0,0,0,0,0,2,0,5,49,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,117,"        cClockhourOfHalfdayField = new ZeroIsMaxDateTimeField
",2,0,0,0,0,0,0,2,0,5,53,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,120,"        cHalfdayOfDayField = new HalfdayField();
",2,0,0,1,2,0,0,2,0,5,40,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,121,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,241,"        fields.millis = cMillisField;
",6,0,0,0,0,0,0,0,0,7,29,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,242,"        fields.seconds = cSecondsField;
",6,0,0,0,0,0,0,0,0,7,31,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,243,"        fields.minutes = cMinutesField;
",6,0,0,0,0,0,0,0,0,7,31,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,244,"        fields.hours = cHoursField;
",6,0,0,0,0,0,0,0,0,7,27,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,245,"        fields.halfdays = cHalfdaysField;
",6,0,0,0,0,0,0,0,0,7,33,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,246,"        fields.days = cDaysField;
",6,0,0,0,0,0,0,0,0,7,25,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,247,"        fields.weeks = cWeeksField;
",6,0,0,0,0,0,0,0,0,7,27,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,249,"        fields.millisOfSecond = cMillisOfSecondField;
",6,0,0,0,0,0,0,0,0,7,45,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,250,"        fields.millisOfDay = cMillisOfDayField;
",6,0,0,0,0,0,0,0,0,7,39,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,251,"        fields.secondOfMinute = cSecondOfMinuteField;
",6,0,0,0,0,0,0,0,0,7,45,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,252,"        fields.secondOfDay = cSecondOfDayField;
",6,0,0,0,0,0,0,0,0,7,39,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,253,"        fields.minuteOfHour = cMinuteOfHourField;
",6,0,0,0,0,0,0,0,0,7,41,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,254,"        fields.minuteOfDay = cMinuteOfDayField;
",6,0,0,0,0,0,0,0,0,7,39,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,255,"        fields.hourOfDay = cHourOfDayField;
",6,0,0,0,0,0,0,0,0,7,35,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,256,"        fields.hourOfHalfday = cHourOfHalfdayField;
",6,0,0,0,0,0,0,0,0,7,43,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,257,"        fields.clockhourOfDay = cClockhourOfDayField;
",6,0,0,0,0,0,0,0,0,7,45,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,258,"        fields.clockhourOfHalfday = cClockhourOfHalfdayField;
",6,0,0,0,0,0,0,0,0,7,53,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,259,"        fields.halfdayOfDay = cHalfdayOfDayField;
",6,0,0,0,0,0,0,0,0,7,41,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,264,"        fields.year = new BasicYearDateTimeField(this);
",4,0,0,1,2,0,0,2,0,7,47,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,265,"        fields.yearOfEra = new GJYearOfEraDateTimeField(fields.year, this);
",8,0,0,1,2,0,0,2,0,11,67,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,268,"        DateTimeField field = new OffsetDateTimeField(
",2,0,0,0,1,0,0,4,0,6,46,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,270,"        fields.centuryOfEra = new DividedDateTimeField(
",4,0,0,0,1,0,0,2,0,7,47,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,273,"        field = new RemainderDateTimeField(
",2,0,0,0,1,0,0,2,0,5,35,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,275,"        fields.yearOfCentury = new OffsetDateTimeField(
",4,0,0,0,1,0,0,2,0,7,47,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,278,"        fields.era = new GJEraDateTimeField(this);
",4,0,0,1,2,0,0,2,0,7,42,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,279,"        fields.dayOfWeek = new GJDayOfWeekDateTimeField(this, fields.days);
",8,0,0,1,2,0,0,2,0,11,67,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,280,"        fields.dayOfMonth = new BasicDayOfMonthDateTimeField(this, fields.days);
",8,0,0,1,2,0,0,2,0,11,72,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,281,"        fields.dayOfYear = new BasicDayOfYearDateTimeField(this, fields.days);
",8,0,0,1,2,0,0,2,0,11,70,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,282,"        fields.monthOfYear = new GJMonthOfYearDateTimeField(this);
",4,0,0,1,2,0,0,2,0,7,58,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,283,"        fields.weekyear = new BasicWeekyearDateTimeField(this);
",4,0,0,1,2,0,0,2,0,7,55,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,284,"        fields.weekOfWeekyear = new BasicWeekOfWeekyearDateTimeField(this, fields.weeks);
",8,0,0,1,2,0,0,2,0,11,81,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,286,"        field = new RemainderDateTimeField(
",2,0,0,0,1,0,0,2,0,5,35,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,288,"        fields.weekyearOfCentury = new OffsetDateTimeField(
",4,0,0,0,1,0,0,2,0,7,51,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,294,"        fields.years = fields.year.getDurationField();
",8,0,0,1,2,0,2,0,0,11,46,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,295,"        fields.centuries = fields.centuryOfEra.getDurationField();
",8,0,0,1,2,0,2,0,0,11,58,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,296,"        fields.months = fields.monthOfYear.getDurationField();
",8,0,0,1,2,0,2,0,0,11,54,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,297,"        fields.weekyears = fields.weekyear.getDurationField();
",8,0,0,1,2,0,2,0,0,11,54,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,298,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,50,"abstract class BasicChronology extends AssembledChronology {
",2,0,0,0,1,1,0,2,0,5,60,1,0.01943,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,14,40,"        super(yearField, DateTimeFieldType.yearOfEra());
",2,0,0,2,4,0,4,0,0,6,48,4,0.01943,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,14,41,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.01943,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,14,42,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01943,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,14,93,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.01943,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,14,97,"        return getWrappedField().getMaximumValue();
",0,0,0,2,4,1,4,0,0,4,43,5,0.01943,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,14,37,"        super(chronology, 2);
",2,0,0,1,2,0,0,0,0,2,21,4,0.01943,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,14,38,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01943,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,51,"        super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth());
",0,0,0,3,6,0,8,0,0,8,78,5,0.01943,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,52,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,53,"        iMax = iChronology.getMaxMonth();
",2,0,0,1,2,0,4,0,0,7,33,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,54,"        iLeapMonth = leapMonth;
",4,0,0,0,0,0,0,0,0,5,23,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,55,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01943,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,44,"        super(DateTimeFieldType.weekyear(), chronology.getAverageMillisPerYear());
",0,0,0,3,6,0,8,0,0,8,74,5,0.01943,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,45,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,46,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01943,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,14,46,"        super(DateTimeFieldType.era());
",0,0,0,2,4,0,4,0,0,4,31,5,0.01943,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,14,47,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.01943,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,14,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01943,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,41,"        super(DateTimeFieldType.dayOfMonth(), days);
",2,0,0,2,4,0,4,0,0,6,44,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,42,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,43,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,750,"            super(DateTimeFieldType.halfdayOfDay(), cHalfdaysField, cDaysField);
",4,0,0,2,4,0,4,0,0,8,68,5,0.01943,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,751,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01943,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,14,45,"        super(DateTimeFieldType.year(), chronology.getAverageMillisPerYear());
",0,0,0,3,6,0,8,0,0,8,70,5,0.01943,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,14,46,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,14,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01943,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,14,119,"        return iChronology.getMaxYear();
",0,0,0,1,2,1,4,0,0,4,32,5,0.01943,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,14,45,"        super(DateTimeFieldType.dayOfWeek(), days);
",2,0,0,2,4,0,4,0,0,6,43,4,0.01943,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,14,46,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.01943,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,14,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01943,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,14,41,"        super(DateTimeFieldType.dayOfYear(), days);
",2,0,0,2,4,0,4,0,0,6,43,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,14,42,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,14,43,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01943,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,14,42,"        super(DateTimeFieldType.weekOfWeekyear(), weeks);
",2,0,0,2,4,0,4,0,0,6,49,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,14,43,"        iChronology = chronology;
",4,0,0,0,0,0,0,0,0,5,25,4,0.01943,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,14,44,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01943,0
defect4j,time,org/joda/time/DateTimeFieldType,14,452,"            return iUnitType;
",2,0,0,0,0,1,0,0,0,2,17,5,0.01943,0
defect4j,time,org/joda/time/DateTimeFieldType,14,457,"            return iRangeType;
",2,0,0,0,0,1,0,0,0,2,18,5,0.01943,0
defect4j,time,org/joda/time/DateTimeFieldType,14,227,"        return CLOCKHOUR_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,4,0.01942,0
defect4j,time,org/joda/time/DateTimeFieldType,14,273,"        return DAY_OF_MONTH_TYPE;
",2,0,0,0,0,1,0,0,0,2,25,4,0.01942,0
defect4j,time,org/joda/time/DateTimeFieldType,14,327,"        return YEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,17,4,0.01942,0
defect4j,time,org/joda/time/field/PreciseDurationField,14,54,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.01942,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,14,70,"    private UnsupportedDurationField(DurationFieldType type) {
",4,0,0,1,3,1,0,2,0,7,58,2,0.01942,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,14,71,"        iType = type;
",4,0,0,0,0,0,0,0,0,5,13,4,0.01942,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,14,72,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01942,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,14,49,"        if (cCache == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.01942,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,14,50,"            cCache = new HashMap<DurationFieldType, UnsupportedDurationField>(7);
",2,0,0,1,2,0,0,6,0,9,69,6,0.01942,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,14,51,"            field = null;
",2,0,0,0,0,0,0,0,0,3,13,6,0.01942,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,14,55,"        if (field == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.01942,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,14,56,"            field = new UnsupportedDurationField(type);
",4,0,0,1,2,0,0,2,0,7,43,6,0.01942,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,14,57,"            cCache.put(type, field);
",0,0,0,1,2,0,8,0,0,8,24,7,0.01942,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,14,59,"        return field;
",2,0,0,0,0,1,0,0,0,2,13,4,0.01942,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,14,102,"        return getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;
",4,4,0,2,4,1,4,0,0,12,68,4,0.01942,0
defect4j,time,org/joda/time/DateTimeFieldType,14,200,"        return MINUTE_OF_HOUR_TYPE;
",2,0,0,0,0,1,0,0,0,2,27,4,0.01942,0
defect4j,time,org/joda/time/field/BaseDurationField,14,66,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.01942,0
defect4j,time,org/joda/time/field/MillisDurationField,14,71,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.01942,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,69,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.01941,0
defect4j,time,org/joda/time/field/MillisDurationField,14,80,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.01941,0
defect4j,time,org/joda/time/field/PreciseDurationField,14,63,"        return iUnitMillis;
",2,0,0,0,0,1,0,0,0,2,19,4,0.01940,0
defect4j,time,org/joda/time/DateTimeFieldType,14,191,"        return SECOND_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,4,0.01939,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,58,"        return iType;
",2,0,0,0,0,1,0,0,0,2,13,4,0.01939,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,14,150,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.01936,0
defect4j,time,org/joda/time/Chronology,14,63,"public abstract class Chronology {
",2,0,0,0,1,2,0,0,0,4,34,1,0.01935,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,54,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.01935,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,55,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01935,0
defect4j,time,org/joda/time/field/MillisDurationField,14,62,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.01932,0
defect4j,time,org/joda/time/field/PreciseDurationField,14,43,"        super(type);
",2,0,0,1,2,0,0,0,0,2,12,4,0.01931,0
defect4j,time,org/joda/time/field/PreciseDurationField,14,44,"        iUnitMillis = unitMillis;
",4,0,0,0,0,0,0,0,0,5,25,4,0.01931,0
defect4j,time,org/joda/time/field/PreciseDurationField,14,45,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01931,0
defect4j,time,org/joda/time/field/ScaledDurationField,14,47,"        super(field, type);
",4,0,0,1,2,0,0,0,0,4,19,4,0.01931,0
defect4j,time,org/joda/time/field/ScaledDurationField,14,48,"        if (scalar == 0 || scalar == 1) {
",4,3,0,1,3,0,0,0,0,7,33,4,0.01931,0
defect4j,time,org/joda/time/field/ScaledDurationField,14,51,"        iScalar = scalar;
",4,0,0,0,0,0,0,0,0,5,17,4,0.01931,0
defect4j,time,org/joda/time/field/ScaledDurationField,14,52,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01931,0
defect4j,time,org/joda/time/field/DecoratedDurationField,14,52,"        super(type);
",2,0,0,1,2,0,0,0,0,2,12,4,0.01931,0
defect4j,time,org/joda/time/field/DecoratedDurationField,14,53,"        if (field == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.01931,0
defect4j,time,org/joda/time/field/DecoratedDurationField,14,56,"        if (!field.isSupported()) {
",0,0,0,2,5,0,4,0,0,5,27,4,0.01931,0
defect4j,time,org/joda/time/field/DecoratedDurationField,14,59,"        iField = field;
",4,0,0,0,0,0,0,0,0,5,15,4,0.01931,0
defect4j,time,org/joda/time/field/DecoratedDurationField,14,60,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01931,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,14,57,"        super(type, unit);
",4,0,0,1,2,0,0,0,0,4,18,4,0.01924,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,14,59,"        if (!range.isPrecise()) {
",0,0,0,2,5,0,4,0,0,5,25,4,0.01924,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,14,63,"        long rangeMillis = range.getUnitMillis();
",2,0,0,1,2,0,4,0,0,6,41,5,0.01924,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,14,64,"        iRange = (int)(rangeMillis / getUnitMillis());
",4,1,0,3,6,0,2,0,0,8,46,4,0.01924,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,14,65,"        if (iRange < 2) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.01924,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,14,69,"        iRangeField = range;
",4,0,0,0,0,0,0,0,0,5,20,4,0.01924,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,14,70,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01924,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,14,154,"        return iUnitMillis;
",2,0,0,0,0,1,0,0,0,2,19,4,0.01924,0
defect4j,time,org/joda/time/DurationFieldType,14,278,"            return (1 << iOrdinal);
",2,1,0,1,2,1,0,0,0,3,23,6,0.01923,0
defect4j,time,org/joda/time/field/MillisDurationField,14,44,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.01920,0
defect4j,time,org/joda/time/field/MillisDurationField,14,45,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01920,0
defect4j,time,org/joda/time/field/MillisDurationField,14,38,"    public static final DurationField INSTANCE = new MillisDurationField();
",2,0,0,1,2,3,0,4,0,9,71,2,0.01920,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,14,48,"        super(type);
",2,0,0,1,2,0,0,0,0,2,12,4,0.01902,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,14,50,"        if (!unit.isPrecise()) {
",0,0,0,2,5,0,4,0,0,5,24,4,0.01902,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,14,54,"        iUnitMillis = unit.getUnitMillis();
",2,0,0,1,2,0,4,0,0,7,35,4,0.01902,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,14,55,"        if (iUnitMillis < 1) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.01902,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,14,59,"        iUnitField = unit;
",4,0,0,0,0,0,0,0,0,5,18,4,0.01902,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,14,60,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01902,0
defect4j,time,org/joda/time/DateTimeUtils,14,35,"    private static final SystemMillisProvider SYSTEM_MILLIS_PROVIDER = new SystemMillisProvider();
",2,0,0,1,2,3,0,4,0,9,94,2,0.01897,0
defect4j,time,org/joda/time/DateTimeUtils,14,37,"    private static volatile MillisProvider cMillisProvider = SYSTEM_MILLIS_PROVIDER;
",4,0,0,0,0,3,0,2,0,9,80,2,0.01897,0
defect4j,time,org/joda/time/DateTimeUtils,14,393,"    static class SystemMillisProvider implements MillisProvider {
",2,0,0,0,1,1,0,2,0,5,61,2,0.01897,0
defect4j,time,org/joda/time/base/AbstractPartial,14,170,"        for (int i = 0, isize = size(); i < isize; i++) {
",10,1,0,2,5,0,2,0,0,14,49,4,0.01887,0
defect4j,time,org/joda/time/base/AbstractPartial,14,171,"            if (getFieldType(i) == type) {
",2,1,0,2,5,0,4,0,0,7,30,6,0.01887,0
defect4j,time,org/joda/time/DateTimeFieldType,14,182,"        return SECOND_OF_MINUTE_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,4,0.01886,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,50,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.01882,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,51,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.01882,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,54,"        iType = type;
",4,0,0,0,0,0,0,0,0,5,13,4,0.01882,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,55,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01882,0
defect4j,time,org/joda/time/DateTimeField,14,33,"public abstract class DateTimeField {
",2,0,0,0,1,2,0,0,0,4,37,1,0.01882,0
defect4j,time,org/joda/time/DateTimeFieldType,14,153,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.01881,0
defect4j,time,org/joda/time/DateTimeFieldType,14,154,"        iName = name;
",4,0,0,0,0,0,0,0,0,5,13,4,0.01881,0
defect4j,time,org/joda/time/DateTimeFieldType,14,155,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01881,0
defect4j,time,org/joda/time/DateTimeFieldType,14,73,"    private static final DateTimeFieldType ERA_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,80,2,0.01881,0
defect4j,time,org/joda/time/DateTimeFieldType,14,76,"    private static final DateTimeFieldType YEAR_OF_ERA_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,88,2,0.01881,0
defect4j,time,org/joda/time/DateTimeFieldType,14,79,"    private static final DateTimeFieldType CENTURY_OF_ERA_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,91,2,0.01881,0
defect4j,time,org/joda/time/DateTimeFieldType,14,82,"    private static final DateTimeFieldType YEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,92,2,0.01881,0
defect4j,time,org/joda/time/DateTimeFieldType,14,85,"    private static final DateTimeFieldType YEAR_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,81,2,0.01881,0
defect4j,time,org/joda/time/DateTimeFieldType,14,88,"    private static final DateTimeFieldType DAY_OF_YEAR_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,88,2,0.01881,0
defect4j,time,org/joda/time/DateTimeFieldType,14,91,"    private static final DateTimeFieldType MONTH_OF_YEAR_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,90,2,0.01881,0
defect4j,time,org/joda/time/DateTimeFieldType,14,94,"    private static final DateTimeFieldType DAY_OF_MONTH_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,89,2,0.01881,0
defect4j,time,org/joda/time/DateTimeFieldType,14,97,"    private static final DateTimeFieldType WEEKYEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,96,2,0.01881,0
defect4j,time,org/joda/time/DateTimeFieldType,14,100,"    private static final DateTimeFieldType WEEKYEAR_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,85,2,0.01881,0
defect4j,time,org/joda/time/DateTimeFieldType,14,103,"    private static final DateTimeFieldType WEEK_OF_WEEKYEAR_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,93,2,0.01881,0
defect4j,time,org/joda/time/DateTimeFieldType,14,106,"    private static final DateTimeFieldType DAY_OF_WEEK_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,88,2,0.01881,0
defect4j,time,org/joda/time/DateTimeFieldType,14,110,"    private static final DateTimeFieldType HALFDAY_OF_DAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,91,2,0.01881,0
defect4j,time,org/joda/time/DateTimeFieldType,14,113,"    private static final DateTimeFieldType HOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,92,2,0.01881,0
defect4j,time,org/joda/time/DateTimeFieldType,14,116,"    private static final DateTimeFieldType CLOCKHOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,97,2,0.01881,0
defect4j,time,org/joda/time/DateTimeFieldType,14,119,"    private static final DateTimeFieldType CLOCKHOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,93,2,0.01881,0
defect4j,time,org/joda/time/DateTimeFieldType,14,122,"    private static final DateTimeFieldType HOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,88,2,0.01881,0
defect4j,time,org/joda/time/DateTimeFieldType,14,125,"    private static final DateTimeFieldType MINUTE_OF_DAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,90,2,0.01881,0
defect4j,time,org/joda/time/DateTimeFieldType,14,128,"    private static final DateTimeFieldType MINUTE_OF_HOUR_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,91,2,0.01881,0
defect4j,time,org/joda/time/DateTimeFieldType,14,131,"    private static final DateTimeFieldType SECOND_OF_DAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,90,2,0.01881,0
defect4j,time,org/joda/time/DateTimeFieldType,14,134,"    private static final DateTimeFieldType SECOND_OF_MINUTE_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,93,2,0.01881,0
defect4j,time,org/joda/time/DateTimeFieldType,14,137,"    private static final DateTimeFieldType MILLIS_OF_DAY_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,90,2,0.01881,0
defect4j,time,org/joda/time/DateTimeFieldType,14,140,"    private static final DateTimeFieldType MILLIS_OF_SECOND_TYPE = new StandardDateTimeFieldType(
",2,0,0,0,1,3,0,4,0,9,93,2,0.01881,0
defect4j,time,org/joda/time/DurationFieldType,14,141,"        return HALFDAYS_TYPE;
",2,0,0,0,0,1,0,0,0,2,21,4,0.01881,0
defect4j,time,org/joda/time/DurationFieldType,14,169,"        return WEEKYEARS_TYPE;
",2,0,0,0,0,1,0,0,0,2,22,4,0.01881,0
defect4j,time,org/joda/time/DurationFieldType,14,205,"        return ERAS_TYPE;
",2,0,0,0,0,1,0,0,0,2,17,4,0.01881,0
defect4j,time,org/joda/time/DateTimeFieldType,14,444,"            super(name);
",2,0,0,1,2,0,0,0,0,2,12,5,0.01881,0
defect4j,time,org/joda/time/DateTimeFieldType,14,445,"            iOrdinal = ordinal;
",4,0,0,0,0,0,0,0,0,5,19,5,0.01881,0
defect4j,time,org/joda/time/DateTimeFieldType,14,446,"            iUnitType = unitType;
",4,0,0,0,0,0,0,0,0,5,21,5,0.01881,0
defect4j,time,org/joda/time/DateTimeFieldType,14,447,"            iRangeType = rangeType;
",4,0,0,0,0,0,0,0,0,5,23,5,0.01881,0
defect4j,time,org/joda/time/DateTimeFieldType,14,448,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01881,0
defect4j,time,org/joda/time/DurationFieldType,14,196,"        return CENTURIES_TYPE;
",2,0,0,0,0,1,0,0,0,2,22,4,0.01880,0
defect4j,time,org/joda/time/field/BaseDurationField,14,47,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.01875,0
defect4j,time,org/joda/time/field/BaseDurationField,14,48,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.01875,0
defect4j,time,org/joda/time/field/BaseDurationField,14,51,"        iType = type;
",4,0,0,0,0,0,0,0,0,5,13,4,0.01875,0
defect4j,time,org/joda/time/field/BaseDurationField,14,52,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01875,0
defect4j,time,org/joda/time/DurationField,14,30,"public abstract class DurationField implements Comparable<DurationField> {
",2,0,0,0,1,2,0,4,0,8,74,1,0.01864,0
defect4j,time,org/joda/time/DurationFieldType,14,105,"        return MILLIS_TYPE;
",2,0,0,0,0,1,0,0,0,2,19,4,0.01839,0
defect4j,time,org/joda/time/DurationFieldType,14,178,"        return MONTHS_TYPE;
",2,0,0,0,0,1,0,0,0,2,19,4,0.01835,0
defect4j,time,org/joda/time/DurationFieldType,14,187,"        return YEARS_TYPE;
",2,0,0,0,0,1,0,0,0,2,18,4,0.01834,0
defect4j,time,org/joda/time/DurationFieldType,14,160,"        return WEEKS_TYPE;
",2,0,0,0,0,1,0,0,0,2,18,4,0.01832,0
defect4j,time,org/joda/time/DurationFieldType,14,132,"        return HOURS_TYPE;
",2,0,0,0,0,1,0,0,0,2,18,4,0.01827,0
defect4j,time,org/joda/time/DurationFieldType,14,151,"        return DAYS_TYPE;
",2,0,0,0,0,1,0,0,0,2,17,4,0.01825,0
defect4j,time,org/joda/time/DurationFieldType,14,114,"        return SECONDS_TYPE;
",2,0,0,0,0,1,0,0,0,2,20,4,0.01817,0
defect4j,time,org/joda/time/DurationFieldType,14,123,"        return MINUTES_TYPE;
",2,0,0,0,0,1,0,0,0,2,20,4,0.01816,0
defect4j,time,org/joda/time/DateTimeZone,14,212,"            return zone;
",2,0,0,0,0,1,0,0,0,2,12,6,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1176,"            super(id);
",2,0,0,1,2,0,0,0,0,2,10,5,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1177,"            iStandardOffset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,33,5,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1178,"            iStartRecurrence = startRecurrence;
",4,0,0,0,0,0,0,0,0,5,35,5,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1179,"            iEndRecurrence = endRecurrence;
",4,0,0,0,0,0,0,0,0,5,31,5,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1180,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1166,"            return new DSTZone(id, (int)readMillis(in), 
",2,0,0,2,5,1,4,2,0,8,43,6,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,504,"        {
",0,0,0,0,1,0,0,0,0,0,1,3,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,505,"            if (mode != 'u' && mode != 'w' && mode != 's') {
",6,5,0,1,3,0,0,0,0,14,48,5,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,509,"            iMode = mode;
",4,0,0,0,0,0,0,0,0,5,13,5,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,510,"            iMonthOfYear = monthOfYear;
",4,0,0,0,0,0,0,0,0,5,27,5,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,511,"            iDayOfMonth = dayOfMonth;
",4,0,0,0,0,0,0,0,0,5,25,5,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,512,"            iDayOfWeek = dayOfWeek;
",4,0,0,0,0,0,0,0,0,5,23,5,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,513,"            iAdvance = advanceDayOfWeek;
",4,0,0,0,0,0,0,0,0,5,28,5,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,514,"            iMillisOfDay = millisOfDay;
",4,0,0,0,0,0,0,0,0,5,27,5,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,515,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,482,"            return new OfYear((char)in.readUnsignedByte(),
",0,0,0,2,5,1,4,2,0,6,46,6,0.01785,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,87,"        super(zone.getID());
",0,0,0,2,4,0,4,0,0,4,20,5,0.01785,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,84,"    private final Info[] iInfoCache = new Info[cInfoCacheMask + 1];
",4,1,0,2,4,2,0,4,0,11,63,2,0.01785,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,88,"        iZone = zone;
",4,0,0,0,0,0,0,0,0,5,13,4,0.01785,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,89,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01785,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,39,"            i = Integer.getInteger(""org.joda.time.tz.CachedDateTimeZone.size"");
",2,0,0,1,2,0,4,0,0,8,67,6,0.01785,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,42,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01785,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,45,"        if (i == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.01785,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,48,"            cacheSize = 512; // (1 << 9)
",2,0,0,1,2,0,0,0,0,3,28,6,0.01785,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,61,"        cInfoCacheMask = cacheSize - 1;
",4,1,0,0,0,0,0,0,0,6,31,4,0.01785,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,62,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01785,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,68,"        if (zone instanceof CachedDateTimeZone) {
",2,0,0,1,3,0,0,2,0,4,41,5,0.01785,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,71,"        return new CachedDateTimeZone(zone);
",2,0,0,1,2,1,0,2,0,4,36,5,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,95,"        if (in instanceof DataInput) {
",2,0,0,1,3,0,0,2,0,4,30,5,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,98,"            return readFrom((DataInput)new DataInputStream(in), id);
",2,0,0,3,6,1,4,4,0,10,56,7,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,110,"        switch (in.readUnsignedByte()) {
",0,0,0,2,5,0,4,0,0,4,32,5,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,119,"            return CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in, id));
",0,0,0,2,4,1,12,0,0,12,70,6,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,183,"        int v = in.readUnsignedByte();
",2,0,0,1,2,0,4,0,0,6,30,5,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,184,"        switch (v >> 6) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,187,"            v = (v << (32 - 6)) >> (32 - 6);
",4,4,0,3,6,0,0,0,0,9,32,5,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,188,"            return v * (30 * 60000L);
",2,2,0,1,2,1,0,0,0,4,25,5,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,192,"            v = (v << (32 - 6)) >> (32 - 30);
",4,4,0,3,6,0,0,0,0,9,33,5,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,193,"            v |= (in.readUnsignedByte()) << 16;
",2,1,0,2,4,0,4,0,0,8,35,5,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,194,"            v |= (in.readUnsignedByte()) << 8;
",2,1,0,2,4,0,4,0,0,8,34,5,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,195,"            v |= (in.readUnsignedByte());
",2,0,0,2,4,0,4,0,0,7,29,5,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,196,"            return v * 60000L;
",2,1,0,0,0,1,0,0,0,3,18,5,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,200,"            long w = (((long)v) << (64 - 6)) >> (64 - 38);
",4,4,0,5,10,0,0,0,0,8,46,6,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,201,"            w |= (in.readUnsignedByte()) << 24;
",2,1,0,2,4,0,4,0,0,8,35,5,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,202,"            w |= (in.readUnsignedByte()) << 16;
",2,1,0,2,4,0,4,0,0,8,35,5,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,203,"            w |= (in.readUnsignedByte()) << 8;
",2,1,0,2,4,0,4,0,0,8,34,5,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,204,"            w |= (in.readUnsignedByte());
",2,0,0,2,4,0,4,0,0,7,29,5,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,205,"            return w * 1000L;
",2,1,0,0,0,1,0,0,0,3,17,5,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,209,"            return in.readLong();
",0,0,0,1,2,1,4,0,0,4,21,6,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1500,"            super(id);
",2,0,0,1,2,0,0,0,0,2,10,5,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1501,"            iTransitions = transitions;
",4,0,0,0,0,0,0,0,0,5,27,5,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1502,"            iWallOffsets = wallOffsets;
",4,0,0,0,0,0,0,0,0,5,27,5,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1503,"            iStandardOffsets = standardOffsets;
",4,0,0,0,0,0,0,0,0,5,35,5,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1504,"            iNameKeys = nameKeys;
",4,0,0,0,0,0,0,0,0,5,21,5,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1505,"            iTailZone = tailZone;
",4,0,0,0,0,0,0,0,0,5,21,5,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1506,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1341,"            int poolSize = in.readUnsignedShort();
",2,0,0,1,2,0,4,0,0,6,38,6,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1342,"            String[] pool = new String[poolSize];
",2,0,1,2,4,0,0,4,0,8,37,5,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1343,"            for (int i=0; i<poolSize; i++) {
",8,1,0,1,3,0,0,0,0,10,32,5,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1344,"                pool[i] = in.readUTF();
",0,0,1,2,4,0,4,0,0,9,23,7,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1347,"            int size = in.readInt();
",2,0,0,1,2,0,4,0,0,6,24,6,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1348,"            long[] transitions = new long[size];
",2,0,1,2,4,0,0,0,0,4,36,6,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1349,"            int[] wallOffsets = new int[size];
",2,0,1,2,4,0,0,0,0,4,34,6,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1350,"            int[] standardOffsets = new int[size];
",2,0,1,2,4,0,0,0,0,4,38,6,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1351,"            String[] nameKeys = new String[size];
",2,0,1,2,4,0,0,4,0,8,37,5,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1353,"            for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,5,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1354,"                transitions[i] = readMillis(in);
",0,0,1,2,4,0,4,0,0,9,32,7,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1355,"                wallOffsets[i] = (int)readMillis(in);
",0,0,1,3,6,0,4,0,0,9,37,7,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1356,"                standardOffsets[i] = (int)readMillis(in);
",0,0,1,3,6,0,4,0,0,9,41,7,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1359,"                    if (poolSize < 256) {
",2,1,0,1,3,0,0,0,0,3,21,9,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1360,"                        index = in.readUnsignedByte();
",2,0,0,1,2,0,4,0,0,7,30,11,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1364,"                    nameKeys[i] = pool[index];
",0,0,1,2,4,0,0,0,0,9,26,9,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1367,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1370,"            DSTZone tailZone = null;
",2,0,0,0,0,0,0,2,0,4,24,5,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1371,"            if (in.readBoolean()) {
",0,0,0,2,5,0,4,0,0,4,23,6,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1372,"                tailZone = DSTZone.readFrom(in, id);
",2,0,0,1,2,0,8,0,0,11,36,7,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1375,"            return new PrecalculatedZone
",0,0,0,0,0,1,0,2,0,2,28,7,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,747,"        Recurrence(OfYear ofYear, String nameKey, int saveMillis) {
",8,0,0,1,3,0,0,4,0,12,59,3,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,748,"            iOfYear = ofYear;
",4,0,0,0,0,0,0,0,0,5,17,5,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,749,"            iNameKey = nameKey;
",4,0,0,0,0,0,0,0,0,5,19,5,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,750,"            iSaveMillis = saveMillis;
",4,0,0,0,0,0,0,0,0,5,25,5,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,751,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01785,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,740,"            return new Recurrence(OfYear.readFrom(in), in.readUTF(), (int)readMillis(in));
",0,0,0,5,10,1,14,2,0,16,78,6,0.01785,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,147,"            return loadZoneData(id);
",0,0,0,1,2,1,4,0,0,4,24,7,0.01785,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,224,"        InputStream in = null;
",2,0,0,0,0,0,0,2,0,4,22,4,0.01785,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,226,"            in = openResource(id);
",2,0,0,1,2,0,4,0,0,7,22,6,0.01785,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,227,"            DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);
",2,0,0,1,2,0,8,2,0,12,55,6,0.01785,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,228,"            iZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));
",2,0,0,2,4,0,6,4,0,12,58,7,0.01785,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,229,"            return tz;
",2,0,0,0,0,1,0,0,0,2,10,6,0.01785,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,236,"                if (in != null) {
",2,1,0,1,3,0,0,0,0,3,17,8,0.01785,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,237,"                    in.close();
",0,0,0,1,2,0,4,0,0,4,11,11,0.01785,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,240,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01785,0
defect4j,time,org/joda/time/DateTimeZone,14,204,"        if (id == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.01784,0
defect4j,time,org/joda/time/DateTimeZone,14,207,"        if (id.equals(""UTC"")) {
",0,0,0,2,5,0,4,0,0,5,23,5,0.01784,0
defect4j,time,org/joda/time/DateTimeZone,14,210,"        DateTimeZone zone = cProvider.getZone(id);
",2,0,0,1,2,0,6,2,0,10,42,4,0.01784,0
defect4j,time,org/joda/time/DateTimeZone,14,211,"        if (zone != null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.01784,0
defect4j,time,org/joda/time/DateTimeZone,14,706,"        return iID;
",2,0,0,0,0,1,0,0,0,2,11,4,0.01759,0
defect4j,time,org/joda/time/DateTimeZone,14,689,"    protected DateTimeZone(String id) {
",4,0,0,1,3,1,0,2,0,7,35,2,0.01759,0
defect4j,time,org/joda/time/DateTimeZone,14,690,"        if (id == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.01759,0
defect4j,time,org/joda/time/DateTimeZone,14,693,"        iID = id;
",4,0,0,0,0,0,0,0,0,5,9,4,0.01759,0
defect4j,time,org/joda/time/DateTimeZone,14,694,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01759,0
defect4j,time,org/joda/time/DateTimeZone,14,95,"    public static final DateTimeZone UTC = new FixedDateTimeZone(""UTC"", ""UTC"", 0, 0);
",2,0,0,1,2,3,0,4,0,11,81,2,0.01759,0
defect4j,time,org/joda/time/DateTimeZone,14,115,"        setProvider0(null);
",0,0,0,1,2,0,2,0,0,3,19,4,0.01759,0
defect4j,time,org/joda/time/DateTimeZone,14,116,"        setNameProvider0(null);
",0,0,0,1,2,0,2,0,0,3,23,4,0.01759,0
defect4j,time,org/joda/time/DateTimeZone,14,117,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01759,0
defect4j,time,org/joda/time/DateTimeZone,14,415,"        if (provider == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.01759,0
defect4j,time,org/joda/time/DateTimeZone,14,416,"            provider = getDefaultProvider();
",2,0,0,1,2,0,2,0,0,5,32,6,0.01759,0
defect4j,time,org/joda/time/DateTimeZone,14,418,"        Set<String> ids = provider.getAvailableIDs();
",2,0,0,1,2,0,4,4,0,10,45,4,0.01759,0
defect4j,time,org/joda/time/DateTimeZone,14,419,"        if (ids == null || ids.size() == 0) {
",2,3,0,2,5,0,4,0,0,9,37,4,0.01759,0
defect4j,time,org/joda/time/DateTimeZone,14,423,"        if (!ids.contains(""UTC"")) {
",0,0,0,2,5,0,4,0,0,6,27,4,0.01759,0
defect4j,time,org/joda/time/DateTimeZone,14,426,"        if (!UTC.equals(provider.getZone(""UTC""))) {
",0,0,0,3,7,0,8,0,0,10,43,4,0.01759,0
defect4j,time,org/joda/time/DateTimeZone,14,429,"        cProvider = provider;
",4,0,0,0,0,0,0,0,0,5,21,4,0.01759,0
defect4j,time,org/joda/time/DateTimeZone,14,430,"        cAvailableIDs = ids;
",4,0,0,0,0,0,0,0,0,5,20,4,0.01759,0
defect4j,time,org/joda/time/DateTimeZone,14,431,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01759,0
defect4j,time,org/joda/time/DateTimeZone,14,443,"        Provider provider = null;
",2,0,0,0,0,0,0,2,0,4,25,4,0.01759,0
defect4j,time,org/joda/time/DateTimeZone,14,446,"            String providerClass =
",2,0,0,0,0,0,0,2,0,4,22,6,0.01759,0
defect4j,time,org/joda/time/DateTimeZone,14,448,"            if (providerClass != null) {
",2,1,0,1,3,0,0,0,0,3,28,6,0.01759,0
defect4j,time,org/joda/time/DateTimeZone,14,458,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01759,0
defect4j,time,org/joda/time/DateTimeZone,14,460,"        if (provider == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.01759,0
defect4j,time,org/joda/time/DateTimeZone,14,462,"                provider = new ZoneInfoProvider(""org/joda/time/tz/data"");
",2,0,0,1,2,0,0,2,0,6,57,8,0.01759,0
defect4j,time,org/joda/time/DateTimeZone,14,466,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01759,0
defect4j,time,org/joda/time/DateTimeZone,14,469,"        if (provider == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.01759,0
defect4j,time,org/joda/time/DateTimeZone,14,473,"        return provider;
",2,0,0,0,0,1,0,0,0,2,16,4,0.01759,0
defect4j,time,org/joda/time/DateTimeZone,14,514,"        if (nameProvider == null) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.01759,0
defect4j,time,org/joda/time/DateTimeZone,14,515,"            nameProvider = getDefaultNameProvider();
",2,0,0,1,2,0,2,0,0,5,40,6,0.01759,0
defect4j,time,org/joda/time/DateTimeZone,14,517,"        cNameProvider = nameProvider;
",4,0,0,0,0,0,0,0,0,5,29,4,0.01759,0
defect4j,time,org/joda/time/DateTimeZone,14,518,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01759,0
defect4j,time,org/joda/time/DateTimeZone,14,529,"        NameProvider nameProvider = null;
",2,0,0,0,0,0,0,2,0,4,33,4,0.01759,0
defect4j,time,org/joda/time/DateTimeZone,14,531,"            String providerClass = System.getProperty(""org.joda.time.DateTimeZone.NameProvider"");
",2,0,0,1,2,0,4,2,0,9,85,6,0.01759,0
defect4j,time,org/joda/time/DateTimeZone,14,532,"            if (providerClass != null) {
",2,1,0,1,3,0,0,0,0,3,28,6,0.01759,0
defect4j,time,org/joda/time/DateTimeZone,14,542,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01759,0
defect4j,time,org/joda/time/DateTimeZone,14,544,"        if (nameProvider == null) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.01759,0
defect4j,time,org/joda/time/DateTimeZone,14,545,"            nameProvider = new DefaultNameProvider();
",2,0,0,1,2,0,0,2,0,5,41,6,0.01759,0
defect4j,time,org/joda/time/DateTimeZone,14,548,"        return nameProvider;
",2,0,0,0,0,1,0,0,0,2,20,4,0.01759,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,14,39,"    public DefaultNameProvider() {
",2,0,0,1,3,1,0,0,0,3,30,2,0.01759,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,14,37,"    private HashMap<Locale, Map<String, Map<String, Object>>> iByLocaleCache = createCache();
",2,0,0,1,2,1,2,14,0,19,89,2,0.01759,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,14,40,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01759,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,14,99,"        return new HashMap(7);
",0,0,0,1,2,1,0,2,0,2,22,6,0.01759,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,14,38,"        super(id);
",2,0,0,1,2,0,0,0,0,2,10,4,0.01759,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,14,39,"        iNameKey = nameKey;
",4,0,0,0,0,0,0,0,0,5,19,4,0.01759,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,14,40,"        iWallOffset = wallOffset;
",4,0,0,0,0,0,0,0,0,5,25,4,0.01759,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,14,41,"        iStandardOffset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,33,4,0.01759,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,14,42,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01759,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,14,88,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.01759,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,14,89,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.01759,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,82,"        this(resourcePath, null, false);
",2,0,0,1,2,0,0,0,0,3,32,4,0.01759,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,83,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01759,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,106,"    {
",0,0,0,0,1,0,0,0,0,0,1,3,0.01759,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,107,"        if (resourcePath == null) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.01759,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,110,"        if (!resourcePath.endsWith(""/"")) {
",0,0,0,2,5,0,4,0,0,6,34,4,0.01759,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,111,"            resourcePath += '/';
",2,0,0,0,0,0,0,0,0,4,20,6,0.01759,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,114,"        iFileDir = null;
",2,0,0,0,0,0,0,0,0,3,16,4,0.01759,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,115,"        iResourcePath = resourcePath;
",4,0,0,0,0,0,0,0,0,5,29,4,0.01759,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,117,"        if (loader == null && !favorSystemLoader) {
",4,2,0,1,3,0,0,0,0,7,43,4,0.01759,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,118,"            loader = getClass().getClassLoader();
",2,0,0,2,4,0,4,0,0,7,37,6,0.01759,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,121,"        iLoader = loader;
",4,0,0,0,0,0,0,0,0,5,17,4,0.01759,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,123,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));
",2,0,0,2,4,0,4,0,0,8,60,4,0.01759,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,124,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01759,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,136,"        if (id == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.01759,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,140,"        Object obj = iZoneInfoMap.get(id);
",2,0,0,1,2,0,6,2,0,10,34,4,0.01759,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,141,"        if (obj == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.01759,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,145,"        if (id.equals(obj)) {
",0,0,0,2,5,0,6,0,0,6,21,5,0.01759,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,150,"        if (obj instanceof SoftReference<?>) {
",2,0,0,1,3,0,0,2,0,4,38,5,0.01759,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,152,"            SoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;
",4,0,0,1,2,0,0,8,0,12,68,6,0.01759,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,153,"            DateTimeZone tz = ref.get();
",2,0,0,1,2,0,4,2,0,8,28,6,0.01759,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,154,"            if (tz != null) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.01759,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,155,"                return tz;
",2,0,0,0,0,1,0,0,0,2,10,8,0.01759,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,174,"        return new TreeSet<String>(iZoneInfoMap.keySet());
",0,0,0,2,4,1,4,4,0,8,50,5,0.01759,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,196,"        if (iFileDir != null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.01759,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,199,"            String path = iResourcePath.concat(name);
",2,0,0,1,2,0,6,2,0,10,41,6,0.01759,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,200,"            if (iLoader != null) {
",2,1,0,1,3,0,0,0,0,3,22,6,0.01759,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,201,"                in = iLoader.getResourceAsStream(path);
",2,0,0,1,2,0,6,0,0,9,39,8,0.01759,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,205,"            if (in == null) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.01759,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,214,"        return in;
",2,0,0,0,0,1,0,0,0,2,10,4,0.01759,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,252,"        Map<String, Object> map = new ConcurrentHashMap<String, Object>();
",2,0,0,1,2,0,0,12,0,14,66,4,0.01759,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,253,"        DataInputStream din = new DataInputStream(in);
",4,0,0,1,2,0,0,4,0,8,46,4,0.01759,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,255,"            readZoneInfoMap(din, map);
",0,0,0,1,2,0,6,0,0,6,26,7,0.01759,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,258,"                din.close();
",0,0,0,1,2,0,4,0,0,4,12,9,0.01759,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,260,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01759,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,262,"        map.put(""UTC"", new SoftReference<DateTimeZone>(DateTimeZone.UTC));
",4,0,0,2,4,0,4,4,0,13,66,5,0.01759,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,263,"        return map;
",2,0,0,0,0,1,0,0,0,2,11,4,0.01759,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,274,"        int size = din.readUnsignedShort();
",2,0,0,1,2,0,4,0,0,6,35,5,0.01759,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,275,"        String[] pool = new String[size];
",2,0,1,2,4,0,0,4,0,8,33,4,0.01759,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,276,"        for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,4,0.01759,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,277,"            pool[i] = din.readUTF().intern();
",0,0,1,3,6,0,6,0,0,11,33,6,0.01759,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,281,"        size = din.readUnsignedShort();
",2,0,0,1,2,0,4,0,0,7,31,4,0.01759,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,282,"        for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,4,0.01759,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,284,"                zimap.put(pool[din.readUnsignedShort()], pool[din.readUnsignedShort()]);
",0,0,1,5,10,0,12,0,0,16,72,9,0.01759,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,287,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01759,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,289,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01759,0
defect4j,time,org/joda/time/DurationFieldType,14,94,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.01746,0
defect4j,time,org/joda/time/DurationFieldType,14,95,"        iName = name;
",4,0,0,0,0,0,0,0,0,5,13,4,0.01746,0
defect4j,time,org/joda/time/DurationFieldType,14,96,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01746,0
defect4j,time,org/joda/time/DurationFieldType,14,60,"    static final DurationFieldType ERAS_TYPE = new StandardDurationFieldType(""eras"", ERAS);
",4,0,0,1,2,2,0,4,0,11,87,2,0.01746,0
defect4j,time,org/joda/time/DurationFieldType,14,62,"    static final DurationFieldType CENTURIES_TYPE = new StandardDurationFieldType(""centuries"", CENTURIES);
",4,0,0,1,2,2,0,4,0,11,102,2,0.01746,0
defect4j,time,org/joda/time/DurationFieldType,14,64,"    static final DurationFieldType WEEKYEARS_TYPE = new StandardDurationFieldType(""weekyears"", WEEKYEARS);
",4,0,0,1,2,2,0,4,0,11,102,2,0.01746,0
defect4j,time,org/joda/time/DurationFieldType,14,66,"    static final DurationFieldType YEARS_TYPE = new StandardDurationFieldType(""years"", YEARS);
",4,0,0,1,2,2,0,4,0,11,90,2,0.01746,0
defect4j,time,org/joda/time/DurationFieldType,14,68,"    static final DurationFieldType MONTHS_TYPE = new StandardDurationFieldType(""months"", MONTHS);
",4,0,0,1,2,2,0,4,0,11,93,2,0.01746,0
defect4j,time,org/joda/time/DurationFieldType,14,70,"    static final DurationFieldType WEEKS_TYPE = new StandardDurationFieldType(""weeks"", WEEKS);
",4,0,0,1,2,2,0,4,0,11,90,2,0.01746,0
defect4j,time,org/joda/time/DurationFieldType,14,72,"    static final DurationFieldType DAYS_TYPE = new StandardDurationFieldType(""days"", DAYS);
",4,0,0,1,2,2,0,4,0,11,87,2,0.01746,0
defect4j,time,org/joda/time/DurationFieldType,14,74,"    static final DurationFieldType HALFDAYS_TYPE = new StandardDurationFieldType(""halfdays"", HALFDAYS);
",4,0,0,1,2,2,0,4,0,11,99,2,0.01746,0
defect4j,time,org/joda/time/DurationFieldType,14,76,"    static final DurationFieldType HOURS_TYPE = new StandardDurationFieldType(""hours"", HOURS);
",4,0,0,1,2,2,0,4,0,11,90,2,0.01746,0
defect4j,time,org/joda/time/DurationFieldType,14,78,"    static final DurationFieldType MINUTES_TYPE = new StandardDurationFieldType(""minutes"", MINUTES);
",4,0,0,1,2,2,0,4,0,11,96,2,0.01746,0
defect4j,time,org/joda/time/DurationFieldType,14,80,"    static final DurationFieldType SECONDS_TYPE = new StandardDurationFieldType(""seconds"", SECONDS);
",4,0,0,1,2,2,0,4,0,11,96,2,0.01746,0
defect4j,time,org/joda/time/DurationFieldType,14,82,"    static final DurationFieldType MILLIS_TYPE = new StandardDurationFieldType(""millis"", MILLIS);
",4,0,0,1,2,2,0,4,0,11,93,2,0.01746,0
defect4j,time,org/joda/time/DurationFieldType,14,259,"            super(name);
",2,0,0,1,2,0,0,0,0,2,12,5,0.01746,0
defect4j,time,org/joda/time/DurationFieldType,14,260,"            iOrdinal = ordinal;
",4,0,0,0,0,0,0,0,0,5,19,5,0.01746,0
defect4j,time,org/joda/time/DurationFieldType,14,261,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01746,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,223,"        int size = partial.size();
",2,0,0,1,2,0,4,0,0,6,26,5,0.01527,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,224,"        int[] values = new int[size];
",2,0,1,2,4,0,0,0,0,4,29,5,0.01527,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,225,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.01527,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,226,"            values[i] = partial.getFieldType(i).getField(this).get(instant);
",0,0,1,4,8,0,12,0,0,17,64,6,0.01527,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,228,"        return values;
",2,0,0,0,0,1,0,0,0,2,14,4,0.01527,0
defect4j,time,org/joda/time/base/BasePartial,14,225,"        return iValues[index];
",0,0,1,1,2,1,0,0,0,4,22,5,0.00943,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2608,"            return iPrintedLengthEstimate;
",2,0,0,0,0,1,0,0,0,2,30,5,0.00784,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,657,"        DateTimePrinter printer = iPrinter;
",4,0,0,0,0,0,0,2,0,6,35,4,0.00729,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,658,"        if (printer == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00729,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,661,"        return printer;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00729,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,114,"            yearToUse = thisYear + (monthToUse / iMax);
",8,2,0,1,2,0,0,0,0,11,43,6,0.00469,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,115,"            monthToUse = (monthToUse % iMax) + 1;
",6,2,0,1,2,0,0,0,0,9,37,6,0.00469,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,98,"        long timePart = iChronology.getMillisOfDay(instant);
",2,0,0,1,2,0,6,0,0,8,52,5,0.00466,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,103,"        int thisYear = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,44,5,0.00466,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,104,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);
",2,0,0,1,2,0,8,0,0,10,62,5,0.00466,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,112,"        int monthToUse = thisMonth - 1 + months;
",6,2,0,0,0,0,0,0,0,8,40,5,0.00466,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,113,"        if (monthToUse >= 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00466,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,136,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);
",2,0,0,1,2,0,10,0,0,12,71,5,0.00466,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,137,"        int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);
",2,0,0,1,2,0,8,0,0,10,67,5,0.00466,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,138,"        if (dayToUse > maxDay) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00466,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,144,"        long datePart =
",2,0,0,0,0,0,0,0,0,2,15,5,0.00466,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,146,"        return datePart + timePart;
",4,1,0,0,0,1,0,0,0,5,27,4,0.00466,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,92,"        if (months == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00464,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,86,"        return getInstance(DateTimeZone.getDefault());
",0,0,0,2,4,1,6,0,0,6,46,5,0.00185,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,107,"                chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));
",2,0,0,2,4,0,8,2,0,13,76,8,0.00154,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,108,"                cCache.put(zone, chrono);
",0,0,0,1,2,0,8,0,0,8,25,9,0.00154,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,96,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00147,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,99,"        int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);
",4,2,0,2,4,0,6,0,0,12,66,5,0.00147,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,100,"        ISOChronology chrono = cFastCache[index];
",2,0,1,1,2,0,0,2,0,8,41,4,0.00147,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,101,"        if (chrono != null && chrono.getZone() == zone) {
",4,3,0,2,5,0,4,0,0,11,49,4,0.00147,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,104,"        synchronized (cCache) {
",2,0,0,1,3,0,0,0,0,2,23,4,0.00147,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,105,"            chrono = cCache.get(zone);
",2,0,0,1,2,0,6,0,0,9,26,6,0.00147,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,106,"            if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00147,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,110,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00147,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,111,"        cFastCache[index] = chrono;
",2,0,1,1,2,0,0,0,0,7,27,4,0.00147,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,112,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00147,0
defect4j,time,org/joda/time/DateTimeZone,14,1284,"        Stub(String id) {
",4,0,0,1,3,0,0,2,0,6,17,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,1285,"            iID = id;
",4,0,0,0,0,0,0,0,0,5,9,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,1286,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,1289,"            out.writeUTF(iID);
",0,0,0,1,2,0,6,0,0,6,18,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,1290,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,1293,"            iID = in.readUTF();
",2,0,0,1,2,0,4,0,0,7,19,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,1294,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,1297,"            return forID(iID);
",0,0,0,1,2,1,4,0,0,4,18,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,423,"            return iMillis;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,43,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,44,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,56,"        return cMillisProvider.getMillis();
",0,0,0,1,2,1,4,0,0,4,35,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,97,"        checkPermission();
",0,0,0,1,2,0,2,0,0,2,18,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,98,"        if (offsetMillis == 0) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,99,"            cMillisProvider = SYSTEM_MILLIS_PROVIDER;
",4,0,0,0,0,0,0,0,0,5,41,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,101,"            cMillisProvider = new OffsetMillisProvider(offsetMillis);
",4,0,0,1,2,0,0,2,0,7,57,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,103,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,116,"        if (millisProvider == null) {
",2,1,0,1,3,0,0,0,0,3,29,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,117,"            throw new IllegalArgumentException(""The MillisProvider must not be null"");
",0,0,0,1,2,0,0,2,0,4,74,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,119,"        checkPermission();
",0,0,0,1,2,0,2,0,0,2,18,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,120,"        cMillisProvider = millisProvider;
",4,0,0,0,0,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,121,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,131,"            sm.checkPermission(new JodaTimePermission(""CurrentTime.setProvider""));
",0,0,0,2,4,0,4,2,0,7,70,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,146,"        if (instant == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,147,"            return DateTimeUtils.currentTimeMillis();
",0,0,0,1,2,1,4,0,0,4,41,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,149,"        return instant.getMillis();
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,164,"        if (instant == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,165,"            return ISOChronology.getInstance();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,167,"        Chronology chrono = instant.getChronology();
",2,0,0,1,2,0,4,2,0,8,44,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,168,"        if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,169,"            return ISOChronology.getInstance();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,171,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,187,"        Chronology chrono = null;
",2,0,0,0,0,0,0,2,0,4,25,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,188,"        if (start != null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,189,"            chrono = start.getChronology();
",2,0,0,1,2,0,4,0,0,7,31,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,190,"        } else if (end != null) {
",2,1,0,1,4,0,0,0,0,3,25,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,191,"            chrono = end.getChronology();
",2,0,0,1,2,0,4,0,0,7,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,193,"        if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,194,"            chrono = ISOChronology.getInstance();
",2,0,0,1,2,0,4,0,0,7,37,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,196,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,211,"        if (interval == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,212,"            return ISOChronology.getInstance();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,214,"        Chronology chrono = interval.getChronology();
",2,0,0,1,2,0,4,2,0,8,45,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,215,"        if (chrono == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,216,"            return ISOChronology.getInstance();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,218,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,234,"        if (interval == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,235,"            long now = DateTimeUtils.currentTimeMillis();
",2,0,0,1,2,0,4,0,0,6,45,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,236,"            interval = new Interval(now, now);
",6,0,0,1,2,0,0,2,0,9,34,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,238,"        return interval;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,253,"            return ISOChronology.getInstance();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,270,"            return DateTimeZone.getDefault();
",0,0,0,1,2,1,4,0,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,286,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,287,"            return PeriodType.standard();
",0,0,0,1,2,1,4,0,0,4,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,289,"        return type;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,303,"        if (duration == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,304,"            return 0L;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,306,"        return duration.getMillis();
",0,0,0,1,2,1,4,0,0,4,28,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,335,"            throw new IllegalArgumentException(""Partial must not be null"");
",0,0,0,1,2,0,0,2,0,4,63,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,342,"                    return false;
",0,0,0,0,0,1,0,0,0,1,13,10,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,365,"            Method method = DateFormatSymbols.class.getMethod(""getInstance"", new Class[] {Locale.class});
",2,0,0,3,6,0,2,8,0,13,93,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,366,"            return (DateFormatSymbols) method.invoke(null, new Object[] {locale});
",2,0,0,4,8,1,4,4,0,10,70,7,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,367,"        } catch (Exception ex) {
",2,0,0,1,4,0,0,2,0,4,24,6,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,368,"            return new DateFormatSymbols(locale);
",2,0,0,1,2,1,0,2,0,4,37,8,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,438,"        OffsetMillisProvider(long offsetMillis) {
",4,0,0,1,3,0,0,0,0,4,41,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,439,"            iMillis = offsetMillis;
",4,0,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,440,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,447,"            return System.currentTimeMillis() + iMillis;
",2,1,0,1,2,1,4,0,0,7,44,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1857,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1858,"            iFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1860,"            if (maxDigits > 18) {
",2,1,0,1,3,0,0,0,0,3,21,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1861,"                maxDigits = 18;
",2,0,0,0,0,0,0,0,0,3,15,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1863,"            iMinDigits = minDigits;
",4,0,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1864,"            iMaxDigits = maxDigits;
",4,0,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1865,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1868,"            return iMaxDigits;
",2,0,0,0,0,1,0,0,0,2,18,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1875,"                printTo(buf, null, instant, chrono);
",0,0,0,1,2,0,8,0,0,9,36,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1878,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1876,"            } catch (IOException e) {
",2,0,0,1,4,0,0,2,0,4,25,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1879,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1884,"            printTo(null, out, instant, chrono);
",0,0,0,1,2,0,8,0,0,9,36,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1885,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1890,"            long millis = partial.getChronology().set(partial, 0L);
",2,0,0,2,4,0,8,0,0,10,55,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1892,"                printTo(buf, null, millis, partial.getChronology());
",0,0,0,2,4,0,10,0,0,11,52,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1895,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1893,"            } catch (IOException e) {
",2,0,0,1,4,0,0,2,0,4,25,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1896,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1901,"            long millis = partial.getChronology().set(partial, 0L);
",2,0,0,2,4,0,8,0,0,10,55,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1902,"            printTo(null, out, millis, partial.getChronology());
",0,0,0,2,4,0,10,0,0,11,52,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1903,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1908,"            DateTimeField field = iFieldType.getField(chrono);
",2,0,0,1,2,0,6,2,0,10,50,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1909,"            int minDigits = iMinDigits;
",4,0,0,0,0,0,0,0,0,4,27,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1913,"                fraction = field.remainder(instant);
",2,0,0,1,2,0,6,0,0,9,36,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1921,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1914,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1915,"                if (buf != null) {
",2,1,0,1,3,0,0,0,0,3,18,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1916,"                    appendUnknownString(buf, minDigits);
",0,0,0,1,2,0,6,0,0,6,36,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1918,"                    printUnknownString(out, minDigits);
",0,0,0,1,2,0,6,0,0,6,35,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1920,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1923,"            if (fraction == 0) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1924,"                if (buf != null) {
",2,1,0,1,3,0,0,0,0,3,18,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1925,"                    while (--minDigits >= 0) {
",2,1,0,1,3,0,0,0,0,4,26,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1926,"                        buf.append('0');
",0,0,0,1,2,0,4,0,0,5,16,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1929,"                    while (--minDigits >= 0) {
",2,1,0,1,3,0,0,0,0,4,26,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1930,"                        out.write('0');
",0,0,0,1,2,0,4,0,0,5,15,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1933,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1937,"            long[] fractionData = getFractionData(fraction, field);
",2,0,0,2,4,0,6,0,0,8,55,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1938,"            long scaled = fractionData[0];
",2,0,1,1,2,0,0,0,0,4,30,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1939,"            int maxDigits = (int) fractionData[1];
",2,0,1,2,4,0,0,0,0,4,38,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1941,"            if ((scaled & 0x7fffffff) == scaled) {
",4,2,0,2,5,0,0,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1942,"                str = Integer.toString((int) scaled);
",4,0,0,2,4,0,4,0,0,9,37,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1944,"                str = Long.toString(scaled);
",2,0,0,1,2,0,6,0,0,9,28,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1947,"            int length = str.length();
",2,0,0,1,2,0,4,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1948,"            int digits = maxDigits;
",4,0,0,0,0,0,0,0,0,4,23,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1949,"            while (length < digits) {
",4,1,0,1,3,0,0,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1950,"                if (buf != null) {
",2,1,0,1,3,0,0,0,0,3,18,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1951,"                    buf.append('0');
",0,0,0,1,2,0,4,0,0,5,16,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1953,"                    out.write('0');
",0,0,0,1,2,0,4,0,0,5,15,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1955,"                minDigits--;
",2,0,0,0,0,0,0,0,0,3,12,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1956,"                digits--;
",2,0,0,0,0,0,0,0,0,3,9,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1959,"            if (minDigits < digits) {
",4,1,0,1,3,0,0,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1961,"                while (minDigits < digits) {
",4,1,0,1,3,0,0,0,0,5,28,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1962,"                    if (length <= 1 || str.charAt(length - 1) != '0') {
",4,4,0,2,5,0,4,0,0,13,51,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1963,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1965,"                    digits--;
",2,0,0,0,0,0,0,0,0,3,9,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1966,"                    length--;
",2,0,0,0,0,0,0,0,0,3,9,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1968,"                if (length < str.length()) {
",2,1,0,2,5,0,4,0,0,7,28,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1969,"                    if (buf != null) {
",2,1,0,1,3,0,0,0,0,3,18,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1970,"                        for (int i=0; i<length; i++) {
",8,1,0,1,3,0,0,0,0,10,30,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1971,"                            buf.append(str.charAt(i));
",0,0,0,2,4,0,10,0,0,10,26,14,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1974,"                        for (int i=0; i<length; i++) {
",8,1,0,1,3,0,0,0,0,10,30,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1975,"                            out.write(str.charAt(i));
",0,0,0,2,4,0,10,0,0,10,25,14,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1978,"                    return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1982,"            if (buf != null) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1983,"                buf.append(str);
",0,0,0,1,2,0,6,0,0,6,16,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1985,"                out.write(str);
",0,0,0,1,2,0,6,0,0,6,15,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1987,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1990,"            long rangeMillis = field.getDurationField().getUnitMillis();
",2,0,0,2,4,0,6,0,0,8,60,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1992,"            int maxDigits = iMaxDigits;
",4,0,0,0,0,0,0,0,0,4,27,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1994,"                switch (maxDigits) {
",2,0,0,1,3,0,0,0,0,2,20,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1995,"                default: scalar = 1L; break;
",2,0,0,0,0,0,0,0,0,3,28,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1996,"                case 1:  scalar = 10L; break;
",2,0,0,0,0,0,0,0,0,3,29,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1997,"                case 2:  scalar = 100L; break;
",2,0,0,0,0,0,0,0,0,3,30,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1998,"                case 3:  scalar = 1000L; break;
",2,0,0,0,0,0,0,0,0,3,31,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1999,"                case 4:  scalar = 10000L; break;
",2,0,0,0,0,0,0,0,0,3,32,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2000,"                case 5:  scalar = 100000L; break;
",2,0,0,0,0,0,0,0,0,3,33,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2001,"                case 6:  scalar = 1000000L; break;
",2,0,0,0,0,0,0,0,0,3,34,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2002,"                case 7:  scalar = 10000000L; break;
",2,0,0,0,0,0,0,0,0,3,35,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2003,"                case 8:  scalar = 100000000L; break;
",2,0,0,0,0,0,0,0,0,3,36,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2004,"                case 9:  scalar = 1000000000L; break;
",2,0,0,0,0,0,0,0,0,3,37,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2005,"                case 10: scalar = 10000000000L; break;
",2,0,0,0,0,0,0,0,0,3,38,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2006,"                case 11: scalar = 100000000000L; break;
",2,0,0,0,0,0,0,0,0,3,39,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2007,"                case 12: scalar = 1000000000000L; break;
",2,0,0,0,0,0,0,0,0,3,40,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2008,"                case 13: scalar = 10000000000000L; break;
",2,0,0,0,0,0,0,0,0,3,41,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2009,"                case 14: scalar = 100000000000000L; break;
",2,0,0,0,0,0,0,0,0,3,42,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2010,"                case 15: scalar = 1000000000000000L; break;
",2,0,0,0,0,0,0,0,0,3,43,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2011,"                case 16: scalar = 10000000000000000L; break;
",2,0,0,0,0,0,0,0,0,3,44,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2012,"                case 17: scalar = 100000000000000000L; break;
",2,0,0,0,0,0,0,0,0,3,45,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2013,"                case 18: scalar = 1000000000000000000L; break;
",2,0,0,0,0,0,0,0,0,3,46,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2015,"                if (((rangeMillis * scalar) / scalar) == rangeMillis) {
",8,3,0,3,7,0,0,0,0,11,55,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2016,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2019,"                maxDigits--;
",2,0,0,0,0,0,0,0,0,3,12,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2022,"            return new long[] {fraction * scalar / rangeMillis, maxDigits};
",8,2,0,2,4,1,0,0,0,10,63,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2026,"            return iMaxDigits;
",2,0,0,0,0,1,0,0,0,2,18,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2030,"            DateTimeField field = iFieldType.getField(bucket.getChronology());
",2,0,0,2,4,0,8,2,0,12,66,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2032,"            int limit = Math.min(iMaxDigits, text.length() - position);
",4,1,0,2,4,0,10,0,0,15,59,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2034,"            long value = 0;
",2,0,0,0,0,0,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2035,"            long n = field.getDurationField().getUnitMillis() * 10;
",2,1,0,2,4,0,6,0,0,9,55,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2036,"            int length = 0;
",2,0,0,0,0,0,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2037,"            while (length < limit) {
",4,1,0,1,3,0,0,0,0,5,24,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2038,"                char c = text.charAt(position + length);
",6,1,0,1,2,0,4,0,0,11,40,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2039,"                if (c < '0' || c > '9') {
",4,3,0,1,3,0,0,0,0,9,25,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2040,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2042,"                length++;
",2,0,0,0,0,0,0,0,0,3,9,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2043,"                long nn = n / 10;
",4,1,0,0,0,0,0,0,0,5,17,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2044,"                value += (c - '0') * nn;
",6,2,0,1,2,0,0,0,0,10,24,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2045,"                n = nn;
",4,0,0,0,0,0,0,0,0,5,7,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2046,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2048,"            value /= 10;
",2,0,0,0,0,0,0,0,0,3,12,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2050,"            if (length == 0) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2051,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2054,"            if (value > Integer.MAX_VALUE) {
",6,1,0,1,3,0,0,0,0,7,32,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2055,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2058,"            DateTimeField parseField = new PreciseDateTimeField(
",2,0,0,0,1,0,0,4,0,6,52,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2063,"            bucket.saveField(parseField, (int) value);
",2,0,0,2,4,0,6,0,0,8,42,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2065,"            return position + length;
",4,1,0,0,0,1,0,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,116,"        throw new UnsupportedOperationException(""Both printing and parsing not supported"");
",0,0,0,1,2,0,0,2,0,3,83,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,132,"        Object f = getFormatter();
",2,0,0,1,2,0,2,2,0,6,26,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,133,"        if (isPrinter(f)) {
",0,0,0,2,5,0,4,0,0,4,19,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,134,"            return (DateTimePrinter) f;
",2,0,0,1,2,1,0,2,0,4,27,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,136,"        throw new UnsupportedOperationException(""Printing is not supported"");
",0,0,0,1,2,0,0,2,0,3,69,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,156,"        throw new UnsupportedOperationException(""Parsing is not supported"");
",0,0,0,1,2,0,0,2,0,3,68,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,177,"        return isPrinter(getFormatter());
",0,0,0,2,4,1,4,0,0,4,33,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,187,"        return isParser(getFormatter());
",0,0,0,2,4,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,196,"        iFormatter = null;
",2,0,0,0,0,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,197,"        iElementPairs.clear();
",0,0,0,1,2,0,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,198,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,210,"            throw new IllegalArgumentException(""No formatter supplied"");
",0,0,0,1,2,0,0,2,0,3,60,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,224,"        checkPrinter(printer);
",0,0,0,1,2,0,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,225,"        return append0(printer, null);
",0,0,0,1,2,1,4,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,237,"        checkParser(parser);
",0,0,0,1,2,0,4,0,0,4,20,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,238,"        return append0(null, parser);
",0,0,0,1,2,1,4,0,0,5,29,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,250,"        checkPrinter(printer);
",0,0,0,1,2,0,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,251,"        checkParser(parser);
",0,0,0,1,2,0,4,0,0,4,20,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,252,"        return append0(printer, parser);
",0,0,0,1,2,1,6,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,274,"            checkPrinter(printer);
",0,0,0,1,2,0,4,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,277,"            throw new IllegalArgumentException(""No parsers supplied"");
",0,0,0,1,2,0,0,2,0,3,58,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,281,"            if (parsers[0] == null) {
",0,1,1,2,5,0,0,0,0,3,25,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,282,"                throw new IllegalArgumentException(""No parser supplied"");
",0,0,0,1,2,0,0,2,0,3,57,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,284,"            return append0(printer, parsers[0]);
",0,0,1,2,4,1,4,0,0,6,36,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,291,"                throw new IllegalArgumentException(""Incomplete parser array"");
",0,0,0,1,2,0,0,2,0,3,62,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,320,"            throw new IllegalArgumentException(""No parser supplied"");
",0,0,0,1,2,0,0,2,0,3,57,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,330,"        if (printer == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,331,"            throw new IllegalArgumentException(""No printer supplied"");
",0,0,0,1,2,0,0,2,0,3,58,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,333,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,371,"            throw new IllegalArgumentException(""Literal must not be null"");
",0,0,0,1,2,0,0,2,0,4,63,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,375,"                return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,377,"                return append0(new CharacterLiteral(text.charAt(0)));
",0,0,0,3,6,1,6,2,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,397,"            throw new IllegalArgumentException(""Field type must not be null"");
",0,0,0,1,2,0,0,2,0,4,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,400,"            maxDigits = minDigits;
",4,0,0,0,0,0,0,0,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,403,"            throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,426,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,427,"            throw new IllegalArgumentException(""Field type must not be null"");
",0,0,0,1,2,0,0,2,0,4,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,429,"        if (numDigits <= 0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,430,"            throw new IllegalArgumentException(""Illegal number of digits: "" + numDigits);
",2,1,0,1,2,0,0,2,0,6,77,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,432,"        return append0(new FixedNumber(fieldType, numDigits, false));
",4,0,0,2,4,1,2,2,0,9,61,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,449,"            throw new IllegalArgumentException(""Field type must not be null"");
",0,0,0,1,2,0,0,2,0,4,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,452,"            maxDigits = minDigits;
",4,0,0,0,0,0,0,0,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,455,"            throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,458,"            return append0(new UnpaddedNumber(fieldType, maxDigits, true));
",4,0,0,2,4,1,2,2,0,9,63,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,478,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,479,"            throw new IllegalArgumentException(""Field type must not be null"");
",0,0,0,1,2,0,0,2,0,4,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,481,"        if (numDigits <= 0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,482,"            throw new IllegalArgumentException(""Illegal number of digits: "" + numDigits);
",2,1,0,1,2,0,0,2,0,6,77,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,484,"        return append0(new FixedNumber(fieldType, numDigits, true));
",4,0,0,2,4,1,2,2,0,9,60,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,496,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,497,"            throw new IllegalArgumentException(""Field type must not be null"");
",0,0,0,1,2,0,0,2,0,4,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,499,"        return append0(new TextField(fieldType, false));
",2,0,0,2,4,1,2,2,0,7,48,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,511,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,512,"            throw new IllegalArgumentException(""Field type must not be null"");
",0,0,0,1,2,0,0,2,0,4,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,514,"        return append0(new TextField(fieldType, true));
",2,0,0,2,4,1,2,2,0,7,47,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,532,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,533,"            throw new IllegalArgumentException(""Field type must not be null"");
",0,0,0,1,2,0,0,2,0,4,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,535,"        if (maxDigits < minDigits) {
",4,1,0,1,3,0,0,0,0,5,28,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,536,"            maxDigits = minDigits;
",4,0,0,0,0,0,0,0,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,538,"        if (minDigits < 0 || maxDigits <= 0) {
",4,3,0,1,3,0,0,0,0,7,38,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,539,"            throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,541,"        return append0(new Fraction(fieldType, minDigits, maxDigits));
",6,0,0,2,4,1,2,2,0,10,62,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,559,"        return appendFraction(DateTimeFieldType.secondOfDay(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,77,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,576,"        return appendFraction(DateTimeFieldType.minuteOfDay(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,77,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,593,"        return appendFraction(DateTimeFieldType.hourOfDay(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,75,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,610,"        return appendFraction(DateTimeFieldType.dayOfYear(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,75,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,627,"        return appendDecimal(DateTimeFieldType.millisOfSecond(), minDigits, 3);
",0,0,0,2,4,1,8,0,0,8,71,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,637,"        return appendDecimal(DateTimeFieldType.millisOfDay(), minDigits, 8);
",0,0,0,2,4,1,8,0,0,8,68,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,647,"        return appendDecimal(DateTimeFieldType.secondOfMinute(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,71,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,657,"        return appendDecimal(DateTimeFieldType.secondOfDay(), minDigits, 5);
",0,0,0,2,4,1,8,0,0,8,68,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,667,"        return appendDecimal(DateTimeFieldType.minuteOfHour(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,69,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,677,"        return appendDecimal(DateTimeFieldType.minuteOfDay(), minDigits, 4);
",0,0,0,2,4,1,8,0,0,8,68,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,687,"        return appendDecimal(DateTimeFieldType.hourOfDay(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,66,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,697,"        return appendDecimal(DateTimeFieldType.clockhourOfDay(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,71,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,707,"        return appendDecimal(DateTimeFieldType.hourOfHalfday(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,70,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,717,"        return appendDecimal(DateTimeFieldType.clockhourOfHalfday(), minDigits, 2);
",0,0,0,2,4,1,8,0,0,8,75,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,813,"        return appendTwoDigitYear(pivot, false);
",0,0,0,1,2,1,4,0,0,5,40,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,831,"        return append0(new TwoDigitYear(DateTimeFieldType.year(), pivot, lenientParse));
",4,0,0,3,6,1,6,2,0,12,80,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,853,"        return appendTwoDigitWeekyear(pivot, false);
",0,0,0,1,2,1,4,0,0,5,44,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,871,"        return append0(new TwoDigitYear(DateTimeFieldType.weekyear(), pivot, lenientParse));
",4,0,0,3,6,1,6,2,0,12,84,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,883,"        return appendDecimal(DateTimeFieldType.yearOfEra(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,74,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,895,"        return appendDecimal(DateTimeFieldType.yearOfCentury(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,78,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,907,"        return appendSignedDecimal(DateTimeFieldType.centuryOfEra(), minDigits, maxDigits);
",0,0,0,2,4,1,10,0,0,10,83,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,917,"        return appendText(DateTimeFieldType.halfdayOfDay());
",0,0,0,2,4,1,6,0,0,6,52,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,927,"        return appendText(DateTimeFieldType.dayOfWeek());
",0,0,0,2,4,1,6,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,938,"        return appendShortText(DateTimeFieldType.dayOfWeek());
",0,0,0,2,4,1,6,0,0,6,54,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,949,"        return appendText(DateTimeFieldType.monthOfYear());
",0,0,0,2,4,1,6,0,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,959,"        return appendShortText(DateTimeFieldType.monthOfYear());
",0,0,0,2,4,1,6,0,0,6,56,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,969,"        return appendText(DateTimeFieldType.era());
",0,0,0,2,4,1,6,0,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,980,"        return append0(new TimeZoneName(TimeZoneName.LONG_NAME, null), null);
",4,0,0,2,4,1,2,2,0,10,69,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,993,"        TimeZoneName pp = new TimeZoneName(TimeZoneName.LONG_NAME, parseLookup);
",8,0,0,1,2,0,0,4,0,12,72,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,994,"        return append0(pp, pp);
",0,0,0,1,2,1,6,0,0,6,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1005,"        return append0(new TimeZoneName(TimeZoneName.SHORT_NAME, null), null);
",4,0,0,2,4,1,2,2,0,10,70,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1019,"        TimeZoneName pp = new TimeZoneName(TimeZoneName.SHORT_NAME, parseLookup);
",8,0,0,1,2,0,0,4,0,12,73,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1020,"        return append0(pp, pp);
",0,0,0,1,2,1,6,0,0,6,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1030,"        return append0(TimeZoneId.INSTANCE, TimeZoneId.INSTANCE);
",8,0,0,1,2,1,2,0,0,10,57,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1053,"        return append0(new TimeZoneOffset
",0,0,0,0,1,1,2,2,0,4,33,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1080,"        return append0(new TimeZoneOffset
",0,0,0,0,1,1,2,2,0,4,33,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1094,"        DateTimeFormat.appendPatternTo(this, pattern);
",0,0,0,1,2,0,6,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1095,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1143,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1151,"        for (int i = len; --i >= 0;) {
",6,1,0,1,3,0,0,0,0,8,30,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1152,"            buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1154,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1157,"        for (int i = len; --i >= 0;) {
",6,1,0,1,3,0,0,0,0,8,30,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1158,"            out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1160,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2772,"            DateTimeParser[] parsers = iParsers;
",4,0,0,1,2,0,0,2,0,6,36,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2773,"            int length = parsers.length;
",6,0,0,0,0,0,0,0,0,6,28,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2775,"            final Object originalState = bucket.saveState();
",2,0,0,1,2,1,4,2,0,9,48,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2776,"            boolean isOptional = false;
",2,0,0,0,0,0,0,0,0,3,27,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2778,"            int bestValidPos = position;
",4,0,0,0,0,0,0,0,0,4,28,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2779,"            Object bestValidState = null;
",2,0,0,0,0,0,0,2,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2781,"            int bestInvalidPos = position;
",4,0,0,0,0,0,0,0,0,4,30,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2783,"            for (int i=0; i<length; i++) {
",8,1,0,1,3,0,0,0,0,10,30,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2784,"                DateTimeParser parser = parsers[i];
",2,0,1,1,2,0,0,2,0,8,35,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2785,"                if (parser == null) {
",2,1,0,1,3,0,0,0,0,3,21,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2787,"                    if (bestValidPos <= position) {
",4,1,0,1,3,0,0,0,0,5,31,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2788,"                        return position;
",2,0,0,0,0,1,0,0,0,2,16,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2790,"                    isOptional = true;
",2,0,0,0,0,0,0,0,0,4,18,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2791,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2793,"                int parsePos = parser.parseInto(bucket, text, position);
",2,0,0,1,2,0,10,0,0,12,56,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2794,"                if (parsePos >= position) {
",4,1,0,1,3,0,0,0,0,5,27,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2795,"                    if (parsePos > bestValidPos) {
",4,1,0,1,3,0,0,0,0,5,30,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2796,"                        if (parsePos >= text.length() ||
",2,3,0,1,3,0,4,0,0,9,32,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2801,"                            return parsePos;
",2,0,0,0,0,1,0,0,0,2,16,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2803,"                        bestValidPos = parsePos;
",4,0,0,0,0,0,0,0,0,5,24,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2804,"                        bestValidState = bucket.saveState();
",2,0,0,1,2,0,4,0,0,7,36,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2807,"                    if (parsePos < 0) {
",2,1,0,1,3,0,0,0,0,3,19,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2808,"                        parsePos = ~parsePos;
",4,0,0,0,0,0,0,0,0,6,21,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2809,"                        if (parsePos > bestInvalidPos) {
",4,1,0,1,3,0,0,0,0,5,32,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2810,"                            bestInvalidPos = parsePos;
",4,0,0,0,0,0,0,0,0,5,26,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2814,"                bucket.restoreState(originalState);
",0,0,0,1,2,0,6,0,0,6,35,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2817,"            if (bestValidPos > position || (bestValidPos == position && isOptional)) {
",10,4,0,2,5,0,0,0,0,14,74,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2819,"                if (bestValidState != null) {
",2,1,0,1,3,0,0,0,0,3,29,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2820,"                    bucket.restoreState(bestValidState);
",0,0,0,1,2,0,6,0,0,6,36,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2822,"                return bestValidPos;
",2,0,0,0,0,1,0,0,0,2,20,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2825,"            return ~bestInvalidPos;
",2,0,0,0,0,1,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2592,"                iParsers = null;
",2,0,0,0,0,0,0,0,0,3,16,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2593,"                iParsedLengthEstimate = 0;
",2,0,0,0,0,0,0,0,0,3,26,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2614,"            DateTimePrinter[] elements = iPrinters;
",4,0,0,1,2,0,0,2,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2615,"            if (elements == null) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2616,"                throw new UnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,42,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2619,"            if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2621,"                locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2624,"            int len = elements.length;
",6,0,0,0,0,0,0,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2625,"            for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2626,"                elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);
",0,0,1,2,4,0,14,0,0,18,78,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2628,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2633,"            DateTimePrinter[] elements = iPrinters;
",4,0,0,1,2,0,0,2,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2634,"            if (elements == null) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2635,"                throw new UnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,42,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2638,"            if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2640,"                locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2643,"            int len = elements.length;
",6,0,0,0,0,0,0,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2644,"            for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2645,"                elements[i].printTo(out, instant, chrono, displayOffset, displayZone, locale);
",0,0,1,2,4,0,14,0,0,18,78,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2647,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2652,"                throw new UnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,42,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2667,"            DateTimePrinter[] elements = iPrinters;
",4,0,0,1,2,0,0,2,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2668,"            if (elements == null) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2669,"                throw new UnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,42,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2672,"            if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2674,"                locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2677,"            int len = elements.length;
",6,0,0,0,0,0,0,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2678,"            for (int i=0; i<len; i++) {
",8,1,0,1,3,0,0,0,0,10,27,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2679,"                elements[i].printTo(out, partial, locale);
",0,0,1,2,4,0,8,0,0,12,42,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2681,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2688,"            DateTimeParser[] elements = iParsers;
",4,0,0,1,2,0,0,2,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2689,"            if (elements == null) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2690,"                throw new UnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,42,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2693,"            int len = elements.length;
",6,0,0,0,0,0,0,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2694,"            for (int i=0; i<len && position >= 0; i++) {
",10,3,0,1,3,0,0,0,0,14,44,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2695,"                position = elements[i].parseInto(bucket, text, position);
",2,0,1,2,4,0,8,0,0,15,57,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2697,"            return position;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2498,"    static enum TimeZoneId
",2,0,0,0,0,1,0,0,0,3,22,2,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2501,"        INSTANCE;
",2,0,0,0,0,0,0,0,0,2,9,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2502,"        static final Set<String> ALL_IDS = DateTimeZone.getAvailableIDs();
",2,0,0,1,2,2,4,4,0,12,66,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2505,"            int max = 0;
",2,0,0,0,0,0,0,0,0,2,12,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2506,"            for (String id : ALL_IDS) {
",4,0,0,1,3,0,0,2,0,6,27,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2507,"                max = Math.max(max, id.length());
",2,0,0,2,4,0,10,0,0,13,33,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2508,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2509,"            MAX_LENGTH = max;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2510,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2513,"            return MAX_LENGTH;
",2,0,0,0,0,1,0,0,0,2,18,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2519,"            buf.append(displayZone != null ? displayZone.getID() : """");
",2,1,0,2,4,0,8,0,0,12,59,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2520,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2525,"            out.write(displayZone != null ? displayZone.getID() : """");
",2,1,0,2,4,0,8,0,0,12,58,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2526,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2530,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2534,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2537,"            return MAX_LENGTH;
",2,0,0,0,0,1,0,0,0,2,18,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2541,"            String str = text.substring(position);
",2,0,0,1,2,0,6,2,0,10,38,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2542,"            String best = null;
",2,0,0,0,0,0,0,2,0,4,19,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2543,"            for (String id : ALL_IDS) {
",4,0,0,1,3,0,0,2,0,6,27,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2544,"                if (str.startsWith(id)) {
",0,0,0,2,5,0,6,0,0,6,25,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2545,"                    if (best == null || id.length() > best.length()) {
",2,3,0,3,7,0,8,0,0,13,50,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2546,"                        best = id;
",4,0,0,0,0,0,0,0,0,5,10,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2549,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2550,"            if (best != null) {
",2,1,0,1,3,0,0,0,0,3,19,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2551,"                bucket.setZone(DateTimeZone.forID(best));
",0,0,0,2,4,0,10,0,0,10,41,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2552,"                return position + best.length();
",2,1,0,1,2,1,4,0,0,7,32,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2554,"            return ~position;
",2,0,0,0,0,1,0,0,0,3,17,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2439,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2440,"            iType = type;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2441,"            iParseLookup = parseLookup;
",4,0,0,0,0,0,0,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2442,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2445,"            return (iType == SHORT_NAME ? 4 : 20);
",4,1,0,1,2,1,0,0,0,5,38,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2451,"            buf.append(print(instant - displayOffset, displayZone, locale));
",4,1,0,2,4,0,10,0,0,15,64,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2452,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2457,"            out.write(print(instant - displayOffset, displayZone, locale));
",4,1,0,2,4,0,10,0,0,15,63,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2458,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2461,"            if (displayZone == null) {
",2,1,0,1,3,0,0,0,0,3,26,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2462,"                return """";  // no zone
",0,0,0,0,0,1,0,0,0,1,22,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2464,"            switch (iType) {
",2,0,0,1,3,0,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2466,"                    return displayZone.getName(instant, locale);
",0,0,0,1,2,1,8,0,0,8,44,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2468,"                    return displayZone.getShortName(instant, locale);
",0,0,0,1,2,1,8,0,0,8,49,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2470,"            return """";
",0,0,0,0,0,1,0,0,0,1,10,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2475,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2479,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2482,"            return (iType == SHORT_NAME ? 4 : 20);
",4,1,0,1,2,1,0,0,0,5,38,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2486,"            String str = text.substring(position);
",2,0,0,1,2,0,6,2,0,10,38,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2487,"            for (String name : iParseLookup.keySet()) {
",2,0,0,2,5,0,4,2,0,8,43,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2488,"                if (str.startsWith(name)) {
",0,0,0,2,5,0,6,0,0,6,27,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2489,"                    bucket.setZone(iParseLookup.get(name));
",0,0,0,2,4,0,10,0,0,10,39,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2490,"                    return position + name.length();
",2,1,0,1,2,1,4,0,0,7,32,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2492,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2493,"            return ~position;
",2,0,0,0,0,1,0,0,0,3,17,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2083,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2084,"            iZeroOffsetPrintText = zeroOffsetPrintText;
",4,0,0,0,0,0,0,0,0,5,43,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2085,"            iZeroOffsetParseText = zeroOffsetParseText;
",4,0,0,0,0,0,0,0,0,5,43,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2086,"            iShowSeparators = showSeparators;
",4,0,0,0,0,0,0,0,0,5,33,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2087,"            if (minFields <= 0 || maxFields < minFields) {
",6,3,0,1,3,0,0,0,0,9,46,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2088,"                throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2090,"            if (minFields > 4) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2091,"                minFields = 4;
",2,0,0,0,0,0,0,0,0,3,14,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2092,"                maxFields = 4;
",2,0,0,0,0,0,0,0,0,3,14,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2094,"            iMinFields = minFields;
",4,0,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2095,"            iMaxFields = maxFields;
",4,0,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2096,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2099,"            int est = 1 + iMinFields << 1;
",4,2,0,0,0,0,0,0,0,6,30,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2100,"            if (iShowSeparators) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2101,"                est += iMinFields - 1;
",4,1,0,0,0,0,0,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2103,"            if (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {
",4,3,0,2,5,0,4,0,0,11,74,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2104,"                est = iZeroOffsetPrintText.length();
",2,0,0,1,2,0,4,0,0,7,36,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2106,"            return est;
",2,0,0,0,0,1,0,0,0,2,11,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2112,"            if (displayZone == null) {
",2,1,0,1,3,0,0,0,0,3,26,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2113,"                return;  // no zone
",0,0,0,0,0,1,0,0,0,0,19,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2115,"            if (displayOffset == 0 && iZeroOffsetPrintText != null) {
",4,3,0,1,3,0,0,0,0,7,57,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2116,"                buf.append(iZeroOffsetPrintText);
",0,0,0,1,2,0,6,0,0,6,33,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2117,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2119,"            if (displayOffset >= 0) {
",2,1,0,1,3,0,0,0,0,3,25,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2120,"                buf.append('+');
",0,0,0,1,2,0,4,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2122,"                buf.append('-');
",0,0,0,1,2,0,4,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2123,"                displayOffset = -displayOffset;
",4,0,0,0,0,0,0,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2126,"            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,0,0,0,0,0,0,9,62,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2127,"            FormatUtils.appendPaddedInteger(buf, hours, 2);
",0,0,0,1,2,0,8,0,0,8,47,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2128,"            if (iMaxFields == 1) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2129,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2131,"            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,1,2,0,0,0,0,10,64,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2132,"            if (displayOffset == 0 && iMinFields <= 1) {
",4,3,0,1,3,0,0,0,0,7,44,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2133,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2136,"            int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,9,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2137,"            if (iShowSeparators) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2138,"                buf.append(':');
",0,0,0,1,2,0,4,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2140,"            FormatUtils.appendPaddedInteger(buf, minutes, 2);
",0,0,0,1,2,0,8,0,0,8,49,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2141,"            if (iMaxFields == 2) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2142,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2144,"            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,10,63,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2145,"            if (displayOffset == 0 && iMinFields <= 2) {
",4,3,0,1,3,0,0,0,0,7,44,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2146,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2149,"            int seconds = displayOffset / DateTimeConstants.MILLIS_PER_SECOND;
",8,1,0,0,0,0,0,0,0,9,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2150,"            if (iShowSeparators) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2151,"                buf.append(':');
",0,0,0,1,2,0,4,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2153,"            FormatUtils.appendPaddedInteger(buf, seconds, 2);
",0,0,0,1,2,0,8,0,0,8,49,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2154,"            if (iMaxFields == 3) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2155,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2157,"            displayOffset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;
",8,1,0,0,0,0,0,0,0,10,63,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2158,"            if (displayOffset == 0 && iMinFields <= 3) {
",4,3,0,1,3,0,0,0,0,7,44,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2159,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2162,"            if (iShowSeparators) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2163,"                buf.append('.');
",0,0,0,1,2,0,4,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2165,"            FormatUtils.appendPaddedInteger(buf, displayOffset, 3);
",0,0,0,1,2,0,8,0,0,8,55,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2166,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2171,"            if (displayZone == null) {
",2,1,0,1,3,0,0,0,0,3,26,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2172,"                return;  // no zone
",0,0,0,0,0,1,0,0,0,0,19,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2174,"            if (displayOffset == 0 && iZeroOffsetPrintText != null) {
",4,3,0,1,3,0,0,0,0,7,57,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2175,"                out.write(iZeroOffsetPrintText);
",0,0,0,1,2,0,6,0,0,6,32,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2176,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2178,"            if (displayOffset >= 0) {
",2,1,0,1,3,0,0,0,0,3,25,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2179,"                out.write('+');
",0,0,0,1,2,0,4,0,0,5,15,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2181,"                out.write('-');
",0,0,0,1,2,0,4,0,0,5,15,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2182,"                displayOffset = -displayOffset;
",4,0,0,0,0,0,0,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2185,"            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,0,0,0,0,0,0,9,62,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2186,"            FormatUtils.writePaddedInteger(out, hours, 2);
",0,0,0,1,2,0,8,0,0,8,46,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2187,"            if (iMaxFields == 1) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2188,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2190,"            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,1,2,0,0,0,0,10,64,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2191,"            if (displayOffset == 0 && iMinFields == 1) {
",4,3,0,1,3,0,0,0,0,7,44,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2192,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2195,"            int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,9,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2196,"            if (iShowSeparators) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2197,"                out.write(':');
",0,0,0,1,2,0,4,0,0,5,15,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2199,"            FormatUtils.writePaddedInteger(out, minutes, 2);
",0,0,0,1,2,0,8,0,0,8,48,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2200,"            if (iMaxFields == 2) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2201,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2203,"            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,10,63,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2204,"            if (displayOffset == 0 && iMinFields == 2) {
",4,3,0,1,3,0,0,0,0,7,44,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2205,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2208,"            int seconds = displayOffset / DateTimeConstants.MILLIS_PER_SECOND;
",8,1,0,0,0,0,0,0,0,9,66,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2209,"            if (iShowSeparators) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2210,"                out.write(':');
",0,0,0,1,2,0,4,0,0,5,15,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2212,"            FormatUtils.writePaddedInteger(out, seconds, 2);
",0,0,0,1,2,0,8,0,0,8,48,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2213,"            if (iMaxFields == 3) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2214,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2216,"            displayOffset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;
",8,1,0,0,0,0,0,0,0,10,63,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2217,"            if (displayOffset == 0 && iMinFields == 3) {
",4,3,0,1,3,0,0,0,0,7,44,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2218,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2221,"            if (iShowSeparators) {
",2,0,0,1,3,0,0,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2222,"                out.write('.');
",0,0,0,1,2,0,4,0,0,5,15,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2224,"            FormatUtils.writePaddedInteger(out, displayOffset, 3);
",0,0,0,1,2,0,8,0,0,8,54,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2225,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2229,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2233,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2236,"            return estimatePrintedLength();
",0,0,0,1,2,1,2,0,0,2,31,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2240,"            int limit = text.length() - position;
",4,1,0,1,2,0,4,0,0,9,37,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2243,"            if (iZeroOffsetParseText != null) {
",2,1,0,1,3,0,0,0,0,3,35,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2244,"                if (iZeroOffsetParseText.length() == 0) {
",0,1,0,2,5,0,4,0,0,5,41,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2246,"                    if (limit > 0) {
",2,1,0,1,3,0,0,0,0,3,16,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2247,"                        char c = text.charAt(position);
",2,0,0,1,2,0,6,0,0,8,31,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2248,"                        if (c == '-' || c == '+') {
",4,3,0,1,3,0,0,0,0,9,27,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2249,"                            break zeroOffset;
",2,0,0,0,0,0,0,0,0,2,17,14,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2252,"                    bucket.setOffset(Integer.valueOf(0));
",0,0,0,2,4,0,8,0,0,8,37,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2253,"                    return position;
",2,0,0,0,0,1,0,0,0,2,16,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2255,"                if (text.regionMatches(true, position, iZeroOffsetParseText, 0, iZeroOffsetParseText.length())) {
",0,0,0,3,7,0,12,0,0,13,97,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2256,"                    bucket.setOffset(Integer.valueOf(0));
",0,0,0,2,4,0,8,0,0,8,37,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2257,"                    return position + iZeroOffsetParseText.length();
",2,1,0,1,2,1,4,0,0,7,48,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2263,"            if (limit <= 1) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2264,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2268,"            char c = text.charAt(position);
",2,0,0,1,2,0,6,0,0,8,31,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2269,"            if (c == '-') {
",2,1,0,1,3,0,0,0,0,4,15,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2270,"                negative = true;
",2,0,0,0,0,0,0,0,0,4,16,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2271,"            } else if (c == '+') {
",2,1,0,1,4,0,0,0,0,4,22,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2272,"                negative = false;
",2,0,0,0,0,0,0,0,0,4,17,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2274,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2277,"            limit--;
",2,0,0,0,0,0,0,0,0,3,8,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2278,"            position++;
",2,0,0,0,0,0,0,0,0,3,11,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2292,"            if (digitCount(text, position, 2) < 2) {
",0,1,0,2,5,0,6,0,0,7,40,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2294,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2299,"            int hours = FormatUtils.parseTwoDigits(text, position);
",2,0,0,1,2,0,8,0,0,10,55,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2300,"            if (hours > 23) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2301,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2303,"            offset = hours * DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,0,0,0,0,0,0,10,51,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2304,"            limit -= 2;
",2,0,0,0,0,0,0,0,0,3,11,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2305,"            position += 2;
",2,0,0,0,0,0,0,0,0,3,14,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2311,"                if (limit <= 0) {
",2,1,0,1,3,0,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2312,"                    break parse;
",2,0,0,0,0,0,0,0,0,2,12,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2316,"                c = text.charAt(position);
",2,0,0,1,2,0,6,0,0,9,26,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2317,"                if (c == ':') {
",2,1,0,1,3,0,0,0,0,4,15,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2318,"                    expectSeparators = true;
",2,0,0,0,0,0,0,0,0,4,24,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2319,"                    limit--;
",2,0,0,0,0,0,0,0,0,3,8,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2320,"                    position++;
",2,0,0,0,0,0,0,0,0,3,11,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2321,"                } else if (c >= '0' && c <= '9') {
",4,3,0,1,4,0,0,0,0,9,34,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2322,"                    expectSeparators = false;
",2,0,0,0,0,0,0,0,0,4,25,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2329,"                int count = digitCount(text, position, 2);
",2,0,0,1,2,0,6,0,0,8,42,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2330,"                if (count == 0 && !expectSeparators) {
",4,2,0,1,3,0,0,0,0,7,38,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2331,"                    break parse;
",2,0,0,0,0,0,0,0,0,2,12,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2332,"                } else if (count < 2) {
",2,1,0,1,4,0,0,0,0,3,23,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2334,"                    return ~position;
",2,0,0,0,0,1,0,0,0,3,17,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2337,"                int minutes = FormatUtils.parseTwoDigits(text, position);
",2,0,0,1,2,0,8,0,0,10,57,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2338,"                if (minutes > 59) {
",2,1,0,1,3,0,0,0,0,3,19,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2339,"                    return ~position;
",2,0,0,0,0,1,0,0,0,3,17,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2341,"                offset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,10,56,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2342,"                limit -= 2;
",2,0,0,0,0,0,0,0,0,3,11,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2343,"                position += 2;
",2,0,0,0,0,0,0,0,0,3,14,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2347,"                if (limit <= 0) {
",2,1,0,1,3,0,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2348,"                    break parse;
",2,0,0,0,0,0,0,0,0,2,12,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2351,"                if (expectSeparators) {
",2,0,0,1,3,0,0,0,0,2,23,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2352,"                    if (text.charAt(position) != ':') {
",0,1,0,2,5,0,6,0,0,8,35,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2353,"                        break parse;
",2,0,0,0,0,0,0,0,0,2,12,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2355,"                    limit--;
",2,0,0,0,0,0,0,0,0,3,8,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2356,"                    position++;
",2,0,0,0,0,0,0,0,0,3,11,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2359,"                count = digitCount(text, position, 2);
",2,0,0,1,2,0,6,0,0,9,38,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2360,"                if (count == 0 && !expectSeparators) {
",4,2,0,1,3,0,0,0,0,7,38,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2361,"                    break parse;
",2,0,0,0,0,0,0,0,0,2,12,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2362,"                } else if (count < 2) {
",2,1,0,1,4,0,0,0,0,3,23,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2364,"                    return ~position;
",2,0,0,0,0,1,0,0,0,3,17,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2367,"                int seconds = FormatUtils.parseTwoDigits(text, position);
",2,0,0,1,2,0,8,0,0,10,57,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2368,"                if (seconds > 59) {
",2,1,0,1,3,0,0,0,0,3,19,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2369,"                    return ~position;
",2,0,0,0,0,1,0,0,0,3,17,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2371,"                offset += seconds * DateTimeConstants.MILLIS_PER_SECOND;
",8,1,0,0,0,0,0,0,0,10,56,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2372,"                limit -= 2;
",2,0,0,0,0,0,0,0,0,3,11,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2373,"                position += 2;
",2,0,0,0,0,0,0,0,0,3,14,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2377,"                if (limit <= 0) {
",2,1,0,1,3,0,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2378,"                    break parse;
",2,0,0,0,0,0,0,0,0,2,12,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2381,"                if (expectSeparators) {
",2,0,0,1,3,0,0,0,0,2,23,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2382,"                    if (text.charAt(position) != '.' && text.charAt(position) != ',') {
",0,3,0,3,7,0,12,0,0,17,67,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2383,"                        break parse;
",2,0,0,0,0,0,0,0,0,2,12,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2385,"                    limit--;
",2,0,0,0,0,0,0,0,0,3,8,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2386,"                    position++;
",2,0,0,0,0,0,0,0,0,3,11,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2389,"                count = digitCount(text, position, 3);
",2,0,0,1,2,0,6,0,0,9,38,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2390,"                if (count == 0 && !expectSeparators) {
",4,2,0,1,3,0,0,0,0,7,38,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2391,"                    break parse;
",2,0,0,0,0,0,0,0,0,2,12,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2392,"                } else if (count < 1) {
",2,1,0,1,4,0,0,0,0,3,23,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2394,"                    return ~position;
",2,0,0,0,0,1,0,0,0,3,17,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2397,"                offset += (text.charAt(position++) - '0') * 100;
",4,2,0,2,4,0,4,0,0,13,48,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2398,"                if (count > 1) {
",2,1,0,1,3,0,0,0,0,3,16,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2399,"                    offset += (text.charAt(position++) - '0') * 10;
",4,2,0,2,4,0,4,0,0,13,47,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2400,"                    if (count > 2) {
",2,1,0,1,3,0,0,0,0,3,16,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2401,"                        offset += text.charAt(position++) - '0';
",4,1,0,1,2,0,4,0,0,12,40,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2406,"            bucket.setOffset(Integer.valueOf(negative ? -offset : offset));
",6,0,0,2,4,0,8,0,0,15,63,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2407,"            return position;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2415,"            int limit = Math.min(text.length() - position, amount);
",4,1,0,2,4,0,10,0,0,15,55,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2416,"            amount = 0;
",2,0,0,0,0,0,0,0,0,3,11,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2417,"            for (; limit > 0; limit--) {
",4,1,0,1,3,0,0,0,0,6,28,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2418,"                char c = text.charAt(position + amount);
",6,1,0,1,2,0,4,0,0,11,40,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2419,"                if (c < '0' || c > '9') {
",4,3,0,1,3,0,0,0,0,9,25,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2420,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2422,"                amount++;
",2,0,0,0,0,0,0,0,0,3,9,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,2424,"            return amount;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,14,60,"            throw new IllegalArgumentException(""Range duration field must be precise"");
",0,0,0,1,2,0,0,2,0,3,75,7,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,14,66,"            throw new IllegalArgumentException(""The effective range must be at least 2"");
",0,0,0,1,2,0,0,2,0,3,77,7,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,14,80,"            return (int) ((instant / getUnitMillis()) % iRange);
",4,2,0,4,8,1,2,0,0,8,52,8,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,14,95,"        int thisValue = get(instant);
",2,0,0,1,2,0,4,0,0,6,29,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,14,96,"        int wrappedValue = FieldUtils.getWrappedValue
",2,0,0,0,0,0,4,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,14,99,"        return instant + (wrappedValue - thisValue) * getUnitMillis();
",6,3,0,2,4,1,2,0,0,11,62,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,14,143,"        return iRange;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,14,51,"            throw new IllegalArgumentException(""Unit duration field must be precise"");
",0,0,0,1,2,0,0,2,0,3,74,7,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,14,56,"            throw new IllegalArgumentException(""The unit milliseconds must be at least 1"");
",0,0,0,1,2,0,0,2,0,3,79,7,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,14,66,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,14,93,"            return instant - instant % iUnitMillis;
",6,2,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,14,109,"        if (instant > 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,14,110,"            instant -= 1;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,14,111,"            return instant - instant % iUnitMillis + iUnitMillis;
",8,3,0,0,0,1,0,0,0,11,53,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,14,113,"            return instant - instant % iUnitMillis;
",6,2,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,14,126,"        if (instant >= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,14,127,"            return instant % iUnitMillis;
",4,1,0,0,0,1,0,0,0,5,29,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,14,129,"            return (instant + 1) % iUnitMillis + iUnitMillis - 1;
",6,4,0,1,2,1,0,0,0,10,53,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,52,"            throw new IllegalArgumentException(""The type must not be null"");
",0,0,0,1,2,0,0,2,0,4,64,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,62,"        return iType.getName();
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,94,"        return getAsText(get(instant), locale);
",0,0,0,2,4,1,8,0,0,8,39,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,106,"        return getAsText(instant, null);
",0,0,0,1,2,1,4,0,0,5,32,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,121,"        return getAsText(fieldValue, locale);
",0,0,0,1,2,1,6,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,136,"        return getAsText(partial, partial.get(getType()), locale);
",0,0,0,3,6,1,12,0,0,12,58,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,153,"        return Integer.toString(fieldValue);
",0,0,0,1,2,1,6,0,0,6,36,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,168,"        return getAsShortText(get(instant), locale);
",0,0,0,2,4,1,8,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,180,"        return getAsShortText(instant, null);
",0,0,0,1,2,1,4,0,0,5,37,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,195,"        return getAsShortText(fieldValue, locale);
",0,0,0,1,2,1,6,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,210,"        return getAsShortText(partial, partial.get(getType()), locale);
",0,0,0,3,6,1,12,0,0,12,63,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,227,"        return getAsText(fieldValue, locale);
",0,0,0,1,2,1,6,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,253,"        return getDurationField().add(instant, value);
",0,0,0,2,4,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,267,"        return getDurationField().add(instant, value);
",0,0,0,2,4,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,299,"            return values;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,310,"                values[fieldIndex] = (int) proposed;
",2,0,1,2,4,0,0,0,0,7,36,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,311,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,315,"                    throw new IllegalArgumentException(""Maximum value exceeded for add"");
",0,0,0,1,2,0,0,2,0,3,69,11,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,320,"                    throw new IllegalArgumentException(""Fields invalid for add"");
",0,0,0,1,2,0,0,2,0,3,61,11,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,325,"            values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero
",0,0,1,2,4,0,6,0,0,11,83,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,326,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,327,"        while (valueToAdd < 0) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,328,"            int min = getMinimumValue(instant, values);
",2,0,0,1,2,0,6,0,0,8,43,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,329,"            long proposed = values[fieldIndex] + valueToAdd;
",4,1,1,1,2,0,0,0,0,9,48,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,330,"            if (proposed >= min) {
",4,1,0,1,3,0,0,0,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,331,"                values[fieldIndex] = (int) proposed;
",2,0,1,2,4,0,0,0,0,7,36,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,332,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,334,"            if (nextField == null) {
",2,1,0,1,3,0,0,0,0,3,24,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,335,"                if (fieldIndex == 0) {
",2,1,0,1,3,0,0,0,0,3,22,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,336,"                    throw new IllegalArgumentException(""Maximum value exceeded for add"");
",0,0,0,1,2,0,0,2,0,3,69,11,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,338,"                nextField = instant.getField(fieldIndex - 1);
",4,1,0,1,2,0,4,0,0,10,45,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,339,"                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {
",0,1,0,5,11,0,10,0,0,11,82,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,340,"                    throw new IllegalArgumentException(""Fields invalid for add"");
",0,0,0,1,2,0,0,2,0,3,61,11,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,343,"            valueToAdd -= (min - 1) - values[fieldIndex];  // reduce the amount to add
",4,2,1,2,4,0,0,0,0,11,74,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,344,"            values = nextField.add(instant, fieldIndex - 1, values, -1);  // subtract 1 from next bigger field
",4,1,0,1,2,0,8,0,0,15,98,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,345,"            values[fieldIndex] = getMaximumValue(instant, values);  // reset this field to max value
",0,0,1,2,4,0,6,0,0,11,88,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,346,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,348,"        return set(instant, fieldIndex, values, values[fieldIndex]);  // adjusts smaller fields
",0,0,1,2,4,1,8,0,0,12,87,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,379,"        if (valueToAdd == 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,380,"            return values;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,385,"        DateTimeField nextField = null;
",2,0,0,0,0,0,0,2,0,4,31,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,387,"        while (valueToAdd > 0) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,388,"            int max = getMaximumValue(instant, values);
",2,0,0,1,2,0,6,0,0,8,43,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,389,"            long proposed = values[fieldIndex] + valueToAdd;
",4,1,1,1,2,0,0,0,0,9,48,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,390,"            if (proposed <= max) {
",4,1,0,1,3,0,0,0,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,391,"                values[fieldIndex] = (int) proposed;
",2,0,1,2,4,0,0,0,0,7,36,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,392,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,394,"            if (nextField == null) {
",2,1,0,1,3,0,0,0,0,3,24,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,395,"                if (fieldIndex == 0) {
",2,1,0,1,3,0,0,0,0,3,22,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,396,"                    valueToAdd -= (max + 1) - values[fieldIndex];
",4,2,1,2,4,0,0,0,0,11,45,10,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,397,"                    values[fieldIndex] = getMinimumValue(instant, values);
",0,0,1,2,4,0,6,0,0,11,54,10,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,398,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,400,"                nextField = instant.getField(fieldIndex - 1);
",4,1,0,1,2,0,4,0,0,10,45,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,402,"                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {
",0,1,0,5,11,0,10,0,0,11,82,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,403,"                    throw new IllegalArgumentException(""Fields invalid for add"");
",0,0,0,1,2,0,0,2,0,3,61,11,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,406,"            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add
",4,2,1,2,4,0,0,0,0,11,74,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,407,"            values = nextField.addWrapPartial(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field
",4,1,0,1,2,0,8,0,0,14,101,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,408,"            values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero
",0,0,1,2,4,0,6,0,0,11,83,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,409,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,410,"        while (valueToAdd < 0) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,411,"            int min = getMinimumValue(instant, values);
",2,0,0,1,2,0,6,0,0,8,43,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,412,"            long proposed = values[fieldIndex] + valueToAdd;
",4,1,1,1,2,0,0,0,0,9,48,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,413,"            if (proposed >= min) {
",4,1,0,1,3,0,0,0,0,5,22,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,414,"                values[fieldIndex] = (int) proposed;
",2,0,1,2,4,0,0,0,0,7,36,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,415,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,417,"            if (nextField == null) {
",2,1,0,1,3,0,0,0,0,3,24,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,418,"                if (fieldIndex == 0) {
",2,1,0,1,3,0,0,0,0,3,22,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,419,"                    valueToAdd -= (min - 1) - values[fieldIndex];
",4,2,1,2,4,0,0,0,0,11,45,10,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,420,"                    values[fieldIndex] = getMaximumValue(instant, values);
",0,0,1,2,4,0,6,0,0,11,54,10,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,421,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,423,"                nextField = instant.getField(fieldIndex - 1);
",4,1,0,1,2,0,4,0,0,10,45,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,424,"                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {
",0,1,0,5,11,0,10,0,0,11,82,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,425,"                    throw new IllegalArgumentException(""Fields invalid for add"");
",0,0,0,1,2,0,0,2,0,3,61,11,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,428,"            valueToAdd -= (min - 1) - values[fieldIndex];  // reduce the amount to add
",4,2,1,2,4,0,0,0,0,11,74,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,429,"            values = nextField.addWrapPartial(instant, fieldIndex - 1, values, -1);  // subtract 1 from next bigger field
",4,1,0,1,2,0,8,0,0,15,109,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,430,"            values[fieldIndex] = getMaximumValue(instant, values);  // reset this field to max value
",0,0,1,2,4,0,6,0,0,11,88,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,431,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,433,"        return set(instant, fieldIndex, values, values[fieldIndex]);  // adjusts smaller fields
",0,0,1,2,4,1,8,0,0,12,87,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,461,"        int current = get(instant);
",2,0,0,1,2,0,4,0,0,6,27,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,462,"        int wrapped = FieldUtils.getWrappedValue
",2,0,0,0,0,0,4,0,0,6,40,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,464,"        return set(instant, wrapped);
",0,0,0,1,2,1,6,0,0,6,29,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,495,"        int current = values[fieldIndex];
",2,0,1,1,2,0,0,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,496,"        int wrapped = FieldUtils.getWrappedValue
",2,0,0,0,0,0,4,0,0,6,40,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,498,"        return set(instant, fieldIndex, values, wrapped);  // adjusts smaller fields
",0,0,0,1,2,1,10,0,0,10,76,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,522,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,75,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,545,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,81,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,585,"        FieldUtils.verifyValueBounds(this, newValue, getMinimumValue(partial, values), getMaximumValue(partial, values));
",0,0,0,3,6,0,18,0,0,18,113,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,586,"        values[fieldIndex] = newValue;
",2,0,1,1,2,0,0,0,0,7,30,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,589,"        for (int i = fieldIndex + 1; i < partial.size(); i++) {
",8,2,0,2,5,0,4,0,0,15,55,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,590,"            DateTimeField field = partial.getField(i);
",2,0,0,1,2,0,6,2,0,10,42,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,591,"            if (values[i] > field.getMaximumValue(partial, values)) {
",0,1,1,3,7,0,8,0,0,13,57,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,592,"                values[i] = field.getMaximumValue(partial, values);
",0,0,1,2,4,0,8,0,0,13,51,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,594,"            if (values[i] < field.getMinimumValue(partial, values)) {
",0,1,1,3,7,0,8,0,0,13,57,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,595,"                values[i] = field.getMinimumValue(partial, values);
",0,0,1,2,4,0,8,0,0,13,51,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,598,"        return values;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,618,"        int value = convertText(text, locale);
",2,0,0,1,2,0,6,0,0,8,38,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,619,"        return set(instant, value);
",0,0,0,1,2,1,6,0,0,6,27,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,635,"        return set(instant, text, null);
",0,0,0,1,2,1,6,0,0,7,32,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,654,"        int value = convertText(text, locale);
",2,0,0,1,2,0,6,0,0,8,38,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,655,"        return set(instant, fieldIndex, values, value);
",0,0,0,1,2,1,10,0,0,10,47,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,668,"            return Integer.parseInt(text);
",0,0,0,1,2,1,6,0,0,6,30,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,669,"        } catch (NumberFormatException ex) {
",2,0,0,1,4,0,0,2,0,4,36,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,670,"            throw new IllegalFieldValueException(getType(), text);
",2,0,0,2,4,0,2,2,0,6,54,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,704,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,716,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,746,"        return getMinimumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,829,"        int max = getMaximumValue();
",2,0,0,1,2,0,2,0,0,4,28,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,830,"        if (max >= 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,831,"            if (max < 10) {
",2,1,0,1,3,0,0,0,0,3,15,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,832,"                return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,833,"            } else if (max < 100) {
",2,1,0,1,4,0,0,0,0,3,23,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,834,"                return 2;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,835,"            } else if (max < 1000) {
",2,1,0,1,4,0,0,0,0,3,24,8,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,836,"                return 3;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,839,"        return Integer.toString(max).length();
",0,0,0,2,4,1,8,0,0,8,38,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,850,"        return getMaximumTextLength(locale);
",0,0,0,1,2,1,4,0,0,4,36,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,903,"        long floor = roundFloor(instant);
",2,0,0,1,2,0,4,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,904,"        long ceiling = roundCeiling(instant);
",2,0,0,1,2,0,4,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,906,"        long diffFromFloor = instant - floor;
",6,1,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,907,"        long diffToCeiling = ceiling - instant;
",6,1,0,0,0,0,0,0,0,7,39,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,909,"        if (diffFromFloor <= diffToCeiling) {
",4,1,0,1,3,0,0,0,0,5,37,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,911,"            return floor;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,913,"            return ceiling;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,927,"        long floor = roundFloor(instant);
",2,0,0,1,2,0,4,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,928,"        long ceiling = roundCeiling(instant);
",2,0,0,1,2,0,4,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,930,"        long diffFromFloor = instant - floor;
",6,1,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,931,"        long diffToCeiling = ceiling - instant;
",6,1,0,0,0,0,0,0,0,7,39,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,933,"        if (diffToCeiling <= diffFromFloor) {
",4,1,0,1,3,0,0,0,0,5,37,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,935,"            return ceiling;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,937,"            return floor;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,955,"        long floor = roundFloor(instant);
",2,0,0,1,2,0,4,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,956,"        long ceiling = roundCeiling(instant);
",2,0,0,1,2,0,4,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,958,"        long diffFromFloor = instant - floor;
",6,1,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,959,"        long diffToCeiling = ceiling - instant;
",6,1,0,0,0,0,0,0,0,7,39,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,961,"        if (diffFromFloor < diffToCeiling) {
",4,1,0,1,3,0,0,0,0,5,36,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,963,"            return floor;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,964,"        } else if (diffToCeiling < diffFromFloor) {
",4,1,0,1,4,0,0,0,0,5,43,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,966,"            return ceiling;
",2,0,0,0,0,1,0,0,0,2,15,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,970,"            if ((get(ceiling) & 1) == 0) {
",0,2,0,3,7,0,4,0,0,6,30,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,971,"                return ceiling;
",2,0,0,0,0,1,0,0,0,2,15,9,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,973,"            return floor;
",2,0,0,0,0,1,0,0,0,2,13,7,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,994,"        return instant - roundFloor(instant);
",2,1,0,1,2,1,4,0,0,7,37,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDateTimeField,14,1003,"        return ""DateTimeField["" + getName() + ']';
",0,1,0,2,4,1,2,0,0,5,42,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,691,"            throw new IllegalArgumentException(""Id must not be null"");
",0,0,0,1,2,0,0,2,0,4,58,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,145,"                        } catch (RuntimeException ex) {
",2,0,0,1,4,0,0,2,0,4,31,14,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,149,"                            temp = forTimeZone(TimeZone.getDefault());
",2,0,0,2,4,0,6,0,0,9,42,14,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,151,"                    } catch (IllegalArgumentException ex) {
",2,0,0,1,4,0,0,2,0,4,39,12,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,155,"                        temp = UTC;
",4,0,0,0,0,0,0,0,0,5,11,12,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,176,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setDefault""));
",0,0,0,2,4,0,4,2,0,7,70,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,179,"            throw new IllegalArgumentException(""The datetime zone must not be null"");
",0,0,0,1,2,0,0,2,0,4,73,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,205,"            return getDefault();
",0,0,0,1,2,1,2,0,0,2,20,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,208,"            return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,214,"        if (id.startsWith(""+"") || id.startsWith(""-"")) {
",0,1,0,3,7,0,8,0,0,11,47,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,215,"            int offset = parseOffset(id);
",2,0,0,1,2,0,4,0,0,6,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,216,"            if (offset == 0L) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,217,"                return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,219,"                id = printOffset(offset);
",2,0,0,1,2,0,4,0,0,7,25,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,220,"                return fixedOffsetZone(id, offset);
",0,0,0,1,2,1,6,0,0,6,35,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,223,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");
",2,1,0,1,2,0,0,2,0,7,90,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,237,"        return forOffsetHoursMinutes(hoursOffset, 0);
",0,0,0,1,2,1,4,0,0,4,45,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,254,"        if (hoursOffset == 0 && minutesOffset == 0) {
",4,3,0,1,3,0,0,0,0,7,45,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,255,"            return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,257,"        if (minutesOffset < 0 || minutesOffset > 59) {
",4,3,0,1,3,0,0,0,0,7,46,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,258,"            throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);
",2,1,0,1,2,0,0,2,0,6,77,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,260,"        int offset = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,262,"            int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);
",2,0,0,1,2,0,6,0,0,8,62,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,263,"            if (hoursInMinutes < 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,264,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);
",4,0,0,1,2,0,6,0,0,12,67,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,266,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);
",2,0,0,1,2,0,8,0,0,11,66,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,268,"            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
",6,0,0,1,2,0,6,0,0,13,85,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,271,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,269,"        } catch (ArithmeticException ex) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,270,"            throw new IllegalArgumentException(""Offset is too large"");
",0,0,0,1,2,0,0,2,0,3,58,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,272,"        return forOffsetMillis(offset);
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,282,"        String id = printOffset(millisOffset);
",2,0,0,1,2,0,4,2,0,8,38,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,283,"        return fixedOffsetZone(id, millisOffset);
",0,0,0,1,2,1,6,0,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,302,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,303,"            return getDefault();
",0,0,0,1,2,1,2,0,0,2,20,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,305,"        final String id = zone.getID();
",2,0,0,1,2,1,4,2,0,9,31,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,306,"        if (id.equals(""UTC"")) {
",0,0,0,2,5,0,4,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,307,"            return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,311,"        DateTimeZone dtz = null;
",2,0,0,0,0,0,0,2,0,4,24,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,312,"        String convId = getConvertedId(id);
",2,0,0,1,2,0,4,2,0,8,35,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,313,"        if (convId != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,314,"            dtz = cProvider.getZone(convId);
",2,0,0,1,2,0,6,0,0,9,32,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,316,"        if (dtz == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,317,"            dtz = cProvider.getZone(id);
",2,0,0,1,2,0,6,0,0,9,28,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,319,"        if (dtz != null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,320,"            return dtz;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,324,"        if (convId == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,325,"            convId = zone.getID();
",2,0,0,1,2,0,4,0,0,7,22,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,326,"            if (convId.startsWith(""GMT+"") || convId.startsWith(""GMT-"")) {
",0,1,0,3,7,0,8,0,0,11,61,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,327,"                convId = convId.substring(3);
",2,0,0,1,2,0,4,0,0,7,29,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,328,"                int offset = parseOffset(convId);
",2,0,0,1,2,0,4,0,0,6,33,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,329,"                if (offset == 0L) {
",2,1,0,1,3,0,0,0,0,3,19,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,330,"                    return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,11,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,332,"                    convId = printOffset(offset);
",2,0,0,1,2,0,4,0,0,7,29,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,333,"                    return fixedOffsetZone(convId, offset);
",0,0,0,1,2,1,6,0,0,6,39,11,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,337,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");
",2,1,0,1,2,0,0,2,0,7,90,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,349,"        if (offset == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,350,"            return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,352,"        if (iFixedOffsetCache == null) {
",2,1,0,1,3,0,0,0,0,3,32,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,353,"            iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();
",2,0,0,1,2,0,0,8,0,11,71,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,356,"        Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);
",2,0,0,1,2,0,6,4,0,12,56,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,357,"        if (ref != null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,358,"            zone = ref.get();
",2,0,0,1,2,0,4,0,0,7,17,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,359,"            if (zone != null) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,360,"                return zone;
",2,0,0,0,0,1,0,0,0,2,12,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,363,"        zone = new FixedDateTimeZone(id, null, offset, offset);
",8,0,0,1,2,0,0,2,0,12,55,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,364,"        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));
",2,0,0,2,4,0,6,4,0,12,65,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,365,"        return zone;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,374,"        return cAvailableIDs;
",2,0,0,0,0,1,0,0,0,2,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,387,"        return cProvider;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,401,"        SecurityManager sm = System.getSecurityManager();
",2,0,0,1,2,0,4,2,0,8,49,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,402,"        if (sm != null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,403,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setProvider""));
",0,0,0,2,4,0,4,2,0,7,71,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,405,"        setProvider0(provider);
",0,0,0,1,2,0,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,406,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,420,"            throw new IllegalArgumentException
",0,0,0,0,0,0,0,2,0,2,34,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,424,"            throw new IllegalArgumentException(""The provider doesn't support UTC"");
",0,0,0,1,2,0,0,2,0,3,71,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,427,"            throw new IllegalArgumentException(""Invalid UTC zone provided"");
",0,0,0,1,2,0,0,2,0,3,64,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,450,"                    provider = (Provider) Class.forName(providerClass).newInstance();
",2,0,0,3,6,0,8,2,0,13,65,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,454,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,451,"                } catch (Exception ex) {
",2,0,0,1,4,0,0,2,0,4,24,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,452,"                    Thread thread = Thread.currentThread();
",2,0,0,1,2,0,4,2,0,8,39,11,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,453,"                    thread.getThreadGroup().uncaughtException(thread, ex);
",0,0,0,2,4,0,10,0,0,10,54,12,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,456,"        } catch (SecurityException ex) {
",2,0,0,1,4,0,0,2,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,463,"            } catch (Exception ex) {
",2,0,0,1,4,0,0,2,0,4,24,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,464,"                Thread thread = Thread.currentThread();
",2,0,0,1,2,0,4,2,0,8,39,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,465,"                thread.getThreadGroup().uncaughtException(thread, ex);
",0,0,0,2,4,0,10,0,0,10,54,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,470,"            provider = new UTCProvider();
",2,0,0,1,2,0,0,2,0,5,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,486,"        return cNameProvider;
",2,0,0,0,0,1,0,0,0,2,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,500,"        SecurityManager sm = System.getSecurityManager();
",2,0,0,1,2,0,4,2,0,8,49,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,501,"        if (sm != null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,502,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setNameProvider""));
",0,0,0,2,4,0,4,2,0,7,75,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,504,"        setNameProvider0(nameProvider);
",0,0,0,1,2,0,4,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,505,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,534,"                    nameProvider = (NameProvider) Class.forName(providerClass).newInstance();
",2,0,0,3,6,0,8,2,0,13,73,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,538,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,535,"                } catch (Exception ex) {
",2,0,0,1,4,0,0,2,0,4,24,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,536,"                    Thread thread = Thread.currentThread();
",2,0,0,1,2,0,4,2,0,8,39,11,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,537,"                    thread.getThreadGroup().uncaughtException(thread, ex);
",0,0,0,2,4,0,10,0,0,10,54,12,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,540,"        } catch (SecurityException ex) {
",2,0,0,1,4,0,0,2,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,559,"        Map<String, String> map = cZoneIdConversion;
",4,0,0,0,0,0,0,6,0,10,44,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,560,"        if (map == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,562,"            map = new HashMap<String, String>();
",2,0,0,1,2,0,0,6,0,9,36,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,563,"            map.put(""GMT"", ""UTC"");
",0,0,0,1,2,0,4,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,564,"            map.put(""WET"", ""WET"");
",0,0,0,1,2,0,4,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,565,"            map.put(""CET"", ""CET"");
",0,0,0,1,2,0,4,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,566,"            map.put(""MET"", ""CET"");
",0,0,0,1,2,0,4,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,567,"            map.put(""ECT"", ""CET"");
",0,0,0,1,2,0,4,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,568,"            map.put(""EET"", ""EET"");
",0,0,0,1,2,0,4,0,0,6,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,569,"            map.put(""MIT"", ""Pacific/Apia"");
",0,0,0,1,2,0,4,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,570,"            map.put(""HST"", ""Pacific/Honolulu"");  // JDK 1.1 compatible
",0,0,0,1,2,0,4,0,0,6,58,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,571,"            map.put(""AST"", ""America/Anchorage"");
",0,0,0,1,2,0,4,0,0,6,36,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,572,"            map.put(""PST"", ""America/Los_Angeles"");
",0,0,0,1,2,0,4,0,0,6,38,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,573,"            map.put(""MST"", ""America/Denver"");  // JDK 1.1 compatible
",0,0,0,1,2,0,4,0,0,6,56,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,574,"            map.put(""PNT"", ""America/Phoenix"");
",0,0,0,1,2,0,4,0,0,6,34,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,575,"            map.put(""CST"", ""America/Chicago"");
",0,0,0,1,2,0,4,0,0,6,34,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,576,"            map.put(""EST"", ""America/New_York"");  // JDK 1.1 compatible
",0,0,0,1,2,0,4,0,0,6,58,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,577,"            map.put(""IET"", ""America/Indiana/Indianapolis"");
",0,0,0,1,2,0,4,0,0,6,47,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,578,"            map.put(""PRT"", ""America/Puerto_Rico"");
",0,0,0,1,2,0,4,0,0,6,38,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,579,"            map.put(""CNT"", ""America/St_Johns"");
",0,0,0,1,2,0,4,0,0,6,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,580,"            map.put(""AGT"", ""America/Argentina/Buenos_Aires"");
",0,0,0,1,2,0,4,0,0,6,49,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,581,"            map.put(""BET"", ""America/Sao_Paulo"");
",0,0,0,1,2,0,4,0,0,6,36,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,582,"            map.put(""ART"", ""Africa/Cairo"");
",0,0,0,1,2,0,4,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,583,"            map.put(""CAT"", ""Africa/Harare"");
",0,0,0,1,2,0,4,0,0,6,32,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,584,"            map.put(""EAT"", ""Africa/Addis_Ababa"");
",0,0,0,1,2,0,4,0,0,6,37,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,585,"            map.put(""NET"", ""Asia/Yerevan"");
",0,0,0,1,2,0,4,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,586,"            map.put(""PLT"", ""Asia/Karachi"");
",0,0,0,1,2,0,4,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,587,"            map.put(""IST"", ""Asia/Kolkata"");
",0,0,0,1,2,0,4,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,588,"            map.put(""BST"", ""Asia/Dhaka"");
",0,0,0,1,2,0,4,0,0,6,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,589,"            map.put(""VST"", ""Asia/Ho_Chi_Minh"");
",0,0,0,1,2,0,4,0,0,6,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,590,"            map.put(""CTT"", ""Asia/Shanghai"");
",0,0,0,1,2,0,4,0,0,6,32,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,591,"            map.put(""JST"", ""Asia/Tokyo"");
",0,0,0,1,2,0,4,0,0,6,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,592,"            map.put(""ACT"", ""Australia/Darwin"");
",0,0,0,1,2,0,4,0,0,6,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,593,"            map.put(""AET"", ""Australia/Sydney"");
",0,0,0,1,2,0,4,0,0,6,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,594,"            map.put(""SST"", ""Pacific/Guadalcanal"");
",0,0,0,1,2,0,4,0,0,6,38,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,595,"            map.put(""NST"", ""Pacific/Auckland"");
",0,0,0,1,2,0,4,0,0,6,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,596,"            cZoneIdConversion = map;
",4,0,0,0,0,0,0,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,598,"        return map.get(id);
",0,0,0,1,2,1,6,0,0,6,19,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,604,"        Chronology chrono = new BaseChronology() {
",2,0,0,1,3,0,0,4,0,6,42,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,618,"        return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);
",0,0,0,4,8,1,10,0,0,11,72,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,631,"        StringBuffer buf = new StringBuffer();
",2,0,0,1,2,0,0,4,0,6,38,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,632,"        if (offset >= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,633,"            buf.append('+');
",0,0,0,1,2,0,4,0,0,5,16,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,635,"            buf.append('-');
",0,0,0,1,2,0,4,0,0,5,16,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,636,"            offset = -offset;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,639,"        int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,0,0,0,0,0,0,9,55,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,640,"        FormatUtils.appendPaddedInteger(buf, hours, 2);
",0,0,0,1,2,0,8,0,0,8,47,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,641,"        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;
",8,1,0,1,2,0,0,0,0,10,58,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,643,"        int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,9,59,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,644,"        buf.append(':');
",0,0,0,1,2,0,4,0,0,5,16,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,645,"        FormatUtils.appendPaddedInteger(buf, minutes, 2);
",0,0,0,1,2,0,8,0,0,8,49,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,646,"        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;
",8,1,0,0,0,0,0,0,0,10,56,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,647,"        if (offset == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,648,"            return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,651,"        int seconds = offset / DateTimeConstants.MILLIS_PER_SECOND;
",8,1,0,0,0,0,0,0,0,9,59,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,652,"        buf.append(':');
",0,0,0,1,2,0,4,0,0,5,16,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,653,"        FormatUtils.appendPaddedInteger(buf, seconds, 2);
",0,0,0,1,2,0,8,0,0,8,49,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,654,"        offset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;
",8,1,0,0,0,0,0,0,0,10,56,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,655,"        if (offset == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,656,"            return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,659,"        buf.append('.');
",0,0,0,1,2,0,4,0,0,5,16,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,660,"        FormatUtils.appendPaddedInteger(buf, offset, 3);
",0,0,0,1,2,0,8,0,0,8,48,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,661,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,670,"        if (cOffsetFormatter == null) {
",2,1,0,1,3,0,0,0,0,3,31,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,671,"            cOffsetFormatter = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,49,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,675,"        return cOffsetFormatter;
",2,0,0,0,0,1,0,0,0,2,24,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,729,"        return getShortName(instant, null);
",0,0,0,1,2,1,4,0,0,5,35,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,744,"        if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,745,"            locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,747,"        String nameKey = getNameKey(instant);
",2,0,0,1,2,0,4,2,0,8,37,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,748,"        if (nameKey == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,749,"            return iID;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,751,"        String name = cNameProvider.getShortName(locale, iID, nameKey);
",2,0,0,1,2,0,10,2,0,14,63,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,752,"        if (name != null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,753,"            return name;
",2,0,0,0,0,1,0,0,0,2,12,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,755,"        return printOffset(getOffset(instant));
",0,0,0,2,4,1,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,769,"        return getName(instant, null);
",0,0,0,1,2,1,4,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,784,"        if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,785,"            locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,787,"        String nameKey = getNameKey(instant);
",2,0,0,1,2,0,4,2,0,8,37,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,788,"        if (nameKey == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,789,"            return iID;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,791,"        String name = cNameProvider.getName(locale, iID, nameKey);
",2,0,0,1,2,0,10,2,0,14,58,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,792,"        if (name != null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,793,"            return name;
",2,0,0,0,0,1,0,0,0,2,12,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,795,"        return printOffset(getOffset(instant));
",0,0,0,2,4,1,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,813,"        if (instant == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,814,"            return getOffset(DateTimeUtils.currentTimeMillis());
",0,0,0,2,4,1,6,0,0,6,52,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,816,"        return getOffset(instant.getMillis());
",0,0,0,2,4,1,6,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,844,"        return getOffset(instant) == getStandardOffset(instant);
",0,1,0,2,4,1,8,0,0,9,56,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,882,"        final int offsetLocal = getOffset(instantLocal);
",2,0,0,1,2,1,4,0,0,7,48,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,884,"        final long instantAdjusted = instantLocal - offsetLocal;
",6,1,0,0,0,1,0,0,0,8,56,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,885,"        final int offsetAdjusted = getOffset(instantAdjusted);
",2,0,0,1,2,1,4,0,0,7,54,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,887,"        if (offsetLocal != offsetAdjusted) {
",4,1,0,1,3,0,0,0,0,5,36,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,890,"            if ((offsetLocal - offsetAdjusted) < 0) {
",4,2,0,2,5,0,0,0,0,6,41,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,894,"                long nextLocal = nextTransition(instantAdjusted);
",2,0,0,1,2,0,4,0,0,6,49,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,895,"                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
",6,1,0,1,2,0,2,0,0,9,66,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,896,"                if (nextLocal != nextAdjusted) {
",4,1,0,1,3,0,0,0,0,5,32,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,897,"                    return offsetLocal;
",2,0,0,0,0,1,0,0,0,2,19,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,899,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,900,"        } else if (offsetLocal >= 0) {
",2,1,0,1,4,0,0,0,0,3,30,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,901,"            long prev = previousTransition(instantAdjusted);
",2,0,0,1,2,0,4,0,0,6,48,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,902,"            if (prev < instantAdjusted) {
",4,1,0,1,3,0,0,0,0,5,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,903,"                int offsetPrev = getOffset(prev);
",2,0,0,1,2,0,4,0,0,6,33,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,904,"                int diff = offsetPrev - offsetLocal;
",6,1,0,0,0,0,0,0,0,7,36,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,905,"                if (instantAdjusted - prev <= diff) {
",6,2,0,1,3,0,0,0,0,8,37,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,906,"                    return offsetPrev;
",2,0,0,0,0,1,0,0,0,2,18,11,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,910,"        return offsetAdjusted;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,928,"            throw new ArithmeticException(""Adding time zone offset caused overflow"");
",0,0,0,1,2,0,0,2,0,3,73,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,982,"            if (strict || offsetLocal < 0) {
",4,2,0,1,3,0,0,0,0,6,32,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,984,"                long nextLocal = nextTransition(instantLocal - offsetLocal);
",6,1,0,1,2,0,2,0,0,9,60,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,985,"                if (nextLocal == (instantLocal - offsetLocal)) {
",6,2,0,2,5,0,0,0,0,8,48,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,986,"                    nextLocal = Long.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,7,27,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,988,"                long nextAdjusted = nextTransition(instantLocal - offset);
",6,1,0,1,2,0,2,0,0,9,58,9,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,989,"                if (nextAdjusted == (instantLocal - offset)) {
",6,2,0,2,5,0,0,0,0,8,46,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,990,"                    nextAdjusted = Long.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,7,30,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,992,"                if (nextLocal != nextAdjusted) {
",4,1,0,1,3,0,0,0,0,5,32,8,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,994,"                    if (strict) {
",2,0,0,1,3,0,0,0,0,2,13,10,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,996,"                        throw new IllegalArgumentException(""Illegal instant due to time zone offset transition: "" +
",0,1,0,0,1,0,0,2,0,4,91,13,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,1003,"                        offset = offsetLocal;
",4,0,0,0,0,0,0,0,0,5,21,12,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,1012,"            throw new ArithmeticException(""Subtracting time zone offset caused overflow"");
",0,0,0,1,2,0,0,2,0,3,78,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,1028,"        if (newZone == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,1029,"            newZone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,36,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,1031,"        if (newZone == this) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,1032,"            return oldInstant;
",2,0,0,0,0,1,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,1034,"        long instantLocal = convertUTCToLocal(oldInstant);
",2,0,0,1,2,0,4,0,0,6,50,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,1035,"        return newZone.convertLocalToUTC(instantLocal, false, oldInstant);
",0,0,0,1,2,1,8,0,0,9,66,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,1145,"        if (isFixed()) {
",0,0,0,2,5,0,2,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,1146,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,1149,"            localDateTime.toDateTime(this);
",0,0,0,1,2,0,4,0,0,4,31,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,1150,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,1151,"        } catch (IllegalArgumentException ex) {
",2,0,0,1,4,0,0,2,0,4,39,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,1152,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,1167,"        long instantBefore = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;
",8,2,0,0,0,0,0,0,0,10,69,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,1168,"        long instantAfter = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;
",8,2,0,0,0,0,0,0,0,10,68,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,1169,"        long offsetBefore = getOffset(instantBefore);
",2,0,0,1,2,0,4,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,1170,"        long offsetAfter = getOffset(instantAfter);
",2,0,0,1,2,0,4,0,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,1171,"        if (offsetBefore <= offsetAfter) {
",4,1,0,1,3,0,0,0,0,5,34,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,1172,"            return instant;  // not an overlap (less than is a gap, equal is normal case)
",2,0,0,1,2,1,0,0,0,2,77,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,1176,"        long diff = offsetBefore - offsetAfter;
",6,1,0,0,0,0,0,0,0,7,39,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,1177,"        long transition = nextTransition(instantBefore);
",2,0,0,1,2,0,4,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,1178,"        long overlapStart = transition - diff;
",6,1,0,0,0,0,0,0,0,7,38,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,1179,"        long overlapEnd = transition + diff;
",6,1,0,0,0,0,0,0,0,7,36,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,1180,"        if (instant < overlapStart || instant >= overlapEnd) {
",8,3,0,1,3,0,0,0,0,11,54,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,1181,"          return instant;  // not an overlap
",2,0,0,0,0,1,0,0,0,2,34,6,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,1185,"        long afterStart = instant - overlapStart;
",6,1,0,0,0,0,0,0,0,7,41,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,1186,"        if (afterStart >= diff) {
",4,1,0,1,3,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,1188,"          return earlierOrLater ? instant : instant - diff;
",8,1,0,0,0,1,0,0,0,9,49,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,1191,"          return earlierOrLater ? instant + diff : instant;
",8,1,0,0,0,1,0,0,0,9,49,7,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,1233,"        return java.util.TimeZone.getTimeZone(iID);
",6,0,0,1,2,1,4,0,0,10,43,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,1258,"        return getID();
",0,0,0,1,2,1,2,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,1268,"        return new Stub(iID);
",2,0,0,1,2,1,0,2,0,4,21,5,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,410,"        return getField(chronology).isSupported();
",0,0,0,2,4,1,6,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,419,"        return getName();
",0,0,0,1,2,1,2,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,41,"public abstract class DateTimeFieldType implements Serializable {
",2,0,0,0,1,2,0,2,0,6,65,1,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,774,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,775,"            iDateStyle = dateStyle;
",4,0,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,776,"            iTimeStyle = timeStyle;
",4,0,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,777,"            iType = type;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,778,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,767,"        private static final Map<String, DateTimeFormatter> cCache = new HashMap<String, DateTimeFormatter>();  // manual sync
",2,0,0,1,2,3,0,12,0,17,118,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,781,"            return 40;  // guess
",0,0,0,0,0,1,0,0,0,0,20,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,787,"            DateTimePrinter p = getFormatter(locale).getPrinter();
",2,0,0,2,4,0,6,2,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,788,"            p.printTo(buf, instant, chrono, displayOffset, displayZone, locale);
",0,0,0,1,2,0,16,0,0,16,68,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,789,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,794,"            DateTimePrinter p = getFormatter(locale).getPrinter();
",2,0,0,2,4,0,6,2,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,795,"            p.printTo(out, instant, chrono, displayOffset, displayZone, locale);
",0,0,0,1,2,0,16,0,0,16,68,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,796,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,799,"            DateTimePrinter p = getFormatter(locale).getPrinter();
",2,0,0,2,4,0,6,2,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,800,"            p.printTo(buf, partial, locale);
",0,0,0,1,2,0,10,0,0,10,32,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,801,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,804,"            DateTimePrinter p = getFormatter(locale).getPrinter();
",2,0,0,2,4,0,6,2,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,805,"            p.printTo(out, partial, locale);
",0,0,0,1,2,0,10,0,0,10,32,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,806,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,809,"            return 40;  // guess
",0,0,0,0,0,1,0,0,0,0,20,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,813,"            DateTimeParser p = getFormatter(bucket.getLocale()).getParser();
",2,0,0,3,6,0,8,2,0,12,64,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,814,"            return p.parseInto(bucket, text, position);
",0,0,0,1,2,1,10,0,0,10,43,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,818,"            locale = (locale == null ? Locale.getDefault() : locale);
",6,1,0,2,4,0,4,0,0,12,57,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,819,"            String key = Integer.toString(iType + (iDateStyle << 4) + (iTimeStyle << 8)) + locale.toString();
",8,4,0,4,8,0,8,2,0,22,97,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,820,"            DateTimeFormatter f = null;
",2,0,0,0,0,0,0,2,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,821,"            synchronized (cCache) {
",2,0,0,1,3,0,0,0,0,2,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,822,"                f = cCache.get(key);
",2,0,0,1,2,0,6,0,0,9,20,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,823,"                if (f == null) {
",2,1,0,1,3,0,0,0,0,3,16,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,824,"                    String pattern = getPattern(locale);
",2,0,0,1,2,0,4,2,0,8,36,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,825,"                    f = DateTimeFormat.forPattern(pattern);
",2,0,0,1,2,0,6,0,0,9,39,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,826,"                    cCache.put(key, f);
",0,0,0,1,2,0,8,0,0,8,19,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,828,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,829,"            return f;
",2,0,0,0,0,1,0,0,0,2,9,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,833,"            DateFormat f = null;
",2,0,0,0,0,0,0,2,0,4,20,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,834,"            switch (iType) {
",2,0,0,1,3,0,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,836,"                    f = DateFormat.getDateInstance(iDateStyle, locale);
",2,0,0,1,2,0,8,0,0,11,51,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,837,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,839,"                    f = DateFormat.getTimeInstance(iTimeStyle, locale);
",2,0,0,1,2,0,8,0,0,11,51,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,840,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,842,"                    f = DateFormat.getDateTimeInstance(iDateStyle, iTimeStyle, locale);
",2,0,0,1,2,0,10,0,0,13,67,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,845,"            if (f instanceof SimpleDateFormat == false) {
",2,1,0,1,3,0,0,2,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,846,"                throw new IllegalArgumentException(""No datetime pattern for locale: "" + locale);
",2,1,0,1,2,0,0,2,0,6,80,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,848,"            return ((SimpleDateFormat) f).toPattern();
",2,0,0,3,6,1,2,2,0,6,42,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,387,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,388,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,194,"        return createFormatterForStyle(style);
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,212,"        DateTimeFormatter formatter = createFormatterForStyle(style);
",2,0,0,1,2,0,4,2,0,8,61,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,213,"        if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,214,"            locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,217,"        return ((StyleFormatter) formatter.getPrinter()).getPattern(locale);
",0,0,0,4,8,1,8,2,0,10,68,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,230,"        return createFormatterForStyleIndex(SHORT, NONE);
",0,0,0,1,2,1,6,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,242,"        return createFormatterForStyleIndex(NONE, SHORT);
",0,0,0,1,2,1,6,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,254,"        return createFormatterForStyleIndex(SHORT, SHORT);
",0,0,0,1,2,1,6,0,0,6,50,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,267,"        return createFormatterForStyleIndex(MEDIUM, NONE);
",0,0,0,1,2,1,6,0,0,6,50,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,279,"        return createFormatterForStyleIndex(NONE, MEDIUM);
",0,0,0,1,2,1,6,0,0,6,50,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,291,"        return createFormatterForStyleIndex(MEDIUM, MEDIUM);
",0,0,0,1,2,1,6,0,0,6,52,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,304,"        return createFormatterForStyleIndex(LONG, NONE);
",0,0,0,1,2,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,316,"        return createFormatterForStyleIndex(NONE, LONG);
",0,0,0,1,2,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,328,"        return createFormatterForStyleIndex(LONG, LONG);
",0,0,0,1,2,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,341,"        return createFormatterForStyleIndex(FULL, NONE);
",0,0,0,1,2,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,353,"        return createFormatterForStyleIndex(NONE, FULL);
",0,0,0,1,2,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,365,"        return createFormatterForStyleIndex(FULL, FULL);
",0,0,0,1,2,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,377,"        parsePatternTo(builder, pattern);
",0,0,0,1,2,0,6,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,378,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,410,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,416,"                builder.appendEraText();
",0,0,0,1,2,0,4,0,0,4,24,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,417,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,419,"                builder.appendCenturyOfEra(tokenLen, tokenLen);
",0,0,0,1,2,0,8,0,0,8,47,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,420,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,424,"                if (tokenLen == 2) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,425,"                    boolean lenientParse = true;
",2,0,0,0,0,0,0,0,0,3,28,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,428,"                    if (i + 1 < length) {
",4,2,0,1,3,0,0,0,0,6,21,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,429,"                        indexRef[0]++;
",0,0,1,1,2,0,0,0,0,3,14,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,430,"                        if (isNumericToken(parseToken(pattern, indexRef))) {
",0,0,0,3,7,0,8,0,0,8,52,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,434,"                            lenientParse = false;
",2,0,0,0,0,0,0,0,0,4,21,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,436,"                        indexRef[0]--;
",0,0,1,1,2,0,0,0,0,3,14,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,440,"                    switch (c) {
",2,0,0,1,3,0,0,0,0,2,12,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,442,"                        builder.appendTwoDigitWeekyear
",0,0,0,0,0,0,4,0,0,4,30,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,444,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,448,"                        builder.appendTwoDigitYear(new DateTime().getYear() - 30, lenientParse);
",0,1,0,3,6,0,8,2,0,11,72,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,451,"                } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,453,"                    int maxDigits = 9;
",2,0,0,0,0,0,0,0,0,2,18,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,456,"                    if (i + 1 < length) {
",4,2,0,1,3,0,0,0,0,6,21,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,457,"                        indexRef[0]++;
",0,0,1,1,2,0,0,0,0,3,14,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,458,"                        if (isNumericToken(parseToken(pattern, indexRef))) {
",0,0,0,3,7,0,8,0,0,8,52,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,460,"                            maxDigits = tokenLen;
",4,0,0,0,0,0,0,0,0,5,21,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,462,"                        indexRef[0]--;
",0,0,1,1,2,0,0,0,0,3,14,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,465,"                    switch (c) {
",2,0,0,1,3,0,0,0,0,2,12,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,467,"                        builder.appendWeekyear(tokenLen, maxDigits);
",0,0,0,1,2,0,8,0,0,8,44,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,468,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,470,"                        builder.appendYear(tokenLen, maxDigits);
",0,0,0,1,2,0,8,0,0,8,40,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,471,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,473,"                        builder.appendYearOfEra(tokenLen, maxDigits);
",0,0,0,1,2,0,8,0,0,8,45,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,477,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,480,"                    if (tokenLen >= 4) {
",2,1,0,1,3,0,0,0,0,3,20,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,481,"                        builder.appendMonthOfYearText();
",0,0,0,1,2,0,4,0,0,4,32,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,483,"                        builder.appendMonthOfYearShortText();
",0,0,0,1,2,0,4,0,0,4,37,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,493,"                builder.appendHalfdayOfDayText();
",0,0,0,1,2,0,4,0,0,4,33,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,494,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,496,"                builder.appendClockhourOfHalfday(tokenLen);
",0,0,0,1,2,0,6,0,0,6,43,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,497,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,499,"                builder.appendHourOfDay(tokenLen);
",0,0,0,1,2,0,6,0,0,6,34,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,500,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,502,"                builder.appendClockhourOfDay(tokenLen);
",0,0,0,1,2,0,6,0,0,6,39,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,503,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,505,"                builder.appendHourOfHalfday(tokenLen);
",0,0,0,1,2,0,6,0,0,6,38,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,506,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,508,"                builder.appendMinuteOfHour(tokenLen);
",0,0,0,1,2,0,6,0,0,6,37,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,509,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,511,"                builder.appendSecondOfMinute(tokenLen);
",0,0,0,1,2,0,6,0,0,6,39,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,512,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,514,"                builder.appendFractionOfSecond(tokenLen, tokenLen);
",0,0,0,1,2,0,8,0,0,8,51,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,515,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,517,"                builder.appendDayOfWeek(tokenLen);
",0,0,0,1,2,0,6,0,0,6,34,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,518,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,520,"                if (tokenLen >= 4) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,521,"                    builder.appendDayOfWeekText();
",0,0,0,1,2,0,4,0,0,4,30,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,523,"                    builder.appendDayOfWeekShortText();
",0,0,0,1,2,0,4,0,0,4,35,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,525,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,527,"                builder.appendDayOfYear(tokenLen);
",0,0,0,1,2,0,6,0,0,6,34,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,528,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,530,"                builder.appendWeekOfWeekyear(tokenLen);
",0,0,0,1,2,0,6,0,0,6,39,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,531,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,533,"                if (tokenLen >= 4) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,534,"                    builder.appendTimeZoneName();
",0,0,0,1,2,0,4,0,0,4,29,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,536,"                    builder.appendTimeZoneShortName();
",0,0,0,1,2,0,4,0,0,4,34,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,538,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,540,"                if (tokenLen == 1) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,541,"                    builder.appendTimeZoneOffset(null, ""Z"", false, 2, 2);
",0,0,0,1,2,0,4,0,0,6,53,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,542,"                } else if (tokenLen == 2) {
",2,1,0,1,4,0,0,0,0,3,27,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,543,"                    builder.appendTimeZoneOffset(null, ""Z"", true, 2, 2);
",0,0,0,1,2,0,4,0,0,6,52,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,545,"                    builder.appendTimeZoneId();
",0,0,0,1,2,0,4,0,0,4,27,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,547,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,559,"                throw new IllegalArgumentException
",0,0,0,0,0,0,0,2,0,2,34,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,604,"                    if (i + 1 < length && pattern.charAt(i + 1) == '\'') {
",6,5,0,2,5,0,4,0,0,16,54,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,606,"                        i++;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,607,"                        buf.append(c);
",0,0,0,1,2,0,6,0,0,6,14,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,609,"                        inLiteral = !inLiteral;
",4,0,0,0,0,0,0,0,0,6,23,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,632,"        int tokenLen = token.length();
",2,0,0,1,2,0,4,0,0,6,30,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,633,"        if (tokenLen > 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,634,"            char c = token.charAt(0);
",2,0,0,1,2,0,4,0,0,6,25,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,635,"            switch (c) {
",2,0,0,1,3,0,0,0,0,2,12,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,654,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,656,"                if (tokenLen <= 2) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,657,"                    return true;
",0,0,0,0,0,1,0,0,0,1,12,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,662,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,675,"            throw new IllegalArgumentException(""Invalid pattern specification"");
",0,0,0,1,2,0,0,2,0,3,68,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,701,"        if (style == null || style.length() != 2) {
",2,3,0,2,5,0,4,0,0,9,43,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,702,"            throw new IllegalArgumentException(""Invalid style specification: "" + style);
",2,1,0,1,2,0,0,2,0,6,76,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,704,"        int dateStyle = selectStyle(style.charAt(0));
",2,0,0,2,4,0,6,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,705,"        int timeStyle = selectStyle(style.charAt(1));
",2,0,0,2,4,0,6,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,706,"        if (dateStyle == NONE && timeStyle == NONE) {
",8,3,0,1,3,0,0,0,0,11,45,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,707,"            throw new IllegalArgumentException(""Style '--' is invalid"");
",0,0,0,1,2,0,0,2,0,3,60,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,709,"        return createFormatterForStyleIndex(dateStyle, timeStyle);
",0,0,0,1,2,1,6,0,0,6,58,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,720,"        int index = ((dateStyle << 2) + dateStyle) + timeStyle;
",8,3,0,2,4,0,0,0,0,11,55,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,721,"        DateTimeFormatter f = null;
",2,0,0,0,0,0,0,2,0,4,27,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,722,"        synchronized (cStyleCache) {
",2,0,0,1,3,0,0,0,0,2,28,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,723,"            f = cStyleCache[index];
",2,0,1,1,2,0,0,0,0,7,23,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,724,"            if (f == null) {
",2,1,0,1,3,0,0,0,0,3,16,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,725,"                int type = DATETIME;
",4,0,0,0,0,0,0,0,0,4,20,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,726,"                if (dateStyle == NONE) {
",4,1,0,1,3,0,0,0,0,5,24,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,727,"                    type = TIME;
",4,0,0,0,0,0,0,0,0,5,12,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,728,"                } else if (timeStyle == NONE) {
",4,1,0,1,4,0,0,0,0,5,31,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,729,"                    type = DATE;
",4,0,0,0,0,0,0,0,0,5,12,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,731,"                StyleFormatter llf = new StyleFormatter(
",2,0,0,0,1,0,0,4,0,6,40,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,733,"                f = new DateTimeFormatter(llf, llf);
",6,0,0,1,2,0,0,2,0,9,36,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,734,"                cStyleCache[index] = f;
",2,0,1,1,2,0,0,0,0,7,23,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,736,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,737,"        return f;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,747,"        switch (ch) {
",2,0,0,1,3,0,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,749,"            return SHORT;
",2,0,0,0,0,1,0,0,0,2,13,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,751,"            return MEDIUM;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,753,"            return LONG;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,755,"            return FULL;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,757,"            return NONE;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormat,14,759,"            throw new IllegalArgumentException(""Invalid style character: "" + ch);
",2,1,0,1,2,0,0,2,0,6,69,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,145,"        return (iPrinter != null);
",2,1,0,1,2,1,0,0,0,3,26,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,163,"        return (iParser != null);
",2,1,0,1,2,1,0,0,0,3,25,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,188,"        if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {
",4,4,0,5,11,0,8,0,0,18,78,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,189,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,191,"        return new DateTimeFormatter(iPrinter, iParser, locale,
",6,0,0,0,1,1,0,2,0,8,55,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,202,"        return iLocale;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,221,"        if (iOffsetParsed == true) {
",2,1,0,1,3,0,0,0,0,4,28,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,222,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,224,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,
",6,0,0,0,1,1,0,2,0,8,56,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,235,"        return iOffsetParsed;
",2,0,0,0,0,1,0,0,0,2,21,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,256,"        if (iChrono == chrono) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,257,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,259,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,
",6,0,0,0,1,1,0,2,0,8,56,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,269,"        return iChrono;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,280,"        return iChrono;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,321,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,333,"        return iZone;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,367,"        if (iPivotYear == pivotYear || (iPivotYear != null && iPivotYear.equals(pivotYear))) {
",6,4,0,3,7,0,6,0,0,16,86,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,368,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,370,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,
",6,0,0,0,1,1,0,2,0,8,56,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,404,"        return withPivotYear(Integer.valueOf(pivotYear));
",0,0,0,2,4,1,8,0,0,8,49,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,414,"      return iPivotYear;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,437,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,
",6,0,0,0,1,1,0,2,0,8,56,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,448,"      return iDefaultYear;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,459,"        long millis = DateTimeUtils.getInstantMillis(instant);
",2,0,0,1,2,0,6,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,460,"        Chronology chrono = DateTimeUtils.getInstantChronology(instant);
",2,0,0,1,2,0,6,2,0,10,64,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,461,"        printTo(buf, millis, chrono);
",0,0,0,1,2,0,8,0,0,8,29,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,462,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,471,"        long millis = DateTimeUtils.getInstantMillis(instant);
",2,0,0,1,2,0,6,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,472,"        Chronology chrono = DateTimeUtils.getInstantChronology(instant);
",2,0,0,1,2,0,6,2,0,10,64,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,473,"        printTo(out, millis, chrono);
",0,0,0,1,2,0,8,0,0,8,29,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,474,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,484,"        appendable.append(print(instant));
",0,0,0,2,4,0,8,0,0,8,34,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,485,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,496,"        printTo(buf, instant, null);
",0,0,0,1,2,0,6,0,0,7,28,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,497,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,507,"        printTo(out, instant, null);
",0,0,0,1,2,0,6,0,0,7,28,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,508,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,519,"        appendable.append(print(instant));
",0,0,0,2,4,0,8,0,0,8,34,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,520,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,535,"            throw new IllegalArgumentException(""The partial must not be null"");
",0,0,0,1,2,0,0,2,0,4,67,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,550,"        DateTimePrinter printer = requirePrinter();
",2,0,0,1,2,0,2,2,0,6,43,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,551,"        if (partial == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,552,"            throw new IllegalArgumentException(""The partial must not be null"");
",0,0,0,1,2,0,0,2,0,4,67,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,554,"        printer.printTo(out, partial, iLocale);
",0,0,0,1,2,0,10,0,0,10,39,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,555,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,568,"        appendable.append(print(partial));
",0,0,0,2,4,0,8,0,0,8,34,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,569,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,582,"        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());
",2,0,0,3,6,0,4,4,0,10,78,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,583,"        printTo(buf, instant);
",0,0,0,1,2,0,6,0,0,6,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,584,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,597,"        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());
",2,0,0,3,6,0,4,4,0,10,78,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,598,"        printTo(buf, instant);
",0,0,0,1,2,0,6,0,0,6,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,599,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,618,"        DateTimePrinter printer = requirePrinter();
",2,0,0,1,2,0,2,2,0,6,43,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,619,"        chrono = selectChronology(chrono);
",2,0,0,1,2,0,4,0,0,7,34,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,622,"        DateTimeZone zone = chrono.getZone();
",2,0,0,1,2,0,4,2,0,8,37,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,623,"        int offset = zone.getOffset(instant);
",2,0,0,1,2,0,6,0,0,8,37,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,624,"        long adjustedInstant = instant + offset;
",6,1,0,0,0,0,0,0,0,7,40,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,625,"        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {
",8,5,0,3,7,0,0,0,0,13,65,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,627,"            zone = DateTimeZone.UTC;
",6,0,0,0,0,0,0,0,0,7,24,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,628,"            offset = 0;
",2,0,0,0,0,0,0,0,0,3,11,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,629,"            adjustedInstant = instant;
",4,0,0,0,0,0,0,0,0,5,26,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,631,"        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);
",0,0,0,2,4,0,18,0,0,18,79,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,632,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,635,"        DateTimePrinter printer = requirePrinter();
",2,0,0,1,2,0,2,2,0,6,43,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,636,"        chrono = selectChronology(chrono);
",2,0,0,1,2,0,4,0,0,7,34,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,639,"        DateTimeZone zone = chrono.getZone();
",2,0,0,1,2,0,4,2,0,8,37,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,640,"        int offset = zone.getOffset(instant);
",2,0,0,1,2,0,6,0,0,8,37,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,641,"        long adjustedInstant = instant + offset;
",6,1,0,0,0,0,0,0,0,7,40,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,642,"        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {
",8,5,0,3,7,0,0,0,0,13,65,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,644,"            zone = DateTimeZone.UTC;
",6,0,0,0,0,0,0,0,0,7,24,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,645,"            offset = 0;
",2,0,0,0,0,0,0,0,0,3,11,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,646,"            adjustedInstant = instant;
",4,0,0,0,0,0,0,0,0,5,26,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,648,"        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);
",0,0,0,2,4,0,18,0,0,18,79,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,649,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,659,"            throw new UnsupportedOperationException(""Printing not supported"");
",0,0,0,1,2,0,0,2,0,3,66,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,698,"        DateTimeParser parser = requireParser();
",2,0,0,1,2,0,2,2,0,6,40,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,699,"        if (instant == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,700,"            throw new IllegalArgumentException(""Instant must not be null"");
",0,0,0,1,2,0,0,2,0,4,63,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,703,"        long instantMillis = instant.getMillis();
",2,0,0,1,2,0,4,0,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,704,"        Chronology chrono = instant.getChronology();
",2,0,0,1,2,0,4,2,0,8,44,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,705,"        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
",4,1,0,2,4,0,8,0,0,13,78,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,706,"        chrono = selectChronology(chrono);
",2,0,0,1,2,0,4,0,0,7,34,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,708,"        DateTimeParserBucket bucket = new DateTimeParserBucket(
",2,0,0,0,1,0,0,4,0,6,55,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,710,"        int newPos = parser.parseInto(bucket, text, position);
",2,0,0,1,2,0,10,0,0,12,54,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,711,"        instant.setMillis(bucket.computeMillis(false, text));
",0,0,0,2,4,0,10,0,0,11,53,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,712,"        if (iOffsetParsed && bucket.getOffsetInteger() != null) {
",2,2,0,2,5,0,4,0,0,8,57,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,713,"            int parsedOffset = bucket.getOffsetInteger();
",2,0,0,1,2,0,4,0,0,6,45,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,714,"            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
",2,0,0,1,2,0,6,2,0,10,69,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,715,"            chrono = chrono.withZone(parsedZone);
",2,0,0,1,2,0,6,0,0,9,37,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,716,"        } else if (bucket.getZone() != null) {
",0,1,0,2,6,0,4,0,0,5,38,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,717,"            chrono = chrono.withZone(bucket.getZone());
",2,0,0,2,4,0,8,0,0,11,43,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,719,"        instant.setChronology(chrono);
",0,0,0,1,2,0,6,0,0,6,30,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,720,"        if (iZone != null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,721,"            instant.setZone(iZone);
",0,0,0,1,2,0,6,0,0,6,23,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,723,"        return newPos;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,739,"        DateTimeParser parser = requireParser();
",2,0,0,1,2,0,2,2,0,6,40,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,741,"        Chronology chrono = selectChronology(iChrono);
",2,0,0,1,2,0,4,2,0,8,46,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,742,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);
",10,0,0,1,2,0,0,4,0,14,101,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,743,"        int newPos = parser.parseInto(bucket, text, 0);
",2,0,0,1,2,0,8,0,0,10,47,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,744,"        if (newPos >= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,745,"            if (newPos >= text.length()) {
",2,1,0,2,5,0,4,0,0,7,30,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,746,"                return bucket.computeMillis(true, text);
",0,0,0,1,2,1,6,0,0,7,40,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,749,"            newPos = ~newPos;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,751,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));
",0,0,0,2,4,0,8,2,0,10,81,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,769,"        return parseLocalDateTime(text).toLocalDate();
",0,0,0,2,4,1,6,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,787,"        return parseLocalDateTime(text).toLocalTime();
",0,0,0,2,4,1,6,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,805,"        DateTimeParser parser = requireParser();
",2,0,0,1,2,0,2,2,0,6,40,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,807,"        Chronology chrono = selectChronology(null).withUTC();  // always use UTC, avoiding DST gaps
",2,0,0,2,4,0,4,2,0,9,91,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,808,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);
",10,0,0,1,2,0,0,4,0,14,101,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,809,"        int newPos = parser.parseInto(bucket, text, 0);
",2,0,0,1,2,0,8,0,0,10,47,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,810,"        if (newPos >= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,811,"            if (newPos >= text.length()) {
",2,1,0,2,5,0,4,0,0,7,30,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,812,"                long millis = bucket.computeMillis(true, text);
",2,0,0,1,2,0,6,0,0,9,47,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,813,"                if (bucket.getOffsetInteger() != null) {  // treat withOffsetParsed() as being true
",0,1,0,3,7,0,4,0,0,5,83,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,814,"                    int parsedOffset = bucket.getOffsetInteger();
",2,0,0,1,2,0,4,0,0,6,45,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,815,"                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
",2,0,0,1,2,0,6,2,0,10,69,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,816,"                    chrono = chrono.withZone(parsedZone);
",2,0,0,1,2,0,6,0,0,9,37,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,817,"                } else if (bucket.getZone() != null) {
",0,1,0,2,6,0,4,0,0,5,38,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,818,"                    chrono = chrono.withZone(bucket.getZone());
",2,0,0,2,4,0,8,0,0,11,43,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,820,"                return new LocalDateTime(millis, chrono);
",4,0,0,1,2,1,0,2,0,6,41,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,823,"            newPos = ~newPos;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,825,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));
",0,0,0,2,4,0,8,2,0,10,81,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,846,"        DateTimeParser parser = requireParser();
",2,0,0,1,2,0,2,2,0,6,40,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,848,"        Chronology chrono = selectChronology(null);
",2,0,0,1,2,0,2,2,0,7,43,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,849,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);
",10,0,0,1,2,0,0,4,0,14,101,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,850,"        int newPos = parser.parseInto(bucket, text, 0);
",2,0,0,1,2,0,8,0,0,10,47,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,851,"        if (newPos >= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,852,"            if (newPos >= text.length()) {
",2,1,0,2,5,0,4,0,0,7,30,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,853,"                long millis = bucket.computeMillis(true, text);
",2,0,0,1,2,0,6,0,0,9,47,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,854,"                if (iOffsetParsed && bucket.getOffsetInteger() != null) {
",2,2,0,2,5,0,4,0,0,8,57,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,855,"                    int parsedOffset = bucket.getOffsetInteger();
",2,0,0,1,2,0,4,0,0,6,45,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,856,"                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
",2,0,0,1,2,0,6,2,0,10,69,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,857,"                    chrono = chrono.withZone(parsedZone);
",2,0,0,1,2,0,6,0,0,9,37,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,858,"                } else if (bucket.getZone() != null) {
",0,1,0,2,6,0,4,0,0,5,38,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,859,"                    chrono = chrono.withZone(bucket.getZone());
",2,0,0,2,4,0,8,0,0,11,43,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,861,"                DateTime dt = new DateTime(millis, chrono);
",6,0,0,1,2,0,0,4,0,10,43,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,862,"                if (iZone != null) {
",2,1,0,1,3,0,0,0,0,3,20,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,863,"                    dt = dt.withZone(iZone);
",2,0,0,1,2,0,6,0,0,9,24,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,865,"                return dt;
",2,0,0,0,0,1,0,0,0,2,10,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,868,"            newPos = ~newPos;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,870,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));
",0,0,0,2,4,0,8,2,0,10,81,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,891,"        DateTimeParser parser = requireParser();
",2,0,0,1,2,0,2,2,0,6,40,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,893,"        Chronology chrono = selectChronology(null);
",2,0,0,1,2,0,2,2,0,7,43,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,894,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);
",10,0,0,1,2,0,0,4,0,14,101,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,895,"        int newPos = parser.parseInto(bucket, text, 0);
",2,0,0,1,2,0,8,0,0,10,47,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,896,"        if (newPos >= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,897,"            if (newPos >= text.length()) {
",2,1,0,2,5,0,4,0,0,7,30,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,898,"                long millis = bucket.computeMillis(true, text);
",2,0,0,1,2,0,6,0,0,9,47,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,899,"                if (iOffsetParsed && bucket.getOffsetInteger() != null) {
",2,2,0,2,5,0,4,0,0,8,57,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,900,"                    int parsedOffset = bucket.getOffsetInteger();
",2,0,0,1,2,0,4,0,0,6,45,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,901,"                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
",2,0,0,1,2,0,6,2,0,10,69,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,902,"                    chrono = chrono.withZone(parsedZone);
",2,0,0,1,2,0,6,0,0,9,37,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,903,"                } else if (bucket.getZone() != null) {
",0,1,0,2,6,0,4,0,0,5,38,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,904,"                    chrono = chrono.withZone(bucket.getZone());
",2,0,0,2,4,0,8,0,0,11,43,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,906,"                MutableDateTime dt = new MutableDateTime(millis, chrono);
",6,0,0,1,2,0,0,4,0,10,57,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,907,"                if (iZone != null) {
",2,1,0,1,3,0,0,0,0,3,20,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,908,"                    dt.setZone(iZone);
",0,0,0,1,2,0,6,0,0,6,18,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,910,"                return dt;
",2,0,0,0,0,1,0,0,0,2,10,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,913,"            newPos = ~newPos;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,915,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));
",0,0,0,2,4,0,8,2,0,10,81,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,924,"        DateTimeParser parser = iParser;
",4,0,0,0,0,0,0,2,0,6,32,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,925,"        if (parser == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,926,"            throw new UnsupportedOperationException(""Parsing not supported"");
",0,0,0,1,2,0,0,2,0,3,65,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,928,"        return parser;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,939,"        chrono = DateTimeUtils.getChronology(chrono);
",2,0,0,1,2,0,6,0,0,9,45,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,940,"        if (iChrono != null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,941,"            chrono = iChrono;
",4,0,0,0,0,0,0,0,0,5,17,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,943,"        if (iZone != null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,944,"            chrono = chrono.withZone(iZone);
",2,0,0,1,2,0,6,0,0,9,32,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatter,14,946,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1523,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1524,"            iType = type;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1525,"            iPivot = pivot;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1526,"            iLenientParse = lenientParse;
",4,0,0,0,0,0,0,0,0,5,29,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1527,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1530,"            return iLenientParse ? 4 : 2;
",2,0,0,0,0,1,0,0,0,2,29,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1534,"            int limit = text.length() - position;
",4,1,0,1,2,0,4,0,0,9,37,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1536,"            if (!iLenientParse) {
",2,0,0,1,3,0,0,0,0,3,21,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1537,"                limit = Math.min(2, limit);
",2,0,0,1,2,0,6,0,0,9,27,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1538,"                if (limit < 2) {
",2,1,0,1,3,0,0,0,0,3,16,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1539,"                    return ~position;
",2,0,0,0,0,1,0,0,0,3,17,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1542,"                boolean hasSignChar = false;
",2,0,0,0,0,0,0,0,0,3,28,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1543,"                boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1544,"                int length = 0;
",2,0,0,0,0,0,0,0,0,2,15,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1545,"                while (length < limit) {
",4,1,0,1,3,0,0,0,0,5,24,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1546,"                    char c = text.charAt(position + length);
",6,1,0,1,2,0,4,0,0,11,40,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1547,"                    if (length == 0 && (c == '-' || c == '+')) {
",6,5,0,2,5,0,0,0,0,13,44,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1548,"                        hasSignChar = true;
",2,0,0,0,0,0,0,0,0,4,19,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1549,"                        negative = c == '-';
",4,1,0,0,0,0,0,0,0,7,20,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1550,"                        if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1551,"                            length++;
",2,0,0,0,0,0,0,0,0,3,9,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1554,"                            position++;
",2,0,0,0,0,0,0,0,0,3,11,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1555,"                            limit--;
",2,0,0,0,0,0,0,0,0,3,8,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1557,"                        continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1559,"                    if (c < '0' || c > '9') {
",4,3,0,1,3,0,0,0,0,9,25,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1560,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1562,"                    length++;
",2,0,0,0,0,0,0,0,0,3,9,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1563,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1565,"                if (length == 0) {
",2,1,0,1,3,0,0,0,0,3,18,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1566,"                    return ~position;
",2,0,0,0,0,1,0,0,0,3,17,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1569,"                if (hasSignChar || length != 2) {
",4,2,0,1,3,0,0,0,0,6,33,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1571,"                    if (length >= 9) {
",2,1,0,1,3,0,0,0,0,3,18,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1574,"                        value = Integer.parseInt(text.substring(position, position += length));
",6,0,0,2,4,0,10,0,0,18,71,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1576,"                        int i = position;
",4,0,0,0,0,0,0,0,0,4,17,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1577,"                        if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1578,"                            i++;
",2,0,0,0,0,0,0,0,0,3,4,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1581,"                            value = text.charAt(i++) - '0';
",4,1,0,1,2,0,4,0,0,12,31,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1584,"                        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1582,"                        } catch (StringIndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,45,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1583,"                            return ~position;
",2,0,0,0,0,1,0,0,0,3,17,14,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1585,"                        position += length;
",4,0,0,0,0,0,0,0,0,5,19,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1586,"                        while (i < position) {
",4,1,0,1,3,0,0,0,0,5,22,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1587,"                            value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';
",8,5,0,4,8,0,4,0,0,20,63,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1589,"                        if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1590,"                            value = -value;
",4,0,0,0,0,0,0,0,0,6,15,13,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1594,"                    bucket.saveField(iType, value);
",0,0,0,1,2,0,8,0,0,8,31,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1595,"                    return position;
",2,0,0,0,0,1,0,0,0,2,16,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1600,"            char c = text.charAt(position);
",2,0,0,1,2,0,6,0,0,8,31,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1601,"            if (c < '0' || c > '9') {
",4,3,0,1,3,0,0,0,0,9,25,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1602,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1604,"            year = c - '0';
",4,1,0,0,0,0,0,0,0,7,15,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1605,"            c = text.charAt(position + 1);
",4,1,0,1,2,0,4,0,0,10,30,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1606,"            if (c < '0' || c > '9') {
",4,3,0,1,3,0,0,0,0,9,25,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1607,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1609,"            year = ((year << 3) + (year << 1)) + c - '0';
",8,5,0,3,6,0,0,0,0,15,45,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1611,"            int pivot = iPivot;
",4,0,0,0,0,0,0,0,0,4,19,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1613,"            if (bucket.getPivotYear() != null) {
",0,1,0,2,5,0,4,0,0,5,36,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1614,"                pivot = bucket.getPivotYear().intValue();
",2,0,0,2,4,0,6,0,0,9,41,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1617,"            int low = pivot - 50;
",4,1,0,0,0,0,0,0,0,5,21,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1620,"            if (low >= 0) {
",2,1,0,1,3,0,0,0,0,3,15,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1621,"                t = low % 100;
",4,1,0,0,0,0,0,0,0,6,14,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1623,"                t = 99 + ((low + 1) % 100);
",4,3,0,2,4,0,0,0,0,8,27,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1626,"            year += low + ((year < t) ? 100 : 0) - t;
",10,3,0,2,4,0,0,0,0,14,41,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1628,"            bucket.saveField(iType, year);
",0,0,0,1,2,0,8,0,0,8,30,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1629,"            return position + 2;
",2,1,0,0,0,1,0,0,0,3,20,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1633,"            return 2;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1639,"            int year = getTwoDigitYear(instant, chrono);
",2,0,0,1,2,0,6,0,0,8,44,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1640,"            if (year < 0) {
",2,1,0,1,3,0,0,0,0,3,15,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1641,"                buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1642,"                buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1644,"                FormatUtils.appendPaddedInteger(buf, year, 2);
",0,0,0,1,2,0,8,0,0,8,46,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1646,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1651,"            int year = getTwoDigitYear(instant, chrono);
",2,0,0,1,2,0,6,0,0,8,44,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1652,"            if (year < 0) {
",2,1,0,1,3,0,0,0,0,3,15,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1653,"                out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1654,"                out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1656,"                FormatUtils.writePaddedInteger(out, year, 2);
",0,0,0,1,2,0,8,0,0,8,45,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1658,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1662,"                int year = iType.getField(chrono).get(instant);
",2,0,0,2,4,0,10,0,0,12,47,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1663,"                if (year < 0) {
",2,1,0,1,3,0,0,0,0,3,15,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1664,"                    year = -year;
",4,0,0,0,0,0,0,0,0,6,13,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1666,"                return year % 100;
",2,1,0,0,0,1,0,0,0,3,18,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1667,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1668,"                return -1;
",0,0,0,0,0,1,0,0,0,1,10,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1673,"            int year = getTwoDigitYear(partial);
",2,0,0,1,2,0,4,0,0,6,36,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1674,"            if (year < 0) {
",2,1,0,1,3,0,0,0,0,3,15,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1675,"                buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1676,"                buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1678,"                FormatUtils.appendPaddedInteger(buf, year, 2);
",0,0,0,1,2,0,8,0,0,8,46,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1680,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1683,"            int year = getTwoDigitYear(partial);
",2,0,0,1,2,0,4,0,0,6,36,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1684,"            if (year < 0) {
",2,1,0,1,3,0,0,0,0,3,15,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1685,"                out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1686,"                out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1688,"                FormatUtils.writePaddedInteger(out, year, 2);
",0,0,0,1,2,0,8,0,0,8,45,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1690,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1693,"            if (partial.isSupported(iType)) {
",0,0,0,2,5,0,6,0,0,6,33,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1695,"                    int year = partial.get(iType);
",2,0,0,1,2,0,6,0,0,8,30,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1696,"                    if (year < 0) {
",2,1,0,1,3,0,0,0,0,3,15,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1697,"                        year = -year;
",4,0,0,0,0,0,0,0,0,6,13,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1699,"                    return year % 100;
",2,1,0,0,0,1,0,0,0,3,18,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1700,"                } catch (RuntimeException e) {}
",2,0,0,2,5,0,0,2,0,4,31,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1702,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1716,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1717,"            iFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1718,"            iShort = isShort;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1719,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1710,"        private static Map<Locale, Map<DateTimeFieldType, Object[]>> cParseCache =
",2,0,0,1,2,2,0,10,0,14,74,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1722,"            return iShort ? 6 : 20;
",2,0,0,0,0,1,0,0,0,2,23,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1729,"                buf.append(print(instant, chrono, locale));
",0,0,0,2,4,0,12,0,0,12,43,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1732,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1730,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1731,"                buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1733,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1739,"                out.write(print(instant, chrono, locale));
",0,0,0,2,4,0,12,0,0,12,42,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1742,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1740,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1741,"                out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1743,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1747,"                buf.append(print(partial, locale));
",0,0,0,2,4,0,10,0,0,10,35,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1750,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1748,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1749,"                buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1751,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1755,"                out.write(print(partial, locale));
",0,0,0,2,4,0,10,0,0,10,34,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1758,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1756,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1757,"                out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1759,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1762,"            DateTimeField field = iFieldType.getField(chrono);
",2,0,0,1,2,0,6,2,0,10,50,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1763,"            if (iShort) {
",2,0,0,1,3,0,0,0,0,2,13,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1764,"                return field.getAsShortText(instant, locale);
",0,0,0,1,2,1,8,0,0,8,45,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1766,"                return field.getAsText(instant, locale);
",0,0,0,1,2,1,8,0,0,8,40,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1771,"            if (partial.isSupported(iFieldType)) {
",0,0,0,2,5,0,6,0,0,6,38,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1772,"                DateTimeField field = iFieldType.getField(partial.getChronology());
",2,0,0,2,4,0,8,2,0,12,67,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1773,"                if (iShort) {
",2,0,0,1,3,0,0,0,0,2,13,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1774,"                    return field.getAsShortText(partial, locale);
",0,0,0,1,2,1,8,0,0,8,45,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1776,"                    return field.getAsText(partial, locale);
",0,0,0,1,2,1,8,0,0,8,40,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1779,"                return ""\ufffd"";
",0,0,0,0,0,1,0,0,0,1,16,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1784,"            return estimatePrintedLength();
",0,0,0,1,2,1,2,0,0,2,31,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1789,"            Locale locale = bucket.getLocale();
",2,0,0,1,2,0,4,2,0,8,35,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1792,"            Set<String> validValues = null;
",2,0,0,0,0,0,0,4,0,6,31,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1793,"            int maxLength = 0;
",2,0,0,0,0,0,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1794,"            synchronized (cParseCache) {
",2,0,0,1,3,0,0,0,0,2,28,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1795,"                Map<DateTimeFieldType, Object[]> innerMap = cParseCache.get(locale);
",2,0,0,2,4,0,6,6,0,14,68,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1796,"                if (innerMap == null) {
",2,1,0,1,3,0,0,0,0,3,23,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1797,"                    innerMap = new HashMap<DateTimeFieldType, Object[]>();
",2,0,0,2,4,0,0,6,0,9,54,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1798,"                    cParseCache.put(locale, innerMap);
",0,0,0,1,2,0,8,0,0,8,34,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1800,"                Object[] array = innerMap.get(iFieldType);
",2,0,0,2,4,0,6,2,0,10,42,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1801,"                if (array == null) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1802,"                    validValues = new HashSet<String>(32);
",2,0,0,1,2,0,0,4,0,7,38,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1803,"                    MutableDateTime dt = new MutableDateTime(0L, DateTimeZone.UTC);
",6,0,0,1,2,0,0,4,0,10,63,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1804,"                    Property property = dt.property(iFieldType);
",2,0,0,1,2,0,6,2,0,10,44,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1805,"                    int min = property.getMinimumValueOverall();
",2,0,0,1,2,0,4,0,0,6,44,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1806,"                    int max = property.getMaximumValueOverall();
",2,0,0,1,2,0,4,0,0,6,44,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1807,"                    if (max - min > 32) {  // protect against invalid fields
",4,2,0,1,3,0,0,0,0,6,56,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1808,"                        return ~position;
",2,0,0,0,0,1,0,0,0,3,17,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1810,"                    maxLength = property.getMaximumTextLength(locale);
",2,0,0,1,2,0,6,0,0,9,50,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1811,"                    for (int i = min; i <= max; i++) {
",10,1,0,1,3,0,0,0,0,12,34,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1812,"                        property.set(i);
",0,0,0,1,2,0,6,0,0,6,16,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1813,"                        validValues.add(property.getAsShortText(locale));
",0,0,0,2,4,0,10,0,0,10,49,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1814,"                        validValues.add(property.getAsShortText(locale).toLowerCase(locale));
",0,0,0,3,6,0,14,0,0,14,69,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1815,"                        validValues.add(property.getAsShortText(locale).toUpperCase(locale));
",0,0,0,3,6,0,14,0,0,14,69,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1816,"                        validValues.add(property.getAsText(locale));
",0,0,0,2,4,0,10,0,0,10,44,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1817,"                        validValues.add(property.getAsText(locale).toLowerCase(locale));
",0,0,0,3,6,0,14,0,0,14,64,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1818,"                        validValues.add(property.getAsText(locale).toUpperCase(locale));
",0,0,0,3,6,0,14,0,0,14,64,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1820,"                    if (""en"".equals(locale.getLanguage()) && iFieldType == DateTimeFieldType.era()) {
",2,2,0,4,9,0,10,0,0,15,81,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1822,"                        validValues.add(""BCE"");
",0,0,0,1,2,0,4,0,0,5,23,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1823,"                        validValues.add(""bce"");
",0,0,0,1,2,0,4,0,0,5,23,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1824,"                        validValues.add(""CE"");
",0,0,0,1,2,0,4,0,0,5,22,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1825,"                        validValues.add(""ce"");
",0,0,0,1,2,0,4,0,0,5,22,12,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1826,"                        maxLength = 3;
",2,0,0,0,0,0,0,0,0,3,14,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1828,"                    array = new Object[] {validValues, Integer.valueOf(maxLength)};
",4,0,0,3,6,0,6,2,0,13,63,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1829,"                    innerMap.put(iFieldType, array);
",0,0,0,1,2,0,8,0,0,8,32,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1830,"                } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1831,"                    validValues = (Set<String>) array[0];
",2,0,1,2,4,0,0,4,0,9,37,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1832,"                    maxLength = ((Integer) array[1]).intValue();
",2,0,1,4,8,0,2,2,0,9,44,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1834,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1836,"            int limit = Math.min(text.length(), position + maxLength);
",6,1,0,2,4,0,8,0,0,15,58,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1837,"            for (int i = limit; i > position; i--) {
",10,1,0,1,3,0,0,0,0,12,40,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1838,"                String match = text.substring(position, i);
",2,0,0,1,2,0,8,2,0,12,43,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1839,"                if (validValues.contains(match)) {
",0,0,0,2,5,0,6,0,0,6,34,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1840,"                    bucket.saveField(iFieldType, match, locale);
",0,0,0,1,2,0,10,0,0,10,44,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1841,"                    return i;
",2,0,0,0,0,1,0,0,0,2,9,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1844,"            return ~position;
",2,0,0,0,0,1,0,0,0,3,17,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,79,"        return getField(index, getChronology()).getType();
",0,0,0,3,6,1,8,0,0,8,50,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,90,"        DateTimeFieldType[] result = new DateTimeFieldType[size()];
",2,0,0,3,6,0,2,4,0,8,59,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,91,"        for (int i = 0; i < result.length; i++) {
",10,1,0,1,3,0,0,0,0,12,41,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,92,"            result[i] = getFieldType(i);
",0,0,1,2,4,0,4,0,0,9,28,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,94,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,116,"        DateTimeField[] result = new DateTimeField[size()];
",2,0,0,3,6,0,2,4,0,8,51,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,117,"        for (int i = 0; i < result.length; i++) {
",10,1,0,1,3,0,0,0,0,12,41,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,118,"            result[i] = getField(i);
",0,0,1,2,4,0,4,0,0,9,24,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,120,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,132,"        int[] result = new int[size()];
",2,0,0,3,6,0,2,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,133,"        for (int i = 0; i < result.length; i++) {
",10,1,0,1,3,0,0,0,0,12,41,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,134,"            result[i] = getValue(i);
",0,0,1,2,4,0,4,0,0,9,24,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,136,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,175,"        return -1;
",0,0,0,0,0,1,0,0,0,1,10,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,189,"            throw new IllegalArgumentException(""Field '"" + type + ""' is not supported"");
",2,1,0,1,2,0,0,2,0,7,76,7,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,207,"        return -1;
",0,0,0,0,0,1,0,0,0,1,10,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,221,"            throw new IllegalArgumentException(""Field '"" + type + ""' is not supported"");
",2,1,0,1,2,0,0,2,0,7,76,7,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,240,"        Chronology chrono = DateTimeUtils.getInstantChronology(baseInstant);
",2,0,0,1,2,0,6,2,0,10,68,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,241,"        long instantMillis = DateTimeUtils.getInstantMillis(baseInstant);
",2,0,0,1,2,0,6,0,0,8,65,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,242,"        long resolved = chrono.set(this, instantMillis);
",2,0,0,1,2,0,6,0,0,8,48,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,243,"        return new DateTime(resolved, chrono);
",4,0,0,1,2,1,0,2,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,256,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,259,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,263,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,270,"        return FieldUtils.equals(getChronology(), other.getChronology());
",0,0,0,3,6,1,10,0,0,10,65,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,280,"        int total = 157;
",2,0,0,0,0,0,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,281,"        for (int i = 0, isize = size(); i < isize; i++) {
",10,1,0,2,5,0,2,0,0,14,49,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,282,"            total = 23 * total + getValue(i);
",4,2,0,1,2,0,4,0,0,11,33,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,283,"            total = 23 * total + getFieldType(i).hashCode();
",4,2,0,2,4,0,6,0,0,13,48,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,285,"        total += getChronology().hashCode();
",2,0,0,2,4,0,4,0,0,7,36,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,286,"        return total;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,311,"        if (this == other) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,312,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,314,"        if (size() != other.size()) {
",0,1,0,3,7,0,6,0,0,7,29,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,315,"            throw new ClassCastException(""ReadablePartial objects must have matching field types"");
",0,0,0,1,2,0,0,2,0,3,87,7,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,317,"        for (int i = 0, isize = size(); i < isize; i++) {
",10,1,0,2,5,0,2,0,0,14,49,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,318,"            if (getFieldType(i) != other.getFieldType(i)) {
",0,1,0,3,7,0,10,0,0,11,47,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,319,"                throw new ClassCastException(""ReadablePartial objects must have matching field types"");
",0,0,0,1,2,0,0,2,0,3,87,9,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,323,"        for (int i = 0, isize = size(); i < isize; i++) {
",10,1,0,2,5,0,2,0,0,14,49,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,324,"            if (getValue(i) > other.getValue(i)) {
",0,1,0,3,7,0,10,0,0,11,38,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,325,"                return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,327,"            if (getValue(i) < other.getValue(i)) {
",0,1,0,3,7,0,10,0,0,11,38,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,328,"                return -1;
",0,0,0,0,0,1,0,0,0,1,10,8,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,331,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,350,"        if (partial == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,351,"            throw new IllegalArgumentException(""Partial cannot be null"");
",0,0,0,1,2,0,0,2,0,4,61,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,353,"        return compareTo(partial) > 0;
",0,1,0,1,2,1,4,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,372,"        if (partial == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,373,"            throw new IllegalArgumentException(""Partial cannot be null"");
",0,0,0,1,2,0,0,2,0,4,61,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,375,"        return compareTo(partial) < 0;
",0,1,0,1,2,1,4,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,394,"        if (partial == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,395,"            throw new IllegalArgumentException(""Partial cannot be null"");
",0,0,0,1,2,0,0,2,0,4,61,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,397,"        return compareTo(partial) == 0;
",0,1,0,1,2,1,4,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,409,"        if (formatter == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,410,"            return toString();
",0,0,0,1,2,1,2,0,0,2,18,7,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,412,"        return formatter.print(this);
",0,0,0,1,2,1,4,0,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractPartial,14,46,"public abstract class AbstractPartial
",2,0,0,0,0,2,0,0,0,4,37,1,0.00000,0
defect4j,time,org/joda/time/DateTime,14,155,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,156,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,168,"        super(zone);
",2,0,0,1,2,0,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,169,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,182,"        super(chronology);
",2,0,0,1,2,0,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,183,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,193,"        super(instant);
",2,0,0,1,2,0,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,194,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,206,"        super(instant, zone);
",4,0,0,1,2,0,0,0,0,4,21,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,207,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,220,"        super(instant, chronology);
",4,0,0,1,2,0,0,0,0,4,27,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,221,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,241,"        super(instant, (Chronology) null);
",2,0,0,2,4,0,0,2,0,5,34,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,242,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,265,"        super(instant, zone);
",4,0,0,1,2,0,0,0,0,4,21,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,266,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,286,"        super(instant, DateTimeUtils.getChronology(chronology));
",2,0,0,2,4,0,6,0,0,8,56,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,287,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,307,"        super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, 0, 0);
",10,0,0,1,2,0,0,0,0,10,68,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,308,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,331,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,333,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,357,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,359,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,381,"        super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, 0);
",12,0,0,1,2,0,0,0,0,12,81,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,382,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,407,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,409,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,435,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,437,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,460,"        super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
",14,0,0,1,2,0,0,0,0,14,94,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,461,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,487,"        super(year, monthOfYear, dayOfMonth,
",6,0,0,0,1,0,0,0,0,6,36,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,489,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,89,"        return new DateTime();
",0,0,0,1,2,1,0,2,0,2,22,6,0.00000,0
defect4j,time,org/joda/time/DateTime,14,101,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,102,"            throw new NullPointerException(""Zone must not be null"");
",0,0,0,1,2,0,0,2,0,4,56,6,0.00000,0
defect4j,time,org/joda/time/DateTime,14,104,"        return new DateTime(zone);
",2,0,0,1,2,1,0,2,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,116,"        if (chronology == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,117,"            throw new NullPointerException(""Chronology must not be null"");
",0,0,0,1,2,0,0,2,0,4,62,6,0.00000,0
defect4j,time,org/joda/time/DateTime,14,119,"        return new DateTime(chronology);
",2,0,0,1,2,1,0,2,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,133,"        return parse(str, ISODateTimeFormat.dateTimeParser().withOffsetParsed());
",0,0,0,3,6,1,10,0,0,10,73,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,144,"        return formatter.parseDateTime(str);
",0,0,0,1,2,1,6,0,0,6,36,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,537,"        if (getChronology() == ISOChronology.getInstance()) {
",0,1,0,3,7,0,6,0,0,7,53,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,538,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,540,"        return super.toDateTimeISO();
",2,0,0,1,2,1,0,0,0,2,29,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,550,"        zone = DateTimeUtils.getZone(zone);
",2,0,0,1,2,0,6,0,0,9,35,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,551,"        if (getZone() == zone) {
",2,1,0,2,5,0,2,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,552,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,554,"        return super.toDateTime(zone);
",4,0,0,1,2,1,0,0,0,4,30,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,564,"        chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,565,"        if (getChronology() == chronology) {
",2,1,0,2,5,0,2,0,0,5,36,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,566,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,568,"        return super.toDateTime(chronology);
",4,0,0,1,2,1,0,0,0,4,36,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,582,"        return (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));
",4,1,0,4,8,1,4,2,0,11,84,6,0.00000,0
defect4j,time,org/joda/time/DateTime,14,595,"        newChronology = DateTimeUtils.getChronology(newChronology);
",2,0,0,1,2,0,6,0,0,9,59,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,596,"        return (newChronology == getChronology() ? this : new DateTime(getMillis(), newChronology));
",4,1,0,4,8,1,4,2,0,11,92,6,0.00000,0
defect4j,time,org/joda/time/DateTime,14,618,"        return withChronology(getChronology().withZone(newZone));
",0,0,0,3,6,1,8,0,0,8,57,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,639,"        newZone = DateTimeUtils.getZone(newZone);
",2,0,0,1,2,0,6,0,0,9,41,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,640,"        DateTimeZone originalZone = DateTimeUtils.getZone(getZone());
",2,0,0,2,4,0,6,2,0,10,61,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,641,"        if (newZone == originalZone) {
",4,1,0,1,3,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,642,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,645,"        long millis = originalZone.getMillisKeepLocal(newZone, getMillis());
",2,0,0,2,4,0,8,0,0,10,68,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,646,"        return new DateTime(millis, getChronology().withZone(newZone));
",2,0,0,3,6,1,6,2,0,10,63,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,665,"        long newMillis = getZone().adjustOffset(getMillis(), false);
",2,0,0,3,6,0,6,0,0,9,60,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,666,"        return withMillis(newMillis);
",0,0,0,1,2,1,4,0,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,685,"        long newMillis = getZone().adjustOffset(getMillis(), true);
",2,0,0,3,6,0,6,0,0,9,59,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,686,"        return withMillis(newMillis);
",0,0,0,1,2,1,4,0,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,709,"        Chronology chrono = getChronology();
",2,0,0,1,2,0,2,2,0,6,36,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,710,"        long instant = getMillis();
",2,0,0,1,2,0,2,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,711,"        instant = chrono.year().set(instant, year);
",2,0,0,2,4,0,10,0,0,13,43,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,712,"        instant = chrono.monthOfYear().set(instant, monthOfYear);
",2,0,0,2,4,0,10,0,0,13,57,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,713,"        instant = chrono.dayOfMonth().set(instant, dayOfMonth);
",2,0,0,2,4,0,10,0,0,13,55,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,714,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,737,"        Chronology chrono = getChronology();
",2,0,0,1,2,0,2,2,0,6,36,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,738,"        long instant = getMillis();
",2,0,0,1,2,0,2,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,739,"        instant = chrono.hourOfDay().set(instant, hourOfDay);
",2,0,0,2,4,0,10,0,0,13,53,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,740,"        instant = chrono.minuteOfHour().set(instant, minuteOfHour);
",2,0,0,2,4,0,10,0,0,13,59,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,741,"        instant = chrono.secondOfMinute().set(instant, secondOfMinute);
",2,0,0,2,4,0,10,0,0,13,63,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,742,"        instant = chrono.millisOfSecond().set(instant, millisOfSecond);
",2,0,0,2,4,0,10,0,0,13,63,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,743,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,759,"        return toLocalDate().toDateTimeAtStartOfDay(getZone());
",0,0,0,3,6,1,6,0,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,776,"        if (partial == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,777,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,779,"        return withMillis(getChronology().set(partial, getMillis()));
",0,0,0,4,8,1,10,0,0,10,61,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,802,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,803,"            throw new IllegalArgumentException(""Field must not be null"");
",0,0,0,1,2,0,0,2,0,4,61,6,0.00000,0
defect4j,time,org/joda/time/DateTime,14,805,"        long instant = fieldType.getField(getChronology()).set(getMillis(), value);
",2,0,0,4,8,0,12,0,0,14,75,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,806,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,828,"        if (fieldType == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,829,"            throw new IllegalArgumentException(""Field must not be null"");
",0,0,0,1,2,0,0,2,0,4,61,6,0.00000,0
defect4j,time,org/joda/time/DateTime,14,831,"        if (amount == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,832,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,834,"        long instant = fieldType.getField(getChronology()).add(getMillis(), amount);
",2,0,0,4,8,0,12,0,0,14,76,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,835,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,850,"        if (durationToAdd == 0 || scalar == 0) {
",4,3,0,1,3,0,0,0,0,7,40,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,851,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,853,"        long instant = getChronology().add(getMillis(), durationToAdd, scalar);
",2,0,0,3,6,0,10,0,0,12,71,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,854,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,868,"        if (durationToAdd == null || scalar == 0) {
",4,3,0,1,3,0,0,0,0,7,43,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,869,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,871,"        return withDurationAdded(durationToAdd.getMillis(), scalar);
",0,0,0,2,4,1,8,0,0,8,60,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,890,"        if (period == null || scalar == 0) {
",4,3,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,891,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,893,"        long instant = getChronology().add(period, getMillis(), scalar);
",2,0,0,3,6,0,10,0,0,12,64,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,894,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,909,"        return withDurationAdded(duration, 1);
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,923,"        return withDurationAdded(duration, 1);
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,949,"        return withPeriodAdded(period, 1);
",0,0,0,1,2,1,4,0,0,4,34,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,976,"        if (years == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,977,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,979,"        long instant = getChronology().years().add(getMillis(), years);
",2,0,0,4,8,0,10,0,0,12,63,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,980,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1006,"        if (months == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1007,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1009,"        long instant = getChronology().months().add(getMillis(), months);
",2,0,0,4,8,0,10,0,0,12,65,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1010,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1032,"        if (weeks == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1033,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1035,"        long instant = getChronology().weeks().add(getMillis(), weeks);
",2,0,0,4,8,0,10,0,0,12,63,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1036,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1067,"        if (days == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1068,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1070,"        long instant = getChronology().days().add(getMillis(), days);
",2,0,0,4,8,0,10,0,0,12,61,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1071,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1098,"        if (hours == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1099,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1101,"        long instant = getChronology().hours().add(getMillis(), hours);
",2,0,0,4,8,0,10,0,0,12,63,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1102,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1125,"        if (minutes == 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1126,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1128,"        long instant = getChronology().minutes().add(getMillis(), minutes);
",2,0,0,4,8,0,10,0,0,12,67,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1129,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1152,"        if (seconds == 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1153,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1155,"        long instant = getChronology().seconds().add(getMillis(), seconds);
",2,0,0,4,8,0,10,0,0,12,67,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1156,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1178,"        if (millis == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1179,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1181,"        long instant = getChronology().millis().add(getMillis(), millis);
",2,0,0,4,8,0,10,0,0,12,65,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1182,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1197,"        return withDurationAdded(duration, -1);
",0,0,0,1,2,1,4,0,0,5,39,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1211,"        return withDurationAdded(duration, -1);
",0,0,0,1,2,1,4,0,0,5,39,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1238,"        return withPeriodAdded(period, -1);
",0,0,0,1,2,1,4,0,0,5,35,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1265,"        if (years == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1266,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1268,"        long instant = getChronology().years().subtract(getMillis(), years);
",2,0,0,4,8,0,10,0,0,12,68,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1269,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1295,"        if (months == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1296,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1298,"        long instant = getChronology().months().subtract(getMillis(), months);
",2,0,0,4,8,0,10,0,0,12,70,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1299,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1321,"        if (weeks == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1322,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1324,"        long instant = getChronology().weeks().subtract(getMillis(), weeks);
",2,0,0,4,8,0,10,0,0,12,68,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1325,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1356,"        if (days == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1357,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1359,"        long instant = getChronology().days().subtract(getMillis(), days);
",2,0,0,4,8,0,10,0,0,12,66,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1360,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1388,"        if (hours == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1389,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1391,"        long instant = getChronology().hours().subtract(getMillis(), hours);
",2,0,0,4,8,0,10,0,0,12,68,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1392,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1415,"        if (minutes == 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1416,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1418,"        long instant = getChronology().minutes().subtract(getMillis(), minutes);
",2,0,0,4,8,0,10,0,0,12,72,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1419,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1442,"        if (seconds == 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1443,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1445,"        long instant = getChronology().seconds().subtract(getMillis(), seconds);
",2,0,0,4,8,0,10,0,0,12,72,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1446,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1469,"        if (millis == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1470,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1472,"        long instant = getChronology().millis().subtract(getMillis(), millis);
",2,0,0,4,8,0,10,0,0,12,70,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1473,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1485,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1486,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");
",0,0,0,1,2,0,0,2,0,4,77,6,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1488,"        DateTimeField field = type.getField(getChronology());
",2,0,0,2,4,0,6,2,0,10,53,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1489,"        if (field.isSupported() == false) {
",0,1,0,2,5,0,4,0,0,6,35,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1490,"            throw new IllegalArgumentException(""Field '"" + type + ""' is not supported"");
",2,1,0,1,2,0,0,2,0,7,76,7,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1492,"        return new Property(this, field);
",2,0,0,1,2,1,0,2,0,4,33,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1503,"        return new DateMidnight(getMillis(), getChronology());
",0,0,0,3,6,1,4,2,0,6,54,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1515,"        return new YearMonthDay(getMillis(), getChronology());
",0,0,0,3,6,1,4,2,0,6,54,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1527,"        return new TimeOfDay(getMillis(), getChronology());
",0,0,0,3,6,1,4,2,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1538,"        return new LocalDateTime(getMillis(), getChronology());
",0,0,0,3,6,1,4,2,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1549,"        return new LocalDate(getMillis(), getChronology());
",0,0,0,3,6,1,4,2,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1560,"        return new LocalTime(getMillis(), getChronology());
",0,0,0,3,6,1,4,2,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1577,"        return withMillis(getChronology().era().set(getMillis(), era));
",0,0,0,5,10,1,12,0,0,12,63,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1593,"        return withMillis(getChronology().centuryOfEra().set(getMillis(), centuryOfEra));
",0,0,0,5,10,1,12,0,0,12,81,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1609,"        return withMillis(getChronology().yearOfEra().set(getMillis(), yearOfEra));
",0,0,0,5,10,1,12,0,0,12,75,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1625,"        return withMillis(getChronology().yearOfCentury().set(getMillis(), yearOfCentury));
",0,0,0,5,10,1,12,0,0,12,83,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1641,"        return withMillis(getChronology().year().set(getMillis(), year));
",0,0,0,5,10,1,12,0,0,12,65,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1663,"        return withMillis(getChronology().weekyear().set(getMillis(), weekyear));
",0,0,0,5,10,1,12,0,0,12,73,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1679,"        return withMillis(getChronology().monthOfYear().set(getMillis(), monthOfYear));
",0,0,0,5,10,1,12,0,0,12,79,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1700,"        return withMillis(getChronology().weekOfWeekyear().set(getMillis(), weekOfWeekyear));
",0,0,0,5,10,1,12,0,0,12,85,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1716,"        return withMillis(getChronology().dayOfYear().set(getMillis(), dayOfYear));
",0,0,0,5,10,1,12,0,0,12,75,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1732,"        return withMillis(getChronology().dayOfMonth().set(getMillis(), dayOfMonth));
",0,0,0,5,10,1,12,0,0,12,77,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1748,"        return withMillis(getChronology().dayOfWeek().set(getMillis(), dayOfWeek));
",0,0,0,5,10,1,12,0,0,12,75,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1765,"        return withMillis(getChronology().hourOfDay().set(getMillis(), hour));
",0,0,0,5,10,1,12,0,0,12,70,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1781,"        return withMillis(getChronology().minuteOfHour().set(getMillis(), minute));
",0,0,0,5,10,1,12,0,0,12,75,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1797,"        return withMillis(getChronology().secondOfMinute().set(getMillis(), second));
",0,0,0,5,10,1,12,0,0,12,77,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1813,"        return withMillis(getChronology().millisOfSecond().set(getMillis(), millis));
",0,0,0,5,10,1,12,0,0,12,77,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1829,"        return withMillis(getChronology().millisOfDay().set(getMillis(), millis));
",0,0,0,5,10,1,12,0,0,12,74,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1840,"        return new Property(this, getChronology().era());
",0,0,0,3,6,1,4,2,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1849,"        return new Property(this, getChronology().centuryOfEra());
",0,0,0,3,6,1,4,2,0,6,58,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1858,"        return new Property(this, getChronology().yearOfCentury());
",0,0,0,3,6,1,4,2,0,6,59,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1867,"        return new Property(this, getChronology().yearOfEra());
",0,0,0,3,6,1,4,2,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1876,"        return new Property(this, getChronology().year());
",0,0,0,3,6,1,4,2,0,6,50,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1885,"        return new Property(this, getChronology().weekyear());
",0,0,0,3,6,1,4,2,0,6,54,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1894,"        return new Property(this, getChronology().monthOfYear());
",0,0,0,3,6,1,4,2,0,6,57,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1903,"        return new Property(this, getChronology().weekOfWeekyear());
",0,0,0,3,6,1,4,2,0,6,60,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1912,"        return new Property(this, getChronology().dayOfYear());
",0,0,0,3,6,1,4,2,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1921,"        return new Property(this, getChronology().dayOfMonth());
",0,0,0,3,6,1,4,2,0,6,56,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1930,"        return new Property(this, getChronology().dayOfWeek());
",0,0,0,3,6,1,4,2,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1941,"        return new Property(this, getChronology().hourOfDay());
",0,0,0,3,6,1,4,2,0,6,55,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1950,"        return new Property(this, getChronology().minuteOfDay());
",0,0,0,3,6,1,4,2,0,6,57,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1959,"        return new Property(this, getChronology().minuteOfHour());
",0,0,0,3,6,1,4,2,0,6,58,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1968,"        return new Property(this, getChronology().secondOfDay());
",0,0,0,3,6,1,4,2,0,6,57,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1977,"        return new Property(this, getChronology().secondOfMinute());
",0,0,0,3,6,1,4,2,0,6,60,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1986,"        return new Property(this, getChronology().millisOfDay());
",0,0,0,3,6,1,4,2,0,6,57,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,1995,"        return new Property(this, getChronology().millisOfSecond());
",0,0,0,3,6,1,4,2,0,6,60,5,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,14,61,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());
",0,0,0,3,6,0,8,0,0,8,69,5,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,14,62,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,14,73,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));
",0,0,0,3,6,0,10,0,0,10,73,5,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,14,74,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,14,86,"        this(DateTimeUtils.currentTimeMillis(), chronology);
",2,0,0,2,4,0,4,0,0,6,52,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,14,87,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,14,97,"        this(instant, ISOChronology.getInstance());
",2,0,0,2,4,0,4,0,0,6,43,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,14,98,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,14,110,"        this(instant, ISOChronology.getInstance(zone));
",2,0,0,2,4,0,6,0,0,8,47,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,14,111,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,14,124,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,14,125,"        iChronology = checkChronology(chronology);
",2,0,0,1,2,0,4,0,0,7,42,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,14,126,"        iMillis = checkInstant(instant, iChronology);
",2,0,0,1,2,0,6,0,0,9,45,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,14,127,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,14,146,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,14,147,"        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
",2,0,0,2,4,0,8,2,0,12,89,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,14,148,"        Chronology chrono = checkChronology(converter.getChronology(instant, zone));
",2,0,0,2,4,0,10,2,0,14,76,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,14,149,"        iChronology = chrono;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,14,150,"        iMillis = checkInstant(converter.getInstantMillis(instant, chrono), chrono);
",2,0,0,2,4,0,12,0,0,15,76,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,14,151,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,14,168,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,14,169,"        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
",2,0,0,2,4,0,8,2,0,12,89,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,14,170,"        iChronology = checkChronology(converter.getChronology(instant, chronology));
",2,0,0,2,4,0,10,0,0,13,76,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,14,171,"        iMillis = checkInstant(converter.getInstantMillis(instant, chronology), iChronology);
",2,0,0,2,4,0,12,0,0,15,85,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,14,172,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,14,195,"        this(year, monthOfYear, dayOfMonth, hourOfDay,
",8,0,0,0,1,0,0,0,0,8,46,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,14,197,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,14,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,
",8,0,0,0,1,0,0,0,0,8,46,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,14,225,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,14,295,"        return iMillis;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,14,304,"        return iChronology;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,14,317,"        iMillis = checkInstant(instant, iChronology);
",2,0,0,1,2,0,6,0,0,9,45,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,14,318,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,14,329,"        iChronology = checkChronology(chronology);
",2,0,0,1,2,0,4,0,0,7,42,4,0.00000,0
defect4j,time,org/joda/time/base/BaseDateTime,14,330,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,14,66,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,14,67,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");
",0,0,0,1,2,0,0,2,0,4,77,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,14,69,"        return type.getField(getChronology()).get(getMillis());
",0,0,0,4,8,1,10,0,0,10,55,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,14,79,"        return getChronology().era().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,14,88,"        return getChronology().centuryOfEra().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,55,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,14,97,"        return getChronology().yearOfEra().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,14,106,"        return getChronology().yearOfCentury().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,56,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,14,115,"        return getChronology().year().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,47,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,14,130,"        return getChronology().weekyear().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,14,139,"        return getChronology().monthOfYear().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,14,153,"        return getChronology().weekOfWeekyear().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,57,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,14,162,"        return getChronology().dayOfYear().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,14,173,"        return getChronology().dayOfMonth().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,53,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,14,184,"        return getChronology().dayOfWeek().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,14,194,"        return getChronology().hourOfDay().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,14,203,"        return getChronology().minuteOfDay().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,14,212,"        return getChronology().minuteOfHour().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,55,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,14,221,"        return getChronology().secondOfDay().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,14,230,"        return getChronology().secondOfMinute().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,57,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,14,239,"        return getChronology().millisOfDay().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,14,248,"        return getChronology().millisOfSecond().get(getMillis());
",0,0,0,4,8,1,8,0,0,8,57,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,14,270,"        if (locale == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,14,271,"            locale = Locale.getDefault();
",2,0,0,1,2,0,4,0,0,7,29,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,14,273,"        DateTimeZone zone = getZone();
",2,0,0,1,2,0,2,2,0,6,30,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,14,274,"        Calendar cal = Calendar.getInstance(zone.toTimeZone(), locale);
",2,0,0,2,4,0,10,2,0,14,63,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,14,275,"        cal.setTime(toDate());
",0,0,0,2,4,0,6,0,0,6,22,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,14,276,"        return cal;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,14,294,"        DateTimeZone zone = getZone();
",2,0,0,1,2,0,2,2,0,6,30,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,14,295,"        GregorianCalendar cal = new GregorianCalendar(zone.toTimeZone());
",2,0,0,2,4,0,4,4,0,10,65,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,14,296,"        cal.setTime(toDate());
",0,0,0,2,4,0,6,0,0,6,22,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,14,297,"        return cal;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,14,308,"        if (pattern == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,14,309,"            return toString();
",0,0,0,1,2,1,2,0,0,2,18,7,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,14,311,"        return DateTimeFormat.forPattern(pattern).print(this);
",0,0,0,2,4,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,14,322,"        if (pattern == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,14,323,"            return toString();
",0,0,0,1,2,1,2,0,0,2,18,7,0.00000,0
defect4j,time,org/joda/time/base/AbstractDateTime,14,325,"        return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);
",0,0,0,3,6,1,12,0,0,12,73,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,71,"        return getChronology().getZone();
",0,0,0,2,4,1,4,0,0,4,33,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,89,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,90,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");
",0,0,0,1,2,0,0,2,0,4,77,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,92,"        return type.getField(getChronology()).get(getMillis());
",0,0,0,4,8,1,10,0,0,10,55,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,103,"        if (type == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,104,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,106,"        return type.getField(getChronology()).isSupported();
",0,0,0,3,6,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,124,"        if (field == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,125,"            throw new IllegalArgumentException(""The DateTimeField must not be null"");
",0,0,0,1,2,0,0,2,0,4,73,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,127,"        return field.get(getMillis());
",0,0,0,2,4,1,6,0,0,6,30,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,137,"        return new Instant(getMillis());
",0,0,0,2,4,1,2,2,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,146,"        return new DateTime(getMillis(), getZone());
",0,0,0,3,6,1,4,2,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,155,"        return new DateTime(getMillis(), ISOChronology.getInstance(getZone()));
",0,0,0,4,8,1,8,2,0,10,71,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,165,"        Chronology chrono = DateTimeUtils.getChronology(getChronology());
",2,0,0,2,4,0,6,2,0,10,65,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,166,"        chrono = chrono.withZone(zone);
",2,0,0,1,2,0,6,0,0,9,31,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,167,"        return new DateTime(getMillis(), chrono);
",2,0,0,2,4,1,2,2,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,177,"        return new DateTime(getMillis(), chronology);
",2,0,0,2,4,1,2,2,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,191,"        return new MutableDateTime(getMillis(), getZone());
",0,0,0,3,6,1,4,2,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,200,"        return new MutableDateTime(getMillis(), ISOChronology.getInstance(getZone()));
",0,0,0,4,8,1,8,2,0,10,78,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,210,"        Chronology chrono = DateTimeUtils.getChronology(getChronology());
",2,0,0,2,4,0,6,2,0,10,65,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,211,"        chrono = chrono.withZone(zone);
",2,0,0,1,2,0,6,0,0,9,31,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,212,"        return new MutableDateTime(getMillis(), chrono);
",2,0,0,2,4,1,2,2,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,222,"        return new MutableDateTime(getMillis(), chronology);
",2,0,0,2,4,1,2,2,0,6,52,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,235,"        return new Date(getMillis());
",0,0,0,2,4,1,2,2,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,262,"        if (readableInstant instanceof ReadableInstant == false) {
",2,1,0,1,3,0,0,2,0,6,58,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,263,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,265,"        ReadableInstant otherInstant = (ReadableInstant) readableInstant;
",4,0,0,1,2,0,0,4,0,8,65,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,266,"        return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,278,"        return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,296,"        if (this == other) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,297,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,300,"        long otherMillis = other.getMillis();
",2,0,0,1,2,0,4,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,301,"        long thisMillis = getMillis();
",2,0,0,1,2,0,2,0,0,4,30,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,304,"        if (thisMillis == otherMillis) {
",4,1,0,1,3,0,0,0,0,5,32,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,305,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,307,"        if (thisMillis < otherMillis) {
",4,1,0,1,3,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,308,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,6,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,310,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,323,"        return (getMillis() > instant);
",2,1,0,2,4,1,2,0,0,5,31,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,333,"        return isAfter(DateTimeUtils.currentTimeMillis());
",0,0,0,2,4,1,6,0,0,6,50,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,344,"        long instantMillis = DateTimeUtils.getInstantMillis(instant);
",2,0,0,1,2,0,6,0,0,8,61,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,345,"        return isAfter(instantMillis);
",0,0,0,1,2,1,4,0,0,4,30,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,357,"        return (getMillis() < instant);
",2,1,0,2,4,1,2,0,0,5,31,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,367,"        return isBefore(DateTimeUtils.currentTimeMillis());
",0,0,0,2,4,1,6,0,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,378,"        long instantMillis = DateTimeUtils.getInstantMillis(instant);
",2,0,0,1,2,0,6,0,0,8,61,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,379,"        return isBefore(instantMillis);
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,391,"        return (getMillis() == instant);
",2,1,0,2,4,1,2,0,0,5,32,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,401,"        return isEqual(DateTimeUtils.currentTimeMillis());
",0,0,0,2,4,1,6,0,0,6,50,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,412,"        long instantMillis = DateTimeUtils.getInstantMillis(instant);
",2,0,0,1,2,0,6,0,0,8,61,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,413,"        return isEqual(instantMillis);
",0,0,0,1,2,1,4,0,0,4,30,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,424,"        return ISODateTimeFormat.dateTime().print(this);
",0,0,0,2,4,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,436,"        if (formatter == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,437,"            return toString();
",0,0,0,1,2,1,2,0,0,2,18,7,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,439,"        return formatter.print(this);
",0,0,0,1,2,1,4,0,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/base/AbstractInstant,14,55,"public abstract class AbstractInstant implements ReadableInstant {
",2,0,0,0,1,2,0,2,0,6,66,1,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1180,"            buf.append(iValue);
",0,0,0,1,2,0,6,0,0,6,19,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1181,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1186,"            out.write(iValue);
",0,0,0,1,2,0,6,0,0,6,18,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1187,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1194,"            out.write(iValue);
",0,0,0,1,2,0,6,0,0,6,18,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1195,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1202,"            if (position >= text.length()) {
",2,1,0,2,5,0,4,0,0,7,32,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1203,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1206,"            char a = text.charAt(position);
",2,0,0,1,2,0,6,0,0,8,31,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1207,"            char b = iValue;
",4,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1209,"            if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1210,"                a = Character.toUpperCase(a);
",2,0,0,1,2,0,6,0,0,9,29,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1211,"                b = Character.toUpperCase(b);
",2,0,0,1,2,0,6,0,0,9,29,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1212,"                if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1213,"                    a = Character.toLowerCase(a);
",2,0,0,1,2,0,6,0,0,9,29,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1214,"                    b = Character.toLowerCase(b);
",2,0,0,1,2,0,6,0,0,9,29,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1215,"                    if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1216,"                        return ~position;
",2,0,0,0,0,1,0,0,0,3,17,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1221,"            return position + 1;
",2,1,0,0,0,1,0,0,0,3,20,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1484,"            super(fieldType, numDigits, signed, numDigits);
",8,0,0,1,2,0,0,0,0,8,47,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1485,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1488,"            int newPos = super.parseInto(bucket, text, position);
",10,0,0,1,2,0,0,0,0,10,53,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1489,"            if (newPos < 0) {
",2,1,0,1,3,0,0,0,0,3,17,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1490,"                return newPos;
",2,0,0,0,0,1,0,0,0,2,14,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1492,"            int expectedPos = position + iMaxParsedDigits;
",6,1,0,0,0,0,0,0,0,7,46,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1493,"            if (newPos != expectedPos) {
",4,1,0,1,3,0,0,0,0,5,28,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1494,"                if (iSigned) {
",2,0,0,1,3,0,0,0,0,2,14,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1495,"                    char c = text.charAt(position);
",2,0,0,1,2,0,6,0,0,8,31,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1496,"                    if (c == '-' || c == '+') {
",4,3,0,1,3,0,0,0,0,9,27,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1497,"                        expectedPos++;
",2,0,0,0,0,0,0,0,0,3,14,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1500,"                if (newPos > expectedPos) {
",4,1,0,1,3,0,0,0,0,5,27,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1502,"                    return ~(expectedPos + 1);
",2,1,0,1,2,1,0,0,0,4,26,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1503,"                } else if (newPos < expectedPos) {
",4,1,0,1,4,0,0,0,0,5,34,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1505,"                    return ~newPos;
",2,0,0,0,0,1,0,0,0,3,15,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1508,"            return newPos;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1437,"                DateTimeField field = iFieldType.getField(chrono);
",2,0,0,1,2,0,6,2,0,10,50,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1438,"                FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);
",0,0,0,2,4,0,14,0,0,14,76,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1441,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1439,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1440,"                appendUnknownString(buf, iMinPrintedDigits);
",0,0,0,1,2,0,6,0,0,6,44,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1442,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1448,"                DateTimeField field = iFieldType.getField(chrono);
",2,0,0,1,2,0,6,2,0,10,50,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1449,"                FormatUtils.writePaddedInteger(out, field.get(instant), iMinPrintedDigits);
",0,0,0,2,4,0,14,0,0,14,75,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1452,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1450,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1451,"                printUnknownString(out, iMinPrintedDigits);
",0,0,0,1,2,0,6,0,0,6,43,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1453,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1459,"                } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1460,"                    appendUnknownString(buf, iMinPrintedDigits);
",0,0,0,1,2,0,6,0,0,6,44,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1463,"                appendUnknownString(buf, iMinPrintedDigits);
",0,0,0,1,2,0,6,0,0,6,44,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1468,"            if (partial.isSupported(iFieldType)) {
",0,0,0,2,5,0,6,0,0,6,38,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1470,"                    FormatUtils.writePaddedInteger(out, partial.get(iFieldType), iMinPrintedDigits);
",0,0,0,2,4,0,14,0,0,14,80,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1473,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1471,"                } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1472,"                    printUnknownString(out, iMinPrintedDigits);
",0,0,0,1,2,0,6,0,0,6,43,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1475,"                printUnknownString(out, iMinPrintedDigits);
",0,0,0,1,2,0,6,0,0,6,43,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1477,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1292,"            int limit = Math.min(iMaxParsedDigits, text.length() - position);
",4,1,0,2,4,0,10,0,0,15,65,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1294,"            boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1295,"            int length = 0;
",2,0,0,0,0,0,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1296,"            while (length < limit) {
",4,1,0,1,3,0,0,0,0,5,24,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1297,"                char c = text.charAt(position + length);
",6,1,0,1,2,0,4,0,0,11,40,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1298,"                if (length == 0 && (c == '-' || c == '+') && iSigned) {
",8,6,0,2,5,0,0,0,0,16,55,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1299,"                    negative = c == '-';
",4,1,0,0,0,0,0,0,0,7,20,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1302,"                    if (length + 1 >= limit || 
",4,4,0,0,1,0,0,0,0,8,26,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1305,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1308,"                    if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1309,"                        length++;
",2,0,0,0,0,0,0,0,0,3,9,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1312,"                        position++;
",2,0,0,0,0,0,0,0,0,3,11,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1315,"                    limit = Math.min(limit + 1, text.length() - position);
",6,2,0,2,4,0,8,0,0,17,54,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1316,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1318,"                if (c < '0' || c > '9') {
",4,3,0,1,3,0,0,0,0,9,25,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1319,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1321,"                length++;
",2,0,0,0,0,0,0,0,0,3,9,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1322,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1324,"            if (length == 0) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1325,"                return ~position;
",2,0,0,0,0,1,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1329,"            if (length >= 9) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1332,"                value = Integer.parseInt(text.substring(position, position += length));
",6,0,0,2,4,0,10,0,0,18,71,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1334,"                int i = position;
",4,0,0,0,0,0,0,0,0,4,17,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1335,"                if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1336,"                    i++;
",2,0,0,0,0,0,0,0,0,3,4,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1339,"                    value = text.charAt(i++) - '0';
",4,1,0,1,2,0,4,0,0,12,31,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1342,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1340,"                } catch (StringIndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,45,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1341,"                    return ~position;
",2,0,0,0,0,1,0,0,0,3,17,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1343,"                position += length;
",4,0,0,0,0,0,0,0,0,5,19,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1344,"                while (i < position) {
",4,1,0,1,3,0,0,0,0,5,22,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1345,"                    value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';
",8,5,0,4,8,0,4,0,0,20,63,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1347,"                if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1348,"                    value = -value;
",4,0,0,0,0,0,0,0,0,6,15,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1352,"            bucket.saveField(iFieldType, value);
",0,0,0,1,2,0,8,0,0,8,36,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1353,"            return position;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1374,"                DateTimeField field = iFieldType.getField(chrono);
",2,0,0,1,2,0,6,2,0,10,50,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1375,"                FormatUtils.appendUnpaddedInteger(buf, field.get(instant));
",0,0,0,2,4,0,12,0,0,12,59,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1378,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1376,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1377,"                buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1379,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1385,"                DateTimeField field = iFieldType.getField(chrono);
",2,0,0,1,2,0,6,2,0,10,50,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1386,"                FormatUtils.writeUnpaddedInteger(out, field.get(instant));
",0,0,0,2,4,0,12,0,0,12,58,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1389,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1387,"            } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1388,"                out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1390,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1393,"            if (partial.isSupported(iFieldType)) {
",0,0,0,2,5,0,6,0,0,6,38,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1395,"                    FormatUtils.appendUnpaddedInteger(buf, partial.get(iFieldType));
",0,0,0,2,4,0,12,0,0,12,64,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1398,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1396,"                } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1397,"                    buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1400,"                buf.append('\ufffd');
",0,0,0,1,2,0,4,0,0,5,21,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1402,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1405,"            if (partial.isSupported(iFieldType)) {
",0,0,0,2,5,0,6,0,0,6,38,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1407,"                    FormatUtils.writeUnpaddedInteger(out, partial.get(iFieldType));
",0,0,0,2,4,0,12,0,0,12,63,10,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1410,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1408,"                } catch (RuntimeException e) {
",2,0,0,1,4,0,0,2,0,4,30,9,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1409,"                    out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,11,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1412,"                out.write('\ufffd');
",0,0,0,1,2,0,4,0,0,5,20,8,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1414,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1243,"            buf.append(iValue);
",0,0,0,1,2,0,6,0,0,6,19,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1244,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1249,"            out.write(iValue);
",0,0,0,1,2,0,6,0,0,6,18,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1250,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1253,"            buf.append(iValue);
",0,0,0,1,2,0,6,0,0,6,19,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1254,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1257,"            out.write(iValue);
",0,0,0,1,2,0,6,0,0,6,18,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1258,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1265,"            if (text.regionMatches(true, position, iValue, 0, iValue.length())) {
",0,0,0,3,7,0,12,0,0,13,69,6,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1266,"                return position + iValue.length();
",2,1,0,1,2,1,4,0,0,7,34,7,0.00000,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,14,1268,"            return ~position;
",2,0,0,0,0,1,0,0,0,3,17,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,145,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,146,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,231,"            throw new IllegalArgumentException(""The fields must not be null or empty"");
",0,0,0,1,2,0,0,2,0,4,75,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,240,"        } else if (workingFields.contains(DateTimeFieldType.dayOfYear())) {
",0,0,0,3,8,0,8,0,0,8,67,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,241,"            reducedPrec = dateByOrdinal(bld, workingFields, extended, strictISO);
",2,0,0,1,2,0,10,0,0,13,69,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,242,"        } else if (workingFields.contains(DateTimeFieldType.weekOfWeekyear())) {
",0,0,0,3,8,0,8,0,0,8,72,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,243,"            reducedPrec = dateByWeek(bld, workingFields, extended, strictISO);
",2,0,0,1,2,0,10,0,0,13,66,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,244,"        } else if (workingFields.contains(DateTimeFieldType.dayOfMonth())) {
",0,0,0,3,8,0,8,0,0,8,68,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,245,"            reducedPrec = dateByMonth(bld, workingFields, extended, strictISO);
",2,0,0,1,2,0,10,0,0,13,67,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,246,"        } else if (workingFields.contains(DateTimeFieldType.dayOfWeek())) {
",0,0,0,3,8,0,8,0,0,8,67,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,247,"            reducedPrec = dateByWeek(bld, workingFields, extended, strictISO);
",2,0,0,1,2,0,10,0,0,13,66,10,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,248,"        } else if (workingFields.remove(DateTimeFieldType.year())) {
",0,0,0,3,8,0,8,0,0,8,60,10,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,249,"            bld.append(yearElement());
",0,0,0,2,4,0,6,0,0,6,26,12,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,250,"            reducedPrec = true;
",2,0,0,0,0,0,0,0,0,4,19,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,251,"        } else if (workingFields.remove(DateTimeFieldType.weekyear())) {
",0,0,0,3,8,0,8,0,0,8,64,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,252,"            bld.append(weekyearElement());
",0,0,0,2,4,0,6,0,0,6,30,13,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,253,"            reducedPrec = true;
",2,0,0,0,0,0,0,0,0,4,19,12,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,262,"            throw new IllegalArgumentException(""No valid format for fields: "" + fields);
",2,1,0,1,2,0,0,2,0,6,76,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,269,"        } catch (UnsupportedOperationException ex) {
",2,0,0,1,4,0,0,2,0,4,44,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,295,"            bld.append(yearElement());
",0,0,0,2,4,0,6,0,0,6,26,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,296,"            if (fields.remove(DateTimeFieldType.monthOfYear())) {
",0,0,0,3,7,0,8,0,0,8,53,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,297,"                if (fields.remove(DateTimeFieldType.dayOfMonth())) {
",0,0,0,3,7,0,8,0,0,8,52,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,299,"                    appendSeparator(bld, extended);
",0,0,0,1,2,0,6,0,0,6,31,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,300,"                    bld.appendMonthOfYear(2);
",0,0,0,1,2,0,4,0,0,4,25,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,301,"                    appendSeparator(bld, extended);
",0,0,0,1,2,0,6,0,0,6,31,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,302,"                    bld.appendDayOfMonth(2);
",0,0,0,1,2,0,4,0,0,4,24,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,305,"                    bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,306,"                    bld.appendMonthOfYear(2);
",0,0,0,1,2,0,4,0,0,4,25,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,307,"                    reducedPrec = true;
",2,0,0,0,0,0,0,0,0,4,19,10,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,310,"                if (fields.remove(DateTimeFieldType.dayOfMonth())) {
",0,0,0,3,7,0,8,0,0,8,52,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,312,"                    checkNotStrictISO(fields, strictISO);
",0,0,0,1,2,0,6,0,0,6,37,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,313,"                    bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,314,"                    bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,315,"                    bld.appendDayOfMonth(2);
",0,0,0,1,2,0,4,0,0,4,24,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,318,"                    reducedPrec = true;
",2,0,0,0,0,0,0,0,0,4,19,10,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,332,"                reducedPrec = true;
",2,0,0,0,0,0,0,0,0,4,19,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,334,"        } else if (fields.remove(DateTimeFieldType.dayOfMonth())) {
",0,0,0,3,8,0,8,0,0,8,59,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,336,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,337,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,338,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,339,"            bld.appendDayOfMonth(2);
",0,0,0,1,2,0,4,0,0,4,24,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,361,"        boolean reducedPrec = false;
",2,0,0,0,0,0,0,0,0,3,28,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,362,"        if (fields.remove(DateTimeFieldType.year())) {
",0,0,0,3,7,0,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,363,"            bld.append(yearElement());
",0,0,0,2,4,0,6,0,0,6,26,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,364,"            if (fields.remove(DateTimeFieldType.dayOfYear())) {
",0,0,0,3,7,0,8,0,0,8,51,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,366,"                appendSeparator(bld, extended);
",0,0,0,1,2,0,6,0,0,6,31,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,367,"                bld.appendDayOfYear(3);
",0,0,0,1,2,0,4,0,0,4,23,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,370,"                reducedPrec = true;
",2,0,0,0,0,0,0,0,0,4,19,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,373,"        } else if (fields.remove(DateTimeFieldType.dayOfYear())) {
",0,0,0,3,8,0,8,0,0,8,58,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,375,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,376,"            bld.appendDayOfYear(3);
",0,0,0,1,2,0,4,0,0,4,23,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,378,"        return reducedPrec;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,398,"        boolean reducedPrec = false;
",2,0,0,0,0,0,0,0,0,3,28,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,399,"        if (fields.remove(DateTimeFieldType.weekyear())) {
",0,0,0,3,7,0,8,0,0,8,50,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,400,"            bld.append(weekyearElement());
",0,0,0,2,4,0,6,0,0,6,30,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,401,"            if (fields.remove(DateTimeFieldType.weekOfWeekyear())) {
",0,0,0,3,7,0,8,0,0,8,56,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,402,"                appendSeparator(bld, extended);
",0,0,0,1,2,0,6,0,0,6,31,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,403,"                bld.appendLiteral('W');
",0,0,0,1,2,0,4,0,0,5,23,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,404,"                bld.appendWeekOfWeekyear(2);
",0,0,0,1,2,0,4,0,0,4,28,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,405,"                if (fields.remove(DateTimeFieldType.dayOfWeek())) {
",0,0,0,3,7,0,8,0,0,8,51,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,407,"                    appendSeparator(bld, extended);
",0,0,0,1,2,0,6,0,0,6,31,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,408,"                    bld.appendDayOfWeek(1);
",0,0,0,1,2,0,4,0,0,4,23,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,411,"                    reducedPrec = true;
",2,0,0,0,0,0,0,0,0,4,19,10,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,414,"                if (fields.remove(DateTimeFieldType.dayOfWeek())) {
",0,0,0,3,7,0,8,0,0,8,51,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,416,"                    checkNotStrictISO(fields, strictISO);
",0,0,0,1,2,0,6,0,0,6,37,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,417,"                    appendSeparator(bld, extended);
",0,0,0,1,2,0,6,0,0,6,31,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,418,"                    bld.appendLiteral('W');
",0,0,0,1,2,0,4,0,0,5,23,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,419,"                    bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,420,"                    bld.appendDayOfWeek(1);
",0,0,0,1,2,0,4,0,0,4,23,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,423,"                    reducedPrec = true;
",2,0,0,0,0,0,0,0,0,4,19,10,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,427,"        } else if (fields.remove(DateTimeFieldType.weekOfWeekyear())) {
",0,0,0,3,8,0,8,0,0,8,63,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,428,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,429,"            bld.appendLiteral('W');
",0,0,0,1,2,0,4,0,0,5,23,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,430,"            bld.appendWeekOfWeekyear(2);
",0,0,0,1,2,0,4,0,0,4,28,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,431,"            if (fields.remove(DateTimeFieldType.dayOfWeek())) {
",0,0,0,3,7,0,8,0,0,8,51,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,433,"                appendSeparator(bld, extended);
",0,0,0,1,2,0,6,0,0,6,31,10,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,434,"                bld.appendDayOfWeek(1);
",0,0,0,1,2,0,4,0,0,4,23,10,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,437,"                reducedPrec = true;
",2,0,0,0,0,0,0,0,0,4,19,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,439,"        } else if (fields.remove(DateTimeFieldType.dayOfWeek())) {
",0,0,0,3,8,0,8,0,0,8,58,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,441,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,442,"            bld.appendLiteral('W');
",0,0,0,1,2,0,4,0,0,5,23,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,443,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,444,"            bld.appendDayOfWeek(1);
",0,0,0,1,2,0,4,0,0,4,23,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,446,"        return reducedPrec;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,477,"        if (hour || minute || second || milli) {
",8,1,0,1,3,0,0,0,0,9,40,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,478,"            if (strictISO && reducedPrec) {
",4,1,0,1,3,0,0,0,0,5,31,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,479,"                throw new IllegalArgumentException(""No valid ISO8601 format for fields because Date was reduced precision: "" + fields);
",2,1,0,1,2,0,0,2,0,6,119,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,481,"            if (datePresent) {
",2,0,0,1,3,0,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,482,"                bld.appendLiteral('T');
",0,0,0,1,2,0,4,0,0,5,23,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,485,"        if (hour && minute && second || (hour && !second && !milli)) {
",12,3,0,2,5,0,0,0,0,17,62,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,488,"            if (strictISO && datePresent) {
",4,1,0,1,3,0,0,0,0,5,31,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,489,"                throw new IllegalArgumentException(""No valid ISO8601 format for fields because Time was truncated: "" + fields);
",2,1,0,1,2,0,0,2,0,6,111,9,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,491,"            if (!hour && (minute && second || (minute && !milli) || second)) {
",12,5,0,3,7,0,0,0,0,19,66,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,494,"                if (strictISO) {
",2,0,0,1,3,0,0,0,0,2,16,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,495,"                    throw new IllegalArgumentException(""No valid ISO8601 format for fields: "" + fields);
",2,1,0,1,2,0,0,2,0,6,84,11,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,499,"        if (hour) {
",2,0,0,1,3,0,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,500,"            bld.appendHourOfDay(2);
",0,0,0,1,2,0,4,0,0,4,23,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,501,"        } else if (minute || second || milli) {
",6,1,0,1,4,0,0,0,0,7,39,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,502,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,504,"        if (extended && hour && minute) {
",6,1,0,1,3,0,0,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,505,"            bld.appendLiteral(':');
",0,0,0,1,2,0,4,0,0,5,23,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,507,"        if (minute) {
",2,0,0,1,3,0,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,508,"            bld.appendMinuteOfHour(2);
",0,0,0,1,2,0,4,0,0,4,26,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,509,"        } else if (second || milli) {
",4,1,0,1,4,0,0,0,0,5,29,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,510,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,512,"        if (extended && minute && second) {
",6,1,0,1,3,0,0,0,0,7,35,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,513,"            bld.appendLiteral(':');
",0,0,0,1,2,0,4,0,0,5,23,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,515,"        if (second) {
",2,0,0,1,3,0,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,516,"            bld.appendSecondOfMinute(2);
",0,0,0,1,2,0,4,0,0,4,28,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,517,"        } else if (milli) {
",2,0,0,1,4,0,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,518,"            bld.appendLiteral('-');
",0,0,0,1,2,0,4,0,0,5,23,8,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,520,"        if (milli) {
",2,0,0,1,3,0,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,521,"            bld.appendLiteral('.');
",0,0,0,1,2,0,4,0,0,5,23,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,522,"            bld.appendMillisOfSecond(3);
",0,0,0,1,2,0,4,0,0,4,28,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,524,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,535,"        if (strictISO) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,536,"            throw new IllegalArgumentException(""No valid ISO8601 format for fields: "" + fields);
",2,1,0,1,2,0,0,2,0,6,84,7,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,538,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,569,"        if (dp == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,570,"            DateTimeParser tOffset = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,4,0,6,55,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,573,"            dp = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,578,"        return dp;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,654,"        if (tp == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,655,"            tp = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,661,"        return tp;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,680,"        if (ltp == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,681,"            ltp = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,686,"        return ltp;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,702,"        if (tpe == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,704,"            DateTimeParser decimalPoint = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,4,0,6,60,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,715,"            tpe = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,751,"        return tpe;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,775,"        if (dtp == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,778,"            DateTimeParser time = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,4,0,6,52,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,783,"            dtp = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,787,"        return dtp;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,810,"        if (dotp == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,811,"            DateTimeParser timeOrOffset = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,4,0,6,60,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,816,"            dotp = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,37,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,821,"        return dotp;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,845,"        if (ldotp == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,846,"            DateTimeParser time = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,4,0,6,52,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,850,"            ldotp = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,38,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,855,"        return ldotp;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,866,"        return yearMonthDay();
",0,0,0,1,2,1,2,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,879,"        if (t == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,880,"            t = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,34,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,885,"        return t;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,897,"        if (tx == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,898,"            tx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,903,"        return tx;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,916,"        if (tt == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,917,"            tt = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,922,"        return tt;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,935,"        if (ttx == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,936,"            ttx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,941,"        return ttx;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,953,"        if (dt == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,954,"            dt = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,959,"        return dt;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,971,"        if (dtx == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,972,"            dtx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,977,"        return dtx;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,988,"        if (od == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,989,"            od = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,994,"        return od;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1007,"        if (odt == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1008,"            odt = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1013,"        return odt;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1026,"        if (odtx == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1027,"            odtx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,37,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1032,"        return odtx;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1042,"        return weekyearWeekDay();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1054,"        if (wdt == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1055,"            wdt = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1060,"        return wdt;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1072,"        if (wdtx == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1073,"            wdtx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,37,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1078,"        return wdtx;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1089,"        if (bd == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1090,"            bd = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1096,"        return bd;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1109,"        if (bt == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1110,"            bt = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1119,"        return bt;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1131,"        if (btx == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1132,"            btx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1139,"        return btx;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1152,"        if (btt == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1153,"            btt = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1158,"        return btt;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1171,"        if (bttx == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1172,"            bttx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,37,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1177,"        return bttx;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1189,"        if (bdt == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1190,"            bdt = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1195,"        return bdt;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1207,"        if (bdtx == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1208,"            bdtx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,37,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1213,"        return bdtx;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1224,"        if (bod == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1225,"            bod = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1230,"        return bod;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1243,"        if (bodt == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1244,"            bodt = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,37,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1249,"        return bodt;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1262,"        if (bodtx == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1263,"            bodtx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,38,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1268,"        return bodtx;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1278,"        if (bwd == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1279,"            bwd = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1286,"        return bwd;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1298,"        if (bwdt == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1299,"            bwdt = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,37,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1304,"        return bwdt;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1316,"        if (bwdtx == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1317,"            bwdtx = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,38,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1322,"        return bwdtx;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1332,"        return yearElement();
",0,0,0,1,2,1,2,0,0,2,21,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1342,"        if (ym == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1343,"            ym = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1348,"        return ym;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1358,"        if (ymd == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1359,"            ymd = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1365,"        return ymd;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1374,"        return weekyearElement();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1384,"        if (ww == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1385,"            ww = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1390,"        return ww;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1400,"        if (wwd == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1401,"            wwd = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1407,"        return wwd;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1416,"        return hourElement();
",0,0,0,1,2,1,2,0,0,2,21,5,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1426,"        if (hm == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1427,"            hm = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1432,"        return hm;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1442,"        if (hms == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1443,"            hms = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1449,"        return hms;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1461,"        if (hmsl == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1462,"            hmsl = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,37,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1470,"        return hmsl;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1482,"        if (hmsf == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1483,"            hmsf = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,37,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1490,"        return hmsf;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1500,"        if (dh == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1501,"            dh = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1507,"        return dh;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1517,"        if (dhm == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1518,"            dhm = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1524,"        return dhm;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1535,"        if (dhms == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1536,"            dhms = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,37,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1542,"        return dhms;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1554,"        if (dhmsl == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1555,"            dhmsl = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,38,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1561,"        return dhmsl;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1573,"        if (dhmsf == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1574,"            dhmsf = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,38,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1580,"        return dhmsf;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1653,"        if (lte == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1654,"            lte = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1658,"        return lte;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1662,"        if (hde == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1663,"            hde = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1667,"        return hde;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1671,"        if (mhe == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1672,"            mhe = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1677,"        return mhe;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1681,"        if (sme == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1682,"            sme = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1687,"        return sme;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1691,"        if (fse == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1692,"            fse = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,36,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1699,"        return fse;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1703,"        if (ze == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1704,"            ze = new DateTimeFormatterBuilder()
",2,0,0,1,2,0,0,2,0,5,35,6,0.00000,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,14,1708,"        return ze;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,time,org/joda/time/DateTime,14,2045,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,2046,"            iInstant = instant;
",4,0,0,0,0,0,0,0,0,5,19,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,2047,"            iField = field;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,2048,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,2054,"            oos.writeObject(iInstant);
",0,0,0,1,2,0,6,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/DateTime,14,2055,"            oos.writeObject(iField.getType());
",0,0,0,2,4,0,8,0,0,8,34,6,0.00000,0
defect4j,time,org/joda/time/DateTime,14,2056,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,2062,"            iInstant = (DateTime) oos.readObject();
",2,0,0,2,4,0,4,2,0,9,39,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,2063,"            DateTimeFieldType type = (DateTimeFieldType) oos.readObject();
",2,0,0,2,4,0,4,4,0,10,62,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,2064,"            iField = type.getField(iInstant.getChronology());
",2,0,0,2,4,0,8,0,0,11,49,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,2065,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/DateTime,14,2074,"            return iField;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,2083,"            return iInstant.getMillis();
",0,0,0,1,2,1,4,0,0,4,28,6,0.00000,0
defect4j,time,org/joda/time/DateTime,14,2093,"            return iInstant.getChronology();
",0,0,0,1,2,1,4,0,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/DateTime,14,2102,"            return iInstant;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,2119,"            return iInstant.withMillis(iField.add(iInstant.getMillis(), value));
",0,0,0,3,6,1,14,0,0,14,68,6,0.00000,0
defect4j,time,org/joda/time/DateTime,14,2135,"            return iInstant.withMillis(iField.add(iInstant.getMillis(), value));
",0,0,0,3,6,1,14,0,0,14,68,6,0.00000,0
defect4j,time,org/joda/time/DateTime,14,2153,"            return iInstant.withMillis(iField.addWrapField(iInstant.getMillis(), value));
",0,0,0,3,6,1,14,0,0,14,77,6,0.00000,0
defect4j,time,org/joda/time/DateTime,14,2170,"            return iInstant.withMillis(iField.set(iInstant.getMillis(), value));
",0,0,0,3,6,1,14,0,0,14,68,6,0.00000,0
defect4j,time,org/joda/time/DateTime,14,2187,"            return iInstant.withMillis(iField.set(iInstant.getMillis(), text, locale));
",0,0,0,3,6,1,16,0,0,16,75,6,0.00000,0
defect4j,time,org/joda/time/DateTime,14,2203,"            return setCopy(text, null);
",0,0,0,1,2,1,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/DateTime,14,2227,"            return setCopy(getMaximumValue());
",0,0,0,2,4,1,4,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/DateTime,14,2244,"            return setCopy(getMinimumValue());
",0,0,0,2,4,1,4,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/DateTime,14,2254,"            return iInstant.withMillis(iField.roundFloor(iInstant.getMillis()));
",0,0,0,3,6,1,12,0,0,12,68,6,0.00000,0
defect4j,time,org/joda/time/DateTime,14,2263,"            return iInstant.withMillis(iField.roundCeiling(iInstant.getMillis()));
",0,0,0,3,6,1,12,0,0,12,70,6,0.00000,0
defect4j,time,org/joda/time/DateTime,14,2273,"            return iInstant.withMillis(iField.roundHalfFloor(iInstant.getMillis()));
",0,0,0,3,6,1,12,0,0,12,72,6,0.00000,0
defect4j,time,org/joda/time/DateTime,14,2283,"            return iInstant.withMillis(iField.roundHalfCeiling(iInstant.getMillis()));
",0,0,0,3,6,1,12,0,0,12,74,6,0.00000,0
defect4j,time,org/joda/time/DateTime,14,2294,"            return iInstant.withMillis(iField.roundHalfEven(iInstant.getMillis()));
",0,0,0,3,6,1,12,0,0,12,71,6,0.00000,0
defect4j,time,org/joda/time/DurationField,14,209,"        if (value == Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/DurationField,14,210,"            return subtract(instant, (long) value);
",2,0,0,2,4,1,4,0,0,6,39,7,0.00000,0
defect4j,time,org/joda/time/DurationField,14,212,"        return add(instant, -value);
",2,0,0,1,2,1,4,0,0,7,28,5,0.00000,0
defect4j,time,org/joda/time/DurationField,14,224,"        if (value == Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,30,4,0.00000,0
defect4j,time,org/joda/time/DurationField,14,225,"            throw new ArithmeticException(""Long.MIN_VALUE cannot be negated"");
",0,0,0,1,2,0,0,2,0,3,66,7,0.00000,0
defect4j,time,org/joda/time/DurationField,14,227,"        return add(instant, -value);
",2,0,0,1,2,1,4,0,0,7,28,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,14,49,"            throw new IllegalArgumentException(""The scalar must not be 0 or 1"");
",0,0,0,1,2,0,0,2,0,3,68,7,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,14,55,"        return getWrappedField().getValue(duration) / iScalar;
",2,1,0,2,4,1,6,0,0,9,54,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,14,59,"        return getWrappedField().getValueAsLong(duration) / iScalar;
",2,1,0,2,4,1,6,0,0,9,60,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,14,63,"        return getWrappedField().getValue(duration, instant) / iScalar;
",2,1,0,2,4,1,8,0,0,11,63,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,14,67,"        return getWrappedField().getValueAsLong(duration, instant) / iScalar;
",2,1,0,2,4,1,8,0,0,11,69,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,14,71,"        long scaled = ((long) value) * ((long) iScalar);
",6,1,0,4,8,0,0,0,0,7,48,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,14,72,"        return getWrappedField().getMillis(scaled);
",0,0,0,2,4,1,6,0,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,14,76,"        long scaled = FieldUtils.safeMultiply(value, iScalar);
",2,0,0,1,2,0,8,0,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,14,77,"        return getWrappedField().getMillis(scaled);
",0,0,0,2,4,1,6,0,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,14,81,"        long scaled = ((long) value) * ((long) iScalar);
",6,1,0,4,8,0,0,0,0,7,48,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,14,82,"        return getWrappedField().getMillis(scaled, instant);
",0,0,0,2,4,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,14,86,"        long scaled = FieldUtils.safeMultiply(value, iScalar);
",2,0,0,1,2,0,8,0,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,14,87,"        return getWrappedField().getMillis(scaled, instant);
",0,0,0,2,4,1,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,14,91,"        long scaled = ((long) value) * ((long) iScalar);
",6,1,0,4,8,0,0,0,0,7,48,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,14,92,"        return getWrappedField().add(instant, scaled);
",0,0,0,2,4,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,14,96,"        long scaled = FieldUtils.safeMultiply(value, iScalar);
",2,0,0,1,2,0,8,0,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,14,97,"        return getWrappedField().add(instant, scaled);
",0,0,0,2,4,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,14,101,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iScalar;
",2,1,0,2,4,1,8,0,0,11,84,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,14,105,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iScalar;
",2,1,0,2,4,1,8,0,0,11,90,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,14,119,"        return iScalar;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,14,130,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,14,131,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,14,132,"        } else if (obj instanceof ScaledDurationField) {
",2,0,0,1,4,0,0,2,0,4,48,6,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,14,133,"            ScaledDurationField other = (ScaledDurationField) obj;
",4,0,0,1,2,0,0,4,0,8,54,7,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,14,134,"            return (getWrappedField().equals(other.getWrappedField())) &&
",0,1,0,4,8,1,8,0,0,9,61,7,0.00000,0
defect4j,time,org/joda/time/field/ScaledDurationField,14,138,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,14,54,"            throw new IllegalArgumentException(""The field must not be null"");
",0,0,0,1,2,0,0,2,0,4,65,6,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,14,57,"            throw new IllegalArgumentException(""The field must be supported"");
",0,0,0,1,2,0,0,2,0,3,66,7,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,14,73,"        return iField.isPrecise();
",0,0,0,1,2,1,4,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,14,77,"        return iField.getValueAsLong(duration, instant);
",0,0,0,1,2,1,8,0,0,8,48,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,14,81,"        return iField.getMillis(value, instant);
",0,0,0,1,2,1,8,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,14,85,"        return iField.getMillis(value, instant);
",0,0,0,1,2,1,8,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,14,89,"        return iField.add(instant, value);
",0,0,0,1,2,1,8,0,0,8,34,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,14,93,"        return iField.add(instant, value);
",0,0,0,1,2,1,8,0,0,8,34,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDurationField,14,97,"        return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,69,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,14,49,"            throw new IllegalArgumentException(""The type must not be null"");
",0,0,0,1,2,0,0,2,0,4,64,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,14,59,"        return iType.getName();
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,14,79,"        return FieldUtils.safeToInt(getValueAsLong(duration));
",0,0,0,2,4,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,14,91,"        return duration / getUnitMillis();
",2,1,0,1,2,1,2,0,0,5,34,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,14,111,"        return FieldUtils.safeToInt(getValueAsLong(duration, instant));
",0,0,0,2,4,1,10,0,0,10,63,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,14,123,"        return value * getUnitMillis();  // safe
",2,1,0,1,2,1,2,0,0,5,40,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,14,135,"        return FieldUtils.safeMultiply(value, getUnitMillis());
",0,0,0,2,4,1,8,0,0,8,55,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,14,141,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));
",0,0,0,2,4,1,10,0,0,10,84,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,14,146,"        long otherMillis = otherField.getUnitMillis();
",2,0,0,1,2,0,4,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,14,147,"        long thisMillis = getUnitMillis();
",2,0,0,1,2,0,2,0,0,4,34,5,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,14,149,"        if (thisMillis == otherMillis) {
",4,1,0,1,3,0,0,0,0,5,32,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,14,150,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,14,152,"        if (thisMillis < otherMillis) {
",4,1,0,1,3,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,14,153,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,6,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,14,155,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,14,165,"        return ""DurationField["" + getName() + ']';
",0,1,0,2,4,1,2,0,0,5,42,4,0.00000,0
defect4j,time,org/joda/time/field/BaseDurationField,14,38,"public abstract class BaseDurationField extends DurationField implements Serializable {
",2,0,0,0,1,2,0,4,0,8,87,1,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,14,216,"        return iName;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,14,234,"        return getField(chronology).isSupported();
",0,0,0,2,4,1,6,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,14,243,"        return getName();
",0,0,0,1,2,1,2,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/field/SkipDateTimeField,14,70,"        } else if (min == skip) {
",4,1,0,1,4,0,0,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/field/SkipDateTimeField,14,71,"            iMinValue = skip + 1;
",4,1,0,0,0,0,0,0,0,6,21,7,0.00000,0
defect4j,time,org/joda/time/field/SkipDateTimeField,14,73,"            iMinValue = min;
",4,0,0,0,0,0,0,0,0,5,16,7,0.00000,0
defect4j,time,org/joda/time/field/SkipDateTimeField,14,88,"        FieldUtils.verifyValueBounds(this, value, iMinValue, getMaximumValue());
",0,0,0,2,4,0,10,0,0,10,72,5,0.00000,0
defect4j,time,org/joda/time/field/SkipDateTimeField,14,89,"        if (value <= iSkip) {
",4,1,0,1,3,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/field/SkipDateTimeField,14,90,"            if (value == iSkip) {
",4,1,0,1,3,0,0,0,0,5,21,6,0.00000,0
defect4j,time,org/joda/time/field/SkipDateTimeField,14,91,"                throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,10,0.00000,0
defect4j,time,org/joda/time/field/SkipDateTimeField,14,94,"            value++;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,time,org/joda/time/field/SkipDateTimeField,14,96,"        return super.set(millis, value);
",6,0,0,1,2,1,0,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/field/SkipDateTimeField,14,104,"        return getType().getField(iChronology);
",0,0,0,2,4,1,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,64,"            throw new IllegalArgumentException(""The field must not be null"");
",0,0,0,1,2,0,0,2,0,4,65,6,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,76,"        return iField;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,84,"        return iType.getName();
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,92,"        return iField.isLenient();
",0,0,0,1,2,1,4,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,100,"        return iField.getAsText(instant, locale);
",0,0,0,1,2,1,8,0,0,8,41,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,104,"        return iField.getAsText(instant);
",0,0,0,1,2,1,6,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,108,"        return iField.getAsText(partial, fieldValue, locale);
",0,0,0,1,2,1,10,0,0,10,53,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,112,"        return iField.getAsText(partial, locale);
",0,0,0,1,2,1,8,0,0,8,41,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,116,"        return iField.getAsText(fieldValue, locale);
",0,0,0,1,2,1,8,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,120,"        return iField.getAsShortText(instant, locale);
",0,0,0,1,2,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,124,"        return iField.getAsShortText(instant);
",0,0,0,1,2,1,6,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,128,"        return iField.getAsShortText(partial, fieldValue, locale);
",0,0,0,1,2,1,10,0,0,10,58,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,132,"        return iField.getAsShortText(partial, locale);
",0,0,0,1,2,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,136,"        return iField.getAsShortText(fieldValue, locale);
",0,0,0,1,2,1,8,0,0,8,49,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,140,"        return iField.add(instant, value);
",0,0,0,1,2,1,8,0,0,8,34,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,144,"        return iField.add(instant, value);
",0,0,0,1,2,1,8,0,0,8,34,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,148,"        return iField.add(instant, fieldIndex, values, valueToAdd);
",0,0,0,1,2,1,12,0,0,12,59,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,152,"        return iField.addWrapPartial(instant, fieldIndex, values, valueToAdd);
",0,0,0,1,2,1,12,0,0,12,70,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,156,"        return iField.addWrapField(instant, value);
",0,0,0,1,2,1,8,0,0,8,43,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,160,"        return iField.addWrapField(instant, fieldIndex, values, valueToAdd);
",0,0,0,1,2,1,12,0,0,12,68,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,164,"        return iField.getDifference(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,63,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,168,"        return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,69,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,176,"        return iField.set(instant, text, locale);
",0,0,0,1,2,1,10,0,0,10,41,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,180,"        return iField.set(instant, text);
",0,0,0,1,2,1,8,0,0,8,33,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,184,"        return iField.set(instant, fieldIndex, values, newValue);
",0,0,0,1,2,1,12,0,0,12,57,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,188,"        return iField.set(instant, fieldIndex, values, text, locale);
",0,0,0,1,2,1,14,0,0,14,61,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,200,"        return iField.isLeap(instant);
",0,0,0,1,2,1,6,0,0,6,30,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,204,"        return iField.getLeapAmount(instant);
",0,0,0,1,2,1,6,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,216,"        return iField.getMinimumValue(instant);
",0,0,0,1,2,1,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,220,"        return iField.getMinimumValue(instant);
",0,0,0,1,2,1,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,224,"        return iField.getMinimumValue(instant, values);
",0,0,0,1,2,1,8,0,0,8,47,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,232,"        return iField.getMaximumValue(instant);
",0,0,0,1,2,1,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,236,"        return iField.getMaximumValue(instant);
",0,0,0,1,2,1,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,240,"        return iField.getMaximumValue(instant, values);
",0,0,0,1,2,1,8,0,0,8,47,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,244,"        return iField.getMaximumTextLength(locale);
",0,0,0,1,2,1,6,0,0,6,43,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,248,"        return iField.getMaximumShortTextLength(locale);
",0,0,0,1,2,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,252,"        return iField.roundFloor(instant);
",0,0,0,1,2,1,6,0,0,6,34,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,256,"        return iField.roundCeiling(instant);
",0,0,0,1,2,1,6,0,0,6,36,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,260,"        return iField.roundHalfFloor(instant);
",0,0,0,1,2,1,6,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,264,"        return iField.roundHalfCeiling(instant);
",0,0,0,1,2,1,6,0,0,6,40,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,268,"        return iField.roundHalfEven(instant);
",0,0,0,1,2,1,6,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,272,"        return iField.remainder(instant);
",0,0,0,1,2,1,6,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,14,276,"        return (""DateTimeField["" + getName() + ']');
",0,1,0,3,6,1,2,0,0,5,44,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,129,"        super(createMessage(fieldType.getName(), value, null, null, explain));
",0,0,0,3,6,0,10,0,0,12,70,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,130,"        iDateTimeFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,131,"        iDurationFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,132,"        iFieldName = fieldType.getName();
",2,0,0,1,2,0,4,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,133,"        iNumberValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,134,"        iStringValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,135,"        iLowerBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,136,"        iUpperBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,137,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,138,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,150,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));
",0,0,0,3,6,0,12,0,0,14,79,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,151,"        iDateTimeFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,152,"        iDurationFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,153,"        iFieldName = fieldType.getName();
",2,0,0,1,2,0,4,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,154,"        iNumberValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,155,"        iStringValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,156,"        iLowerBound = lowerBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,157,"        iUpperBound = upperBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,158,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,159,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,171,"        super(createMessage(fieldName, value, lowerBound, upperBound, null));
",0,0,0,2,4,0,10,0,0,12,69,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,172,"        iDateTimeFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,173,"        iDurationFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,174,"        iFieldName = fieldName;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,175,"        iNumberValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,176,"        iStringValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,177,"        iLowerBound = lowerBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,178,"        iUpperBound = upperBound;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,179,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,180,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,189,"        super(createMessage(fieldType.getName(), value));
",0,0,0,3,6,0,8,0,0,8,49,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,190,"        iDateTimeFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,191,"        iDurationFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,192,"        iFieldName = fieldType.getName();
",2,0,0,1,2,0,4,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,193,"        iStringValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,194,"        iNumberValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,195,"        iLowerBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,196,"        iUpperBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,197,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,198,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,207,"        super(createMessage(fieldType.getName(), value));
",0,0,0,3,6,0,8,0,0,8,49,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,208,"        iDateTimeFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,209,"        iDurationFieldType = fieldType;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,210,"        iFieldName = fieldType.getName();
",2,0,0,1,2,0,4,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,211,"        iStringValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,212,"        iNumberValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,213,"        iLowerBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,214,"        iUpperBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,215,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,216,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,225,"        super(createMessage(fieldName, value));
",0,0,0,2,4,0,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,226,"        iDateTimeFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,227,"        iDurationFieldType = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,228,"        iFieldName = fieldName;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,229,"        iStringValue = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,230,"        iNumberValue = null;
",2,0,0,0,0,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,231,"        iLowerBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,232,"        iUpperBound = null;
",2,0,0,0,0,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,233,"        iMessage = super.getMessage();
",4,0,0,1,2,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,234,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,45,"            if (upperBound == null) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,46,"                buf.append(""is not supported"");
",0,0,0,1,2,0,4,0,0,5,31,9,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,48,"                buf.append(""must not be larger than "").append(upperBound);
",0,0,0,2,4,0,8,0,0,9,58,9,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,51,"            buf.append(""must not be smaller than "").append(lowerBound);
",0,0,0,2,4,0,8,0,0,9,59,8,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,60,"            buf.append("": "").append(explain);
",0,0,0,2,4,0,8,0,0,9,33,7,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,74,"        StringBuffer buf = new StringBuffer().append(""Value "");
",2,0,0,2,4,0,2,4,0,9,55,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,76,"        if (value == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,77,"            buf.append(""null"");
",0,0,0,1,2,0,4,0,0,5,19,7,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,79,"            buf.append('""');
",0,0,0,1,2,0,4,0,0,5,16,7,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,80,"            buf.append(value);
",0,0,0,1,2,0,6,0,0,6,18,7,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,81,"            buf.append('""');
",0,0,0,1,2,0,4,0,0,5,16,7,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,84,"        buf.append("" for "").append(fieldName).append(' ').append(""is not supported"");
",0,0,0,4,8,0,12,0,0,15,77,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,86,"        return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,243,"        return iDateTimeFieldType;
",2,0,0,0,0,1,0,0,0,2,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,252,"        return iDurationFieldType;
",2,0,0,0,0,1,0,0,0,2,26,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,261,"        return iFieldName;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,270,"        return iNumberValue;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,279,"        return iStringValue;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,288,"        String value = iStringValue;
",4,0,0,0,0,0,0,2,0,6,28,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,289,"        if (value == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,290,"            value = String.valueOf(iNumberValue);
",2,0,0,1,2,0,6,0,0,9,37,6,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,292,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,301,"        return iLowerBound;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,310,"        return iUpperBound;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,323,"        if (iMessage == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,324,"            iMessage = message;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,325,"        } else if (message != null) {
",2,1,0,1,4,0,0,0,0,3,29,5,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,326,"            iMessage = message + "": "" + iMessage;
",6,1,0,0,0,0,0,0,0,9,37,7,0.00000,0
defect4j,time,org/joda/time/IllegalFieldValueException,14,328,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,59,"            throw new IllegalArgumentException(""The divisor must be at least 2"");
",0,0,0,1,2,0,0,2,0,3,69,7,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,64,"            iDurationField = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,90,"        super(remainderField.getWrappedField(), type);
",2,0,0,2,4,0,4,0,0,6,46,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,91,"        int divisor = iDivisor = remainderField.iDivisor;
",8,0,0,0,0,0,0,0,0,9,49,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,92,"        iDurationField = remainderField.iRangeField;
",6,0,0,0,0,0,0,0,0,7,44,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,94,"        DateTimeField field = getWrappedField();
",2,0,0,1,2,0,2,2,0,6,40,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,95,"        int i = field.getMinimumValue();
",2,0,0,1,2,0,4,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,96,"        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);
",12,5,0,3,6,0,0,0,0,17,59,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,98,"        int j = field.getMaximumValue();
",2,0,0,1,2,0,4,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,99,"        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);
",12,5,0,3,6,0,0,0,0,17,59,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,101,"        iMin = min;
",4,0,0,0,0,0,0,0,0,5,11,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,102,"        iMax = max;
",4,0,0,0,0,0,0,0,0,5,11,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,103,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,112,"        int value = getWrappedField().get(instant);
",2,0,0,2,4,0,6,0,0,8,43,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,113,"        if (value >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,114,"            return value / iDivisor;
",4,1,0,0,0,1,0,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,116,"            return ((value + 1) / iDivisor) - 1;
",4,3,0,2,4,1,0,0,0,7,36,6,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,129,"        return getWrappedField().add(instant, amount * iDivisor);
",4,1,0,2,4,1,6,0,0,11,57,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,141,"        return getWrappedField().add(instant, amount * iDivisor);
",4,1,0,2,4,1,6,0,0,11,57,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,153,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));
",0,0,0,3,6,1,18,0,0,18,82,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,157,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iDivisor;
",2,1,0,2,4,1,8,0,0,11,85,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,161,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iDivisor;
",2,1,0,2,4,1,8,0,0,11,91,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,173,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);
",0,0,0,1,2,0,10,0,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,174,"        int remainder = getRemainder(getWrappedField().get(instant));
",2,0,0,3,6,0,8,0,0,10,61,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,175,"        return getWrappedField().set(instant, value * iDivisor + remainder);
",6,2,0,2,4,1,6,0,0,14,68,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,191,"        return iMin;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,200,"        return iMax;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,204,"        DateTimeField field = getWrappedField();
",2,0,0,1,2,0,2,2,0,6,40,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,205,"        return field.roundFloor(field.set(instant, get(instant) * iDivisor));
",2,1,0,3,6,1,14,0,0,17,69,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,209,"        return set(instant, get(getWrappedField().remainder(instant)));
",0,0,0,4,8,1,12,0,0,12,63,5,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,218,"        return iDivisor;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,222,"        if (value >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,223,"            return value % iDivisor;
",4,1,0,0,0,1,0,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/field/DividedDateTimeField,14,225,"            return (iDivisor - 1) + ((value + 1) % iDivisor);
",6,4,0,3,6,1,0,0,0,10,49,6,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,14,56,"            throw new IllegalArgumentException(""The field must not be null"");
",0,0,0,1,2,0,0,2,0,4,65,6,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,14,59,"            throw new IllegalArgumentException(""The field must be supported"");
",0,0,0,1,2,0,0,2,0,3,66,7,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,14,74,"        return iField.isLenient();
",0,0,0,1,2,1,4,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,14,78,"        return iField.get(instant);
",0,0,0,1,2,1,6,0,0,6,27,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,14,94,"        return iField.getMinimumValue();
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,14,98,"        return iField.getMaximumValue();
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,14,102,"        return iField.roundFloor(instant);
",0,0,0,1,2,1,6,0,0,6,34,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,14,55,"            throw new IllegalArgumentException(""The divisor must be at least 2"");
",0,0,0,1,2,0,0,2,0,3,69,7,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,14,60,"            iRangeField = null;
",2,0,0,0,0,0,0,0,0,3,19,6,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,14,100,"        int value = getWrappedField().get(instant);
",2,0,0,2,4,0,6,0,0,8,43,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,14,101,"        if (value >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,14,102,"            return value % iDivisor;
",4,1,0,0,0,1,0,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,14,104,"            return (iDivisor - 1) + ((value + 1) % iDivisor);
",6,4,0,3,6,1,0,0,0,10,49,6,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,14,118,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, 0, iDivisor - 1));
",2,1,0,3,6,1,14,0,0,17,87,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,14,130,"        FieldUtils.verifyValueBounds(this, value, 0, iDivisor - 1);
",2,1,0,1,2,0,6,0,0,9,59,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,14,131,"        int divided = getDivided(getWrappedField().get(instant));
",2,0,0,3,6,0,8,0,0,10,57,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,14,132,"        return getWrappedField().set(instant, divided * iDivisor + value);
",6,2,0,2,4,1,6,0,0,14,66,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,14,162,"        return getWrappedField().roundFloor(instant);
",0,0,0,2,4,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,14,166,"        return getWrappedField().roundCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,14,170,"        return getWrappedField().roundHalfFloor(instant);
",0,0,0,2,4,1,6,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,14,174,"        return getWrappedField().roundHalfCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,14,178,"        return getWrappedField().roundHalfEven(instant);
",0,0,0,2,4,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,14,182,"        return getWrappedField().remainder(instant);
",0,0,0,2,4,1,6,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,14,191,"        return iDivisor;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,14,195,"        if (value >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,14,196,"            return value / iDivisor;
",4,1,0,0,0,1,0,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,14,198,"            return ((value + 1) / iDivisor) - 1;
",4,3,0,2,4,1,0,0,0,7,36,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,14,76,"        return duration / iUnitMillis;  // safe
",4,1,0,0,0,1,0,0,0,5,39,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,14,88,"        return value * iUnitMillis;  // safe
",4,1,0,0,0,1,0,0,0,5,36,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,14,100,"        return FieldUtils.safeMultiply(value, iUnitMillis);
",0,0,0,1,2,1,8,0,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,14,104,"        long addition = value * iUnitMillis;  // safe
",6,1,0,0,0,0,0,0,0,7,45,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,14,105,"        return FieldUtils.safeAdd(instant, addition);
",0,0,0,1,2,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,14,109,"        long addition = FieldUtils.safeMultiply(value, iUnitMillis);
",2,0,0,1,2,0,8,0,0,10,60,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,14,110,"        return FieldUtils.safeAdd(instant, addition);
",0,0,0,1,2,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,14,114,"        long difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);
",2,0,0,1,2,0,8,0,0,10,77,5,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,14,115,"        return difference / iUnitMillis;
",4,1,0,0,0,1,0,0,0,5,32,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,14,127,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,14,128,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,14,129,"        } else if (obj instanceof PreciseDurationField) {
",2,0,0,1,4,0,0,2,0,4,49,6,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,14,130,"            PreciseDurationField other = (PreciseDurationField) obj;
",4,0,0,1,2,0,0,4,0,8,56,7,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,14,131,"            return (getType() == other.getType()) && (iUnitMillis == other.iUnitMillis);
",6,3,0,4,8,1,6,0,0,15,76,7,0.00000,0
defect4j,time,org/joda/time/field/PreciseDurationField,14,133,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,14,79,"        return iType;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,14,83,"        return iType.getName();
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,14,101,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,14,110,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,14,119,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,14,128,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,14,137,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,14,146,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,14,155,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,14,164,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,14,173,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,14,182,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,14,191,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,14,200,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,14,209,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,14,227,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,14,238,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,14,239,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,14,240,"        } else if (obj instanceof UnsupportedDurationField) {
",2,0,0,1,4,0,0,2,0,4,53,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,14,241,"            UnsupportedDurationField other = (UnsupportedDurationField) obj;
",4,0,0,1,2,0,0,4,0,8,64,7,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,14,242,"            if (other.getName() == null) {
",0,1,0,2,5,0,4,0,0,5,30,7,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,14,243,"                return (getName() == null);
",0,1,0,2,4,1,2,0,0,4,27,10,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,14,245,"            return (other.getName().equals(getName()));
",0,0,0,4,8,1,8,0,0,8,43,9,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,14,247,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,14,256,"        return getName().hashCode();
",0,0,0,2,4,1,4,0,0,4,28,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,14,265,"        return ""UnsupportedDurationField["" + getName() + ']';
",0,1,0,2,4,1,2,0,0,5,53,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,14,272,"        return getInstance(iType);
",0,0,0,1,2,1,4,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,14,276,"        return new UnsupportedOperationException(iType + "" field is unsupported"");
",2,1,0,1,2,1,0,2,0,6,74,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,14,32,"public final class UnsupportedDurationField extends DurationField implements Serializable {
",2,0,0,0,1,2,0,4,0,8,91,1,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,82,"    private UnsupportedDateTimeField(DateTimeFieldType type, DurationField durationField) {
",6,0,0,1,3,1,0,4,0,11,87,2,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,83,"        if (type == null || durationField == null) {
",4,3,0,1,3,0,0,0,0,7,44,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,84,"            throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,8,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,86,"        iType = type;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,87,"        iDurationField = durationField;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,88,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,55,"        if (cCache == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,56,"            cCache = new HashMap<DateTimeFieldType, UnsupportedDateTimeField>(7);
",2,0,0,1,2,0,0,6,0,9,69,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,57,"            field = null;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,59,"            field = cCache.get(type);
",2,0,0,1,2,0,6,0,0,9,25,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,60,"            if (field != null && field.getDurationField() != durationField) {
",4,3,0,2,5,0,4,0,0,11,65,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,61,"                field = null;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,64,"        if (field == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,65,"            field = new UnsupportedDateTimeField(type, durationField);
",6,0,0,1,2,0,0,2,0,9,58,6,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,66,"            cCache.put(type, field);
",0,0,0,1,2,0,8,0,0,8,24,7,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,68,"        return field;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,95,"        return iType;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,99,"        return iType.getName();
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,108,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,117,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,126,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,135,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,144,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,153,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,162,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,171,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,180,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,189,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,198,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,207,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,216,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,225,"        return getDurationField().add(instant, value);
",0,0,0,2,4,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,234,"        return getDurationField().add(instant, value);
",0,0,0,2,4,1,8,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,243,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,252,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,261,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,270,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,279,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,75,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,288,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,81,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,297,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,306,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,315,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,324,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,333,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,343,"        return iDurationField;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,352,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,361,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,370,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,379,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,388,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,397,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,406,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,415,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,424,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,433,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,442,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,451,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,460,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,469,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,478,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,487,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,496,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,505,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,514,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,523,"        throw unsupported();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,533,"        return ""UnsupportedDateTimeField"";
",0,0,0,0,0,1,0,0,0,1,34,4,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,540,"        return getInstance(iType, iDurationField);
",0,0,0,1,2,1,6,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,14,544,"        return new UnsupportedOperationException(iType + "" field is unsupported"");
",2,1,0,1,2,1,0,2,0,6,74,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,14,53,"        return ""millis"";
",0,0,0,0,0,1,0,0,0,1,16,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,14,85,"        return FieldUtils.safeToInt(duration);
",0,0,0,1,2,1,6,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,14,89,"        return duration;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,14,93,"        return FieldUtils.safeToInt(duration);
",0,0,0,1,2,1,6,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,14,97,"        return duration;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,14,101,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,14,105,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,14,109,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,14,113,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,14,117,"        return FieldUtils.safeAdd(instant, value);
",0,0,0,1,2,1,8,0,0,8,42,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,14,121,"        return FieldUtils.safeAdd(instant, value);
",0,0,0,1,2,1,8,0,0,8,42,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,14,125,"        return FieldUtils.safeToInt(FieldUtils.safeSubtract(minuendInstant, subtrahendInstant));
",0,0,0,2,4,1,12,0,0,12,88,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,14,129,"        return FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,66,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,14,134,"        long otherMillis = otherField.getUnitMillis();
",2,0,0,1,2,0,4,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,14,135,"        long thisMillis = getUnitMillis();
",2,0,0,1,2,0,2,0,0,4,34,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,14,137,"        if (thisMillis == otherMillis) {
",4,1,0,1,3,0,0,0,0,5,32,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,14,138,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,14,140,"        if (thisMillis < otherMillis) {
",4,1,0,1,3,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,14,141,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,6,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,14,143,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,14,148,"        if (obj instanceof MillisDurationField) {
",2,0,0,1,3,0,0,2,0,4,41,5,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,14,149,"            return getUnitMillis() == ((MillisDurationField) obj).getUnitMillis();
",2,1,0,4,8,1,4,2,0,9,70,6,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,14,151,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,14,164,"        return ""DurationField[millis]"";
",0,0,0,1,2,1,0,0,0,1,31,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,14,171,"        return INSTANCE;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/field/MillisDurationField,14,32,"public final class MillisDurationField extends DurationField implements Serializable {
",2,0,0,0,1,2,0,4,0,8,86,1,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,14,91,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));
",0,0,0,2,4,1,10,0,0,10,84,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,14,118,"        if (minuendInstant < subtrahendInstant) {
",4,1,0,1,3,0,0,0,0,5,41,4,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,14,119,"            return -getDifferenceAsLong(subtrahendInstant, minuendInstant);
",0,0,0,1,2,1,6,0,0,7,63,6,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,14,122,"        long difference = (minuendInstant - subtrahendInstant) / iUnitMillis;
",8,2,0,1,2,0,0,0,0,10,69,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,14,123,"        if (add(subtrahendInstant, difference) < minuendInstant) {
",2,1,0,2,5,0,6,0,0,9,58,4,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,14,125,"                difference++;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,14,126,"            } while (add(subtrahendInstant, difference) <= minuendInstant);
",2,1,0,2,5,0,6,0,0,9,63,6,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,14,127,"            difference--;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,14,128,"        } else if (add(subtrahendInstant, difference) > minuendInstant) {
",2,1,0,2,6,0,6,0,0,9,65,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,14,130,"                difference--;
",2,0,0,0,0,0,0,0,0,3,13,9,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,14,131,"            } while (add(subtrahendInstant, difference) > minuendInstant);
",2,1,0,2,5,0,6,0,0,9,62,7,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,14,133,"        return difference;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,14,145,"        return iUnitMillis;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,14,76,"            throw new IllegalArgumentException(""The offset cannot be zero"");
",0,0,0,1,2,0,0,2,0,3,64,7,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,14,84,"            iMin = minValue;
",4,0,0,0,0,0,0,0,0,5,16,6,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,14,89,"            iMax = maxValue;
",4,0,0,0,0,0,0,0,0,5,16,6,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,14,100,"        return super.get(instant) + iOffset;
",6,1,0,1,2,1,0,0,0,7,36,4,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,14,112,"        instant = super.add(instant, amount);
",8,0,0,1,2,0,0,0,0,9,37,4,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,14,113,"        FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);
",0,0,0,2,4,0,12,0,0,12,61,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,14,114,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,14,126,"        instant = super.add(instant, amount);
",8,0,0,1,2,0,0,0,0,9,37,4,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,14,127,"        FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);
",0,0,0,2,4,0,12,0,0,12,61,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,14,128,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,14,140,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));
",0,0,0,3,6,1,18,0,0,18,82,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,14,157,"        return getWrappedField().isLeap(instant);
",0,0,0,2,4,1,6,0,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,14,161,"        return getWrappedField().getLeapAmount(instant);
",0,0,0,2,4,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,14,187,"        return getWrappedField().roundFloor(instant);
",0,0,0,2,4,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,14,191,"        return getWrappedField().roundCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,14,195,"        return getWrappedField().roundHalfFloor(instant);
",0,0,0,2,4,1,6,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,14,199,"        return getWrappedField().roundHalfCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,14,203,"        return getWrappedField().roundHalfEven(instant);
",0,0,0,2,4,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,14,207,"        return getWrappedField().remainder(instant);
",0,0,0,2,4,1,6,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,14,216,"        return iOffset;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,14,156,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,14,164,"            return ImpreciseDateTimeField.this
",2,0,0,0,0,1,0,0,0,2,34,7,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,14,169,"            return ImpreciseDateTimeField.this
",2,0,0,0,0,1,0,0,0,2,34,7,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,14,174,"            return ImpreciseDateTimeField.this.add(instant, value) - instant;
",4,1,0,1,2,1,6,0,0,11,65,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,14,178,"            return ImpreciseDateTimeField.this.add(instant, value) - instant;
",4,1,0,1,2,1,6,0,0,11,65,5,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,14,182,"            return ImpreciseDateTimeField.this.add(instant, value);
",2,0,0,1,2,1,6,0,0,8,55,6,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,14,186,"            return ImpreciseDateTimeField.this.add(instant, value);
",2,0,0,1,2,1,6,0,0,8,55,6,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,14,190,"            return ImpreciseDateTimeField.this
",2,0,0,0,0,1,0,0,0,2,34,7,0.00000,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,14,195,"            return ImpreciseDateTimeField.this
",2,0,0,0,0,1,0,0,0,2,34,7,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,36,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,37,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,50,"            throw new ArithmeticException(""Integer.MIN_VALUE cannot be negated"");
",0,0,0,1,2,0,0,2,0,3,69,7,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,64,"        int sum = val1 + val2;
",6,1,0,0,0,0,0,0,0,7,22,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,66,"        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {
",8,5,0,3,7,0,0,0,0,13,45,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,67,"            throw new ArithmeticException
",0,0,0,0,0,0,0,2,0,2,29,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,70,"        return sum;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,82,"        long sum = val1 + val2;
",6,1,0,0,0,0,0,0,0,7,23,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,84,"        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {
",8,5,0,3,7,0,0,0,0,13,45,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,85,"            throw new ArithmeticException
",0,0,0,0,0,0,0,2,0,2,29,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,88,"        return sum;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,100,"        long diff = val1 - val2;
",6,1,0,0,0,0,0,0,0,7,24,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,102,"        if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {
",8,5,0,3,7,0,0,0,0,13,45,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,103,"            throw new ArithmeticException
",0,0,0,0,0,0,0,2,0,2,29,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,106,"        return diff;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,119,"        long total = (long) val1 * (long) val2;
",6,1,0,2,4,0,0,0,0,7,39,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,120,"        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {
",12,3,0,1,3,0,0,0,0,15,61,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,121,"          throw new ArithmeticException(""Multiplication overflows an int: "" + val1 + "" * "" + val2);
",4,1,0,1,2,0,0,2,0,9,89,7,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,123,"        return (int) total;
",2,0,0,1,2,1,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,136,"        switch (val2) {
",2,0,0,1,3,0,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,138,"                if (val1 == Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,139,"                    throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);
",4,1,0,1,2,0,0,2,0,9,89,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,141,"                return -val1;
",2,0,0,0,0,1,0,0,0,3,13,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,143,"                return 0L;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,145,"                return val1;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,147,"        long total = val1 * val2;
",6,1,0,0,0,0,0,0,0,7,25,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,148,"        if (total / val2 != val1) {
",6,2,0,1,3,0,0,0,0,8,27,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,149,"          throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);
",4,1,0,1,2,0,0,2,0,9,89,7,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,151,"        return total;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,163,"        if (val2 == 1) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,164,"            return val1;
",2,0,0,0,0,1,0,0,0,2,12,6,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,166,"        if (val1 == 1) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,167,"            return val2;
",2,0,0,0,0,1,0,0,0,2,12,6,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,169,"        if (val1 == 0 || val2 == 0) {
",4,3,0,1,3,0,0,0,0,7,29,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,170,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,172,"        long total = val1 * val2;
",6,1,0,0,0,0,0,0,0,7,25,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,173,"        if (total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1 || val2 == Long.MIN_VALUE && val1 == -1) {
",22,10,0,1,3,0,0,0,0,34,107,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,174,"            throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);
",4,1,0,1,2,0,0,2,0,9,89,7,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,176,"        return total;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,187,"        if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {
",12,3,0,1,3,0,0,0,0,15,63,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,188,"            return (int) value;
",2,0,0,1,2,1,0,0,0,2,19,7,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,190,"        throw new ArithmeticException(""Value cannot fit in an int: "" + value);
",2,1,0,1,2,0,0,2,0,6,70,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,202,"        long val = FieldUtils.safeMultiply(val1, val2);
",2,0,0,1,2,0,8,0,0,10,47,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,203,"        return FieldUtils.safeToInt(val);
",0,0,0,1,2,1,6,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,236,"            throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,252,"        if ((value < lowerBound) || (value > upperBound)) {
",8,3,0,3,7,0,0,0,0,11,51,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,253,"            throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,8,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,257,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,276,"        return getWrappedValue(currentValue + wrapValue, minValue, maxValue);
",4,1,0,1,2,1,6,0,0,11,69,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,292,"        if (minValue >= maxValue) {
",4,1,0,1,3,0,0,0,0,5,27,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,293,"            throw new IllegalArgumentException(""MIN > MAX"");
",0,0,0,1,2,0,0,2,0,3,48,7,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,296,"        int wrapRange = maxValue - minValue + 1;
",6,2,0,0,0,0,0,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,297,"        value -= minValue;
",4,0,0,0,0,0,0,0,0,5,18,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,299,"        if (value >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,300,"            return (value % wrapRange) + minValue;
",6,2,0,1,2,1,0,0,0,8,38,6,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,303,"        int remByRange = (-value) % wrapRange;
",6,1,0,1,2,0,0,0,0,8,38,5,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,305,"        if (remByRange == 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,306,"            return 0 + minValue;
",2,1,0,0,0,1,0,0,0,3,20,6,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,308,"        return (wrapRange - remByRange) + minValue;
",6,2,0,1,2,1,0,0,0,8,43,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,321,"        if (object1 == object2) {
",4,1,0,1,3,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,322,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,324,"        if (object1 == null || object2 == null) {
",4,3,0,1,3,0,0,0,0,7,41,4,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,325,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/field/FieldUtils,14,327,"        return object1.equals(object2);
",0,0,0,1,2,1,6,0,0,6,31,5,0.00000,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,14,69,"        } else if (min == skip + 1) {
",4,2,0,1,4,0,0,0,0,6,29,5,0.00000,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,14,70,"            iMinValue = skip;
",4,0,0,0,0,0,0,0,0,5,17,7,0.00000,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,14,72,"            iMinValue = min;
",4,0,0,0,0,0,0,0,0,5,16,7,0.00000,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,14,79,"        int value = super.get(millis);
",6,0,0,1,2,0,0,0,0,6,30,5,0.00000,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,14,80,"        if (value < iSkip) {
",4,1,0,1,3,0,0,0,0,5,20,4,0.00000,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,14,81,"            value++;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,14,83,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,14,99,"        return getType().getField(iChronology);
",0,0,0,2,4,1,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,14,47,"            throw new IllegalArgumentException(""Wrapped field's minumum value must be zero"");
",0,0,0,1,2,0,0,2,0,3,81,7,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,14,52,"        int value = getWrappedField().get(instant);
",2,0,0,2,4,0,6,0,0,8,43,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,14,53,"        if (value == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,14,54,"            value = getMaximumValue();
",2,0,0,1,2,0,2,0,0,5,26,6,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,14,56,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,14,60,"        return getWrappedField().add(instant, value);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,14,64,"        return getWrappedField().add(instant, value);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,14,68,"        return getWrappedField().addWrapField(instant, value);
",0,0,0,2,4,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,14,72,"        return getWrappedField().addWrapField(instant, fieldIndex, values, valueToAdd);
",0,0,0,2,4,1,12,0,0,12,79,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,14,76,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,74,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,14,80,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,80,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,14,84,"        int max = getMaximumValue();
",2,0,0,1,2,0,2,0,0,4,28,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,14,85,"        FieldUtils.verifyValueBounds(this, value, 1, max);
",0,0,0,1,2,0,8,0,0,8,50,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,14,86,"        if (value == max) {
",4,1,0,1,3,0,0,0,0,5,19,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,14,87,"            value = 0;
",2,0,0,0,0,0,0,0,0,3,10,6,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,14,89,"        return getWrappedField().set(instant, value);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,14,93,"        return getWrappedField().isLeap(instant);
",0,0,0,2,4,1,6,0,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,14,97,"        return getWrappedField().getLeapAmount(instant);
",0,0,0,2,4,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,14,110,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,14,119,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,14,128,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,14,137,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,14,147,"        return getWrappedField().getMaximumValue() + 1;
",0,1,0,2,4,1,4,0,0,5,47,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,14,157,"        return getWrappedField().getMaximumValue(instant) + 1;
",0,1,0,2,4,1,6,0,0,7,54,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,14,167,"        return getWrappedField().getMaximumValue(instant) + 1;
",0,1,0,2,4,1,6,0,0,7,54,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,14,177,"        return getWrappedField().getMaximumValue(instant, values) + 1;
",0,1,0,2,4,1,8,0,0,9,62,4,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,14,181,"        return getWrappedField().roundFloor(instant);
",0,0,0,2,4,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,14,185,"        return getWrappedField().roundCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,14,189,"        return getWrappedField().roundHalfFloor(instant);
",0,0,0,2,4,1,6,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,14,193,"        return getWrappedField().roundHalfCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,14,197,"        return getWrappedField().roundHalfEven(instant);
",0,0,0,2,4,1,6,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,14,201,"        return getWrappedField().remainder(instant);
",0,0,0,2,4,1,6,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,97,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,102,"            return chrono;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,143,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,144,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,146,"        if (zone == getZone()) {
",2,1,0,2,5,0,2,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,147,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,149,"        return getInstance(zone);
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,160,"        String str = ""ISOChronology"";
",2,0,0,0,0,0,0,2,0,5,29,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,161,"        DateTimeZone zone = getZone();
",2,0,0,1,2,0,2,2,0,6,30,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,162,"        if (zone != null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,163,"            str = str + '[' + zone.getID() + ']';
",4,1,0,2,4,0,4,0,0,12,37,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,165,"        return str;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,190,"        return super.equals(obj);
",4,0,0,1,2,1,0,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,200,"        return ""ISO"".hashCode() * 11 + getZone().hashCode();
",0,2,0,3,6,1,6,0,0,9,52,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,208,"        return new Stub(getZone());
",0,0,0,2,4,1,2,2,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,107,"        if ((base = iBase) != null) {
",4,1,0,2,5,0,0,0,0,6,29,4,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,108,"            return base.getZone();
",0,0,0,1,2,1,4,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,110,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,118,"        if ((base = iBase) != null && (iBaseFlags & 6) == 6) {
",6,4,0,3,7,0,0,0,0,11,54,4,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,120,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);
",0,0,0,1,2,1,12,0,0,12,74,7,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,122,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);
",10,0,0,1,2,1,0,0,0,10,75,5,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,133,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,
",0,0,0,0,1,1,10,0,0,10,60,7,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,146,"        if ((base = iBase) != null && (iBaseFlags & 1) == 1) {
",6,4,0,3,7,0,0,0,0,11,54,4,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,148,"            return base.getDateTimeMillis
",0,0,0,0,0,1,4,0,0,4,29,7,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,151,"        return super.getDateTimeMillis
",2,0,0,0,0,1,0,0,0,2,30,5,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,389,"        in.defaultReadObject();
",0,0,0,1,2,0,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,390,"        setFields();
",0,0,0,1,2,0,2,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,391,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,102,"        long instant = year().set(0, year);
",2,0,0,2,4,0,6,0,0,8,35,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,103,"        instant = monthOfYear().set(instant, monthOfYear);
",2,0,0,2,4,0,8,0,0,11,50,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,104,"        instant = dayOfMonth().set(instant, dayOfMonth);
",2,0,0,2,4,0,8,0,0,11,48,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,105,"        return millisOfDay().set(instant, millisOfDay);
",0,0,0,2,4,1,8,0,0,8,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,163,"        instant = hourOfDay().set(instant, hourOfDay);
",2,0,0,2,4,0,8,0,0,11,46,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,164,"        instant = minuteOfHour().set(instant, minuteOfHour);
",2,0,0,2,4,0,8,0,0,11,52,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,165,"        instant = secondOfMinute().set(instant, secondOfMinute);
",2,0,0,2,4,0,8,0,0,11,56,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,166,"        return millisOfSecond().set(instant, millisOfSecond);
",0,0,0,2,4,1,8,0,0,8,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,188,"                throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,193,"                throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,203,"                throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,208,"                throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,239,"        for (int i = 0, isize = partial.size(); i < isize; i++) {
",10,1,0,2,5,0,4,0,0,16,57,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,240,"            instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));
",2,0,0,4,8,0,18,0,0,21,83,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,242,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,255,"        int size = period.size();
",2,0,0,1,2,0,4,0,0,6,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,256,"        int[] values = new int[size];
",2,0,1,2,4,0,0,0,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,257,"        if (startInstant != endInstant) {
",4,1,0,1,3,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,258,"            for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,259,"                DurationField field = period.getFieldType(i).getField(this);
",2,0,0,2,4,0,8,2,0,12,60,8,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,260,"                int value = field.getDifference(endInstant, startInstant);
",2,0,0,1,2,0,8,0,0,10,58,9,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,261,"                startInstant = field.add(startInstant, value);
",2,0,0,1,2,0,8,0,0,11,46,8,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,262,"                values[i] = value;
",2,0,1,1,2,0,0,0,0,7,18,8,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,265,"        return values;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,276,"        int size = period.size();
",2,0,0,1,2,0,4,0,0,6,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,277,"        int[] values = new int[size];
",2,0,1,2,4,0,0,0,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,278,"        if (duration != 0) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,279,"            long current = 0;
",2,0,0,0,0,0,0,0,0,2,17,7,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,280,"            for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,281,"                DurationField field = period.getFieldType(i).getField(this);
",2,0,0,2,4,0,8,2,0,12,60,8,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,282,"                if (field.isPrecise()) {
",0,0,0,2,5,0,4,0,0,4,24,9,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,283,"                    int value = field.getDifference(duration, current);
",2,0,0,1,2,0,8,0,0,10,51,11,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,284,"                    current = field.add(current, value);
",2,0,0,1,2,0,8,0,0,11,36,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,285,"                    values[i] = value;
",2,0,1,1,2,0,0,0,0,7,18,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,289,"        return values;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,301,"        if (scalar != 0 && period != null) {
",4,3,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,302,"            for (int i = 0, isize = period.size(); i < isize; i++) {
",10,1,0,2,5,0,4,0,0,16,56,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,303,"                long value = period.getValue(i); // use long to allow for multiplication (fits OK)
",2,0,0,2,4,0,6,0,0,8,82,9,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,304,"                if (value != 0) {
",2,1,0,1,3,0,0,0,0,3,17,8,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,305,"                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);
",6,1,0,3,6,0,12,0,0,20,77,10,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,309,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,322,"        if (duration == 0 || scalar == 0) {
",4,3,0,1,3,0,0,0,0,7,35,4,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,323,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,325,"        long add = FieldUtils.safeMultiply(duration, scalar);
",2,0,0,1,2,0,8,0,0,10,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,326,"        return FieldUtils.safeAdd(instant, add);
",0,0,0,1,2,1,8,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,337,"        return UnsupportedDurationField.getInstance(DurationFieldType.millis());
",0,0,0,2,4,1,8,0,0,8,72,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,346,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfSecond(), millis());
",0,0,0,3,6,1,10,0,0,10,90,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,355,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfDay(), millis());
",0,0,0,3,6,1,10,0,0,10,87,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,366,"        return UnsupportedDurationField.getInstance(DurationFieldType.seconds());
",0,0,0,2,4,1,8,0,0,8,73,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,375,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfMinute(), seconds());
",0,0,0,3,6,1,10,0,0,10,91,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,384,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfDay(), seconds());
",0,0,0,3,6,1,10,0,0,10,88,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,395,"        return UnsupportedDurationField.getInstance(DurationFieldType.minutes());
",0,0,0,2,4,1,8,0,0,8,73,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,404,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfHour(), minutes());
",0,0,0,3,6,1,10,0,0,10,89,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,413,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfDay(), minutes());
",0,0,0,3,6,1,10,0,0,10,88,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,424,"        return UnsupportedDurationField.getInstance(DurationFieldType.hours());
",0,0,0,2,4,1,8,0,0,8,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,433,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfDay(), hours());
",0,0,0,3,6,1,10,0,0,10,84,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,442,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfDay(), hours());
",0,0,0,3,6,1,10,0,0,10,89,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,453,"        return UnsupportedDurationField.getInstance(DurationFieldType.halfdays());
",0,0,0,2,4,1,8,0,0,8,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,462,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfHalfday(), hours());
",0,0,0,3,6,1,10,0,0,10,88,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,471,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfHalfday(), hours());
",0,0,0,3,6,1,10,0,0,10,93,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,480,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.halfdayOfDay(), halfdays());
",0,0,0,3,6,1,10,0,0,10,90,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,491,"        return UnsupportedDurationField.getInstance(DurationFieldType.days());
",0,0,0,2,4,1,8,0,0,8,70,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,504,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfWeek(), days());
",0,0,0,3,6,1,10,0,0,10,83,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,513,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfMonth(), days());
",0,0,0,3,6,1,10,0,0,10,84,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,522,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfYear(), days());
",0,0,0,3,6,1,10,0,0,10,83,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,533,"        return UnsupportedDurationField.getInstance(DurationFieldType.weeks());
",0,0,0,2,4,1,8,0,0,8,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,542,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekOfWeekyear(), weeks());
",0,0,0,3,6,1,10,0,0,10,89,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,553,"        return UnsupportedDurationField.getInstance(DurationFieldType.weekyears());
",0,0,0,2,4,1,8,0,0,8,75,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,562,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyear(), weekyears());
",0,0,0,3,6,1,10,0,0,10,87,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,571,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyearOfCentury(), weekyears());
",0,0,0,3,6,1,10,0,0,10,96,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,582,"        return UnsupportedDurationField.getInstance(DurationFieldType.months());
",0,0,0,2,4,1,8,0,0,8,72,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,591,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.monthOfYear(), months());
",0,0,0,3,6,1,10,0,0,10,87,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,602,"        return UnsupportedDurationField.getInstance(DurationFieldType.years());
",0,0,0,2,4,1,8,0,0,8,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,611,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.year(), years());
",0,0,0,3,6,1,10,0,0,10,79,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,620,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfEra(), years());
",0,0,0,3,6,1,10,0,0,10,84,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,629,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfCentury(), years());
",0,0,0,3,6,1,10,0,0,10,88,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,640,"        return UnsupportedDurationField.getInstance(DurationFieldType.centuries());
",0,0,0,2,4,1,8,0,0,8,75,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,649,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.centuryOfEra(), centuries());
",0,0,0,3,6,1,10,0,0,10,91,5,0.00000,0
defect4j,time,org/joda/time/chrono/BaseChronology,14,669,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.era(), eras());
",0,0,0,3,6,1,10,0,0,10,77,5,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,14,65,"        this(DateTimeUtils.currentTimeMillis(), null);
",0,0,0,2,4,0,4,0,0,4,46,5,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,14,66,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,14,79,"        this(DateTimeUtils.currentTimeMillis(), chronology);
",2,0,0,2,4,0,4,0,0,6,52,4,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,14,80,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,14,93,"        this(instant, null);
",2,0,0,1,2,0,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,14,94,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,14,108,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,14,109,"        chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,4,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,14,110,"        iChronology = chronology.withUTC();
",2,0,0,1,2,0,4,0,0,7,35,4,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,14,111,"        iValues = chronology.get(this, instant);
",2,0,0,1,2,0,6,0,0,9,40,4,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,14,112,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,14,131,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,14,132,"        PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);
",2,0,0,2,4,0,8,2,0,12,89,4,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,14,133,"        chronology = converter.getChronology(instant, chronology);
",2,0,0,1,2,0,8,0,0,11,58,4,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,14,134,"        chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,4,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,14,135,"        iChronology = chronology.withUTC();
",2,0,0,1,2,0,4,0,0,7,35,4,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,14,136,"        iValues = converter.getPartialValues(this, instant, chronology);
",2,0,0,1,2,0,8,0,0,11,64,4,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,14,137,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,14,158,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,14,159,"        PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);
",2,0,0,2,4,0,8,2,0,12,89,4,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,14,160,"        chronology = converter.getChronology(instant, chronology);
",2,0,0,1,2,0,8,0,0,11,58,4,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,14,161,"        chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,4,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,14,162,"        iChronology = chronology.withUTC();
",2,0,0,1,2,0,4,0,0,7,35,4,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,14,163,"        iValues = converter.getPartialValues(this, instant, chronology, parser);
",2,0,0,1,2,0,10,0,0,13,72,4,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,14,164,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,14,211,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,14,212,"        iChronology = chrono.withUTC();
",2,0,0,1,2,0,4,0,0,7,31,4,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,14,213,"        iValues = base.iValues;
",6,0,0,0,0,0,0,0,0,7,23,4,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,14,214,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,14,265,"        DateTimeField field = getField(index);
",2,0,0,1,2,0,4,2,0,8,38,4,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,14,266,"        int[] values = field.set(this, index, iValues, value);
",2,0,0,2,4,0,10,0,0,12,54,5,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,14,267,"        System.arraycopy(values, 0, iValues, 0, iValues.length);
",4,0,0,1,2,0,8,0,0,12,56,5,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,14,268,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,14,280,"        getChronology().validate(this, values);
",0,0,0,2,4,0,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,14,281,"        System.arraycopy(values, 0, iValues, 0, iValues.length);
",4,0,0,1,2,0,8,0,0,12,56,5,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,14,282,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,14,292,"        if (pattern == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,14,293,"            return toString();
",0,0,0,1,2,1,2,0,0,2,18,7,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,14,295,"        return DateTimeFormat.forPattern(pattern).print(this);
",0,0,0,2,4,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,14,306,"        if (pattern == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,14,307,"            return toString();
",0,0,0,1,2,1,2,0,0,2,18,7,0.00000,0
defect4j,time,org/joda/time/base/BasePartial,14,309,"        return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);
",0,0,0,3,6,1,12,0,0,12,73,5,0.00000,0
defect4j,time,org/joda/time/Instant,14,108,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/Instant,14,109,"        iMillis = DateTimeUtils.currentTimeMillis();
",2,0,0,1,2,0,4,0,0,7,44,4,0.00000,0
defect4j,time,org/joda/time/Instant,14,110,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/Instant,14,132,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/Instant,14,133,"        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
",2,0,0,2,4,0,8,2,0,12,89,4,0.00000,0
defect4j,time,org/joda/time/Instant,14,134,"        iMillis = converter.getInstantMillis(instant, ISOChronology.getInstanceUTC());
",2,0,0,2,4,0,10,0,0,13,78,4,0.00000,0
defect4j,time,org/joda/time/Instant,14,135,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/Instant,14,73,"        return new Instant();
",0,0,0,1,2,1,0,2,0,2,21,6,0.00000,0
defect4j,time,org/joda/time/Instant,14,87,"        return parse(str, ISODateTimeFormat.dateTimeParser());
",0,0,0,2,4,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/Instant,14,98,"        return formatter.parseDateTime(str).toInstant();
",0,0,0,2,4,1,8,0,0,8,48,5,0.00000,0
defect4j,time,org/joda/time/Instant,14,157,"        return (newMillis == iMillis ? this : new Instant(newMillis));
",6,1,0,2,4,1,0,2,0,9,62,6,0.00000,0
defect4j,time,org/joda/time/Instant,14,171,"        if (durationToAdd == 0 || scalar == 0) {
",4,3,0,1,3,0,0,0,0,7,40,4,0.00000,0
defect4j,time,org/joda/time/Instant,14,172,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/Instant,14,174,"        long instant = getChronology().add(getMillis(), durationToAdd, scalar);
",2,0,0,3,6,0,10,0,0,12,71,5,0.00000,0
defect4j,time,org/joda/time/Instant,14,175,"        return withMillis(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/Instant,14,189,"        if (durationToAdd == null || scalar == 0) {
",4,3,0,1,3,0,0,0,0,7,43,4,0.00000,0
defect4j,time,org/joda/time/Instant,14,190,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/Instant,14,192,"        return withDurationAdded(durationToAdd.getMillis(), scalar);
",0,0,0,2,4,1,8,0,0,8,60,5,0.00000,0
defect4j,time,org/joda/time/Instant,14,206,"        return withDurationAdded(duration, 1);
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/Instant,14,219,"        return withDurationAdded(duration, 1);
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/Instant,14,233,"        return withDurationAdded(duration, -1);
",0,0,0,1,2,1,4,0,0,5,39,5,0.00000,0
defect4j,time,org/joda/time/Instant,14,246,"        return withDurationAdded(duration, -1);
",0,0,0,1,2,1,4,0,0,5,39,5,0.00000,0
defect4j,time,org/joda/time/Instant,14,268,"        return ISOChronology.getInstanceUTC();
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/Instant,14,288,"        return new DateTime(getMillis(), ISOChronology.getInstance());
",0,0,0,3,6,1,6,2,0,8,62,5,0.00000,0
defect4j,time,org/joda/time/Instant,14,315,"        return toDateTime();
",0,0,0,1,2,1,2,0,0,2,20,5,0.00000,0
defect4j,time,org/joda/time/Instant,14,334,"        return new MutableDateTime(getMillis(), ISOChronology.getInstance());
",0,0,0,3,6,1,6,2,0,8,69,5,0.00000,0
defect4j,time,org/joda/time/Instant,14,361,"        return toMutableDateTime();
",0,0,0,1,2,1,2,0,0,2,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,396,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,397,"            return getWrappedField().getValue(duration, instant);
",0,0,0,2,4,1,8,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,401,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,402,"            return getWrappedField().getValueAsLong(duration, instant);
",0,0,0,2,4,1,8,0,0,8,59,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,406,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,407,"            return getWrappedField().getMillis(value, instant);
",0,0,0,2,4,1,8,0,0,8,51,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,411,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,412,"            return getWrappedField().getMillis(value, instant);
",0,0,0,2,4,1,8,0,0,8,51,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,416,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,417,"            long result = getWrappedField().add(instant, amount);
",2,0,0,2,4,0,8,0,0,10,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,418,"            checkLimits(result, ""resulting"");
",0,0,0,1,2,0,4,0,0,5,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,419,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,423,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,424,"            long result = getWrappedField().add(instant, amount);
",2,0,0,2,4,0,8,0,0,10,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,425,"            checkLimits(result, ""resulting"");
",0,0,0,1,2,0,4,0,0,5,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,426,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,430,"            checkLimits(minuendInstant, ""minuend"");
",0,0,0,1,2,0,4,0,0,5,39,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,431,"            checkLimits(subtrahendInstant, ""subtrahend"");
",0,0,0,1,2,0,4,0,0,5,45,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,432,"            return getWrappedField().getDifference(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,74,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,436,"            checkLimits(minuendInstant, ""minuend"");
",0,0,0,1,2,0,4,0,0,5,39,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,437,"            checkLimits(subtrahendInstant, ""subtrahend"");
",0,0,0,1,2,0,4,0,0,5,45,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,438,"            return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,80,6,0.00000,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,93,"        return getInstance(DateTimeZone.getDefault());
",0,0,0,2,4,1,6,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,105,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,135,"        Chronology base = getBase();
",2,0,0,1,2,0,2,2,0,6,28,4,0.00000,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,136,"        return base == null ? getInstanceUTC() : getInstance(base.getZone());
",2,1,0,3,6,1,8,0,0,13,69,5,0.00000,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,147,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,157,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,158,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,160,"        if (zone == getZone()) {
",2,1,0,2,5,0,2,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,161,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,163,"        return getInstance(zone);
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,174,"        return super.equals(obj);
",4,0,0,1,2,1,0,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,184,"        return ""Buddhist"".hashCode() * 11 + getZone().hashCode();
",0,2,0,3,6,1,6,0,0,9,57,4,0.00000,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,195,"        String str = ""BuddhistChronology"";
",2,0,0,0,0,0,0,2,0,5,34,4,0.00000,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,196,"        DateTimeZone zone = getZone();
",2,0,0,1,2,0,2,2,0,6,30,4,0.00000,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,197,"        if (zone != null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,198,"            str = str + '[' + zone.getID() + ']';
",4,1,0,2,4,0,4,0,0,12,37,6,0.00000,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,14,200,"        return str;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,95,"        newInstant = to.weekyear().set(0, from.weekyear().get(instant));
",2,0,0,4,8,0,14,0,0,17,64,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,96,"        newInstant = to.weekOfWeekyear().set(newInstant, from.weekOfWeekyear().get(instant));
",2,0,0,4,8,0,16,0,0,19,85,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,97,"        newInstant = to.dayOfWeek().set(newInstant, from.dayOfWeek().get(instant));
",2,0,0,4,8,0,16,0,0,19,75,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,98,"        newInstant = to.millisOfDay().set(newInstant, from.millisOfDay().get(instant));
",2,0,0,4,8,0,16,0,0,19,79,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,99,"        return newInstant;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,123,"        return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);
",4,0,0,1,2,1,4,0,0,8,57,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,139,"        return getInstance(DateTimeZone.getDefault(), DEFAULT_CUTOVER, 4);
",0,0,0,2,4,1,8,0,0,8,66,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,155,"        return getInstance(zone, DEFAULT_CUTOVER, 4);
",0,0,0,1,2,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,247,"        if (gregorianCutover == DEFAULT_CUTOVER.getMillis()) {
",2,1,0,2,5,0,4,0,0,7,54,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,248,"            cutoverInstant = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,250,"            cutoverInstant = new Instant(gregorianCutover);
",4,0,0,1,2,0,0,2,0,7,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,252,"        return getInstance(zone, cutoverInstant, minDaysInFirstWeek);
",0,0,0,1,2,1,8,0,0,8,61,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,288,"        return getInstance(getZone(), iCutoverInstant, getMinimumDaysInFirstWeek());
",0,0,0,3,6,1,8,0,0,8,76,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,294,"            return base.getZone();
",0,0,0,1,2,1,4,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,318,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,323,"        return getInstance(zone, iCutoverInstant, getMinimumDaysInFirstWeek());
",0,0,0,2,4,1,8,0,0,8,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,331,"        if ((base = getBase()) != null) {
",2,1,0,3,7,0,2,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,332,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);
",0,0,0,1,2,1,12,0,0,12,74,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,336,"        long instant = iGregorianChronology.getDateTimeMillis
",2,0,0,0,0,0,4,0,0,6,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,338,"        if (instant < iCutoverMillis) {
",4,1,0,1,3,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,340,"            instant = iJulianChronology.getDateTimeMillis
",2,0,0,0,0,0,4,0,0,7,45,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,342,"            if (instant >= iCutoverMillis) {
",4,1,0,1,3,0,0,0,0,5,32,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,344,"                throw new IllegalArgumentException(""Specified date does not exist"");
",0,0,0,1,2,0,0,2,0,3,68,9,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,347,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,356,"        if ((base = getBase()) != null) {
",2,1,0,3,7,0,2,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,357,"            return base.getDateTimeMillis
",0,0,0,0,0,1,4,0,0,4,29,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,365,"            instant = iGregorianChronology.getDateTimeMillis
",2,0,0,0,0,0,4,0,0,7,48,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,378,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,368,"        } catch (IllegalFieldValueException ex) {
",2,0,0,1,4,0,0,2,0,4,41,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,369,"            if (monthOfYear != 2 || dayOfMonth != 29) {
",4,3,0,1,3,0,0,0,0,7,43,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,370,"                throw ex;
",2,0,0,0,0,0,0,0,0,2,9,9,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,372,"            instant = iGregorianChronology.getDateTimeMillis
",2,0,0,0,0,0,4,0,0,7,48,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,375,"            if (instant >= iCutoverMillis) {
",4,1,0,1,3,0,0,0,0,5,32,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,376,"                throw ex;
",2,0,0,0,0,0,0,0,0,2,9,9,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,379,"        if (instant < iCutoverMillis) {
",4,1,0,1,3,0,0,0,0,5,31,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,381,"            instant = iJulianChronology.getDateTimeMillis
",2,0,0,0,0,0,4,0,0,7,45,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,384,"            if (instant >= iCutoverMillis) {
",4,1,0,1,3,0,0,0,0,5,32,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,386,"                throw new IllegalArgumentException(""Specified date does not exist"");
",0,0,0,1,2,0,0,2,0,3,68,9,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,389,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,417,"        return super.equals(obj);
",4,0,0,1,2,1,0,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,427,"        return ""GJ"".hashCode() * 11 + iJulianChronology.hashCode() +
",0,4,0,2,4,1,6,0,0,11,60,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,439,"        StringBuffer sb = new StringBuffer(60);
",2,0,0,1,2,0,0,4,0,6,39,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,440,"        sb.append(""GJChronology"");
",0,0,0,1,2,0,4,0,0,5,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,441,"        sb.append('[');
",0,0,0,1,3,0,4,0,0,5,15,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,442,"        sb.append(getZone().getID());
",0,0,0,3,6,0,8,0,0,8,29,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,444,"        if (iCutoverMillis != DEFAULT_CUTOVER.getMillis()) {
",2,1,0,2,5,0,4,0,0,7,52,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,445,"            sb.append("",cutover="");
",0,0,0,1,2,0,4,0,0,5,23,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,447,"            if (withUTC().dayOfYear().remainder(iCutoverMillis) == 0) {
",0,1,0,4,9,0,8,0,0,9,59,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,448,"                printer = ISODateTimeFormat.date();
",2,0,0,1,2,0,4,0,0,7,35,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,450,"                printer = ISODateTimeFormat.dateTime();
",2,0,0,1,2,0,4,0,0,7,39,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,452,"            printer.withChronology(withUTC()).printTo(sb, iCutoverMillis);
",0,0,0,3,6,0,12,0,0,12,62,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,455,"        if (getMinimumDaysInFirstWeek() != 4) {
",0,1,0,2,5,0,2,0,0,3,39,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,456,"            sb.append("",mdfw="");
",0,0,0,1,2,0,4,0,0,5,20,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,457,"            sb.append(getMinimumDaysInFirstWeek());
",0,0,0,2,4,0,6,0,0,6,39,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,459,"        sb.append(']');
",0,0,0,1,3,0,4,0,0,5,15,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,461,"        return sb.toString();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,481,"            throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,583,"        return convertByWeekyear(instant, iJulianChronology, iGregorianChronology);
",0,0,0,1,2,1,8,0,0,8,75,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,587,"        return convertByWeekyear(instant, iGregorianChronology, iJulianChronology);
",0,0,0,1,2,1,8,0,0,8,75,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,68,"            throw new IllegalArgumentException(""Must supply a chronology"");
",0,0,0,1,2,0,0,2,0,3,63,7,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,75,"            if (!lowerLimit.isBefore(upperLimit)) {
",0,0,0,2,5,0,6,0,0,7,39,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,76,"                throw new IllegalArgumentException
",0,0,0,0,0,0,0,2,0,2,34,10,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,111,"        return iLowerLimit;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,120,"        return iUpperLimit;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,129,"        return withZone(DateTimeZone.UTC);
",4,0,0,1,2,1,2,0,0,6,34,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,138,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,139,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,141,"        if (zone == getZone()) {
",2,1,0,2,5,0,2,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,142,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,145,"        if (zone == DateTimeZone.UTC && iWithUTC != null) {
",8,3,0,1,3,0,0,0,0,11,51,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,146,"            return iWithUTC;
",2,0,0,0,0,1,0,0,0,2,16,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,149,"        DateTime lowerLimit = iLowerLimit;
",4,0,0,0,0,0,0,2,0,6,34,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,150,"        if (lowerLimit != null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,151,"            MutableDateTime mdt = lowerLimit.toMutableDateTime();
",2,0,0,1,2,0,4,2,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,152,"            mdt.setZoneRetainFields(zone);
",0,0,0,1,2,0,6,0,0,6,30,7,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,153,"            lowerLimit = mdt.toDateTime();
",2,0,0,1,2,0,4,0,0,7,30,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,156,"        DateTime upperLimit = iUpperLimit;
",4,0,0,0,0,0,0,2,0,6,34,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,157,"        if (upperLimit != null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,158,"            MutableDateTime mdt = upperLimit.toMutableDateTime();
",2,0,0,1,2,0,4,2,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,159,"            mdt.setZoneRetainFields(zone);
",0,0,0,1,2,0,6,0,0,6,30,7,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,160,"            upperLimit = mdt.toDateTime();
",2,0,0,1,2,0,4,0,0,7,30,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,163,"        LimitChronology chrono = getInstance
",2,0,0,0,0,0,2,2,0,6,36,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,166,"        if (zone == DateTimeZone.UTC) {
",6,1,0,1,3,0,0,0,0,7,31,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,167,"            iWithUTC = chrono;
",4,0,0,0,0,0,0,0,0,5,18,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,170,"        return chrono;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,177,"        long instant = getBase().getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);
",2,0,0,2,4,0,12,0,0,14,87,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,178,"        checkLimits(instant, ""resulting"");
",0,0,0,1,2,0,4,0,0,5,34,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,179,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,187,"        long instant = getBase().getDateTimeMillis
",2,0,0,1,2,0,4,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,190,"        checkLimits(instant, ""resulting"");
",0,0,0,1,2,0,4,0,0,5,34,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,191,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,199,"        checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,200,"        instant = getBase().getDateTimeMillis
",2,0,0,1,2,0,4,0,0,7,37,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,202,"        checkLimits(instant, ""resulting"");
",0,0,0,1,2,0,4,0,0,5,34,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,203,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,269,"            return field;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,272,"            return (DateTimeField)converted.get(field);
",0,0,0,2,4,1,6,2,0,8,43,7,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,285,"        if ((limit = iLowerLimit) != null && instant < limit.getMillis()) {
",6,3,0,3,7,0,4,0,0,14,67,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,286,"            throw new LimitException(desc, true);
",2,0,0,1,2,0,0,2,0,5,37,7,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,288,"        if ((limit = iUpperLimit) != null && instant >= limit.getMillis()) {
",6,3,0,3,7,0,4,0,0,14,68,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,289,"            throw new LimitException(desc, false);
",2,0,0,1,2,0,0,2,0,5,38,7,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,291,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,303,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,304,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,306,"        if (obj instanceof LimitChronology == false) {
",2,1,0,1,3,0,0,2,0,6,46,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,307,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,309,"        LimitChronology chrono = (LimitChronology) obj;
",4,0,0,1,2,0,0,4,0,8,47,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,310,"        return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,323,"        int hash = 317351877;
",2,0,0,0,0,0,0,0,0,2,21,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,324,"        hash += (getLowerLimit() != null ? getLowerLimit().hashCode() : 0);
",2,1,0,4,8,0,6,0,0,12,67,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,325,"        hash += (getUpperLimit() != null ? getUpperLimit().hashCode() : 0);
",2,1,0,4,8,0,6,0,0,12,67,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,326,"        hash += getBase().hashCode() * 7;
",2,1,0,2,4,0,4,0,0,8,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,327,"        return hash;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,336,"        return ""LimitChronology["" + getBase().toString() + "", "" +
",0,1,0,2,5,1,4,0,0,7,57,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,14,57,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,14,62,"        return ERA_VALUE;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,14,67,"        FieldUtils.verifyValueBounds(this, era, ERA_VALUE, ERA_VALUE);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,14,68,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,14,73,"        if (iEraText.equals(text) == false && ""1"".equals(text) == false) {
",0,3,0,3,7,0,10,0,0,16,66,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,14,74,"            throw new IllegalFieldValueException(DateTimeFieldType.era(), text);
",2,0,0,2,4,0,4,2,0,8,68,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,14,76,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,14,81,"        return Long.MIN_VALUE;
",4,0,0,0,0,1,0,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,14,86,"        return Long.MAX_VALUE;
",4,0,0,0,0,1,0,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,14,91,"        return Long.MIN_VALUE;
",4,0,0,0,0,1,0,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,14,96,"        return Long.MIN_VALUE;
",4,0,0,0,0,1,0,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,14,101,"        return Long.MIN_VALUE;
",4,0,0,0,0,1,0,0,0,4,22,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,14,116,"        return ERA_VALUE;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,14,121,"        return ERA_VALUE;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,14,126,"        return iEraText;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,14,131,"        return iEraText.length();
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/AssembledChronology,14,479,"                    eras = f;
",4,0,0,0,0,0,0,0,0,5,9,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,57,"            throw new IllegalArgumentException(""Must supply a chronology"");
",0,0,0,1,2,0,0,2,0,3,63,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,61,"            throw new IllegalArgumentException(""UTC chronology must not be null"");
",0,0,0,1,2,0,0,2,0,4,70,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,64,"            throw new IllegalArgumentException(""DateTimeZone must not be null"");
",0,0,0,1,2,0,0,2,0,4,68,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,90,"        return getBase();
",0,0,0,1,2,1,2,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,94,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,95,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,97,"        if (zone == getParam()) {
",2,1,0,2,5,0,2,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,98,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,100,"        if (zone == DateTimeZone.UTC) {
",6,1,0,1,3,0,0,0,0,7,31,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,101,"            return getBase();
",0,0,0,1,2,1,2,0,0,2,17,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,103,"        return new ZonedChronology(getBase(), zone);
",2,0,0,2,4,1,2,2,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,110,"        return localToUTC(getBase().getDateTimeMillis
",0,0,0,1,3,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,119,"        return localToUTC(getBase().getDateTimeMillis
",0,0,0,1,3,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,129,"        return localToUTC(getBase().getDateTimeMillis
",0,0,0,1,3,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,139,"        DateTimeZone zone = getZone();
",2,0,0,1,2,0,2,2,0,6,30,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,140,"        int offset = zone.getOffsetFromLocal(instant);
",2,0,0,1,2,0,6,0,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,141,"        instant -= offset;
",4,0,0,0,0,0,0,0,0,5,18,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,142,"        if (offset != zone.getOffset(instant)) {
",2,1,0,2,5,0,6,0,0,9,40,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,143,"            throw new IllegalArgumentException
",0,0,0,0,0,0,0,2,0,2,34,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,147,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,213,"            return field;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,216,"            return (DateTimeField)converted.get(field);
",0,0,0,2,4,1,6,2,0,8,43,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,237,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,238,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,240,"        if (obj instanceof ZonedChronology == false) {
",2,1,0,1,3,0,0,2,0,6,46,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,241,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,243,"        ZonedChronology chrono = (ZonedChronology) obj;
",4,0,0,1,2,0,0,4,0,8,47,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,244,"        return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,256,"        return 326565 + getZone().hashCode() * 11 + getBase().hashCode() * 7;
",0,4,0,4,8,1,8,0,0,12,69,4,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,265,"        return ""ZonedChronology["" + getBase() + "", "" + getZone().getID() + ']';
",0,1,0,4,8,1,6,0,0,10,71,4,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,90,"        return getInstance(DateTimeZone.getDefault(), 4);
",0,0,0,2,4,1,6,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,112,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,123,"            } catch (ArrayIndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,44,8,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,124,"                throw new IllegalArgumentException
",0,0,0,0,0,0,0,2,0,2,34,11,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,131,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);
",6,0,0,1,2,0,4,0,0,11,59,10,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,132,"                    chrono = new GregorianChronology
",2,0,0,0,0,0,0,2,0,5,32,10,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,155,"        Chronology base = getBase();
",2,0,0,1,2,0,2,2,0,6,28,4,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,156,"        int minDays = getMinimumDaysInFirstWeek();
",2,0,0,1,2,0,2,0,0,4,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,157,"        minDays = (minDays == 0 ? 4 : minDays);  // handle rename of BaseGJChronology
",6,1,0,1,2,0,0,0,0,8,77,4,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,158,"        return base == null ?
",2,1,0,0,0,1,0,0,0,3,21,5,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,171,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,181,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,182,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,184,"        if (zone == getZone()) {
",2,1,0,2,5,0,2,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,185,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/chrono/GregorianChronology,14,187,"        return getInstance(zone);
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,121,"            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];
",2,1,1,1,2,1,0,0,0,5,43,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,140,"            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];
",2,1,1,1,2,1,0,0,0,5,50,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,148,"        int minuendYear = getYear(minuendInstant);
",2,0,0,1,2,0,4,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,149,"        int subtrahendYear = getYear(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,152,"        long minuendRem = minuendInstant - getYearMillis(minuendYear);
",4,1,0,1,2,0,4,0,0,9,62,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,153,"        long subtrahendRem = subtrahendInstant - getYearMillis(subtrahendYear);
",4,1,0,1,2,0,4,0,0,9,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,156,"        if (subtrahendRem >= FEB_29) {
",4,1,0,1,3,0,0,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,157,"            if (isLeapYear(subtrahendYear)) {
",0,0,0,2,5,0,4,0,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,158,"                if (!isLeapYear(minuendYear)) {
",0,0,0,2,5,0,4,0,0,5,31,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,159,"                    subtrahendRem -= DateTimeConstants.MILLIS_PER_DAY;
",6,0,0,0,0,0,0,0,0,7,50,10,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,161,"            } else if (minuendRem >= FEB_29 && isLeapYear(minuendYear)) {
",4,2,0,2,6,0,4,0,0,10,61,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,162,"                minuendRem -= DateTimeConstants.MILLIS_PER_DAY;
",6,0,0,0,0,0,0,0,0,7,47,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,166,"        int difference = minuendYear - subtrahendYear;
",6,1,0,0,0,0,0,0,0,7,46,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,167,"        if (minuendRem < subtrahendRem) {
",4,1,0,1,3,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,168,"            difference--;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,170,"        return difference;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,180,"            if (isLeapYear(thisYear)) {
",0,0,0,2,5,0,4,0,0,4,27,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,182,"                if (!isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,5,24,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,184,"                    dayOfYear--;
",2,0,0,0,0,0,0,0,0,3,12,10,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,188,"                if (isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,4,23,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,14,190,"                    dayOfYear++;
",2,0,0,0,0,0,0,0,0,3,12,10,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,134,"            throw new IllegalArgumentException
",0,0,0,0,0,0,0,2,0,2,34,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,144,"            return base.getZone();
",0,0,0,1,2,1,4,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,154,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);
",0,0,0,1,2,1,12,0,0,12,74,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,168,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,
",0,0,0,0,1,1,10,0,0,10,60,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,196,"        return super.equals(obj);
",4,0,0,1,2,1,0,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,206,"        return getClass().getName().hashCode() * 11 + getZone().hashCode() + getMinimumDaysInFirstWeek();
",0,3,0,6,12,1,12,0,0,15,97,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,217,"        StringBuffer sb = new StringBuffer(60);
",2,0,0,1,2,0,0,4,0,6,39,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,218,"        String name = getClass().getName();
",2,0,0,2,4,0,4,2,0,8,35,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,219,"        int index = name.lastIndexOf('.');
",2,0,0,1,2,0,4,0,0,7,34,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,220,"        if (index >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,221,"            name = name.substring(index + 1);
",4,1,0,1,2,0,4,0,0,10,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,223,"        sb.append(name);
",0,0,0,1,2,0,6,0,0,6,16,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,224,"        sb.append('[');
",0,0,0,1,3,0,4,0,0,5,15,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,225,"        DateTimeZone zone = getZone();
",2,0,0,1,2,0,2,2,0,6,30,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,226,"        if (zone != null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,227,"            sb.append(zone.getID());
",0,0,0,2,4,0,8,0,0,8,24,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,229,"        if (getMinimumDaysInFirstWeek() != 4) {
",0,1,0,2,5,0,2,0,0,3,39,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,230,"            sb.append("",mdfw="");
",0,0,0,1,2,0,4,0,0,5,20,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,231,"            sb.append(getMinimumDaysInFirstWeek());
",0,0,0,2,4,0,6,0,0,6,39,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,233,"        sb.append(']');
",0,0,0,1,3,0,4,0,0,5,15,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,234,"        return sb.toString();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,307,"        return 366;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,317,"        return isLeapYear(year) ? 366 : 365;
",0,0,0,1,2,1,4,0,0,4,36,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,348,"            return jan1millis - (jan1dayOfWeek - 1)
",4,2,0,1,2,1,0,0,0,6,39,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,371,"        long millis = getYearMillis(year);
",2,0,0,1,2,0,4,0,0,6,34,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,372,"        millis += getTotalMillisByYearMonth(year, month);
",2,0,0,1,2,0,6,0,0,9,49,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,373,"        return millis;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,410,"            year--;
",2,0,0,0,0,0,0,0,0,3,7,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,415,"                oneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;
",6,1,0,0,0,0,0,0,0,8,50,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,477,"        return getDayOfYear(instant, getYear(instant));
",0,0,0,2,4,1,8,0,0,8,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,497,"        } else if (week > 51) {
",2,1,0,1,4,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,498,"            return getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));
",6,2,0,2,4,1,2,0,0,10,66,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,500,"            return year;
",2,0,0,0,0,1,0,0,0,2,12,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,518,"            return getWeeksInYear(year - 1);
",2,1,0,1,2,1,2,0,0,5,32,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,522,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,535,"            daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;
",8,1,0,0,0,0,0,0,0,10,63,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,544,"        return 1 + (int) ((daysSince19700101 + 3) % 7);
",2,3,0,3,6,1,0,0,0,5,47,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,590,"        return getDaysInMonthMax(instant);
",0,0,0,1,2,1,4,0,0,4,34,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,640,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,645,"                return iGregorianField.get(instant);
",0,0,0,1,2,1,6,0,0,6,36,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,652,"            if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,653,"                return iGregorianField.getAsText(instant, locale);
",0,0,0,1,2,1,8,0,0,8,50,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,655,"                return iJulianField.getAsText(instant, locale);
",0,0,0,1,2,1,8,0,0,8,47,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,660,"            return iGregorianField.getAsText(fieldValue, locale);
",0,0,0,1,2,1,8,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,664,"            if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,665,"                return iGregorianField.getAsShortText(instant, locale);
",0,0,0,1,2,1,8,0,0,8,55,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,667,"                return iJulianField.getAsShortText(instant, locale);
",0,0,0,1,2,1,8,0,0,8,52,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,672,"            return iGregorianField.getAsShortText(fieldValue, locale);
",0,0,0,1,2,1,8,0,0,8,58,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,676,"            return iGregorianField.add(instant, value);
",0,0,0,1,2,1,8,0,0,8,43,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,680,"            return iGregorianField.add(instant, value);
",0,0,0,1,2,1,8,0,0,8,43,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,686,"            if (valueToAdd == 0) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,687,"                return values;
",2,0,0,0,0,1,0,0,0,2,14,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,689,"            if (DateTimeUtils.isContiguous(partial)) {
",0,0,0,2,5,0,6,0,0,6,42,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,690,"                long instant = 0L;
",2,0,0,0,0,0,0,0,0,2,18,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,691,"                for (int i = 0, isize = partial.size(); i < isize; i++) {
",10,1,0,2,5,0,4,0,0,16,57,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,692,"                    instant = partial.getFieldType(i).getField(GJChronology.this).set(instant, values[i]);
",4,0,1,4,8,0,12,0,0,21,86,9,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,694,"                instant = add(instant, valueToAdd);
",2,0,0,1,2,0,6,0,0,9,35,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,695,"                return GJChronology.this.get(partial, instant);
",2,0,0,1,2,1,6,0,0,8,47,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,697,"                return super.add(partial, fieldIndex, values, valueToAdd);
",10,0,0,1,2,1,0,0,0,10,58,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,702,"            return iGregorianField.getDifference(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,72,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,706,"            return iGregorianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,78,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,719,"                        throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,13,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,727,"                    if (instant - iGapDuration >= iCutover) {
",6,2,0,1,3,0,0,0,0,8,41,9,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,728,"                        instant = julianToGregorian(instant);
",2,0,0,1,2,0,4,0,0,7,37,11,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,731,"                    if (get(instant) != value) {
",2,1,0,2,5,0,4,0,0,7,28,9,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,732,"                       throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,13,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,741,"            if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,742,"                instant = iGregorianField.set(instant, text, locale);
",2,0,0,1,2,0,10,0,0,13,53,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,743,"                if (instant < iCutover) {
",4,1,0,1,3,0,0,0,0,5,25,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,745,"                    if (instant + iGapDuration < iCutover) {
",6,2,0,1,3,0,0,0,0,8,40,9,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,746,"                        instant = gregorianToJulian(instant);
",2,0,0,1,2,0,4,0,0,7,37,11,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,751,"                instant = iJulianField.set(instant, text, locale);
",2,0,0,1,2,0,10,0,0,13,50,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,752,"                if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,754,"                    if (instant - iGapDuration >= iCutover) {
",6,2,0,1,3,0,0,0,0,8,41,9,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,755,"                        instant = julianToGregorian(instant);
",2,0,0,1,2,0,4,0,0,7,37,11,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,760,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,772,"            if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,773,"                return iGregorianField.isLeap(instant);
",0,0,0,1,2,1,6,0,0,6,39,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,775,"                return iJulianField.isLeap(instant);
",0,0,0,1,2,1,6,0,0,6,36,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,780,"            if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,781,"                return iGregorianField.getLeapAmount(instant);
",0,0,0,1,2,1,6,0,0,6,46,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,783,"                return iJulianField.getLeapAmount(instant);
",0,0,0,1,2,1,6,0,0,6,43,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,799,"            return iJulianField.getMinimumValue(partial);
",0,0,0,1,2,1,6,0,0,6,45,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,803,"            return iJulianField.getMinimumValue(partial, values);
",0,0,0,1,2,1,8,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,807,"            if (instant < iCutover) {
",4,1,0,1,3,0,0,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,808,"                return iJulianField.getMinimumValue(instant);
",0,0,0,1,2,1,6,0,0,6,45,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,811,"            int min = iGregorianField.getMinimumValue(instant);
",2,0,0,1,2,0,6,0,0,8,51,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,815,"            instant = iGregorianField.set(instant, min);
",2,0,0,1,2,0,8,0,0,11,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,816,"            if (instant < iCutover) {
",4,1,0,1,3,0,0,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,817,"                min = iGregorianField.get(iCutover);
",2,0,0,1,2,0,6,0,0,9,36,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,820,"            return min;
",2,0,0,0,0,1,0,0,0,2,11,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,830,"            if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,831,"                return iGregorianField.getMaximumValue(instant);
",0,0,0,1,2,1,6,0,0,6,48,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,834,"            int max = iJulianField.getMaximumValue(instant);
",2,0,0,1,2,0,6,0,0,8,48,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,838,"            instant = iJulianField.set(instant, max);
",2,0,0,1,2,0,8,0,0,11,41,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,839,"            if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,840,"                max = iJulianField.get(iJulianField.add(iCutover, -1));
",2,0,0,2,4,0,10,0,0,14,55,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,843,"            return max;
",2,0,0,0,0,1,0,0,0,2,11,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,847,"            long instant = GJChronology.getInstanceUTC().set(partial, 0L);
",2,0,0,2,4,0,8,0,0,10,62,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,848,"            return getMaximumValue(instant);
",0,0,0,1,2,1,4,0,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,852,"            Chronology chrono = GJChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,50,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,853,"            long instant = 0L;
",2,0,0,0,0,0,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,854,"            for (int i = 0, isize = partial.size(); i < isize; i++) {
",10,1,0,2,5,0,4,0,0,16,57,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,855,"                DateTimeField field = partial.getFieldType(i).getField(chrono);
",2,0,0,2,4,0,10,2,0,14,63,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,856,"                if (values[i] <= field.getMaximumValue(instant)) {
",0,1,1,3,7,0,6,0,0,11,50,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,857,"                    instant = field.set(instant, values[i]);
",2,0,1,2,4,0,6,0,0,13,40,9,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,860,"            return getMaximumValue(instant);
",0,0,0,1,2,1,4,0,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,864,"            if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,865,"                instant = iGregorianField.roundFloor(instant);
",2,0,0,1,2,0,6,0,0,9,46,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,866,"                if (instant < iCutover) {
",4,1,0,1,3,0,0,0,0,5,25,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,868,"                    if (instant + iGapDuration < iCutover) {
",6,2,0,1,3,0,0,0,0,8,40,9,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,869,"                        instant = gregorianToJulian(instant);
",2,0,0,1,2,0,4,0,0,7,37,11,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,873,"                instant = iJulianField.roundFloor(instant);
",2,0,0,1,2,0,6,0,0,9,43,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,875,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,879,"            if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,880,"                instant = iGregorianField.roundCeiling(instant);
",2,0,0,1,2,0,6,0,0,9,48,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,882,"                instant = iJulianField.roundCeiling(instant);
",2,0,0,1,2,0,6,0,0,9,45,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,883,"                if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,885,"                    if (instant - iGapDuration >= iCutover) {
",6,2,0,1,3,0,0,0,0,8,41,9,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,886,"                        instant = julianToGregorian(instant);
",2,0,0,1,2,0,4,0,0,7,37,11,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,890,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,894,"            return Math.max(iJulianField.getMaximumTextLength(locale),
",0,0,0,1,3,1,10,0,0,10,58,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,899,"            return Math.max(iJulianField.getMaximumShortTextLength(locale),
",0,0,0,1,3,1,10,0,0,10,63,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,904,"            if (iConvertByWeekyear) {
",2,0,0,1,3,0,0,0,0,2,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,905,"                return julianToGregorianByWeekyear(instant);
",0,0,0,1,2,1,4,0,0,4,44,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,907,"                return julianToGregorianByYear(instant);
",0,0,0,1,2,1,4,0,0,4,40,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,913,"                return gregorianToJulianByWeekyear(instant);
",0,0,0,1,2,1,4,0,0,4,44,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,965,"            if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,966,"                instant = iGregorianField.add(instant, value);
",2,0,0,1,2,0,8,0,0,11,46,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,967,"                if (instant < iCutover) {
",4,1,0,1,3,0,0,0,0,5,25,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,969,"                    if (instant + iGapDuration < iCutover) {
",6,2,0,1,3,0,0,0,0,8,40,9,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,970,"                        instant = gregorianToJulian(instant);
",2,0,0,1,2,0,4,0,0,7,37,11,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,974,"                instant = iJulianField.add(instant, value);
",2,0,0,1,2,0,8,0,0,11,43,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,975,"                if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,977,"                    if (instant - iGapDuration >= iCutover) {
",6,2,0,1,3,0,0,0,0,8,41,9,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,978,"                        instant = julianToGregorian(instant);
",2,0,0,1,2,0,4,0,0,7,37,11,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,982,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,986,"            if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,987,"                instant = iGregorianField.add(instant, value);
",2,0,0,1,2,0,8,0,0,11,46,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,988,"                if (instant < iCutover) {
",4,1,0,1,3,0,0,0,0,5,25,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,990,"                    if (instant + iGapDuration < iCutover) {
",6,2,0,1,3,0,0,0,0,8,40,9,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,991,"                        instant = gregorianToJulian(instant);
",2,0,0,1,2,0,4,0,0,7,37,11,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,995,"                instant = iJulianField.add(instant, value);
",2,0,0,1,2,0,8,0,0,11,43,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,996,"                if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,998,"                    if (instant - iGapDuration >= iCutover) {
",6,2,0,1,3,0,0,0,0,8,41,9,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,999,"                        instant = julianToGregorian(instant);
",2,0,0,1,2,0,4,0,0,7,37,11,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,1003,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,1007,"            if (minuendInstant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,33,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,1008,"                if (subtrahendInstant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,36,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,1009,"                    return iGregorianField.getDifference(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,72,10,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,1013,"                minuendInstant = gregorianToJulian(minuendInstant);
",2,0,0,1,2,0,4,0,0,7,51,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,1014,"                return iJulianField.getDifference(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,69,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,1016,"                if (subtrahendInstant < iCutover) {
",4,1,0,1,3,0,0,0,0,5,35,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,1017,"                    return iJulianField.getDifference(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,69,10,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,1021,"                minuendInstant = julianToGregorian(minuendInstant);
",2,0,0,1,2,0,4,0,0,7,51,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,1022,"                return iGregorianField.getDifference(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,72,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,1027,"            if (minuendInstant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,33,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,1028,"                if (subtrahendInstant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,36,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,1029,"                    return iGregorianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,78,10,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,1033,"                minuendInstant = gregorianToJulian(minuendInstant);
",2,0,0,1,2,0,4,0,0,7,51,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,1034,"                return iJulianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,75,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,1036,"                if (subtrahendInstant < iCutover) {
",4,1,0,1,3,0,0,0,0,5,35,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,1037,"                    return iJulianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,75,10,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,1041,"                minuendInstant = julianToGregorian(minuendInstant);
",2,0,0,1,2,0,4,0,0,7,51,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,1042,"                return iGregorianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,78,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,1057,"            if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,1058,"                return iGregorianField.getMinimumValue(instant);
",0,0,0,1,2,1,6,0,0,6,48,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,1060,"                return iJulianField.getMinimumValue(instant);
",0,0,0,1,2,1,6,0,0,6,45,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,1065,"            if (instant >= iCutover) {
",4,1,0,1,3,0,0,0,0,5,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,1066,"                return iGregorianField.getMaximumValue(instant);
",0,0,0,1,2,1,6,0,0,6,48,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,1068,"                return iJulianField.getMaximumValue(instant);
",0,0,0,1,2,1,6,0,0,6,45,8,0.00000,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,80,"                throw new IllegalFieldValueException
",0,0,0,0,0,0,0,2,0,2,36,10,0.00000,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,95,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,104,"        return getInstance(DateTimeZone.getDefault(), 4);
",0,0,0,2,4,1,6,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,126,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,137,"            } catch (ArrayIndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,44,8,0.00000,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,138,"                throw new IllegalArgumentException
",0,0,0,0,0,0,0,2,0,2,34,11,0.00000,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,145,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);
",6,0,0,1,2,0,4,0,0,11,59,10,0.00000,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,146,"                    chrono = new JulianChronology
",2,0,0,0,0,0,0,2,0,5,29,10,0.00000,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,169,"        Chronology base = getBase();
",2,0,0,1,2,0,2,2,0,6,28,4,0.00000,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,170,"        int minDays = getMinimumDaysInFirstWeek();
",2,0,0,1,2,0,2,0,0,4,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,171,"        minDays = (minDays == 0 ? 4 : minDays);  // handle rename of BaseGJChronology
",6,1,0,1,2,0,0,0,0,8,77,4,0.00000,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,172,"        return base == null ?
",2,1,0,0,0,1,0,0,0,3,21,5,0.00000,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,185,"        return INSTANCE_UTC;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,195,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,196,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,198,"        if (zone == getZone()) {
",2,1,0,2,5,0,2,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,199,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,201,"        return getInstance(zone);
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,226,"            leapYears = relativeYear >> 2;
",4,1,0,0,0,0,0,0,0,6,30,6,0.00000,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,228,"            if (!isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/chrono/JulianChronology,14,229,"                leapYears++;
",2,0,0,0,0,0,0,0,0,3,12,8,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,14,45,"        int year = getWrappedField().get(instant);
",2,0,0,2,4,0,6,0,0,8,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,14,46,"        if (year <= 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,14,47,"            year = 1 - year;
",4,1,0,0,0,0,0,0,0,6,16,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,14,49,"        return year;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,14,53,"        return getWrappedField().add(instant, years);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,14,57,"        return getWrappedField().add(instant, years);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,14,61,"        return getWrappedField().addWrapField(instant, years);
",0,0,0,2,4,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,14,65,"        return getWrappedField().addWrapField(instant, fieldIndex, values, years);
",0,0,0,2,4,1,12,0,0,12,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,14,69,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,14,73,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,80,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,14,85,"        FieldUtils.verifyValueBounds(this, year, 1, getMaximumValue());
",0,0,0,2,4,0,8,0,0,8,63,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,14,86,"        if (iChronology.getYear(instant) <= 0) {
",0,1,0,2,5,0,6,0,0,7,40,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,14,87,"            year = 1 - year;
",4,1,0,0,0,0,0,0,0,6,16,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,14,89,"        return super.set(instant, year);
",6,0,0,1,2,1,0,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,14,101,"        return getWrappedField().roundFloor(instant);
",0,0,0,2,4,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,14,105,"        return getWrappedField().roundCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,14,109,"        return getWrappedField().remainder(instant);
",0,0,0,2,4,1,6,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,14,116,"        return iChronology.yearOfEra();
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,286,"                throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,9,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,294,"            return iTimeField ? iField.isPrecise() : iField.isPrecise() && this.iZone.isFixed();
",4,1,0,3,6,1,10,0,0,15,84,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,302,"            return iField.getValue(duration, addOffset(instant));
",0,0,0,2,4,1,10,0,0,10,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,306,"            return iField.getValueAsLong(duration, addOffset(instant));
",0,0,0,2,4,1,10,0,0,10,59,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,310,"            return iField.getMillis(value, addOffset(instant));
",0,0,0,2,4,1,10,0,0,10,51,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,314,"            return iField.getMillis(value, addOffset(instant));
",0,0,0,2,4,1,10,0,0,10,51,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,318,"            int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,319,"            instant = iField.add(instant + offset, value);
",6,1,0,1,2,0,6,0,0,14,46,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,320,"            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));
",6,1,0,2,4,1,4,0,0,11,79,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,324,"            int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,325,"            instant = iField.add(instant + offset, value);
",6,1,0,1,2,0,6,0,0,14,46,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,326,"            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));
",6,1,0,2,4,1,4,0,0,11,79,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,330,"            int offset = getOffsetToAdd(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,331,"            return iField.getDifference
",0,0,0,0,0,1,4,0,0,4,27,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,337,"            int offset = getOffsetToAdd(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,338,"            return iField.getDifferenceAsLong
",0,0,0,0,0,1,4,0,0,4,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,344,"            int offset = this.iZone.getOffset(instant);
",4,0,0,1,2,0,4,0,0,8,43,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,345,"            long sum = instant + offset;
",6,1,0,0,0,0,0,0,0,7,28,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,347,"            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {
",8,5,0,3,7,0,0,0,0,13,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,348,"                throw new ArithmeticException(""Adding time zone offset caused overflow"");
",0,0,0,1,2,0,0,2,0,3,73,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,350,"            return offset;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,354,"            int offset = this.iZone.getOffsetFromLocal(instant);
",4,0,0,1,2,0,4,0,0,8,52,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,355,"            long diff = instant - offset;
",6,1,0,0,0,0,0,0,0,7,29,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,357,"            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {
",8,5,0,3,7,0,0,0,0,13,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,358,"                throw new ArithmeticException(""Subtracting time zone offset caused overflow"");
",0,0,0,1,2,0,0,2,0,3,78,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,360,"            return offset;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,364,"            return iZone.convertUTCToLocal(instant);
",0,0,0,1,2,1,6,0,0,6,40,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,391,"                throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,9,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,402,"            return iField.isLenient();
",0,0,0,1,2,1,4,0,0,4,26,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,411,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,412,"            return iField.getAsText(localInstant, locale);
",0,0,0,1,2,1,8,0,0,8,46,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,416,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,417,"            return iField.getAsShortText(localInstant, locale);
",0,0,0,1,2,1,8,0,0,8,51,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,421,"            return iField.getAsText(fieldValue, locale);
",0,0,0,1,2,1,8,0,0,8,44,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,425,"            return iField.getAsShortText(fieldValue, locale);
",0,0,0,1,2,1,8,0,0,8,49,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,429,"            if (iTimeField) {
",2,0,0,1,3,0,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,430,"                int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,431,"                long localInstant = iField.add(instant + offset, value);
",6,1,0,1,2,0,6,0,0,13,56,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,432,"                return localInstant - offset;
",4,1,0,0,0,1,0,0,0,5,29,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,434,"               long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,435,"               localInstant = iField.add(localInstant, value);
",2,0,0,1,2,0,8,0,0,11,47,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,436,"               return iZone.convertLocalToUTC(localInstant, false, instant);
",0,0,0,1,2,1,8,0,0,9,61,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,441,"            if (iTimeField) {
",2,0,0,1,3,0,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,442,"                int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,443,"                long localInstant = iField.add(instant + offset, value);
",6,1,0,1,2,0,6,0,0,13,56,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,444,"                return localInstant - offset;
",4,1,0,0,0,1,0,0,0,5,29,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,446,"               long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,447,"               localInstant = iField.add(localInstant, value);
",2,0,0,1,2,0,8,0,0,11,47,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,448,"               return iZone.convertLocalToUTC(localInstant, false, instant);
",0,0,0,1,2,1,8,0,0,9,61,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,453,"            if (iTimeField) {
",2,0,0,1,3,0,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,454,"                int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,455,"                long localInstant = iField.addWrapField(instant + offset, value);
",6,1,0,1,2,0,6,0,0,13,65,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,456,"                return localInstant - offset;
",4,1,0,0,0,1,0,0,0,5,29,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,458,"                long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,459,"                localInstant = iField.addWrapField(localInstant, value);
",2,0,0,1,2,0,8,0,0,11,56,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,460,"                return iZone.convertLocalToUTC(localInstant, false, instant);
",0,0,0,1,2,1,8,0,0,9,61,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,469,"                throw new IllegalFieldValueException(iField.getType(), Integer.valueOf(value),
",0,0,0,2,5,0,10,2,0,12,78,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,479,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,480,"            localInstant = iField.set(localInstant, text, locale);
",2,0,0,1,2,0,10,0,0,13,54,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,481,"            return iZone.convertLocalToUTC(localInstant, false, instant);
",0,0,0,1,2,1,8,0,0,9,61,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,485,"            int offset = getOffsetToAdd(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,486,"            return iField.getDifference
",0,0,0,0,0,1,4,0,0,4,27,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,492,"            int offset = getOffsetToAdd(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,493,"            return iField.getDifferenceAsLong
",0,0,0,0,0,1,4,0,0,4,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,507,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,508,"            return iField.isLeap(localInstant);
",0,0,0,1,2,1,6,0,0,6,35,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,512,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,513,"            return iField.getLeapAmount(localInstant);
",0,0,0,1,2,1,6,0,0,6,42,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,521,"            if (iTimeField) {
",2,0,0,1,3,0,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,522,"                int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,523,"                instant = iField.roundFloor(instant + offset);
",6,1,0,1,2,0,4,0,0,12,46,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,524,"                return instant - offset;
",4,1,0,0,0,1,0,0,0,5,24,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,526,"                long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,527,"                localInstant = iField.roundFloor(localInstant);
",2,0,0,1,2,0,6,0,0,9,47,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,528,"                return iZone.convertLocalToUTC(localInstant, false, instant);
",0,0,0,1,2,1,8,0,0,9,61,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,533,"            if (iTimeField) {
",2,0,0,1,3,0,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,534,"                int offset = getOffsetToAdd(instant);
",2,0,0,1,2,0,4,0,0,6,37,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,535,"                instant = iField.roundCeiling(instant + offset);
",6,1,0,1,2,0,4,0,0,12,48,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,536,"                return instant - offset;
",4,1,0,0,0,1,0,0,0,5,24,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,538,"                long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,539,"                localInstant = iField.roundCeiling(localInstant);
",2,0,0,1,2,0,6,0,0,9,49,7,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,540,"                return iZone.convertLocalToUTC(localInstant, false, instant);
",0,0,0,1,2,1,8,0,0,9,61,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,545,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,546,"            return iField.remainder(localInstant);
",0,0,0,1,2,1,6,0,0,6,38,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,554,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,555,"            return iField.getMinimumValue(localInstant);
",0,0,0,1,2,1,6,0,0,6,44,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,559,"            return iField.getMinimumValue(instant);
",0,0,0,1,2,1,6,0,0,6,39,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,563,"            return iField.getMinimumValue(instant, values);
",0,0,0,1,2,1,8,0,0,8,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,571,"            long localInstant = iZone.convertUTCToLocal(instant);
",2,0,0,1,2,0,6,0,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,572,"            return iField.getMaximumValue(localInstant);
",0,0,0,1,2,1,6,0,0,6,44,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,576,"            return iField.getMaximumValue(instant);
",0,0,0,1,2,1,6,0,0,6,39,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,580,"            return iField.getMaximumValue(instant, values);
",0,0,0,1,2,1,8,0,0,8,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,584,"            return iField.getMaximumTextLength(locale);
",0,0,0,1,2,1,6,0,0,6,43,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,588,"            return iField.getMaximumShortTextLength(locale);
",0,0,0,1,2,1,6,0,0,6,48,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,592,"            int offset = this.iZone.getOffset(instant);
",4,0,0,1,2,0,4,0,0,8,43,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,593,"            long sum = instant + offset;
",6,1,0,0,0,0,0,0,0,7,28,6,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,595,"            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {
",8,5,0,3,7,0,0,0,0,13,53,5,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,596,"                throw new ArithmeticException(""Adding time zone offset caused overflow"");
",0,0,0,1,2,0,0,2,0,3,73,8,0.00000,0
defect4j,time,org/joda/time/chrono/ZonedChronology,14,598,"            return offset;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,14,42,"        return GJLocaleSymbols.forLocale(locale).monthOfYearValueToText(fieldValue);
",0,0,0,2,4,1,10,0,0,10,76,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,14,47,"        return GJLocaleSymbols.forLocale(locale).monthOfYearValueToShortText(fieldValue);
",0,0,0,2,4,1,10,0,0,10,81,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,14,52,"        return GJLocaleSymbols.forLocale(locale).monthOfYearTextToValue(text);
",0,0,0,2,4,1,10,0,0,10,70,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,14,57,"        return GJLocaleSymbols.forLocale(locale).getMonthMaxTextLength();
",0,0,0,2,4,1,8,0,0,8,65,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,14,62,"        return GJLocaleSymbols.forLocale(locale).getMonthMaxShortTextLength();
",0,0,0,2,4,1,8,0,0,8,70,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,59,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,93,"            return instant; // the easy case
",2,0,0,0,0,1,0,0,0,2,32,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,117,"            yearToUse = thisYear + (monthToUse / iMax) - 1;
",8,3,0,1,2,0,0,0,0,12,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,118,"            monthToUse = Math.abs(monthToUse);
",2,0,0,1,2,0,6,0,0,9,34,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,119,"            int remMonthToUse = monthToUse % iMax;
",6,1,0,0,0,0,0,0,0,7,38,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,121,"            if (remMonthToUse == 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,122,"                remMonthToUse = iMax;
",4,0,0,0,0,0,0,0,0,5,21,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,124,"            monthToUse = iMax - remMonthToUse + 1;
",6,2,0,0,0,0,0,0,0,9,38,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,126,"            if (monthToUse == 1) {
",2,1,0,1,3,0,0,0,0,3,22,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,127,"                yearToUse += 1;
",2,0,0,0,0,0,0,0,0,3,15,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,151,"        int i_months = (int)months;
",4,0,0,1,2,0,0,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,152,"        if (i_months == months) {
",4,1,0,1,3,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,153,"            return add(instant, i_months);
",0,0,0,1,2,1,6,0,0,6,30,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,158,"        long timePart = iChronology.getMillisOfDay(instant);
",2,0,0,1,2,0,6,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,160,"        int thisYear = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,161,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);
",2,0,0,1,2,0,8,0,0,10,62,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,164,"        long monthToUse = thisMonth - 1 + months;
",6,2,0,0,0,0,0,0,0,8,41,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,165,"        if (monthToUse >= 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,166,"            yearToUse = thisYear + (monthToUse / iMax);
",8,2,0,1,2,0,0,0,0,11,43,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,167,"            monthToUse = (monthToUse % iMax) + 1;
",6,2,0,1,2,0,0,0,0,9,37,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,169,"            yearToUse = thisYear + (monthToUse / iMax) - 1;
",8,3,0,1,2,0,0,0,0,12,47,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,170,"            monthToUse = Math.abs(monthToUse);
",2,0,0,1,2,0,6,0,0,9,34,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,171,"            int remMonthToUse = (int)(monthToUse % iMax);
",6,1,0,2,4,0,0,0,0,7,45,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,172,"            if (remMonthToUse == 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,173,"                remMonthToUse = iMax;
",4,0,0,0,0,0,0,0,0,5,21,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,175,"            monthToUse = iMax - remMonthToUse + 1;
",6,2,0,0,0,0,0,0,0,9,38,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,176,"            if (monthToUse == 1) {
",2,1,0,1,3,0,0,0,0,3,22,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,177,"                yearToUse += 1;
",2,0,0,0,0,0,0,0,0,3,15,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,181,"        if (yearToUse < iChronology.getMinYear() ||
",2,2,0,1,3,0,4,0,0,8,43,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,184,"            throw new IllegalArgumentException
",0,0,0,0,0,0,0,2,0,2,34,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,188,"        int i_yearToUse = (int)yearToUse;
",4,0,0,1,2,0,0,0,0,4,33,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,189,"        int i_monthToUse = (int)monthToUse;
",4,0,0,1,2,0,0,0,0,4,35,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,191,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);
",2,0,0,1,2,0,10,0,0,12,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,192,"        int maxDay = iChronology.getDaysInYearMonth(i_yearToUse, i_monthToUse);
",2,0,0,1,2,0,8,0,0,10,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,193,"        if (dayToUse > maxDay) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,194,"            dayToUse = maxDay;
",4,0,0,0,0,0,0,0,0,5,18,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,197,"        long datePart =
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,199,"        return datePart + timePart;
",4,1,0,0,0,1,0,0,0,5,27,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,207,"            return values;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,218,"            return super.add(partial, fieldIndex, values, valueToAdd);
",10,0,0,1,2,1,0,0,0,10,58,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,233,"        return set(instant, FieldUtils.getWrappedValue(get(instant), months, MIN, iMax));
",0,0,0,3,6,1,18,0,0,18,81,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,238,"        if (minuendInstant < subtrahendInstant) {
",4,1,0,1,3,0,0,0,0,5,41,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,239,"            return -getDifference(subtrahendInstant, minuendInstant);
",0,0,0,1,2,1,6,0,0,7,57,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,242,"        int minuendYear = iChronology.getYear(minuendInstant);
",2,0,0,1,2,0,6,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,243,"        int minuendMonth = iChronology.getMonthOfYear(minuendInstant, minuendYear);
",2,0,0,1,2,0,8,0,0,10,75,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,244,"        int subtrahendYear = iChronology.getYear(subtrahendInstant);
",2,0,0,1,2,0,6,0,0,8,60,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,245,"        int subtrahendMonth = iChronology.getMonthOfYear(subtrahendInstant, subtrahendYear);
",2,0,0,1,2,0,8,0,0,10,84,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,247,"        long difference = (minuendYear - subtrahendYear) * ((long) iMax) + minuendMonth - subtrahendMonth;
",12,4,0,3,6,0,0,0,0,16,98,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,251,"        int minuendDom = iChronology.getDayOfMonth
",2,0,0,0,0,0,4,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,253,"        if (minuendDom == iChronology.getDaysInYearMonth(minuendYear, minuendMonth)) {
",2,1,0,2,5,0,8,0,0,11,78,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,255,"            int subtrahendDom = iChronology.getDayOfMonth
",2,0,0,0,0,0,4,0,0,6,45,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,257,"            if (subtrahendDom > minuendDom) {
",4,1,0,1,3,0,0,0,0,5,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,261,"                subtrahendInstant = iChronology.dayOfMonth().set(subtrahendInstant, minuendDom);
",2,0,0,2,4,0,10,0,0,13,80,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,266,"        long minuendRem = minuendInstant
",4,0,0,0,0,0,0,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,268,"        long subtrahendRem = subtrahendInstant
",4,0,0,0,0,0,0,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,271,"        if (minuendRem < subtrahendRem) {
",4,1,0,1,3,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,272,"            difference--;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,275,"        return difference;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,301,"            thisDom = maxDom;
",4,0,0,0,0,0,0,0,0,5,17,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,315,"        int thisYear = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,316,"        if (iChronology.isLeapYear(thisYear)) {
",0,0,0,2,5,0,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,317,"            return (iChronology.getMonthOfYear(instant, thisYear) == iLeapMonth);
",2,1,0,2,4,1,8,0,0,11,69,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,319,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,324,"        return isLeap(instant) ? 1 : 0;
",0,0,0,1,2,1,4,0,0,4,31,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,344,"        int year = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,345,"        int month = iChronology.getMonthOfYear(instant, year);
",2,0,0,1,2,0,8,0,0,10,54,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,346,"        return iChronology.getYearMonthMillis(year, month);
",0,0,0,1,2,1,8,0,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,351,"        return instant - roundFloor(instant);
",2,1,0,1,2,1,4,0,0,7,37,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,14,359,"        return iChronology.monthOfYear();
",0,0,0,1,2,1,4,0,0,4,33,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,49,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,73,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,79,"        return add(instant, FieldUtils.safeToInt(value));
",0,0,0,2,4,1,10,0,0,10,49,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,92,"        return add(instant, years);
",0,0,0,1,2,1,6,0,0,6,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,96,"        if (minuendInstant < subtrahendInstant) {
",4,1,0,1,3,0,0,0,0,5,41,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,97,"            return -getDifference(subtrahendInstant, minuendInstant);
",0,0,0,1,2,1,6,0,0,7,57,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,100,"        int minuendWeekyear = get(minuendInstant);
",2,0,0,1,2,0,4,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,101,"        int subtrahendWeekyear = get(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,103,"        long minuendRem = remainder(minuendInstant);
",2,0,0,1,2,0,4,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,104,"        long subtrahendRem = remainder(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,50,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,107,"        if (subtrahendRem >= WEEK_53 && iChronology.getWeeksInYear(minuendWeekyear) <= 52) {
",4,3,0,2,5,0,6,0,0,13,84,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,108,"            subtrahendRem -= DateTimeConstants.MILLIS_PER_WEEK;
",6,0,0,0,0,0,0,0,0,7,51,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,111,"        int difference = minuendWeekyear - subtrahendWeekyear;
",6,1,0,0,0,0,0,0,0,7,54,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,112,"        if (minuendRem < subtrahendRem) {
",4,1,0,1,3,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,113,"            difference--;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,115,"        return difference;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,135,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,156,"            setToWeek = maxOutWeeks;
",4,0,0,0,0,0,0,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,180,"            workInstant += DateTimeConstants.MILLIS_PER_WEEK;
",6,0,0,0,0,0,0,0,0,7,49,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,182,"            workInstant -= DateTimeConstants.MILLIS_PER_WEEK;
",6,0,0,0,0,0,0,0,0,7,49,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,212,"        return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) > 52;
",0,1,0,2,4,1,10,0,0,11,73,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,216,"        return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) - 52;
",0,1,0,2,4,1,10,0,0,11,73,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,243,"        return instant - roundFloor(instant);
",2,1,0,1,2,1,4,0,0,7,37,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,14,250,"        return iChronology.weekyear();
",0,0,0,1,2,1,4,0,0,4,30,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,14,51,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,14,60,"        if (iChronology.getYear(instant) <= 0) {
",0,1,0,2,5,0,6,0,0,7,40,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,14,61,"            return DateTimeConstants.BCE;
",4,0,0,0,0,1,0,0,0,4,29,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,14,63,"            return DateTimeConstants.CE;
",4,0,0,0,0,1,0,0,0,4,28,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,14,68,"        return GJLocaleSymbols.forLocale(locale).eraValueToText(fieldValue);
",0,0,0,2,4,1,10,0,0,10,68,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,14,80,"        FieldUtils.verifyValueBounds(this, era, DateTimeConstants.BCE, DateTimeConstants.CE);
",8,0,0,1,2,0,6,0,0,14,85,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,14,82,"        int oldEra = get(instant);
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,14,83,"        if (oldEra != era) {
",4,1,0,1,3,0,0,0,0,5,20,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,14,84,"            int year = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,40,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,14,85,"            return iChronology.setYear(instant, -year);
",2,0,0,1,2,1,6,0,0,9,43,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,14,87,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,14,92,"        return set(instant, GJLocaleSymbols.forLocale(locale).eraTextToValue(text));
",0,0,0,3,6,1,14,0,0,14,76,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,14,96,"        if (get(instant) == DateTimeConstants.CE) {
",4,1,0,2,5,0,4,0,0,9,43,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,14,97,"            return iChronology.setYear(0, 1);
",0,0,0,1,2,1,4,0,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,14,99,"            return Long.MIN_VALUE;
",4,0,0,0,0,1,0,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,14,104,"        if (get(instant) == DateTimeConstants.BCE) {
",4,1,0,2,5,0,4,0,0,9,44,4,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,14,105,"            return iChronology.setYear(0, 1);
",0,0,0,1,2,1,4,0,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,14,107,"            return Long.MAX_VALUE;
",4,0,0,0,0,1,0,0,0,4,22,7,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,14,113,"        return roundFloor(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,14,118,"        return roundFloor(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,14,123,"        return roundFloor(instant);
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,14,135,"        return DateTimeConstants.BCE;
",4,0,0,0,0,1,0,0,0,4,29,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,14,139,"        return DateTimeConstants.CE;
",4,0,0,0,0,1,0,0,0,4,28,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,14,143,"        return GJLocaleSymbols.forLocale(locale).getEraMaxTextLength();
",0,0,0,2,4,1,8,0,0,8,63,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,14,150,"        return iChronology.era();
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,63,"        return iChronology.getDaysInMonthMax(instant);
",0,0,0,1,2,1,6,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,67,"        if (partial.isSupported(DateTimeFieldType.monthOfYear())) {
",0,0,0,3,7,0,8,0,0,8,59,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,68,"            int month = partial.get(DateTimeFieldType.monthOfYear());
",2,0,0,2,4,0,8,0,0,10,57,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,69,"            if (partial.isSupported(DateTimeFieldType.year())) {
",0,0,0,3,7,0,8,0,0,8,52,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,70,"                int year = partial.get(DateTimeFieldType.year());
",2,0,0,2,4,0,8,0,0,10,49,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,71,"                return iChronology.getDaysInYearMonth(year, month);
",0,0,0,1,2,1,8,0,0,8,51,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,73,"            return iChronology.getDaysInMonthMax(month);
",0,0,0,1,2,1,6,0,0,6,44,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,75,"        return getMaximumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,85,"                        int year = values[j];
",2,0,1,1,2,0,0,0,0,6,21,13,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,86,"                        return iChronology.getDaysInYearMonth(year, month);
",0,0,0,1,2,1,8,0,0,8,51,13,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,92,"        return getMaximumValue();
",0,0,0,1,2,1,2,0,0,2,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,14,103,"        return iChronology.dayOfMonth();
",0,0,0,1,2,1,4,0,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,14,50,"        int year = getWrappedField().get(instant);
",2,0,0,2,4,0,6,0,0,8,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,14,51,"        return year < 0 ? -year : year;
",6,1,0,0,0,1,0,0,0,8,31,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,14,55,"        return getWrappedField().add(instant, years);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,14,59,"        return getWrappedField().add(instant, years);
",0,0,0,2,4,1,8,0,0,8,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,14,63,"        return getWrappedField().addWrapField(instant, years);
",0,0,0,2,4,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,14,67,"        return getWrappedField().addWrapField(instant, fieldIndex, values, years);
",0,0,0,2,4,1,12,0,0,12,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,14,71,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,14,75,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,80,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,14,79,"        FieldUtils.verifyValueBounds(this, year, 0, getMaximumValue());
",0,0,0,2,4,0,8,0,0,8,63,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,14,80,"        if (getWrappedField().get(instant) < 0) {
",0,1,0,3,7,0,6,0,0,7,41,4,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,14,81,"            year = -year;
",4,0,0,0,0,0,0,0,0,6,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,14,83,"        return super.set(instant, year);
",6,0,0,1,2,1,0,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,14,95,"        return getWrappedField().roundFloor(instant);
",0,0,0,2,4,1,6,0,0,6,45,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,14,99,"        return getWrappedField().roundCeiling(instant);
",0,0,0,2,4,1,6,0,0,6,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,14,103,"        return getWrappedField().remainder(instant);
",0,0,0,2,4,1,6,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,14,110,"        return INSTANCE;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,461,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,462,"            return getWrappedField().get(instant);
",0,0,0,2,4,1,6,0,0,6,38,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,466,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,467,"            return getWrappedField().getAsText(instant, locale);
",0,0,0,2,4,1,8,0,0,8,52,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,471,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,472,"            return getWrappedField().getAsShortText(instant, locale);
",0,0,0,2,4,1,8,0,0,8,57,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,476,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,477,"            long result = getWrappedField().add(instant, amount);
",2,0,0,2,4,0,8,0,0,10,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,478,"            checkLimits(result, ""resulting"");
",0,0,0,1,2,0,4,0,0,5,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,479,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,483,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,484,"            long result = getWrappedField().add(instant, amount);
",2,0,0,2,4,0,8,0,0,10,53,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,485,"            checkLimits(result, ""resulting"");
",0,0,0,1,2,0,4,0,0,5,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,486,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,490,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,491,"            long result = getWrappedField().addWrapField(instant, amount);
",2,0,0,2,4,0,8,0,0,10,62,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,492,"            checkLimits(result, ""resulting"");
",0,0,0,1,2,0,4,0,0,5,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,493,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,497,"            checkLimits(minuendInstant, ""minuend"");
",0,0,0,1,2,0,4,0,0,5,39,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,498,"            checkLimits(subtrahendInstant, ""subtrahend"");
",0,0,0,1,2,0,4,0,0,5,45,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,499,"            return getWrappedField().getDifference(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,74,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,503,"            checkLimits(minuendInstant, ""minuend"");
",0,0,0,1,2,0,4,0,0,5,39,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,504,"            checkLimits(subtrahendInstant, ""subtrahend"");
",0,0,0,1,2,0,4,0,0,5,45,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,505,"            return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,2,4,1,8,0,0,8,80,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,509,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,510,"            long result = getWrappedField().set(instant, value);
",2,0,0,2,4,0,8,0,0,10,52,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,511,"            checkLimits(result, ""resulting"");
",0,0,0,1,2,0,4,0,0,5,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,512,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,516,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,517,"            long result = getWrappedField().set(instant, text, locale);
",2,0,0,2,4,0,10,0,0,12,59,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,518,"            checkLimits(result, ""resulting"");
",0,0,0,1,2,0,4,0,0,5,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,519,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,531,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,532,"            return getWrappedField().isLeap(instant);
",0,0,0,2,4,1,6,0,0,6,41,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,536,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,537,"            return getWrappedField().getLeapAmount(instant);
",0,0,0,2,4,1,6,0,0,6,48,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,545,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,546,"            long result = getWrappedField().roundFloor(instant);
",2,0,0,2,4,0,6,0,0,8,52,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,547,"            checkLimits(result, ""resulting"");
",0,0,0,1,2,0,4,0,0,5,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,548,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,552,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,553,"            long result = getWrappedField().roundCeiling(instant);
",2,0,0,2,4,0,6,0,0,8,54,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,554,"            checkLimits(result, ""resulting"");
",0,0,0,1,2,0,4,0,0,5,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,555,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,559,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,560,"            long result = getWrappedField().roundHalfFloor(instant);
",2,0,0,2,4,0,6,0,0,8,56,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,561,"            checkLimits(result, ""resulting"");
",0,0,0,1,2,0,4,0,0,5,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,562,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,566,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,567,"            long result = getWrappedField().roundHalfCeiling(instant);
",2,0,0,2,4,0,6,0,0,8,58,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,568,"            checkLimits(result, ""resulting"");
",0,0,0,1,2,0,4,0,0,5,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,569,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,573,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,574,"            long result = getWrappedField().roundHalfEven(instant);
",2,0,0,2,4,0,6,0,0,8,55,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,575,"            checkLimits(result, ""resulting"");
",0,0,0,1,2,0,4,0,0,5,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,576,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,580,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,581,"            long result = getWrappedField().remainder(instant);
",2,0,0,2,4,0,6,0,0,8,51,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,582,"            checkLimits(result, ""resulting"");
",0,0,0,1,2,0,4,0,0,5,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,583,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,587,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,588,"            return getWrappedField().getMinimumValue(instant);
",0,0,0,2,4,1,6,0,0,6,50,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,592,"            checkLimits(instant, null);
",0,0,0,1,2,0,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,593,"            return getWrappedField().getMaximumValue(instant);
",0,0,0,2,4,1,6,0,0,6,50,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,597,"            return getWrappedField().getMaximumTextLength(locale);
",0,0,0,2,4,1,6,0,0,6,54,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,601,"            return getWrappedField().getMaximumShortTextLength(locale);
",0,0,0,2,4,1,6,0,0,6,59,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,754,"            return GJLocaleSymbols.forLocale(locale).halfdayValueToText(fieldValue);
",0,0,0,2,4,1,10,0,0,10,72,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,758,"            return set(millis, GJLocaleSymbols.forLocale(locale).halfdayTextToValue(text));
",0,0,0,3,6,1,14,0,0,14,79,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicChronology,14,762,"            return GJLocaleSymbols.forLocale(locale).getHalfdayMaxTextLength();
",0,0,0,2,4,1,8,0,0,8,67,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,216,"        Stub(DateTimeZone zone) {
",4,0,0,1,3,0,0,2,0,6,25,3,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,217,"            iZone = zone;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,218,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,221,"            return ISOChronology.getInstance(iZone);
",0,0,0,1,2,1,6,0,0,6,40,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,225,"            out.writeObject(iZone);
",0,0,0,1,2,0,6,0,0,6,23,6,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,226,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,231,"            iZone = (DateTimeZone)in.readObject();
",2,0,0,2,4,0,4,2,0,9,38,5,0.00000,0
defect4j,time,org/joda/time/chrono/ISOChronology,14,232,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,14,50,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,14,58,"        if (years == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,14,59,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,14,61,"        int thisYear = get(instant);
",2,0,0,1,2,0,4,0,0,6,28,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,14,62,"        int newYear = FieldUtils.safeAdd(thisYear, years);
",2,0,0,1,2,0,8,0,0,10,50,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,14,63,"        return set(instant, newYear);
",0,0,0,1,2,1,6,0,0,6,29,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,14,67,"        return add(instant, FieldUtils.safeToInt(years));
",0,0,0,2,4,1,10,0,0,10,49,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,14,71,"        if (years == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,14,72,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,14,75,"        int thisYear = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,14,76,"        int wrappedYear = FieldUtils.getWrappedValue
",2,0,0,0,0,0,4,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,14,78,"        return set(instant, wrappedYear);
",0,0,0,1,2,1,6,0,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,14,88,"        if (minuendInstant < subtrahendInstant) {
",4,1,0,1,3,0,0,0,0,5,41,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,14,89,"            return -iChronology.getYearDifference(subtrahendInstant, minuendInstant);
",0,0,0,1,2,1,8,0,0,9,73,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,14,91,"        return iChronology.getYearDifference(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,72,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,14,99,"        return iChronology.isLeapYear(get(instant));
",0,0,0,2,4,1,8,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,14,103,"        if (iChronology.isLeapYear(get(instant))) {
",0,0,0,3,7,0,8,0,0,8,43,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,14,104,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,14,106,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,14,123,"        return iChronology.getYearMillis(get(instant));
",0,0,0,2,4,1,8,0,0,8,47,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,14,137,"        return instant - roundFloor(instant);
",2,1,0,1,2,1,4,0,0,7,37,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,14,144,"        return iChronology.year();
",0,0,0,1,2,1,4,0,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,351,"        LimitException(String desc, boolean isLow) {
",6,0,0,1,3,0,0,2,0,8,44,3,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,352,"            super(desc);
",2,0,0,1,2,0,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,353,"            iIsLow = isLow;
",4,0,0,0,0,0,0,0,0,5,15,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,354,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,357,"            StringBuffer buf = new StringBuffer(85);
",2,0,0,1,2,0,0,4,0,6,40,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,358,"            buf.append(""The"");
",0,0,0,1,2,0,4,0,0,5,18,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,359,"            String desc = super.getMessage();
",4,0,0,1,2,0,0,2,0,6,33,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,360,"            if (desc != null) {
",2,1,0,1,3,0,0,0,0,3,19,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,361,"                buf.append(' ');
",0,0,0,1,2,0,4,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,362,"                buf.append(desc);
",0,0,0,1,2,0,6,0,0,6,17,8,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,364,"            buf.append("" instant is "");
",0,0,0,1,2,0,4,0,0,5,27,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,366,"            DateTimeFormatter p = ISODateTimeFormat.dateTime();
",2,0,0,1,2,0,4,2,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,367,"            p = p.withChronology(getBase());
",2,0,0,2,4,0,6,0,0,9,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,368,"            if (iIsLow) {
",2,0,0,1,3,0,0,0,0,2,13,5,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,369,"                buf.append(""below the supported minimum of "");
",0,0,0,1,2,0,4,0,0,5,46,8,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,370,"                p.printTo(buf, getLowerLimit().getMillis());
",0,0,0,3,6,0,10,0,0,10,44,8,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,372,"                buf.append(""above the supported maximum of "");
",0,0,0,1,2,0,4,0,0,5,46,8,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,373,"                p.printTo(buf, getUpperLimit().getMillis());
",0,0,0,3,6,0,10,0,0,10,44,8,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,376,"            buf.append("" ("");
",0,0,0,1,3,0,4,0,0,5,17,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,377,"            buf.append(getBase());
",0,0,0,2,4,0,6,0,0,6,22,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,378,"            buf.append(')');
",0,0,0,1,3,0,4,0,0,5,16,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,380,"            return buf.toString();
",0,0,0,1,2,1,4,0,0,4,22,6,0.00000,0
defect4j,time,org/joda/time/chrono/LimitChronology,14,384,"            return ""IllegalArgumentException: "" + getMessage();
",0,1,0,1,2,1,2,0,0,4,51,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,14,67,"        return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToText(fieldValue);
",0,0,0,2,4,1,10,0,0,10,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,14,78,"        return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToShortText(fieldValue);
",0,0,0,2,4,1,10,0,0,10,79,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,14,90,"        return GJLocaleSymbols.forLocale(locale).dayOfWeekTextToValue(text);
",0,0,0,2,4,1,10,0,0,10,68,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,14,122,"        return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxTextLength();
",0,0,0,2,4,1,8,0,0,8,69,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,14,132,"        return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxShortTextLength();
",0,0,0,2,4,1,8,0,0,8,74,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,14,139,"        return iChronology.dayOfWeek();
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,14,52,"        return iChronology.getDayOfYear(instant);
",0,0,0,1,2,1,6,0,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,14,60,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,14,64,"        return iChronology.getDaysInYearMax();
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,14,68,"        int year = iChronology.getYear(instant);
",2,0,0,1,2,0,6,0,0,8,40,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,14,69,"        return iChronology.getDaysInYear(year);
",0,0,0,1,2,1,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,14,73,"        if (partial.isSupported(DateTimeFieldType.year())) {
",0,0,0,3,7,0,8,0,0,8,52,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,14,74,"            int year = partial.get(DateTimeFieldType.year());
",2,0,0,2,4,0,8,0,0,10,49,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,14,75,"            return iChronology.getDaysInYear(year);
",0,0,0,1,2,1,6,0,0,6,39,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,14,77,"        return iChronology.getDaysInYearMax();
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,14,81,"        int size = partial.size();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,14,82,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,14,83,"            if (partial.getFieldType(i) == DateTimeFieldType.year()) {
",0,1,0,3,7,0,10,0,0,11,58,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,14,84,"                int year = values[i];
",2,0,1,1,2,0,0,0,0,6,21,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,14,85,"                return iChronology.getDaysInYear(year);
",0,0,0,1,2,1,6,0,0,6,39,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,14,88,"        return iChronology.getDaysInYearMax();
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,14,92,"        int maxLessOne = iChronology.getDaysInYearMax() - 1;
",2,1,0,1,2,0,4,0,0,7,52,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,14,93,"        return (value > maxLessOne || value < 1) ? getMaximumValue(instant) : maxLessOne;
",8,3,0,2,4,1,4,0,0,15,81,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,14,100,"        return iChronology.dayOfYear();
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,14,54,"        return iChronology.getWeekOfWeekyear(instant);
",0,0,0,1,2,1,6,0,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,14,70,"        return super.roundCeiling(instant + 3 * DateTimeConstants.MILLIS_PER_DAY)
",8,2,0,1,2,1,0,0,0,10,73,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,14,75,"        return super.remainder(instant + 3 * DateTimeConstants.MILLIS_PER_DAY);
",8,2,0,1,2,1,0,0,0,10,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,14,79,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,14,83,"        return 53;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,14,87,"        int weekyear = iChronology.getWeekyear(instant);
",2,0,0,1,2,0,6,0,0,8,48,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,14,88,"        return iChronology.getWeeksInYear(weekyear);
",0,0,0,1,2,1,6,0,0,6,44,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,14,92,"        if (partial.isSupported(DateTimeFieldType.weekyear())) {
",0,0,0,3,7,0,8,0,0,8,56,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,14,93,"            int weekyear = partial.get(DateTimeFieldType.weekyear());
",2,0,0,2,4,0,8,0,0,10,57,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,14,94,"            return iChronology.getWeeksInYear(weekyear);
",0,0,0,1,2,1,6,0,0,6,44,7,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,14,96,"        return 53;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,14,100,"        int size = partial.size();
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,14,101,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,14,102,"            if (partial.getFieldType(i) == DateTimeFieldType.weekyear()) {
",0,1,0,3,7,0,10,0,0,11,62,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,14,103,"                int weekyear = values[i];
",2,0,1,1,2,0,0,0,0,6,25,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,14,104,"                return iChronology.getWeeksInYear(weekyear);
",0,0,0,1,2,1,6,0,0,6,44,9,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,14,107,"        return 53;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,14,111,"        return value > 52 ? getMaximumValue(instant) : 52;
",2,1,0,1,2,1,4,0,0,7,50,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,14,118,"        return iChronology.weekOfWeekyear();
",0,0,0,1,2,1,4,0,0,4,36,5,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,1088,"            return iField.add(instant, value);
",0,0,0,1,2,1,8,0,0,8,34,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,1092,"            return iField.add(instant, value);
",0,0,0,1,2,1,8,0,0,8,34,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,1096,"            return iField.getDifference(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,63,6,0.00000,0
defect4j,time,org/joda/time/chrono/GJChronology,14,1100,"            return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant);
",0,0,0,1,2,1,8,0,0,8,69,6,0.00000,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,98,"        return getInstance(DateTimeZone.getDefault(), 4);
",0,0,0,2,4,1,6,0,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,120,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,131,"            } catch (ArrayIndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,44,8,0.00000,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,132,"                throw new IllegalArgumentException
",0,0,0,0,0,0,0,2,0,2,34,11,0.00000,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,168,"        Chronology base = getBase();
",2,0,0,1,2,0,2,2,0,6,28,4,0.00000,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,169,"        int minDays = getMinimumDaysInFirstWeek();
",2,0,0,1,2,0,2,0,0,4,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,170,"        minDays = (minDays == 0 ? 4 : minDays);  // handle rename of BaseGJChronology
",6,1,0,1,2,0,0,0,0,8,77,4,0.00000,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,171,"        return base == null ?
",2,1,0,0,0,1,0,0,0,3,21,5,0.00000,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,194,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,195,"            zone = DateTimeZone.getDefault();
",2,0,0,1,2,0,4,0,0,7,33,6,0.00000,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,197,"        if (zone == getZone()) {
",2,1,0,2,5,0,2,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,198,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,200,"        return getInstance(zone);
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,216,"            leapYears = relativeYear >> 2;
",4,1,0,0,0,0,0,0,0,6,30,6,0.00000,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,218,"            if (!isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,219,"                leapYears++;
",2,0,0,0,0,0,0,0,0,3,12,8,0.00000,0
defect4j,time,org/joda/time/chrono/CopticChronology,14,243,"        return (1686L * MILLIS_PER_YEAR + 112L * DateTimeConstants.MILLIS_PER_DAY) / 2;
",6,4,0,1,2,1,0,0,0,10,79,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,14,65,"        int thisYear = getYear(instant);
",2,0,0,1,2,0,4,0,0,6,32,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,14,66,"        int dayOfYear = getDayOfYear(instant, thisYear);
",2,0,0,1,2,0,6,0,0,8,48,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,14,67,"        int millisOfDay = getMillisOfDay(instant);
",2,0,0,1,2,0,4,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,14,69,"        if (dayOfYear > 365) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,14,71,"            if (!isLeapYear(year)) {
",0,0,0,2,5,0,4,0,0,5,24,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,14,73,"                dayOfYear--;
",2,0,0,0,0,0,0,0,0,3,12,8,0.00000,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,14,77,"        instant = getYearMonthDayMillis(year, 1, dayOfYear);
",2,0,0,1,2,0,6,0,0,9,52,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,14,78,"        instant += millisOfDay;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,14,79,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,14,85,"        int minuendYear = getYear(minuendInstant);
",2,0,0,1,2,0,4,0,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,14,86,"        int subtrahendYear = getYear(subtrahendInstant);
",2,0,0,1,2,0,4,0,0,6,48,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,14,89,"        long minuendRem = minuendInstant - getYearMillis(minuendYear);
",4,1,0,1,2,0,4,0,0,9,62,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,14,90,"        long subtrahendRem = subtrahendInstant - getYearMillis(subtrahendYear);
",4,1,0,1,2,0,4,0,0,9,71,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,14,92,"        int difference = minuendYear - subtrahendYear;
",6,1,0,0,0,0,0,0,0,7,46,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,14,93,"        if (minuendRem < subtrahendRem) {
",4,1,0,1,3,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,14,94,"            difference--;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,14,96,"        return difference;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,14,107,"        return (getDayOfYear(millis) - 1) % MONTH_LENGTH + 1;
",2,3,0,2,4,1,4,0,0,9,53,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,14,112,"        return (year & 3) == 3;
",2,2,0,1,2,1,0,0,0,4,23,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,14,122,"        return MONTH_LENGTH;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,14,127,"        return (month != 13 ? MONTH_LENGTH : 6);
",4,1,0,1,2,1,0,0,0,5,40,6,0.00000,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,14,132,"        return (getDayOfYear(millis) - 1) / MONTH_LENGTH + 1;
",2,3,0,2,4,1,4,0,0,9,53,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,14,137,"        long monthZeroBased = (millis - getYearMillis(year)) / MILLIS_PER_MONTH;
",6,2,0,2,4,0,4,0,0,12,72,5,0.00000,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,14,138,"        return ((int) monthZeroBased) + 1;
",2,1,0,2,4,1,0,0,0,3,34,4,0.00000,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,14,153,"        return MILLIS_PER_YEAR / 2;
",2,1,0,0,0,1,0,0,0,3,27,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,221,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,222,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,236,"        super(ISOChronology.getInstance(zone));
",0,0,0,2,4,0,6,0,0,6,39,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,237,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,251,"        super(chronology);
",2,0,0,1,2,0,0,0,0,2,18,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,252,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,265,"        super(instant);
",2,0,0,1,2,0,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,266,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,280,"        super(instant, chronology);
",4,0,0,1,2,0,0,0,0,4,27,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,281,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,297,"        super(instant, null, ISODateTimeFormat.localDateParser());
",2,0,0,2,4,0,4,0,0,7,58,3,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,298,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,319,"        super(instant, DateTimeUtils.getChronology(chronology), ISODateTimeFormat.localDateParser());
",2,0,0,3,6,0,10,0,0,12,93,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,320,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,334,"        this(monthOfYear, dayOfMonth, null);
",4,0,0,1,2,0,0,0,0,4,36,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,335,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,372,"        super(partial, chrono);
",4,0,0,1,2,0,0,0,0,4,23,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,373,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,103,"        return new MonthDay();
",0,0,0,1,2,1,0,2,0,2,22,6,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,116,"        if (zone == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,117,"            throw new NullPointerException(""Zone must not be null"");
",0,0,0,1,2,0,0,2,0,4,56,6,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,119,"        return new MonthDay(zone);
",2,0,0,1,2,1,0,2,0,4,26,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,132,"        if (chronology == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,133,"            throw new NullPointerException(""Chronology must not be null"");
",0,0,0,1,2,0,0,2,0,4,62,6,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,135,"        return new MonthDay(chronology);
",2,0,0,1,2,1,0,2,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,149,"        return parse(str, PARSER);
",0,0,0,1,2,1,6,0,0,6,26,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,160,"        LocalDate date = formatter.parseLocalDate(str);
",2,0,0,1,2,0,6,2,0,10,47,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,161,"        return new MonthDay(date.getMonthOfYear(), date.getDayOfMonth());
",0,0,0,3,6,1,8,2,0,10,65,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,182,"        if (calendar == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,183,"            throw new IllegalArgumentException(""The calendar must not be null"");
",0,0,0,1,2,0,0,2,0,4,68,6,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,185,"        return new MonthDay(calendar.get(Calendar.MONTH) + 1, calendar.get(Calendar.DAY_OF_MONTH));
",8,1,0,3,6,1,8,2,0,19,91,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,203,"        if (date == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,204,"            throw new IllegalArgumentException(""The date must not be null"");
",0,0,0,1,2,0,0,2,0,4,64,6,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,206,"        return new MonthDay(date.getMonth() + 1, date.getDate());
",0,1,0,3,6,1,8,2,0,11,57,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,380,"        if (DateTimeZone.UTC.equals(getChronology().getZone()) == false) {
",4,1,0,4,9,0,6,0,0,12,66,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,381,"            return new MonthDay(this, getChronology().withUTC());
",0,0,0,3,6,1,4,2,0,6,53,7,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,383,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,414,"            throw new IndexOutOfBoundsException(""Invalid index: "" + index);
",2,1,0,1,2,0,0,2,0,6,63,6,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,437,"        return (DateTimeFieldType[]) FIELD_TYPES.clone();
",0,0,0,3,6,1,4,2,0,6,49,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,456,"        newChronology = DateTimeUtils.getChronology(newChronology);
",2,0,0,1,2,0,6,0,0,9,59,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,457,"        newChronology = newChronology.withUTC();
",2,0,0,1,2,0,4,0,0,7,40,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,458,"        if (newChronology == getChronology()) {
",2,1,0,2,5,0,2,0,0,5,39,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,459,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,461,"            MonthDay newMonthDay = new MonthDay(this, newChronology);
",4,0,0,1,2,0,0,4,0,8,57,6,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,462,"            newChronology.validate(newMonthDay, getValues());
",0,0,0,2,4,0,8,0,0,8,49,7,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,463,"            return newMonthDay;
",2,0,0,0,0,1,0,0,0,2,19,6,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,486,"        int index = indexOfSupported(fieldType);
",2,0,0,1,2,0,4,0,0,6,40,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,487,"        if (value == getValue(index)) {
",2,1,0,2,5,0,4,0,0,7,31,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,488,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,490,"        int[] newValues = getValues();
",2,0,0,2,4,0,2,0,0,4,30,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,491,"        newValues = getField(index).set(this, index, newValues, value);
",2,0,0,2,4,0,12,0,0,15,63,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,492,"        return new MonthDay(this, newValues);
",2,0,0,1,2,1,0,2,0,4,37,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,516,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,540,"        if (period == null || scalar == 0) {
",4,3,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,541,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,543,"        int[] newValues = getValues();
",2,0,0,2,4,0,2,0,0,4,30,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,544,"        for (int i = 0; i < period.size(); i++) {
",6,1,0,2,5,0,4,0,0,12,41,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,545,"            DurationFieldType fieldType = period.getFieldType(i);
",2,0,0,1,2,0,6,2,0,10,53,6,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,546,"            int index = indexOf(fieldType);
",2,0,0,1,2,0,4,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,547,"            if (index >= 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,548,"                newValues = getField(index).add(this, index, newValues,
",2,0,0,1,3,0,10,0,0,13,55,8,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,552,"        return new MonthDay(this, newValues);
",2,0,0,1,2,1,0,2,0,4,37,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,570,"        return withPeriodAdded(period, 1);
",0,0,0,1,2,1,4,0,0,4,34,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,630,"        return withPeriodAdded(period, -1);
",0,0,0,1,2,1,4,0,0,5,35,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,683,"        return new LocalDate(year, getMonthOfYear(), getDayOfMonth(), getChronology());
",2,0,0,4,8,1,6,2,0,10,79,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,693,"        return getValue(MONTH_OF_YEAR);
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,702,"        return getValue(DAY_OF_MONTH);
",0,0,0,1,2,1,4,0,0,4,30,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,718,"        int[] newValues = getValues();
",2,0,0,2,4,0,2,0,0,4,30,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,719,"        newValues = getChronology().monthOfYear().set(this, MONTH_OF_YEAR, newValues, monthOfYear);
",2,0,0,3,6,0,12,0,0,15,91,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,720,"        return new MonthDay(this, newValues);
",2,0,0,1,2,1,0,2,0,4,37,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,735,"        int[] newValues = getValues();
",2,0,0,2,4,0,2,0,0,4,30,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,736,"        newValues = getChronology().dayOfMonth().set(this, DAY_OF_MONTH, newValues, dayOfMonth);
",2,0,0,3,6,0,12,0,0,15,88,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,737,"        return new MonthDay(this, newValues);
",2,0,0,1,2,1,0,2,0,4,37,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,750,"        return new Property(this, indexOfSupported(type));
",0,0,0,2,4,1,4,2,0,6,50,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,760,"        return new Property(this, MONTH_OF_YEAR);
",2,0,0,1,2,1,0,2,0,4,41,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,769,"        return new Property(this, DAY_OF_MONTH);
",2,0,0,1,2,1,0,2,0,4,40,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,793,"        if (pattern == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,794,"            return toString();
",0,0,0,1,2,1,2,0,0,2,18,7,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,796,"        return DateTimeFormat.forPattern(pattern).print(this);
",0,0,0,2,4,1,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,807,"        if (pattern == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,808,"            return toString();
",0,0,0,1,2,1,2,0,0,2,18,7,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,810,"        return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);
",0,0,0,3,6,1,12,0,0,12,73,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,839,"            super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,840,"            iBase = partial;
",4,0,0,0,0,0,0,0,0,5,16,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,841,"            iFieldIndex = fieldIndex;
",4,0,0,0,0,0,0,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,842,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,850,"            return iBase.getField(iFieldIndex);
",0,0,0,1,2,1,6,0,0,6,35,6,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,859,"            return iBase;
",2,0,0,0,0,1,0,0,0,2,13,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,868,"            return iBase;
",2,0,0,0,0,1,0,0,0,2,13,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,877,"            return iBase.getValue(iFieldIndex);
",0,0,0,1,2,1,6,0,0,6,35,6,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,896,"            int[] newValues = iBase.getValues();
",2,0,0,2,4,0,4,0,0,6,36,6,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,897,"            newValues = getField().add(iBase, iFieldIndex, newValues, valueToAdd);
",2,0,0,2,4,0,12,0,0,15,70,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,898,"            return new MonthDay(iBase, newValues);
",4,0,0,1,2,1,0,2,0,6,38,6,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,920,"            int[] newValues = iBase.getValues();
",2,0,0,2,4,0,4,0,0,6,36,6,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,921,"            newValues = getField().addWrapField(iBase, iFieldIndex, newValues, valueToAdd);
",2,0,0,2,4,0,12,0,0,15,79,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,922,"            return new MonthDay(iBase, newValues);
",4,0,0,1,2,1,0,2,0,6,38,6,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,937,"            int[] newValues = iBase.getValues();
",2,0,0,2,4,0,4,0,0,6,36,6,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,938,"            newValues = getField().set(iBase, iFieldIndex, newValues, value);
",2,0,0,2,4,0,12,0,0,15,65,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,939,"            return new MonthDay(iBase, newValues);
",4,0,0,1,2,1,0,2,0,6,38,6,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,954,"            int[] newValues = iBase.getValues();
",2,0,0,2,4,0,4,0,0,6,36,6,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,955,"            newValues = getField().set(iBase, iFieldIndex, newValues, text, locale);
",2,0,0,2,4,0,14,0,0,17,72,5,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,956,"            return new MonthDay(iBase, newValues);
",4,0,0,1,2,1,0,2,0,6,38,6,0.00000,0
defect4j,time,org/joda/time/MonthDay,14,970,"            return setCopy(text, null);
",0,0,0,1,2,1,4,0,0,5,27,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,963,"        RuleSet() {
",2,0,0,1,3,0,0,0,0,2,11,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,964,"            iRules = new ArrayList<Rule>(10);
",2,0,0,1,2,0,0,4,0,7,33,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,965,"            iUpperYear = Integer.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,7,31,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,966,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,971,"        RuleSet(RuleSet rs) {
",4,0,0,1,3,0,0,2,0,6,21,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,972,"            iStandardOffset = rs.iStandardOffset;
",6,0,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,973,"            iRules = new ArrayList<Rule>(rs.iRules);
",6,0,0,1,2,0,0,4,0,11,40,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,974,"            iInitialNameKey = rs.iInitialNameKey;
",6,0,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,975,"            iInitialSaveMillis = rs.iInitialSaveMillis;
",6,0,0,0,0,0,0,0,0,7,43,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,976,"            iUpperYear = rs.iUpperYear;
",6,0,0,0,0,0,0,0,0,7,27,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,977,"            iUpperOfYear = rs.iUpperOfYear;
",6,0,0,0,0,0,0,0,0,7,31,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,978,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,948,"            long now = DateTimeUtils.currentTimeMillis();
",2,0,0,1,2,0,4,0,0,6,45,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,949,"            YEAR_LIMIT = ISOChronology.getInstanceUTC().year().get(now) + 100;
",2,1,0,3,6,0,10,0,0,14,66,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,950,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,981,"            return iStandardOffset;
",2,0,0,0,0,1,0,0,0,2,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,985,"            iStandardOffset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,33,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,986,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,989,"            iInitialNameKey = nameKey;
",4,0,0,0,0,0,0,0,0,5,26,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,990,"            iInitialSaveMillis = saveMillis;
",4,0,0,0,0,0,0,0,0,5,32,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,991,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,994,"            if (!iRules.contains(rule)) {
",0,0,0,2,5,0,6,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,995,"                iRules.add(rule);
",0,0,0,1,2,0,6,0,0,6,17,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,997,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1000,"            iUpperYear = year;
",4,0,0,0,0,0,0,0,0,5,18,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1001,"            iUpperOfYear = ofYear;
",4,0,0,0,0,0,0,0,0,5,22,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1002,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1011,"            if (iInitialNameKey != null) {
",2,1,0,1,3,0,0,0,0,3,30,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1013,"                return new Transition(firstMillis, iInitialNameKey,
",4,0,0,0,1,1,0,2,0,6,51,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1018,"            ArrayList<Rule> copy = new ArrayList<Rule>(iRules);
",4,0,0,1,2,0,0,8,0,12,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1024,"            long millis = Long.MIN_VALUE;
",6,0,0,0,0,0,0,0,0,6,29,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1025,"            int saveMillis = 0;
",2,0,0,0,0,0,0,0,0,2,19,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1026,"            Transition first = null;
",2,0,0,0,0,0,0,2,0,4,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1029,"            while ((next = nextTransition(millis, saveMillis)) != null) {
",2,1,0,3,7,0,6,0,0,11,61,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1030,"                millis = next.getMillis();
",2,0,0,1,2,0,4,0,0,7,26,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1032,"                if (millis == firstMillis) {
",4,1,0,1,3,0,0,0,0,5,28,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1033,"                    first = new Transition(firstMillis, next);
",6,0,0,1,2,0,0,2,0,9,42,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1034,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1037,"                if (millis > firstMillis) {
",4,1,0,1,3,0,0,0,0,5,27,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1038,"                    if (first == null) {
",2,1,0,1,3,0,0,0,0,3,20,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1042,"                        for (Rule rule : copy) {
",4,0,0,1,3,0,0,2,0,6,24,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1043,"                            if (rule.getSaveMillis() == 0) {
",0,1,0,2,5,0,4,0,0,5,32,13,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1044,"                                first = new Transition(firstMillis, rule, iStandardOffset);
",8,0,0,1,2,0,0,2,0,11,59,15,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1045,"                                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1047,"                        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1049,"                    if (first == null) {
",2,1,0,1,3,0,0,0,0,3,20,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1053,"                        first = new Transition(firstMillis, next.getNameKey(),
",4,0,0,1,3,0,4,2,0,11,54,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1061,"                first = new Transition(firstMillis, next);
",6,0,0,1,2,0,0,2,0,9,42,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1063,"                saveMillis = next.getSaveMillis();
",2,0,0,1,2,0,4,0,0,7,34,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1066,"            iRules = copy;
",4,0,0,0,0,0,0,0,0,5,14,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1067,"            return first;
",2,0,0,0,0,1,0,0,0,2,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1082,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1085,"            Rule nextRule = null;
",2,0,0,0,0,0,0,2,0,4,21,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1086,"            long nextMillis = Long.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,6,33,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1088,"            Iterator<Rule> it = iRules.iterator();
",2,0,0,1,2,0,4,4,0,10,38,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1089,"            while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1090,"                Rule rule = it.next();
",2,0,0,1,2,0,4,2,0,8,22,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1091,"                long next = rule.next(instant, iStandardOffset, saveMillis);
",2,0,0,1,2,0,10,0,0,12,60,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1092,"                if (next <= instant) {
",4,1,0,1,3,0,0,0,0,5,22,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1093,"                    it.remove();
",0,0,0,1,2,0,4,0,0,4,12,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1094,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1098,"                if (next <= nextMillis) {
",4,1,0,1,3,0,0,0,0,5,25,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1100,"                    nextRule = rule;
",4,0,0,0,0,0,0,0,0,5,16,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1101,"                    nextMillis = next;
",4,0,0,0,0,0,0,0,0,5,18,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1103,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1105,"            if (nextRule == null) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1106,"                return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1110,"            if (chrono.year().get(nextMillis) >= YEAR_LIMIT) {
",2,1,0,3,7,0,8,0,0,11,50,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1111,"                return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1115,"            if (iUpperYear < Integer.MAX_VALUE) {
",6,1,0,1,3,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1116,"                long upperMillis =
",2,0,0,0,0,0,0,0,0,2,18,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1118,"                if (nextMillis >= upperMillis) {
",4,1,0,1,3,0,0,0,0,5,32,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1120,"                    return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1124,"            return new Transition(nextMillis, nextRule, iStandardOffset);
",6,0,0,1,2,1,0,2,0,8,61,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1131,"            if (iUpperYear == Integer.MAX_VALUE) {
",6,1,0,1,3,0,0,0,0,7,38,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1132,"                return Long.MAX_VALUE;
",4,0,0,0,0,1,0,0,0,4,22,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1134,"            return iUpperOfYear.setInstant(iUpperYear, iStandardOffset, saveMillis);
",0,0,0,1,2,1,10,0,0,10,72,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1141,"            if (iRules.size() == 2) {
",0,1,0,2,5,0,4,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1142,"                Rule startRule = iRules.get(0);
",2,0,0,1,2,0,4,2,0,8,31,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1143,"                Rule endRule = iRules.get(1);
",2,0,0,1,2,0,4,2,0,8,29,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1144,"                if (startRule.getToYear() == Integer.MAX_VALUE &&
",4,2,0,1,3,0,4,0,0,10,49,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1154,"                    return new DSTZone(id, iStandardOffset,
",4,0,0,0,1,1,0,2,0,6,39,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1158,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1183,"            return findMatchingRecurrence(instant).getNameKey();
",0,0,0,2,4,1,6,0,0,6,52,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1187,"            return iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();
",2,1,0,2,4,1,6,0,0,9,73,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1191,"            return iStandardOffset;
",2,0,0,0,0,1,0,0,0,2,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1195,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1199,"            int standardOffset = iStandardOffset;
",4,0,0,0,0,0,0,0,0,4,37,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1200,"            Recurrence startRecurrence = iStartRecurrence;
",4,0,0,0,0,0,0,2,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1201,"            Recurrence endRecurrence = iEndRecurrence;
",4,0,0,0,0,0,0,2,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1206,"                start = startRecurrence.next
",2,0,0,0,0,0,4,0,0,7,28,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1208,"                if (instant > 0 && start < 0) {
",4,3,0,1,3,0,0,0,0,7,31,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1210,"                    start = instant;
",4,0,0,0,0,0,0,0,0,5,16,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1218,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1212,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1214,"                start = instant;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1215,"            } catch (ArithmeticException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1217,"                start = instant;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1221,"                end = endRecurrence.next
",2,0,0,0,0,0,4,0,0,7,24,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1223,"                if (instant > 0 && end < 0) {
",4,3,0,1,3,0,0,0,0,7,29,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1225,"                    end = instant;
",4,0,0,0,0,0,0,0,0,5,14,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1233,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1227,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1229,"                end = instant;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1230,"            } catch (ArithmeticException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1232,"                end = instant;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1235,"            return (start > end) ? end : start;
",8,1,0,1,2,1,0,0,0,9,35,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1241,"            instant++;
",2,0,0,0,0,0,0,0,0,3,10,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1243,"            int standardOffset = iStandardOffset;
",4,0,0,0,0,0,0,0,0,4,37,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1244,"            Recurrence startRecurrence = iStartRecurrence;
",4,0,0,0,0,0,0,2,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1245,"            Recurrence endRecurrence = iEndRecurrence;
",4,0,0,0,0,0,0,2,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1250,"                start = startRecurrence.previous
",2,0,0,0,0,0,4,0,0,7,32,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1252,"                if (instant < 0 && start > 0) {
",4,3,0,1,3,0,0,0,0,7,31,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1254,"                    start = instant;
",4,0,0,0,0,0,0,0,0,5,16,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1262,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1256,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1258,"                start = instant;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1259,"            } catch (ArithmeticException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1261,"                start = instant;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1265,"                end = endRecurrence.previous
",2,0,0,0,0,0,4,0,0,7,28,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1267,"                if (instant < 0 && end > 0) {
",4,3,0,1,3,0,0,0,0,7,29,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1269,"                    end = instant;
",4,0,0,0,0,0,0,0,0,5,14,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1277,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1271,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1273,"                end = instant;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1274,"            } catch (ArithmeticException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1276,"                end = instant;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1279,"            return ((start > end) ? start : end) - 1;
",8,2,0,2,4,1,0,0,0,10,41,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1283,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1284,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1286,"            if (obj instanceof DSTZone) {
",2,0,0,1,3,0,0,2,0,4,29,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1287,"                DSTZone other = (DSTZone)obj;
",4,0,0,1,2,0,0,4,0,8,29,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1288,"                return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1294,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1298,"            writeMillis(out, iStandardOffset);
",0,0,0,1,2,0,6,0,0,6,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1299,"            iStartRecurrence.writeTo(out);
",0,0,0,1,2,0,6,0,0,6,30,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1300,"            iEndRecurrence.writeTo(out);
",0,0,0,1,2,0,6,0,0,6,28,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1301,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1304,"            int standardOffset = iStandardOffset;
",4,0,0,0,0,0,0,0,0,4,37,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1305,"            Recurrence startRecurrence = iStartRecurrence;
",4,0,0,0,0,0,0,2,0,6,46,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1306,"            Recurrence endRecurrence = iEndRecurrence;
",4,0,0,0,0,0,0,2,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1311,"                start = startRecurrence.next
",2,0,0,0,0,0,4,0,0,7,28,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1319,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1313,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1315,"                start = instant;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1316,"            } catch (ArithmeticException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1318,"                start = instant;
",4,0,0,0,0,0,0,0,0,5,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1322,"                end = endRecurrence.next
",2,0,0,0,0,0,4,0,0,7,24,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1330,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1324,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1326,"                end = instant;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1327,"            } catch (ArithmeticException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1329,"                end = instant;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1332,"            return (start > end) ? startRecurrence : endRecurrence;
",8,1,0,1,2,1,0,0,0,9,55,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,883,"        Transition(long millis, Transition tr) {
",6,0,0,1,3,0,0,2,0,8,40,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,884,"            iMillis = millis;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,885,"            iNameKey = tr.iNameKey;
",6,0,0,0,0,0,0,0,0,7,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,886,"            iWallOffset = tr.iWallOffset;
",6,0,0,0,0,0,0,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,887,"            iStandardOffset = tr.iStandardOffset;
",6,0,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,888,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,890,"        Transition(long millis, Rule rule, int standardOffset) {
",8,0,0,1,3,0,0,2,0,10,56,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,891,"            iMillis = millis;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,892,"            iNameKey = rule.getNameKey();
",2,0,0,1,2,0,4,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,893,"            iWallOffset = standardOffset + rule.getSaveMillis();
",4,1,0,1,2,0,4,0,0,10,52,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,894,"            iStandardOffset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,33,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,895,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,898,"                   int wallOffset, int standardOffset) {
",4,0,0,0,2,0,0,0,0,4,37,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,899,"            iMillis = millis;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,900,"            iNameKey = nameKey;
",4,0,0,0,0,0,0,0,0,5,19,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,901,"            iWallOffset = wallOffset;
",4,0,0,0,0,0,0,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,902,"            iStandardOffset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,33,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,903,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,906,"            return iMillis;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,910,"            return iNameKey;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,914,"            return iWallOffset;
",2,0,0,0,0,1,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,918,"            return iStandardOffset;
",2,0,0,0,0,1,0,0,0,2,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,922,"            return iWallOffset - iStandardOffset;
",4,1,0,0,0,1,0,0,0,5,37,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,929,"            if (other == null) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,930,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,932,"            return iMillis > other.iMillis &&
",6,2,0,0,0,1,0,0,0,8,33,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,816,"        Rule(Recurrence recurrence, int fromYear, int toYear) {
",8,0,0,1,3,0,0,2,0,10,55,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,817,"            iRecurrence = recurrence;
",4,0,0,0,0,0,0,0,0,5,25,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,818,"            iFromYear = fromYear;
",4,0,0,0,0,0,0,0,0,5,21,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,819,"            iToYear = toYear;
",4,0,0,0,0,0,0,0,0,5,17,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,820,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,823,"            return iFromYear;
",2,0,0,0,0,1,0,0,0,2,17,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,827,"            return iToYear;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,831,"            return iRecurrence.getOfYear();
",0,0,0,1,2,1,4,0,0,4,31,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,835,"            return iRecurrence.getNameKey();
",0,0,0,1,2,1,4,0,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,839,"            return iRecurrence.getSaveMillis();
",0,0,0,1,2,1,4,0,0,4,35,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,843,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,845,"            final int wallOffset = standardOffset + saveMillis;
",6,1,0,0,0,1,0,0,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,846,"            long testInstant = instant;
",4,0,0,0,0,0,0,0,0,4,27,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,849,"            if (instant == Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,32,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,850,"                year = Integer.MIN_VALUE;
",6,0,0,0,0,0,0,0,0,7,25,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,852,"                year = chrono.year().get(instant + wallOffset);
",6,1,0,2,4,0,6,0,0,14,47,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,855,"            if (year < iFromYear) {
",4,1,0,1,3,0,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,857,"                testInstant = chrono.year().set(0, iFromYear) - wallOffset;
",4,1,0,2,4,0,8,0,0,14,59,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,860,"                testInstant -= 1;
",2,0,0,0,0,0,0,0,0,3,17,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,863,"            long next = iRecurrence.next(testInstant, standardOffset, saveMillis);
",2,0,0,1,2,0,10,0,0,12,70,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,865,"            if (next > instant) {
",4,1,0,1,3,0,0,0,0,5,21,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,866,"                year = chrono.year().get(next + wallOffset);
",6,1,0,2,4,0,6,0,0,14,44,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,867,"                if (year > iToYear) {
",4,1,0,1,3,0,0,0,0,5,21,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,869,"                    next = instant;
",4,0,0,0,0,0,0,0,0,5,15,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,873,"            return next;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,506,"                throw new IllegalArgumentException(""Unknown mode: "" + mode);
",2,1,0,1,2,0,0,2,0,6,60,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,522,"            if (iMode == 'w') {
",2,1,0,1,3,0,0,0,0,4,19,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,523,"                offset = standardOffset + saveMillis;
",6,1,0,0,0,0,0,0,0,8,37,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,524,"            } else if (iMode == 's') {
",2,1,0,1,4,0,0,0,0,4,26,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,525,"                offset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,24,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,527,"                offset = 0;
",2,0,0,0,0,0,0,0,0,3,11,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,530,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,531,"            long millis = chrono.year().set(0, year);
",2,0,0,2,4,0,8,0,0,10,41,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,532,"            millis = chrono.monthOfYear().set(millis, iMonthOfYear);
",2,0,0,2,4,0,10,0,0,13,56,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,533,"            millis = chrono.millisOfDay().set(millis, iMillisOfDay);
",2,0,0,2,4,0,10,0,0,13,56,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,534,"            millis = setDayOfMonth(chrono, millis);
",2,0,0,1,2,0,6,0,0,9,39,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,536,"            if (iDayOfWeek != 0) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,537,"                millis = setDayOfWeek(chrono, millis);
",2,0,0,1,2,0,6,0,0,9,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,541,"            return millis - offset;
",4,1,0,0,0,1,0,0,0,5,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,549,"            if (iMode == 'w') {
",2,1,0,1,3,0,0,0,0,4,19,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,550,"                offset = standardOffset + saveMillis;
",6,1,0,0,0,0,0,0,0,8,37,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,551,"            } else if (iMode == 's') {
",2,1,0,1,4,0,0,0,0,4,26,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,552,"                offset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,24,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,554,"                offset = 0;
",2,0,0,0,0,0,0,0,0,3,11,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,558,"            instant += offset;
",4,0,0,0,0,0,0,0,0,5,18,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,560,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,561,"            long next = chrono.monthOfYear().set(instant, iMonthOfYear);
",2,0,0,2,4,0,10,0,0,12,60,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,563,"            next = chrono.millisOfDay().set(next, 0);
",2,0,0,2,4,0,8,0,0,11,41,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,564,"            next = chrono.millisOfDay().add(next, iMillisOfDay);
",2,0,0,2,4,0,10,0,0,13,52,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,565,"            next = setDayOfMonthNext(chrono, next);
",2,0,0,1,2,0,6,0,0,9,39,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,567,"            if (iDayOfWeek == 0) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,568,"                if (next <= instant) {
",4,1,0,1,3,0,0,0,0,5,22,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,569,"                    next = chrono.year().add(next, 1);
",2,0,0,2,4,0,8,0,0,11,34,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,570,"                    next = setDayOfMonthNext(chrono, next);
",2,0,0,1,2,0,6,0,0,9,39,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,573,"                next = setDayOfWeek(chrono, next);
",2,0,0,1,2,0,6,0,0,9,34,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,574,"                if (next <= instant) {
",4,1,0,1,3,0,0,0,0,5,22,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,575,"                    next = chrono.year().add(next, 1);
",2,0,0,2,4,0,8,0,0,11,34,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,576,"                    next = chrono.monthOfYear().set(next, iMonthOfYear);
",2,0,0,2,4,0,10,0,0,13,52,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,577,"                    next = setDayOfMonthNext(chrono, next);
",2,0,0,1,2,0,6,0,0,9,39,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,578,"                    next = setDayOfWeek(chrono, next);
",2,0,0,1,2,0,6,0,0,9,34,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,583,"            return next - offset;
",4,1,0,0,0,1,0,0,0,5,21,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,591,"            if (iMode == 'w') {
",2,1,0,1,3,0,0,0,0,4,19,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,592,"                offset = standardOffset + saveMillis;
",6,1,0,0,0,0,0,0,0,8,37,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,593,"            } else if (iMode == 's') {
",2,1,0,1,4,0,0,0,0,4,26,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,594,"                offset = standardOffset;
",4,0,0,0,0,0,0,0,0,5,24,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,596,"                offset = 0;
",2,0,0,0,0,0,0,0,0,3,11,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,600,"            instant += offset;
",4,0,0,0,0,0,0,0,0,5,18,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,602,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,603,"            long prev = chrono.monthOfYear().set(instant, iMonthOfYear);
",2,0,0,2,4,0,10,0,0,12,60,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,605,"            prev = chrono.millisOfDay().set(prev, 0);
",2,0,0,2,4,0,8,0,0,11,41,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,606,"            prev = chrono.millisOfDay().add(prev, iMillisOfDay);
",2,0,0,2,4,0,10,0,0,13,52,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,607,"            prev = setDayOfMonthPrevious(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,43,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,609,"            if (iDayOfWeek == 0) {
",2,1,0,1,3,0,0,0,0,3,22,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,610,"                if (prev >= instant) {
",4,1,0,1,3,0,0,0,0,5,22,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,611,"                    prev = chrono.year().add(prev, -1);
",2,0,0,2,4,0,8,0,0,12,35,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,612,"                    prev = setDayOfMonthPrevious(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,43,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,615,"                prev = setDayOfWeek(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,34,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,616,"                if (prev >= instant) {
",4,1,0,1,3,0,0,0,0,5,22,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,617,"                    prev = chrono.year().add(prev, -1);
",2,0,0,2,4,0,8,0,0,12,35,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,618,"                    prev = chrono.monthOfYear().set(prev, iMonthOfYear);
",2,0,0,2,4,0,10,0,0,13,52,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,619,"                    prev = setDayOfMonthPrevious(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,43,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,620,"                    prev = setDayOfWeek(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,34,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,625,"            return prev - offset;
",4,1,0,0,0,1,0,0,0,5,21,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,629,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,630,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,632,"            if (obj instanceof OfYear) {
",2,0,0,1,3,0,0,2,0,4,28,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,633,"                OfYear other = (OfYear)obj;
",4,0,0,1,2,0,0,4,0,8,27,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,634,"                return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,642,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,659,"            out.writeByte(iMode);
",0,0,0,1,2,0,6,0,0,6,21,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,660,"            out.writeByte(iMonthOfYear);
",0,0,0,1,2,0,6,0,0,6,28,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,661,"            out.writeByte(iDayOfMonth);
",0,0,0,1,2,0,6,0,0,6,27,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,662,"            out.writeByte(iDayOfWeek);
",0,0,0,1,2,0,6,0,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,663,"            out.writeBoolean(iAdvance);
",0,0,0,1,2,0,6,0,0,6,27,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,664,"            writeMillis(out, iMillisOfDay);
",0,0,0,1,2,0,6,0,0,6,31,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,665,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,672,"                next = setDayOfMonth(chrono, next);
",2,0,0,1,2,0,6,0,0,9,35,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,682,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,673,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,674,"                if (iMonthOfYear == 2 && iDayOfMonth == 29) {
",4,3,0,1,3,0,0,0,0,7,45,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,675,"                    while (chrono.year().isLeap(next) == false) {
",0,1,0,3,7,0,8,0,0,10,45,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,676,"                        next = chrono.year().add(next, 1);
",2,0,0,2,4,0,8,0,0,11,34,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,678,"                    next = setDayOfMonth(chrono, next);
",2,0,0,1,2,0,6,0,0,9,35,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,680,"                    throw e;
",2,0,0,0,0,0,0,0,0,2,8,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,683,"            return next;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,691,"                prev = setDayOfMonth(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,35,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,701,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,692,"            } catch (IllegalArgumentException e) {
",2,0,0,1,4,0,0,2,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,693,"                if (iMonthOfYear == 2 && iDayOfMonth == 29) {
",4,3,0,1,3,0,0,0,0,7,45,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,694,"                    while (chrono.year().isLeap(prev) == false) {
",0,1,0,3,7,0,8,0,0,10,45,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,695,"                        prev = chrono.year().add(prev, -1);
",2,0,0,2,4,0,8,0,0,12,35,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,697,"                    prev = setDayOfMonth(chrono, prev);
",2,0,0,1,2,0,6,0,0,9,35,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,699,"                    throw e;
",2,0,0,0,0,0,0,0,0,2,8,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,702,"            return prev;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,706,"            if (iDayOfMonth >= 0) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,707,"                instant = chrono.dayOfMonth().set(instant, iDayOfMonth);
",2,0,0,2,4,0,10,0,0,13,56,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,709,"                instant = chrono.dayOfMonth().set(instant, 1);
",2,0,0,2,4,0,8,0,0,11,46,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,710,"                instant = chrono.monthOfYear().add(instant, 1);
",2,0,0,2,4,0,8,0,0,11,47,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,711,"                instant = chrono.dayOfMonth().add(instant, iDayOfMonth);
",2,0,0,2,4,0,10,0,0,13,56,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,713,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,717,"            int dayOfWeek = chrono.dayOfWeek().get(instant);
",2,0,0,2,4,0,8,0,0,10,48,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,718,"            int daysToAdd = iDayOfWeek - dayOfWeek;
",6,1,0,0,0,0,0,0,0,7,39,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,719,"            if (daysToAdd != 0) {
",2,1,0,1,3,0,0,0,0,3,21,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,720,"                if (iAdvance) {
",2,0,0,1,3,0,0,0,0,2,15,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,721,"                    if (daysToAdd < 0) {
",2,1,0,1,3,0,0,0,0,3,20,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,722,"                        daysToAdd += 7;
",2,0,0,0,0,0,0,0,0,3,15,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,725,"                    if (daysToAdd > 0) {
",2,1,0,1,3,0,0,0,0,3,20,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,726,"                        daysToAdd -= 7;
",2,0,0,0,0,0,0,0,0,3,15,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,729,"                instant = chrono.dayOfWeek().add(instant, daysToAdd);
",2,0,0,2,4,0,10,0,0,13,53,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,731,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,14,43,"        String[] nameSet = getNameSet(locale, id, nameKey);
",2,0,0,2,4,0,8,2,0,12,51,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,14,44,"        return nameSet == null ? null : nameSet[0];
",2,1,1,1,2,1,0,0,0,5,43,5,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,14,48,"        String[] nameSet = getNameSet(locale, id, nameKey);
",2,0,0,2,4,0,8,2,0,12,51,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,14,49,"        return nameSet == null ? null : nameSet[1];
",2,1,1,1,2,1,0,0,0,5,43,5,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,14,53,"        if (locale == null || id == null || nameKey == null) {
",6,5,0,1,3,0,0,0,0,11,54,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,14,54,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,14,57,"        Map<String, Map<String, Object>> byIdCache = iByLocaleCache.get(locale);
",2,0,0,1,2,0,6,10,0,18,72,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,14,58,"        if (byIdCache == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,14,59,"            iByLocaleCache.put(locale, byIdCache = createCache());
",2,0,0,2,4,0,8,0,0,11,54,7,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,14,62,"        Map<String, Object> byNameKeyCache = byIdCache.get(id);
",2,0,0,1,2,0,6,6,0,14,55,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,14,63,"        if (byNameKeyCache == null) {
",2,1,0,1,3,0,0,0,0,3,29,4,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,14,64,"            byIdCache.put(id, byNameKeyCache = createCache());
",2,0,0,2,4,0,8,0,0,11,50,7,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,14,66,"            String[][] zoneStringsEn = DateTimeUtils.getDateFormatSymbols(Locale.ENGLISH).getZoneStrings();
",6,0,0,4,8,0,6,2,0,14,95,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,14,67,"            String[] setEn = null;
",2,0,0,1,2,0,0,2,0,4,22,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,14,68,"            for (String[] strings : zoneStringsEn) {
",4,0,0,2,5,0,0,2,0,6,40,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,14,69,"              if (strings != null && strings.length == 5 && id.equals(strings[0])) {
",6,4,1,3,7,0,4,0,0,16,70,8,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,14,70,"                setEn = strings;
",4,0,0,0,0,0,0,0,0,5,16,10,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,14,71,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,14,74,"            String[][] zoneStringsLoc = DateTimeUtils.getDateFormatSymbols(locale).getZoneStrings();
",2,0,0,4,8,0,8,2,0,12,88,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,14,75,"            String[] setLoc = null;
",2,0,0,1,2,0,0,2,0,4,23,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,14,76,"            for (String[] strings : zoneStringsLoc) {
",4,0,0,2,5,0,0,2,0,6,41,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,14,77,"              if (strings != null && strings.length == 5 && id.equals(strings[0])) {
",6,4,1,3,7,0,4,0,0,16,70,8,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,14,78,"                setLoc = strings;
",4,0,0,0,0,0,0,0,0,5,17,10,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,14,79,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,14,83,"            if (setEn != null && setLoc != null) {
",4,3,0,1,3,0,0,0,0,7,38,6,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,14,84,"              byNameKeyCache.put(setEn[2], new String[] {setLoc[2], setLoc[1]});
",0,0,1,6,12,0,4,2,0,12,66,9,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,14,88,"              if (setEn[2].equals(setEn[4])) {
",0,0,1,4,9,0,2,0,0,6,32,9,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,14,89,"                  byNameKeyCache.put(setEn[4] + ""-Summer"", new String[] {setLoc[4], setLoc[3]});
",0,1,1,6,12,0,4,2,0,14,78,11,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,14,91,"                  byNameKeyCache.put(setEn[4], new String[] {setLoc[4], setLoc[3]});
",0,0,1,6,12,0,4,2,0,12,66,11,0.00000,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,14,95,"        return (String[]) byNameKeyCache.get(nameKey);
",0,0,0,3,6,1,6,2,0,8,46,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,40,"        } catch (SecurityException e) {
",2,0,0,1,4,0,0,2,0,4,31,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,41,"            i = null;
",2,0,0,0,0,0,0,0,0,3,9,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,50,"            cacheSize = i.intValue();
",2,0,0,1,2,0,4,0,0,7,25,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,52,"            cacheSize--;
",2,0,0,0,0,0,0,0,0,3,12,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,53,"            int shift = 0;
",2,0,0,0,0,0,0,0,0,2,14,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,54,"            while (cacheSize > 0) {
",2,1,0,1,3,0,0,0,0,3,23,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,55,"                shift++;
",2,0,0,0,0,0,0,0,0,3,8,8,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,56,"                cacheSize >>= 1;
",2,0,0,0,0,0,0,0,0,3,16,8,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,58,"            cacheSize = 1 << shift;
",4,1,0,0,0,0,0,0,0,6,23,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,69,"            return (CachedDateTimeZone)zone;
",2,0,0,1,2,1,0,2,0,4,32,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,95,"        return iZone;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,99,"        return getInfo(instant).getNameKey(instant);
",0,0,0,2,4,1,8,0,0,8,44,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,107,"        return getInfo(instant).getStandardOffset(instant);
",0,0,0,2,4,1,8,0,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,111,"        return iZone.isFixed();
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,115,"        return iZone.nextTransition(instant);
",0,0,0,1,2,1,6,0,0,6,37,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,119,"        return iZone.previousTransition(instant);
",0,0,0,1,2,1,6,0,0,6,41,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,127,"        if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,128,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,130,"        if (obj instanceof CachedDateTimeZone) {
",2,0,0,1,3,0,0,2,0,4,40,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,131,"            return iZone.equals(((CachedDateTimeZone)obj).iZone);
",4,0,0,3,6,1,4,2,0,10,53,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,133,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,162,"            periodStart = next;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,163,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));
",10,0,0,2,4,0,0,2,0,14,57,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,164,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/JodaTimePermission,14,57,"        super(name);
",2,0,0,1,2,0,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/JodaTimePermission,14,58,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,14,45,"        return iNameKey;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,14,49,"        return iWallOffset;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,14,53,"        return iStandardOffset;
",2,0,0,0,0,1,0,0,0,2,23,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,14,57,"        return iWallOffset;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,14,61,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,14,65,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,14,69,"        return instant;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,14,77,"        String id = getID();
",2,0,0,1,2,0,2,2,0,6,20,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,14,78,"        if (id.length() == 6 && (id.startsWith(""+"") || id.startsWith(""-""))) {
",0,3,0,5,11,0,12,0,0,17,69,4,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,14,81,"            return java.util.TimeZone.getTimeZone(""GMT"" + getID());
",6,1,0,2,4,1,4,0,0,12,55,7,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,14,84,"        return new java.util.SimpleTimeZone(iWallOffset, getID());
",8,0,0,2,4,1,2,0,0,10,58,5,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,14,91,"        if (obj instanceof FixedDateTimeZone) {
",2,0,0,1,3,0,0,2,0,4,39,5,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,14,92,"            FixedDateTimeZone other = (FixedDateTimeZone) obj;
",4,0,0,1,2,0,0,4,0,8,50,6,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,14,93,"            return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,14,98,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,604,"        Chronology chrono = new BaseChronology() {
",2,0,0,1,3,0,0,4,0,6,42,4,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,606,"                return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,609,"                return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,612,"                return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DateTimeZone,14,615,"                return getClass().getName();
",0,0,0,2,4,1,4,0,0,4,28,11,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,186,"            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {
",8,3,0,1,3,0,0,0,0,11,59,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,187,"                if (iNameKey == null) {
",2,1,0,1,3,0,0,0,0,3,23,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,188,"                    iNameKey = iZoneRef.getNameKey(iPeriodStart);
",2,0,0,1,2,0,6,0,0,9,45,9,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,190,"                return iNameKey;
",2,0,0,0,0,1,0,0,0,2,16,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,192,"            return iNextInfo.getNameKey(millis);
",0,0,0,1,2,1,6,0,0,6,36,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,202,"            return iNextInfo.getOffset(millis);
",0,0,0,1,2,1,6,0,0,6,35,6,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,206,"            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {
",8,3,0,1,3,0,0,0,0,11,59,5,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,207,"                if (iStandardOffset == Integer.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,43,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,208,"                    iStandardOffset = iZoneRef.getStandardOffset(iPeriodStart);
",2,0,0,1,2,0,6,0,0,9,59,9,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,210,"                return iStandardOffset;
",2,0,0,0,0,1,0,0,0,2,23,7,0.00000,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,14,212,"            return iNextInfo.getStandardOffset(millis);
",0,0,0,1,2,1,6,0,0,6,43,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,225,"    public DateTimeZoneBuilder() {
",2,0,0,1,3,1,0,0,0,3,30,2,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,226,"        iRuleSets = new ArrayList<RuleSet>(10);
",2,0,0,1,2,0,0,4,0,7,39,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,227,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,96,"            return readFrom((DataInput)in, id);
",2,0,0,2,4,1,4,2,0,8,35,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,112,"            DateTimeZone fixed = new FixedDateTimeZone
",2,0,0,0,0,0,0,4,0,6,42,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,114,"            if (fixed.equals(DateTimeZone.UTC)) {
",4,0,0,2,5,0,4,0,0,8,37,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,115,"                fixed = DateTimeZone.UTC;
",6,0,0,0,0,0,0,0,0,7,25,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,117,"            return fixed;
",2,0,0,0,0,1,0,0,0,2,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,121,"            return PrecalculatedZone.readFrom(in, id);
",0,0,0,1,2,1,8,0,0,8,42,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,123,"            throw new IOException(""Invalid encoding"");
",0,0,0,1,2,0,0,2,0,3,42,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,140,"        if (millis % (30 * 60000L) == 0) {
",2,3,0,2,5,0,0,0,0,5,34,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,142,"            long units = millis / (30 * 60000L);
",4,2,0,1,2,0,0,0,0,6,36,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,143,"            if (((units << (64 - 6)) >> (64 - 6)) == units) {
",4,5,0,5,11,0,0,0,0,9,49,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,145,"                out.writeByte((int)(units & 0x3f));
",2,1,0,3,6,0,4,0,0,7,35,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,146,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,150,"        if (millis % 60000L == 0) {
",2,2,0,1,3,0,0,0,0,4,27,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,152,"            long minutes = millis / 60000L;
",4,1,0,0,0,0,0,0,0,5,31,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,153,"            if (((minutes << (64 - 30)) >> (64 - 30)) == minutes) {
",4,5,0,5,11,0,0,0,0,9,55,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,155,"                out.writeInt(0x40000000 | (int)(minutes & 0x3fffffff));
",2,2,0,3,6,0,4,0,0,8,55,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,156,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,160,"        if (millis % 1000L == 0) {
",2,2,0,1,3,0,0,0,0,4,26,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,162,"            long seconds = millis / 1000L;
",4,1,0,0,0,0,0,0,0,5,30,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,163,"            if (((seconds << (64 - 38)) >> (64 - 38)) == seconds) {
",4,5,0,5,11,0,0,0,0,9,55,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,165,"                out.writeByte(0x80 | (int)((seconds >> 32) & 0x3f));
",2,3,0,4,8,0,4,0,0,9,52,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,166,"                out.writeInt((int)(seconds & 0xffffffff));
",2,1,0,3,6,0,4,0,0,7,42,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,167,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,175,"        out.writeByte(millis < 0 ? 0xff : 0xc0);
",2,1,0,1,2,0,4,0,0,7,40,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,176,"        out.writeLong(millis);
",0,0,0,1,2,0,6,0,0,6,22,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,177,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,215,"        if (""UTC"".equals(id) && id.equals(nameKey) &&
",0,2,0,2,5,0,10,0,0,13,45,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,217,"            return DateTimeZone.UTC;
",4,0,0,0,0,1,0,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,219,"        return new FixedDateTimeZone(id, nameKey, wallOffset, standardOffset);
",8,0,0,1,2,1,0,2,0,10,70,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,252,"        if (iRuleSets.size() > 0) {
",0,1,0,2,5,0,4,0,0,5,27,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,253,"            OfYear ofYear = new OfYear
",2,0,0,0,0,0,0,4,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,255,"            RuleSet lastRuleSet = iRuleSets.get(iRuleSets.size() - 1);
",2,1,0,2,4,0,8,2,0,13,58,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,256,"            lastRuleSet.setUpperLimit(year, ofYear);
",0,0,0,1,2,0,8,0,0,8,40,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,258,"        iRuleSets.add(new RuleSet());
",0,0,0,2,4,0,4,2,0,6,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,259,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,268,"        getLastRuleSet().setStandardOffset(standardOffset);
",0,0,0,2,4,0,6,0,0,6,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,269,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,276,"        getLastRuleSet().setFixedSavings(nameKey, saveMillis);
",0,0,0,2,4,0,8,0,0,8,54,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,277,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,309,"        if (fromYear <= toYear) {
",4,1,0,1,3,0,0,0,0,5,25,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,310,"            OfYear ofYear = new OfYear
",2,0,0,0,0,0,0,4,0,6,26,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,312,"            Recurrence recurrence = new Recurrence(ofYear, nameKey, saveMillis);
",8,0,0,1,2,0,0,4,0,12,68,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,313,"            Rule rule = new Rule(recurrence, fromYear, toYear);
",8,0,0,1,2,0,0,4,0,12,51,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,314,"            getLastRuleSet().addRule(rule);
",0,0,0,2,4,0,6,0,0,6,31,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,316,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,320,"        if (iRuleSets.size() == 0) {
",0,1,0,2,5,0,4,0,0,5,28,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,321,"            addCutover(Integer.MIN_VALUE, 'w', 1, 1, 0, false, 0);
",4,0,0,1,2,0,2,0,0,8,54,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,323,"        return iRuleSets.get(iRuleSets.size() - 1);
",0,1,0,2,4,1,8,0,0,9,43,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,333,"        if (id == null) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,334,"            throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,339,"        ArrayList<Transition> transitions = new ArrayList<Transition>();
",2,0,0,1,2,0,0,8,0,10,64,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,343,"        DSTZone tailZone = null;
",2,0,0,0,0,0,0,2,0,4,24,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,345,"        long millis = Long.MIN_VALUE;
",6,0,0,0,0,0,0,0,0,6,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,346,"        int saveMillis = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,348,"        int ruleSetCount = iRuleSets.size();
",2,0,0,1,2,0,4,0,0,6,36,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,349,"        for (int i=0; i<ruleSetCount; i++) {
",8,1,0,1,3,0,0,0,0,10,36,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,350,"            RuleSet rs = iRuleSets.get(i);
",2,0,0,1,2,0,6,2,0,10,30,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,351,"            Transition next = rs.firstTransition(millis);
",2,0,0,1,2,0,6,2,0,10,45,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,352,"            if (next == null) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,353,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,355,"            addTransition(transitions, next);
",0,0,0,1,2,0,6,0,0,6,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,356,"            millis = next.getMillis();
",2,0,0,1,2,0,4,0,0,7,26,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,357,"            saveMillis = next.getSaveMillis();
",2,0,0,1,2,0,4,0,0,7,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,360,"            rs = new RuleSet(rs);
",4,0,0,1,2,0,0,2,0,7,21,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,362,"            while ((next = rs.nextTransition(millis, saveMillis)) != null) {
",2,1,0,3,7,0,8,0,0,12,64,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,363,"                if (addTransition(transitions, next)) {
",0,0,0,2,5,0,6,0,0,6,39,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,364,"                    if (tailZone != null) {
",2,1,0,1,3,0,0,0,0,3,23,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,366,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,369,"                millis = next.getMillis();
",2,0,0,1,2,0,4,0,0,7,26,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,370,"                saveMillis = next.getSaveMillis();
",2,0,0,1,2,0,4,0,0,7,34,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,371,"                if (tailZone == null && i == ruleSetCount - 1) {
",6,4,0,1,3,0,0,0,0,10,48,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,372,"                    tailZone = rs.buildTailZone(id);
",2,0,0,1,2,0,6,0,0,9,32,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,379,"            millis = rs.getUpperLimit(saveMillis);
",2,0,0,1,2,0,6,0,0,9,38,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,383,"        if (transitions.size() == 0) {
",0,1,0,2,5,0,4,0,0,5,30,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,384,"            if (tailZone != null) {
",2,1,0,1,3,0,0,0,0,3,23,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,386,"                return tailZone;
",2,0,0,0,0,1,0,0,0,2,16,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,388,"            return buildFixedZone(id, ""UTC"", 0, 0);
",0,0,0,1,2,1,4,0,0,5,39,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,390,"        if (transitions.size() == 1 && tailZone == null) {
",2,3,0,2,5,0,4,0,0,9,50,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,391,"            Transition tr = transitions.get(0);
",2,0,0,1,2,0,4,2,0,8,35,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,392,"            return buildFixedZone(id, tr.getNameKey(),
",0,0,0,1,3,1,8,0,0,8,42,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,396,"        PrecalculatedZone zone = PrecalculatedZone.create(id, outputID, transitions, tailZone);
",2,0,0,1,2,0,12,2,0,16,87,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,397,"        if (zone.isCachable()) {
",0,0,0,2,5,0,4,0,0,4,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,398,"            return CachedDateTimeZone.forZone(zone);
",0,0,0,1,2,1,6,0,0,6,40,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,400,"        return zone;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,404,"        int size = transitions.size();
",2,0,0,1,2,0,4,0,0,6,30,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,405,"        if (size == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,406,"            transitions.add(tr);
",0,0,0,1,2,0,6,0,0,6,20,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,407,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,410,"        Transition last = transitions.get(size - 1);
",4,1,0,1,2,0,4,2,0,11,44,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,411,"        if (!tr.isTransitionFrom(last)) {
",0,0,0,2,5,0,6,0,0,7,33,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,412,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,417,"        int offsetForLast = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,418,"        if (size >= 2) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,419,"            offsetForLast = transitions.get(size - 2).getWallOffset();
",4,1,0,2,4,0,6,0,0,12,58,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,421,"        int offsetForNew = last.getWallOffset();
",2,0,0,1,2,0,4,0,0,6,40,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,423,"        long lastLocal = last.getMillis() + offsetForLast;
",4,1,0,1,2,0,4,0,0,9,50,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,424,"        long newLocal = tr.getMillis() + offsetForNew;
",4,1,0,1,2,0,4,0,0,9,46,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,426,"        if (newLocal != lastLocal) {
",4,1,0,1,3,0,0,0,0,5,28,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,427,"            transitions.add(tr);
",0,0,0,1,2,0,6,0,0,6,20,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,428,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,431,"        transitions.remove(size - 1);
",2,1,0,1,2,0,4,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,432,"        return addTransition(transitions, tr);
",0,0,0,1,2,1,6,0,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,443,"        if (out instanceof DataOutput) {
",2,0,0,1,3,0,0,2,0,4,32,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,444,"            writeTo(zoneID, (DataOutput)out);
",2,0,0,2,4,0,4,2,0,8,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,446,"            writeTo(zoneID, (DataOutput)new DataOutputStream(out));
",2,0,0,3,6,0,4,4,0,10,55,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,448,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,459,"        DateTimeZone zone = toDateTimeZone(zoneID, false);
",2,0,0,1,2,0,4,2,0,9,50,4,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,461,"        if (zone instanceof FixedDateTimeZone) {
",2,0,0,1,3,0,0,2,0,4,40,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,462,"            out.writeByte('F'); // 'F' for fixed
",0,0,0,1,2,0,4,0,0,5,36,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,463,"            out.writeUTF(zone.getNameKey(0));
",0,0,0,2,4,0,8,0,0,8,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,464,"            writeMillis(out, zone.getOffset(0));
",0,0,0,2,4,0,8,0,0,8,36,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,465,"            writeMillis(out, zone.getStandardOffset(0));
",0,0,0,2,4,0,8,0,0,8,44,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,467,"            if (zone instanceof CachedDateTimeZone) {
",2,0,0,1,3,0,0,2,0,4,41,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,468,"                out.writeByte('C'); // 'C' for cached, precalculated
",0,0,0,1,2,0,4,0,0,5,52,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,469,"                zone = ((CachedDateTimeZone)zone).getUncachedZone();
",4,0,0,3,6,0,2,2,0,9,52,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,471,"                out.writeByte('P'); // 'P' for precalculated, uncached
",0,0,0,1,2,0,4,0,0,5,54,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,473,"            ((PrecalculatedZone)zone).writeTo(out);
",2,0,0,3,6,0,4,2,0,8,39,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,475,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1362,"                        index = in.readUnsignedShort();
",2,0,0,1,2,0,4,0,0,7,31,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1365,"                } catch (ArrayIndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,44,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1366,"                    throw new IOException(""Invalid encoding"");
",0,0,0,1,2,0,0,2,0,3,42,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1389,"            int size = transitions.size();
",2,0,0,1,2,0,4,0,0,6,30,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1390,"            if (size == 0) {
",2,1,0,1,3,0,0,0,0,3,16,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1391,"                throw new IllegalArgumentException();
",0,0,0,1,2,0,0,2,0,2,37,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1394,"            long[] trans = new long[size];
",2,0,1,2,4,0,0,0,0,4,30,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1395,"            int[] wallOffsets = new int[size];
",2,0,1,2,4,0,0,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1396,"            int[] standardOffsets = new int[size];
",2,0,1,2,4,0,0,0,0,4,38,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1397,"            String[] nameKeys = new String[size];
",2,0,1,2,4,0,0,4,0,8,37,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1399,"            Transition last = null;
",2,0,0,0,0,0,0,2,0,4,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1400,"            for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1401,"                Transition tr = transitions.get(i);
",2,0,0,1,2,0,6,2,0,10,35,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1403,"                if (!tr.isTransitionFrom(last)) {
",0,0,0,2,5,0,6,0,0,7,33,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1404,"                    throw new IllegalArgumentException(id);
",2,0,0,1,2,0,0,2,0,4,39,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1407,"                trans[i] = tr.getMillis();
",0,0,1,2,4,0,4,0,0,9,26,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1408,"                wallOffsets[i] = tr.getWallOffset();
",0,0,1,2,4,0,4,0,0,9,36,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1409,"                standardOffsets[i] = tr.getStandardOffset();
",0,0,1,2,4,0,4,0,0,9,44,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1410,"                nameKeys[i] = tr.getNameKey();
",0,0,1,2,4,0,4,0,0,9,30,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1412,"                last = tr;
",4,0,0,0,0,0,0,0,0,5,10,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1417,"            String[] zoneNameData = new String[5];
",2,0,0,2,4,0,0,4,0,6,38,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1418,"            String[][] zoneStrings = new DateFormatSymbols(Locale.ENGLISH).getZoneStrings();
",6,0,0,4,8,0,2,4,0,12,80,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1419,"            for (int j = 0; j < zoneStrings.length; j++) {
",10,1,0,1,3,0,0,0,0,12,46,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1420,"                String[] set = zoneStrings[j];
",2,0,1,2,4,0,0,2,0,8,30,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1421,"                if (set != null && set.length == 5 && id.equals(set[0])) {
",6,4,1,3,7,0,4,0,0,16,58,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1422,"                    zoneNameData = set;
",4,0,0,0,0,0,0,0,0,5,19,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1426,"            Chronology chrono = ISOChronology.getInstanceUTC();
",2,0,0,1,2,0,4,2,0,8,51,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1428,"            for (int i = 0; i < nameKeys.length - 1; i++) {
",10,2,0,1,3,0,0,0,0,13,47,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1429,"                String curNameKey = nameKeys[i];
",2,0,1,1,2,0,0,2,0,8,32,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1430,"                String nextNameKey = nameKeys[i + 1];
",4,1,1,1,2,0,0,2,0,9,37,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1431,"                long curOffset = wallOffsets[i];
",2,0,1,1,2,0,0,0,0,6,32,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1432,"                long nextOffset = wallOffsets[i + 1];
",4,1,1,1,2,0,0,0,0,7,37,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1433,"                long curStdOffset = standardOffsets[i];
",2,0,1,1,2,0,0,0,0,6,39,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1434,"                long nextStdOffset = standardOffsets[i + 1];
",4,1,1,1,2,0,0,0,0,7,44,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1435,"                Period p = new Period(trans[i], trans[i + 1], PeriodType.yearMonthDay(), chrono);
",6,1,1,4,8,0,4,4,0,21,81,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1436,"                if (curOffset != nextOffset &&
",4,8,0,0,1,0,0,0,0,12,30,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1443,"                    if (ZoneInfoCompiler.verbose()) {
",0,0,0,2,5,0,4,0,0,4,33,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1444,"                        System.out.println(""Fixing duplicate name key - "" + nextNameKey);
",6,1,0,1,2,0,2,0,0,10,65,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1445,"                        System.out.println(""     - "" + new DateTime(trans[i], chrono) +
",6,1,1,2,5,0,2,2,0,16,63,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1448,"                    if (curOffset > nextOffset) {
",4,1,0,1,3,0,0,0,0,5,29,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1449,"                        nameKeys[i] = (curNameKey + ""-Summer"").intern();
",2,1,1,3,6,0,2,0,0,11,48,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1450,"                    } else if (curOffset < nextOffset) {
",4,1,0,1,4,0,0,0,0,5,36,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1451,"                        nameKeys[i + 1] = (nextNameKey + ""-Summer"").intern();
",4,2,1,3,6,0,2,0,0,12,53,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1452,"                        i++;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1457,"            if (tailZone != null) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1458,"                if (tailZone.iStartRecurrence.getNameKey()
",4,0,0,1,3,0,2,0,0,6,42,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1460,"                    if (ZoneInfoCompiler.verbose()) {
",0,0,0,2,5,0,4,0,0,4,33,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1461,"                        System.out.println(""Fixing duplicate recurrent name key - "" +
",4,1,0,0,1,0,2,0,0,8,61,12,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1464,"                    if (tailZone.iStartRecurrence.getSaveMillis() > 0) {
",4,1,0,2,5,0,2,0,0,7,52,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1465,"                        tailZone = new DSTZone(
",2,0,0,0,1,0,0,2,0,5,23,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1471,"                        tailZone = new DSTZone(
",2,0,0,0,1,0,0,2,0,5,23,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1480,"            return new PrecalculatedZone
",0,0,0,0,0,1,0,2,0,2,28,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1509,"            long[] transitions = iTransitions;
",4,0,0,1,2,0,0,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1510,"            int i = Arrays.binarySearch(transitions, instant);
",2,0,0,1,2,0,8,0,0,10,50,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1511,"            if (i >= 0) {
",2,1,0,1,3,0,0,0,0,3,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1512,"                return iNameKeys[i];
",0,0,1,1,2,1,0,0,0,4,20,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1514,"            i = ~i;
",4,0,0,0,0,0,0,0,0,6,7,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1515,"            if (i < transitions.length) {
",6,1,0,1,3,0,0,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1516,"                if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1517,"                    return iNameKeys[i - 1];
",2,1,1,1,2,1,0,0,0,5,24,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1519,"                return ""UTC"";
",0,0,0,0,0,1,0,0,0,1,13,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1521,"            if (iTailZone == null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1522,"                return iNameKeys[i - 1];
",2,1,1,1,2,1,0,0,0,5,24,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1524,"            return iTailZone.getNameKey(instant);
",0,0,0,1,2,1,6,0,0,6,37,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1531,"                return iWallOffsets[i];
",0,0,1,1,2,1,0,0,0,4,23,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1538,"                return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1543,"            return iTailZone.getOffset(instant);
",0,0,0,1,2,1,6,0,0,6,36,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1547,"            long[] transitions = iTransitions;
",4,0,0,1,2,0,0,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1548,"            int i = Arrays.binarySearch(transitions, instant);
",2,0,0,1,2,0,8,0,0,10,50,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1549,"            if (i >= 0) {
",2,1,0,1,3,0,0,0,0,3,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1550,"                return iStandardOffsets[i];
",0,0,1,1,2,1,0,0,0,4,27,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1552,"            i = ~i;
",4,0,0,0,0,0,0,0,0,6,7,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1553,"            if (i < transitions.length) {
",6,1,0,1,3,0,0,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1554,"                if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1555,"                    return iStandardOffsets[i - 1];
",2,1,1,1,2,1,0,0,0,5,31,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1557,"                return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1559,"            if (iTailZone == null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1560,"                return iStandardOffsets[i - 1];
",2,1,1,1,2,1,0,0,0,5,31,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1562,"            return iTailZone.getStandardOffset(instant);
",0,0,0,1,2,1,6,0,0,6,44,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1566,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1579,"            long end = transitions[transitions.length - 1];
",6,1,1,1,2,0,0,0,0,9,47,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1580,"            if (instant < end) {
",4,1,0,1,3,0,0,0,0,5,20,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1581,"                instant = end;
",4,0,0,0,0,0,0,0,0,5,14,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1583,"            return iTailZone.nextTransition(instant);
",0,0,0,1,2,1,6,0,0,6,41,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1587,"            long[] transitions = iTransitions;
",4,0,0,1,2,0,0,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1588,"            int i = Arrays.binarySearch(transitions, instant);
",2,0,0,1,2,0,8,0,0,10,50,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1589,"            if (i >= 0) {
",2,1,0,1,3,0,0,0,0,3,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1590,"                if (instant > Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,31,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1591,"                    return instant - 1;
",2,1,0,0,0,1,0,0,0,3,19,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1593,"                return instant;
",2,0,0,0,0,1,0,0,0,2,15,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1595,"            i = ~i;
",4,0,0,0,0,0,0,0,0,6,7,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1596,"            if (i < transitions.length) {
",6,1,0,1,3,0,0,0,0,7,29,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1597,"                if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1598,"                    long prev = transitions[i - 1];
",4,1,1,1,2,0,0,0,0,7,31,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1599,"                    if (prev > Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,28,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1600,"                        return prev - 1;
",2,1,0,0,0,1,0,0,0,3,16,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1603,"                return instant;
",2,0,0,0,0,1,0,0,0,2,15,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1605,"            if (iTailZone != null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1606,"                long prev = iTailZone.previousTransition(instant);
",2,0,0,1,2,0,6,0,0,8,50,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1607,"                if (prev < instant) {
",4,1,0,1,3,0,0,0,0,5,21,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1608,"                    return prev;
",2,0,0,0,0,1,0,0,0,2,12,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1611,"            long prev = transitions[i - 1];
",4,1,1,1,2,0,0,0,0,7,31,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1612,"            if (prev > Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,28,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1613,"                return prev - 1;
",2,1,0,0,0,1,0,0,0,3,16,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1615,"            return instant;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1619,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1620,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1622,"            if (obj instanceof PrecalculatedZone) {
",2,0,0,1,3,0,0,2,0,4,39,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1623,"                PrecalculatedZone other = (PrecalculatedZone)obj;
",4,0,0,1,2,0,0,4,0,8,49,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1624,"                return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1634,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1638,"            int size = iTransitions.length;
",6,0,0,0,0,0,0,0,0,6,31,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1641,"            Set<String> poolSet = new HashSet<String>();
",2,0,0,1,2,0,0,8,0,10,44,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1642,"            for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1643,"                poolSet.add(iNameKeys[i]);
",0,0,1,2,4,0,4,0,0,8,26,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1646,"            int poolSize = poolSet.size();
",2,0,0,1,2,0,4,0,0,6,30,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1647,"            if (poolSize > 65535) {
",2,1,0,1,3,0,0,0,0,3,23,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1648,"                throw new UnsupportedOperationException(""String pool is too large"");
",0,0,0,1,2,0,0,2,0,3,68,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1650,"            String[] pool = new String[poolSize];
",2,0,1,2,4,0,0,4,0,8,37,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1651,"            Iterator<String> it = poolSet.iterator();
",2,0,0,1,2,0,4,4,0,10,41,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1652,"            for (int i=0; it.hasNext(); i++) {
",4,0,0,2,5,0,4,0,0,9,34,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1653,"                pool[i] = it.next();
",0,0,1,2,4,0,4,0,0,9,20,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1657,"            out.writeShort(poolSize);
",0,0,0,1,2,0,6,0,0,6,25,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1658,"            for (int i=0; i<poolSize; i++) {
",8,1,0,1,3,0,0,0,0,10,32,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1659,"                out.writeUTF(pool[i]);
",0,0,1,2,4,0,4,0,0,8,22,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1662,"            out.writeInt(size);
",0,0,0,1,2,0,6,0,0,6,19,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1664,"            for (int i=0; i<size; i++) {
",8,1,0,1,3,0,0,0,0,10,28,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1665,"                writeMillis(out, iTransitions[i]);
",0,0,1,2,4,0,4,0,0,8,34,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1666,"                writeMillis(out, iWallOffsets[i]);
",0,0,1,2,4,0,4,0,0,8,34,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1667,"                writeMillis(out, iStandardOffsets[i]);
",0,0,1,2,4,0,4,0,0,8,38,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1670,"                String nameKey = iNameKeys[i];
",2,0,1,1,2,0,0,2,0,8,30,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1671,"                for (int j=0; j<poolSize; j++) {
",8,1,0,1,3,0,0,0,0,10,32,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1672,"                    if (pool[j].equals(nameKey)) {
",0,0,1,3,7,0,4,0,0,8,30,10,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1673,"                        if (poolSize < 256) {
",2,1,0,1,3,0,0,0,0,3,21,11,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1674,"                            out.writeByte(j);
",0,0,0,1,2,0,6,0,0,6,17,14,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1676,"                            out.writeShort(j);
",0,0,0,1,2,0,6,0,0,6,18,14,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1678,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1683,"            out.writeBoolean(iTailZone != null);
",2,1,0,1,2,0,4,0,0,7,36,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1684,"            if (iTailZone != null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1685,"                iTailZone.writeTo(out);
",0,0,0,1,2,0,6,0,0,6,23,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1687,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1690,"            if (iTailZone != null) {
",2,1,0,1,3,0,0,0,0,3,24,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1691,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1693,"            long[] transitions = iTransitions;
",4,0,0,1,2,0,0,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1694,"            if (transitions.length <= 1) {
",4,1,0,1,3,0,0,0,0,5,30,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1695,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1700,"            double distances = 0;
",2,0,0,0,0,0,0,0,0,2,21,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1701,"            int count = 0;
",2,0,0,0,0,0,0,0,0,2,14,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1703,"            for (int i=1; i<transitions.length; i++) {
",10,1,0,1,3,0,0,0,0,12,42,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1704,"                long diff = transitions[i] - transitions[i - 1];
",4,2,1,2,4,0,0,0,0,12,48,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1705,"                if (diff < ((366L + 365) * 24 * 60 * 60 * 1000)) {
",2,3,0,3,7,0,0,0,0,5,50,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1706,"                    distances += (double)diff;
",4,0,0,1,2,0,0,0,0,5,26,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1707,"                    count++;
",2,0,0,0,0,0,0,0,0,3,8,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1711,"            if (count > 0) {
",2,1,0,1,3,0,0,0,0,3,16,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1712,"                double avg = distances / count;
",6,1,0,0,0,0,0,0,0,7,31,8,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1713,"                avg /= 24 * 60 * 60 * 1000;
",2,1,0,0,0,0,0,0,0,4,27,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1714,"                if (avg >= 25) {
",2,1,0,1,3,0,0,0,0,3,16,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1721,"                    return true;
",0,0,0,0,0,1,0,0,0,1,12,9,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,1725,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,754,"            return iOfYear;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,761,"            return iOfYear.next(instant, standardOffset, saveMillis);
",0,0,0,1,2,1,10,0,0,10,57,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,768,"            return iOfYear.previous(instant, standardOffset, saveMillis);
",0,0,0,1,2,1,10,0,0,10,61,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,772,"            return iNameKey;
",2,0,0,0,0,1,0,0,0,2,16,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,776,"            return iSaveMillis;
",2,0,0,0,0,1,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,780,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,781,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,783,"            if (obj instanceof Recurrence) {
",2,0,0,1,3,0,0,2,0,4,32,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,784,"                Recurrence other = (Recurrence)obj;
",4,0,0,1,2,0,0,4,0,8,35,7,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,785,"                return
",0,0,0,0,0,1,0,0,0,0,6,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,790,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,794,"            iOfYear.writeTo(out);
",0,0,0,1,2,0,6,0,0,6,21,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,795,"            out.writeUTF(iNameKey);
",0,0,0,1,2,0,6,0,0,6,23,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,796,"            writeMillis(out, iSaveMillis);
",0,0,0,1,2,0,6,0,0,6,30,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,797,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,800,"            return new Recurrence(iOfYear, nameKey, iSaveMillis);
",6,0,0,1,2,1,0,2,0,8,53,6,0.00000,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,14,804,"            return rename((iNameKey + appendNameKey).intern());
",4,1,0,3,6,1,4,0,0,9,51,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,56,"    public ZoneInfoProvider(File fileDir) throws IOException {
",6,0,0,1,3,1,0,2,0,9,58,2,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,57,"        if (fileDir == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,58,"            throw new IllegalArgumentException(""No file directory provided"");
",0,0,0,1,2,0,0,2,0,3,65,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,60,"        if (!fileDir.exists()) {
",0,0,0,2,5,0,4,0,0,5,24,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,61,"            throw new IOException(""File directory doesn't exist: "" + fileDir);
",2,1,0,1,2,0,0,2,0,6,66,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,63,"        if (!fileDir.isDirectory()) {
",0,0,0,2,5,0,4,0,0,5,29,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,64,"            throw new IOException(""File doesn't refer to a directory: "" + fileDir);
",2,1,0,1,2,0,0,2,0,6,71,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,67,"        iFileDir = fileDir;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,68,"        iResourcePath = null;
",2,0,0,0,0,0,0,0,0,3,21,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,69,"        iLoader = null;
",2,0,0,0,0,0,0,0,0,3,15,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,71,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));
",2,0,0,2,4,0,4,0,0,8,60,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,72,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,96,"        this(resourcePath, loader, true);
",4,0,0,1,2,0,0,0,0,5,33,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,97,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,108,"            throw new IllegalArgumentException(""No resource path provided"");
",0,0,0,1,2,0,0,2,0,3,64,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,137,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,142,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,158,"            return loadZoneData(id);
",0,0,0,1,2,1,4,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,162,"        return getZone((String)obj);
",2,0,0,2,4,1,2,2,0,6,28,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,183,"        Thread t = Thread.currentThread();
",2,0,0,1,2,0,4,2,0,8,34,4,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,184,"        t.getThreadGroup().uncaughtException(t, ex);
",0,0,0,2,4,0,10,0,0,10,44,5,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,185,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,197,"            in = new FileInputStream(new File(iFileDir, name));
",6,0,0,2,4,0,0,4,0,11,51,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,203,"                in = ClassLoader.getSystemResourceAsStream(path);
",2,0,0,1,2,0,6,0,0,9,49,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,206,"                StringBuffer buf = new StringBuffer(40)
",2,0,0,1,2,0,0,4,0,6,39,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,211,"                throw new IOException(buf.toString());
",0,0,0,2,4,0,4,2,0,6,38,9,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,239,"            } catch (IOException ex) {
",2,0,0,1,4,0,0,2,0,4,26,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,230,"        } catch (IOException ex) {
",2,0,0,1,4,0,0,2,0,4,26,6,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,231,"            uncaughtException(ex);
",0,0,0,1,2,0,4,0,0,4,22,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,232,"            iZoneInfoMap.remove(id);
",0,0,0,1,2,0,6,0,0,6,24,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,233,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,235,"            try {
",0,0,0,0,1,0,0,0,0,0,5,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,259,"            } catch (IOException ex) {
",2,0,0,1,4,0,0,2,0,4,26,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,261,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,257,"            try {
",0,0,0,0,1,0,0,0,0,0,5,3,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,285,"            } catch (ArrayIndexOutOfBoundsException ex) {
",2,0,0,1,4,0,0,2,0,4,45,8,0.00000,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,14,286,"                throw new IOException(""Corrupt zone info map"");
",0,0,0,1,2,0,0,2,0,3,47,10,0.00000,0
defect4j,time,org/joda/time/DateTimeUtils,14,399,"            return System.currentTimeMillis();
",0,0,0,1,2,1,4,0,0,4,34,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,463,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,464,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,466,"            if (obj instanceof StandardDateTimeFieldType) {
",2,0,0,1,3,0,0,2,0,4,47,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,467,"                return iOrdinal == ((StandardDateTimeFieldType) obj).iOrdinal;
",6,1,0,2,4,1,0,2,0,9,62,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,469,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,484,"                    return chronology.era();
",0,0,0,1,2,1,4,0,0,4,24,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,486,"                    return chronology.yearOfEra();
",0,0,0,1,2,1,4,0,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,488,"                    return chronology.centuryOfEra();
",0,0,0,1,2,1,4,0,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,490,"                    return chronology.yearOfCentury();
",0,0,0,1,2,1,4,0,0,4,34,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,492,"                    return chronology.year();
",0,0,0,1,2,1,4,0,0,4,25,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,494,"                    return chronology.dayOfYear();
",0,0,0,1,2,1,4,0,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,500,"                    return chronology.weekyearOfCentury();
",0,0,0,1,2,1,4,0,0,4,38,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,502,"                    return chronology.weekyear();
",0,0,0,1,2,1,4,0,0,4,29,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,504,"                    return chronology.weekOfWeekyear();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,506,"                    return chronology.dayOfWeek();
",0,0,0,1,2,1,4,0,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,508,"                    return chronology.halfdayOfDay();
",0,0,0,1,2,1,4,0,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,510,"                    return chronology.hourOfHalfday();
",0,0,0,1,2,1,4,0,0,4,34,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,512,"                    return chronology.clockhourOfHalfday();
",0,0,0,1,2,1,4,0,0,4,39,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,514,"                    return chronology.clockhourOfDay();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,516,"                    return chronology.hourOfDay();
",0,0,0,1,2,1,4,0,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,518,"                    return chronology.minuteOfDay();
",0,0,0,1,2,1,4,0,0,4,32,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,520,"                    return chronology.minuteOfHour();
",0,0,0,1,2,1,4,0,0,4,33,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,522,"                    return chronology.secondOfDay();
",0,0,0,1,2,1,4,0,0,4,32,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,524,"                    return chronology.secondOfMinute();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,526,"                    return chronology.millisOfDay();
",0,0,0,1,2,1,4,0,0,4,32,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,528,"                    return chronology.millisOfSecond();
",0,0,0,1,2,1,4,0,0,4,35,7,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,531,"                    throw new InternalError();
",0,0,0,1,2,0,0,2,0,2,26,8,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,541,"            switch (iOrdinal) {
",2,0,0,1,3,0,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,543,"                    return ERA_TYPE;
",2,0,0,0,0,1,0,0,0,2,16,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,545,"                    return YEAR_OF_ERA_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,547,"                    return CENTURY_OF_ERA_TYPE;
",2,0,0,0,0,1,0,0,0,2,27,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,549,"                    return YEAR_OF_CENTURY_TYPE;
",2,0,0,0,0,1,0,0,0,2,28,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,551,"                    return YEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,553,"                    return DAY_OF_YEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,555,"                    return MONTH_OF_YEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,557,"                    return DAY_OF_MONTH_TYPE;
",2,0,0,0,0,1,0,0,0,2,25,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,559,"                    return WEEKYEAR_OF_CENTURY_TYPE;
",2,0,0,0,0,1,0,0,0,2,32,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,561,"                    return WEEKYEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,21,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,563,"                    return WEEK_OF_WEEKYEAR_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,565,"                    return DAY_OF_WEEK_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,567,"                    return HALFDAY_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,27,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,569,"                    return HOUR_OF_HALFDAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,28,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,571,"                    return CLOCKHOUR_OF_HALFDAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,33,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,573,"                    return CLOCKHOUR_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,575,"                    return HOUR_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,24,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,577,"                    return MINUTE_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,579,"                    return MINUTE_OF_HOUR_TYPE;
",2,0,0,0,0,1,0,0,0,2,27,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,581,"                    return SECOND_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,583,"                    return SECOND_OF_MINUTE_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,585,"                    return MILLIS_OF_DAY_TYPE;
",2,0,0,0,0,1,0,0,0,2,26,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,587,"                    return MILLIS_OF_SECOND_TYPE;
",2,0,0,0,0,1,0,0,0,2,29,6,0.00000,0
defect4j,time,org/joda/time/DateTimeFieldType,14,590,"                    return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,14,266,"            if (this == obj) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,14,267,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,14,269,"            if (obj instanceof StandardDurationFieldType) {
",2,0,0,1,3,0,0,2,0,4,47,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,14,270,"                return iOrdinal == ((StandardDurationFieldType) obj).iOrdinal;
",6,1,0,2,4,1,0,2,0,9,62,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,14,272,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,14,282,"            chronology = DateTimeUtils.getChronology(chronology);
",2,0,0,1,2,0,6,0,0,9,53,5,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,14,284,"            switch (iOrdinal) {
",2,0,0,1,3,0,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,14,286,"                    return chronology.eras();
",0,0,0,1,2,1,4,0,0,4,25,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,14,288,"                    return chronology.centuries();
",0,0,0,1,2,1,4,0,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,14,290,"                    return chronology.weekyears();
",0,0,0,1,2,1,4,0,0,4,30,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,14,292,"                    return chronology.years();
",0,0,0,1,2,1,4,0,0,4,26,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,14,294,"                    return chronology.months();
",0,0,0,1,2,1,4,0,0,4,27,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,14,296,"                    return chronology.weeks();
",0,0,0,1,2,1,4,0,0,4,26,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,14,298,"                    return chronology.days();
",0,0,0,1,2,1,4,0,0,4,25,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,14,300,"                    return chronology.halfdays();
",0,0,0,1,2,1,4,0,0,4,29,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,14,302,"                    return chronology.hours();
",0,0,0,1,2,1,4,0,0,4,26,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,14,304,"                    return chronology.minutes();
",0,0,0,1,2,1,4,0,0,4,28,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,14,306,"                    return chronology.seconds();
",0,0,0,1,2,1,4,0,0,4,28,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,14,308,"                    return chronology.millis();
",0,0,0,1,2,1,4,0,0,4,27,7,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,14,311,"                    throw new InternalError();
",0,0,0,1,2,0,0,2,0,2,26,8,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,14,321,"            switch (iOrdinal) {
",2,0,0,1,3,0,0,0,0,2,19,5,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,14,323,"                    return ERAS_TYPE;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,14,325,"                    return CENTURIES_TYPE;
",2,0,0,0,0,1,0,0,0,2,22,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,14,327,"                    return WEEKYEARS_TYPE;
",2,0,0,0,0,1,0,0,0,2,22,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,14,329,"                    return YEARS_TYPE;
",2,0,0,0,0,1,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,14,331,"                    return MONTHS_TYPE;
",2,0,0,0,0,1,0,0,0,2,19,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,14,333,"                    return WEEKS_TYPE;
",2,0,0,0,0,1,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,14,335,"                    return DAYS_TYPE;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,14,337,"                    return HALFDAYS_TYPE;
",2,0,0,0,0,1,0,0,0,2,21,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,14,339,"                    return HOURS_TYPE;
",2,0,0,0,0,1,0,0,0,2,18,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,14,341,"                    return MINUTES_TYPE;
",2,0,0,0,0,1,0,0,0,2,20,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,14,343,"                    return SECONDS_TYPE;
",2,0,0,0,0,1,0,0,0,2,20,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,14,345,"                    return MILLIS_TYPE;
",2,0,0,0,0,1,0,0,0,2,19,6,0.00000,0
defect4j,time,org/joda/time/DurationFieldType,14,348,"                    return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
